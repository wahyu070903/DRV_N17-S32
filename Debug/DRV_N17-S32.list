
DRV_N17-S32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c54  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007d68  08007d68  00008d68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e90  08007e90  00009080  2**0
                  CONTENTS
  4 .ARM          00000000  08007e90  08007e90  00009080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e90  08007e90  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e90  08007e90  00008e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e94  08007e94  00008e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007e98  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001364  20000080  08007f18  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013e4  08007f18  000093e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204e6  00000000  00000000  000090a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004144  00000000  00000000  0002958f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0002d6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001112  00000000  00000000  0002ec88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a86d  00000000  00000000  0002fd9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022f64  00000000  00000000  0004a607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000971d7  00000000  00000000  0006d56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104742  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b4  00000000  00000000  00104788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000da51  00000000  00000000  00108e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0011688d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d4c 	.word	0x08007d4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08007d4c 	.word	0x08007d4c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d76:	2afd      	cmp	r2, #253	@ 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	@ 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	@ 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	@ 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <vApplicationGetIdleTaskMemory+0x10>)
 80010b2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010b4:	4b03      	ldr	r3, [pc, #12]	@ (80010c4 <vApplicationGetIdleTaskMemory+0x14>)
 80010b6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010b8:	2380      	movs	r3, #128	@ 0x80
 80010ba:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	2000029c 	.word	0x2000029c
 80010c4:	2000009c 	.word	0x2000009c

080010c8 <i2c_reset>:
		}
		HAL_Delay(5);
	}
}

void i2c_reset(I2C_HandleTypeDef* hi2c) {
 80010c8:	b538      	push	{r3, r4, r5, lr}
 80010ca:	4604      	mov	r4, r0
	__HAL_RCC_I2C1_FORCE_RESET();
 80010cc:	4d0c      	ldr	r5, [pc, #48]	@ (8001100 <i2c_reset+0x38>)
 80010ce:	692b      	ldr	r3, [r5, #16]
 80010d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010d4:	612b      	str	r3, [r5, #16]
	HAL_Delay(10);
 80010d6:	200a      	movs	r0, #10
 80010d8:	f000 fcfa 	bl	8001ad0 <HAL_Delay>
	__HAL_RCC_I2C1_RELEASE_RESET();
 80010dc:	692b      	ldr	r3, [r5, #16]
 80010de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80010e2:	612b      	str	r3, [r5, #16]
	HAL_Delay(10);
 80010e4:	200a      	movs	r0, #10
 80010e6:	f000 fcf3 	bl	8001ad0 <HAL_Delay>
    HAL_I2C_DeInit(hi2c);
 80010ea:	4620      	mov	r0, r4
 80010ec:	f001 fcdc 	bl	8002aa8 <HAL_I2C_DeInit>
    HAL_Delay(10);
 80010f0:	200a      	movs	r0, #10
 80010f2:	f000 fced 	bl	8001ad0 <HAL_Delay>
    HAL_I2C_Init(hi2c);
 80010f6:	4620      	mov	r0, r4
 80010f8:	f001 fbf8 	bl	80028ec <HAL_I2C_Init>
}
 80010fc:	bd38      	pop	{r3, r4, r5, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <i2c_bus_recover>:

void i2c_bus_recover(I2C_HandleTypeDef* hi2c) {
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	b086      	sub	sp, #24
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	2300      	movs	r3, #0
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	9303      	str	r3, [sp, #12]
 800110e:	9304      	str	r3, [sp, #16]
 8001110:	9305      	str	r3, [sp, #20]
    uint16_t scl_pin, sda_pin;

    const uint8_t max_timeout = 100;
    static uint8_t timeout_count = 0;

    if (hi2c->Instance == I2C1) {
 8001112:	6803      	ldr	r3, [r0, #0]
 8001114:	4a24      	ldr	r2, [pc, #144]	@ (80011a8 <i2c_bus_recover+0xa4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d043      	beq.n	80011a2 <i2c_bus_recover+0x9e>
        scl_port = GPIOB;
        sda_port = GPIOB;
        scl_pin = GPIO_PIN_6;
        sda_pin = GPIO_PIN_7;
    } else if (hi2c->Instance == I2C2) {
 800111a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800111e:	4293      	cmp	r3, r2
 8001120:	d13d      	bne.n	800119e <i2c_bus_recover+0x9a>
        scl_port = GPIOB;
        sda_port = GPIOB;
        scl_pin = GPIO_PIN_10;
        sda_pin = GPIO_PIN_11;
 8001122:	f44f 6600 	mov.w	r6, #2048	@ 0x800
        scl_pin = GPIO_PIN_10;
 8001126:	f44f 6580 	mov.w	r5, #1024	@ 0x400
    } else {
        return;
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <i2c_bus_recover+0xa8>)
 800112c:	699a      	ldr	r2, [r3, #24]
 800112e:	f042 0208 	orr.w	r2, r2, #8
 8001132:	619a      	str	r2, [r3, #24]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = scl_pin | sda_pin;
 800113e:	ea45 0306 	orr.w	r3, r5, r6
 8001142:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001144:	2311      	movs	r3, #17
 8001146:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001148:	2301      	movs	r3, #1
 800114a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(scl_port, &GPIO_InitStruct);
 8001150:	a902      	add	r1, sp, #8
 8001152:	4817      	ldr	r0, [pc, #92]	@ (80011b0 <i2c_bus_recover+0xac>)
 8001154:	f000 fdbe 	bl	8001cd4 <HAL_GPIO_Init>

    while(HAL_GPIO_ReadPin(sda_port, sda_pin) == GPIO_PIN_RESET) {
 8001158:	4631      	mov	r1, r6
 800115a:	4815      	ldr	r0, [pc, #84]	@ (80011b0 <i2c_bus_recover+0xac>)
 800115c:	f000 ff46 	bl	8001fec <HAL_GPIO_ReadPin>
 8001160:	b9b8      	cbnz	r0, 8001192 <i2c_bus_recover+0x8e>
		HAL_GPIO_WritePin(scl_port, scl_pin, GPIO_PIN_SET);
 8001162:	4c13      	ldr	r4, [pc, #76]	@ (80011b0 <i2c_bus_recover+0xac>)
 8001164:	2201      	movs	r2, #1
 8001166:	4629      	mov	r1, r5
 8001168:	4620      	mov	r0, r4
 800116a:	f000 ff46 	bl	8001ffa <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f000 fcae 	bl	8001ad0 <HAL_Delay>
		HAL_GPIO_WritePin(scl_port, scl_pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	4629      	mov	r1, r5
 8001178:	4620      	mov	r0, r4
 800117a:	f000 ff3e 	bl	8001ffa <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fca6 	bl	8001ad0 <HAL_Delay>

		timeout_count ++;
 8001184:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <i2c_bus_recover+0xb0>)
 8001186:	7813      	ldrb	r3, [r2, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	7013      	strb	r3, [r2, #0]
		if(timeout_count > max_timeout) break;
 800118e:	2b64      	cmp	r3, #100	@ 0x64
 8001190:	d9e2      	bls.n	8001158 <i2c_bus_recover+0x54>
    }

    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001192:	2312      	movs	r3, #18
 8001194:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(scl_port, &GPIO_InitStruct);
 8001196:	a902      	add	r1, sp, #8
 8001198:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <i2c_bus_recover+0xac>)
 800119a:	f000 fd9b 	bl	8001cd4 <HAL_GPIO_Init>
}
 800119e:	b006      	add	sp, #24
 80011a0:	bd70      	pop	{r4, r5, r6, pc}
        sda_pin = GPIO_PIN_7;
 80011a2:	2680      	movs	r6, #128	@ 0x80
        scl_pin = GPIO_PIN_6;
 80011a4:	2540      	movs	r5, #64	@ 0x40
 80011a6:	e7c0      	b.n	800112a <i2c_bus_recover+0x26>
 80011a8:	40005400 	.word	0x40005400
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	2000033c 	.word	0x2000033c

080011b8 <StartImuTask>:
		encoder_counter = EncoderEnablePool();
	}
}

void StartImuTask(void const * argument){
	for(;;){
 80011b8:	e7fe      	b.n	80011b8 <StartImuTask>

080011ba <StartDefaultTask>:
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 80011ba:	e7fe      	b.n	80011ba <StartDefaultTask>

080011bc <MX_GPIO_Init>:
{
 80011bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011c0:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	2400      	movs	r4, #0
 80011c4:	9404      	str	r4, [sp, #16]
 80011c6:	9405      	str	r4, [sp, #20]
 80011c8:	9406      	str	r4, [sp, #24]
 80011ca:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	4b31      	ldr	r3, [pc, #196]	@ (8001294 <MX_GPIO_Init+0xd8>)
 80011ce:	699a      	ldr	r2, [r3, #24]
 80011d0:	f042 0210 	orr.w	r2, r2, #16
 80011d4:	619a      	str	r2, [r3, #24]
 80011d6:	699a      	ldr	r2, [r3, #24]
 80011d8:	f002 0210 	and.w	r2, r2, #16
 80011dc:	9200      	str	r2, [sp, #0]
 80011de:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	f042 0220 	orr.w	r2, r2, #32
 80011e6:	619a      	str	r2, [r3, #24]
 80011e8:	699a      	ldr	r2, [r3, #24]
 80011ea:	f002 0220 	and.w	r2, r2, #32
 80011ee:	9201      	str	r2, [sp, #4]
 80011f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	f042 0204 	orr.w	r2, r2, #4
 80011f8:	619a      	str	r2, [r3, #24]
 80011fa:	699a      	ldr	r2, [r3, #24]
 80011fc:	f002 0204 	and.w	r2, r2, #4
 8001200:	9202      	str	r2, [sp, #8]
 8001202:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	699a      	ldr	r2, [r3, #24]
 8001206:	f042 0208 	orr.w	r2, r2, #8
 800120a:	619a      	str	r2, [r3, #24]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	9303      	str	r3, [sp, #12]
 8001214:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001216:	f8df 9080 	ldr.w	r9, [pc, #128]	@ 8001298 <MX_GPIO_Init+0xdc>
 800121a:	4622      	mov	r2, r4
 800121c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001220:	4648      	mov	r0, r9
 8001222:	f000 feea 	bl	8001ffa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001226:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 800129c <MX_GPIO_Init+0xe0>
 800122a:	4622      	mov	r2, r4
 800122c:	2106      	movs	r1, #6
 800122e:	4640      	mov	r0, r8
 8001230:	f000 fee3 	bl	8001ffa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001234:	4d1a      	ldr	r5, [pc, #104]	@ (80012a0 <MX_GPIO_Init+0xe4>)
 8001236:	4622      	mov	r2, r4
 8001238:	2120      	movs	r1, #32
 800123a:	4628      	mov	r0, r5
 800123c:	f000 fedd 	bl	8001ffa <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001240:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001244:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2701      	movs	r7, #1
 8001248:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2602      	movs	r6, #2
 800124e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001250:	a904      	add	r1, sp, #16
 8001252:	4648      	mov	r0, r9
 8001254:	f000 fd3e 	bl	8001cd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001258:	2306      	movs	r3, #6
 800125a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	a904      	add	r1, sp, #16
 8001264:	4640      	mov	r0, r8
 8001266:	f000 fd35 	bl	8001cd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800126a:	2310      	movs	r3, #16
 800126c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	eb0d 0103 	add.w	r1, sp, r3
 8001276:	4628      	mov	r0, r5
 8001278:	f000 fd2c 	bl	8001cd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800127c:	2320      	movs	r3, #32
 800127e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	a904      	add	r1, sp, #16
 8001288:	4628      	mov	r0, r5
 800128a:	f000 fd23 	bl	8001cd4 <HAL_GPIO_Init>
}
 800128e:	b009      	add	sp, #36	@ 0x24
 8001290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001294:	40021000 	.word	0x40021000
 8001298:	40011000 	.word	0x40011000
 800129c:	40010800 	.word	0x40010800
 80012a0:	40010c00 	.word	0x40010c00

080012a4 <StartDriverTask>:
void StartDriverTask(void const * argument){
 80012a4:	b508      	push	{r3, lr}
		TMC2209_enable();
 80012a6:	f005 f9a3 	bl	80065f0 <TMC2209_enable>
		TMC2209_watchPosition(&motor_target, &encoder_counter, &motor_speed);
 80012aa:	4a03      	ldr	r2, [pc, #12]	@ (80012b8 <StartDriverTask+0x14>)
 80012ac:	4903      	ldr	r1, [pc, #12]	@ (80012bc <StartDriverTask+0x18>)
 80012ae:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <StartDriverTask+0x1c>)
 80012b0:	f005 fbbc 	bl	8006a2c <TMC2209_watchPosition>
	for(;;){
 80012b4:	e7f7      	b.n	80012a6 <StartDriverTask+0x2>
 80012b6:	bf00      	nop
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000344 	.word	0x20000344
 80012c0:	20000340 	.word	0x20000340

080012c4 <StartEncoderTask>:
void StartEncoderTask(void const * argument){
 80012c4:	b508      	push	{r3, lr}
 80012c6:	e003      	b.n	80012d0 <StartEncoderTask+0xc>
		encoder_counter = EncoderEnablePool();
 80012c8:	f004 fa50 	bl	800576c <EncoderEnablePool>
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <StartEncoderTask+0x18>)
 80012ce:	6018      	str	r0, [r3, #0]
		if(!encoderReady_f) return;
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <StartEncoderTask+0x1c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f7      	bne.n	80012c8 <StartEncoderTask+0x4>
}
 80012d8:	bd08      	pop	{r3, pc}
 80012da:	bf00      	nop
 80012dc:	20000344 	.word	0x20000344
 80012e0:	2000033d 	.word	0x2000033d

080012e4 <suspendTaskEcpectSelf>:
void suspendTaskEcpectSelf(){
 80012e4:	b508      	push	{r3, lr}
	vTaskSuspend(driverTaskHandler);
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <suspendTaskEcpectSelf+0x1c>)
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	f004 fe7d 	bl	8005fe8 <vTaskSuspend>
	vTaskSuspend(encoderTaskHandler);
 80012ee:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <suspendTaskEcpectSelf+0x20>)
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	f004 fe79 	bl	8005fe8 <vTaskSuspend>
	vTaskSuspend(imuTaskHandler);
 80012f6:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <suspendTaskEcpectSelf+0x24>)
 80012f8:	6818      	ldr	r0, [r3, #0]
 80012fa:	f004 fe75 	bl	8005fe8 <vTaskSuspend>
}
 80012fe:	bd08      	pop	{r3, pc}
 8001300:	20000354 	.word	0x20000354
 8001304:	20000350 	.word	0x20000350
 8001308:	2000034c 	.word	0x2000034c

0800130c <StartWatcherTask>:
void StartWatcherTask(void const * argument){
 800130c:	b508      	push	{r3, lr}
 800130e:	e001      	b.n	8001314 <StartWatcherTask+0x8>
		displaySysStat();
 8001310:	f000 fb70 	bl	80019f4 <displaySysStat>
		if(getSysStatus() == WATCHER_ERROR && cycleErr == FALSE){
 8001314:	f000 fb68 	bl	80019e8 <getSysStatus>
 8001318:	2801      	cmp	r0, #1
 800131a:	d1f9      	bne.n	8001310 <StartWatcherTask+0x4>
 800131c:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <StartWatcherTask+0x24>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f5      	bne.n	8001310 <StartWatcherTask+0x4>
			cycleErr = TRUE;
 8001324:	4b02      	ldr	r3, [pc, #8]	@ (8001330 <StartWatcherTask+0x24>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
			suspendTaskEcpectSelf();
 800132a:	f7ff ffdb 	bl	80012e4 <suspendTaskEcpectSelf>
 800132e:	e7ef      	b.n	8001310 <StartWatcherTask+0x4>
 8001330:	2000033e 	.word	0x2000033e

08001334 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001334:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001336:	6802      	ldr	r2, [r0, #0]
 8001338:	4b03      	ldr	r3, [pc, #12]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800133a:	429a      	cmp	r2, r3
 800133c:	d000      	beq.n	8001340 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800133e:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001340:	f000 fbb4 	bl	8001aac <HAL_IncTick>
}
 8001344:	e7fb      	b.n	800133e <HAL_TIM_PeriodElapsedCallback+0xa>
 8001346:	bf00      	nop
 8001348:	40012c00 	.word	0x40012c00

0800134c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134e:	e7fe      	b.n	800134e <Error_Handler+0x2>

08001350 <MX_I2C1_Init>:
{
 8001350:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8001352:	480a      	ldr	r0, [pc, #40]	@ (800137c <MX_I2C1_Init+0x2c>)
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <MX_I2C1_Init+0x30>)
 8001356:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <MX_I2C1_Init+0x34>)
 800135a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800135c:	2300      	movs	r3, #0
 800135e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001360:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001362:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001366:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001368:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800136a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800136c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001370:	f001 fabc 	bl	80028ec <HAL_I2C_Init>
 8001374:	b900      	cbnz	r0, 8001378 <MX_I2C1_Init+0x28>
}
 8001376:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001378:	f7ff ffe8 	bl	800134c <Error_Handler>
 800137c:	20000440 	.word	0x20000440
 8001380:	40005400 	.word	0x40005400
 8001384:	00061a80 	.word	0x00061a80

08001388 <MX_TIM2_Init>:
{
 8001388:	b500      	push	{lr}
 800138a:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	2300      	movs	r3, #0
 800138e:	9308      	str	r3, [sp, #32]
 8001390:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	9302      	str	r3, [sp, #8]
 8001396:	9303      	str	r3, [sp, #12]
 8001398:	9304      	str	r3, [sp, #16]
 800139a:	9305      	str	r3, [sp, #20]
 800139c:	9306      	str	r3, [sp, #24]
 800139e:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 80013a0:	4816      	ldr	r0, [pc, #88]	@ (80013fc <MX_TIM2_Init+0x74>)
 80013a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013a6:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 72 - 1;
 80013a8:	2247      	movs	r2, #71	@ 0x47
 80013aa:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ac:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4 - 1;
 80013ae:	2203      	movs	r2, #3
 80013b0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013b6:	f003 fa09 	bl	80047cc <HAL_TIM_PWM_Init>
 80013ba:	b9c8      	cbnz	r0, 80013f0 <MX_TIM2_Init+0x68>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c2:	a908      	add	r1, sp, #32
 80013c4:	480d      	ldr	r0, [pc, #52]	@ (80013fc <MX_TIM2_Init+0x74>)
 80013c6:	f003 fbe9 	bl	8004b9c <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	b998      	cbnz	r0, 80013f4 <MX_TIM2_Init+0x6c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013cc:	2360      	movs	r3, #96	@ 0x60
 80013ce:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 50;
 80013d0:	2332      	movs	r3, #50	@ 0x32
 80013d2:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d4:	2200      	movs	r2, #0
 80013d6:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d8:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013da:	a901      	add	r1, sp, #4
 80013dc:	4807      	ldr	r0, [pc, #28]	@ (80013fc <MX_TIM2_Init+0x74>)
 80013de:	f003 fa4f 	bl	8004880 <HAL_TIM_PWM_ConfigChannel>
 80013e2:	b948      	cbnz	r0, 80013f8 <MX_TIM2_Init+0x70>
  HAL_TIM_MspPostInit(&htim2);
 80013e4:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_TIM2_Init+0x74>)
 80013e6:	f000 fa0d 	bl	8001804 <HAL_TIM_MspPostInit>
}
 80013ea:	b00b      	add	sp, #44	@ 0x2c
 80013ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80013f0:	f7ff ffac 	bl	800134c <Error_Handler>
    Error_Handler();
 80013f4:	f7ff ffaa 	bl	800134c <Error_Handler>
    Error_Handler();
 80013f8:	f7ff ffa8 	bl	800134c <Error_Handler>
 80013fc:	200003a4 	.word	0x200003a4

08001400 <MX_USART1_UART_Init>:
{
 8001400:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001402:	480a      	ldr	r0, [pc, #40]	@ (800142c <MX_USART1_UART_Init+0x2c>)
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <MX_USART1_UART_Init+0x30>)
 8001406:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 230400;
 8001408:	f44f 3361 	mov.w	r3, #230400	@ 0x38400
 800140c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	2300      	movs	r3, #0
 8001410:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001412:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001414:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001416:	220c      	movs	r2, #12
 8001418:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	61c3      	str	r3, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800141e:	f003 fce0 	bl	8004de2 <HAL_HalfDuplex_Init>
 8001422:	b900      	cbnz	r0, 8001426 <MX_USART1_UART_Init+0x26>
}
 8001424:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001426:	f7ff ff91 	bl	800134c <Error_Handler>
 800142a:	bf00      	nop
 800142c:	2000035c 	.word	0x2000035c
 8001430:	40013800 	.word	0x40013800

08001434 <MX_I2C2_Init>:
{
 8001434:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8001436:	480a      	ldr	r0, [pc, #40]	@ (8001460 <MX_I2C2_Init+0x2c>)
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <MX_I2C2_Init+0x30>)
 800143a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <MX_I2C2_Init+0x34>)
 800143e:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001440:	2300      	movs	r3, #0
 8001442:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001444:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001446:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800144a:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800144c:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800144e:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001450:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001452:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001454:	f001 fa4a 	bl	80028ec <HAL_I2C_Init>
 8001458:	b900      	cbnz	r0, 800145c <MX_I2C2_Init+0x28>
}
 800145a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800145c:	f7ff ff76 	bl	800134c <Error_Handler>
 8001460:	200003ec 	.word	0x200003ec
 8001464:	40005800 	.word	0x40005800
 8001468:	000186a0 	.word	0x000186a0

0800146c <SystemClock_Config>:
{
 800146c:	b500      	push	{lr}
 800146e:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001470:	2228      	movs	r2, #40	@ 0x28
 8001472:	2100      	movs	r1, #0
 8001474:	a806      	add	r0, sp, #24
 8001476:	f005 fbfd 	bl	8006c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147a:	2300      	movs	r3, #0
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	9303      	str	r3, [sp, #12]
 8001482:	9304      	str	r3, [sp, #16]
 8001484:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001486:	2201      	movs	r2, #1
 8001488:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800148a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800148e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001490:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001492:	2202      	movs	r2, #2
 8001494:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001496:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001498:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800149c:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149e:	a806      	add	r0, sp, #24
 80014a0:	f002 fc96 	bl	8003dd0 <HAL_RCC_OscConfig>
 80014a4:	b980      	cbnz	r0, 80014c8 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a6:	230f      	movs	r3, #15
 80014a8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014aa:	2102      	movs	r1, #2
 80014ac:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014b6:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b8:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014ba:	a801      	add	r0, sp, #4
 80014bc:	f002 feba 	bl	8004234 <HAL_RCC_ClockConfig>
 80014c0:	b920      	cbnz	r0, 80014cc <SystemClock_Config+0x60>
}
 80014c2:	b011      	add	sp, #68	@ 0x44
 80014c4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80014c8:	f7ff ff40 	bl	800134c <Error_Handler>
    Error_Handler();
 80014cc:	f7ff ff3e 	bl	800134c <Error_Handler>

080014d0 <main>:
{
 80014d0:	b530      	push	{r4, r5, lr}
 80014d2:	b0a5      	sub	sp, #148	@ 0x94
  HAL_Init();
 80014d4:	f000 fad8 	bl	8001a88 <HAL_Init>
  SystemClock_Config();
 80014d8:	f7ff ffc8 	bl	800146c <SystemClock_Config>
  MX_GPIO_Init();
 80014dc:	f7ff fe6e 	bl	80011bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80014e0:	f7ff ff36 	bl	8001350 <MX_I2C1_Init>
  MX_TIM2_Init();
 80014e4:	f7ff ff50 	bl	8001388 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80014e8:	f7ff ff8a 	bl	8001400 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80014ec:	f7ff ffa2 	bl	8001434 <MX_I2C2_Init>
  i2c_bus_recover(&hi2c1);
 80014f0:	4d3d      	ldr	r5, [pc, #244]	@ (80015e8 <main+0x118>)
 80014f2:	4628      	mov	r0, r5
 80014f4:	f7ff fe06 	bl	8001104 <i2c_bus_recover>
  i2c_bus_recover(&hi2c2);
 80014f8:	4c3c      	ldr	r4, [pc, #240]	@ (80015ec <main+0x11c>)
 80014fa:	4620      	mov	r0, r4
 80014fc:	f7ff fe02 	bl	8001104 <i2c_bus_recover>
  i2c_reset(&hi2c1);
 8001500:	4628      	mov	r0, r5
 8001502:	f7ff fde1 	bl	80010c8 <i2c_reset>
  i2c_reset(&hi2c2);
 8001506:	4620      	mov	r0, r4
 8001508:	f7ff fdde 	bl	80010c8 <i2c_reset>
  HAL_I2C_Init(&hi2c1);
 800150c:	4628      	mov	r0, r5
 800150e:	f001 f9ed 	bl	80028ec <HAL_I2C_Init>
  HAL_I2C_Init(&hi2c2);
 8001512:	4620      	mov	r0, r4
 8001514:	f001 f9ea 	bl	80028ec <HAL_I2C_Init>
  TMC2209_setup();
 8001518:	f005 f8a6 	bl	8006668 <TMC2209_setup>
  HAL_StatusTypeDef encoderStatus =  EncoderInit();
 800151c:	f004 f8fc 	bl	8005718 <EncoderInit>
  if(encoderStatus == HAL_OK) encoderReady_f = TRUE;
 8001520:	b910      	cbnz	r0, 8001528 <main+0x58>
 8001522:	4b33      	ldr	r3, [pc, #204]	@ (80015f0 <main+0x120>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
  TMC2209_setMicrostep(TMC2209_Microsteps_1);
 8001528:	2008      	movs	r0, #8
 800152a:	f005 f8e5 	bl	80066f8 <TMC2209_setMicrostep>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800152e:	4c31      	ldr	r4, [pc, #196]	@ (80015f4 <main+0x124>)
 8001530:	f10d 0c74 	add.w	ip, sp, #116	@ 0x74
 8001534:	46a6      	mov	lr, r4
 8001536:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800153a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800153e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001542:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001546:	2100      	movs	r1, #0
 8001548:	a81d      	add	r0, sp, #116	@ 0x74
 800154a:	f004 f986 	bl	800585a <osThreadCreate>
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <main+0x128>)
 8001550:	6018      	str	r0, [r3, #0]
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 8001552:	f10d 0c58 	add.w	ip, sp, #88	@ 0x58
 8001556:	f104 0e1c 	add.w	lr, r4, #28
 800155a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800155e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001562:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001566:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 800156a:	2100      	movs	r1, #0
 800156c:	a816      	add	r0, sp, #88	@ 0x58
 800156e:	f004 f974 	bl	800585a <osThreadCreate>
 8001572:	4b22      	ldr	r3, [pc, #136]	@ (80015fc <main+0x12c>)
 8001574:	6018      	str	r0, [r3, #0]
  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 8001576:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800157a:	f104 0e38 	add.w	lr, r4, #56	@ 0x38
 800157e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001582:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001586:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800158a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 800158e:	2100      	movs	r1, #0
 8001590:	a80f      	add	r0, sp, #60	@ 0x3c
 8001592:	f004 f962 	bl	800585a <osThreadCreate>
 8001596:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <main+0x130>)
 8001598:	6018      	str	r0, [r3, #0]
  osThreadDef(imuTask, StartImuTask, osPriorityNormal, 0, 128);
 800159a:	f10d 0c20 	add.w	ip, sp, #32
 800159e:	f104 0e54 	add.w	lr, r4, #84	@ 0x54
 80015a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80015a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80015aa:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80015ae:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  imuTaskHandler = osThreadCreate(osThread(imuTask), NULL);
 80015b2:	2100      	movs	r1, #0
 80015b4:	a808      	add	r0, sp, #32
 80015b6:	f004 f950 	bl	800585a <osThreadCreate>
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <main+0x134>)
 80015bc:	6018      	str	r0, [r3, #0]
  osThreadDef(watcherTask, StartWatcherTask, osPriorityNormal, 0, 128);
 80015be:	f10d 0e04 	add.w	lr, sp, #4
 80015c2:	f104 0c70 	add.w	ip, r4, #112	@ 0x70
 80015c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80015ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80015ce:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80015d2:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  watcherTaskHandler = osThreadCreate(osThread(watcherTask), NULL);
 80015d6:	2100      	movs	r1, #0
 80015d8:	a801      	add	r0, sp, #4
 80015da:	f004 f93e 	bl	800585a <osThreadCreate>
 80015de:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <main+0x138>)
 80015e0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80015e2:	f004 f935 	bl	8005850 <osKernelStart>
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <main+0x116>
 80015e8:	20000440 	.word	0x20000440
 80015ec:	200003ec 	.word	0x200003ec
 80015f0:	2000033d 	.word	0x2000033d
 80015f4:	08007d68 	.word	0x08007d68
 80015f8:	20000358 	.word	0x20000358
 80015fc:	20000354 	.word	0x20000354
 8001600:	20000350 	.word	0x20000350
 8001604:	2000034c 	.word	0x2000034c
 8001608:	20000348 	.word	0x20000348

0800160c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b500      	push	{lr}
 800160e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <HAL_MspInit+0x4c>)
 8001612:	699a      	ldr	r2, [r3, #24]
 8001614:	f042 0201 	orr.w	r2, r2, #1
 8001618:	619a      	str	r2, [r3, #24]
 800161a:	699a      	ldr	r2, [r3, #24]
 800161c:	f002 0201 	and.w	r2, r2, #1
 8001620:	9200      	str	r2, [sp, #0]
 8001622:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800162a:	61da      	str	r2, [r3, #28]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	210f      	movs	r1, #15
 800163a:	f06f 0001 	mvn.w	r0, #1
 800163e:	f000 fab3 	bl	8001ba8 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8001642:	4a06      	ldr	r2, [pc, #24]	@ (800165c <HAL_MspInit+0x50>)
 8001644:	6853      	ldr	r3, [r2, #4]
 8001646:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800164a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800164e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001650:	b003      	add	sp, #12
 8001652:	f85d fb04 	ldr.w	pc, [sp], #4
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	40010000 	.word	0x40010000

08001660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001660:	b510      	push	{r4, lr}
 8001662:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	2300      	movs	r3, #0
 8001666:	9304      	str	r3, [sp, #16]
 8001668:	9305      	str	r3, [sp, #20]
 800166a:	9306      	str	r3, [sp, #24]
 800166c:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 800166e:	6803      	ldr	r3, [r0, #0]
 8001670:	4a32      	ldr	r2, [pc, #200]	@ (800173c <HAL_I2C_MspInit+0xdc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d004      	beq.n	8001680 <HAL_I2C_MspInit+0x20>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8001676:	4a32      	ldr	r2, [pc, #200]	@ (8001740 <HAL_I2C_MspInit+0xe0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d02f      	beq.n	80016dc <HAL_I2C_MspInit+0x7c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800167c:	b008      	add	sp, #32
 800167e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	4c30      	ldr	r4, [pc, #192]	@ (8001744 <HAL_I2C_MspInit+0xe4>)
 8001682:	69a3      	ldr	r3, [r4, #24]
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	61a3      	str	r3, [r4, #24]
 800168a:	69a3      	ldr	r3, [r4, #24]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001694:	23c0      	movs	r3, #192	@ 0xc0
 8001696:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001698:	2312      	movs	r3, #18
 800169a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800169c:	2303      	movs	r3, #3
 800169e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	a904      	add	r1, sp, #16
 80016a2:	4829      	ldr	r0, [pc, #164]	@ (8001748 <HAL_I2C_MspInit+0xe8>)
 80016a4:	f000 fb16 	bl	8001cd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a8:	69e3      	ldr	r3, [r4, #28]
 80016aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ae:	61e3      	str	r3, [r4, #28]
 80016b0:	69e3      	ldr	r3, [r4, #28]
 80016b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2105      	movs	r1, #5
 80016be:	201f      	movs	r0, #31
 80016c0:	f000 fa72 	bl	8001ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016c4:	201f      	movs	r0, #31
 80016c6:	f000 fa7f 	bl	8001bc8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2105      	movs	r1, #5
 80016ce:	2020      	movs	r0, #32
 80016d0:	f000 fa6a 	bl	8001ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016d4:	2020      	movs	r0, #32
 80016d6:	f000 fa77 	bl	8001bc8 <HAL_NVIC_EnableIRQ>
 80016da:	e7cf      	b.n	800167c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016dc:	4c19      	ldr	r4, [pc, #100]	@ (8001744 <HAL_I2C_MspInit+0xe4>)
 80016de:	69a3      	ldr	r3, [r4, #24]
 80016e0:	f043 0308 	orr.w	r3, r3, #8
 80016e4:	61a3      	str	r3, [r4, #24]
 80016e6:	69a3      	ldr	r3, [r4, #24]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	9302      	str	r3, [sp, #8]
 80016ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f6:	2312      	movs	r3, #18
 80016f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	a904      	add	r1, sp, #16
 8001700:	4811      	ldr	r0, [pc, #68]	@ (8001748 <HAL_I2C_MspInit+0xe8>)
 8001702:	f000 fae7 	bl	8001cd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001706:	69e3      	ldr	r3, [r4, #28]
 8001708:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800170c:	61e3      	str	r3, [r4, #28]
 800170e:	69e3      	ldr	r3, [r4, #28]
 8001710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001714:	9303      	str	r3, [sp, #12]
 8001716:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2105      	movs	r1, #5
 800171c:	2021      	movs	r0, #33	@ 0x21
 800171e:	f000 fa43 	bl	8001ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001722:	2021      	movs	r0, #33	@ 0x21
 8001724:	f000 fa50 	bl	8001bc8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2105      	movs	r1, #5
 800172c:	2022      	movs	r0, #34	@ 0x22
 800172e:	f000 fa3b 	bl	8001ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001732:	2022      	movs	r0, #34	@ 0x22
 8001734:	f000 fa48 	bl	8001bc8 <HAL_NVIC_EnableIRQ>
}
 8001738:	e7a0      	b.n	800167c <HAL_I2C_MspInit+0x1c>
 800173a:	bf00      	nop
 800173c:	40005400 	.word	0x40005400
 8001740:	40005800 	.word	0x40005800
 8001744:	40021000 	.word	0x40021000
 8001748:	40010c00 	.word	0x40010c00

0800174c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800174c:	b510      	push	{r4, lr}
  if(hi2c->Instance==I2C1)
 800174e:	6803      	ldr	r3, [r0, #0]
 8001750:	4a1a      	ldr	r2, [pc, #104]	@ (80017bc <HAL_I2C_MspDeInit+0x70>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d003      	beq.n	800175e <HAL_I2C_MspDeInit+0x12>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8001756:	4a1a      	ldr	r2, [pc, #104]	@ (80017c0 <HAL_I2C_MspDeInit+0x74>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d016      	beq.n	800178a <HAL_I2C_MspDeInit+0x3e>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800175c:	bd10      	pop	{r4, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 800175e:	f502 32de 	add.w	r2, r2, #113664	@ 0x1bc00
 8001762:	69d3      	ldr	r3, [r2, #28]
 8001764:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001768:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800176a:	4c16      	ldr	r4, [pc, #88]	@ (80017c4 <HAL_I2C_MspDeInit+0x78>)
 800176c:	2140      	movs	r1, #64	@ 0x40
 800176e:	4620      	mov	r0, r4
 8001770:	f000 fbbe 	bl	8001ef0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001774:	2180      	movs	r1, #128	@ 0x80
 8001776:	4620      	mov	r0, r4
 8001778:	f000 fbba 	bl	8001ef0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800177c:	201f      	movs	r0, #31
 800177e:	f000 fa31 	bl	8001be4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001782:	2020      	movs	r0, #32
 8001784:	f000 fa2e 	bl	8001be4 <HAL_NVIC_DisableIRQ>
 8001788:	e7e8      	b.n	800175c <HAL_I2C_MspDeInit+0x10>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800178a:	f502 32dc 	add.w	r2, r2, #112640	@ 0x1b800
 800178e:	69d3      	ldr	r3, [r2, #28]
 8001790:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001794:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001796:	4c0b      	ldr	r4, [pc, #44]	@ (80017c4 <HAL_I2C_MspDeInit+0x78>)
 8001798:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800179c:	4620      	mov	r0, r4
 800179e:	f000 fba7 	bl	8001ef0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80017a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017a6:	4620      	mov	r0, r4
 80017a8:	f000 fba2 	bl	8001ef0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80017ac:	2021      	movs	r0, #33	@ 0x21
 80017ae:	f000 fa19 	bl	8001be4 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80017b2:	2022      	movs	r0, #34	@ 0x22
 80017b4:	f000 fa16 	bl	8001be4 <HAL_NVIC_DisableIRQ>
}
 80017b8:	e7d0      	b.n	800175c <HAL_I2C_MspDeInit+0x10>
 80017ba:	bf00      	nop
 80017bc:	40005400 	.word	0x40005400
 80017c0:	40005800 	.word	0x40005800
 80017c4:	40010c00 	.word	0x40010c00

080017c8 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 80017c8:	6803      	ldr	r3, [r0, #0]
 80017ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017ce:	d000      	beq.n	80017d2 <HAL_TIM_PWM_MspInit+0xa>
 80017d0:	4770      	bx	lr
{
 80017d2:	b500      	push	{lr}
 80017d4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017d6:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80017da:	69da      	ldr	r2, [r3, #28]
 80017dc:	f042 0201 	orr.w	r2, r2, #1
 80017e0:	61da      	str	r2, [r3, #28]
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2105      	movs	r1, #5
 80017f0:	201c      	movs	r0, #28
 80017f2:	f000 f9d9 	bl	8001ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017f6:	201c      	movs	r0, #28
 80017f8:	f000 f9e6 	bl	8001bc8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80017fc:	b003      	add	sp, #12
 80017fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001804:	b500      	push	{lr}
 8001806:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	2300      	movs	r3, #0
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	9303      	str	r3, [sp, #12]
 800180e:	9304      	str	r3, [sp, #16]
 8001810:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 8001812:	6803      	ldr	r3, [r0, #0]
 8001814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001818:	d002      	beq.n	8001820 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800181a:	b007      	add	sp, #28
 800181c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	f042 0204 	orr.w	r2, r2, #4
 800182a:	619a      	str	r2, [r3, #24]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001836:	2301      	movs	r3, #1
 8001838:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	a902      	add	r1, sp, #8
 8001842:	4802      	ldr	r0, [pc, #8]	@ (800184c <HAL_TIM_MspPostInit+0x48>)
 8001844:	f000 fa46 	bl	8001cd4 <HAL_GPIO_Init>
}
 8001848:	e7e7      	b.n	800181a <HAL_TIM_MspPostInit+0x16>
 800184a:	bf00      	nop
 800184c:	40010800 	.word	0x40010800

08001850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001850:	b500      	push	{lr}
 8001852:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	2300      	movs	r3, #0
 8001856:	9302      	str	r3, [sp, #8]
 8001858:	9303      	str	r3, [sp, #12]
 800185a:	9304      	str	r3, [sp, #16]
 800185c:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART1)
 800185e:	6802      	ldr	r2, [r0, #0]
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <HAL_UART_MspInit+0x6c>)
 8001862:	429a      	cmp	r2, r3
 8001864:	d002      	beq.n	800186c <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001866:	b007      	add	sp, #28
 8001868:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 800186c:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001876:	619a      	str	r2, [r3, #24]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800187e:	9200      	str	r2, [sp, #0]
 8001880:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	699a      	ldr	r2, [r3, #24]
 8001884:	f042 0204 	orr.w	r2, r2, #4
 8001888:	619a      	str	r2, [r3, #24]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001894:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001898:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189a:	2312      	movs	r3, #18
 800189c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a2:	a902      	add	r1, sp, #8
 80018a4:	4806      	ldr	r0, [pc, #24]	@ (80018c0 <HAL_UART_MspInit+0x70>)
 80018a6:	f000 fa15 	bl	8001cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2105      	movs	r1, #5
 80018ae:	2025      	movs	r0, #37	@ 0x25
 80018b0:	f000 f97a 	bl	8001ba8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018b4:	2025      	movs	r0, #37	@ 0x25
 80018b6:	f000 f987 	bl	8001bc8 <HAL_NVIC_EnableIRQ>
}
 80018ba:	e7d4      	b.n	8001866 <HAL_UART_MspInit+0x16>
 80018bc:	40013800 	.word	0x40013800
 80018c0:	40010800 	.word	0x40010800

080018c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b530      	push	{r4, r5, lr}
 80018c6:	b089      	sub	sp, #36	@ 0x24
 80018c8:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <HAL_InitTick+0x80>)
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018d2:	619a      	str	r2, [r3, #24]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	9b01      	ldr	r3, [sp, #4]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018de:	a902      	add	r1, sp, #8
 80018e0:	a803      	add	r0, sp, #12
 80018e2:	f002 fd83 	bl	80043ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018e6:	f002 fd71 	bl	80043cc <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ea:	4a17      	ldr	r2, [pc, #92]	@ (8001948 <HAL_InitTick+0x84>)
 80018ec:	fba2 2300 	umull	r2, r3, r2, r0
 80018f0:	0c9b      	lsrs	r3, r3, #18
 80018f2:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018f4:	4815      	ldr	r0, [pc, #84]	@ (800194c <HAL_InitTick+0x88>)
 80018f6:	4a16      	ldr	r2, [pc, #88]	@ (8001950 <HAL_InitTick+0x8c>)
 80018f8:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80018fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018fe:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001900:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001906:	6083      	str	r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001908:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800190a:	f002 ff33 	bl	8004774 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800190e:	4605      	mov	r5, r0
 8001910:	b110      	cbz	r0, 8001918 <HAL_InitTick+0x54>
    }
  }

 /* Return function status */
  return status;
}
 8001912:	4628      	mov	r0, r5
 8001914:	b009      	add	sp, #36	@ 0x24
 8001916:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001918:	480c      	ldr	r0, [pc, #48]	@ (800194c <HAL_InitTick+0x88>)
 800191a:	f002 fe03 	bl	8004524 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800191e:	4605      	mov	r5, r0
 8001920:	2800      	cmp	r0, #0
 8001922:	d1f6      	bne.n	8001912 <HAL_InitTick+0x4e>
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001924:	2019      	movs	r0, #25
 8001926:	f000 f94f 	bl	8001bc8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	2c0f      	cmp	r4, #15
 800192c:	d901      	bls.n	8001932 <HAL_InitTick+0x6e>
        status = HAL_ERROR;
 800192e:	2501      	movs	r5, #1
 8001930:	e7ef      	b.n	8001912 <HAL_InitTick+0x4e>
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001932:	2200      	movs	r2, #0
 8001934:	4621      	mov	r1, r4
 8001936:	2019      	movs	r0, #25
 8001938:	f000 f936 	bl	8001ba8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <HAL_InitTick+0x90>)
 800193e:	601c      	str	r4, [r3, #0]
 8001940:	e7e7      	b.n	8001912 <HAL_InitTick+0x4e>
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	431bde83 	.word	0x431bde83
 800194c:	20000494 	.word	0x20000494
 8001950:	40012c00 	.word	0x40012c00
 8001954:	2000000c 	.word	0x2000000c

08001958 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001958:	e7fe      	b.n	8001958 <NMI_Handler>

0800195a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler>

0800195c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <MemManage_Handler>

0800195e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <BusFault_Handler>

08001960 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler>

08001962 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001962:	4770      	bx	lr

08001964 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001964:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001966:	4802      	ldr	r0, [pc, #8]	@ (8001970 <TIM1_UP_IRQHandler+0xc>)
 8001968:	f002 fe13 	bl	8004592 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800196c:	bd08      	pop	{r3, pc}
 800196e:	bf00      	nop
 8001970:	20000494 	.word	0x20000494

08001974 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001974:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001976:	4802      	ldr	r0, [pc, #8]	@ (8001980 <TIM2_IRQHandler+0xc>)
 8001978:	f002 fe0b 	bl	8004592 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800197c:	bd08      	pop	{r3, pc}
 800197e:	bf00      	nop
 8001980:	200003a4 	.word	0x200003a4

08001984 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001984:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001986:	4802      	ldr	r0, [pc, #8]	@ (8001990 <I2C1_EV_IRQHandler+0xc>)
 8001988:	f002 f8d8 	bl	8003b3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800198c:	bd08      	pop	{r3, pc}
 800198e:	bf00      	nop
 8001990:	20000440 	.word	0x20000440

08001994 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001994:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001996:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <I2C1_ER_IRQHandler+0xc>)
 8001998:	f002 f9a0 	bl	8003cdc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800199c:	bd08      	pop	{r3, pc}
 800199e:	bf00      	nop
 80019a0:	20000440 	.word	0x20000440

080019a4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80019a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80019a6:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <I2C2_EV_IRQHandler+0xc>)
 80019a8:	f002 f8c8 	bl	8003b3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80019ac:	bd08      	pop	{r3, pc}
 80019ae:	bf00      	nop
 80019b0:	200003ec 	.word	0x200003ec

080019b4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80019b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80019b6:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <I2C2_ER_IRQHandler+0xc>)
 80019b8:	f002 f990 	bl	8003cdc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80019bc:	bd08      	pop	{r3, pc}
 80019be:	bf00      	nop
 80019c0:	200003ec 	.word	0x200003ec

080019c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019c6:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <USART1_IRQHandler+0xc>)
 80019c8:	f003 fb9c 	bl	8005104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019cc:	bd08      	pop	{r3, pc}
 80019ce:	bf00      	nop
 80019d0:	2000035c 	.word	0x2000035c

080019d4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	4770      	bx	lr
	...

080019d8 <emmitSysError>:
#include "watcher.h"

WATCHER_t watcher;

void emmitSysError(WATCHER_ERR_STAT error){
	watcher.detail = WATCHER_ERROR;
 80019d8:	4b02      	ldr	r3, [pc, #8]	@ (80019e4 <emmitSysError+0xc>)
 80019da:	2201      	movs	r2, #1
 80019dc:	705a      	strb	r2, [r3, #1]
	watcher.stat = error;
 80019de:	7018      	strb	r0, [r3, #0]
};
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	200004dc 	.word	0x200004dc

080019e8 <getSysStatus>:

uint8_t getSysStatus(){
	return watcher.detail;
};
 80019e8:	4b01      	ldr	r3, [pc, #4]	@ (80019f0 <getSysStatus+0x8>)
 80019ea:	7858      	ldrb	r0, [r3, #1]
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	200004dc 	.word	0x200004dc

080019f4 <displaySysStat>:

void displaySysStat(){
 80019f4:	b510      	push	{r4, lr}
	if(watcher.stat == WATCHER_ERROR){
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <displaySysStat+0x40>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d006      	beq.n	8001a0c <displaySysStat+0x18>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_Delay(100);
	}else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a04:	480c      	ldr	r0, [pc, #48]	@ (8001a38 <displaySysStat+0x44>)
 8001a06:	f000 faf8 	bl	8001ffa <HAL_GPIO_WritePin>
	}

}
 8001a0a:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a38 <displaySysStat+0x44>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a14:	4620      	mov	r0, r4
 8001a16:	f000 faf0 	bl	8001ffa <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001a1a:	2064      	movs	r0, #100	@ 0x64
 8001a1c:	f000 f858 	bl	8001ad0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a26:	4620      	mov	r0, r4
 8001a28:	f000 fae7 	bl	8001ffa <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001a2c:	2064      	movs	r0, #100	@ 0x64
 8001a2e:	f000 f84f 	bl	8001ad0 <HAL_Delay>
 8001a32:	e7ea      	b.n	8001a0a <displaySysStat+0x16>
 8001a34:	200004dc 	.word	0x200004dc
 8001a38:	40011000 	.word	0x40011000

08001a3c <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8001a3c:	f7ff ffca 	bl	80019d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a40:	480b      	ldr	r0, [pc, #44]	@ (8001a70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a42:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a44:	4a0c      	ldr	r2, [pc, #48]	@ (8001a78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a09      	ldr	r2, [pc, #36]	@ (8001a7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a58:	4c09      	ldr	r4, [pc, #36]	@ (8001a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a66:	f005 f969 	bl	8006d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a6a:	f7ff fd31 	bl	80014d0 <main>
  bx lr
 8001a6e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a74:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001a78:	08007e98 	.word	0x08007e98
  ldr r2, =_sbss
 8001a7c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001a80:	200013e4 	.word	0x200013e4

08001a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC1_2_IRQHandler>
	...

08001a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a88:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a8a:	4a07      	ldr	r2, [pc, #28]	@ (8001aa8 <HAL_Init+0x20>)
 8001a8c:	6813      	ldr	r3, [r2, #0]
 8001a8e:	f043 0310 	orr.w	r3, r3, #16
 8001a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 f875 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	200f      	movs	r0, #15
 8001a9c:	f7ff ff12 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fdb4 	bl	800160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	bd08      	pop	{r3, pc}
 8001aa8:	40022000 	.word	0x40022000

08001aac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001aac:	4a03      	ldr	r2, [pc, #12]	@ (8001abc <HAL_IncTick+0x10>)
 8001aae:	6811      	ldr	r1, [r2, #0]
 8001ab0:	4b03      	ldr	r3, [pc, #12]	@ (8001ac0 <HAL_IncTick+0x14>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	440b      	add	r3, r1
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	200004e0 	.word	0x200004e0
 8001ac0:	20000008 	.word	0x20000008

08001ac4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ac4:	4b01      	ldr	r3, [pc, #4]	@ (8001acc <HAL_GetTick+0x8>)
 8001ac6:	6818      	ldr	r0, [r3, #0]
}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	200004e0 	.word	0x200004e0

08001ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad0:	b538      	push	{r3, r4, r5, lr}
 8001ad2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff fff6 	bl	8001ac4 <HAL_GetTick>
 8001ad8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001ade:	d002      	beq.n	8001ae6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae0:	4b04      	ldr	r3, [pc, #16]	@ (8001af4 <HAL_Delay+0x24>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ae6:	f7ff ffed 	bl	8001ac4 <HAL_GetTick>
 8001aea:	1b40      	subs	r0, r0, r5
 8001aec:	42a0      	cmp	r0, r4
 8001aee:	d3fa      	bcc.n	8001ae6 <HAL_Delay+0x16>
  {
  }
}
 8001af0:	bd38      	pop	{r3, r4, r5, pc}
 8001af2:	bf00      	nop
 8001af4:	20000008 	.word	0x20000008

08001af8 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001af8:	2800      	cmp	r0, #0
 8001afa:	db0c      	blt.n	8001b16 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afc:	f000 021f 	and.w	r2, r0, #31
 8001b00:	0940      	lsrs	r0, r0, #5
 8001b02:	2301      	movs	r3, #1
 8001b04:	4093      	lsls	r3, r2
 8001b06:	3020      	adds	r0, #32
 8001b08:	4a03      	ldr	r2, [pc, #12]	@ (8001b18 <__NVIC_DisableIRQ+0x20>)
 8001b0a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b12:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001b16:	4770      	bx	lr
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	db08      	blt.n	8001b32 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	0109      	lsls	r1, r1, #4
 8001b22:	b2c9      	uxtb	r1, r1
 8001b24:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001b28:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001b2c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001b30:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	f000 000f 	and.w	r0, r0, #15
 8001b36:	0109      	lsls	r1, r1, #4
 8001b38:	b2c9      	uxtb	r1, r1
 8001b3a:	4b01      	ldr	r3, [pc, #4]	@ (8001b40 <__NVIC_SetPriority+0x24>)
 8001b3c:	5419      	strb	r1, [r3, r0]
  }
}
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed14 	.word	0xe000ed14

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b46:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4a:	f1c0 0c07 	rsb	ip, r0, #7
 8001b4e:	f1bc 0f04 	cmp.w	ip, #4
 8001b52:	bf28      	it	cs
 8001b54:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b58:	1d03      	adds	r3, r0, #4
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d90f      	bls.n	8001b7e <NVIC_EncodePriority+0x3a>
 8001b5e:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	f04f 3eff 	mov.w	lr, #4294967295
 8001b64:	fa0e f00c 	lsl.w	r0, lr, ip
 8001b68:	ea21 0100 	bic.w	r1, r1, r0
 8001b6c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001b72:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001b76:	ea41 0002 	orr.w	r0, r1, r2
 8001b7a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e7ee      	b.n	8001b60 <NVIC_EncodePriority+0x1c>
	...

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4a07      	ldr	r2, [pc, #28]	@ (8001ba4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b86:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b88:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b90:	0200      	lsls	r0, r0, #8
 8001b92:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b96:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001ba0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ba2:	4770      	bx	lr
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba8:	b510      	push	{r4, lr}
 8001baa:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <HAL_NVIC_SetPriority+0x1c>)
 8001bae:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001bb4:	f7ff ffc6 	bl	8001b44 <NVIC_EncodePriority>
 8001bb8:	4601      	mov	r1, r0
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7ff ffae 	bl	8001b1c <__NVIC_SetPriority>
}
 8001bc0:	bd10      	pop	{r4, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	db07      	blt.n	8001bdc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bcc:	f000 021f 	and.w	r2, r0, #31
 8001bd0:	0940      	lsrs	r0, r0, #5
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	4093      	lsls	r3, r2
 8001bd6:	4a02      	ldr	r2, [pc, #8]	@ (8001be0 <HAL_NVIC_EnableIRQ+0x18>)
 8001bd8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000e100 	.word	0xe000e100

08001be4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001be4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001be6:	f7ff ff87 	bl	8001af8 <__NVIC_DisableIRQ>
}
 8001bea:	bd08      	pop	{r3, pc}

08001bec <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bec:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bee:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	2a02      	cmp	r2, #2
 8001bf6:	d006      	beq.n	8001c06 <HAL_DMA_Abort+0x1a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	6382      	str	r2, [r0, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f880 2020 	strb.w	r2, [r0, #32]
    
    return HAL_ERROR;
 8001c02:	2001      	movs	r0, #1
 8001c04:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c06:	6801      	ldr	r1, [r0, #0]
 8001c08:	680a      	ldr	r2, [r1, #0]
 8001c0a:	f022 020e 	bic.w	r2, r2, #14
 8001c0e:	600a      	str	r2, [r1, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c10:	6801      	ldr	r1, [r0, #0]
 8001c12:	680a      	ldr	r2, [r1, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	600a      	str	r2, [r1, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c1a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001c1c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8001c1e:	2101      	movs	r1, #1
 8001c20:	fa01 f202 	lsl.w	r2, r1, r2
 8001c24:	6042      	str	r2, [r0, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c26:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f883 0020 	strb.w	r0, [r3, #32]
  
  return status; 
}
 8001c30:	4770      	bx	lr
	...

08001c34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c34:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c36:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d003      	beq.n	8001c48 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c40:	2304      	movs	r3, #4
 8001c42:	6383      	str	r3, [r0, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c44:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001c46:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c48:	6802      	ldr	r2, [r0, #0]
 8001c4a:	6813      	ldr	r3, [r2, #0]
 8001c4c:	f023 030e 	bic.w	r3, r3, #14
 8001c50:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c52:	6802      	ldr	r2, [r0, #0]
 8001c54:	6813      	ldr	r3, [r2, #0]
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c5c:	6803      	ldr	r3, [r0, #0]
 8001c5e:	4a19      	ldr	r2, [pc, #100]	@ (8001cc4 <HAL_DMA_Abort_IT+0x90>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d014      	beq.n	8001c8e <HAL_DMA_Abort_IT+0x5a>
 8001c64:	3214      	adds	r2, #20
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01f      	beq.n	8001caa <HAL_DMA_Abort_IT+0x76>
 8001c6a:	3214      	adds	r2, #20
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d01e      	beq.n	8001cae <HAL_DMA_Abort_IT+0x7a>
 8001c70:	3214      	adds	r2, #20
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d01e      	beq.n	8001cb4 <HAL_DMA_Abort_IT+0x80>
 8001c76:	3214      	adds	r2, #20
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d01e      	beq.n	8001cba <HAL_DMA_Abort_IT+0x86>
 8001c7c:	3214      	adds	r2, #20
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d002      	beq.n	8001c88 <HAL_DMA_Abort_IT+0x54>
 8001c82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c86:	e003      	b.n	8001c90 <HAL_DMA_Abort_IT+0x5c>
 8001c88:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001c8c:	e000      	b.n	8001c90 <HAL_DMA_Abort_IT+0x5c>
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <HAL_DMA_Abort_IT+0x94>)
 8001c92:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001c94:	2301      	movs	r3, #1
 8001c96:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001ca0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001ca2:	b16b      	cbz	r3, 8001cc0 <HAL_DMA_Abort_IT+0x8c>
      hdma->XferAbortCallback(hdma);
 8001ca4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	e7cd      	b.n	8001c46 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001caa:	2210      	movs	r2, #16
 8001cac:	e7f0      	b.n	8001c90 <HAL_DMA_Abort_IT+0x5c>
 8001cae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cb2:	e7ed      	b.n	8001c90 <HAL_DMA_Abort_IT+0x5c>
 8001cb4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cb8:	e7ea      	b.n	8001c90 <HAL_DMA_Abort_IT+0x5c>
 8001cba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001cbe:	e7e7      	b.n	8001c90 <HAL_DMA_Abort_IT+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	e7c0      	b.n	8001c46 <HAL_DMA_Abort_IT+0x12>
 8001cc4:	40020008 	.word	0x40020008
 8001cc8:	40020000 	.word	0x40020000

08001ccc <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8001ccc:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
}
 8001cd0:	4770      	bx	lr
	...

08001cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cd8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001cda:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cdc:	e0a2      	b.n	8001e24 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cde:	4d7e      	ldr	r5, [pc, #504]	@ (8001ed8 <HAL_GPIO_Init+0x204>)
 8001ce0:	42ab      	cmp	r3, r5
 8001ce2:	d010      	beq.n	8001d06 <HAL_GPIO_Init+0x32>
 8001ce4:	d907      	bls.n	8001cf6 <HAL_GPIO_Init+0x22>
 8001ce6:	4d7d      	ldr	r5, [pc, #500]	@ (8001edc <HAL_GPIO_Init+0x208>)
 8001ce8:	42ab      	cmp	r3, r5
 8001cea:	d00c      	beq.n	8001d06 <HAL_GPIO_Init+0x32>
 8001cec:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8001cf0:	42ab      	cmp	r3, r5
 8001cf2:	d008      	beq.n	8001d06 <HAL_GPIO_Init+0x32>
 8001cf4:	e013      	b.n	8001d1e <HAL_GPIO_Init+0x4a>
 8001cf6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001cfa:	42ab      	cmp	r3, r5
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x32>
 8001cfe:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8001d02:	42ab      	cmp	r3, r5
 8001d04:	d107      	bne.n	8001d16 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d06:	688b      	ldr	r3, [r1, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d055      	beq.n	8001db8 <HAL_GPIO_Init+0xe4>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d04e      	beq.n	8001dae <HAL_GPIO_Init+0xda>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001d10:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d12:	2408      	movs	r4, #8
 8001d14:	e003      	b.n	8001d1e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8001d16:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001d1a:	42ab      	cmp	r3, r5
 8001d1c:	d0f3      	beq.n	8001d06 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d1e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8001d22:	d84b      	bhi.n	8001dbc <HAL_GPIO_Init+0xe8>
 8001d24:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d26:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d2a:	6833      	ldr	r3, [r6, #0]
 8001d2c:	250f      	movs	r5, #15
 8001d2e:	4095      	lsls	r5, r2
 8001d30:	ea23 0305 	bic.w	r3, r3, r5
 8001d34:	fa04 f202 	lsl.w	r2, r4, r2
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d3c:	684b      	ldr	r3, [r1, #4]
 8001d3e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001d42:	d06d      	beq.n	8001e20 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d44:	4b66      	ldr	r3, [pc, #408]	@ (8001ee0 <HAL_GPIO_Init+0x20c>)
 8001d46:	699a      	ldr	r2, [r3, #24]
 8001d48:	f042 0201 	orr.w	r2, r2, #1
 8001d4c:	619a      	str	r2, [r3, #24]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001d58:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8001d5c:	1c95      	adds	r5, r2, #2
 8001d5e:	4b61      	ldr	r3, [pc, #388]	@ (8001ee4 <HAL_GPIO_Init+0x210>)
 8001d60:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d64:	f00c 0503 	and.w	r5, ip, #3
 8001d68:	00ad      	lsls	r5, r5, #2
 8001d6a:	230f      	movs	r3, #15
 8001d6c:	40ab      	lsls	r3, r5
 8001d6e:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d72:	4b5d      	ldr	r3, [pc, #372]	@ (8001ee8 <HAL_GPIO_Init+0x214>)
 8001d74:	4298      	cmp	r0, r3
 8001d76:	d028      	beq.n	8001dca <HAL_GPIO_Init+0xf6>
 8001d78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d7c:	4298      	cmp	r0, r3
 8001d7e:	f000 808d 	beq.w	8001e9c <HAL_GPIO_Init+0x1c8>
 8001d82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d86:	4298      	cmp	r0, r3
 8001d88:	f000 808a 	beq.w	8001ea0 <HAL_GPIO_Init+0x1cc>
 8001d8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d90:	4298      	cmp	r0, r3
 8001d92:	d018      	beq.n	8001dc6 <HAL_GPIO_Init+0xf2>
 8001d94:	2304      	movs	r3, #4
 8001d96:	e019      	b.n	8001dcc <HAL_GPIO_Init+0xf8>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d98:	68cc      	ldr	r4, [r1, #12]
          break;
 8001d9a:	e7c0      	b.n	8001d1e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d9c:	68cc      	ldr	r4, [r1, #12]
 8001d9e:	3404      	adds	r4, #4
          break;
 8001da0:	e7bd      	b.n	8001d1e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001da2:	68cc      	ldr	r4, [r1, #12]
 8001da4:	3408      	adds	r4, #8
          break;
 8001da6:	e7ba      	b.n	8001d1e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da8:	68cc      	ldr	r4, [r1, #12]
 8001daa:	340c      	adds	r4, #12
          break;
 8001dac:	e7b7      	b.n	8001d1e <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8001dae:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db0:	2408      	movs	r4, #8
 8001db2:	e7b4      	b.n	8001d1e <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001db4:	2400      	movs	r4, #0
 8001db6:	e7b2      	b.n	8001d1e <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001db8:	2404      	movs	r4, #4
 8001dba:	e7b0      	b.n	8001d1e <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dbc:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dbe:	f1ac 0208 	sub.w	r2, ip, #8
 8001dc2:	0092      	lsls	r2, r2, #2
 8001dc4:	e7b1      	b.n	8001d2a <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e000      	b.n	8001dcc <HAL_GPIO_Init+0xf8>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	40ab      	lsls	r3, r5
 8001dce:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8001dd0:	3202      	adds	r2, #2
 8001dd2:	4d44      	ldr	r5, [pc, #272]	@ (8001ee4 <HAL_GPIO_Init+0x210>)
 8001dd4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd8:	684b      	ldr	r3, [r1, #4]
 8001dda:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001dde:	d061      	beq.n	8001ea4 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001de0:	4a42      	ldr	r2, [pc, #264]	@ (8001eec <HAL_GPIO_Init+0x218>)
 8001de2:	6893      	ldr	r3, [r2, #8]
 8001de4:	ea43 030e 	orr.w	r3, r3, lr
 8001de8:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dea:	684b      	ldr	r3, [r1, #4]
 8001dec:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8001df0:	d05e      	beq.n	8001eb0 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001df2:	4a3e      	ldr	r2, [pc, #248]	@ (8001eec <HAL_GPIO_Init+0x218>)
 8001df4:	68d3      	ldr	r3, [r2, #12]
 8001df6:	ea43 030e 	orr.w	r3, r3, lr
 8001dfa:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dfc:	684b      	ldr	r3, [r1, #4]
 8001dfe:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001e02:	d05b      	beq.n	8001ebc <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e04:	4a39      	ldr	r2, [pc, #228]	@ (8001eec <HAL_GPIO_Init+0x218>)
 8001e06:	6853      	ldr	r3, [r2, #4]
 8001e08:	ea43 030e 	orr.w	r3, r3, lr
 8001e0c:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e0e:	684b      	ldr	r3, [r1, #4]
 8001e10:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001e14:	d058      	beq.n	8001ec8 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e16:	4a35      	ldr	r2, [pc, #212]	@ (8001eec <HAL_GPIO_Init+0x218>)
 8001e18:	6813      	ldr	r3, [r2, #0]
 8001e1a:	ea43 030e 	orr.w	r3, r3, lr
 8001e1e:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8001e20:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e24:	680b      	ldr	r3, [r1, #0]
 8001e26:	fa33 f20c 	lsrs.w	r2, r3, ip
 8001e2a:	d053      	beq.n	8001ed4 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e32:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8001e36:	ea32 0303 	bics.w	r3, r2, r3
 8001e3a:	d1f1      	bne.n	8001e20 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 8001e3c:	684b      	ldr	r3, [r1, #4]
 8001e3e:	2b12      	cmp	r3, #18
 8001e40:	f63f af4d 	bhi.w	8001cde <HAL_GPIO_Init+0xa>
 8001e44:	2b12      	cmp	r3, #18
 8001e46:	f63f af6a 	bhi.w	8001d1e <HAL_GPIO_Init+0x4a>
 8001e4a:	a501      	add	r5, pc, #4	@ (adr r5, 8001e50 <HAL_GPIO_Init+0x17c>)
 8001e4c:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8001e50:	08001d07 	.word	0x08001d07
 8001e54:	08001d99 	.word	0x08001d99
 8001e58:	08001da3 	.word	0x08001da3
 8001e5c:	08001db5 	.word	0x08001db5
 8001e60:	08001d1f 	.word	0x08001d1f
 8001e64:	08001d1f 	.word	0x08001d1f
 8001e68:	08001d1f 	.word	0x08001d1f
 8001e6c:	08001d1f 	.word	0x08001d1f
 8001e70:	08001d1f 	.word	0x08001d1f
 8001e74:	08001d1f 	.word	0x08001d1f
 8001e78:	08001d1f 	.word	0x08001d1f
 8001e7c:	08001d1f 	.word	0x08001d1f
 8001e80:	08001d1f 	.word	0x08001d1f
 8001e84:	08001d1f 	.word	0x08001d1f
 8001e88:	08001d1f 	.word	0x08001d1f
 8001e8c:	08001d1f 	.word	0x08001d1f
 8001e90:	08001d1f 	.word	0x08001d1f
 8001e94:	08001d9d 	.word	0x08001d9d
 8001e98:	08001da9 	.word	0x08001da9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e795      	b.n	8001dcc <HAL_GPIO_Init+0xf8>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e793      	b.n	8001dcc <HAL_GPIO_Init+0xf8>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ea4:	4a11      	ldr	r2, [pc, #68]	@ (8001eec <HAL_GPIO_Init+0x218>)
 8001ea6:	6893      	ldr	r3, [r2, #8]
 8001ea8:	ea23 030e 	bic.w	r3, r3, lr
 8001eac:	6093      	str	r3, [r2, #8]
 8001eae:	e79c      	b.n	8001dea <HAL_GPIO_Init+0x116>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	@ (8001eec <HAL_GPIO_Init+0x218>)
 8001eb2:	68d3      	ldr	r3, [r2, #12]
 8001eb4:	ea23 030e 	bic.w	r3, r3, lr
 8001eb8:	60d3      	str	r3, [r2, #12]
 8001eba:	e79f      	b.n	8001dfc <HAL_GPIO_Init+0x128>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8001eec <HAL_GPIO_Init+0x218>)
 8001ebe:	6853      	ldr	r3, [r2, #4]
 8001ec0:	ea23 030e 	bic.w	r3, r3, lr
 8001ec4:	6053      	str	r3, [r2, #4]
 8001ec6:	e7a2      	b.n	8001e0e <HAL_GPIO_Init+0x13a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ec8:	4a08      	ldr	r2, [pc, #32]	@ (8001eec <HAL_GPIO_Init+0x218>)
 8001eca:	6813      	ldr	r3, [r2, #0]
 8001ecc:	ea23 030e 	bic.w	r3, r3, lr
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e7a5      	b.n	8001e20 <HAL_GPIO_Init+0x14c>
  }
}
 8001ed4:	b002      	add	sp, #8
 8001ed6:	bd70      	pop	{r4, r5, r6, pc}
 8001ed8:	10220000 	.word	0x10220000
 8001edc:	10310000 	.word	0x10310000
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40010800 	.word	0x40010800
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8001ef0:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001ef2:	e06b      	b.n	8001fcc <HAL_GPIO_DeInit+0xdc>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001ef4:	2503      	movs	r5, #3
 8001ef6:	e000      	b.n	8001efa <HAL_GPIO_DeInit+0xa>
 8001ef8:	2500      	movs	r5, #0
 8001efa:	fa05 f404 	lsl.w	r4, r5, r4
 8001efe:	4564      	cmp	r4, ip
 8001f00:	d042      	beq.n	8001f88 <HAL_GPIO_DeInit+0x98>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f02:	2bff      	cmp	r3, #255	@ 0xff
 8001f04:	d85a      	bhi.n	8001fbc <HAL_GPIO_DeInit+0xcc>
 8001f06:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f08:	0095      	lsls	r5, r2, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001f0a:	f8de 4000 	ldr.w	r4, [lr]
 8001f0e:	f04f 0c0f 	mov.w	ip, #15
 8001f12:	fa0c fc05 	lsl.w	ip, ip, r5
 8001f16:	ea24 040c 	bic.w	r4, r4, ip
 8001f1a:	f04f 0c04 	mov.w	ip, #4
 8001f1e:	fa0c fc05 	lsl.w	ip, ip, r5
 8001f22:	ea44 040c 	orr.w	r4, r4, ip
 8001f26:	f8ce 4000 	str.w	r4, [lr]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001f2a:	68c4      	ldr	r4, [r0, #12]
 8001f2c:	ea24 0303 	bic.w	r3, r4, r3
 8001f30:	60c3      	str	r3, [r0, #12]
    }

    position++;
 8001f32:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8001f34:	fa31 f302 	lsrs.w	r3, r1, r2
 8001f38:	d046      	beq.n	8001fc8 <HAL_GPIO_DeInit+0xd8>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	4093      	lsls	r3, r2
    if (iocurrent)
 8001f3e:	400b      	ands	r3, r1
 8001f40:	d0f7      	beq.n	8001f32 <HAL_GPIO_DeInit+0x42>
      tmp = AFIO->EXTICR[position >> 2u];
 8001f42:	0896      	lsrs	r6, r2, #2
 8001f44:	1cb5      	adds	r5, r6, #2
 8001f46:	4c26      	ldr	r4, [pc, #152]	@ (8001fe0 <HAL_GPIO_DeInit+0xf0>)
 8001f48:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001f4c:	f002 0403 	and.w	r4, r2, #3
 8001f50:	00a4      	lsls	r4, r4, #2
 8001f52:	f04f 0c0f 	mov.w	ip, #15
 8001f56:	fa0c fe04 	lsl.w	lr, ip, r4
 8001f5a:	ea0e 0c05 	and.w	ip, lr, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001f5e:	4d21      	ldr	r5, [pc, #132]	@ (8001fe4 <HAL_GPIO_DeInit+0xf4>)
 8001f60:	42a8      	cmp	r0, r5
 8001f62:	d0c9      	beq.n	8001ef8 <HAL_GPIO_DeInit+0x8>
 8001f64:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001f68:	42a8      	cmp	r0, r5
 8001f6a:	d009      	beq.n	8001f80 <HAL_GPIO_DeInit+0x90>
 8001f6c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001f70:	42a8      	cmp	r0, r5
 8001f72:	d007      	beq.n	8001f84 <HAL_GPIO_DeInit+0x94>
 8001f74:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001f78:	42a8      	cmp	r0, r5
 8001f7a:	d0bb      	beq.n	8001ef4 <HAL_GPIO_DeInit+0x4>
 8001f7c:	2504      	movs	r5, #4
 8001f7e:	e7bc      	b.n	8001efa <HAL_GPIO_DeInit+0xa>
 8001f80:	2501      	movs	r5, #1
 8001f82:	e7ba      	b.n	8001efa <HAL_GPIO_DeInit+0xa>
 8001f84:	2502      	movs	r5, #2
 8001f86:	e7b8      	b.n	8001efa <HAL_GPIO_DeInit+0xa>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001f88:	4c17      	ldr	r4, [pc, #92]	@ (8001fe8 <HAL_GPIO_DeInit+0xf8>)
 8001f8a:	6825      	ldr	r5, [r4, #0]
 8001f8c:	ea25 0503 	bic.w	r5, r5, r3
 8001f90:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001f92:	6865      	ldr	r5, [r4, #4]
 8001f94:	ea25 0503 	bic.w	r5, r5, r3
 8001f98:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001f9a:	68e5      	ldr	r5, [r4, #12]
 8001f9c:	ea25 0503 	bic.w	r5, r5, r3
 8001fa0:	60e5      	str	r5, [r4, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001fa2:	68a5      	ldr	r5, [r4, #8]
 8001fa4:	ea25 0503 	bic.w	r5, r5, r3
 8001fa8:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001faa:	4f0d      	ldr	r7, [pc, #52]	@ (8001fe0 <HAL_GPIO_DeInit+0xf0>)
 8001fac:	1cb4      	adds	r4, r6, #2
 8001fae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8001fb2:	ea25 050e 	bic.w	r5, r5, lr
 8001fb6:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 8001fba:	e7a2      	b.n	8001f02 <HAL_GPIO_DeInit+0x12>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fbc:	f100 0e04 	add.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc0:	f1a2 0508 	sub.w	r5, r2, #8
 8001fc4:	00ad      	lsls	r5, r5, #2
 8001fc6:	e7a0      	b.n	8001f0a <HAL_GPIO_DeInit+0x1a>
  }
}
 8001fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 8001fca:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8001fcc:	fa31 f302 	lsrs.w	r3, r1, r2
 8001fd0:	d005      	beq.n	8001fde <HAL_GPIO_DeInit+0xee>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	4093      	lsls	r3, r2
    if (iocurrent)
 8001fd6:	400b      	ands	r3, r1
 8001fd8:	d0f7      	beq.n	8001fca <HAL_GPIO_DeInit+0xda>
{
 8001fda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fdc:	e7b1      	b.n	8001f42 <HAL_GPIO_DeInit+0x52>
 8001fde:	4770      	bx	lr
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40010800 	.word	0x40010800
 8001fe8:	40010400 	.word	0x40010400

08001fec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fec:	6883      	ldr	r3, [r0, #8]
 8001fee:	4219      	tst	r1, r3
 8001ff0:	d001      	beq.n	8001ff6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ff6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001ff8:	4770      	bx	lr

08001ffa <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ffa:	b10a      	cbz	r2, 8002000 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffc:	6101      	str	r1, [r0, #16]
 8001ffe:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002000:	0409      	lsls	r1, r1, #16
 8002002:	6101      	str	r1, [r0, #16]
  }
}
 8002004:	4770      	bx	lr

08002006 <I2C_Flush_DR>:
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002006:	6803      	ldr	r3, [r0, #0]
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800200e:	d001      	beq.n	8002014 <I2C_Flush_DR+0xe>
  {
    hi2c->Instance->DR = 0x00U;
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  }
}
 8002014:	4770      	bx	lr

08002016 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002016:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b40      	cmp	r3, #64	@ 0x40
 800201e:	d010      	beq.n	8002042 <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002020:	6903      	ldr	r3, [r0, #16]
 8002022:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002026:	d01b      	beq.n	8002060 <I2C_Master_SB+0x4a>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 8002028:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800202a:	2b00      	cmp	r3, #0
 800202c:	d139      	bne.n	80020a2 <I2C_Master_SB+0x8c>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800202e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002030:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8002034:	6802      	ldr	r2, [r0, #0]
 8002036:	f003 0306 	and.w	r3, r3, #6
 800203a:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 800203e:	6113      	str	r3, [r2, #16]
 8002040:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 8002042:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002044:	b92b      	cbnz	r3, 8002052 <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002046:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002048:	6802      	ldr	r2, [r0, #0]
 800204a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800204e:	6113      	str	r3, [r2, #16]
 8002050:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002052:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002054:	6802      	ldr	r2, [r0, #0]
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	6113      	str	r3, [r2, #16]
 800205e:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002060:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b21      	cmp	r3, #33	@ 0x21
 8002068:	d00f      	beq.n	800208a <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800206a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800206c:	6802      	ldr	r2, [r0, #0]
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	b2db      	uxtb	r3, r3
 8002074:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002076:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002078:	b16b      	cbz	r3, 8002096 <I2C_Master_SB+0x80>
 800207a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207c:	b15b      	cbz	r3, 8002096 <I2C_Master_SB+0x80>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800207e:	6802      	ldr	r2, [r0, #0]
 8002080:	6853      	ldr	r3, [r2, #4]
 8002082:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002086:	6053      	str	r3, [r2, #4]
 8002088:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800208a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800208c:	6802      	ldr	r2, [r0, #0]
 800208e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002092:	6113      	str	r3, [r2, #16]
 8002094:	e7ef      	b.n	8002076 <I2C_Master_SB+0x60>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002096:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002098:	b133      	cbz	r3, 80020a8 <I2C_Master_SB+0x92>
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1ee      	bne.n	800207e <I2C_Master_SB+0x68>
 80020a0:	e002      	b.n	80020a8 <I2C_Master_SB+0x92>
      }
      else if (hi2c->EventCount == 1U)
 80020a2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d000      	beq.n	80020aa <I2C_Master_SB+0x94>
      {
        /* Do nothing */
      }
    }
  }
}
 80020a8:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80020aa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80020ac:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80020b0:	6802      	ldr	r2, [r0, #0]
 80020b2:	f003 0306 	and.w	r3, r3, #6
 80020b6:	f043 03f1 	orr.w	r3, r3, #241	@ 0xf1
 80020ba:	6113      	str	r3, [r2, #16]
}
 80020bc:	e7f4      	b.n	80020a8 <I2C_Master_SB+0x92>

080020be <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80020be:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80020c0:	6802      	ldr	r2, [r0, #0]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	6113      	str	r3, [r2, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80020c6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80020c8:	b13b      	cbz	r3, 80020da <I2C_Master_ADD10+0x1c>
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	b12b      	cbz	r3, 80020da <I2C_Master_ADD10+0x1c>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80020ce:	6802      	ldr	r2, [r0, #0]
 80020d0:	6853      	ldr	r3, [r2, #4]
 80020d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020d6:	6053      	str	r3, [r2, #4]
  }
}
 80020d8:	4770      	bx	lr
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80020da:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0fb      	beq.n	80020d8 <I2C_Master_ADD10+0x1a>
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f3      	bne.n	80020ce <I2C_Master_ADD10+0x10>
 80020e6:	e7f7      	b.n	80020d8 <I2C_Master_ADD10+0x1a>

080020e8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80020e8:	b410      	push	{r4}
 80020ea:	b08d      	sub	sp, #52	@ 0x34
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80020ec:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80020f0:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80020f2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80020f4:	6b04      	ldr	r4, [r0, #48]	@ 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020f6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b22      	cmp	r3, #34	@ 0x22
 80020fe:	d00a      	beq.n	8002116 <I2C_Master_ADDR+0x2e>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002100:	2300      	movs	r3, #0
 8002102:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002104:	6803      	ldr	r3, [r0, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	920b      	str	r2, [sp, #44]	@ 0x2c
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800210e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  }
}
 8002110:	b00d      	add	sp, #52	@ 0x34
 8002112:	bc10      	pop	{r4}
 8002114:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002116:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002118:	b90b      	cbnz	r3, 800211e <I2C_Master_ADDR+0x36>
 800211a:	2a40      	cmp	r2, #64	@ 0x40
 800211c:	d017      	beq.n	800214e <I2C_Master_ADDR+0x66>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800211e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002120:	b91b      	cbnz	r3, 800212a <I2C_Master_ADDR+0x42>
 8002122:	6903      	ldr	r3, [r0, #16]
 8002124:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002128:	d019      	beq.n	800215e <I2C_Master_ADDR+0x76>
      if (hi2c->XferCount == 0U)
 800212a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d125      	bne.n	800217e <I2C_Master_ADDR+0x96>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002132:	9303      	str	r3, [sp, #12]
 8002134:	6803      	ldr	r3, [r0, #0]
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	9203      	str	r2, [sp, #12]
 800213a:	699a      	ldr	r2, [r3, #24]
 800213c:	9203      	str	r2, [sp, #12]
 800213e:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002146:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	6503      	str	r3, [r0, #80]	@ 0x50
 800214c:	e7e0      	b.n	8002110 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	6803      	ldr	r3, [r0, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	9201      	str	r2, [sp, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	9b01      	ldr	r3, [sp, #4]
 800215c:	e7d8      	b.n	8002110 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215e:	2300      	movs	r3, #0
 8002160:	9302      	str	r3, [sp, #8]
 8002162:	6803      	ldr	r3, [r0, #0]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	9202      	str	r2, [sp, #8]
 8002168:	699a      	ldr	r2, [r3, #24]
 800216a:	9202      	str	r2, [sp, #8]
 800216c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002174:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002176:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002178:	3301      	adds	r3, #1
 800217a:	6503      	str	r3, [r0, #80]	@ 0x50
 800217c:	e7c8      	b.n	8002110 <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 800217e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d01c      	beq.n	80021c0 <I2C_Master_ADDR+0xd8>
      else if (hi2c->XferCount == 2U)
 8002186:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d072      	beq.n	8002274 <I2C_Master_ADDR+0x18c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218e:	6802      	ldr	r2, [r0, #0]
 8002190:	6813      	ldr	r3, [r2, #0]
 8002192:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002196:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002198:	6803      	ldr	r3, [r0, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80021a0:	f000 80b4 	beq.w	800230c <I2C_Master_ADDR+0x224>
 80021a4:	2920      	cmp	r1, #32
 80021a6:	f200 80ba 	bhi.w	800231e <I2C_Master_ADDR+0x236>
 80021aa:	2908      	cmp	r1, #8
 80021ac:	f080 80a7 	bcs.w	80022fe <I2C_Master_ADDR+0x216>
 80021b0:	2901      	cmp	r1, #1
 80021b2:	f040 80ab 	bne.w	800230c <I2C_Master_ADDR+0x224>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	e0a5      	b.n	800230c <I2C_Master_ADDR+0x224>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80021c0:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 80021c4:	d011      	beq.n	80021ea <I2C_Master_ADDR+0x102>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80021c6:	2908      	cmp	r1, #8
 80021c8:	d034      	beq.n	8002234 <I2C_Master_ADDR+0x14c>
 80021ca:	2920      	cmp	r1, #32
 80021cc:	d032      	beq.n	8002234 <I2C_Master_ADDR+0x14c>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80021ce:	2c12      	cmp	r4, #18
 80021d0:	d02e      	beq.n	8002230 <I2C_Master_ADDR+0x148>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80021d2:	2904      	cmp	r1, #4
 80021d4:	d040      	beq.n	8002258 <I2C_Master_ADDR+0x170>
 80021d6:	2902      	cmp	r1, #2
 80021d8:	d03e      	beq.n	8002258 <I2C_Master_ADDR+0x170>
 80021da:	2910      	cmp	r1, #16
 80021dc:	d03c      	beq.n	8002258 <I2C_Master_ADDR+0x170>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021de:	6802      	ldr	r2, [r0, #0]
 80021e0:	6813      	ldr	r3, [r2, #0]
 80021e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e03b      	b.n	8002262 <I2C_Master_ADDR+0x17a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ea:	6802      	ldr	r2, [r0, #0]
 80021ec:	6813      	ldr	r3, [r2, #0]
 80021ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021f2:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80021f4:	6803      	ldr	r3, [r0, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80021fc:	d00c      	beq.n	8002218 <I2C_Master_ADDR+0x130>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002204:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002206:	2300      	movs	r3, #0
 8002208:	9304      	str	r3, [sp, #16]
 800220a:	6803      	ldr	r3, [r0, #0]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	9204      	str	r2, [sp, #16]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	9304      	str	r3, [sp, #16]
 8002214:	9b04      	ldr	r3, [sp, #16]
 8002216:	e797      	b.n	8002148 <I2C_Master_ADDR+0x60>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002218:	2200      	movs	r2, #0
 800221a:	9205      	str	r2, [sp, #20]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	9205      	str	r2, [sp, #20]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	9205      	str	r2, [sp, #20]
 8002224:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e78b      	b.n	8002148 <I2C_Master_ADDR+0x60>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002230:	2901      	cmp	r1, #1
 8002232:	d0d0      	beq.n	80021d6 <I2C_Master_ADDR+0xee>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002234:	6802      	ldr	r2, [r0, #0]
 8002236:	6813      	ldr	r3, [r2, #0]
 8002238:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800223c:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800223e:	2300      	movs	r3, #0
 8002240:	9307      	str	r3, [sp, #28]
 8002242:	6803      	ldr	r3, [r0, #0]
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	9207      	str	r2, [sp, #28]
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	9207      	str	r2, [sp, #28]
 800224c:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e777      	b.n	8002148 <I2C_Master_ADDR+0x60>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002258:	6802      	ldr	r2, [r0, #0]
 800225a:	6813      	ldr	r3, [r2, #0]
 800225c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002260:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002262:	2300      	movs	r3, #0
 8002264:	9306      	str	r3, [sp, #24]
 8002266:	6803      	ldr	r3, [r0, #0]
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	9206      	str	r2, [sp, #24]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	9306      	str	r3, [sp, #24]
 8002270:	9b06      	ldr	r3, [sp, #24]
 8002272:	e769      	b.n	8002148 <I2C_Master_ADDR+0x60>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002274:	2910      	cmp	r1, #16
 8002276:	d804      	bhi.n	8002282 <I2C_Master_ADDR+0x19a>
 8002278:	4b2b      	ldr	r3, [pc, #172]	@ (8002328 <I2C_Master_ADDR+0x240>)
 800227a:	40cb      	lsrs	r3, r1
 800227c:	f013 0f01 	tst.w	r3, #1
 8002280:	d122      	bne.n	80022c8 <I2C_Master_ADDR+0x1e0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002282:	6802      	ldr	r2, [r0, #0]
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800228a:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228c:	2300      	movs	r3, #0
 800228e:	9308      	str	r3, [sp, #32]
 8002290:	6803      	ldr	r3, [r0, #0]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	9208      	str	r2, [sp, #32]
 8002296:	699a      	ldr	r2, [r3, #24]
 8002298:	9208      	str	r2, [sp, #32]
 800229a:	9a08      	ldr	r2, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022a2:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80022a4:	6803      	ldr	r3, [r0, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80022ac:	f43f af4c 	beq.w	8002148 <I2C_Master_ADDR+0x60>
 80022b0:	2920      	cmp	r1, #32
 80022b2:	d81f      	bhi.n	80022f4 <I2C_Master_ADDR+0x20c>
 80022b4:	2908      	cmp	r1, #8
 80022b6:	d215      	bcs.n	80022e4 <I2C_Master_ADDR+0x1fc>
 80022b8:	2901      	cmp	r1, #1
 80022ba:	f47f af45 	bne.w	8002148 <I2C_Master_ADDR+0x60>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	e73f      	b.n	8002148 <I2C_Master_ADDR+0x60>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c8:	6802      	ldr	r2, [r0, #0]
 80022ca:	6813      	ldr	r3, [r2, #0]
 80022cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022d0:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d2:	2300      	movs	r3, #0
 80022d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80022d6:	6803      	ldr	r3, [r0, #0]
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	9209      	str	r2, [sp, #36]	@ 0x24
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	9309      	str	r3, [sp, #36]	@ 0x24
 80022e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80022e2:	e7df      	b.n	80022a4 <I2C_Master_ADDR+0x1bc>
 80022e4:	3908      	subs	r1, #8
 80022e6:	4a11      	ldr	r2, [pc, #68]	@ (800232c <I2C_Master_ADDR+0x244>)
 80022e8:	40ca      	lsrs	r2, r1
 80022ea:	f012 0f01 	tst.w	r2, #1
 80022ee:	f43f af2b 	beq.w	8002148 <I2C_Master_ADDR+0x60>
 80022f2:	e7e4      	b.n	80022be <I2C_Master_ADDR+0x1d6>
 80022f4:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 80022f8:	f47f af26 	bne.w	8002148 <I2C_Master_ADDR+0x60>
 80022fc:	e7df      	b.n	80022be <I2C_Master_ADDR+0x1d6>
 80022fe:	3908      	subs	r1, #8
 8002300:	4a0a      	ldr	r2, [pc, #40]	@ (800232c <I2C_Master_ADDR+0x244>)
 8002302:	40ca      	lsrs	r2, r1
 8002304:	f012 0f01 	tst.w	r2, #1
 8002308:	f47f af55 	bne.w	80021b6 <I2C_Master_ADDR+0xce>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800230c:	2300      	movs	r3, #0
 800230e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002310:	6803      	ldr	r3, [r0, #0]
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	920a      	str	r2, [sp, #40]	@ 0x28
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	930a      	str	r3, [sp, #40]	@ 0x28
 800231a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800231c:	e714      	b.n	8002148 <I2C_Master_ADDR+0x60>
 800231e:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8002322:	d1f3      	bne.n	800230c <I2C_Master_ADDR+0x224>
 8002324:	e747      	b.n	80021b6 <I2C_Master_ADDR+0xce>
 8002326:	bf00      	nop
 8002328:	00010014 	.word	0x00010014
 800232c:	01000101 	.word	0x01000101

08002330 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8002330:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002332:	b29b      	uxth	r3, r3
 8002334:	b15b      	cbz	r3, 800234e <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002336:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8002338:	6803      	ldr	r3, [r0, #0]
 800233a:	7812      	ldrb	r2, [r2, #0]
 800233c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800233e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002340:	3301      	adds	r3, #1
 8002342:	6243      	str	r3, [r0, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002344:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29b      	uxth	r3, r3
 800234c:	8543      	strh	r3, [r0, #42]	@ 0x2a
  }
}
 800234e:	4770      	bx	lr

08002350 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8002350:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002352:	b29b      	uxth	r3, r3
 8002354:	b15b      	cbz	r3, 800236e <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002356:	6803      	ldr	r3, [r0, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800235c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800235e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002360:	3301      	adds	r3, #1
 8002362:	6243      	str	r3, [r0, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002364:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29b      	uxth	r3, r3
 800236c:	8543      	strh	r3, [r0, #42]	@ 0x2a
  }
}
 800236e:	4770      	bx	lr

08002370 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002370:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	9301      	str	r3, [sp, #4]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002376:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <I2C_WaitOnSTOPRequestThroughIT+0x40>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	08db      	lsrs	r3, r3, #3
 800237c:	4a0d      	ldr	r2, [pc, #52]	@ (80023b4 <I2C_WaitOnSTOPRequestThroughIT+0x44>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002388:	9301      	str	r3, [sp, #4]
  do
  {
    count--;
 800238a:	9b01      	ldr	r3, [sp, #4]
 800238c:	3b01      	subs	r3, #1
 800238e:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8002390:	9b01      	ldr	r3, [sp, #4]
 8002392:	b133      	cbz	r3, 80023a2 <I2C_WaitOnSTOPRequestThroughIT+0x32>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

      return HAL_ERROR;
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002394:	6803      	ldr	r3, [r0, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800239c:	d1f5      	bne.n	800238a <I2C_WaitOnSTOPRequestThroughIT+0x1a>

  return HAL_OK;
 800239e:	2000      	movs	r0, #0
 80023a0:	e004      	b.n	80023ac <I2C_WaitOnSTOPRequestThroughIT+0x3c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80023a4:	f043 0320 	orr.w	r3, r3, #32
 80023a8:	6403      	str	r3, [r0, #64]	@ 0x40
      return HAL_ERROR;
 80023aa:	2001      	movs	r0, #1
}
 80023ac:	b002      	add	sp, #8
 80023ae:	4770      	bx	lr
 80023b0:	20000004 	.word	0x20000004
 80023b4:	14f8b589 	.word	0x14f8b589

080023b8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023b8:	6803      	ldr	r3, [r0, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80023c0:	d101      	bne.n	80023c6 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80023c2:	2000      	movs	r0, #0
}
 80023c4:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023ca:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023d0:	2220      	movs	r2, #32
 80023d2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d6:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023da:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80023dc:	f042 0204 	orr.w	r2, r2, #4
 80023e0:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 80023e2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80023e6:	2001      	movs	r0, #1
 80023e8:	4770      	bx	lr

080023ea <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80023ea:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80023ec:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80023f0:	d004      	beq.n	80023fc <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80023f2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80023f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80023f8:	d003      	beq.n	8002402 <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 80023fa:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80023fc:	2301      	movs	r3, #1
 80023fe:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8002400:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002402:	2308      	movs	r3, #8
 8002404:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 8002406:	e7f8      	b.n	80023fa <I2C_ConvertOtherXferOptions+0x10>

08002408 <I2C_WaitOnFlagUntilTimeout>:
{
 8002408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800240c:	4606      	mov	r6, r0
 800240e:	460c      	mov	r4, r1
 8002410:	4617      	mov	r7, r2
 8002412:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002414:	e03b      	b.n	800248e <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002416:	f7ff fb55 	bl	8001ac4 <HAL_GetTick>
 800241a:	9b06      	ldr	r3, [sp, #24]
 800241c:	1ac0      	subs	r0, r0, r3
 800241e:	4540      	cmp	r0, r8
 8002420:	d802      	bhi.n	8002428 <I2C_WaitOnFlagUntilTimeout+0x20>
 8002422:	f1b8 0f00 	cmp.w	r8, #0
 8002426:	d132      	bne.n	800248e <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002428:	2d01      	cmp	r5, #1
 800242a:	d018      	beq.n	800245e <I2C_WaitOnFlagUntilTimeout+0x56>
 800242c:	6833      	ldr	r3, [r6, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	ea24 0303 	bic.w	r3, r4, r3
 8002434:	b29b      	uxth	r3, r3
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	429f      	cmp	r7, r3
 800243e:	d126      	bne.n	800248e <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002440:	2300      	movs	r3, #0
 8002442:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002444:	2220      	movs	r2, #32
 8002446:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800244a:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800244e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8002450:	f042 0220 	orr.w	r2, r2, #32
 8002454:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002456:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 800245a:	2001      	movs	r0, #1
 800245c:	e027      	b.n	80024ae <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800245e:	6833      	ldr	r3, [r6, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	ea24 0303 	bic.w	r3, r4, r3
 8002466:	b29b      	uxth	r3, r3
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	e7e5      	b.n	800243c <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002470:	6833      	ldr	r3, [r6, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	ea24 0c03 	bic.w	ip, r4, r3
 8002478:	fa1f fc8c 	uxth.w	ip, ip
 800247c:	fabc fc8c 	clz	ip, ip
 8002480:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002484:	4567      	cmp	r7, ip
 8002486:	d111      	bne.n	80024ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8002488:	f1b8 3fff 	cmp.w	r8, #4294967295
 800248c:	d1c3      	bne.n	8002416 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800248e:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8002492:	2d01      	cmp	r5, #1
 8002494:	d0ec      	beq.n	8002470 <I2C_WaitOnFlagUntilTimeout+0x68>
 8002496:	6833      	ldr	r3, [r6, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	ea24 0c03 	bic.w	ip, r4, r3
 800249e:	fa1f fc8c 	uxth.w	ip, ip
 80024a2:	fabc fc8c 	clz	ip, ip
 80024a6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80024aa:	e7eb      	b.n	8002484 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 80024ac:	2000      	movs	r0, #0
}
 80024ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80024b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024b6:	4605      	mov	r5, r0
 80024b8:	460e      	mov	r6, r1
 80024ba:	4690      	mov	r8, r2
 80024bc:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024be:	e053      	b.n	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024ce:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024d4:	2220      	movs	r2, #32
 80024d6:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024da:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024de:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80024e0:	f042 0204 	orr.w	r2, r2, #4
 80024e4:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80024e6:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 80024ea:	2001      	movs	r0, #1
 80024ec:	e04a      	b.n	8002584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ee:	f7ff fae9 	bl	8001ac4 <HAL_GetTick>
 80024f2:	eba0 0009 	sub.w	r0, r0, r9
 80024f6:	4540      	cmp	r0, r8
 80024f8:	d802      	bhi.n	8002500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 80024fa:	f1b8 0f00 	cmp.w	r8, #0
 80024fe:	d133      	bne.n	8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002500:	2f01      	cmp	r7, #1
 8002502:	d017      	beq.n	8002534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8002504:	682b      	ldr	r3, [r5, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	ea26 0303 	bic.w	r3, r6, r3
 800250c:	b29b      	uxth	r3, r3
 800250e:	3b00      	subs	r3, #0
 8002510:	bf18      	it	ne
 8002512:	2301      	movne	r3, #1
 8002514:	b343      	cbz	r3, 8002568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002516:	2300      	movs	r3, #0
 8002518:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800251a:	2220      	movs	r2, #32
 800251c:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002520:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002524:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8002526:	f042 0220 	orr.w	r2, r2, #32
 800252a:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800252c:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8002530:	2001      	movs	r0, #1
 8002532:	e027      	b.n	8002584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002534:	682b      	ldr	r3, [r5, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	ea26 0303 	bic.w	r3, r6, r3
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b00      	subs	r3, #0
 8002540:	bf18      	it	ne
 8002542:	2301      	movne	r3, #1
 8002544:	e7e6      	b.n	8002514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002546:	682b      	ldr	r3, [r5, #0]
 8002548:	699c      	ldr	r4, [r3, #24]
 800254a:	ea26 0404 	bic.w	r4, r6, r4
 800254e:	b2a4      	uxth	r4, r4
 8002550:	3c00      	subs	r4, #0
 8002552:	bf18      	it	ne
 8002554:	2401      	movne	r4, #1
 8002556:	b1a4      	cbz	r4, 8002582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002558:	682b      	ldr	r3, [r5, #0]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002560:	d1ae      	bne.n	80024c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8002562:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002566:	d1c2      	bne.n	80024ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002568:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800256c:	2f01      	cmp	r7, #1
 800256e:	d1ea      	bne.n	8002546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8002570:	682b      	ldr	r3, [r5, #0]
 8002572:	695c      	ldr	r4, [r3, #20]
 8002574:	ea26 0404 	bic.w	r4, r6, r4
 8002578:	b2a4      	uxth	r4, r4
 800257a:	3c00      	subs	r4, #0
 800257c:	bf18      	it	ne
 800257e:	2401      	movne	r4, #1
 8002580:	e7e9      	b.n	8002556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8002582:	2000      	movs	r0, #0
}
 8002584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002588 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	4604      	mov	r4, r0
 800258c:	460d      	mov	r5, r1
 800258e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002598:	d121      	bne.n	80025de <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800259a:	4620      	mov	r0, r4
 800259c:	f7ff ff0c 	bl	80023b8 <I2C_IsAcknowledgeFailed>
 80025a0:	b9f8      	cbnz	r0, 80025e2 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80025a2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80025a6:	d0f3      	beq.n	8002590 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a8:	f7ff fa8c 	bl	8001ac4 <HAL_GetTick>
 80025ac:	1b80      	subs	r0, r0, r6
 80025ae:	42a8      	cmp	r0, r5
 80025b0:	d801      	bhi.n	80025b6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80025b2:	2d00      	cmp	r5, #0
 80025b4:	d1ec      	bne.n	8002590 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80025be:	d1e7      	bne.n	8002590 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025c4:	2220      	movs	r2, #32
 80025c6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ca:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ce:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80025d0:	f042 0220 	orr.w	r2, r2, #32
 80025d4:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80025d6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80025da:	2001      	movs	r0, #1
 80025dc:	e000      	b.n	80025e0 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 80025de:	2000      	movs	r0, #0
}
 80025e0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80025e2:	2001      	movs	r0, #1
 80025e4:	e7fc      	b.n	80025e0 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
	...

080025e8 <I2C_RequestMemoryWrite>:
{
 80025e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025ec:	b085      	sub	sp, #20
 80025ee:	4604      	mov	r4, r0
 80025f0:	460d      	mov	r5, r1
 80025f2:	4691      	mov	r9, r2
 80025f4:	461f      	mov	r7, r3
 80025f6:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80025fa:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fc:	6803      	ldr	r3, [r0, #0]
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002604:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002606:	9600      	str	r6, [sp, #0]
 8002608:	4643      	mov	r3, r8
 800260a:	2200      	movs	r2, #0
 800260c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002610:	f7ff fefa 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8002614:	b960      	cbnz	r0, 8002630 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 800261c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800261e:	4633      	mov	r3, r6
 8002620:	4642      	mov	r2, r8
 8002622:	4926      	ldr	r1, [pc, #152]	@ (80026bc <I2C_RequestMemoryWrite+0xd4>)
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff ff44 	bl	80024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800262a:	b168      	cbz	r0, 8002648 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 800262c:	2001      	movs	r0, #1
 800262e:	e008      	b.n	8002642 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002638:	d002      	beq.n	8002640 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800263a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800263e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002640:	2003      	movs	r0, #3
}
 8002642:	b005      	add	sp, #20
 8002644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002648:	2300      	movs	r3, #0
 800264a:	9303      	str	r3, [sp, #12]
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	9203      	str	r2, [sp, #12]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	9303      	str	r3, [sp, #12]
 8002656:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002658:	4632      	mov	r2, r6
 800265a:	4641      	mov	r1, r8
 800265c:	4620      	mov	r0, r4
 800265e:	f7ff ff93 	bl	8002588 <I2C_WaitOnTXEFlagUntilTimeout>
 8002662:	b930      	cbnz	r0, 8002672 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002664:	2f01      	cmp	r7, #1
 8002666:	d10f      	bne.n	8002688 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	fa5f f689 	uxtb.w	r6, r9
 800266e:	611e      	str	r6, [r3, #16]
 8002670:	e7e7      	b.n	8002642 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002672:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002674:	2b04      	cmp	r3, #4
 8002676:	d001      	beq.n	800267c <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8002678:	2001      	movs	r0, #1
 800267a:	e7e2      	b.n	8002642 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	6822      	ldr	r2, [r4, #0]
 800267e:	6813      	ldr	r3, [r2, #0]
 8002680:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e7f7      	b.n	8002678 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800268e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002690:	4632      	mov	r2, r6
 8002692:	4641      	mov	r1, r8
 8002694:	4620      	mov	r0, r4
 8002696:	f7ff ff77 	bl	8002588 <I2C_WaitOnTXEFlagUntilTimeout>
 800269a:	b920      	cbnz	r0, 80026a6 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	fa5f f689 	uxtb.w	r6, r9
 80026a2:	611e      	str	r6, [r3, #16]
 80026a4:	e7cd      	b.n	8002642 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d001      	beq.n	80026b0 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
 80026ae:	e7c8      	b.n	8002642 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b0:	6822      	ldr	r2, [r4, #0]
 80026b2:	6813      	ldr	r3, [r2, #0]
 80026b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e7f7      	b.n	80026ac <I2C_RequestMemoryWrite+0xc4>
 80026bc:	00010002 	.word	0x00010002

080026c0 <I2C_RequestMemoryRead>:
{
 80026c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	4604      	mov	r4, r0
 80026c8:	460d      	mov	r5, r1
 80026ca:	4616      	mov	r6, r2
 80026cc:	4699      	mov	r9, r3
 80026ce:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80026d0:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d4:	6802      	ldr	r2, [r0, #0]
 80026d6:	6813      	ldr	r3, [r2, #0]
 80026d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026dc:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026de:	6803      	ldr	r3, [r0, #0]
 80026e0:	6819      	ldr	r1, [r3, #0]
 80026e2:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80026e6:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e8:	f8cd 8000 	str.w	r8, [sp]
 80026ec:	463b      	mov	r3, r7
 80026ee:	2200      	movs	r2, #0
 80026f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026f4:	f7ff fe88 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 80026f8:	b970      	cbnz	r0, 8002718 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026fa:	fa5f fa85 	uxtb.w	sl, r5
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8002704:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002706:	4643      	mov	r3, r8
 8002708:	463a      	mov	r2, r7
 800270a:	4941      	ldr	r1, [pc, #260]	@ (8002810 <I2C_RequestMemoryRead+0x150>)
 800270c:	4620      	mov	r0, r4
 800270e:	f7ff fed0 	bl	80024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002712:	b168      	cbz	r0, 8002730 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8002714:	2001      	movs	r0, #1
 8002716:	e008      	b.n	800272a <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002718:	6823      	ldr	r3, [r4, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002720:	d002      	beq.n	8002728 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002722:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002726:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002728:	2003      	movs	r0, #3
}
 800272a:	b004      	add	sp, #16
 800272c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002730:	2300      	movs	r3, #0
 8002732:	9303      	str	r3, [sp, #12]
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	9203      	str	r2, [sp, #12]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	9303      	str	r3, [sp, #12]
 800273e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002740:	4642      	mov	r2, r8
 8002742:	4639      	mov	r1, r7
 8002744:	4620      	mov	r0, r4
 8002746:	f7ff ff1f 	bl	8002588 <I2C_WaitOnTXEFlagUntilTimeout>
 800274a:	b980      	cbnz	r0, 800276e <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800274c:	f1b9 0f01 	cmp.w	r9, #1
 8002750:	d118      	bne.n	8002784 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	b2f6      	uxtb	r6, r6
 8002756:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002758:	4642      	mov	r2, r8
 800275a:	4639      	mov	r1, r7
 800275c:	4620      	mov	r0, r4
 800275e:	f7ff ff13 	bl	8002588 <I2C_WaitOnTXEFlagUntilTimeout>
 8002762:	b368      	cbz	r0, 80027c0 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002764:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002766:	2b04      	cmp	r3, #4
 8002768:	d024      	beq.n	80027b4 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 800276a:	2001      	movs	r0, #1
 800276c:	e7dd      	b.n	800272a <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800276e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002770:	2b04      	cmp	r3, #4
 8002772:	d001      	beq.n	8002778 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8002774:	2001      	movs	r0, #1
 8002776:	e7d8      	b.n	800272a <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002778:	6822      	ldr	r2, [r4, #0]
 800277a:	6813      	ldr	r3, [r2, #0]
 800277c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e7f7      	b.n	8002774 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	0a32      	lsrs	r2, r6, #8
 8002788:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800278a:	4642      	mov	r2, r8
 800278c:	4639      	mov	r1, r7
 800278e:	4620      	mov	r0, r4
 8002790:	f7ff fefa 	bl	8002588 <I2C_WaitOnTXEFlagUntilTimeout>
 8002794:	b918      	cbnz	r0, 800279e <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	b2f6      	uxtb	r6, r6
 800279a:	611e      	str	r6, [r3, #16]
 800279c:	e7dc      	b.n	8002758 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800279e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d001      	beq.n	80027a8 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 80027a4:	2001      	movs	r0, #1
 80027a6:	e7c0      	b.n	800272a <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a8:	6822      	ldr	r2, [r4, #0]
 80027aa:	6813      	ldr	r3, [r2, #0]
 80027ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e7f7      	b.n	80027a4 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b4:	6822      	ldr	r2, [r4, #0]
 80027b6:	6813      	ldr	r3, [r2, #0]
 80027b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	e7d4      	b.n	800276a <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027c0:	6822      	ldr	r2, [r4, #0]
 80027c2:	6813      	ldr	r3, [r2, #0]
 80027c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c8:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ca:	f8cd 8000 	str.w	r8, [sp]
 80027ce:	463b      	mov	r3, r7
 80027d0:	2200      	movs	r2, #0
 80027d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7ff fe16 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 80027dc:	b968      	cbnz	r0, 80027fa <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027de:	6822      	ldr	r2, [r4, #0]
 80027e0:	f04a 0301 	orr.w	r3, sl, #1
 80027e4:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027e6:	4643      	mov	r3, r8
 80027e8:	463a      	mov	r2, r7
 80027ea:	4909      	ldr	r1, [pc, #36]	@ (8002810 <I2C_RequestMemoryRead+0x150>)
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7ff fe60 	bl	80024b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d099      	beq.n	800272a <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 80027f6:	2001      	movs	r0, #1
 80027f8:	e797      	b.n	800272a <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002802:	d002      	beq.n	800280a <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002808:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800280a:	2003      	movs	r0, #3
 800280c:	e78d      	b.n	800272a <I2C_RequestMemoryRead+0x6a>
 800280e:	bf00      	nop
 8002810:	00010002 	.word	0x00010002

08002814 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002814:	b570      	push	{r4, r5, r6, lr}
 8002816:	4604      	mov	r4, r0
 8002818:	460d      	mov	r5, r1
 800281a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	f013 0f04 	tst.w	r3, #4
 8002824:	d121      	bne.n	800286a <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002826:	4620      	mov	r0, r4
 8002828:	f7ff fdc6 	bl	80023b8 <I2C_IsAcknowledgeFailed>
 800282c:	b9f8      	cbnz	r0, 800286e <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800282e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002832:	d0f3      	beq.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002834:	f7ff f946 	bl	8001ac4 <HAL_GetTick>
 8002838:	1b80      	subs	r0, r0, r6
 800283a:	42a8      	cmp	r0, r5
 800283c:	d801      	bhi.n	8002842 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800283e:	2d00      	cmp	r5, #0
 8002840:	d1ec      	bne.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f013 0f04 	tst.w	r3, #4
 800284a:	d1e7      	bne.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800284c:	2300      	movs	r3, #0
 800284e:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002850:	2220      	movs	r2, #32
 8002852:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002856:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800285a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800285c:	f042 0220 	orr.w	r2, r2, #32
 8002860:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002862:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002866:	2001      	movs	r0, #1
 8002868:	e000      	b.n	800286c <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 800286a:	2000      	movs	r0, #0
}
 800286c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800286e:	2001      	movs	r0, #1
 8002870:	e7fc      	b.n	800286c <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08002872 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002872:	b570      	push	{r4, r5, r6, lr}
 8002874:	4604      	mov	r4, r0
 8002876:	460d      	mov	r5, r1
 8002878:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800287a:	e014      	b.n	80028a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800287c:	f06f 0210 	mvn.w	r2, #16
 8002880:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002882:	2300      	movs	r3, #0
 8002884:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002886:	2220      	movs	r2, #32
 8002888:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800288c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002890:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002892:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8002894:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8002898:	2001      	movs	r0, #1
 800289a:	e025      	b.n	80028e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80028a4:	d010      	beq.n	80028c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	6958      	ldr	r0, [r3, #20]
 80028aa:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80028ae:	d11a      	bne.n	80028e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028b0:	6958      	ldr	r0, [r3, #20]
 80028b2:	f010 0f10 	tst.w	r0, #16
 80028b6:	d1e1      	bne.n	800287c <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b8:	f7ff f904 	bl	8001ac4 <HAL_GetTick>
 80028bc:	1b80      	subs	r0, r0, r6
 80028be:	42a8      	cmp	r0, r5
 80028c0:	d8ec      	bhi.n	800289c <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 80028c2:	2d00      	cmp	r5, #0
 80028c4:	d1ef      	bne.n	80028a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 80028c6:	e7e9      	b.n	800289c <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028cc:	2220      	movs	r2, #32
 80028ce:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028d6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80028d8:	f042 0220 	orr.w	r2, r2, #32
 80028dc:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80028de:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 80028e2:	2001      	movs	r0, #1
 80028e4:	e000      	b.n	80028e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 80028e6:	2000      	movs	r0, #0
}
 80028e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080028ec <HAL_I2C_Init>:
  if (hi2c == NULL)
 80028ec:	2800      	cmp	r0, #0
 80028ee:	f000 80cc 	beq.w	8002a8a <HAL_I2C_Init+0x19e>
{
 80028f2:	b570      	push	{r4, r5, r6, lr}
 80028f4:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028f6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d077      	beq.n	80029ee <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80028fe:	2324      	movs	r3, #36	@ 0x24
 8002900:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002904:	6822      	ldr	r2, [r4, #0]
 8002906:	6813      	ldr	r3, [r2, #0]
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800290e:	6822      	ldr	r2, [r4, #0]
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002916:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002918:	6822      	ldr	r2, [r4, #0]
 800291a:	6813      	ldr	r3, [r2, #0]
 800291c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002920:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002922:	f001 fd43 	bl	80043ac <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002926:	6862      	ldr	r2, [r4, #4]
 8002928:	4b5a      	ldr	r3, [pc, #360]	@ (8002a94 <HAL_I2C_Init+0x1a8>)
 800292a:	429a      	cmp	r2, r3
 800292c:	d864      	bhi.n	80029f8 <HAL_I2C_Init+0x10c>
 800292e:	4b5a      	ldr	r3, [pc, #360]	@ (8002a98 <HAL_I2C_Init+0x1ac>)
 8002930:	4298      	cmp	r0, r3
 8002932:	bf8c      	ite	hi
 8002934:	2300      	movhi	r3, #0
 8002936:	2301      	movls	r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	f040 80a8 	bne.w	8002a8e <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 800293e:	4957      	ldr	r1, [pc, #348]	@ (8002a9c <HAL_I2C_Init+0x1b0>)
 8002940:	fba1 3100 	umull	r3, r1, r1, r0
 8002944:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002946:	6825      	ldr	r5, [r4, #0]
 8002948:	686a      	ldr	r2, [r5, #4]
 800294a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800294e:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002952:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002954:	6821      	ldr	r1, [r4, #0]
 8002956:	6a0a      	ldr	r2, [r1, #32]
 8002958:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800295c:	6866      	ldr	r6, [r4, #4]
 800295e:	4d4d      	ldr	r5, [pc, #308]	@ (8002a94 <HAL_I2C_Init+0x1a8>)
 8002960:	42ae      	cmp	r6, r5
 8002962:	d84f      	bhi.n	8002a04 <HAL_I2C_Init+0x118>
 8002964:	3301      	adds	r3, #1
 8002966:	4313      	orrs	r3, r2
 8002968:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800296a:	6821      	ldr	r1, [r4, #0]
 800296c:	69ca      	ldr	r2, [r1, #28]
 800296e:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8002972:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002976:	6865      	ldr	r5, [r4, #4]
 8002978:	4b46      	ldr	r3, [pc, #280]	@ (8002a94 <HAL_I2C_Init+0x1a8>)
 800297a:	429d      	cmp	r5, r3
 800297c:	d84c      	bhi.n	8002a18 <HAL_I2C_Init+0x12c>
 800297e:	1e43      	subs	r3, r0, #1
 8002980:	006d      	lsls	r5, r5, #1
 8002982:	fbb3 f3f5 	udiv	r3, r3, r5
 8002986:	3301      	adds	r3, #1
 8002988:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800298c:	4203      	tst	r3, r0
 800298e:	d078      	beq.n	8002a82 <HAL_I2C_Init+0x196>
 8002990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002994:	431a      	orrs	r2, r3
 8002996:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002998:	6821      	ldr	r1, [r4, #0]
 800299a:	680b      	ldr	r3, [r1, #0]
 800299c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80029a0:	69e2      	ldr	r2, [r4, #28]
 80029a2:	6a20      	ldr	r0, [r4, #32]
 80029a4:	4302      	orrs	r2, r0
 80029a6:	4313      	orrs	r3, r2
 80029a8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029aa:	6821      	ldr	r1, [r4, #0]
 80029ac:	688b      	ldr	r3, [r1, #8]
 80029ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029b6:	6922      	ldr	r2, [r4, #16]
 80029b8:	68e0      	ldr	r0, [r4, #12]
 80029ba:	4302      	orrs	r2, r0
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029c0:	6821      	ldr	r1, [r4, #0]
 80029c2:	68cb      	ldr	r3, [r1, #12]
 80029c4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029c8:	6962      	ldr	r2, [r4, #20]
 80029ca:	69a0      	ldr	r0, [r4, #24]
 80029cc:	4302      	orrs	r2, r0
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80029d2:	6822      	ldr	r2, [r4, #0]
 80029d4:	6813      	ldr	r3, [r2, #0]
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029dc:	2000      	movs	r0, #0
 80029de:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	2320      	movs	r3, #32
 80029e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029e6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 80029ec:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80029ee:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80029f2:	f7fe fe35 	bl	8001660 <HAL_I2C_MspInit>
 80029f6:	e782      	b.n	80028fe <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029f8:	4b29      	ldr	r3, [pc, #164]	@ (8002aa0 <HAL_I2C_Init+0x1b4>)
 80029fa:	4298      	cmp	r0, r3
 80029fc:	bf8c      	ite	hi
 80029fe:	2300      	movhi	r3, #0
 8002a00:	2301      	movls	r3, #1
 8002a02:	e799      	b.n	8002938 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a04:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8002a08:	fb05 f303 	mul.w	r3, r5, r3
 8002a0c:	4d25      	ldr	r5, [pc, #148]	@ (8002aa4 <HAL_I2C_Init+0x1b8>)
 8002a0e:	fba5 5303 	umull	r5, r3, r5, r3
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	3301      	adds	r3, #1
 8002a16:	e7a6      	b.n	8002966 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a18:	68a6      	ldr	r6, [r4, #8]
 8002a1a:	b9be      	cbnz	r6, 8002a4c <HAL_I2C_Init+0x160>
 8002a1c:	1e43      	subs	r3, r0, #1
 8002a1e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8002a22:	fbb3 f3fc 	udiv	r3, r3, ip
 8002a26:	3301      	adds	r3, #1
 8002a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	bb43      	cbnz	r3, 8002a86 <HAL_I2C_Init+0x19a>
 8002a34:	b9c6      	cbnz	r6, 8002a68 <HAL_I2C_Init+0x17c>
 8002a36:	1e43      	subs	r3, r0, #1
 8002a38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a3c:	fbb3 f3f5 	udiv	r3, r3, r5
 8002a40:	3301      	adds	r3, #1
 8002a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a4a:	e7a3      	b.n	8002994 <HAL_I2C_Init+0xa8>
 8002a4c:	1e43      	subs	r3, r0, #1
 8002a4e:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002a52:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002a56:	fbb3 f3fc 	udiv	r3, r3, ip
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	e7e4      	b.n	8002a32 <HAL_I2C_Init+0x146>
 8002a68:	1e43      	subs	r3, r0, #1
 8002a6a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002a6e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002a72:	fbb3 f3f5 	udiv	r3, r3, r5
 8002a76:	3301      	adds	r3, #1
 8002a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a80:	e788      	b.n	8002994 <HAL_I2C_Init+0xa8>
 8002a82:	2304      	movs	r3, #4
 8002a84:	e786      	b.n	8002994 <HAL_I2C_Init+0xa8>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e784      	b.n	8002994 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
}
 8002a8c:	4770      	bx	lr
    return HAL_ERROR;
 8002a8e:	2001      	movs	r0, #1
 8002a90:	e7ac      	b.n	80029ec <HAL_I2C_Init+0x100>
 8002a92:	bf00      	nop
 8002a94:	000186a0 	.word	0x000186a0
 8002a98:	001e847f 	.word	0x001e847f
 8002a9c:	431bde83 	.word	0x431bde83
 8002aa0:	003d08ff 	.word	0x003d08ff
 8002aa4:	10624dd3 	.word	0x10624dd3

08002aa8 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8002aa8:	b1a8      	cbz	r0, 8002ad6 <HAL_I2C_DeInit+0x2e>
{
 8002aaa:	b510      	push	{r4, lr}
 8002aac:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aae:	2324      	movs	r3, #36	@ 0x24
 8002ab0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002ab4:	6802      	ldr	r2, [r0, #0]
 8002ab6:	6813      	ldr	r3, [r2, #0]
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002abe:	f7fe fe45 	bl	800174c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002ac6:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aca:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002acc:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 8002ad0:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8002ad4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ad6:	2001      	movs	r0, #1
}
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_I2C_Mem_Write>:
{
 8002adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460f      	mov	r7, r1
 8002ae6:	4690      	mov	r8, r2
 8002ae8:	4699      	mov	r9, r3
 8002aea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8002aec:	f7fe ffea 	bl	8001ac4 <HAL_GetTick>
 8002af0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af2:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8002af6:	b2c0      	uxtb	r0, r0
 8002af8:	2820      	cmp	r0, #32
 8002afa:	d003      	beq.n	8002b04 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8002afc:	2002      	movs	r0, #2
}
 8002afe:	b003      	add	sp, #12
 8002b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b04:	9500      	str	r5, [sp, #0]
 8002b06:	2319      	movs	r3, #25
 8002b08:	2201      	movs	r2, #1
 8002b0a:	494b      	ldr	r1, [pc, #300]	@ (8002c38 <HAL_I2C_Mem_Write+0x15c>)
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7ff fc7b 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8002b12:	2800      	cmp	r0, #0
 8002b14:	f040 8089 	bne.w	8002c2a <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8002b18:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	f000 8086 	beq.w	8002c2e <HAL_I2C_Mem_Write+0x152>
 8002b22:	2301      	movs	r3, #1
 8002b24:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	f012 0f01 	tst.w	r2, #1
 8002b30:	d103      	bne.n	8002b3a <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b3a:	6822      	ldr	r2, [r4, #0]
 8002b3c:	6813      	ldr	r3, [r2, #0]
 8002b3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b42:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b44:	2321      	movs	r3, #33	@ 0x21
 8002b46:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b4a:	2340      	movs	r3, #64	@ 0x40
 8002b4c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002b56:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b58:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8002b5c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b5e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b60:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b62:	4b36      	ldr	r3, [pc, #216]	@ (8002c3c <HAL_I2C_Mem_Write+0x160>)
 8002b64:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b66:	9501      	str	r5, [sp, #4]
 8002b68:	9600      	str	r6, [sp, #0]
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	4639      	mov	r1, r7
 8002b70:	4620      	mov	r0, r4
 8002b72:	f7ff fd39 	bl	80025e8 <I2C_RequestMemoryWrite>
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d15b      	bne.n	8002c32 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8002b7a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d035      	beq.n	8002bec <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b80:	462a      	mov	r2, r5
 8002b82:	4631      	mov	r1, r6
 8002b84:	4620      	mov	r0, r4
 8002b86:	f7ff fcff 	bl	8002588 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b8a:	bb20      	cbnz	r0, 8002bd6 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b8c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	7812      	ldrb	r2, [r2, #0]
 8002b92:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002b94:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002b96:	1c53      	adds	r3, r2, #1
 8002b98:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002b9a:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8002b9c:	3901      	subs	r1, #1
 8002b9e:	b289      	uxth	r1, r1
 8002ba0:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002ba2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	6958      	ldr	r0, [r3, #20]
 8002bb0:	f010 0f04 	tst.w	r0, #4
 8002bb4:	d0e1      	beq.n	8002b7a <HAL_I2C_Mem_Write+0x9e>
 8002bb6:	2900      	cmp	r1, #0
 8002bb8:	d0df      	beq.n	8002b7a <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bba:	7852      	ldrb	r2, [r2, #1]
 8002bbc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002bbe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002bc4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002bca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002bd4:	e7d1      	b.n	8002b7a <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d001      	beq.n	8002be0 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8002bdc:	2001      	movs	r0, #1
 8002bde:	e78e      	b.n	8002afe <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be0:	6822      	ldr	r2, [r4, #0]
 8002be2:	6813      	ldr	r3, [r2, #0]
 8002be4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e7f7      	b.n	8002bdc <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bec:	462a      	mov	r2, r5
 8002bee:	4631      	mov	r1, r6
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f7ff fe0f 	bl	8002814 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bf6:	b150      	cbz	r0, 8002c0e <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d001      	beq.n	8002c02 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8002bfe:	2001      	movs	r0, #1
 8002c00:	e77d      	b.n	8002afe <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c02:	6822      	ldr	r2, [r4, #0]
 8002c04:	6813      	ldr	r3, [r2, #0]
 8002c06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	e7f7      	b.n	8002bfe <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0e:	6822      	ldr	r2, [r4, #0]
 8002c10:	6813      	ldr	r3, [r2, #0]
 8002c12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c16:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	2320      	movs	r3, #32
 8002c1a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002c24:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8002c28:	e769      	b.n	8002afe <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8002c2a:	2002      	movs	r0, #2
 8002c2c:	e767      	b.n	8002afe <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8002c2e:	2002      	movs	r0, #2
 8002c30:	e765      	b.n	8002afe <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8002c32:	2001      	movs	r0, #1
 8002c34:	e763      	b.n	8002afe <HAL_I2C_Mem_Write+0x22>
 8002c36:	bf00      	nop
 8002c38:	00100002 	.word	0x00100002
 8002c3c:	ffff0000 	.word	0xffff0000

08002c40 <HAL_I2C_Mem_Read>:
{
 8002c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c44:	b089      	sub	sp, #36	@ 0x24
 8002c46:	4604      	mov	r4, r0
 8002c48:	460f      	mov	r7, r1
 8002c4a:	4690      	mov	r8, r2
 8002c4c:	4699      	mov	r9, r3
 8002c4e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
  __IO uint32_t count = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8002c54:	f7fe ff36 	bl	8001ac4 <HAL_GetTick>
 8002c58:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c5a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8002c5e:	b2c0      	uxtb	r0, r0
 8002c60:	2820      	cmp	r0, #32
 8002c62:	d004      	beq.n	8002c6e <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8002c64:	2702      	movs	r7, #2
}
 8002c66:	4638      	mov	r0, r7
 8002c68:	b009      	add	sp, #36	@ 0x24
 8002c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c6e:	9500      	str	r5, [sp, #0]
 8002c70:	2319      	movs	r3, #25
 8002c72:	2201      	movs	r2, #1
 8002c74:	4981      	ldr	r1, [pc, #516]	@ (8002e7c <HAL_I2C_Mem_Read+0x23c>)
 8002c76:	4620      	mov	r0, r4
 8002c78:	f7ff fbc6 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	f040 817c 	bne.w	8002f7a <HAL_I2C_Mem_Read+0x33a>
    __HAL_LOCK(hi2c);
 8002c82:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	f000 8179 	beq.w	8002f7e <HAL_I2C_Mem_Read+0x33e>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	f012 0f01 	tst.w	r2, #1
 8002c9a:	d103      	bne.n	8002ca4 <HAL_I2C_Mem_Read+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ca4:	6822      	ldr	r2, [r4, #0]
 8002ca6:	6813      	ldr	r3, [r2, #0]
 8002ca8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cac:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cae:	2322      	movs	r3, #34	@ 0x22
 8002cb0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cb4:	2340      	movs	r3, #64	@ 0x40
 8002cb6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002cbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002cc0:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cc2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8002cc6:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cc8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002cca:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ccc:	4b6c      	ldr	r3, [pc, #432]	@ (8002e80 <HAL_I2C_Mem_Read+0x240>)
 8002cce:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cd0:	9501      	str	r5, [sp, #4]
 8002cd2:	9600      	str	r6, [sp, #0]
 8002cd4:	464b      	mov	r3, r9
 8002cd6:	4642      	mov	r2, r8
 8002cd8:	4639      	mov	r1, r7
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7ff fcf0 	bl	80026c0 <I2C_RequestMemoryRead>
 8002ce0:	4607      	mov	r7, r0
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	f040 814d 	bne.w	8002f82 <HAL_I2C_Mem_Read+0x342>
    if (hi2c->XferSize == 0U)
 8002ce8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002cea:	b95b      	cbnz	r3, 8002d04 <HAL_I2C_Mem_Read+0xc4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cec:	9303      	str	r3, [sp, #12]
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	9203      	str	r2, [sp, #12]
 8002cf4:	699a      	ldr	r2, [r3, #24]
 8002cf6:	9203      	str	r2, [sp, #12]
 8002cf8:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e0f2      	b.n	8002eea <HAL_I2C_Mem_Read+0x2aa>
    else if (hi2c->XferSize == 1U)
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d00f      	beq.n	8002d28 <HAL_I2C_Mem_Read+0xe8>
    else if (hi2c->XferSize == 2U)
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d021      	beq.n	8002d50 <HAL_I2C_Mem_Read+0x110>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0c:	6822      	ldr	r2, [r4, #0]
 8002d0e:	6813      	ldr	r3, [r2, #0]
 8002d10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d14:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d16:	2300      	movs	r3, #0
 8002d18:	9306      	str	r3, [sp, #24]
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	9206      	str	r2, [sp, #24]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	9306      	str	r3, [sp, #24]
 8002d24:	9b06      	ldr	r3, [sp, #24]
 8002d26:	e0e0      	b.n	8002eea <HAL_I2C_Mem_Read+0x2aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d28:	6822      	ldr	r2, [r4, #0]
 8002d2a:	6813      	ldr	r3, [r2, #0]
 8002d2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d30:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d32:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d34:	2300      	movs	r3, #0
 8002d36:	9304      	str	r3, [sp, #16]
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	9204      	str	r2, [sp, #16]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	9204      	str	r2, [sp, #16]
 8002d42:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d4c:	b662      	cpsie	i
}
 8002d4e:	e0cc      	b.n	8002eea <HAL_I2C_Mem_Read+0x2aa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d50:	6822      	ldr	r2, [r4, #0]
 8002d52:	6813      	ldr	r3, [r2, #0]
 8002d54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d58:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d5a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9305      	str	r3, [sp, #20]
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	695a      	ldr	r2, [r3, #20]
 8002d64:	9205      	str	r2, [sp, #20]
 8002d66:	699a      	ldr	r2, [r3, #24]
 8002d68:	9205      	str	r2, [sp, #20]
 8002d6a:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d74:	b662      	cpsie	i
}
 8002d76:	e0b8      	b.n	8002eea <HAL_I2C_Mem_Read+0x2aa>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d78:	462a      	mov	r2, r5
 8002d7a:	4631      	mov	r1, r6
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f7ff fd78 	bl	8002872 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d82:	2800      	cmp	r0, #0
 8002d84:	f040 80ff 	bne.w	8002f86 <HAL_I2C_Mem_Read+0x346>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002d8e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002d90:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002d92:	3301      	adds	r3, #1
 8002d94:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002d96:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002d9c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002da6:	e0a0      	b.n	8002eea <HAL_I2C_Mem_Read+0x2aa>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002da8:	9500      	str	r5, [sp, #0]
 8002daa:	4633      	mov	r3, r6
 8002dac:	2200      	movs	r2, #0
 8002dae:	4935      	ldr	r1, [pc, #212]	@ (8002e84 <HAL_I2C_Mem_Read+0x244>)
 8002db0:	4620      	mov	r0, r4
 8002db2:	f7ff fb29 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	f040 80e9 	bne.w	8002f8e <HAL_I2C_Mem_Read+0x34e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dbc:	6822      	ldr	r2, [r4, #0]
 8002dbe:	6813      	ldr	r3, [r2, #0]
 8002dc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002dc4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc6:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002dce:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002dd0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002dd6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002ddc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002de6:	4b28      	ldr	r3, [pc, #160]	@ (8002e88 <HAL_I2C_Mem_Read+0x248>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	08db      	lsrs	r3, r3, #3
 8002dec:	4a27      	ldr	r2, [pc, #156]	@ (8002e8c <HAL_I2C_Mem_Read+0x24c>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002df8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002dfc:	9307      	str	r3, [sp, #28]
            count--;
 8002dfe:	9b07      	ldr	r3, [sp, #28]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 8002e04:	9b07      	ldr	r3, [sp, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d028      	beq.n	8002e5c <HAL_I2C_Mem_Read+0x21c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	f012 0f04 	tst.w	r2, #4
 8002e12:	d0f4      	beq.n	8002dfe <HAL_I2C_Mem_Read+0x1be>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e22:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002e24:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e26:	3301      	adds	r3, #1
 8002e28:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002e2a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002e30:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e3a:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e42:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002e44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e46:	3301      	adds	r3, #1
 8002e48:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002e4a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002e50:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002e5a:	e046      	b.n	8002eea <HAL_I2C_Mem_Read+0x2aa>
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5c:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e64:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002e6a:	f042 0220 	orr.w	r2, r2, #32
 8002e6e:	6422      	str	r2, [r4, #64]	@ 0x40
 8002e70:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8002e72:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
              return HAL_ERROR;
 8002e76:	2701      	movs	r7, #1
 8002e78:	e6f5      	b.n	8002c66 <HAL_I2C_Mem_Read+0x26>
 8002e7a:	bf00      	nop
 8002e7c:	00100002 	.word	0x00100002
 8002e80:	ffff0000 	.word	0xffff0000
 8002e84:	00010004 	.word	0x00010004
 8002e88:	20000004 	.word	0x20000004
 8002e8c:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e90:	462a      	mov	r2, r5
 8002e92:	4631      	mov	r1, r6
 8002e94:	4620      	mov	r0, r4
 8002e96:	f7ff fcec 	bl	8002872 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e9a:	2800      	cmp	r0, #0
 8002e9c:	d179      	bne.n	8002f92 <HAL_I2C_Mem_Read+0x352>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ea4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ea6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002eac:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8002eae:	3a01      	subs	r2, #1
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002eb4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	6959      	ldr	r1, [r3, #20]
 8002ec2:	f011 0f04 	tst.w	r1, #4
 8002ec6:	d010      	beq.n	8002eea <HAL_I2C_Mem_Read+0x2aa>
          if (hi2c->XferSize == 3U)
 8002ec8:	2a03      	cmp	r2, #3
 8002eca:	d048      	beq.n	8002f5e <HAL_I2C_Mem_Read+0x31e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ed2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002ed4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002eda:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002edc:	3b01      	subs	r3, #1
 8002ede:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002ee0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002eea:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d03b      	beq.n	8002f68 <HAL_I2C_Mem_Read+0x328>
      if (hi2c->XferSize <= 3U)
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d8cd      	bhi.n	8002e90 <HAL_I2C_Mem_Read+0x250>
        if (hi2c->XferSize == 1U)
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	f43f af3f 	beq.w	8002d78 <HAL_I2C_Mem_Read+0x138>
        else if (hi2c->XferSize == 2U)
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	f47f af54 	bne.w	8002da8 <HAL_I2C_Mem_Read+0x168>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f00:	9500      	str	r5, [sp, #0]
 8002f02:	4633      	mov	r3, r6
 8002f04:	2200      	movs	r2, #0
 8002f06:	4924      	ldr	r1, [pc, #144]	@ (8002f98 <HAL_I2C_Mem_Read+0x358>)
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f7ff fa7d 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	d13b      	bne.n	8002f8a <HAL_I2C_Mem_Read+0x34a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f12:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f14:	6822      	ldr	r2, [r4, #0]
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f1c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f24:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002f26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f28:	3301      	adds	r3, #1
 8002f2a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002f2c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002f32:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f3c:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f44:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002f46:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f48:	3301      	adds	r3, #1
 8002f4a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002f4c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002f52:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002f5c:	e7c5      	b.n	8002eea <HAL_I2C_Mem_Read+0x2aa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e7b1      	b.n	8002ecc <HAL_I2C_Mem_Read+0x28c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f68:	2320      	movs	r3, #32
 8002f6a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002f74:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8002f78:	e675      	b.n	8002c66 <HAL_I2C_Mem_Read+0x26>
      return HAL_BUSY;
 8002f7a:	2702      	movs	r7, #2
 8002f7c:	e673      	b.n	8002c66 <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 8002f7e:	2702      	movs	r7, #2
 8002f80:	e671      	b.n	8002c66 <HAL_I2C_Mem_Read+0x26>
      return HAL_ERROR;
 8002f82:	2701      	movs	r7, #1
 8002f84:	e66f      	b.n	8002c66 <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8002f86:	2701      	movs	r7, #1
 8002f88:	e66d      	b.n	8002c66 <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8002f8a:	2701      	movs	r7, #1
 8002f8c:	e66b      	b.n	8002c66 <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8002f8e:	2701      	movs	r7, #1
 8002f90:	e669      	b.n	8002c66 <HAL_I2C_Mem_Read+0x26>
          return HAL_ERROR;
 8002f92:	2701      	movs	r7, #1
 8002f94:	e667      	b.n	8002c66 <HAL_I2C_Mem_Read+0x26>
 8002f96:	bf00      	nop
 8002f98:	00010004 	.word	0x00010004

08002f9c <HAL_I2C_IsDeviceReady>:
{
 8002f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	4604      	mov	r4, r0
 8002fa4:	4688      	mov	r8, r1
 8002fa6:	4691      	mov	r9, r2
 8002fa8:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8002faa:	f7fe fd8b 	bl	8001ac4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fae:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d003      	beq.n	8002fc0 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8002fb8:	2002      	movs	r0, #2
}
 8002fba:	b005      	add	sp, #20
 8002fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fc0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fc2:	9000      	str	r0, [sp, #0]
 8002fc4:	2319      	movs	r3, #25
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4957      	ldr	r1, [pc, #348]	@ (8003128 <HAL_I2C_IsDeviceReady+0x18c>)
 8002fca:	4620      	mov	r0, r4
 8002fcc:	f7ff fa1c 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	f040 80a0 	bne.w	8003116 <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8002fd6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	f000 809d 	beq.w	800311a <HAL_I2C_IsDeviceReady+0x17e>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	f012 0f01 	tst.w	r2, #1
 8002fee:	d103      	bne.n	8002ff8 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ff8:	6822      	ldr	r2, [r4, #0]
 8002ffa:	6813      	ldr	r3, [r2, #0]
 8002ffc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003000:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003002:	2324      	movs	r3, #36	@ 0x24
 8003004:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003008:	2700      	movs	r7, #0
 800300a:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800300c:	4b47      	ldr	r3, [pc, #284]	@ (800312c <HAL_I2C_IsDeviceReady+0x190>)
 800300e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003010:	e040      	b.n	8003094 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800301a:	d002      	beq.n	8003022 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800301c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003020:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8003022:	2003      	movs	r0, #3
 8003024:	e7c9      	b.n	8002fba <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003026:	23a0      	movs	r3, #160	@ 0xa0
 8003028:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800302c:	6822      	ldr	r2, [r4, #0]
 800302e:	6953      	ldr	r3, [r2, #20]
 8003030:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003034:	6952      	ldr	r2, [r2, #20]
 8003036:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800303a:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 800303e:	fa5f fc8c 	uxtb.w	ip, ip
 8003042:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8003046:	d009      	beq.n	800305c <HAL_I2C_IsDeviceReady+0xc0>
 8003048:	b943      	cbnz	r3, 800305c <HAL_I2C_IsDeviceReady+0xc0>
 800304a:	b93a      	cbnz	r2, 800305c <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800304c:	f7fe fd3a 	bl	8001ac4 <HAL_GetTick>
 8003050:	1b80      	subs	r0, r0, r6
 8003052:	42a8      	cmp	r0, r5
 8003054:	d8e7      	bhi.n	8003026 <HAL_I2C_IsDeviceReady+0x8a>
 8003056:	2d00      	cmp	r5, #0
 8003058:	d1e8      	bne.n	800302c <HAL_I2C_IsDeviceReady+0x90>
 800305a:	e7e4      	b.n	8003026 <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 800305c:	2320      	movs	r3, #32
 800305e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	f012 0f02 	tst.w	r2, #2
 800306a:	d131      	bne.n	80030d0 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003072:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800307a:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800307c:	9600      	str	r6, [sp, #0]
 800307e:	2319      	movs	r3, #25
 8003080:	2201      	movs	r2, #1
 8003082:	4929      	ldr	r1, [pc, #164]	@ (8003128 <HAL_I2C_IsDeviceReady+0x18c>)
 8003084:	4620      	mov	r0, r4
 8003086:	f7ff f9bf 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 800308a:	2800      	cmp	r0, #0
 800308c:	d149      	bne.n	8003122 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 800308e:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8003090:	454f      	cmp	r7, r9
 8003092:	d238      	bcs.n	8003106 <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003094:	6822      	ldr	r2, [r4, #0]
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309c:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800309e:	9600      	str	r6, [sp, #0]
 80030a0:	462b      	mov	r3, r5
 80030a2:	2200      	movs	r2, #0
 80030a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030a8:	4620      	mov	r0, r4
 80030aa:	f7ff f9ad 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d1af      	bne.n	8003012 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 80030b8:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80030ba:	f7fe fd03 	bl	8001ac4 <HAL_GetTick>
 80030be:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030c0:	6822      	ldr	r2, [r4, #0]
 80030c2:	6953      	ldr	r3, [r2, #20]
 80030c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030c8:	6952      	ldr	r2, [r2, #20]
 80030ca:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030ce:	e7b4      	b.n	800303a <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d8:	2300      	movs	r3, #0
 80030da:	9303      	str	r3, [sp, #12]
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	9203      	str	r2, [sp, #12]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	9303      	str	r3, [sp, #12]
 80030e6:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e8:	9600      	str	r6, [sp, #0]
 80030ea:	2319      	movs	r3, #25
 80030ec:	2201      	movs	r2, #1
 80030ee:	490e      	ldr	r1, [pc, #56]	@ (8003128 <HAL_I2C_IsDeviceReady+0x18c>)
 80030f0:	4620      	mov	r0, r4
 80030f2:	f7ff f989 	bl	8002408 <I2C_WaitOnFlagUntilTimeout>
 80030f6:	b990      	cbnz	r0, 800311e <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 80030f8:	2320      	movs	r3, #32
 80030fa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 80030fe:	2300      	movs	r3, #0
 8003100:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 8003104:	e759      	b.n	8002fba <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003106:	2320      	movs	r3, #32
 8003108:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 800310c:	2300      	movs	r3, #0
 800310e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8003112:	2001      	movs	r0, #1
 8003114:	e751      	b.n	8002fba <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8003116:	2002      	movs	r0, #2
 8003118:	e74f      	b.n	8002fba <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 800311a:	2002      	movs	r0, #2
 800311c:	e74d      	b.n	8002fba <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 800311e:	2001      	movs	r0, #1
 8003120:	e74b      	b.n	8002fba <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003122:	2001      	movs	r0, #1
 8003124:	e749      	b.n	8002fba <HAL_I2C_IsDeviceReady+0x1e>
 8003126:	bf00      	nop
 8003128:	00100002 	.word	0x00100002
 800312c:	ffff0000 	.word	0xffff0000

08003130 <HAL_I2C_MasterTxCpltCallback>:
}
 8003130:	4770      	bx	lr

08003132 <HAL_I2C_MasterRxCpltCallback>:
}
 8003132:	4770      	bx	lr

08003134 <HAL_I2C_SlaveTxCpltCallback>:
}
 8003134:	4770      	bx	lr

08003136 <I2C_SlaveTransmit_TXE>:
{
 8003136:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003138:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800313c:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 800313e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	b183      	cbz	r3, 8003166 <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003144:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8003146:	6803      	ldr	r3, [r0, #0]
 8003148:	7809      	ldrb	r1, [r1, #0]
 800314a:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 800314c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800314e:	3301      	adds	r3, #1
 8003150:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8003152:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29b      	uxth	r3, r3
 800315a:	8543      	strh	r3, [r0, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800315c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	b90b      	cbnz	r3, 8003166 <I2C_SlaveTransmit_TXE+0x30>
 8003162:	2a29      	cmp	r2, #41	@ 0x29
 8003164:	d000      	beq.n	8003168 <I2C_SlaveTransmit_TXE+0x32>
}
 8003166:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003168:	6802      	ldr	r2, [r0, #0]
 800316a:	6853      	ldr	r3, [r2, #4]
 800316c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003170:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003172:	2321      	movs	r3, #33	@ 0x21
 8003174:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003176:	2328      	movs	r3, #40	@ 0x28
 8003178:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800317c:	f7ff ffda 	bl	8003134 <HAL_I2C_SlaveTxCpltCallback>
}
 8003180:	e7f1      	b.n	8003166 <I2C_SlaveTransmit_TXE+0x30>

08003182 <HAL_I2C_SlaveRxCpltCallback>:
}
 8003182:	4770      	bx	lr

08003184 <I2C_SlaveReceive_RXNE>:
{
 8003184:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003186:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800318a:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 800318c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	b183      	cbz	r3, 80031b4 <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003192:	6803      	ldr	r3, [r0, #0]
 8003194:	6919      	ldr	r1, [r3, #16]
 8003196:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003198:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 800319a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800319c:	3301      	adds	r3, #1
 800319e:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 80031a0:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	8543      	strh	r3, [r0, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031aa:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	b90b      	cbnz	r3, 80031b4 <I2C_SlaveReceive_RXNE+0x30>
 80031b0:	2a2a      	cmp	r2, #42	@ 0x2a
 80031b2:	d000      	beq.n	80031b6 <I2C_SlaveReceive_RXNE+0x32>
}
 80031b4:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031b6:	6802      	ldr	r2, [r0, #0]
 80031b8:	6853      	ldr	r3, [r2, #4]
 80031ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031be:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031c0:	2322      	movs	r3, #34	@ 0x22
 80031c2:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031c4:	2328      	movs	r3, #40	@ 0x28
 80031c6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031ca:	f7ff ffda 	bl	8003182 <HAL_I2C_SlaveRxCpltCallback>
}
 80031ce:	e7f1      	b.n	80031b4 <I2C_SlaveReceive_RXNE+0x30>

080031d0 <HAL_I2C_AddrCallback>:
}
 80031d0:	4770      	bx	lr

080031d2 <I2C_Slave_ADDR>:
{
 80031d2:	b500      	push	{lr}
 80031d4:	b083      	sub	sp, #12
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031d6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80031da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031de:	2b28      	cmp	r3, #40	@ 0x28
 80031e0:	d00c      	beq.n	80031fc <I2C_Slave_ADDR+0x2a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e2:	2300      	movs	r3, #0
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	6802      	ldr	r2, [r0, #0]
 80031e8:	6951      	ldr	r1, [r2, #20]
 80031ea:	9101      	str	r1, [sp, #4]
 80031ec:	6992      	ldr	r2, [r2, #24]
 80031ee:	9201      	str	r2, [sp, #4]
 80031f0:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 80031f2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
}
 80031f6:	b003      	add	sp, #12
 80031f8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80031fc:	6802      	ldr	r2, [r0, #0]
 80031fe:	6853      	ldr	r3, [r2, #4]
 8003200:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003204:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003206:	f011 0f04 	tst.w	r1, #4
 800320a:	d00b      	beq.n	8003224 <I2C_Slave_ADDR+0x52>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800320c:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800320e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003212:	d109      	bne.n	8003228 <I2C_Slave_ADDR+0x56>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003214:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 8003216:	2100      	movs	r1, #0
 8003218:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800321c:	4619      	mov	r1, r3
 800321e:	f7ff ffd7 	bl	80031d0 <HAL_I2C_AddrCallback>
 8003222:	e7e8      	b.n	80031f6 <I2C_Slave_ADDR+0x24>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003224:	2301      	movs	r3, #1
 8003226:	e7f2      	b.n	800320e <I2C_Slave_ADDR+0x3c>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003228:	8b02      	ldrh	r2, [r0, #24]
 800322a:	e7f4      	b.n	8003216 <I2C_Slave_ADDR+0x44>

0800322c <HAL_I2C_ListenCpltCallback>:
}
 800322c:	4770      	bx	lr
	...

08003230 <I2C_Slave_AF>:
{
 8003230:	b510      	push	{r4, lr}
 8003232:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003234:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003238:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800323a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800323c:	2a08      	cmp	r2, #8
 800323e:	d001      	beq.n	8003244 <I2C_Slave_AF+0x14>
 8003240:	2a20      	cmp	r2, #32
 8003242:	d101      	bne.n	8003248 <I2C_Slave_AF+0x18>
 8003244:	2b28      	cmp	r3, #40	@ 0x28
 8003246:	d006      	beq.n	8003256 <I2C_Slave_AF+0x26>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003248:	2b21      	cmp	r3, #33	@ 0x21
 800324a:	d01f      	beq.n	800328c <I2C_Slave_AF+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003252:	615a      	str	r2, [r3, #20]
}
 8003254:	bd10      	pop	{r4, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003256:	4b1d      	ldr	r3, [pc, #116]	@ (80032cc <I2C_Slave_AF+0x9c>)
 8003258:	62e3      	str	r3, [r4, #44]	@ 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800325a:	6822      	ldr	r2, [r4, #0]
 800325c:	6853      	ldr	r3, [r2, #4]
 800325e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003262:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800326a:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326c:	6822      	ldr	r2, [r4, #0]
 800326e:	6813      	ldr	r3, [r2, #0]
 8003270:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003274:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003276:	2300      	movs	r3, #0
 8003278:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800327a:	2220      	movs	r2, #32
 800327c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003280:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003284:	4620      	mov	r0, r4
 8003286:	f7ff ffd1 	bl	800322c <HAL_I2C_ListenCpltCallback>
 800328a:	e7e3      	b.n	8003254 <I2C_Slave_AF+0x24>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800328c:	4b0f      	ldr	r3, [pc, #60]	@ (80032cc <I2C_Slave_AF+0x9c>)
 800328e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003290:	2321      	movs	r3, #33	@ 0x21
 8003292:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003294:	2320      	movs	r3, #32
 8003296:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800329a:	2300      	movs	r3, #0
 800329c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032a0:	6822      	ldr	r2, [r4, #0]
 80032a2:	6853      	ldr	r3, [r2, #4]
 80032a4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80032a8:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032b0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b2:	6822      	ldr	r2, [r4, #0]
 80032b4:	6813      	ldr	r3, [r2, #0]
 80032b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032ba:	6013      	str	r3, [r2, #0]
    I2C_Flush_DR(hi2c);
 80032bc:	4620      	mov	r0, r4
 80032be:	f7fe fea2 	bl	8002006 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032c2:	4620      	mov	r0, r4
 80032c4:	f7ff ff36 	bl	8003134 <HAL_I2C_SlaveTxCpltCallback>
 80032c8:	e7c4      	b.n	8003254 <I2C_Slave_AF+0x24>
 80032ca:	bf00      	nop
 80032cc:	ffff0000 	.word	0xffff0000

080032d0 <HAL_I2C_MemTxCpltCallback>:
}
 80032d0:	4770      	bx	lr

080032d2 <I2C_MasterTransmit_BTF>:
{
 80032d2:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032d4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80032d6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b21      	cmp	r3, #33	@ 0x21
 80032de:	d000      	beq.n	80032e2 <I2C_MasterTransmit_BTF+0x10>
}
 80032e0:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 80032e2:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	b163      	cbz	r3, 8003302 <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e8:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80032ea:	6803      	ldr	r3, [r0, #0]
 80032ec:	7812      	ldrb	r2, [r2, #0]
 80032ee:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80032f0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80032f2:	3301      	adds	r3, #1
 80032f4:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 80032f6:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8003300:	e7ee      	b.n	80032e0 <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003302:	2a08      	cmp	r2, #8
 8003304:	d004      	beq.n	8003310 <I2C_MasterTransmit_BTF+0x3e>
 8003306:	2a20      	cmp	r2, #32
 8003308:	d002      	beq.n	8003310 <I2C_MasterTransmit_BTF+0x3e>
 800330a:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 800330e:	d119      	bne.n	8003344 <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003310:	6802      	ldr	r2, [r0, #0]
 8003312:	6853      	ldr	r3, [r2, #4]
 8003314:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003318:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331a:	6802      	ldr	r2, [r0, #0]
 800331c:	6813      	ldr	r3, [r2, #0]
 800331e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003322:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003324:	2300      	movs	r3, #0
 8003326:	6303      	str	r3, [r0, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003328:	2320      	movs	r3, #32
 800332a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800332e:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b40      	cmp	r3, #64	@ 0x40
 8003336:	d015      	beq.n	8003364 <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003338:	2300      	movs	r3, #0
 800333a:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800333e:	f7ff fef7 	bl	8003130 <HAL_I2C_MasterTxCpltCallback>
}
 8003342:	e7cd      	b.n	80032e0 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003344:	6802      	ldr	r2, [r0, #0]
 8003346:	6853      	ldr	r3, [r2, #4]
 8003348:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800334c:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800334e:	2311      	movs	r3, #17
 8003350:	6303      	str	r3, [r0, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003352:	2300      	movs	r3, #0
 8003354:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003358:	2320      	movs	r3, #32
 800335a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800335e:	f7ff fee7 	bl	8003130 <HAL_I2C_MasterTxCpltCallback>
 8003362:	e7bd      	b.n	80032e0 <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003364:	2300      	movs	r3, #0
 8003366:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800336a:	f7ff ffb1 	bl	80032d0 <HAL_I2C_MemTxCpltCallback>
 800336e:	e7b7      	b.n	80032e0 <I2C_MasterTransmit_BTF+0xe>

08003370 <I2C_MemoryTransmit_TXE_BTF>:
{
 8003370:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003372:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
  if (hi2c->EventCount == 0U)
 8003376:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8003378:	b99a      	cbnz	r2, 80033a2 <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800337a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800337c:	2b01      	cmp	r3, #1
 800337e:	d008      	beq.n	8003392 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003380:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003382:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003386:	6802      	ldr	r2, [r0, #0]
 8003388:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 800338a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800338c:	3301      	adds	r3, #1
 800338e:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8003390:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003392:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003394:	6802      	ldr	r2, [r0, #0]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 800339a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800339c:	3302      	adds	r3, #2
 800339e:	6503      	str	r3, [r0, #80]	@ 0x50
 80033a0:	e7f6      	b.n	8003390 <I2C_MemoryTransmit_TXE_BTF+0x20>
 80033a2:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 80033a4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80033a6:	2a01      	cmp	r2, #1
 80033a8:	d023      	beq.n	80033f2 <I2C_MemoryTransmit_TXE_BTF+0x82>
  else if (hi2c->EventCount == 2U)
 80033aa:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80033ac:	2a02      	cmp	r2, #2
 80033ae:	d13e      	bne.n	800342e <I2C_MemoryTransmit_TXE_BTF+0xbe>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80033b0:	2b22      	cmp	r3, #34	@ 0x22
 80033b2:	d026      	beq.n	8003402 <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033b4:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 80033b6:	b292      	uxth	r2, r2
 80033b8:	b10a      	cbz	r2, 80033be <I2C_MemoryTransmit_TXE_BTF+0x4e>
 80033ba:	2b21      	cmp	r3, #33	@ 0x21
 80033bc:	d02a      	beq.n	8003414 <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033be:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 80033c0:	b292      	uxth	r2, r2
 80033c2:	2a00      	cmp	r2, #0
 80033c4:	d1e4      	bne.n	8003390 <I2C_MemoryTransmit_TXE_BTF+0x20>
 80033c6:	2b21      	cmp	r3, #33	@ 0x21
 80033c8:	d1e2      	bne.n	8003390 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ca:	6802      	ldr	r2, [r0, #0]
 80033cc:	6853      	ldr	r3, [r2, #4]
 80033ce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80033d2:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	6802      	ldr	r2, [r0, #0]
 80033d6:	6813      	ldr	r3, [r2, #0]
 80033d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033dc:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033de:	2300      	movs	r3, #0
 80033e0:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	2220      	movs	r2, #32
 80033e4:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e8:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80033ec:	f7ff ff70 	bl	80032d0 <HAL_I2C_MemTxCpltCallback>
 80033f0:	e7ce      	b.n	8003390 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033f2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80033f4:	6802      	ldr	r2, [r0, #0]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 80033fa:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80033fc:	3301      	adds	r3, #1
 80033fe:	6503      	str	r3, [r0, #80]	@ 0x50
 8003400:	e7c6      	b.n	8003390 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003402:	6802      	ldr	r2, [r0, #0]
 8003404:	6813      	ldr	r3, [r2, #0]
 8003406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800340a:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 800340c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800340e:	3301      	adds	r3, #1
 8003410:	6503      	str	r3, [r0, #80]	@ 0x50
 8003412:	e7bd      	b.n	8003390 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003414:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8003416:	6803      	ldr	r3, [r0, #0]
 8003418:	7812      	ldrb	r2, [r2, #0]
 800341a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800341c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800341e:	3301      	adds	r3, #1
 8003420:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 8003422:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29b      	uxth	r3, r3
 800342a:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800342c:	e7b0      	b.n	8003390 <I2C_MemoryTransmit_TXE_BTF+0x20>
    I2C_Flush_DR(hi2c);
 800342e:	f7fe fdea 	bl	8002006 <I2C_Flush_DR>
}
 8003432:	e7ad      	b.n	8003390 <I2C_MemoryTransmit_TXE_BTF+0x20>

08003434 <I2C_MasterTransmit_TXE>:
{
 8003434:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003436:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800343a:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800343c:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 8003440:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003442:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003444:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8003446:	2900      	cmp	r1, #0
 8003448:	d13b      	bne.n	80034c2 <I2C_MasterTransmit_TXE+0x8e>
 800344a:	2b21      	cmp	r3, #33	@ 0x21
 800344c:	d002      	beq.n	8003454 <I2C_MasterTransmit_TXE+0x20>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800344e:	2a40      	cmp	r2, #64	@ 0x40
 8003450:	d042      	beq.n	80034d8 <I2C_MasterTransmit_TXE+0xa4>
}
 8003452:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003454:	2c08      	cmp	r4, #8
 8003456:	d004      	beq.n	8003462 <I2C_MasterTransmit_TXE+0x2e>
 8003458:	2c20      	cmp	r4, #32
 800345a:	d002      	beq.n	8003462 <I2C_MasterTransmit_TXE+0x2e>
 800345c:	f514 3f80 	cmn.w	r4, #65536	@ 0x10000
 8003460:	d119      	bne.n	8003496 <I2C_MasterTransmit_TXE+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003462:	6802      	ldr	r2, [r0, #0]
 8003464:	6853      	ldr	r3, [r2, #4]
 8003466:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800346a:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346c:	6802      	ldr	r2, [r0, #0]
 800346e:	6813      	ldr	r3, [r2, #0]
 8003470:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003474:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003476:	2300      	movs	r3, #0
 8003478:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800347a:	2320      	movs	r3, #32
 800347c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003480:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b40      	cmp	r3, #64	@ 0x40
 8003488:	d015      	beq.n	80034b6 <I2C_MasterTransmit_TXE+0x82>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800348a:	2300      	movs	r3, #0
 800348c:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003490:	f7ff fe4e 	bl	8003130 <HAL_I2C_MasterTxCpltCallback>
 8003494:	e7dd      	b.n	8003452 <I2C_MasterTransmit_TXE+0x1e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003496:	6802      	ldr	r2, [r0, #0]
 8003498:	6853      	ldr	r3, [r2, #4]
 800349a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800349e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034a0:	2311      	movs	r3, #17
 80034a2:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	2320      	movs	r3, #32
 80034ac:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80034b0:	f7ff fe3e 	bl	8003130 <HAL_I2C_MasterTxCpltCallback>
 80034b4:	e7cd      	b.n	8003452 <I2C_MasterTransmit_TXE+0x1e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 80034bc:	f7ff ff08 	bl	80032d0 <HAL_I2C_MemTxCpltCallback>
 80034c0:	e7c7      	b.n	8003452 <I2C_MasterTransmit_TXE+0x1e>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80034c2:	2b21      	cmp	r3, #33	@ 0x21
 80034c4:	d1c3      	bne.n	800344e <I2C_MasterTransmit_TXE+0x1a>
    if (hi2c->XferCount == 0U)
 80034c6:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	b943      	cbnz	r3, 80034de <I2C_MasterTransmit_TXE+0xaa>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034cc:	6802      	ldr	r2, [r0, #0]
 80034ce:	6853      	ldr	r3, [r2, #4]
 80034d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034d4:	6053      	str	r3, [r2, #4]
 80034d6:	e7bc      	b.n	8003452 <I2C_MasterTransmit_TXE+0x1e>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80034d8:	2b22      	cmp	r3, #34	@ 0x22
 80034da:	d1ba      	bne.n	8003452 <I2C_MasterTransmit_TXE+0x1e>
 80034dc:	e7f3      	b.n	80034c6 <I2C_MasterTransmit_TXE+0x92>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034de:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b40      	cmp	r3, #64	@ 0x40
 80034e6:	d00c      	beq.n	8003502 <I2C_MasterTransmit_TXE+0xce>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e8:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80034ea:	6803      	ldr	r3, [r0, #0]
 80034ec:	7812      	ldrb	r2, [r2, #0]
 80034ee:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80034f0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80034f2:	3301      	adds	r3, #1
 80034f4:	6243      	str	r3, [r0, #36]	@ 0x24
        hi2c->XferCount--;
 80034f6:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	8543      	strh	r3, [r0, #42]	@ 0x2a
}
 8003500:	e7a7      	b.n	8003452 <I2C_MasterTransmit_TXE+0x1e>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003502:	f7ff ff35 	bl	8003370 <I2C_MemoryTransmit_TXE_BTF>
 8003506:	e7a4      	b.n	8003452 <I2C_MasterTransmit_TXE+0x1e>

08003508 <HAL_I2C_MemRxCpltCallback>:
}
 8003508:	4770      	bx	lr

0800350a <I2C_MasterReceive_BTF>:
{
 800350a:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800350c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 800350e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b04      	cmp	r3, #4
 8003514:	d014      	beq.n	8003540 <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 8003516:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b03      	cmp	r3, #3
 800351c:	d022      	beq.n	8003564 <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 800351e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d039      	beq.n	800359a <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003526:	6803      	ldr	r3, [r0, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800352c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800352e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003530:	3301      	adds	r3, #1
 8003532:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8003534:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29b      	uxth	r3, r3
 800353c:	8543      	strh	r3, [r0, #42]	@ 0x2a
}
 800353e:	e010      	b.n	8003562 <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003540:	6802      	ldr	r2, [r0, #0]
 8003542:	6853      	ldr	r3, [r2, #4]
 8003544:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003548:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354a:	6803      	ldr	r3, [r0, #0]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003550:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003552:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003554:	3301      	adds	r3, #1
 8003556:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8003558:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29b      	uxth	r3, r3
 8003560:	8543      	strh	r3, [r0, #42]	@ 0x2a
}
 8003562:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003564:	6801      	ldr	r1, [r0, #0]
 8003566:	684b      	ldr	r3, [r1, #4]
 8003568:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800356c:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800356e:	2a04      	cmp	r2, #4
 8003570:	d006      	beq.n	8003580 <I2C_MasterReceive_BTF+0x76>
 8003572:	2a02      	cmp	r2, #2
 8003574:	d004      	beq.n	8003580 <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003576:	6802      	ldr	r2, [r0, #0]
 8003578:	6813      	ldr	r3, [r2, #0]
 800357a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800357e:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003580:	6803      	ldr	r3, [r0, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003586:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003588:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800358a:	3301      	adds	r3, #1
 800358c:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 800358e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29b      	uxth	r3, r3
 8003596:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8003598:	e7e3      	b.n	8003562 <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800359a:	1e53      	subs	r3, r2, #1
 800359c:	2b0f      	cmp	r3, #15
 800359e:	d842      	bhi.n	8003626 <I2C_MasterReceive_BTF+0x11c>
 80035a0:	e8df f003 	tbb	[pc, r3]
 80035a4:	3b413b08 	.word	0x3b413b08
 80035a8:	41414141 	.word	0x41414141
 80035ac:	41414141 	.word	0x41414141
 80035b0:	08414141 	.word	0x08414141
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b4:	6801      	ldr	r1, [r0, #0]
 80035b6:	680b      	ldr	r3, [r1, #0]
 80035b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035bc:	600b      	str	r3, [r1, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035be:	6803      	ldr	r3, [r0, #0]
 80035c0:	6919      	ldr	r1, [r3, #16]
 80035c2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80035c4:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 80035c6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80035c8:	1c4b      	adds	r3, r1, #1
 80035ca:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 80035cc:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	8543      	strh	r3, [r0, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d6:	6803      	ldr	r3, [r0, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 80035dc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80035de:	3301      	adds	r3, #1
 80035e0:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 80035e2:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	8543      	strh	r3, [r0, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80035ec:	6801      	ldr	r1, [r0, #0]
 80035ee:	684b      	ldr	r3, [r1, #4]
 80035f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035f4:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	2320      	movs	r3, #32
 80035f8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035fc:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b40      	cmp	r3, #64	@ 0x40
 8003604:	d015      	beq.n	8003632 <I2C_MasterReceive_BTF+0x128>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003606:	2300      	movs	r3, #0
 8003608:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800360c:	2a08      	cmp	r2, #8
 800360e:	d017      	beq.n	8003640 <I2C_MasterReceive_BTF+0x136>
 8003610:	2a20      	cmp	r2, #32
 8003612:	d015      	beq.n	8003640 <I2C_MasterReceive_BTF+0x136>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003614:	2312      	movs	r3, #18
 8003616:	6303      	str	r3, [r0, #48]	@ 0x30
 8003618:	e014      	b.n	8003644 <I2C_MasterReceive_BTF+0x13a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361a:	6801      	ldr	r1, [r0, #0]
 800361c:	680b      	ldr	r3, [r1, #0]
 800361e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003622:	600b      	str	r3, [r1, #0]
 8003624:	e7cb      	b.n	80035be <I2C_MasterReceive_BTF+0xb4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003626:	6801      	ldr	r1, [r0, #0]
 8003628:	680b      	ldr	r3, [r1, #0]
 800362a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800362e:	600b      	str	r3, [r1, #0]
 8003630:	e7c5      	b.n	80035be <I2C_MasterReceive_BTF+0xb4>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003632:	2300      	movs	r3, #0
 8003634:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003638:	6303      	str	r3, [r0, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800363a:	f7ff ff65 	bl	8003508 <HAL_I2C_MemRxCpltCallback>
 800363e:	e790      	b.n	8003562 <I2C_MasterReceive_BTF+0x58>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003640:	2300      	movs	r3, #0
 8003642:	6303      	str	r3, [r0, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003644:	f7ff fd75 	bl	8003132 <HAL_I2C_MasterRxCpltCallback>
 8003648:	e78b      	b.n	8003562 <I2C_MasterReceive_BTF+0x58>

0800364a <HAL_I2C_ErrorCallback>:
}
 800364a:	4770      	bx	lr

0800364c <I2C_MasterReceive_RXNE>:
{
 800364c:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800364e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b22      	cmp	r3, #34	@ 0x22
 8003656:	d000      	beq.n	800365a <I2C_MasterReceive_RXNE+0xe>
}
 8003658:	bd38      	pop	{r3, r4, r5, pc}
 800365a:	4604      	mov	r4, r0
    CurrentXferOptions = hi2c->XferOptions;
 800365c:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
    tmp = hi2c->XferCount;
 800365e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003660:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 8003662:	2b03      	cmp	r3, #3
 8003664:	d915      	bls.n	8003692 <I2C_MasterReceive_RXNE+0x46>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003666:	6803      	ldr	r3, [r0, #0]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800366c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800366e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003670:	3301      	adds	r3, #1
 8003672:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 8003674:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29b      	uxth	r3, r3
 800367c:	8543      	strh	r3, [r0, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 800367e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b03      	cmp	r3, #3
 8003684:	d1e8      	bne.n	8003658 <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003686:	6802      	ldr	r2, [r0, #0]
 8003688:	6853      	ldr	r3, [r2, #4]
 800368a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800368e:	6053      	str	r3, [r2, #4]
 8003690:	e7e2      	b.n	8003658 <I2C_MasterReceive_RXNE+0xc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003692:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8003694:	2a02      	cmp	r2, #2
 8003696:	d001      	beq.n	800369c <I2C_MasterReceive_RXNE+0x50>
 8003698:	2b01      	cmp	r3, #1
 800369a:	d905      	bls.n	80036a8 <I2C_MasterReceive_RXNE+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800369c:	6822      	ldr	r2, [r4, #0]
 800369e:	6853      	ldr	r3, [r2, #4]
 80036a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036a4:	6053      	str	r3, [r2, #4]
}
 80036a6:	e7d7      	b.n	8003658 <I2C_MasterReceive_RXNE+0xc>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036a8:	f7fe fe62 	bl	8002370 <I2C_WaitOnSTOPRequestThroughIT>
 80036ac:	2800      	cmp	r0, #0
 80036ae:	d135      	bne.n	800371c <I2C_MasterReceive_RXNE+0xd0>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b0:	6822      	ldr	r2, [r4, #0]
 80036b2:	6813      	ldr	r3, [r2, #0]
 80036b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036b8:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036ba:	6822      	ldr	r2, [r4, #0]
 80036bc:	6853      	ldr	r3, [r2, #4]
 80036be:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80036c2:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80036ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80036ce:	3301      	adds	r3, #1
 80036d0:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80036d2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3b01      	subs	r3, #1
 80036d8:	b29b      	uxth	r3, r3
 80036da:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036dc:	2320      	movs	r3, #32
 80036de:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036e2:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b40      	cmp	r3, #64	@ 0x40
 80036ea:	d009      	beq.n	8003700 <I2C_MasterReceive_RXNE+0xb4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80036f2:	2d08      	cmp	r5, #8
 80036f4:	d00c      	beq.n	8003710 <I2C_MasterReceive_RXNE+0xc4>
 80036f6:	2d20      	cmp	r5, #32
 80036f8:	d00a      	beq.n	8003710 <I2C_MasterReceive_RXNE+0xc4>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036fa:	2312      	movs	r3, #18
 80036fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80036fe:	e009      	b.n	8003714 <I2C_MasterReceive_RXNE+0xc8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003700:	2300      	movs	r3, #0
 8003702:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003706:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003708:	4620      	mov	r0, r4
 800370a:	f7ff fefd 	bl	8003508 <HAL_I2C_MemRxCpltCallback>
 800370e:	e7a3      	b.n	8003658 <I2C_MasterReceive_RXNE+0xc>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003710:	2300      	movs	r3, #0
 8003712:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003714:	4620      	mov	r0, r4
 8003716:	f7ff fd0c 	bl	8003132 <HAL_I2C_MasterRxCpltCallback>
 800371a:	e79d      	b.n	8003658 <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800371c:	6822      	ldr	r2, [r4, #0]
 800371e:	6853      	ldr	r3, [r2, #4]
 8003720:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003724:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800372c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800372e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003730:	3301      	adds	r3, #1
 8003732:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003734:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29b      	uxth	r3, r3
 800373c:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800373e:	2320      	movs	r3, #32
 8003740:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003744:	2300      	movs	r3, #0
 8003746:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800374a:	4620      	mov	r0, r4
 800374c:	f7ff ff7d 	bl	800364a <HAL_I2C_ErrorCallback>
 8003750:	e782      	b.n	8003658 <I2C_MasterReceive_RXNE+0xc>

08003752 <HAL_I2C_AbortCpltCallback>:
}
 8003752:	4770      	bx	lr

08003754 <I2C_DMAAbort>:
{
 8003754:	b500      	push	{lr}
 8003756:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800375c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800375e:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 8003762:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003764:	4b32      	ldr	r3, [pc, #200]	@ (8003830 <I2C_DMAAbort+0xdc>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	08db      	lsrs	r3, r3, #3
 800376a:	4932      	ldr	r1, [pc, #200]	@ (8003834 <I2C_DMAAbort+0xe0>)
 800376c:	fba1 1303 	umull	r1, r3, r1, r3
 8003770:	0a1b      	lsrs	r3, r3, #8
 8003772:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003776:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800377a:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 800377c:	9b01      	ldr	r3, [sp, #4]
 800377e:	b143      	cbz	r3, 8003792 <I2C_DMAAbort+0x3e>
    count--;
 8003780:	9b01      	ldr	r3, [sp, #4]
 8003782:	3b01      	subs	r3, #1
 8003784:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003786:	6803      	ldr	r3, [r0, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800378e:	d1f5      	bne.n	800377c <I2C_DMAAbort+0x28>
 8003790:	e003      	b.n	800379a <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003792:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003794:	f043 0320 	orr.w	r3, r3, #32
 8003798:	6403      	str	r3, [r0, #64]	@ 0x40
  if (hi2c->hdmatx != NULL)
 800379a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800379c:	b10b      	cbz	r3, 80037a2 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 800379e:	2100      	movs	r1, #0
 80037a0:	6299      	str	r1, [r3, #40]	@ 0x28
  if (hi2c->hdmarx != NULL)
 80037a2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80037a4:	b10b      	cbz	r3, 80037aa <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 80037a6:	2100      	movs	r1, #0
 80037a8:	6299      	str	r1, [r3, #40]	@ 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037aa:	6801      	ldr	r1, [r0, #0]
 80037ac:	680b      	ldr	r3, [r1, #0]
 80037ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037b2:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	8543      	strh	r3, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 80037b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80037ba:	b10b      	cbz	r3, 80037c0 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037bc:	2100      	movs	r1, #0
 80037be:	6359      	str	r1, [r3, #52]	@ 0x34
  if (hi2c->hdmarx != NULL)
 80037c0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80037c2:	b10b      	cbz	r3, 80037c8 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80037c4:	2100      	movs	r1, #0
 80037c6:	6359      	str	r1, [r3, #52]	@ 0x34
  __HAL_I2C_DISABLE(hi2c);
 80037c8:	6801      	ldr	r1, [r0, #0]
 80037ca:	680b      	ldr	r3, [r1, #0]
 80037cc:	f023 0301 	bic.w	r3, r3, #1
 80037d0:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037d2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b60      	cmp	r3, #96	@ 0x60
 80037da:	d00e      	beq.n	80037fa <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037dc:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 80037e0:	2a28      	cmp	r2, #40	@ 0x28
 80037e2:	d014      	beq.n	800380e <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 80037e4:	2320      	movs	r3, #32
 80037e6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80037f0:	f7ff ff2b 	bl	800364a <HAL_I2C_ErrorCallback>
}
 80037f4:	b003      	add	sp, #12
 80037f6:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 80037fa:	2320      	movs	r3, #32
 80037fc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003800:	2300      	movs	r3, #0
 8003802:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003806:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003808:	f7ff ffa3 	bl	8003752 <HAL_I2C_AbortCpltCallback>
 800380c:	e7f2      	b.n	80037f4 <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 800380e:	6802      	ldr	r2, [r0, #0]
 8003810:	6813      	ldr	r3, [r2, #0]
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003818:	6802      	ldr	r2, [r0, #0]
 800381a:	6813      	ldr	r3, [r2, #0]
 800381c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003820:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003822:	2300      	movs	r3, #0
 8003824:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003826:	2328      	movs	r3, #40	@ 0x28
 8003828:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
 800382c:	e7e0      	b.n	80037f0 <I2C_DMAAbort+0x9c>
 800382e:	bf00      	nop
 8003830:	20000004 	.word	0x20000004
 8003834:	14f8b589 	.word	0x14f8b589

08003838 <I2C_ITError>:
{
 8003838:	b510      	push	{r4, lr}
 800383a:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800383c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003840:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003842:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 8003846:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003848:	2a10      	cmp	r2, #16
 800384a:	d036      	beq.n	80038ba <I2C_ITError+0x82>
 800384c:	2a40      	cmp	r2, #64	@ 0x40
 800384e:	d034      	beq.n	80038ba <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003850:	f003 0228 	and.w	r2, r3, #40	@ 0x28
 8003854:	2a28      	cmp	r2, #40	@ 0x28
 8003856:	d038      	beq.n	80038ca <I2C_ITError+0x92>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003858:	6822      	ldr	r2, [r4, #0]
 800385a:	6852      	ldr	r2, [r2, #4]
 800385c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8003860:	d107      	bne.n	8003872 <I2C_ITError+0x3a>
 8003862:	2b60      	cmp	r3, #96	@ 0x60
 8003864:	d005      	beq.n	8003872 <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 8003866:	2320      	movs	r3, #32
 8003868:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800386c:	2300      	movs	r3, #0
 800386e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003872:	2300      	movs	r3, #0
 8003874:	6323      	str	r3, [r4, #48]	@ 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800387e:	d048      	beq.n	8003912 <I2C_ITError+0xda>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003886:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003888:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800388a:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d020      	beq.n	80038d6 <I2C_ITError+0x9e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003894:	4b44      	ldr	r3, [pc, #272]	@ (80039a8 <I2C_ITError+0x170>)
 8003896:	6353      	str	r3, [r2, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003898:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800389a:	f7fe f9cb 	bl	8001c34 <HAL_DMA_Abort_IT>
 800389e:	2800      	cmp	r0, #0
 80038a0:	d049      	beq.n	8003936 <I2C_ITError+0xfe>
        __HAL_I2C_DISABLE(hi2c);
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	6813      	ldr	r3, [r2, #0]
 80038a6:	f023 0301 	bic.w	r3, r3, #1
 80038aa:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	2320      	movs	r3, #32
 80038ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80038b2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80038b4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80038b6:	4798      	blx	r3
 80038b8:	e03d      	b.n	8003936 <I2C_ITError+0xfe>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038ba:	2b22      	cmp	r3, #34	@ 0x22
 80038bc:	d1c8      	bne.n	8003850 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80038be:	6821      	ldr	r1, [r4, #0]
 80038c0:	680a      	ldr	r2, [r1, #0]
 80038c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038c6:	600a      	str	r2, [r1, #0]
 80038c8:	e7c2      	b.n	8003850 <I2C_ITError+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80038ce:	2328      	movs	r3, #40	@ 0x28
 80038d0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 80038d4:	e7cf      	b.n	8003876 <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80038d8:	4a33      	ldr	r2, [pc, #204]	@ (80039a8 <I2C_ITError+0x170>)
 80038da:	635a      	str	r2, [r3, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038dc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80038de:	f7fe f9a9 	bl	8001c34 <HAL_DMA_Abort_IT>
 80038e2:	b340      	cbz	r0, 8003936 <I2C_ITError+0xfe>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80038ec:	d005      	beq.n	80038fa <I2C_ITError+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80038f2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80038f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80038f6:	3301      	adds	r3, #1
 80038f8:	6263      	str	r3, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 80038fa:	6822      	ldr	r2, [r4, #0]
 80038fc:	6813      	ldr	r3, [r2, #0]
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003904:	2320      	movs	r3, #32
 8003906:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800390a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800390c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800390e:	4798      	blx	r3
 8003910:	e011      	b.n	8003936 <I2C_ITError+0xfe>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003912:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	2a60      	cmp	r2, #96	@ 0x60
 800391a:	d01f      	beq.n	800395c <I2C_ITError+0x124>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003922:	d005      	beq.n	8003930 <I2C_ITError+0xf8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003928:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800392a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800392c:	3301      	adds	r3, #1
 800392e:	6263      	str	r3, [r4, #36]	@ 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003930:	4620      	mov	r0, r4
 8003932:	f7ff fe8a 	bl	800364a <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8003936:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003938:	f013 0f0f 	tst.w	r3, #15
 800393c:	d004      	beq.n	8003948 <I2C_ITError+0x110>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800393e:	6822      	ldr	r2, [r4, #0]
 8003940:	6853      	ldr	r3, [r2, #4]
 8003942:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003946:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003948:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800394c:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800394e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003950:	f012 0f04 	tst.w	r2, #4
 8003954:	d001      	beq.n	800395a <I2C_ITError+0x122>
 8003956:	2b28      	cmp	r3, #40	@ 0x28
 8003958:	d018      	beq.n	800398c <I2C_ITError+0x154>
}
 800395a:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800395c:	2220      	movs	r2, #32
 800395e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003962:	2200      	movs	r2, #0
 8003964:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800396c:	d005      	beq.n	800397a <I2C_ITError+0x142>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003972:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003974:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003976:	3301      	adds	r3, #1
 8003978:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 800397a:	6822      	ldr	r2, [r4, #0]
 800397c:	6813      	ldr	r3, [r2, #0]
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003984:	4620      	mov	r0, r4
 8003986:	f7ff fee4 	bl	8003752 <HAL_I2C_AbortCpltCallback>
 800398a:	e7d4      	b.n	8003936 <I2C_ITError+0xfe>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800398c:	4b07      	ldr	r3, [pc, #28]	@ (80039ac <I2C_ITError+0x174>)
 800398e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003990:	2300      	movs	r3, #0
 8003992:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003994:	2220      	movs	r2, #32
 8003996:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800399a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800399e:	4620      	mov	r0, r4
 80039a0:	f7ff fc44 	bl	800322c <HAL_I2C_ListenCpltCallback>
}
 80039a4:	e7d9      	b.n	800395a <I2C_ITError+0x122>
 80039a6:	bf00      	nop
 80039a8:	08003755 	.word	0x08003755
 80039ac:	ffff0000 	.word	0xffff0000

080039b0 <I2C_Slave_STOPF>:
{
 80039b0:	b530      	push	{r4, r5, lr}
 80039b2:	b083      	sub	sp, #12
 80039b4:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b6:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 80039ba:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039bc:	6802      	ldr	r2, [r0, #0]
 80039be:	6853      	ldr	r3, [r2, #4]
 80039c0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80039c4:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80039c6:	2300      	movs	r3, #0
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	6803      	ldr	r3, [r0, #0]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	9201      	str	r2, [sp, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039da:	6802      	ldr	r2, [r0, #0]
 80039dc:	6813      	ldr	r3, [r2, #0]
 80039de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039e2:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039e4:	6803      	ldr	r3, [r0, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80039ec:	d038      	beq.n	8003a60 <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039ee:	2d22      	cmp	r5, #34	@ 0x22
 80039f0:	d021      	beq.n	8003a36 <I2C_Slave_STOPF+0x86>
 80039f2:	2d2a      	cmp	r5, #42	@ 0x2a
 80039f4:	d01f      	beq.n	8003a36 <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80039f6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	6852      	ldr	r2, [r2, #4]
 80039fc:	b292      	uxth	r2, r2
 80039fe:	8542      	strh	r2, [r0, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8003a00:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 8003a02:	b292      	uxth	r2, r2
 8003a04:	b11a      	cbz	r2, 8003a0e <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a06:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8003a08:	f042 0204 	orr.w	r2, r2, #4
 8003a0c:	6402      	str	r2, [r0, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a14:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a16:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003a18:	f7fe f958 	bl	8001ccc <HAL_DMA_GetState>
 8003a1c:	2801      	cmp	r0, #1
 8003a1e:	d01f      	beq.n	8003a60 <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a22:	4a44      	ldr	r2, [pc, #272]	@ (8003b34 <I2C_Slave_STOPF+0x184>)
 8003a24:	635a      	str	r2, [r3, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a26:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003a28:	f7fe f904 	bl	8001c34 <HAL_DMA_Abort_IT>
 8003a2c:	b1c0      	cbz	r0, 8003a60 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a2e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003a30:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003a32:	4798      	blx	r3
 8003a34:	e014      	b.n	8003a60 <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003a36:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	6852      	ldr	r2, [r2, #4]
 8003a3c:	b292      	uxth	r2, r2
 8003a3e:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8003a40:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003a42:	b292      	uxth	r2, r2
 8003a44:	b11a      	cbz	r2, 8003a4e <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a46:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003a48:	f042 0204 	orr.w	r2, r2, #4
 8003a4c:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a54:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a56:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003a58:	f7fe f938 	bl	8001ccc <HAL_DMA_GetState>
 8003a5c:	2801      	cmp	r0, #1
 8003a5e:	d142      	bne.n	8003ae6 <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 8003a60:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	b333      	cbz	r3, 8003ab4 <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	f012 0f04 	tst.w	r2, #4
 8003a6e:	d00a      	beq.n	8003a86 <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a74:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003a76:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a78:	3301      	adds	r3, #1
 8003a7a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003a7c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003a8e:	d00a      	beq.n	8003aa6 <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a94:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003a96:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a98:	3301      	adds	r3, #1
 8003a9a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003a9c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8003aa6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	b11b      	cbz	r3, 8003ab4 <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003aac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003aae:	f043 0304 	orr.w	r3, r3, #4
 8003ab2:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ab4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ab6:	bb13      	cbnz	r3, 8003afe <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ab8:	2d2a      	cmp	r5, #42	@ 0x2a
 8003aba:	d025      	beq.n	8003b08 <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003abc:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b28      	cmp	r3, #40	@ 0x28
 8003ac4:	d029      	beq.n	8003b1a <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ac6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003ac8:	2b22      	cmp	r3, #34	@ 0x22
 8003aca:	d001      	beq.n	8003ad0 <I2C_Slave_STOPF+0x120>
 8003acc:	2d22      	cmp	r5, #34	@ 0x22
 8003ace:	d119      	bne.n	8003b04 <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ada:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7ff fb4f 	bl	8003182 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ae4:	e00e      	b.n	8003b04 <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ae6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003ae8:	4a12      	ldr	r2, [pc, #72]	@ (8003b34 <I2C_Slave_STOPF+0x184>)
 8003aea:	635a      	str	r2, [r3, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003aec:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003aee:	f7fe f8a1 	bl	8001c34 <HAL_DMA_Abort_IT>
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d0b4      	beq.n	8003a60 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003af6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003af8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003afa:	4798      	blx	r3
 8003afc:	e7b0      	b.n	8003a60 <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8003afe:	4620      	mov	r0, r4
 8003b00:	f7ff fe9a 	bl	8003838 <I2C_ITError>
}
 8003b04:	b003      	add	sp, #12
 8003b06:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b0c:	2328      	movs	r3, #40	@ 0x28
 8003b0e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b12:	4620      	mov	r0, r4
 8003b14:	f7ff fb35 	bl	8003182 <HAL_I2C_SlaveRxCpltCallback>
 8003b18:	e7d0      	b.n	8003abc <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b1a:	4b07      	ldr	r3, [pc, #28]	@ (8003b38 <I2C_Slave_STOPF+0x188>)
 8003b1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	2220      	movs	r2, #32
 8003b24:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b28:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f7ff fb7d 	bl	800322c <HAL_I2C_ListenCpltCallback>
 8003b32:	e7e7      	b.n	8003b04 <I2C_Slave_STOPF+0x154>
 8003b34:	08003755 	.word	0x08003755
 8003b38:	ffff0000 	.word	0xffff0000

08003b3c <HAL_I2C_EV_IRQHandler>:
{
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003b40:	6802      	ldr	r2, [r0, #0]
 8003b42:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b44:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b46:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003b4a:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b4c:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
 8003b50:	b2c8      	uxtb	r0, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b52:	2b10      	cmp	r3, #16
 8003b54:	d013      	beq.n	8003b7e <HAL_I2C_EV_IRQHandler+0x42>
 8003b56:	2b40      	cmp	r3, #64	@ 0x40
 8003b58:	d011      	beq.n	8003b7e <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d07a      	beq.n	8003c56 <HAL_I2C_EV_IRQHandler+0x11a>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b60:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8003b62:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b64:	f013 0f02 	tst.w	r3, #2
 8003b68:	d078      	beq.n	8003c5c <HAL_I2C_EV_IRQHandler+0x120>
 8003b6a:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003b6e:	d075      	beq.n	8003c5c <HAL_I2C_EV_IRQHandler+0x120>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b72:	b103      	cbz	r3, 8003b76 <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b74:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003b76:	4620      	mov	r0, r4
 8003b78:	f7ff fb2b 	bl	80031d2 <I2C_Slave_ADDR>
}
 8003b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b7e:	f8d2 c018 	ldr.w	ip, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b82:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b84:	f011 0701 	ands.w	r7, r1, #1
 8003b88:	d105      	bne.n	8003b96 <HAL_I2C_EV_IRQHandler+0x5a>
 8003b8a:	f5b6 0f2a 	cmp.w	r6, #11141120	@ 0xaa0000
 8003b8e:	d0f5      	beq.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
 8003b90:	f1b6 4f2a 	cmp.w	r6, #2852126720	@ 0xaa000000
 8003b94:	d0f2      	beq.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b96:	b117      	cbz	r7, 8003b9e <HAL_I2C_EV_IRQHandler+0x62>
 8003b98:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003b9c:	d129      	bne.n	8003bf2 <HAL_I2C_EV_IRQHandler+0xb6>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b9e:	f011 0f08 	tst.w	r1, #8
 8003ba2:	d002      	beq.n	8003baa <HAL_I2C_EV_IRQHandler+0x6e>
 8003ba4:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003ba8:	d12a      	bne.n	8003c00 <HAL_I2C_EV_IRQHandler+0xc4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003baa:	f011 0f02 	tst.w	r1, #2
 8003bae:	d002      	beq.n	8003bb6 <HAL_I2C_EV_IRQHandler+0x7a>
 8003bb0:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003bb4:	d128      	bne.n	8003c08 <HAL_I2C_EV_IRQHandler+0xcc>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003bb6:	f01c 0f04 	tst.w	ip, #4
 8003bba:	d031      	beq.n	8003c20 <HAL_I2C_EV_IRQHandler+0xe4>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003bbc:	6852      	ldr	r2, [r2, #4]
 8003bbe:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8003bc2:	d1db      	bne.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bc4:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003bc8:	d005      	beq.n	8003bd6 <HAL_I2C_EV_IRQHandler+0x9a>
 8003bca:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003bce:	d002      	beq.n	8003bd6 <HAL_I2C_EV_IRQHandler+0x9a>
 8003bd0:	f011 0f04 	tst.w	r1, #4
 8003bd4:	d01c      	beq.n	8003c10 <HAL_I2C_EV_IRQHandler+0xd4>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bd6:	f011 0f04 	tst.w	r1, #4
 8003bda:	d0cf      	beq.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
 8003bdc:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003be0:	d0cc      	beq.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003be2:	2821      	cmp	r0, #33	@ 0x21
 8003be4:	d018      	beq.n	8003c18 <HAL_I2C_EV_IRQHandler+0xdc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003be6:	2b40      	cmp	r3, #64	@ 0x40
 8003be8:	d1c8      	bne.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003bea:	4620      	mov	r0, r4
 8003bec:	f7ff fbc0 	bl	8003370 <I2C_MemoryTransmit_TXE_BTF>
 8003bf0:	e7c4      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f7fe fbf9 	bl	80023ea <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	f7fe fa0c 	bl	8002016 <I2C_Master_SB>
 8003bfe:	e7bd      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 8003c00:	4620      	mov	r0, r4
 8003c02:	f7fe fa5c 	bl	80020be <I2C_Master_ADD10>
 8003c06:	e7b9      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f7fe fa6d 	bl	80020e8 <I2C_Master_ADDR>
 8003c0e:	e7b5      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 8003c10:	4620      	mov	r0, r4
 8003c12:	f7ff fc0f 	bl	8003434 <I2C_MasterTransmit_TXE>
 8003c16:	e7b1      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
            I2C_MasterTransmit_BTF(hi2c);
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7ff fb5a 	bl	80032d2 <I2C_MasterTransmit_BTF>
 8003c1e:	e7ad      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c20:	6853      	ldr	r3, [r2, #4]
 8003c22:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8003c26:	d1a9      	bne.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c28:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8003c2c:	d005      	beq.n	8003c3a <HAL_I2C_EV_IRQHandler+0xfe>
 8003c2e:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003c32:	d002      	beq.n	8003c3a <HAL_I2C_EV_IRQHandler+0xfe>
 8003c34:	f011 0f04 	tst.w	r1, #4
 8003c38:	d009      	beq.n	8003c4e <HAL_I2C_EV_IRQHandler+0x112>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c3a:	f011 0f04 	tst.w	r1, #4
 8003c3e:	d09d      	beq.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
 8003c40:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003c44:	d09a      	beq.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 8003c46:	4620      	mov	r0, r4
 8003c48:	f7ff fc5f 	bl	800350a <I2C_MasterReceive_BTF>
 8003c4c:	e796      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f7ff fcfc 	bl	800364c <I2C_MasterReceive_RXNE>
 8003c54:	e792      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c56:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c58:	6953      	ldr	r3, [r2, #20]
 8003c5a:	e783      	b.n	8003b64 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c5c:	f013 0f10 	tst.w	r3, #16
 8003c60:	d002      	beq.n	8003c68 <HAL_I2C_EV_IRQHandler+0x12c>
 8003c62:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003c66:	d118      	bne.n	8003c9a <HAL_I2C_EV_IRQHandler+0x15e>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c68:	2821      	cmp	r0, #33	@ 0x21
 8003c6a:	d01a      	beq.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x166>
 8003c6c:	2829      	cmp	r0, #41	@ 0x29
 8003c6e:	d018      	beq.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x166>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c70:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003c74:	d005      	beq.n	8003c82 <HAL_I2C_EV_IRQHandler+0x146>
 8003c76:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003c7a:	d002      	beq.n	8003c82 <HAL_I2C_EV_IRQHandler+0x146>
 8003c7c:	f013 0f04 	tst.w	r3, #4
 8003c80:	d028      	beq.n	8003cd4 <HAL_I2C_EV_IRQHandler+0x198>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c82:	f013 0f04 	tst.w	r3, #4
 8003c86:	f43f af79 	beq.w	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
 8003c8a:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003c8e:	f43f af75 	beq.w	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 8003c92:	4620      	mov	r0, r4
 8003c94:	f7fe fb5c 	bl	8002350 <I2C_SlaveReceive_BTF>
      }
 8003c98:	e770      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f7ff fe88 	bl	80039b0 <I2C_Slave_STOPF>
 8003ca0:	e76c      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ca2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003ca6:	d005      	beq.n	8003cb4 <HAL_I2C_EV_IRQHandler+0x178>
 8003ca8:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003cac:	d002      	beq.n	8003cb4 <HAL_I2C_EV_IRQHandler+0x178>
 8003cae:	f013 0f04 	tst.w	r3, #4
 8003cb2:	d00b      	beq.n	8003ccc <HAL_I2C_EV_IRQHandler+0x190>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cb4:	f013 0f04 	tst.w	r3, #4
 8003cb8:	f43f af60 	beq.w	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
 8003cbc:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003cc0:	f43f af5c 	beq.w	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f7fe fb33 	bl	8002330 <I2C_SlaveTransmit_BTF>
 8003cca:	e757      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f7ff fa32 	bl	8003136 <I2C_SlaveTransmit_TXE>
 8003cd2:	e753      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f7ff fa55 	bl	8003184 <I2C_SlaveReceive_RXNE>
 8003cda:	e74f      	b.n	8003b7c <HAL_I2C_EV_IRQHandler+0x40>

08003cdc <HAL_I2C_ER_IRQHandler>:
{
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cde:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003ce0:	6803      	ldr	r3, [r0, #0]
 8003ce2:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003ce4:	685f      	ldr	r7, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ce6:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 8003cea:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cec:	f415 7680 	ands.w	r6, r5, #256	@ 0x100
 8003cf0:	d00b      	beq.n	8003d0a <HAL_I2C_ER_IRQHandler+0x2e>
 8003cf2:	f417 7680 	ands.w	r6, r7, #256	@ 0x100
 8003cf6:	d008      	beq.n	8003d0a <HAL_I2C_ER_IRQHandler+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cf8:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 8003cfc:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003cfe:	6801      	ldr	r1, [r0, #0]
 8003d00:	680b      	ldr	r3, [r1, #0]
 8003d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d06:	600b      	str	r3, [r1, #0]
    error |= HAL_I2C_ERROR_BERR;
 8003d08:	2601      	movs	r6, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d0a:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003d0e:	d008      	beq.n	8003d22 <HAL_I2C_ER_IRQHandler+0x46>
 8003d10:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8003d14:	d005      	beq.n	8003d22 <HAL_I2C_ER_IRQHandler+0x46>
    error |= HAL_I2C_ERROR_ARLO;
 8003d16:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	f46f 7100 	mvn.w	r1, #512	@ 0x200
 8003d20:	6159      	str	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d22:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003d26:	d019      	beq.n	8003d5c <HAL_I2C_ER_IRQHandler+0x80>
 8003d28:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8003d2c:	d016      	beq.n	8003d5c <HAL_I2C_ER_IRQHandler+0x80>
    tmp2 = hi2c->XferCount;
 8003d2e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003d30:	b299      	uxth	r1, r3
    tmp3 = hi2c->State;
 8003d32:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003d36:	b2db      	uxtb	r3, r3
    tmp4 = hi2c->PreviousState;
 8003d38:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003d3a:	2a20      	cmp	r2, #32
 8003d3c:	d01b      	beq.n	8003d76 <HAL_I2C_ER_IRQHandler+0x9a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
 8003d44:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8003d46:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d4a:	2a10      	cmp	r2, #16
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_ER_IRQHandler+0x76>
 8003d4e:	2a40      	cmp	r2, #64	@ 0x40
 8003d50:	d104      	bne.n	8003d5c <HAL_I2C_ER_IRQHandler+0x80>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d52:	6822      	ldr	r2, [r4, #0]
 8003d54:	6813      	ldr	r3, [r2, #0]
 8003d56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d5a:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d5c:	f415 6f00 	tst.w	r5, #2048	@ 0x800
 8003d60:	d017      	beq.n	8003d92 <HAL_I2C_ER_IRQHandler+0xb6>
 8003d62:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8003d66:	d014      	beq.n	8003d92 <HAL_I2C_ER_IRQHandler+0xb6>
    error |= HAL_I2C_ERROR_OVR;
 8003d68:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003d72:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 8003d74:	e00e      	b.n	8003d94 <HAL_I2C_ER_IRQHandler+0xb8>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003d76:	2900      	cmp	r1, #0
 8003d78:	d1e1      	bne.n	8003d3e <HAL_I2C_ER_IRQHandler+0x62>
 8003d7a:	2b21      	cmp	r3, #33	@ 0x21
 8003d7c:	d005      	beq.n	8003d8a <HAL_I2C_ER_IRQHandler+0xae>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003d7e:	2b29      	cmp	r3, #41	@ 0x29
 8003d80:	d003      	beq.n	8003d8a <HAL_I2C_ER_IRQHandler+0xae>
 8003d82:	2b28      	cmp	r3, #40	@ 0x28
 8003d84:	d1db      	bne.n	8003d3e <HAL_I2C_ER_IRQHandler+0x62>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003d86:	2821      	cmp	r0, #33	@ 0x21
 8003d88:	d1d9      	bne.n	8003d3e <HAL_I2C_ER_IRQHandler+0x62>
      I2C_Slave_AF(hi2c);
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7ff fa50 	bl	8003230 <I2C_Slave_AF>
 8003d90:	e7e4      	b.n	8003d5c <HAL_I2C_ER_IRQHandler+0x80>
  if (error != HAL_I2C_ERROR_NONE)
 8003d92:	b12e      	cbz	r6, 8003da0 <HAL_I2C_ER_IRQHandler+0xc4>
    hi2c->ErrorCode |= error;
 8003d94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d96:	4333      	orrs	r3, r6
 8003d98:	6423      	str	r3, [r4, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f7ff fd4c 	bl	8003838 <I2C_ITError>
}
 8003da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003da4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003da4:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003da6:	4b08      	ldr	r3, [pc, #32]	@ (8003dc8 <RCC_Delay+0x24>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a08      	ldr	r2, [pc, #32]	@ (8003dcc <RCC_Delay+0x28>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	0a5b      	lsrs	r3, r3, #9
 8003db2:	fb00 f303 	mul.w	r3, r0, r3
 8003db6:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003db8:	bf00      	nop
  }
  while (Delay --);
 8003dba:	9b01      	ldr	r3, [sp, #4]
 8003dbc:	1e5a      	subs	r2, r3, #1
 8003dbe:	9201      	str	r2, [sp, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f9      	bne.n	8003db8 <RCC_Delay+0x14>
}
 8003dc4:	b002      	add	sp, #8
 8003dc6:	4770      	bx	lr
 8003dc8:	20000004 	.word	0x20000004
 8003dcc:	10624dd3 	.word	0x10624dd3

08003dd0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	f000 81f1 	beq.w	80041b8 <HAL_RCC_OscConfig+0x3e8>
{
 8003dd6:	b570      	push	{r4, r5, r6, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ddc:	6803      	ldr	r3, [r0, #0]
 8003dde:	f013 0f01 	tst.w	r3, #1
 8003de2:	d02c      	beq.n	8003e3e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003de4:	4b99      	ldr	r3, [pc, #612]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 030c 	and.w	r3, r3, #12
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d01d      	beq.n	8003e2c <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003df0:	4b96      	ldr	r3, [pc, #600]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 030c 	and.w	r3, r3, #12
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d012      	beq.n	8003e22 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfc:	6863      	ldr	r3, [r4, #4]
 8003dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e02:	d041      	beq.n	8003e88 <HAL_RCC_OscConfig+0xb8>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d155      	bne.n	8003eb4 <HAL_RCC_OscConfig+0xe4>
 8003e08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e0c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e037      	b.n	8003e92 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e22:	4b8a      	ldr	r3, [pc, #552]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003e2a:	d0e7      	beq.n	8003dfc <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	4b87      	ldr	r3, [pc, #540]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003e34:	d003      	beq.n	8003e3e <HAL_RCC_OscConfig+0x6e>
 8003e36:	6863      	ldr	r3, [r4, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 81bf 	beq.w	80041bc <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	f013 0f02 	tst.w	r3, #2
 8003e44:	d075      	beq.n	8003f32 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e46:	4b81      	ldr	r3, [pc, #516]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f013 0f0c 	tst.w	r3, #12
 8003e4e:	d05f      	beq.n	8003f10 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e50:	4b7e      	ldr	r3, [pc, #504]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d054      	beq.n	8003f06 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e5c:	6923      	ldr	r3, [r4, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 808a 	beq.w	8003f78 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8003e64:	4b7a      	ldr	r3, [pc, #488]	@ (8004050 <HAL_RCC_OscConfig+0x280>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e6a:	f7fd fe2b 	bl	8001ac4 <HAL_GetTick>
 8003e6e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e70:	4b76      	ldr	r3, [pc, #472]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f013 0f02 	tst.w	r3, #2
 8003e78:	d175      	bne.n	8003f66 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e7a:	f7fd fe23 	bl	8001ac4 <HAL_GetTick>
 8003e7e:	1b40      	subs	r0, r0, r5
 8003e80:	2802      	cmp	r0, #2
 8003e82:	d9f5      	bls.n	8003e70 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8003e84:	2003      	movs	r0, #3
 8003e86:	e19e      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e88:	4a70      	ldr	r2, [pc, #448]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e8a:	6813      	ldr	r3, [r2, #0]
 8003e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e90:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e92:	6863      	ldr	r3, [r4, #4]
 8003e94:	b343      	cbz	r3, 8003ee8 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8003e96:	f7fd fe15 	bl	8001ac4 <HAL_GetTick>
 8003e9a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9c:	4b6b      	ldr	r3, [pc, #428]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003ea4:	d1cb      	bne.n	8003e3e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea6:	f7fd fe0d 	bl	8001ac4 <HAL_GetTick>
 8003eaa:	1b40      	subs	r0, r0, r5
 8003eac:	2864      	cmp	r0, #100	@ 0x64
 8003eae:	d9f5      	bls.n	8003e9c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8003eb0:	2003      	movs	r0, #3
 8003eb2:	e188      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eb8:	d009      	beq.n	8003ece <HAL_RCC_OscConfig+0xfe>
 8003eba:	4b64      	ldr	r3, [pc, #400]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e7e1      	b.n	8003e92 <HAL_RCC_OscConfig+0xc2>
 8003ece:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ed2:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	e7d4      	b.n	8003e92 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8003ee8:	f7fd fdec 	bl	8001ac4 <HAL_GetTick>
 8003eec:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eee:	4b57      	ldr	r3, [pc, #348]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003ef6:	d0a2      	beq.n	8003e3e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef8:	f7fd fde4 	bl	8001ac4 <HAL_GetTick>
 8003efc:	1b40      	subs	r0, r0, r5
 8003efe:	2864      	cmp	r0, #100	@ 0x64
 8003f00:	d9f5      	bls.n	8003eee <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8003f02:	2003      	movs	r0, #3
 8003f04:	e15f      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f06:	4b51      	ldr	r3, [pc, #324]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003f0e:	d1a5      	bne.n	8003e5c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f10:	4b4e      	ldr	r3, [pc, #312]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f013 0f02 	tst.w	r3, #2
 8003f18:	d003      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
 8003f1a:	6923      	ldr	r3, [r4, #16]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	f040 814f 	bne.w	80041c0 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4a4a      	ldr	r2, [pc, #296]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f24:	6813      	ldr	r3, [r2, #0]
 8003f26:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003f2a:	6961      	ldr	r1, [r4, #20]
 8003f2c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003f30:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	f013 0f08 	tst.w	r3, #8
 8003f38:	d033      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f3a:	69a3      	ldr	r3, [r4, #24]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d05c      	beq.n	8003ffa <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8003f40:	4b43      	ldr	r3, [pc, #268]	@ (8004050 <HAL_RCC_OscConfig+0x280>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8003f48:	f7fd fdbc 	bl	8001ac4 <HAL_GetTick>
 8003f4c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	f013 0f02 	tst.w	r3, #2
 8003f56:	d121      	bne.n	8003f9c <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f58:	f7fd fdb4 	bl	8001ac4 <HAL_GetTick>
 8003f5c:	1b40      	subs	r0, r0, r5
 8003f5e:	2802      	cmp	r0, #2
 8003f60:	d9f5      	bls.n	8003f4e <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8003f62:	2003      	movs	r0, #3
 8003f64:	e12f      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f66:	4a39      	ldr	r2, [pc, #228]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f68:	6813      	ldr	r3, [r2, #0]
 8003f6a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003f6e:	6961      	ldr	r1, [r4, #20]
 8003f70:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e7dc      	b.n	8003f32 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003f78:	4b35      	ldr	r3, [pc, #212]	@ (8004050 <HAL_RCC_OscConfig+0x280>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f7e:	f7fd fda1 	bl	8001ac4 <HAL_GetTick>
 8003f82:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f84:	4b31      	ldr	r3, [pc, #196]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f013 0f02 	tst.w	r3, #2
 8003f8c:	d0d1      	beq.n	8003f32 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8e:	f7fd fd99 	bl	8001ac4 <HAL_GetTick>
 8003f92:	1b40      	subs	r0, r0, r5
 8003f94:	2802      	cmp	r0, #2
 8003f96:	d9f5      	bls.n	8003f84 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8003f98:	2003      	movs	r0, #3
 8003f9a:	e114      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f7ff ff01 	bl	8003da4 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	f013 0f04 	tst.w	r3, #4
 8003fa8:	f000 8096 	beq.w	80040d8 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fac:	4b27      	ldr	r3, [pc, #156]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003fb4:	d134      	bne.n	8004020 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb6:	4b25      	ldr	r3, [pc, #148]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003fbe:	61da      	str	r2, [r3, #28]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003fca:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fcc:	4b21      	ldr	r3, [pc, #132]	@ (8004054 <HAL_RCC_OscConfig+0x284>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003fd4:	d026      	beq.n	8004024 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd6:	68e3      	ldr	r3, [r4, #12]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d03d      	beq.n	8004058 <HAL_RCC_OscConfig+0x288>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d153      	bne.n	8004088 <HAL_RCC_OscConfig+0x2b8>
 8003fe0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fe4:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8003fe8:	6a1a      	ldr	r2, [r3, #32]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	621a      	str	r2, [r3, #32]
 8003ff0:	6a1a      	ldr	r2, [r3, #32]
 8003ff2:	f022 0204 	bic.w	r2, r2, #4
 8003ff6:	621a      	str	r2, [r3, #32]
 8003ff8:	e033      	b.n	8004062 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8003ffa:	4b15      	ldr	r3, [pc, #84]	@ (8004050 <HAL_RCC_OscConfig+0x280>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8004002:	f7fd fd5f 	bl	8001ac4 <HAL_GetTick>
 8004006:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004008:	4b10      	ldr	r3, [pc, #64]	@ (800404c <HAL_RCC_OscConfig+0x27c>)
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	f013 0f02 	tst.w	r3, #2
 8004010:	d0c7      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004012:	f7fd fd57 	bl	8001ac4 <HAL_GetTick>
 8004016:	1b40      	subs	r0, r0, r5
 8004018:	2802      	cmp	r0, #2
 800401a:	d9f5      	bls.n	8004008 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 800401c:	2003      	movs	r0, #3
 800401e:	e0d2      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8004020:	2500      	movs	r5, #0
 8004022:	e7d3      	b.n	8003fcc <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004024:	4a0b      	ldr	r2, [pc, #44]	@ (8004054 <HAL_RCC_OscConfig+0x284>)
 8004026:	6813      	ldr	r3, [r2, #0]
 8004028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800402c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800402e:	f7fd fd49 	bl	8001ac4 <HAL_GetTick>
 8004032:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004034:	4b07      	ldr	r3, [pc, #28]	@ (8004054 <HAL_RCC_OscConfig+0x284>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800403c:	d1cb      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403e:	f7fd fd41 	bl	8001ac4 <HAL_GetTick>
 8004042:	1b80      	subs	r0, r0, r6
 8004044:	2864      	cmp	r0, #100	@ 0x64
 8004046:	d9f5      	bls.n	8004034 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8004048:	2003      	movs	r0, #3
 800404a:	e0bc      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
 800404c:	40021000 	.word	0x40021000
 8004050:	42420000 	.word	0x42420000
 8004054:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004058:	4a5f      	ldr	r2, [pc, #380]	@ (80041d8 <HAL_RCC_OscConfig+0x408>)
 800405a:	6a13      	ldr	r3, [r2, #32]
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004062:	68e3      	ldr	r3, [r4, #12]
 8004064:	b333      	cbz	r3, 80040b4 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8004066:	f7fd fd2d 	bl	8001ac4 <HAL_GetTick>
 800406a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	4b5a      	ldr	r3, [pc, #360]	@ (80041d8 <HAL_RCC_OscConfig+0x408>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f013 0f02 	tst.w	r3, #2
 8004074:	d12f      	bne.n	80040d6 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004076:	f7fd fd25 	bl	8001ac4 <HAL_GetTick>
 800407a:	1b80      	subs	r0, r0, r6
 800407c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004080:	4298      	cmp	r0, r3
 8004082:	d9f3      	bls.n	800406c <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8004084:	2003      	movs	r0, #3
 8004086:	e09e      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004088:	2b05      	cmp	r3, #5
 800408a:	d009      	beq.n	80040a0 <HAL_RCC_OscConfig+0x2d0>
 800408c:	4b52      	ldr	r3, [pc, #328]	@ (80041d8 <HAL_RCC_OscConfig+0x408>)
 800408e:	6a1a      	ldr	r2, [r3, #32]
 8004090:	f022 0201 	bic.w	r2, r2, #1
 8004094:	621a      	str	r2, [r3, #32]
 8004096:	6a1a      	ldr	r2, [r3, #32]
 8004098:	f022 0204 	bic.w	r2, r2, #4
 800409c:	621a      	str	r2, [r3, #32]
 800409e:	e7e0      	b.n	8004062 <HAL_RCC_OscConfig+0x292>
 80040a0:	4b4d      	ldr	r3, [pc, #308]	@ (80041d8 <HAL_RCC_OscConfig+0x408>)
 80040a2:	6a1a      	ldr	r2, [r3, #32]
 80040a4:	f042 0204 	orr.w	r2, r2, #4
 80040a8:	621a      	str	r2, [r3, #32]
 80040aa:	6a1a      	ldr	r2, [r3, #32]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	621a      	str	r2, [r3, #32]
 80040b2:	e7d6      	b.n	8004062 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 80040b4:	f7fd fd06 	bl	8001ac4 <HAL_GetTick>
 80040b8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ba:	4b47      	ldr	r3, [pc, #284]	@ (80041d8 <HAL_RCC_OscConfig+0x408>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f013 0f02 	tst.w	r3, #2
 80040c2:	d008      	beq.n	80040d6 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c4:	f7fd fcfe 	bl	8001ac4 <HAL_GetTick>
 80040c8:	1b80      	subs	r0, r0, r6
 80040ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80040ce:	4298      	cmp	r0, r3
 80040d0:	d9f3      	bls.n	80040ba <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80040d2:	2003      	movs	r0, #3
 80040d4:	e077      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 80040d6:	b9e5      	cbnz	r5, 8004112 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d8:	69e3      	ldr	r3, [r4, #28]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d072      	beq.n	80041c4 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040de:	4a3e      	ldr	r2, [pc, #248]	@ (80041d8 <HAL_RCC_OscConfig+0x408>)
 80040e0:	6852      	ldr	r2, [r2, #4]
 80040e2:	f002 020c 	and.w	r2, r2, #12
 80040e6:	2a08      	cmp	r2, #8
 80040e8:	d056      	beq.n	8004198 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d017      	beq.n	800411e <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80040ee:	4b3b      	ldr	r3, [pc, #236]	@ (80041dc <HAL_RCC_OscConfig+0x40c>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80040f4:	f7fd fce6 	bl	8001ac4 <HAL_GetTick>
 80040f8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fa:	4b37      	ldr	r3, [pc, #220]	@ (80041d8 <HAL_RCC_OscConfig+0x408>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004102:	d047      	beq.n	8004194 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004104:	f7fd fcde 	bl	8001ac4 <HAL_GetTick>
 8004108:	1b00      	subs	r0, r0, r4
 800410a:	2802      	cmp	r0, #2
 800410c:	d9f5      	bls.n	80040fa <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800410e:	2003      	movs	r0, #3
 8004110:	e059      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004112:	4a31      	ldr	r2, [pc, #196]	@ (80041d8 <HAL_RCC_OscConfig+0x408>)
 8004114:	69d3      	ldr	r3, [r2, #28]
 8004116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800411a:	61d3      	str	r3, [r2, #28]
 800411c:	e7dc      	b.n	80040d8 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800411e:	4b2f      	ldr	r3, [pc, #188]	@ (80041dc <HAL_RCC_OscConfig+0x40c>)
 8004120:	2200      	movs	r2, #0
 8004122:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004124:	f7fd fcce 	bl	8001ac4 <HAL_GetTick>
 8004128:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800412a:	4b2b      	ldr	r3, [pc, #172]	@ (80041d8 <HAL_RCC_OscConfig+0x408>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004132:	d006      	beq.n	8004142 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004134:	f7fd fcc6 	bl	8001ac4 <HAL_GetTick>
 8004138:	1b40      	subs	r0, r0, r5
 800413a:	2802      	cmp	r0, #2
 800413c:	d9f5      	bls.n	800412a <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800413e:	2003      	movs	r0, #3
 8004140:	e041      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004142:	6a23      	ldr	r3, [r4, #32]
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004148:	d01a      	beq.n	8004180 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800414a:	4923      	ldr	r1, [pc, #140]	@ (80041d8 <HAL_RCC_OscConfig+0x408>)
 800414c:	684b      	ldr	r3, [r1, #4]
 800414e:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8004152:	6a22      	ldr	r2, [r4, #32]
 8004154:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004156:	4302      	orrs	r2, r0
 8004158:	4313      	orrs	r3, r2
 800415a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800415c:	4b1f      	ldr	r3, [pc, #124]	@ (80041dc <HAL_RCC_OscConfig+0x40c>)
 800415e:	2201      	movs	r2, #1
 8004160:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004162:	f7fd fcaf 	bl	8001ac4 <HAL_GetTick>
 8004166:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004168:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <HAL_RCC_OscConfig+0x408>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004170:	d10e      	bne.n	8004190 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004172:	f7fd fca7 	bl	8001ac4 <HAL_GetTick>
 8004176:	1b00      	subs	r0, r0, r4
 8004178:	2802      	cmp	r0, #2
 800417a:	d9f5      	bls.n	8004168 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 800417c:	2003      	movs	r0, #3
 800417e:	e022      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004180:	4a15      	ldr	r2, [pc, #84]	@ (80041d8 <HAL_RCC_OscConfig+0x408>)
 8004182:	6853      	ldr	r3, [r2, #4]
 8004184:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004188:	68a1      	ldr	r1, [r4, #8]
 800418a:	430b      	orrs	r3, r1
 800418c:	6053      	str	r3, [r2, #4]
 800418e:	e7dc      	b.n	800414a <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8004190:	2000      	movs	r0, #0
 8004192:	e018      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
 8004194:	2000      	movs	r0, #0
 8004196:	e016      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004198:	2b01      	cmp	r3, #1
 800419a:	d016      	beq.n	80041ca <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 800419c:	4b0e      	ldr	r3, [pc, #56]	@ (80041d8 <HAL_RCC_OscConfig+0x408>)
 800419e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a0:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 80041a4:	6a22      	ldr	r2, [r4, #32]
 80041a6:	4291      	cmp	r1, r2
 80041a8:	d111      	bne.n	80041ce <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041aa:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80041ae:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d10e      	bne.n	80041d2 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 80041b4:	2000      	movs	r0, #0
 80041b6:	e006      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 80041b8:	2001      	movs	r0, #1
}
 80041ba:	4770      	bx	lr
        return HAL_ERROR;
 80041bc:	2001      	movs	r0, #1
 80041be:	e002      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80041c0:	2001      	movs	r0, #1
 80041c2:	e000      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80041c4:	2000      	movs	r0, #0
}
 80041c6:	b002      	add	sp, #8
 80041c8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80041ca:	2001      	movs	r0, #1
 80041cc:	e7fb      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80041ce:	2001      	movs	r0, #1
 80041d0:	e7f9      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
 80041d2:	2001      	movs	r0, #1
 80041d4:	e7f7      	b.n	80041c6 <HAL_RCC_OscConfig+0x3f6>
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	42420000 	.word	0x42420000

080041e0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80041e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004220 <HAL_RCC_GetSysClockFreq+0x40>)
 80041e2:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80041e4:	f003 020c 	and.w	r2, r3, #12
 80041e8:	2a08      	cmp	r2, #8
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80041ec:	480d      	ldr	r0, [pc, #52]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80041ee:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041f0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80041f4:	490c      	ldr	r1, [pc, #48]	@ (8004228 <HAL_RCC_GetSysClockFreq+0x48>)
 80041f6:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041f8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80041fc:	d00b      	beq.n	8004216 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041fe:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <HAL_RCC_GetSysClockFreq+0x40>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8004206:	4a09      	ldr	r2, [pc, #36]	@ (800422c <HAL_RCC_GetSysClockFreq+0x4c>)
 8004208:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800420a:	4a06      	ldr	r2, [pc, #24]	@ (8004224 <HAL_RCC_GetSysClockFreq+0x44>)
 800420c:	fb02 f000 	mul.w	r0, r2, r0
 8004210:	fbb0 f0f3 	udiv	r0, r0, r3
 8004214:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004216:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <HAL_RCC_GetSysClockFreq+0x50>)
 8004218:	fb03 f000 	mul.w	r0, r3, r0
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40021000 	.word	0x40021000
 8004224:	007a1200 	.word	0x007a1200
 8004228:	08007e48 	.word	0x08007e48
 800422c:	08007e44 	.word	0x08007e44
 8004230:	003d0900 	.word	0x003d0900

08004234 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004234:	2800      	cmp	r0, #0
 8004236:	f000 80a0 	beq.w	800437a <HAL_RCC_ClockConfig+0x146>
{
 800423a:	b570      	push	{r4, r5, r6, lr}
 800423c:	460d      	mov	r5, r1
 800423e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004240:	4b52      	ldr	r3, [pc, #328]	@ (800438c <HAL_RCC_ClockConfig+0x158>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	428b      	cmp	r3, r1
 800424a:	d20b      	bcs.n	8004264 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424c:	4a4f      	ldr	r2, [pc, #316]	@ (800438c <HAL_RCC_ClockConfig+0x158>)
 800424e:	6813      	ldr	r3, [r2, #0]
 8004250:	f023 0307 	bic.w	r3, r3, #7
 8004254:	430b      	orrs	r3, r1
 8004256:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004258:	6813      	ldr	r3, [r2, #0]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	428b      	cmp	r3, r1
 8004260:	f040 808d 	bne.w	800437e <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	f013 0f02 	tst.w	r3, #2
 800426a:	d017      	beq.n	800429c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426c:	f013 0f04 	tst.w	r3, #4
 8004270:	d004      	beq.n	800427c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004272:	4a47      	ldr	r2, [pc, #284]	@ (8004390 <HAL_RCC_ClockConfig+0x15c>)
 8004274:	6853      	ldr	r3, [r2, #4]
 8004276:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800427a:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	f013 0f08 	tst.w	r3, #8
 8004282:	d004      	beq.n	800428e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004284:	4a42      	ldr	r2, [pc, #264]	@ (8004390 <HAL_RCC_ClockConfig+0x15c>)
 8004286:	6853      	ldr	r3, [r2, #4]
 8004288:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800428c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428e:	4a40      	ldr	r2, [pc, #256]	@ (8004390 <HAL_RCC_ClockConfig+0x15c>)
 8004290:	6853      	ldr	r3, [r2, #4]
 8004292:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004296:	68a1      	ldr	r1, [r4, #8]
 8004298:	430b      	orrs	r3, r1
 800429a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	f013 0f01 	tst.w	r3, #1
 80042a2:	d031      	beq.n	8004308 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a4:	6863      	ldr	r3, [r4, #4]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d020      	beq.n	80042ec <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d025      	beq.n	80042fa <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ae:	4a38      	ldr	r2, [pc, #224]	@ (8004390 <HAL_RCC_ClockConfig+0x15c>)
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	f012 0f02 	tst.w	r2, #2
 80042b6:	d064      	beq.n	8004382 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042b8:	4935      	ldr	r1, [pc, #212]	@ (8004390 <HAL_RCC_ClockConfig+0x15c>)
 80042ba:	684a      	ldr	r2, [r1, #4]
 80042bc:	f022 0203 	bic.w	r2, r2, #3
 80042c0:	4313      	orrs	r3, r2
 80042c2:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80042c4:	f7fd fbfe 	bl	8001ac4 <HAL_GetTick>
 80042c8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	4b31      	ldr	r3, [pc, #196]	@ (8004390 <HAL_RCC_ClockConfig+0x15c>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	6862      	ldr	r2, [r4, #4]
 80042d4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80042d8:	d016      	beq.n	8004308 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042da:	f7fd fbf3 	bl	8001ac4 <HAL_GetTick>
 80042de:	1b80      	subs	r0, r0, r6
 80042e0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042e4:	4298      	cmp	r0, r3
 80042e6:	d9f0      	bls.n	80042ca <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80042e8:	2003      	movs	r0, #3
 80042ea:	e045      	b.n	8004378 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ec:	4a28      	ldr	r2, [pc, #160]	@ (8004390 <HAL_RCC_ClockConfig+0x15c>)
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80042f4:	d1e0      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80042f6:	2001      	movs	r0, #1
 80042f8:	e03e      	b.n	8004378 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fa:	4a25      	ldr	r2, [pc, #148]	@ (8004390 <HAL_RCC_ClockConfig+0x15c>)
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8004302:	d1d9      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004304:	2001      	movs	r0, #1
 8004306:	e037      	b.n	8004378 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004308:	4b20      	ldr	r3, [pc, #128]	@ (800438c <HAL_RCC_ClockConfig+0x158>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	42ab      	cmp	r3, r5
 8004312:	d90a      	bls.n	800432a <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004314:	4a1d      	ldr	r2, [pc, #116]	@ (800438c <HAL_RCC_ClockConfig+0x158>)
 8004316:	6813      	ldr	r3, [r2, #0]
 8004318:	f023 0307 	bic.w	r3, r3, #7
 800431c:	432b      	orrs	r3, r5
 800431e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004320:	6813      	ldr	r3, [r2, #0]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	42ab      	cmp	r3, r5
 8004328:	d12d      	bne.n	8004386 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	f013 0f04 	tst.w	r3, #4
 8004330:	d006      	beq.n	8004340 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004332:	4a17      	ldr	r2, [pc, #92]	@ (8004390 <HAL_RCC_ClockConfig+0x15c>)
 8004334:	6853      	ldr	r3, [r2, #4]
 8004336:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800433a:	68e1      	ldr	r1, [r4, #12]
 800433c:	430b      	orrs	r3, r1
 800433e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	f013 0f08 	tst.w	r3, #8
 8004346:	d007      	beq.n	8004358 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004348:	4a11      	ldr	r2, [pc, #68]	@ (8004390 <HAL_RCC_ClockConfig+0x15c>)
 800434a:	6853      	ldr	r3, [r2, #4]
 800434c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004350:	6921      	ldr	r1, [r4, #16]
 8004352:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004356:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004358:	f7ff ff42 	bl	80041e0 <HAL_RCC_GetSysClockFreq>
 800435c:	4b0c      	ldr	r3, [pc, #48]	@ (8004390 <HAL_RCC_ClockConfig+0x15c>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004364:	4a0b      	ldr	r2, [pc, #44]	@ (8004394 <HAL_RCC_ClockConfig+0x160>)
 8004366:	5cd3      	ldrb	r3, [r2, r3]
 8004368:	40d8      	lsrs	r0, r3
 800436a:	4b0b      	ldr	r3, [pc, #44]	@ (8004398 <HAL_RCC_ClockConfig+0x164>)
 800436c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800436e:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <HAL_RCC_ClockConfig+0x168>)
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	f7fd faa7 	bl	80018c4 <HAL_InitTick>
  return HAL_OK;
 8004376:	2000      	movs	r0, #0
}
 8004378:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800437a:	2001      	movs	r0, #1
}
 800437c:	4770      	bx	lr
    return HAL_ERROR;
 800437e:	2001      	movs	r0, #1
 8004380:	e7fa      	b.n	8004378 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004382:	2001      	movs	r0, #1
 8004384:	e7f8      	b.n	8004378 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8004386:	2001      	movs	r0, #1
 8004388:	e7f6      	b.n	8004378 <HAL_RCC_ClockConfig+0x144>
 800438a:	bf00      	nop
 800438c:	40022000 	.word	0x40022000
 8004390:	40021000 	.word	0x40021000
 8004394:	08007e34 	.word	0x08007e34
 8004398:	20000004 	.word	0x20000004
 800439c:	2000000c 	.word	0x2000000c

080043a0 <HAL_RCC_GetHCLKFreq>:
}
 80043a0:	4b01      	ldr	r3, [pc, #4]	@ (80043a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000004 	.word	0x20000004

080043ac <HAL_RCC_GetPCLK1Freq>:
{
 80043ac:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043ae:	f7ff fff7 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043b2:	4b04      	ldr	r3, [pc, #16]	@ (80043c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80043ba:	4a03      	ldr	r2, [pc, #12]	@ (80043c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80043bc:	5cd3      	ldrb	r3, [r2, r3]
}
 80043be:	40d8      	lsrs	r0, r3
 80043c0:	bd08      	pop	{r3, pc}
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
 80043c8:	08007e2c 	.word	0x08007e2c

080043cc <HAL_RCC_GetPCLK2Freq>:
{
 80043cc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043ce:	f7ff ffe7 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043d2:	4b04      	ldr	r3, [pc, #16]	@ (80043e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80043da:	4a03      	ldr	r2, [pc, #12]	@ (80043e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80043dc:	5cd3      	ldrb	r3, [r2, r3]
}
 80043de:	40d8      	lsrs	r0, r3
 80043e0:	bd08      	pop	{r3, pc}
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	08007e2c 	.word	0x08007e2c

080043ec <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043ec:	230f      	movs	r3, #15
 80043ee:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <HAL_RCC_GetClockConfig+0x34>)
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	f002 0203 	and.w	r2, r2, #3
 80043f8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8004400:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8004408:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	08db      	lsrs	r3, r3, #3
 800440e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004412:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004414:	4b03      	ldr	r3, [pc, #12]	@ (8004424 <HAL_RCC_GetClockConfig+0x38>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	600b      	str	r3, [r1, #0]
}
 800441e:	4770      	bx	lr
 8004420:	40021000 	.word	0x40021000
 8004424:	40022000 	.word	0x40022000

08004428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004428:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442a:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800442c:	6a03      	ldr	r3, [r0, #32]
 800442e:	f023 0301 	bic.w	r3, r3, #1
 8004432:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004436:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004438:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800443c:	680c      	ldr	r4, [r1, #0]
 800443e:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004440:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004444:	688b      	ldr	r3, [r1, #8]
 8004446:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004448:	4a0b      	ldr	r2, [pc, #44]	@ (8004478 <TIM_OC1_SetConfig+0x50>)
 800444a:	4290      	cmp	r0, r2
 800444c:	d006      	beq.n	800445c <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004450:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004452:	684a      	ldr	r2, [r1, #4]
 8004454:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004456:	6203      	str	r3, [r0, #32]
}
 8004458:	bc30      	pop	{r4, r5}
 800445a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 800445c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004460:	68ca      	ldr	r2, [r1, #12]
 8004462:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8004464:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004468:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800446c:	694a      	ldr	r2, [r1, #20]
 800446e:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004470:	698d      	ldr	r5, [r1, #24]
 8004472:	4315      	orrs	r5, r2
 8004474:	e7eb      	b.n	800444e <TIM_OC1_SetConfig+0x26>
 8004476:	bf00      	nop
 8004478:	40012c00 	.word	0x40012c00

0800447c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800447c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004480:	6a02      	ldr	r2, [r0, #32]
 8004482:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004486:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004488:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800448a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800448c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004490:	680d      	ldr	r5, [r1, #0]
 8004492:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004494:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004498:	688a      	ldr	r2, [r1, #8]
 800449a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800449e:	4a0d      	ldr	r2, [pc, #52]	@ (80044d4 <TIM_OC3_SetConfig+0x58>)
 80044a0:	4290      	cmp	r0, r2
 80044a2:	d006      	beq.n	80044b2 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a6:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044a8:	684a      	ldr	r2, [r1, #4]
 80044aa:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ac:	6203      	str	r3, [r0, #32]
}
 80044ae:	bc30      	pop	{r4, r5}
 80044b0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80044b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044b6:	68ca      	ldr	r2, [r1, #12]
 80044b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80044bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044c0:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044c4:	694a      	ldr	r2, [r1, #20]
 80044c6:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044ca:	698a      	ldr	r2, [r1, #24]
 80044cc:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 80044d0:	e7e8      	b.n	80044a4 <TIM_OC3_SetConfig+0x28>
 80044d2:	bf00      	nop
 80044d4:	40012c00 	.word	0x40012c00

080044d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044da:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044dc:	6a02      	ldr	r2, [r0, #32]
 80044de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80044e2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044e6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044e8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044ec:	680d      	ldr	r5, [r1, #0]
 80044ee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044f6:	688d      	ldr	r5, [r1, #8]
 80044f8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fc:	4d07      	ldr	r5, [pc, #28]	@ (800451c <TIM_OC4_SetConfig+0x44>)
 80044fe:	42a8      	cmp	r0, r5
 8004500:	d006      	beq.n	8004510 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004502:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004504:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004506:	684a      	ldr	r2, [r1, #4]
 8004508:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450a:	6203      	str	r3, [r0, #32]
}
 800450c:	bc30      	pop	{r4, r5}
 800450e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004510:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004514:	694d      	ldr	r5, [r1, #20]
 8004516:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800451a:	e7f2      	b.n	8004502 <TIM_OC4_SetConfig+0x2a>
 800451c:	40012c00 	.word	0x40012c00

08004520 <HAL_TIM_Base_MspInit>:
}
 8004520:	4770      	bx	lr
	...

08004524 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004524:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b01      	cmp	r3, #1
 800452c:	d127      	bne.n	800457e <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 800452e:	2302      	movs	r3, #2
 8004530:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004534:	6802      	ldr	r2, [r0, #0]
 8004536:	68d3      	ldr	r3, [r2, #12]
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453e:	6803      	ldr	r3, [r0, #0]
 8004540:	4a11      	ldr	r2, [pc, #68]	@ (8004588 <HAL_TIM_Base_Start_IT+0x64>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d010      	beq.n	8004568 <HAL_TIM_Base_Start_IT+0x44>
 8004546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800454a:	d00d      	beq.n	8004568 <HAL_TIM_Base_Start_IT+0x44>
 800454c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004550:	4293      	cmp	r3, r2
 8004552:	d009      	beq.n	8004568 <HAL_TIM_Base_Start_IT+0x44>
 8004554:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004558:	4293      	cmp	r3, r2
 800455a:	d005      	beq.n	8004568 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004564:	2000      	movs	r0, #0
 8004566:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456e:	2a06      	cmp	r2, #6
 8004570:	d007      	beq.n	8004582 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800457a:	2000      	movs	r0, #0
 800457c:	4770      	bx	lr
    return HAL_ERROR;
 800457e:	2001      	movs	r0, #1
 8004580:	4770      	bx	lr
  return HAL_OK;
 8004582:	2000      	movs	r0, #0
}
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40012c00 	.word	0x40012c00

0800458c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800458c:	4770      	bx	lr

0800458e <HAL_TIM_IC_CaptureCallback>:
}
 800458e:	4770      	bx	lr

08004590 <HAL_TIM_TriggerCallback>:
}
 8004590:	4770      	bx	lr

08004592 <HAL_TIM_IRQHandler>:
{
 8004592:	b570      	push	{r4, r5, r6, lr}
 8004594:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8004596:	6803      	ldr	r3, [r0, #0]
 8004598:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800459a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800459c:	f015 0f02 	tst.w	r5, #2
 80045a0:	d010      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045a2:	f016 0f02 	tst.w	r6, #2
 80045a6:	d00d      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045a8:	f06f 0202 	mvn.w	r2, #2
 80045ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ae:	2301      	movs	r3, #1
 80045b0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045b2:	6803      	ldr	r3, [r0, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f013 0f03 	tst.w	r3, #3
 80045ba:	d05e      	beq.n	800467a <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80045bc:	f7ff ffe7 	bl	800458e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c0:	2300      	movs	r3, #0
 80045c2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045c4:	f015 0f04 	tst.w	r5, #4
 80045c8:	d012      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045ca:	f016 0f04 	tst.w	r6, #4
 80045ce:	d00f      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	f06f 0204 	mvn.w	r2, #4
 80045d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045d8:	2302      	movs	r3, #2
 80045da:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80045e4:	d04f      	beq.n	8004686 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80045e6:	4620      	mov	r0, r4
 80045e8:	f7ff ffd1 	bl	800458e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ec:	2300      	movs	r3, #0
 80045ee:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045f0:	f015 0f08 	tst.w	r5, #8
 80045f4:	d012      	beq.n	800461c <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045f6:	f016 0f08 	tst.w	r6, #8
 80045fa:	d00f      	beq.n	800461c <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	f06f 0208 	mvn.w	r2, #8
 8004602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004604:	2304      	movs	r3, #4
 8004606:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f013 0f03 	tst.w	r3, #3
 8004610:	d040      	beq.n	8004694 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8004612:	4620      	mov	r0, r4
 8004614:	f7ff ffbb 	bl	800458e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004618:	2300      	movs	r3, #0
 800461a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800461c:	f015 0f10 	tst.w	r5, #16
 8004620:	d012      	beq.n	8004648 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004622:	f016 0f10 	tst.w	r6, #16
 8004626:	d00f      	beq.n	8004648 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	f06f 0210 	mvn.w	r2, #16
 800462e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004630:	2308      	movs	r3, #8
 8004632:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800463c:	d031      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 800463e:	4620      	mov	r0, r4
 8004640:	f7ff ffa5 	bl	800458e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004644:	2300      	movs	r3, #0
 8004646:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004648:	f015 0f01 	tst.w	r5, #1
 800464c:	d002      	beq.n	8004654 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800464e:	f016 0f01 	tst.w	r6, #1
 8004652:	d12d      	bne.n	80046b0 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004654:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8004658:	d002      	beq.n	8004660 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800465a:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800465e:	d12f      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004660:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8004664:	d002      	beq.n	800466c <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004666:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800466a:	d131      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800466c:	f015 0f20 	tst.w	r5, #32
 8004670:	d002      	beq.n	8004678 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004672:	f016 0f20 	tst.w	r6, #32
 8004676:	d133      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x14e>
}
 8004678:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	f7ff ff87 	bl	800458c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800467e:	4620      	mov	r0, r4
 8004680:	f002 fa1e 	bl	8006ac0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004684:	e79c      	b.n	80045c0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004686:	4620      	mov	r0, r4
 8004688:	f7ff ff80 	bl	800458c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468c:	4620      	mov	r0, r4
 800468e:	f002 fa17 	bl	8006ac0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004692:	e7ab      	b.n	80045ec <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004694:	4620      	mov	r0, r4
 8004696:	f7ff ff79 	bl	800458c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469a:	4620      	mov	r0, r4
 800469c:	f002 fa10 	bl	8006ac0 <HAL_TIM_PWM_PulseFinishedCallback>
 80046a0:	e7ba      	b.n	8004618 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a2:	4620      	mov	r0, r4
 80046a4:	f7ff ff72 	bl	800458c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	4620      	mov	r0, r4
 80046aa:	f002 fa09 	bl	8006ac0 <HAL_TIM_PWM_PulseFinishedCallback>
 80046ae:	e7c9      	b.n	8004644 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	f06f 0201 	mvn.w	r2, #1
 80046b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80046b8:	4620      	mov	r0, r4
 80046ba:	f7fc fe3b 	bl	8001334 <HAL_TIM_PeriodElapsedCallback>
 80046be:	e7c9      	b.n	8004654 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80046c8:	4620      	mov	r0, r4
 80046ca:	f000 fa9e 	bl	8004c0a <HAL_TIMEx_BreakCallback>
 80046ce:	e7c7      	b.n	8004660 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80046d8:	4620      	mov	r0, r4
 80046da:	f7ff ff59 	bl	8004590 <HAL_TIM_TriggerCallback>
 80046de:	e7c5      	b.n	800466c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	f06f 0220 	mvn.w	r2, #32
 80046e6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80046e8:	4620      	mov	r0, r4
 80046ea:	f000 fa8d 	bl	8004c08 <HAL_TIMEx_CommutCallback>
}
 80046ee:	e7c3      	b.n	8004678 <HAL_TIM_IRQHandler+0xe6>

080046f0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80046f0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004770 <TIM_Base_SetConfig+0x80>)
 80046f4:	4290      	cmp	r0, r2
 80046f6:	d00a      	beq.n	800470e <TIM_Base_SetConfig+0x1e>
 80046f8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80046fc:	d007      	beq.n	800470e <TIM_Base_SetConfig+0x1e>
 80046fe:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004702:	4290      	cmp	r0, r2
 8004704:	d003      	beq.n	800470e <TIM_Base_SetConfig+0x1e>
 8004706:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800470a:	4290      	cmp	r0, r2
 800470c:	d103      	bne.n	8004716 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800470e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004712:	684a      	ldr	r2, [r1, #4]
 8004714:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004716:	4a16      	ldr	r2, [pc, #88]	@ (8004770 <TIM_Base_SetConfig+0x80>)
 8004718:	4290      	cmp	r0, r2
 800471a:	d00a      	beq.n	8004732 <TIM_Base_SetConfig+0x42>
 800471c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004720:	d007      	beq.n	8004732 <TIM_Base_SetConfig+0x42>
 8004722:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004726:	4290      	cmp	r0, r2
 8004728:	d003      	beq.n	8004732 <TIM_Base_SetConfig+0x42>
 800472a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800472e:	4290      	cmp	r0, r2
 8004730:	d103      	bne.n	800473a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004736:	68ca      	ldr	r2, [r1, #12]
 8004738:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800473a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800473e:	694a      	ldr	r2, [r1, #20]
 8004740:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004742:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004744:	688b      	ldr	r3, [r1, #8]
 8004746:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004748:	680b      	ldr	r3, [r1, #0]
 800474a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800474c:	4b08      	ldr	r3, [pc, #32]	@ (8004770 <TIM_Base_SetConfig+0x80>)
 800474e:	4298      	cmp	r0, r3
 8004750:	d00a      	beq.n	8004768 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 8004752:	2301      	movs	r3, #1
 8004754:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004756:	6903      	ldr	r3, [r0, #16]
 8004758:	f013 0f01 	tst.w	r3, #1
 800475c:	d003      	beq.n	8004766 <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800475e:	6903      	ldr	r3, [r0, #16]
 8004760:	f023 0301 	bic.w	r3, r3, #1
 8004764:	6103      	str	r3, [r0, #16]
}
 8004766:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8004768:	690b      	ldr	r3, [r1, #16]
 800476a:	6303      	str	r3, [r0, #48]	@ 0x30
 800476c:	e7f1      	b.n	8004752 <TIM_Base_SetConfig+0x62>
 800476e:	bf00      	nop
 8004770:	40012c00 	.word	0x40012c00

08004774 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004774:	b340      	cbz	r0, 80047c8 <HAL_TIM_Base_Init+0x54>
{
 8004776:	b510      	push	{r4, lr}
 8004778:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800477a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800477e:	b1f3      	cbz	r3, 80047be <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	2302      	movs	r3, #2
 8004782:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004786:	4621      	mov	r1, r4
 8004788:	f851 0b04 	ldr.w	r0, [r1], #4
 800478c:	f7ff ffb0 	bl	80046f0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004790:	2301      	movs	r3, #1
 8004792:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004796:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800479a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800479e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80047a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80047b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80047b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80047ba:	2000      	movs	r0, #0
}
 80047bc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80047be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80047c2:	f7ff fead 	bl	8004520 <HAL_TIM_Base_MspInit>
 80047c6:	e7db      	b.n	8004780 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80047c8:	2001      	movs	r0, #1
}
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80047cc:	b340      	cbz	r0, 8004820 <HAL_TIM_PWM_Init+0x54>
{
 80047ce:	b510      	push	{r4, lr}
 80047d0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80047d2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80047d6:	b1f3      	cbz	r3, 8004816 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	2302      	movs	r3, #2
 80047da:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047de:	4621      	mov	r1, r4
 80047e0:	f851 0b04 	ldr.w	r0, [r1], #4
 80047e4:	f7ff ff84 	bl	80046f0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ee:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80047f2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80047f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80047fa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fe:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004806:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800480a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800480e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004812:	2000      	movs	r0, #0
}
 8004814:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004816:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800481a:	f7fc ffd5 	bl	80017c8 <HAL_TIM_PWM_MspInit>
 800481e:	e7db      	b.n	80047d8 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004820:	2001      	movs	r0, #1
}
 8004822:	4770      	bx	lr

08004824 <TIM_OC2_SetConfig>:
{
 8004824:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8004826:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004828:	6a02      	ldr	r2, [r0, #32]
 800482a:	f022 0210 	bic.w	r2, r2, #16
 800482e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004830:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004832:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004834:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004838:	680d      	ldr	r5, [r1, #0]
 800483a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800483e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004842:	688d      	ldr	r5, [r1, #8]
 8004844:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004848:	4d0c      	ldr	r5, [pc, #48]	@ (800487c <TIM_OC2_SetConfig+0x58>)
 800484a:	42a8      	cmp	r0, r5
 800484c:	d006      	beq.n	800485c <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 800484e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004850:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004852:	684a      	ldr	r2, [r1, #4]
 8004854:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004856:	6203      	str	r3, [r0, #32]
}
 8004858:	bc30      	pop	{r4, r5}
 800485a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800485c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004860:	68cd      	ldr	r5, [r1, #12]
 8004862:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004866:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800486a:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800486e:	694d      	ldr	r5, [r1, #20]
 8004870:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004874:	698d      	ldr	r5, [r1, #24]
 8004876:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800487a:	e7e8      	b.n	800484e <TIM_OC2_SetConfig+0x2a>
 800487c:	40012c00 	.word	0x40012c00

08004880 <HAL_TIM_PWM_ConfigChannel>:
{
 8004880:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004882:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004886:	2b01      	cmp	r3, #1
 8004888:	d066      	beq.n	8004958 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800488a:	4604      	mov	r4, r0
 800488c:	460d      	mov	r5, r1
 800488e:	2301      	movs	r3, #1
 8004890:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8004894:	2a0c      	cmp	r2, #12
 8004896:	d85a      	bhi.n	800494e <HAL_TIM_PWM_ConfigChannel+0xce>
 8004898:	e8df f002 	tbb	[pc, r2]
 800489c:	59595907 	.word	0x59595907
 80048a0:	5959591b 	.word	0x5959591b
 80048a4:	59595930 	.word	0x59595930
 80048a8:	44          	.byte	0x44
 80048a9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048aa:	6800      	ldr	r0, [r0, #0]
 80048ac:	f7ff fdbc 	bl	8004428 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048b0:	6822      	ldr	r2, [r4, #0]
 80048b2:	6993      	ldr	r3, [r2, #24]
 80048b4:	f043 0308 	orr.w	r3, r3, #8
 80048b8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048ba:	6822      	ldr	r2, [r4, #0]
 80048bc:	6993      	ldr	r3, [r2, #24]
 80048be:	f023 0304 	bic.w	r3, r3, #4
 80048c2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048c4:	6822      	ldr	r2, [r4, #0]
 80048c6:	6993      	ldr	r3, [r2, #24]
 80048c8:	6929      	ldr	r1, [r5, #16]
 80048ca:	430b      	orrs	r3, r1
 80048cc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80048ce:	2000      	movs	r0, #0
      break;
 80048d0:	e03e      	b.n	8004950 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048d2:	6800      	ldr	r0, [r0, #0]
 80048d4:	f7ff ffa6 	bl	8004824 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	6993      	ldr	r3, [r2, #24]
 80048dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80048e0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048e2:	6822      	ldr	r2, [r4, #0]
 80048e4:	6993      	ldr	r3, [r2, #24]
 80048e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048ea:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048ec:	6822      	ldr	r2, [r4, #0]
 80048ee:	6993      	ldr	r3, [r2, #24]
 80048f0:	6929      	ldr	r1, [r5, #16]
 80048f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80048f6:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80048f8:	2000      	movs	r0, #0
      break;
 80048fa:	e029      	b.n	8004950 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048fc:	6800      	ldr	r0, [r0, #0]
 80048fe:	f7ff fdbd 	bl	800447c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004902:	6822      	ldr	r2, [r4, #0]
 8004904:	69d3      	ldr	r3, [r2, #28]
 8004906:	f043 0308 	orr.w	r3, r3, #8
 800490a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800490c:	6822      	ldr	r2, [r4, #0]
 800490e:	69d3      	ldr	r3, [r2, #28]
 8004910:	f023 0304 	bic.w	r3, r3, #4
 8004914:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004916:	6822      	ldr	r2, [r4, #0]
 8004918:	69d3      	ldr	r3, [r2, #28]
 800491a:	6929      	ldr	r1, [r5, #16]
 800491c:	430b      	orrs	r3, r1
 800491e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004920:	2000      	movs	r0, #0
      break;
 8004922:	e015      	b.n	8004950 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004924:	6800      	ldr	r0, [r0, #0]
 8004926:	f7ff fdd7 	bl	80044d8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800492a:	6822      	ldr	r2, [r4, #0]
 800492c:	69d3      	ldr	r3, [r2, #28]
 800492e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004932:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004934:	6822      	ldr	r2, [r4, #0]
 8004936:	69d3      	ldr	r3, [r2, #28]
 8004938:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800493c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800493e:	6822      	ldr	r2, [r4, #0]
 8004940:	69d3      	ldr	r3, [r2, #28]
 8004942:	6929      	ldr	r1, [r5, #16]
 8004944:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004948:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800494a:	2000      	movs	r0, #0
      break;
 800494c:	e000      	b.n	8004950 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 800494e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004950:	2300      	movs	r3, #0
 8004952:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004956:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004958:	2002      	movs	r0, #2
 800495a:	e7fc      	b.n	8004956 <HAL_TIM_PWM_ConfigChannel+0xd6>

0800495c <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800495c:	f001 011f 	and.w	r1, r1, #31
 8004960:	f04f 0c01 	mov.w	ip, #1
 8004964:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004968:	6a03      	ldr	r3, [r0, #32]
 800496a:	ea23 030c 	bic.w	r3, r3, ip
 800496e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004970:	6a03      	ldr	r3, [r0, #32]
 8004972:	408a      	lsls	r2, r1
 8004974:	4313      	orrs	r3, r2
 8004976:	6203      	str	r3, [r0, #32]
}
 8004978:	4770      	bx	lr
	...

0800497c <HAL_TIM_PWM_Start_IT>:
{
 800497c:	b510      	push	{r4, lr}
 800497e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004980:	4608      	mov	r0, r1
 8004982:	2900      	cmp	r1, #0
 8004984:	d130      	bne.n	80049e8 <HAL_TIM_PWM_Start_IT+0x6c>
 8004986:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800498a:	b2db      	uxtb	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	bf18      	it	ne
 8004990:	2301      	movne	r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	f040 8090 	bne.w	8004ab8 <HAL_TIM_PWM_Start_IT+0x13c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004998:	2800      	cmp	r0, #0
 800499a:	d13e      	bne.n	8004a1a <HAL_TIM_PWM_Start_IT+0x9e>
 800499c:	2302      	movs	r3, #2
 800499e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049a2:	6822      	ldr	r2, [r4, #0]
 80049a4:	68d3      	ldr	r3, [r2, #12]
 80049a6:	f043 0302 	orr.w	r3, r3, #2
 80049aa:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ac:	2201      	movs	r2, #1
 80049ae:	4601      	mov	r1, r0
 80049b0:	6820      	ldr	r0, [r4, #0]
 80049b2:	f7ff ffd3 	bl	800495c <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	4a42      	ldr	r2, [pc, #264]	@ (8004ac4 <HAL_TIM_PWM_Start_IT+0x148>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d06c      	beq.n	8004a98 <HAL_TIM_PWM_Start_IT+0x11c>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	4a40      	ldr	r2, [pc, #256]	@ (8004ac4 <HAL_TIM_PWM_Start_IT+0x148>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d06d      	beq.n	8004aa2 <HAL_TIM_PWM_Start_IT+0x126>
 80049c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ca:	d06a      	beq.n	8004aa2 <HAL_TIM_PWM_Start_IT+0x126>
 80049cc:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d066      	beq.n	8004aa2 <HAL_TIM_PWM_Start_IT+0x126>
 80049d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80049d8:	4293      	cmp	r3, r2
 80049da:	d062      	beq.n	8004aa2 <HAL_TIM_PWM_Start_IT+0x126>
      __HAL_TIM_ENABLE(htim);
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	2000      	movs	r0, #0
 80049e6:	e068      	b.n	8004aba <HAL_TIM_PWM_Start_IT+0x13e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049e8:	2904      	cmp	r1, #4
 80049ea:	d008      	beq.n	80049fe <HAL_TIM_PWM_Start_IT+0x82>
 80049ec:	2908      	cmp	r1, #8
 80049ee:	d00d      	beq.n	8004a0c <HAL_TIM_PWM_Start_IT+0x90>
 80049f0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	bf18      	it	ne
 80049fa:	2301      	movne	r3, #1
 80049fc:	e7c9      	b.n	8004992 <HAL_TIM_PWM_Start_IT+0x16>
 80049fe:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	bf18      	it	ne
 8004a08:	2301      	movne	r3, #1
 8004a0a:	e7c2      	b.n	8004992 <HAL_TIM_PWM_Start_IT+0x16>
 8004a0c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	bf18      	it	ne
 8004a16:	2301      	movne	r3, #1
 8004a18:	e7bb      	b.n	8004992 <HAL_TIM_PWM_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a1a:	2804      	cmp	r0, #4
 8004a1c:	d024      	beq.n	8004a68 <HAL_TIM_PWM_Start_IT+0xec>
 8004a1e:	2808      	cmp	r0, #8
 8004a20:	d02b      	beq.n	8004a7a <HAL_TIM_PWM_Start_IT+0xfe>
 8004a22:	2302      	movs	r3, #2
 8004a24:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 8004a28:	280c      	cmp	r0, #12
 8004a2a:	d847      	bhi.n	8004abc <HAL_TIM_PWM_Start_IT+0x140>
 8004a2c:	a301      	add	r3, pc, #4	@ (adr r3, 8004a34 <HAL_TIM_PWM_Start_IT+0xb8>)
 8004a2e:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	080049a3 	.word	0x080049a3
 8004a38:	08004abd 	.word	0x08004abd
 8004a3c:	08004abd 	.word	0x08004abd
 8004a40:	08004abd 	.word	0x08004abd
 8004a44:	08004a6f 	.word	0x08004a6f
 8004a48:	08004abd 	.word	0x08004abd
 8004a4c:	08004abd 	.word	0x08004abd
 8004a50:	08004abd 	.word	0x08004abd
 8004a54:	08004a81 	.word	0x08004a81
 8004a58:	08004abd 	.word	0x08004abd
 8004a5c:	08004abd 	.word	0x08004abd
 8004a60:	08004abd 	.word	0x08004abd
 8004a64:	08004a8d 	.word	0x08004a8d
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a68:	2302      	movs	r3, #2
 8004a6a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	68d3      	ldr	r3, [r2, #12]
 8004a72:	f043 0304 	orr.w	r3, r3, #4
 8004a76:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004a78:	e798      	b.n	80049ac <HAL_TIM_PWM_Start_IT+0x30>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a80:	6822      	ldr	r2, [r4, #0]
 8004a82:	68d3      	ldr	r3, [r2, #12]
 8004a84:	f043 0308 	orr.w	r3, r3, #8
 8004a88:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004a8a:	e78f      	b.n	80049ac <HAL_TIM_PWM_Start_IT+0x30>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a8c:	6822      	ldr	r2, [r4, #0]
 8004a8e:	68d3      	ldr	r3, [r2, #12]
 8004a90:	f043 0310 	orr.w	r3, r3, #16
 8004a94:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004a96:	e789      	b.n	80049ac <HAL_TIM_PWM_Start_IT+0x30>
      __HAL_TIM_MOE_ENABLE(htim);
 8004a98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a9e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004aa0:	e78d      	b.n	80049be <HAL_TIM_PWM_Start_IT+0x42>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa8:	2a06      	cmp	r2, #6
 8004aaa:	d009      	beq.n	8004ac0 <HAL_TIM_PWM_Start_IT+0x144>
        __HAL_TIM_ENABLE(htim);
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	e000      	b.n	8004aba <HAL_TIM_PWM_Start_IT+0x13e>
    return HAL_ERROR;
 8004ab8:	2001      	movs	r0, #1
}
 8004aba:	bd10      	pop	{r4, pc}
  switch (Channel)
 8004abc:	2001      	movs	r0, #1
 8004abe:	e7fc      	b.n	8004aba <HAL_TIM_PWM_Start_IT+0x13e>
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	e7fa      	b.n	8004aba <HAL_TIM_PWM_Start_IT+0x13e>
 8004ac4:	40012c00 	.word	0x40012c00

08004ac8 <HAL_TIM_PWM_Stop_IT>:
{
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	4605      	mov	r5, r0
 8004acc:	460c      	mov	r4, r1
  switch (Channel)
 8004ace:	290c      	cmp	r1, #12
 8004ad0:	d85f      	bhi.n	8004b92 <HAL_TIM_PWM_Stop_IT+0xca>
 8004ad2:	e8df f001 	tbb	[pc, r1]
 8004ad6:	5e07      	.short	0x5e07
 8004ad8:	5e2a5e5e 	.word	0x5e2a5e5e
 8004adc:	5e305e5e 	.word	0x5e305e5e
 8004ae0:	5e5e      	.short	0x5e5e
 8004ae2:	36          	.byte	0x36
 8004ae3:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004ae4:	6802      	ldr	r2, [r0, #0]
 8004ae6:	68d3      	ldr	r3, [r2, #12]
 8004ae8:	f023 0302 	bic.w	r3, r3, #2
 8004aec:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004aee:	2200      	movs	r2, #0
 8004af0:	4621      	mov	r1, r4
 8004af2:	6828      	ldr	r0, [r5, #0]
 8004af4:	f7ff ff32 	bl	800495c <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	4a27      	ldr	r2, [pc, #156]	@ (8004b98 <HAL_TIM_PWM_Stop_IT+0xd0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d026      	beq.n	8004b4e <HAL_TIM_PWM_Stop_IT+0x86>
    __HAL_TIM_DISABLE(htim);
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	6a19      	ldr	r1, [r3, #32]
 8004b04:	f241 1211 	movw	r2, #4369	@ 0x1111
 8004b08:	4211      	tst	r1, r2
 8004b0a:	d108      	bne.n	8004b1e <HAL_TIM_PWM_Stop_IT+0x56>
 8004b0c:	6a19      	ldr	r1, [r3, #32]
 8004b0e:	f240 4244 	movw	r2, #1092	@ 0x444
 8004b12:	4211      	tst	r1, r2
 8004b14:	d103      	bne.n	8004b1e <HAL_TIM_PWM_Stop_IT+0x56>
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b1e:	bb2c      	cbnz	r4, 8004b6c <HAL_TIM_PWM_Stop_IT+0xa4>
 8004b20:	2301      	movs	r3, #1
 8004b22:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
 8004b26:	2000      	movs	r0, #0
 8004b28:	e034      	b.n	8004b94 <HAL_TIM_PWM_Stop_IT+0xcc>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004b2a:	6802      	ldr	r2, [r0, #0]
 8004b2c:	68d3      	ldr	r3, [r2, #12]
 8004b2e:	f023 0304 	bic.w	r3, r3, #4
 8004b32:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004b34:	e7db      	b.n	8004aee <HAL_TIM_PWM_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004b36:	6802      	ldr	r2, [r0, #0]
 8004b38:	68d3      	ldr	r3, [r2, #12]
 8004b3a:	f023 0308 	bic.w	r3, r3, #8
 8004b3e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004b40:	e7d5      	b.n	8004aee <HAL_TIM_PWM_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004b42:	6802      	ldr	r2, [r0, #0]
 8004b44:	68d3      	ldr	r3, [r2, #12]
 8004b46:	f023 0310 	bic.w	r3, r3, #16
 8004b4a:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004b4c:	e7cf      	b.n	8004aee <HAL_TIM_PWM_Stop_IT+0x26>
      __HAL_TIM_MOE_DISABLE(htim);
 8004b4e:	6a19      	ldr	r1, [r3, #32]
 8004b50:	f241 1211 	movw	r2, #4369	@ 0x1111
 8004b54:	4211      	tst	r1, r2
 8004b56:	d1d3      	bne.n	8004b00 <HAL_TIM_PWM_Stop_IT+0x38>
 8004b58:	6a19      	ldr	r1, [r3, #32]
 8004b5a:	f240 4244 	movw	r2, #1092	@ 0x444
 8004b5e:	4211      	tst	r1, r2
 8004b60:	d1ce      	bne.n	8004b00 <HAL_TIM_PWM_Stop_IT+0x38>
 8004b62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b68:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b6a:	e7c9      	b.n	8004b00 <HAL_TIM_PWM_Stop_IT+0x38>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b6c:	2c04      	cmp	r4, #4
 8004b6e:	d006      	beq.n	8004b7e <HAL_TIM_PWM_Stop_IT+0xb6>
 8004b70:	2c08      	cmp	r4, #8
 8004b72:	d009      	beq.n	8004b88 <HAL_TIM_PWM_Stop_IT+0xc0>
 8004b74:	2301      	movs	r3, #1
 8004b76:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	e00a      	b.n	8004b94 <HAL_TIM_PWM_Stop_IT+0xcc>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f885 303f 	strb.w	r3, [r5, #63]	@ 0x3f
 8004b84:	2000      	movs	r0, #0
 8004b86:	e005      	b.n	8004b94 <HAL_TIM_PWM_Stop_IT+0xcc>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8004b8e:	2000      	movs	r0, #0
 8004b90:	e000      	b.n	8004b94 <HAL_TIM_PWM_Stop_IT+0xcc>
  switch (Channel)
 8004b92:	2001      	movs	r0, #1
}
 8004b94:	bd38      	pop	{r3, r4, r5, pc}
 8004b96:	bf00      	nop
 8004b98:	40012c00 	.word	0x40012c00

08004b9c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b9c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004ba0:	2a01      	cmp	r2, #1
 8004ba2:	d02c      	beq.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8004ba4:	b410      	push	{r4}
 8004ba6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb4:	6802      	ldr	r2, [r0, #0]
 8004bb6:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bba:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bbe:	6808      	ldr	r0, [r1, #0]
 8004bc0:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bc4:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	480e      	ldr	r0, [pc, #56]	@ (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004bca:	4282      	cmp	r2, r0
 8004bcc:	d00a      	beq.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004bce:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004bd2:	d007      	beq.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004bd4:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8004bd8:	4282      	cmp	r2, r0
 8004bda:	d003      	beq.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004bdc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004be0:	4282      	cmp	r2, r0
 8004be2:	d104      	bne.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004be4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004be8:	6849      	ldr	r1, [r1, #4]
 8004bea:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bec:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8004bfa:	bc10      	pop	{r4}
 8004bfc:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004bfe:	2002      	movs	r0, #2
}
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40012c00 	.word	0x40012c00

08004c08 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c08:	4770      	bx	lr

08004c0a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c0a:	4770      	bx	lr

08004c0c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c0c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0e:	f102 030c 	add.w	r3, r2, #12
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	320c      	adds	r2, #12
 8004c1c:	e842 3100 	strex	r1, r3, [r2]
 8004c20:	2900      	cmp	r1, #0
 8004c22:	d1f3      	bne.n	8004c0c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c24:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	f102 0314 	add.w	r3, r2, #20
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	3214      	adds	r2, #20
 8004c34:	e842 3100 	strex	r1, r3, [r2]
 8004c38:	2900      	cmp	r1, #0
 8004c3a:	d1f3      	bne.n	8004c24 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c3c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d005      	beq.n	8004c4e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c42:	2320      	movs	r3, #32
 8004c44:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8004c4c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c4e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	f102 030c 	add.w	r3, r2, #12
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	320c      	adds	r2, #12
 8004c5e:	e842 3100 	strex	r1, r3, [r2]
 8004c62:	2900      	cmp	r1, #0
 8004c64:	d1f3      	bne.n	8004c4e <UART_EndRxTransfer+0x42>
 8004c66:	e7ec      	b.n	8004c42 <UART_EndRxTransfer+0x36>

08004c68 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c68:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b21      	cmp	r3, #33	@ 0x21
 8004c70:	d001      	beq.n	8004c76 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004c72:	2002      	movs	r0, #2
  }
}
 8004c74:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c76:	6883      	ldr	r3, [r0, #8]
 8004c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7c:	d017      	beq.n	8004cae <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c7e:	6a03      	ldr	r3, [r0, #32]
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	6202      	str	r2, [r0, #32]
 8004c84:	781a      	ldrb	r2, [r3, #0]
 8004c86:	6803      	ldr	r3, [r0, #0]
 8004c88:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004c8a:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8004c94:	b94b      	cbnz	r3, 8004caa <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c96:	6802      	ldr	r2, [r0, #0]
 8004c98:	68d3      	ldr	r3, [r2, #12]
 8004c9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c9e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ca0:	6802      	ldr	r2, [r0, #0]
 8004ca2:	68d3      	ldr	r3, [r2, #12]
 8004ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ca8:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8004caa:	2000      	movs	r0, #0
 8004cac:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cae:	6903      	ldr	r3, [r0, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e4      	bne.n	8004c7e <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cb4:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	6802      	ldr	r2, [r0, #0]
 8004cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cbe:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004cc0:	6a03      	ldr	r3, [r0, #32]
 8004cc2:	3302      	adds	r3, #2
 8004cc4:	6203      	str	r3, [r0, #32]
 8004cc6:	e7e0      	b.n	8004c8a <UART_Transmit_IT+0x22>

08004cc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ccc:	6802      	ldr	r2, [r0, #0]
 8004cce:	6913      	ldr	r3, [r2, #16]
 8004cd0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004cd4:	68c1      	ldr	r1, [r0, #12]
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cda:	6883      	ldr	r3, [r0, #8]
 8004cdc:	6902      	ldr	r2, [r0, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	6942      	ldr	r2, [r0, #20]
 8004ce2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004ce4:	6801      	ldr	r1, [r0, #0]
 8004ce6:	68cb      	ldr	r3, [r1, #12]
 8004ce8:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004cec:	f023 030c 	bic.w	r3, r3, #12
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cf4:	6802      	ldr	r2, [r0, #0]
 8004cf6:	6953      	ldr	r3, [r2, #20]
 8004cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cfc:	6981      	ldr	r1, [r0, #24]
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8004d02:	6802      	ldr	r2, [r0, #0]
 8004d04:	4b13      	ldr	r3, [pc, #76]	@ (8004d54 <UART_SetConfig+0x8c>)
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d020      	beq.n	8004d4c <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d0a:	f7ff fb4f 	bl	80043ac <HAL_RCC_GetPCLK1Freq>
 8004d0e:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004d14:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004d18:	6863      	ldr	r3, [r4, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d20:	480d      	ldr	r0, [pc, #52]	@ (8004d58 <UART_SetConfig+0x90>)
 8004d22:	fba0 3102 	umull	r3, r1, r0, r2
 8004d26:	0949      	lsrs	r1, r1, #5
 8004d28:	2364      	movs	r3, #100	@ 0x64
 8004d2a:	fb03 2311 	mls	r3, r3, r1, r2
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	3332      	adds	r3, #50	@ 0x32
 8004d32:	fba0 0303 	umull	r0, r3, r0, r3
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d3c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	6821      	ldr	r1, [r4, #0]
 8004d46:	4413      	add	r3, r2
 8004d48:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d4a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d4c:	f7ff fb3e 	bl	80043cc <HAL_RCC_GetPCLK2Freq>
 8004d50:	4602      	mov	r2, r0
 8004d52:	e7dd      	b.n	8004d10 <UART_SetConfig+0x48>
 8004d54:	40013800 	.word	0x40013800
 8004d58:	51eb851f 	.word	0x51eb851f

08004d5c <UART_WaitOnFlagUntilTimeout>:
{
 8004d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d60:	b083      	sub	sp, #12
 8004d62:	4605      	mov	r5, r0
 8004d64:	460e      	mov	r6, r1
 8004d66:	4617      	mov	r7, r2
 8004d68:	4699      	mov	r9, r3
 8004d6a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6e:	682b      	ldr	r3, [r5, #0]
 8004d70:	681c      	ldr	r4, [r3, #0]
 8004d72:	ea36 0404 	bics.w	r4, r6, r4
 8004d76:	bf0c      	ite	eq
 8004d78:	2401      	moveq	r4, #1
 8004d7a:	2400      	movne	r4, #0
 8004d7c:	42bc      	cmp	r4, r7
 8004d7e:	d128      	bne.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8004d80:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004d84:	d0f3      	beq.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d86:	f7fc fe9d 	bl	8001ac4 <HAL_GetTick>
 8004d8a:	eba0 0009 	sub.w	r0, r0, r9
 8004d8e:	4540      	cmp	r0, r8
 8004d90:	d823      	bhi.n	8004dda <UART_WaitOnFlagUntilTimeout+0x7e>
 8004d92:	f1b8 0f00 	cmp.w	r8, #0
 8004d96:	d022      	beq.n	8004dde <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	f012 0f04 	tst.w	r2, #4
 8004da0:	d0e5      	beq.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x12>
 8004da2:	2e80      	cmp	r6, #128	@ 0x80
 8004da4:	d0e3      	beq.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x12>
 8004da6:	2e40      	cmp	r6, #64	@ 0x40
 8004da8:	d0e1      	beq.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	f012 0f08 	tst.w	r2, #8
 8004db0:	d0dd      	beq.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004db2:	2400      	movs	r4, #0
 8004db4:	9401      	str	r4, [sp, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	9201      	str	r2, [sp, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f7ff ff23 	bl	8004c0c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dc6:	2308      	movs	r3, #8
 8004dc8:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8004dca:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8004dce:	2001      	movs	r0, #1
 8004dd0:	e000      	b.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8004dd2:	2000      	movs	r0, #0
}
 8004dd4:	b003      	add	sp, #12
 8004dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8004dda:	2003      	movs	r0, #3
 8004ddc:	e7fa      	b.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0x78>
 8004dde:	2003      	movs	r0, #3
 8004de0:	e7f8      	b.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0x78>

08004de2 <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d031      	beq.n	8004e4a <HAL_HalfDuplex_Init+0x68>
{
 8004de6:	b510      	push	{r4, lr}
 8004de8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004dea:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004dee:	b33b      	cbz	r3, 8004e40 <HAL_HalfDuplex_Init+0x5e>
  huart->gState = HAL_UART_STATE_BUSY;
 8004df0:	2324      	movs	r3, #36	@ 0x24
 8004df2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004df6:	6822      	ldr	r2, [r4, #0]
 8004df8:	68d3      	ldr	r3, [r2, #12]
 8004dfa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dfe:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004e00:	4620      	mov	r0, r4
 8004e02:	f7ff ff61 	bl	8004cc8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e06:	6822      	ldr	r2, [r4, #0]
 8004e08:	6913      	ldr	r3, [r2, #16]
 8004e0a:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004e0e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004e10:	6822      	ldr	r2, [r4, #0]
 8004e12:	6953      	ldr	r3, [r2, #20]
 8004e14:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004e18:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004e1a:	6822      	ldr	r2, [r4, #0]
 8004e1c:	6953      	ldr	r3, [r2, #20]
 8004e1e:	f043 0308 	orr.w	r3, r3, #8
 8004e22:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004e24:	6822      	ldr	r2, [r4, #0]
 8004e26:	68d3      	ldr	r3, [r2, #12]
 8004e28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004e2c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2e:	2000      	movs	r0, #0
 8004e30:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e32:	2320      	movs	r3, #32
 8004e34:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e3c:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004e3e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004e40:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004e44:	f7fc fd04 	bl	8001850 <HAL_UART_MspInit>
 8004e48:	e7d2      	b.n	8004df0 <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 8004e4a:	2001      	movs	r0, #1
}
 8004e4c:	4770      	bx	lr

08004e4e <HAL_UART_Transmit>:
{
 8004e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004e56:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d156      	bne.n	8004f0e <HAL_UART_Transmit+0xc0>
 8004e60:	4604      	mov	r4, r0
 8004e62:	460d      	mov	r5, r1
 8004e64:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004e66:	2900      	cmp	r1, #0
 8004e68:	d055      	beq.n	8004f16 <HAL_UART_Transmit+0xc8>
 8004e6a:	b90a      	cbnz	r2, 8004e70 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8004e6c:	2001      	movs	r0, #1
 8004e6e:	e04f      	b.n	8004f10 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e70:	2300      	movs	r3, #0
 8004e72:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e74:	2321      	movs	r3, #33	@ 0x21
 8004e76:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8004e7a:	f7fc fe23 	bl	8001ac4 <HAL_GetTick>
 8004e7e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004e80:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e84:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e88:	68a3      	ldr	r3, [r4, #8]
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e8e:	d002      	beq.n	8004e96 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8004e90:	f04f 0800 	mov.w	r8, #0
 8004e94:	e014      	b.n	8004ec0 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e96:	6923      	ldr	r3, [r4, #16]
 8004e98:	b32b      	cbz	r3, 8004ee6 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8004e9a:	f04f 0800 	mov.w	r8, #0
 8004e9e:	e00f      	b.n	8004ec0 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8004ea0:	2320      	movs	r3, #32
 8004ea2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8004ea6:	2003      	movs	r0, #3
 8004ea8:	e032      	b.n	8004f10 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eaa:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004eae:	6822      	ldr	r2, [r4, #0]
 8004eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004eb6:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8004eb8:	b292      	uxth	r2, r2
 8004eba:	3a01      	subs	r2, #1
 8004ebc:	b292      	uxth	r2, r2
 8004ebe:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ec0:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	b193      	cbz	r3, 8004eec <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ec6:	9600      	str	r6, [sp, #0]
 8004ec8:	463b      	mov	r3, r7
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2180      	movs	r1, #128	@ 0x80
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f7ff ff44 	bl	8004d5c <UART_WaitOnFlagUntilTimeout>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d1e3      	bne.n	8004ea0 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8004ed8:	2d00      	cmp	r5, #0
 8004eda:	d0e6      	beq.n	8004eaa <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004edc:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ee4:	e7e7      	b.n	8004eb6 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8004ee6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004ee8:	2500      	movs	r5, #0
 8004eea:	e7e9      	b.n	8004ec0 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eec:	9600      	str	r6, [sp, #0]
 8004eee:	463b      	mov	r3, r7
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2140      	movs	r1, #64	@ 0x40
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f7ff ff31 	bl	8004d5c <UART_WaitOnFlagUntilTimeout>
 8004efa:	b918      	cbnz	r0, 8004f04 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8004efc:	2320      	movs	r3, #32
 8004efe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8004f02:	e005      	b.n	8004f10 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8004f04:	2320      	movs	r3, #32
 8004f06:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8004f0a:	2003      	movs	r0, #3
 8004f0c:	e000      	b.n	8004f10 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8004f0e:	2002      	movs	r0, #2
}
 8004f10:	b002      	add	sp, #8
 8004f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004f16:	2001      	movs	r0, #1
 8004f18:	e7fa      	b.n	8004f10 <HAL_UART_Transmit+0xc2>

08004f1a <HAL_UART_Receive>:
{
 8004f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f22:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d159      	bne.n	8004fe0 <HAL_UART_Receive+0xc6>
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	460d      	mov	r5, r1
 8004f30:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004f32:	2900      	cmp	r1, #0
 8004f34:	d058      	beq.n	8004fe8 <HAL_UART_Receive+0xce>
 8004f36:	b90a      	cbnz	r2, 8004f3c <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 8004f38:	2001      	movs	r0, #1
 8004f3a:	e052      	b.n	8004fe2 <HAL_UART_Receive+0xc8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f40:	2222      	movs	r2, #34	@ 0x22
 8004f42:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f46:	6303      	str	r3, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 8004f48:	f7fc fdbc 	bl	8001ac4 <HAL_GetTick>
 8004f4c:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8004f4e:	f8a4 802c 	strh.w	r8, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004f52:	f8a4 802e 	strh.w	r8, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f56:	68a3      	ldr	r3, [r4, #8]
 8004f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f5c:	d002      	beq.n	8004f64 <HAL_UART_Receive+0x4a>
      pdata16bits = NULL;
 8004f5e:	f04f 0800 	mov.w	r8, #0
 8004f62:	e01c      	b.n	8004f9e <HAL_UART_Receive+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f64:	6923      	ldr	r3, [r4, #16]
 8004f66:	b113      	cbz	r3, 8004f6e <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 8004f68:	f04f 0800 	mov.w	r8, #0
 8004f6c:	e017      	b.n	8004f9e <HAL_UART_Receive+0x84>
      pdata16bits = (uint16_t *) pData;
 8004f6e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004f70:	2500      	movs	r5, #0
 8004f72:	e014      	b.n	8004f9e <HAL_UART_Receive+0x84>
        huart->RxState = HAL_UART_STATE_READY;
 8004f74:	2320      	movs	r3, #32
 8004f76:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        return HAL_TIMEOUT;
 8004f7a:	2003      	movs	r0, #3
 8004f7c:	e031      	b.n	8004fe2 <HAL_UART_Receive+0xc8>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f86:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 8004f8a:	e003      	b.n	8004f94 <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8004f92:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8004f94:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 8004f96:	b292      	uxth	r2, r2
 8004f98:	3a01      	subs	r2, #1
 8004f9a:	b292      	uxth	r2, r2
 8004f9c:	85e2      	strh	r2, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004f9e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	b1c3      	cbz	r3, 8004fd6 <HAL_UART_Receive+0xbc>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004fa4:	9600      	str	r6, [sp, #0]
 8004fa6:	463b      	mov	r3, r7
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2120      	movs	r1, #32
 8004fac:	4620      	mov	r0, r4
 8004fae:	f7ff fed5 	bl	8004d5c <UART_WaitOnFlagUntilTimeout>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d1de      	bne.n	8004f74 <HAL_UART_Receive+0x5a>
      if (pdata8bits == NULL)
 8004fb6:	2d00      	cmp	r5, #0
 8004fb8:	d0e1      	beq.n	8004f7e <HAL_UART_Receive+0x64>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fba:	68a3      	ldr	r3, [r4, #8]
 8004fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fc0:	d0e4      	beq.n	8004f8c <HAL_UART_Receive+0x72>
 8004fc2:	b913      	cbnz	r3, 8004fca <HAL_UART_Receive+0xb0>
 8004fc4:	6923      	ldr	r3, [r4, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0e0      	beq.n	8004f8c <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fd2:	702b      	strb	r3, [r5, #0]
 8004fd4:	e7dd      	b.n	8004f92 <HAL_UART_Receive+0x78>
    huart->RxState = HAL_UART_STATE_READY;
 8004fd6:	2320      	movs	r3, #32
 8004fd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 8004fdc:	2000      	movs	r0, #0
 8004fde:	e000      	b.n	8004fe2 <HAL_UART_Receive+0xc8>
    return HAL_BUSY;
 8004fe0:	2002      	movs	r0, #2
}
 8004fe2:	b002      	add	sp, #8
 8004fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004fe8:	2001      	movs	r0, #1
 8004fea:	e7fa      	b.n	8004fe2 <HAL_UART_Receive+0xc8>

08004fec <HAL_UART_TxCpltCallback>:
}
 8004fec:	4770      	bx	lr

08004fee <UART_EndTransmit_IT>:
{
 8004fee:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ff0:	6801      	ldr	r1, [r0, #0]
 8004ff2:	68ca      	ldr	r2, [r1, #12]
 8004ff4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ff8:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8005000:	f7ff fff4 	bl	8004fec <HAL_UART_TxCpltCallback>
}
 8005004:	2000      	movs	r0, #0
 8005006:	bd08      	pop	{r3, pc}

08005008 <HAL_UART_RxCpltCallback>:
}
 8005008:	4770      	bx	lr

0800500a <HAL_UART_ErrorCallback>:
}
 800500a:	4770      	bx	lr

0800500c <UART_DMAAbortOnError>:
{
 800500c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800500e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8005010:	2300      	movs	r3, #0
 8005012:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005014:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8005016:	f7ff fff8 	bl	800500a <HAL_UART_ErrorCallback>
}
 800501a:	bd08      	pop	{r3, pc}

0800501c <HAL_UARTEx_RxEventCallback>:
}
 800501c:	4770      	bx	lr

0800501e <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800501e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b22      	cmp	r3, #34	@ 0x22
 8005026:	d169      	bne.n	80050fc <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005028:	6883      	ldr	r3, [r0, #8]
 800502a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800502e:	d04f      	beq.n	80050d0 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005030:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005036:	d004      	beq.n	8005042 <UART_Receive_IT+0x24>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d156      	bne.n	80050ea <UART_Receive_IT+0xcc>
 800503c:	6903      	ldr	r3, [r0, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d153      	bne.n	80050ea <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005042:	6803      	ldr	r3, [r0, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8005048:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800504a:	3301      	adds	r3, #1
 800504c:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800504e:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8005050:	b29b      	uxth	r3, r3
 8005052:	3b01      	subs	r3, #1
 8005054:	b29b      	uxth	r3, r3
 8005056:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8005058:	2b00      	cmp	r3, #0
 800505a:	d151      	bne.n	8005100 <UART_Receive_IT+0xe2>
{
 800505c:	b500      	push	{lr}
 800505e:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005060:	6802      	ldr	r2, [r0, #0]
 8005062:	68d3      	ldr	r3, [r2, #12]
 8005064:	f023 0320 	bic.w	r3, r3, #32
 8005068:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800506a:	6802      	ldr	r2, [r0, #0]
 800506c:	68d3      	ldr	r3, [r2, #12]
 800506e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005072:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005074:	6802      	ldr	r2, [r0, #0]
 8005076:	6953      	ldr	r3, [r2, #20]
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800507e:	2320      	movs	r3, #32
 8005080:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005084:	2300      	movs	r3, #0
 8005086:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005088:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800508a:	2b01      	cmp	r3, #1
 800508c:	d133      	bne.n	80050f6 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508e:	2300      	movs	r3, #0
 8005090:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005092:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	f102 030c 	add.w	r3, r2, #12
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	320c      	adds	r2, #12
 80050a2:	e842 3100 	strex	r1, r3, [r2]
 80050a6:	2900      	cmp	r1, #0
 80050a8:	d1f3      	bne.n	8005092 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050aa:	6803      	ldr	r3, [r0, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	f012 0f10 	tst.w	r2, #16
 80050b2:	d006      	beq.n	80050c2 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050b4:	2200      	movs	r2, #0
 80050b6:	9201      	str	r2, [sp, #4]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	9201      	str	r2, [sp, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050c2:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80050c4:	f7ff ffaa 	bl	800501c <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80050c8:	2000      	movs	r0, #0
}
 80050ca:	b003      	add	sp, #12
 80050cc:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d0:	6902      	ldr	r2, [r0, #16]
 80050d2:	2a00      	cmp	r2, #0
 80050d4:	d1ac      	bne.n	8005030 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050d6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050d8:	6803      	ldr	r3, [r0, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80050e2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80050e4:	3302      	adds	r3, #2
 80050e6:	6283      	str	r3, [r0, #40]	@ 0x28
 80050e8:	e7b1      	b.n	800504e <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050ea:	6803      	ldr	r3, [r0, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f2:	7013      	strb	r3, [r2, #0]
 80050f4:	e7a8      	b.n	8005048 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 80050f6:	f7ff ff87 	bl	8005008 <HAL_UART_RxCpltCallback>
 80050fa:	e7e5      	b.n	80050c8 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 80050fc:	2002      	movs	r0, #2
 80050fe:	4770      	bx	lr
    return HAL_OK;
 8005100:	2000      	movs	r0, #0
}
 8005102:	4770      	bx	lr

08005104 <HAL_UART_IRQHandler>:
{
 8005104:	b510      	push	{r4, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800510a:	6802      	ldr	r2, [r0, #0]
 800510c:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800510e:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005110:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8005112:	f013 0f0f 	tst.w	r3, #15
 8005116:	d109      	bne.n	800512c <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005118:	f013 0f20 	tst.w	r3, #32
 800511c:	d00c      	beq.n	8005138 <HAL_UART_IRQHandler+0x34>
 800511e:	f010 0f20 	tst.w	r0, #32
 8005122:	d009      	beq.n	8005138 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8005124:	4620      	mov	r0, r4
 8005126:	f7ff ff7a 	bl	800501e <UART_Receive_IT>
      return;
 800512a:	e016      	b.n	800515a <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800512c:	f011 0101 	ands.w	r1, r1, #1
 8005130:	d115      	bne.n	800515e <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005132:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8005136:	d112      	bne.n	800515e <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005138:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800513a:	2901      	cmp	r1, #1
 800513c:	d079      	beq.n	8005232 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800513e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005142:	d003      	beq.n	800514c <HAL_UART_IRQHandler+0x48>
 8005144:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8005148:	f040 8113 	bne.w	8005372 <HAL_UART_IRQHandler+0x26e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800514c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005150:	d003      	beq.n	800515a <HAL_UART_IRQHandler+0x56>
 8005152:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8005156:	f040 8110 	bne.w	800537a <HAL_UART_IRQHandler+0x276>
}
 800515a:	b002      	add	sp, #8
 800515c:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800515e:	f013 0f01 	tst.w	r3, #1
 8005162:	d006      	beq.n	8005172 <HAL_UART_IRQHandler+0x6e>
 8005164:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8005168:	d003      	beq.n	8005172 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800516a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800516c:	f042 0201 	orr.w	r2, r2, #1
 8005170:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005172:	f013 0f04 	tst.w	r3, #4
 8005176:	d004      	beq.n	8005182 <HAL_UART_IRQHandler+0x7e>
 8005178:	b119      	cbz	r1, 8005182 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800517a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800517c:	f042 0202 	orr.w	r2, r2, #2
 8005180:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005182:	f013 0f02 	tst.w	r3, #2
 8005186:	d004      	beq.n	8005192 <HAL_UART_IRQHandler+0x8e>
 8005188:	b119      	cbz	r1, 8005192 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800518a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800518c:	f042 0204 	orr.w	r2, r2, #4
 8005190:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005192:	f013 0f08 	tst.w	r3, #8
 8005196:	d007      	beq.n	80051a8 <HAL_UART_IRQHandler+0xa4>
 8005198:	f010 0f20 	tst.w	r0, #32
 800519c:	d100      	bne.n	80051a0 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800519e:	b119      	cbz	r1, 80051a8 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051a0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80051a2:	f042 0208 	orr.w	r2, r2, #8
 80051a6:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051a8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80051aa:	2a00      	cmp	r2, #0
 80051ac:	d0d5      	beq.n	800515a <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051ae:	f013 0f20 	tst.w	r3, #32
 80051b2:	d002      	beq.n	80051ba <HAL_UART_IRQHandler+0xb6>
 80051b4:	f010 0f20 	tst.w	r0, #32
 80051b8:	d129      	bne.n	800520e <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051c2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80051c4:	f012 0f08 	tst.w	r2, #8
 80051c8:	d100      	bne.n	80051cc <HAL_UART_IRQHandler+0xc8>
 80051ca:	b363      	cbz	r3, 8005226 <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 80051cc:	4620      	mov	r0, r4
 80051ce:	f7ff fd1d 	bl	8004c0c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80051da:	d020      	beq.n	800521e <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051dc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	f102 0314 	add.w	r3, r2, #20
 80051e2:	e853 3f00 	ldrex	r3, [r3]
 80051e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	3214      	adds	r2, #20
 80051ec:	e842 3100 	strex	r1, r3, [r2]
 80051f0:	2900      	cmp	r1, #0
 80051f2:	d1f3      	bne.n	80051dc <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 80051f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80051f6:	b173      	cbz	r3, 8005216 <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051f8:	4a62      	ldr	r2, [pc, #392]	@ (8005384 <HAL_UART_IRQHandler+0x280>)
 80051fa:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051fc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80051fe:	f7fc fd19 	bl	8001c34 <HAL_DMA_Abort_IT>
 8005202:	2800      	cmp	r0, #0
 8005204:	d0a9      	beq.n	800515a <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005206:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005208:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800520a:	4798      	blx	r3
 800520c:	e7a5      	b.n	800515a <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 800520e:	4620      	mov	r0, r4
 8005210:	f7ff ff05 	bl	800501e <UART_Receive_IT>
 8005214:	e7d1      	b.n	80051ba <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 8005216:	4620      	mov	r0, r4
 8005218:	f7ff fef7 	bl	800500a <HAL_UART_ErrorCallback>
 800521c:	e79d      	b.n	800515a <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 800521e:	4620      	mov	r0, r4
 8005220:	f7ff fef3 	bl	800500a <HAL_UART_ErrorCallback>
 8005224:	e799      	b.n	800515a <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 8005226:	4620      	mov	r0, r4
 8005228:	f7ff feef 	bl	800500a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522c:	2300      	movs	r3, #0
 800522e:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8005230:	e793      	b.n	800515a <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005232:	f013 0f10 	tst.w	r3, #16
 8005236:	d082      	beq.n	800513e <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005238:	f010 0f10 	tst.w	r0, #16
 800523c:	f43f af7f 	beq.w	800513e <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005240:	2300      	movs	r3, #0
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	6813      	ldr	r3, [r2, #0]
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	6853      	ldr	r3, [r2, #4]
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800524e:	6953      	ldr	r3, [r2, #20]
 8005250:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005254:	d051      	beq.n	80052fa <HAL_UART_IRQHandler+0x1f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005256:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005258:	6813      	ldr	r3, [r2, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800525e:	2b00      	cmp	r3, #0
 8005260:	f43f af7b 	beq.w	800515a <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005264:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8005266:	4299      	cmp	r1, r3
 8005268:	f67f af77 	bls.w	800515a <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 800526c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800526e:	6993      	ldr	r3, [r2, #24]
 8005270:	2b20      	cmp	r3, #32
 8005272:	d037      	beq.n	80052e4 <HAL_UART_IRQHandler+0x1e0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005274:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	f102 030c 	add.w	r3, r2, #12
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	320c      	adds	r2, #12
 8005284:	e842 3100 	strex	r1, r3, [r2]
 8005288:	2900      	cmp	r1, #0
 800528a:	d1f3      	bne.n	8005274 <HAL_UART_IRQHandler+0x170>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	f102 0314 	add.w	r3, r2, #20
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	3214      	adds	r2, #20
 800529c:	e842 3100 	strex	r1, r3, [r2]
 80052a0:	2900      	cmp	r1, #0
 80052a2:	d1f3      	bne.n	800528c <HAL_UART_IRQHandler+0x188>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a6:	f102 0314 	add.w	r3, r2, #20
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	3214      	adds	r2, #20
 80052b4:	e842 3100 	strex	r1, r3, [r2]
 80052b8:	2900      	cmp	r1, #0
 80052ba:	d1f3      	bne.n	80052a4 <HAL_UART_IRQHandler+0x1a0>
          huart->RxState = HAL_UART_STATE_READY;
 80052bc:	2320      	movs	r3, #32
 80052be:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c2:	2300      	movs	r3, #0
 80052c4:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	f102 030c 	add.w	r3, r2, #12
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	320c      	adds	r2, #12
 80052d6:	e842 3100 	strex	r1, r3, [r2]
 80052da:	2900      	cmp	r1, #0
 80052dc:	d1f3      	bne.n	80052c6 <HAL_UART_IRQHandler+0x1c2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052de:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80052e0:	f7fc fc84 	bl	8001bec <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052e4:	2302      	movs	r3, #2
 80052e6:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052e8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80052ea:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	1ac9      	subs	r1, r1, r3
 80052f0:	b289      	uxth	r1, r1
 80052f2:	4620      	mov	r0, r4
 80052f4:	f7ff fe92 	bl	800501c <HAL_UARTEx_RxEventCallback>
      return;
 80052f8:	e72f      	b.n	800515a <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052fa:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80052fc:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80052fe:	b29b      	uxth	r3, r3
 8005300:	1ac9      	subs	r1, r1, r3
 8005302:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005304:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	f43f af26 	beq.w	800515a <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 800530e:	2900      	cmp	r1, #0
 8005310:	f43f af23 	beq.w	800515a <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005314:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	f102 030c 	add.w	r3, r2, #12
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	320c      	adds	r2, #12
 8005324:	e842 3000 	strex	r0, r3, [r2]
 8005328:	2800      	cmp	r0, #0
 800532a:	d1f3      	bne.n	8005314 <HAL_UART_IRQHandler+0x210>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	f102 0314 	add.w	r3, r2, #20
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	3214      	adds	r2, #20
 800533c:	e842 3000 	strex	r0, r3, [r2]
 8005340:	2800      	cmp	r0, #0
 8005342:	d1f3      	bne.n	800532c <HAL_UART_IRQHandler+0x228>
        huart->RxState = HAL_UART_STATE_READY;
 8005344:	2320      	movs	r3, #32
 8005346:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534a:	2300      	movs	r3, #0
 800534c:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800534e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	f102 030c 	add.w	r3, r2, #12
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535c:	320c      	adds	r2, #12
 800535e:	e842 3000 	strex	r0, r3, [r2]
 8005362:	2800      	cmp	r0, #0
 8005364:	d1f3      	bne.n	800534e <HAL_UART_IRQHandler+0x24a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005366:	2302      	movs	r3, #2
 8005368:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800536a:	4620      	mov	r0, r4
 800536c:	f7ff fe56 	bl	800501c <HAL_UARTEx_RxEventCallback>
      return;
 8005370:	e6f3      	b.n	800515a <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8005372:	4620      	mov	r0, r4
 8005374:	f7ff fc78 	bl	8004c68 <UART_Transmit_IT>
    return;
 8005378:	e6ef      	b.n	800515a <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 800537a:	4620      	mov	r0, r4
 800537c:	f7ff fe37 	bl	8004fee <UART_EndTransmit_IT>
    return;
 8005380:	e6eb      	b.n	800515a <HAL_UART_IRQHandler+0x56>
 8005382:	bf00      	nop
 8005384:	0800500d 	.word	0x0800500d

08005388 <HAL_HalfDuplex_EnableTransmitter>:
  __HAL_LOCK(huart);
 8005388:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800538c:	2b01      	cmp	r3, #1
 800538e:	d014      	beq.n	80053ba <HAL_HalfDuplex_EnableTransmitter+0x32>
 8005390:	2301      	movs	r3, #1
 8005392:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_BUSY;
 8005396:	2324      	movs	r3, #36	@ 0x24
 8005398:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  tmpreg = huart->Instance->CR1;
 800539c:	6802      	ldr	r2, [r0, #0]
 800539e:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80053a0:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_TE;
 80053a4:	f043 0308 	orr.w	r3, r3, #8
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80053a8:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80053aa:	2320      	movs	r3, #32
 80053ac:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UNLOCK(huart);
 80053b0:	2300      	movs	r3, #0
 80053b2:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  return HAL_OK;
 80053b6:	4618      	mov	r0, r3
 80053b8:	4770      	bx	lr
  __HAL_LOCK(huart);
 80053ba:	2002      	movs	r0, #2
}
 80053bc:	4770      	bx	lr

080053be <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 80053be:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d014      	beq.n	80053f0 <HAL_HalfDuplex_EnableReceiver+0x32>
 80053c6:	2301      	movs	r3, #1
 80053c8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_BUSY;
 80053cc:	2324      	movs	r3, #36	@ 0x24
 80053ce:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  tmpreg = huart->Instance->CR1;
 80053d2:	6802      	ldr	r2, [r0, #0]
 80053d4:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80053d6:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 80053da:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80053de:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80053e0:	2320      	movs	r3, #32
 80053e2:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UNLOCK(huart);
 80053e6:	2300      	movs	r3, #0
 80053e8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  return HAL_OK;
 80053ec:	4618      	mov	r0, r3
 80053ee:	4770      	bx	lr
  __HAL_LOCK(huart);
 80053f0:	2002      	movs	r0, #2
}
 80053f2:	4770      	bx	lr

080053f4 <AS5600_GetRawAngle>:
    }

    return status;
}

HAL_StatusTypeDef AS5600_GetRawAngle(AS5600_TypeDef *const a, uint16_t *const angle) {
 80053f4:	b510      	push	{r4, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	460c      	mov	r4, r1
    HAL_StatusTypeDef status = HAL_OK;
    uint8_t data[2] = {0};
 80053fa:	2300      	movs	r3, #0
 80053fc:	f8ad 3014 	strh.w	r3, [sp, #20]
    status = HAL_I2C_Mem_Read(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_RAW_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, 100);
 8005400:	2364      	movs	r3, #100	@ 0x64
 8005402:	9302      	str	r3, [sp, #8]
 8005404:	2302      	movs	r3, #2
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	ab05      	add	r3, sp, #20
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	2301      	movs	r3, #1
 800540e:	220c      	movs	r2, #12
 8005410:	7901      	ldrb	r1, [r0, #4]
 8005412:	6800      	ldr	r0, [r0, #0]
 8005414:	f7fd fc14 	bl	8002c40 <HAL_I2C_Mem_Read>
    if (status != HAL_OK) {
 8005418:	b100      	cbz	r0, 800541c <AS5600_GetRawAngle+0x28>
        status = HAL_ERROR;
 800541a:	2001      	movs	r0, #1
    }
    *angle = ((data[0] << 8) | data[1]);
 800541c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8005420:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8005424:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005428:	8023      	strh	r3, [r4, #0]
    return status;
}
 800542a:	b006      	add	sp, #24
 800542c:	bd10      	pop	{r4, pc}

0800542e <AS5600_GetMagnetStatus>:
    *angle = ((data[0] << 8) | data[1]);

    return status;
}

HAL_StatusTypeDef AS5600_GetMagnetStatus(AS5600_TypeDef *const a, uint8_t *const stat) {
 800542e:	b500      	push	{lr}
 8005430:	b085      	sub	sp, #20
    HAL_StatusTypeDef status = HAL_OK;
    if(HAL_I2C_Mem_Read(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_STATUS,
 8005432:	230a      	movs	r3, #10
 8005434:	9302      	str	r3, [sp, #8]
 8005436:	2301      	movs	r3, #1
 8005438:	9301      	str	r3, [sp, #4]
 800543a:	9100      	str	r1, [sp, #0]
 800543c:	220b      	movs	r2, #11
 800543e:	7901      	ldrb	r1, [r0, #4]
 8005440:	6800      	ldr	r0, [r0, #0]
 8005442:	f7fd fbfd 	bl	8002c40 <HAL_I2C_Mem_Read>
 8005446:	b100      	cbz	r0, 800544a <AS5600_GetMagnetStatus+0x1c>
            I2C_MEMADD_SIZE_8BIT, stat, 1, 10) != HAL_OK){
    	status = HAL_ERROR;
 8005448:	2001      	movs	r0, #1
    }
    return status;
}
 800544a:	b005      	add	sp, #20
 800544c:	f85d fb04 	ldr.w	pc, [sp], #4

08005450 <AS5600_Init>:
AS5600Init_StatusTypedef AS5600_Init(AS5600_TypeDef *a) {
 8005450:	b510      	push	{r4, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	4604      	mov	r4, r0
    uint8_t mag_status = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	f88d 3017 	strb.w	r3, [sp, #23]
    if (!(a->PositiveRotationDirection)) {
 800545c:	7b83      	ldrb	r3, [r0, #14]
 800545e:	b90b      	cbnz	r3, 8005464 <AS5600_Init+0x14>
        a->PositiveRotationDirection = AS5600_DIR_CW;
 8005460:	2301      	movs	r3, #1
 8005462:	7383      	strb	r3, [r0, #14]
    if (!(a->LowPowerMode)) {
 8005464:	7be3      	ldrb	r3, [r4, #15]
 8005466:	b90b      	cbnz	r3, 800546c <AS5600_Init+0x1c>
        a->LowPowerMode = AS5600_POWER_MODE_DEFAULT;
 8005468:	2301      	movs	r3, #1
 800546a:	73e3      	strb	r3, [r4, #15]
    if (!(a->Hysteresis)) {
 800546c:	7c23      	ldrb	r3, [r4, #16]
 800546e:	b90b      	cbnz	r3, 8005474 <AS5600_Init+0x24>
        a->Hysteresis = AS5600_HYSTERESIS_DEFAULT;
 8005470:	2301      	movs	r3, #1
 8005472:	7423      	strb	r3, [r4, #16]
    if (!(a->OutputMode)) {
 8005474:	7c63      	ldrb	r3, [r4, #17]
 8005476:	b90b      	cbnz	r3, 800547c <AS5600_Init+0x2c>
        a->OutputMode = AS5600_OUTPUT_STAGE_DEFAULT;
 8005478:	2301      	movs	r3, #1
 800547a:	7463      	strb	r3, [r4, #17]
    if (!(a->PWMFrequency)) {
 800547c:	7ca3      	ldrb	r3, [r4, #18]
 800547e:	b90b      	cbnz	r3, 8005484 <AS5600_Init+0x34>
        a->PWMFrequency = AS5600_PWM_FREQUENCY_DEFAULT;
 8005480:	2301      	movs	r3, #1
 8005482:	74a3      	strb	r3, [r4, #18]
    if (!(a->SlowFilter)) {
 8005484:	7ce3      	ldrb	r3, [r4, #19]
 8005486:	b90b      	cbnz	r3, 800548c <AS5600_Init+0x3c>
        a->SlowFilter = AS5600_SLOW_FILTER_DEFAULT;
 8005488:	2301      	movs	r3, #1
 800548a:	74e3      	strb	r3, [r4, #19]
    if (!(a->FastFilterThreshold)) {
 800548c:	7d23      	ldrb	r3, [r4, #20]
 800548e:	b90b      	cbnz	r3, 8005494 <AS5600_Init+0x44>
        a->FastFilterThreshold = AS5600_FAST_FILTER_DEFAULT;
 8005490:	2301      	movs	r3, #1
 8005492:	7523      	strb	r3, [r4, #20]
    if (!(a->WatchdogTimer)) {
 8005494:	7d63      	ldrb	r3, [r4, #21]
 8005496:	b90b      	cbnz	r3, 800549c <AS5600_Init+0x4c>
        a->WatchdogTimer = AS5600_WATCHDOG_DEFAULT;
 8005498:	2302      	movs	r3, #2
 800549a:	7563      	strb	r3, [r4, #21]
    switch (a->LowPowerMode) {
 800549c:	7be3      	ldrb	r3, [r4, #15]
 800549e:	3b01      	subs	r3, #1
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	f200 8127 	bhi.w	80056f4 <AS5600_Init+0x2a4>
 80054a6:	e8df f003 	tbb	[pc, r3]
 80054aa:	0f02      	.short	0x0f02
 80054ac:	2118      	.short	0x2118
            a->confRegister[1] &= ~((1UL << 1) | (1UL << 0));
 80054ae:	7de3      	ldrb	r3, [r4, #23]
 80054b0:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80054b4:	75e3      	strb	r3, [r4, #23]
    switch (a->Hysteresis) {
 80054b6:	7c23      	ldrb	r3, [r4, #16]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	f200 811c 	bhi.w	80056f8 <AS5600_Init+0x2a8>
 80054c0:	e8df f003 	tbb	[pc, r3]
 80054c4:	39302719 	.word	0x39302719
            a->confRegister[1] |= (1UL << 0);
 80054c8:	7de3      	ldrb	r3, [r4, #23]
 80054ca:	f043 0301 	orr.w	r3, r3, #1
 80054ce:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] &= ~(1UL << 1);
 80054d0:	7de3      	ldrb	r3, [r4, #23]
 80054d2:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 80054d6:	75e3      	strb	r3, [r4, #23]
            break;
 80054d8:	e7ed      	b.n	80054b6 <AS5600_Init+0x66>
            a->confRegister[1] |= (1UL << 1);
 80054da:	7de3      	ldrb	r3, [r4, #23]
 80054dc:	f043 0302 	orr.w	r3, r3, #2
 80054e0:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] &= (1UL << 0);
 80054e2:	7de3      	ldrb	r3, [r4, #23]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	75e3      	strb	r3, [r4, #23]
            break;
 80054ea:	e7e4      	b.n	80054b6 <AS5600_Init+0x66>
            a->confRegister[1] |= ((1UL << 1) | (1UL << 0));
 80054ec:	7de3      	ldrb	r3, [r4, #23]
 80054ee:	f043 0303 	orr.w	r3, r3, #3
 80054f2:	75e3      	strb	r3, [r4, #23]
            break;
 80054f4:	e7df      	b.n	80054b6 <AS5600_Init+0x66>
            a->confRegister[1] &= ~((1UL << 3) | (1UL << 2));
 80054f6:	7de3      	ldrb	r3, [r4, #23]
 80054f8:	f003 03f3 	and.w	r3, r3, #243	@ 0xf3
 80054fc:	75e3      	strb	r3, [r4, #23]
    switch (a->OutputMode) {
 80054fe:	7c63      	ldrb	r3, [r4, #17]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d02a      	beq.n	800555a <AS5600_Init+0x10a>
 8005504:	2b03      	cmp	r3, #3
 8005506:	d031      	beq.n	800556c <AS5600_Init+0x11c>
 8005508:	2b01      	cmp	r3, #1
 800550a:	d019      	beq.n	8005540 <AS5600_Init+0xf0>
 800550c:	2001      	movs	r0, #1
}
 800550e:	b006      	add	sp, #24
 8005510:	bd10      	pop	{r4, pc}
            a->confRegister[1] |= (1UL << 2);
 8005512:	7de3      	ldrb	r3, [r4, #23]
 8005514:	f043 0304 	orr.w	r3, r3, #4
 8005518:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] &= ~(1UL << 3);
 800551a:	7de3      	ldrb	r3, [r4, #23]
 800551c:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
 8005520:	75e3      	strb	r3, [r4, #23]
            break;
 8005522:	e7ec      	b.n	80054fe <AS5600_Init+0xae>
            a->confRegister[1] &= ~(1UL << 2);
 8005524:	7de3      	ldrb	r3, [r4, #23]
 8005526:	f003 03fb 	and.w	r3, r3, #251	@ 0xfb
 800552a:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] |= (1UL << 3);
 800552c:	7de3      	ldrb	r3, [r4, #23]
 800552e:	f043 0308 	orr.w	r3, r3, #8
 8005532:	75e3      	strb	r3, [r4, #23]
            break;
 8005534:	e7e3      	b.n	80054fe <AS5600_Init+0xae>
            a->confRegister[1] |= ((1UL << 3) | (1UL << 2));
 8005536:	7de3      	ldrb	r3, [r4, #23]
 8005538:	f043 030c 	orr.w	r3, r3, #12
 800553c:	75e3      	strb	r3, [r4, #23]
            break;
 800553e:	e7de      	b.n	80054fe <AS5600_Init+0xae>
            a->confRegister[1] &= ~((1UL << 5) | (1UL << 4));
 8005540:	7de3      	ldrb	r3, [r4, #23]
 8005542:	f003 03cf 	and.w	r3, r3, #207	@ 0xcf
 8005546:	75e3      	strb	r3, [r4, #23]
    switch (a->SlowFilter) {
 8005548:	7ce3      	ldrb	r3, [r4, #19]
 800554a:	3b01      	subs	r3, #1
 800554c:	2b03      	cmp	r3, #3
 800554e:	f200 80d7 	bhi.w	8005700 <AS5600_Init+0x2b0>
 8005552:	e8df f003 	tbb	[pc, r3]
 8005556:	4738      	.short	0x4738
 8005558:	5950      	.short	0x5950
            a->confRegister[1] |= (1UL << 4);
 800555a:	7de3      	ldrb	r3, [r4, #23]
 800555c:	f043 0310 	orr.w	r3, r3, #16
 8005560:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] &= ~(1UL << 5);
 8005562:	7de3      	ldrb	r3, [r4, #23]
 8005564:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005568:	75e3      	strb	r3, [r4, #23]
    if (pwm) {
 800556a:	e7ed      	b.n	8005548 <AS5600_Init+0xf8>
            a->confRegister[1] &= (1UL << 4);
 800556c:	7de3      	ldrb	r3, [r4, #23]
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] |= (1UL << 5);
 8005574:	7de3      	ldrb	r3, [r4, #23]
 8005576:	f043 0320 	orr.w	r3, r3, #32
 800557a:	75e3      	strb	r3, [r4, #23]
        switch (a->PWMFrequency) {
 800557c:	7ca3      	ldrb	r3, [r4, #18]
 800557e:	3b01      	subs	r3, #1
 8005580:	2b03      	cmp	r3, #3
 8005582:	f200 80bb 	bhi.w	80056fc <AS5600_Init+0x2ac>
 8005586:	e8df f003 	tbb	[pc, r3]
 800558a:	0702      	.short	0x0702
 800558c:	1910      	.short	0x1910
                a->confRegister[1] &= ~((1UL << 7) | (1UL << 6));
 800558e:	7de3      	ldrb	r3, [r4, #23]
 8005590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005594:	75e3      	strb	r3, [r4, #23]
                break;
 8005596:	e7d7      	b.n	8005548 <AS5600_Init+0xf8>
                a->confRegister[1] |= (1UL << 6);
 8005598:	7de3      	ldrb	r3, [r4, #23]
 800559a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800559e:	75e3      	strb	r3, [r4, #23]
                a->confRegister[1] &= ~(1UL << 7);
 80055a0:	7de3      	ldrb	r3, [r4, #23]
 80055a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055a6:	75e3      	strb	r3, [r4, #23]
                break;
 80055a8:	e7ce      	b.n	8005548 <AS5600_Init+0xf8>
                a->confRegister[1] &= ~(1UL << 6);
 80055aa:	7de3      	ldrb	r3, [r4, #23]
 80055ac:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
 80055b0:	75e3      	strb	r3, [r4, #23]
                a->confRegister[1] |= (1UL << 7);
 80055b2:	7de3      	ldrb	r3, [r4, #23]
 80055b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055b8:	75e3      	strb	r3, [r4, #23]
                break;
 80055ba:	e7c5      	b.n	8005548 <AS5600_Init+0xf8>
                a->confRegister[1] |= ((1UL << 7) | (1UL << 6));
 80055bc:	7de3      	ldrb	r3, [r4, #23]
 80055be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055c2:	75e3      	strb	r3, [r4, #23]
                break;
 80055c4:	e7c0      	b.n	8005548 <AS5600_Init+0xf8>
            a->confRegister[0] &= ~((1UL << 1) | (1UL << 0));
 80055c6:	7da3      	ldrb	r3, [r4, #22]
 80055c8:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80055cc:	75a3      	strb	r3, [r4, #22]
    switch (a->FastFilterThreshold) {
 80055ce:	7d23      	ldrb	r3, [r4, #20]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	2b07      	cmp	r3, #7
 80055d4:	f200 8096 	bhi.w	8005704 <AS5600_Init+0x2b4>
 80055d8:	e8df f003 	tbb	[pc, r3]
 80055dc:	382f261b 	.word	0x382f261b
 80055e0:	5c534a41 	.word	0x5c534a41
            a->confRegister[0] |= (1UL << 0);
 80055e4:	7da3      	ldrb	r3, [r4, #22]
 80055e6:	f043 0301 	orr.w	r3, r3, #1
 80055ea:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] &= ~(1UL << 1);
 80055ec:	7da3      	ldrb	r3, [r4, #22]
 80055ee:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 80055f2:	75a3      	strb	r3, [r4, #22]
            break;
 80055f4:	e7eb      	b.n	80055ce <AS5600_Init+0x17e>
            a->confRegister[0] &= ~(1UL << 0);
 80055f6:	7da3      	ldrb	r3, [r4, #22]
 80055f8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80055fc:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= (1UL << 1);
 80055fe:	7da3      	ldrb	r3, [r4, #22]
 8005600:	f043 0302 	orr.w	r3, r3, #2
 8005604:	75a3      	strb	r3, [r4, #22]
            break;
 8005606:	e7e2      	b.n	80055ce <AS5600_Init+0x17e>
            a->confRegister[0] |= ((1UL << 1) | (1UL << 0));
 8005608:	7da3      	ldrb	r3, [r4, #22]
 800560a:	f043 0303 	orr.w	r3, r3, #3
 800560e:	75a3      	strb	r3, [r4, #22]
            break;
 8005610:	e7dd      	b.n	80055ce <AS5600_Init+0x17e>
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 8005612:	7da3      	ldrb	r3, [r4, #22]
 8005614:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 8005618:	75a3      	strb	r3, [r4, #22]
    switch (a->WatchdogTimer) {
 800561a:	7d63      	ldrb	r3, [r4, #21]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d03e      	beq.n	800569e <AS5600_Init+0x24e>
 8005620:	2b02      	cmp	r3, #2
 8005622:	d062      	beq.n	80056ea <AS5600_Init+0x29a>
 8005624:	2001      	movs	r0, #1
 8005626:	e772      	b.n	800550e <AS5600_Init+0xbe>
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3));
 8005628:	7da3      	ldrb	r3, [r4, #22]
 800562a:	f003 03e7 	and.w	r3, r3, #231	@ 0xe7
 800562e:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= (1UL << 2);
 8005630:	7da3      	ldrb	r3, [r4, #22]
 8005632:	f043 0304 	orr.w	r3, r3, #4
 8005636:	75a3      	strb	r3, [r4, #22]
            break;
 8005638:	e7ef      	b.n	800561a <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 2));
 800563a:	7da3      	ldrb	r3, [r4, #22]
 800563c:	f003 03eb 	and.w	r3, r3, #235	@ 0xeb
 8005640:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= (1UL << 3);
 8005642:	7da3      	ldrb	r3, [r4, #22]
 8005644:	f043 0308 	orr.w	r3, r3, #8
 8005648:	75a3      	strb	r3, [r4, #22]
            break;
 800564a:	e7e6      	b.n	800561a <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~(1UL << 4);
 800564c:	7da3      	ldrb	r3, [r4, #22]
 800564e:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8005652:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= ((1UL << 3) | (1UL << 2));
 8005654:	7da3      	ldrb	r3, [r4, #22]
 8005656:	f043 030c 	orr.w	r3, r3, #12
 800565a:	75a3      	strb	r3, [r4, #22]
            break;
 800565c:	e7dd      	b.n	800561a <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~((1UL << 3) | (1UL << 2));
 800565e:	7da3      	ldrb	r3, [r4, #22]
 8005660:	f003 03f3 	and.w	r3, r3, #243	@ 0xf3
 8005664:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= (1UL << 4);
 8005666:	7da3      	ldrb	r3, [r4, #22]
 8005668:	f043 0310 	orr.w	r3, r3, #16
 800566c:	75a3      	strb	r3, [r4, #22]
            break;
 800566e:	e7d4      	b.n	800561a <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~(1UL << 3);
 8005670:	7da3      	ldrb	r3, [r4, #22]
 8005672:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
 8005676:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 2));
 8005678:	7da3      	ldrb	r3, [r4, #22]
 800567a:	f043 0314 	orr.w	r3, r3, #20
 800567e:	75a3      	strb	r3, [r4, #22]
            break;
 8005680:	e7cb      	b.n	800561a <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~(1UL << 2);
 8005682:	7da3      	ldrb	r3, [r4, #22]
 8005684:	f003 03fb 	and.w	r3, r3, #251	@ 0xfb
 8005688:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3));
 800568a:	7da3      	ldrb	r3, [r4, #22]
 800568c:	f043 0318 	orr.w	r3, r3, #24
 8005690:	75a3      	strb	r3, [r4, #22]
            break;
 8005692:	e7c2      	b.n	800561a <AS5600_Init+0x1ca>
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 8005694:	7da3      	ldrb	r3, [r4, #22]
 8005696:	f043 031c 	orr.w	r3, r3, #28
 800569a:	75a3      	strb	r3, [r4, #22]
            break;
 800569c:	e7bd      	b.n	800561a <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~(1UL << 6);
 800569e:	7da3      	ldrb	r3, [r4, #22]
 80056a0:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
 80056a4:	75a3      	strb	r3, [r4, #22]
    if (HAL_I2C_Mem_Write(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, a->confRegister, 2, 10) != HAL_OK) {
 80056a6:	4623      	mov	r3, r4
 80056a8:	f853 0b16 	ldr.w	r0, [r3], #22
 80056ac:	220a      	movs	r2, #10
 80056ae:	9202      	str	r2, [sp, #8]
 80056b0:	2202      	movs	r2, #2
 80056b2:	9201      	str	r2, [sp, #4]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	2301      	movs	r3, #1
 80056b8:	2207      	movs	r2, #7
 80056ba:	7921      	ldrb	r1, [r4, #4]
 80056bc:	f7fd fa0e 	bl	8002adc <HAL_I2C_Mem_Write>
 80056c0:	bb10      	cbnz	r0, 8005708 <AS5600_Init+0x2b8>
    if (AS5600_GetMagnetStatus(a, &mag_status) != HAL_OK) {
 80056c2:	f10d 0117 	add.w	r1, sp, #23
 80056c6:	4620      	mov	r0, r4
 80056c8:	f7ff feb1 	bl	800542e <AS5600_GetMagnetStatus>
 80056cc:	b9f0      	cbnz	r0, 800570c <AS5600_Init+0x2bc>
    if (!(mag_status & AS5600_MAGNET_DETECTED)) {
 80056ce:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80056d2:	f010 0f20 	tst.w	r0, #32
 80056d6:	d01b      	beq.n	8005710 <AS5600_Init+0x2c0>
    if ((mag_status & AS5600_AGC_MIN_GAIN_OVERFLOW)) {
 80056d8:	f010 0f08 	tst.w	r0, #8
 80056dc:	d11a      	bne.n	8005714 <AS5600_Init+0x2c4>
    if ((mag_status & AS5600_AGC_MAX_GAIN_OVERFLOW)) {
 80056de:	f010 0010 	ands.w	r0, r0, #16
 80056e2:	f43f af14 	beq.w	800550e <AS5600_Init+0xbe>
        return status;
 80056e6:	2004      	movs	r0, #4
 80056e8:	e711      	b.n	800550e <AS5600_Init+0xbe>
            a->confRegister[0] |= (1UL << 6);
 80056ea:	7da3      	ldrb	r3, [r4, #22]
 80056ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056f0:	75a3      	strb	r3, [r4, #22]
            break;
 80056f2:	e7d8      	b.n	80056a6 <AS5600_Init+0x256>
    switch (a->LowPowerMode) {
 80056f4:	2001      	movs	r0, #1
 80056f6:	e70a      	b.n	800550e <AS5600_Init+0xbe>
    switch (a->Hysteresis) {
 80056f8:	2001      	movs	r0, #1
 80056fa:	e708      	b.n	800550e <AS5600_Init+0xbe>
        switch (a->PWMFrequency) {
 80056fc:	2001      	movs	r0, #1
 80056fe:	e706      	b.n	800550e <AS5600_Init+0xbe>
    switch (a->SlowFilter) {
 8005700:	2001      	movs	r0, #1
 8005702:	e704      	b.n	800550e <AS5600_Init+0xbe>
    switch (a->FastFilterThreshold) {
 8005704:	2001      	movs	r0, #1
 8005706:	e702      	b.n	800550e <AS5600_Init+0xbe>
        return status;
 8005708:	2005      	movs	r0, #5
 800570a:	e700      	b.n	800550e <AS5600_Init+0xbe>
        return status;
 800570c:	2005      	movs	r0, #5
 800570e:	e6fe      	b.n	800550e <AS5600_Init+0xbe>
        return status;
 8005710:	2002      	movs	r0, #2
 8005712:	e6fc      	b.n	800550e <AS5600_Init+0xbe>
        return status;
 8005714:	2003      	movs	r0, #3
 8005716:	e6fa      	b.n	800550e <AS5600_Init+0xbe>

08005718 <EncoderInit>:
static uint16_t raw_buffer = 0;
static uint16_t position_prev = 0;
static uint8_t elapsed_fall_f = 0;
static uint8_t elapsed_rise_f = 0;

HAL_StatusTypeDef EncoderInit(){
 8005718:	b508      	push	{r3, lr}
	Encoder.i2cHandle = &hi2c1;
 800571a:	4b10      	ldr	r3, [pc, #64]	@ (800575c <EncoderInit+0x44>)
 800571c:	4810      	ldr	r0, [pc, #64]	@ (8005760 <EncoderInit+0x48>)
 800571e:	6018      	str	r0, [r3, #0]
	Encoder.i2cAddr = ENCODER_ADDRESS << 1;
 8005720:	216c      	movs	r1, #108	@ 0x6c
 8005722:	7119      	strb	r1, [r3, #4]
	Encoder.DirPort = ENCODER_PORT;
 8005724:	4a0f      	ldr	r2, [pc, #60]	@ (8005764 <EncoderInit+0x4c>)
 8005726:	609a      	str	r2, [r3, #8]
	Encoder.DirPin = GPIO_PIN_5;
 8005728:	2220      	movs	r2, #32
 800572a:	819a      	strh	r2, [r3, #12]

	if(HAL_I2C_IsDeviceReady(Encoder.i2cHandle, Encoder.i2cAddr, 1, 100) != HAL_OK){
 800572c:	2364      	movs	r3, #100	@ 0x64
 800572e:	2201      	movs	r2, #1
 8005730:	f7fd fc34 	bl	8002f9c <HAL_I2C_IsDeviceReady>
 8005734:	b938      	cbnz	r0, 8005746 <EncoderInit+0x2e>
		emmitSysError(WATCHER_ENC_FAULT);
		return HAL_ERROR;
	}
	AS5600Init_StatusTypedef status = AS5600_Init(&Encoder);
 8005736:	4809      	ldr	r0, [pc, #36]	@ (800575c <EncoderInit+0x44>)
 8005738:	f7ff fe8a 	bl	8005450 <AS5600_Init>
	if(status == AS5600_INIT_OK) init_success = TRUE;
 800573c:	b940      	cbnz	r0, 8005750 <EncoderInit+0x38>
 800573e:	4b0a      	ldr	r3, [pc, #40]	@ (8005768 <EncoderInit+0x50>)
 8005740:	2201      	movs	r2, #1
 8005742:	701a      	strb	r2, [r3, #0]
		emmitSysError(WATCHER_ENC_FAULT);
		return HAL_ERROR;
	}

	return HAL_OK;
}
 8005744:	bd08      	pop	{r3, pc}
		emmitSysError(WATCHER_ENC_FAULT);
 8005746:	2001      	movs	r0, #1
 8005748:	f7fc f946 	bl	80019d8 <emmitSysError>
		return HAL_ERROR;
 800574c:	2001      	movs	r0, #1
 800574e:	e7f9      	b.n	8005744 <EncoderInit+0x2c>
		emmitSysError(WATCHER_ENC_FAULT);
 8005750:	2001      	movs	r0, #1
 8005752:	f7fc f941 	bl	80019d8 <emmitSysError>
		return HAL_ERROR;
 8005756:	2001      	movs	r0, #1
 8005758:	e7f4      	b.n	8005744 <EncoderInit+0x2c>
 800575a:	bf00      	nop
 800575c:	200004f4 	.word	0x200004f4
 8005760:	20000440 	.word	0x20000440
 8005764:	40010c00 	.word	0x40010c00
 8005768:	200004f0 	.word	0x200004f0

0800576c <EncoderEnablePool>:
	if(status == HAL_OK){
		*res = result;
	}
}

int32_t EncoderEnablePool(){
 800576c:	b508      	push	{r3, lr}
	HAL_StatusTypeDef status = AS5600_GetRawAngle(&Encoder, &raw_buffer);
 800576e:	492d      	ldr	r1, [pc, #180]	@ (8005824 <EncoderEnablePool+0xb8>)
 8005770:	482d      	ldr	r0, [pc, #180]	@ (8005828 <EncoderEnablePool+0xbc>)
 8005772:	f7ff fe3f 	bl	80053f4 <AS5600_GetRawAngle>
	if(status != HAL_OK){
 8005776:	2800      	cmp	r0, #0
 8005778:	d144      	bne.n	8005804 <EncoderEnablePool+0x98>
		emmitSysError(WATCHER_ENC_FAULT);
		return 0;
	}
	active_quadrant = -1;
 800577a:	4b2c      	ldr	r3, [pc, #176]	@ (800582c <EncoderEnablePool+0xc0>)
 800577c:	22ff      	movs	r2, #255	@ 0xff
 800577e:	701a      	strb	r2, [r3, #0]

	if(raw_buffer >= 0 && raw_buffer <= 1024) active_quadrant = 1;
 8005780:	4b28      	ldr	r3, [pc, #160]	@ (8005824 <EncoderEnablePool+0xb8>)
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005788:	d802      	bhi.n	8005790 <EncoderEnablePool+0x24>
 800578a:	4a28      	ldr	r2, [pc, #160]	@ (800582c <EncoderEnablePool+0xc0>)
 800578c:	2101      	movs	r1, #1
 800578e:	7011      	strb	r1, [r2, #0]
	if(raw_buffer >= 1025 && raw_buffer <= 2048) active_quadrant = 2;
 8005790:	f2a3 4201 	subw	r2, r3, #1025	@ 0x401
 8005794:	b292      	uxth	r2, r2
 8005796:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800579a:	d202      	bcs.n	80057a2 <EncoderEnablePool+0x36>
 800579c:	4a23      	ldr	r2, [pc, #140]	@ (800582c <EncoderEnablePool+0xc0>)
 800579e:	2102      	movs	r1, #2
 80057a0:	7011      	strb	r1, [r2, #0]
	if(raw_buffer >= 2049 && raw_buffer <= 3072) active_quadrant = 3;
 80057a2:	f6a3 0201 	subw	r2, r3, #2049	@ 0x801
 80057a6:	b292      	uxth	r2, r2
 80057a8:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80057ac:	d202      	bcs.n	80057b4 <EncoderEnablePool+0x48>
 80057ae:	4a1f      	ldr	r2, [pc, #124]	@ (800582c <EncoderEnablePool+0xc0>)
 80057b0:	2103      	movs	r1, #3
 80057b2:	7011      	strb	r1, [r2, #0]
	if(raw_buffer >= 3073 && raw_buffer <= 4095) active_quadrant = 4;
 80057b4:	f6a3 4201 	subw	r2, r3, #3073	@ 0xc01
 80057b8:	b292      	uxth	r2, r2
 80057ba:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80057be:	428a      	cmp	r2, r1
 80057c0:	d802      	bhi.n	80057c8 <EncoderEnablePool+0x5c>
 80057c2:	4a1a      	ldr	r2, [pc, #104]	@ (800582c <EncoderEnablePool+0xc0>)
 80057c4:	2104      	movs	r1, #4
 80057c6:	7011      	strb	r1, [r2, #0]

	if(last_quadrant == -1) last_quadrant = active_quadrant;
 80057c8:	4a19      	ldr	r2, [pc, #100]	@ (8005830 <EncoderEnablePool+0xc4>)
 80057ca:	f992 2000 	ldrsb.w	r2, [r2]
 80057ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 80057d2:	d01c      	beq.n	800580e <EncoderEnablePool+0xa2>
	int32_t delta = (int32_t)(raw_buffer - position_prev);
 80057d4:	4a17      	ldr	r2, [pc, #92]	@ (8005834 <EncoderEnablePool+0xc8>)
 80057d6:	8810      	ldrh	r0, [r2, #0]
 80057d8:	1a18      	subs	r0, r3, r0

	if(delta > 2048) {
 80057da:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 80057de:	dd1b      	ble.n	8005818 <EncoderEnablePool+0xac>
		delta -= 4096;
 80057e0:	f5a0 5080 	sub.w	r0, r0, #4096	@ 0x1000
	} else if(delta < -2048) {
		delta += 4096;
	}

	accumulate_counter += delta;
 80057e4:	4a14      	ldr	r2, [pc, #80]	@ (8005838 <EncoderEnablePool+0xcc>)
 80057e6:	6811      	ldr	r1, [r2, #0]
 80057e8:	4408      	add	r0, r1
 80057ea:	6010      	str	r0, [r2, #0]

	elapsed_fall_f = FALSE;
 80057ec:	2200      	movs	r2, #0
 80057ee:	4913      	ldr	r1, [pc, #76]	@ (800583c <EncoderEnablePool+0xd0>)
 80057f0:	700a      	strb	r2, [r1, #0]
	elapsed_rise_f = FALSE;
 80057f2:	4913      	ldr	r1, [pc, #76]	@ (8005840 <EncoderEnablePool+0xd4>)
 80057f4:	700a      	strb	r2, [r1, #0]
	position_prev = raw_buffer;
 80057f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005834 <EncoderEnablePool+0xc8>)
 80057f8:	8013      	strh	r3, [r2, #0]
	last_quadrant = active_quadrant;
 80057fa:	4b0c      	ldr	r3, [pc, #48]	@ (800582c <EncoderEnablePool+0xc0>)
 80057fc:	781a      	ldrb	r2, [r3, #0]
 80057fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <EncoderEnablePool+0xc4>)
 8005800:	701a      	strb	r2, [r3, #0]

	return accumulate_counter;
}
 8005802:	bd08      	pop	{r3, pc}
		emmitSysError(WATCHER_ENC_FAULT);
 8005804:	2001      	movs	r0, #1
 8005806:	f7fc f8e7 	bl	80019d8 <emmitSysError>
		return 0;
 800580a:	2000      	movs	r0, #0
 800580c:	e7f9      	b.n	8005802 <EncoderEnablePool+0x96>
	if(last_quadrant == -1) last_quadrant = active_quadrant;
 800580e:	4a07      	ldr	r2, [pc, #28]	@ (800582c <EncoderEnablePool+0xc0>)
 8005810:	7811      	ldrb	r1, [r2, #0]
 8005812:	4a07      	ldr	r2, [pc, #28]	@ (8005830 <EncoderEnablePool+0xc4>)
 8005814:	7011      	strb	r1, [r2, #0]
 8005816:	e7dd      	b.n	80057d4 <EncoderEnablePool+0x68>
	} else if(delta < -2048) {
 8005818:	f510 6f00 	cmn.w	r0, #2048	@ 0x800
 800581c:	dae2      	bge.n	80057e4 <EncoderEnablePool+0x78>
		delta += 4096;
 800581e:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8005822:	e7df      	b.n	80057e4 <EncoderEnablePool+0x78>
 8005824:	200004e8 	.word	0x200004e8
 8005828:	200004f4 	.word	0x200004f4
 800582c:	20000011 	.word	0x20000011
 8005830:	20000010 	.word	0x20000010
 8005834:	200004e6 	.word	0x200004e6
 8005838:	200004ec 	.word	0x200004ec
 800583c:	200004e5 	.word	0x200004e5
 8005840:	200004e4 	.word	0x200004e4

08005844 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8005844:	2884      	cmp	r0, #132	@ 0x84
 8005846:	d001      	beq.n	800584c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8005848:	3003      	adds	r0, #3
 800584a:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800584c:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800584e:	4770      	bx	lr

08005850 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005850:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005852:	f000 fa25 	bl	8005ca0 <vTaskStartScheduler>
  
  return osOK;
}
 8005856:	2000      	movs	r0, #0
 8005858:	bd08      	pop	{r3, pc}

0800585a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800585a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800585e:	b087      	sub	sp, #28
 8005860:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005862:	6944      	ldr	r4, [r0, #20]
 8005864:	b1c4      	cbz	r4, 8005898 <osThreadCreate+0x3e>
 8005866:	6985      	ldr	r5, [r0, #24]
 8005868:	b1b5      	cbz	r5, 8005898 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800586a:	6847      	ldr	r7, [r0, #4]
 800586c:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005870:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005874:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8005878:	f7ff ffe4 	bl	8005844 <makeFreeRtosPriority>
 800587c:	9502      	str	r5, [sp, #8]
 800587e:	9401      	str	r4, [sp, #4]
 8005880:	9000      	str	r0, [sp, #0]
 8005882:	4633      	mov	r3, r6
 8005884:	464a      	mov	r2, r9
 8005886:	4641      	mov	r1, r8
 8005888:	4638      	mov	r0, r7
 800588a:	f000 f99b 	bl	8005bc4 <xTaskCreateStatic>
 800588e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005890:	9805      	ldr	r0, [sp, #20]
}
 8005892:	b007      	add	sp, #28
 8005894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005898:	6844      	ldr	r4, [r0, #4]
 800589a:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800589c:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800589e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80058a2:	f7ff ffcf 	bl	8005844 <makeFreeRtosPriority>
 80058a6:	ab05      	add	r3, sp, #20
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	9000      	str	r0, [sp, #0]
 80058ac:	4633      	mov	r3, r6
 80058ae:	b2ba      	uxth	r2, r7
 80058b0:	4629      	mov	r1, r5
 80058b2:	4620      	mov	r0, r4
 80058b4:	f000 f9c1 	bl	8005c3a <xTaskCreate>
 80058b8:	2801      	cmp	r0, #1
 80058ba:	d0e9      	beq.n	8005890 <osThreadCreate+0x36>
      return NULL;
 80058bc:	2000      	movs	r0, #0
 80058be:	e7e8      	b.n	8005892 <osThreadCreate+0x38>

080058c0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058c0:	f100 0308 	add.w	r3, r0, #8
 80058c4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058c6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ca:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058cc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058ce:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058d4:	4770      	bx	lr

080058d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058da:	4770      	bx	lr

080058dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80058dc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058de:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058e4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058e6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058e8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80058ea:	6803      	ldr	r3, [r0, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	6003      	str	r3, [r0, #0]
}
 80058f0:	4770      	bx	lr

080058f2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058f2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058f4:	6841      	ldr	r1, [r0, #4]
 80058f6:	6882      	ldr	r2, [r0, #8]
 80058f8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058fa:	6841      	ldr	r1, [r0, #4]
 80058fc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	4282      	cmp	r2, r0
 8005902:	d006      	beq.n	8005912 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005904:	2200      	movs	r2, #0
 8005906:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	3a01      	subs	r2, #1
 800590c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800590e:	6818      	ldr	r0, [r3, #0]
}
 8005910:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005912:	6882      	ldr	r2, [r0, #8]
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	e7f5      	b.n	8005904 <uxListRemove+0x12>

08005918 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005918:	4b08      	ldr	r3, [pc, #32]	@ (800593c <prvResetNextTaskUnblockTime+0x24>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	b923      	cbnz	r3, 800592a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005920:	4b07      	ldr	r3, [pc, #28]	@ (8005940 <prvResetNextTaskUnblockTime+0x28>)
 8005922:	f04f 32ff 	mov.w	r2, #4294967295
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800592a:	4b04      	ldr	r3, [pc, #16]	@ (800593c <prvResetNextTaskUnblockTime+0x24>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	4b02      	ldr	r3, [pc, #8]	@ (8005940 <prvResetNextTaskUnblockTime+0x28>)
 8005936:	601a      	str	r2, [r3, #0]
	}
}
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	2000057c 	.word	0x2000057c
 8005940:	20000514 	.word	0x20000514

08005944 <prvInitialiseNewTask>:
{
 8005944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	4607      	mov	r7, r0
 800594a:	4698      	mov	r8, r3
 800594c:	9d08      	ldr	r5, [sp, #32]
 800594e:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8005952:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005954:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8005956:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800595a:	3a01      	subs	r2, #1
 800595c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005960:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8005964:	2900      	cmp	r1, #0
 8005966:	d044      	beq.n	80059f2 <prvInitialiseNewTask+0xae>
 8005968:	4608      	mov	r0, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800596a:	f04f 0c00 	mov.w	ip, #0
 800596e:	f1bc 0f0f 	cmp.w	ip, #15
 8005972:	d809      	bhi.n	8005988 <prvInitialiseNewTask+0x44>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005974:	f810 200c 	ldrb.w	r2, [r0, ip]
 8005978:	eb04 030c 	add.w	r3, r4, ip
 800597c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8005980:	b112      	cbz	r2, 8005988 <prvInitialiseNewTask+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005982:	f10c 0c01 	add.w	ip, ip, #1
 8005986:	e7f2      	b.n	800596e <prvInitialiseNewTask+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005988:	2300      	movs	r3, #0
 800598a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800598e:	2d06      	cmp	r5, #6
 8005990:	d900      	bls.n	8005994 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005992:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8005994:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005996:	6465      	str	r5, [r4, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005998:	f04f 0a00 	mov.w	sl, #0
 800599c:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059a0:	1d20      	adds	r0, r4, #4
 80059a2:	f7ff ff98 	bl	80058d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059a6:	f104 0018 	add.w	r0, r4, #24
 80059aa:	f7ff ff94 	bl	80058d6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059ae:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059b0:	f1c5 0507 	rsb	r5, r5, #7
 80059b4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059b6:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80059b8:	f8c4 a098 	str.w	sl, [r4, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059bc:	f884 a09c 	strb.w	sl, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80059c0:	224c      	movs	r2, #76	@ 0x4c
 80059c2:	4651      	mov	r1, sl
 80059c4:	18a0      	adds	r0, r4, r2
 80059c6:	f001 f955 	bl	8006c74 <memset>
 80059ca:	4b0c      	ldr	r3, [pc, #48]	@ (80059fc <prvInitialiseNewTask+0xb8>)
 80059cc:	6523      	str	r3, [r4, #80]	@ 0x50
 80059ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059d2:	6562      	str	r2, [r4, #84]	@ 0x54
 80059d4:	33d0      	adds	r3, #208	@ 0xd0
 80059d6:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059d8:	4642      	mov	r2, r8
 80059da:	4639      	mov	r1, r7
 80059dc:	4630      	mov	r0, r6
 80059de:	f000 fba9 	bl	8006134 <pxPortInitialiseStack>
 80059e2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80059e4:	f1b9 0f00 	cmp.w	r9, #0
 80059e8:	d001      	beq.n	80059ee <prvInitialiseNewTask+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059ea:	f8c9 4000 	str.w	r4, [r9]
}
 80059ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059f2:	2300      	movs	r3, #0
 80059f4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80059f8:	e7c9      	b.n	800598e <prvInitialiseNewTask+0x4a>
 80059fa:	bf00      	nop
 80059fc:	200012a8 	.word	0x200012a8

08005a00 <prvInitialiseTaskLists>:
{
 8005a00:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a02:	2400      	movs	r4, #0
 8005a04:	e007      	b.n	8005a16 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a06:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005a0a:	0093      	lsls	r3, r2, #2
 8005a0c:	480e      	ldr	r0, [pc, #56]	@ (8005a48 <prvInitialiseTaskLists+0x48>)
 8005a0e:	4418      	add	r0, r3
 8005a10:	f7ff ff56 	bl	80058c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a14:	3401      	adds	r4, #1
 8005a16:	2c06      	cmp	r4, #6
 8005a18:	d9f5      	bls.n	8005a06 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8005a1a:	4d0c      	ldr	r5, [pc, #48]	@ (8005a4c <prvInitialiseTaskLists+0x4c>)
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	f7ff ff4f 	bl	80058c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a22:	4c0b      	ldr	r4, [pc, #44]	@ (8005a50 <prvInitialiseTaskLists+0x50>)
 8005a24:	4620      	mov	r0, r4
 8005a26:	f7ff ff4b 	bl	80058c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a2a:	480a      	ldr	r0, [pc, #40]	@ (8005a54 <prvInitialiseTaskLists+0x54>)
 8005a2c:	f7ff ff48 	bl	80058c0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005a30:	4809      	ldr	r0, [pc, #36]	@ (8005a58 <prvInitialiseTaskLists+0x58>)
 8005a32:	f7ff ff45 	bl	80058c0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005a36:	4809      	ldr	r0, [pc, #36]	@ (8005a5c <prvInitialiseTaskLists+0x5c>)
 8005a38:	f7ff ff42 	bl	80058c0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a3c:	4b08      	ldr	r3, [pc, #32]	@ (8005a60 <prvInitialiseTaskLists+0x60>)
 8005a3e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a40:	4b08      	ldr	r3, [pc, #32]	@ (8005a64 <prvInitialiseTaskLists+0x64>)
 8005a42:	601c      	str	r4, [r3, #0]
}
 8005a44:	bd38      	pop	{r3, r4, r5, pc}
 8005a46:	bf00      	nop
 8005a48:	200005a8 	.word	0x200005a8
 8005a4c:	20000594 	.word	0x20000594
 8005a50:	20000580 	.word	0x20000580
 8005a54:	20000564 	.word	0x20000564
 8005a58:	20000550 	.word	0x20000550
 8005a5c:	20000538 	.word	0x20000538
 8005a60:	2000057c 	.word	0x2000057c
 8005a64:	20000578 	.word	0x20000578

08005a68 <prvAddNewTaskToReadyList>:
{
 8005a68:	b510      	push	{r4, lr}
 8005a6a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005a6c:	f000 fb8a 	bl	8006184 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005a70:	4a21      	ldr	r2, [pc, #132]	@ (8005af8 <prvAddNewTaskToReadyList+0x90>)
 8005a72:	6813      	ldr	r3, [r2, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a78:	4b20      	ldr	r3, [pc, #128]	@ (8005afc <prvAddNewTaskToReadyList+0x94>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	b15b      	cbz	r3, 8005a96 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8005a7e:	4b20      	ldr	r3, [pc, #128]	@ (8005b00 <prvAddNewTaskToReadyList+0x98>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	b96b      	cbnz	r3, 8005aa0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a84:	4b1d      	ldr	r3, [pc, #116]	@ (8005afc <prvAddNewTaskToReadyList+0x94>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a8a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d807      	bhi.n	8005aa0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8005a90:	4b1a      	ldr	r3, [pc, #104]	@ (8005afc <prvAddNewTaskToReadyList+0x94>)
 8005a92:	601c      	str	r4, [r3, #0]
 8005a94:	e004      	b.n	8005aa0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8005a96:	4b19      	ldr	r3, [pc, #100]	@ (8005afc <prvAddNewTaskToReadyList+0x94>)
 8005a98:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a9a:	6813      	ldr	r3, [r2, #0]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d028      	beq.n	8005af2 <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 8005aa0:	4a18      	ldr	r2, [pc, #96]	@ (8005b04 <prvAddNewTaskToReadyList+0x9c>)
 8005aa2:	6813      	ldr	r3, [r2, #0]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005aa8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005aaa:	2301      	movs	r3, #1
 8005aac:	4083      	lsls	r3, r0
 8005aae:	4a16      	ldr	r2, [pc, #88]	@ (8005b08 <prvAddNewTaskToReadyList+0xa0>)
 8005ab0:	6811      	ldr	r1, [r2, #0]
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005aba:	1d21      	adds	r1, r4, #4
 8005abc:	4b13      	ldr	r3, [pc, #76]	@ (8005b0c <prvAddNewTaskToReadyList+0xa4>)
 8005abe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ac2:	f7ff ff0b 	bl	80058dc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005ac6:	f000 fb7f 	bl	80061c8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005aca:	4b0d      	ldr	r3, [pc, #52]	@ (8005b00 <prvAddNewTaskToReadyList+0x98>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	b17b      	cbz	r3, 8005af0 <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8005afc <prvAddNewTaskToReadyList+0x94>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d209      	bcs.n	8005af0 <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 8005adc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	f3bf 8f6f 	isb	sy
}
 8005af0:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8005af2:	f7ff ff85 	bl	8005a00 <prvInitialiseTaskLists>
 8005af6:	e7d3      	b.n	8005aa0 <prvAddNewTaskToReadyList+0x38>
 8005af8:	20000534 	.word	0x20000534
 8005afc:	20000634 	.word	0x20000634
 8005b00:	20000528 	.word	0x20000528
 8005b04:	20000518 	.word	0x20000518
 8005b08:	2000052c 	.word	0x2000052c
 8005b0c:	200005a8 	.word	0x200005a8

08005b10 <prvDeleteTCB>:
	{
 8005b10:	b510      	push	{r4, lr}
 8005b12:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b14:	304c      	adds	r0, #76	@ 0x4c
 8005b16:	f001 f8b5 	bl	8006c84 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b1a:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 8005b1e:	b163      	cbz	r3, 8005b3a <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d011      	beq.n	8005b48 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d00e      	beq.n	8005b46 <prvDeleteTCB+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	e7fe      	b.n	8005b38 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8005b3a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005b3c:	f000 fcf0 	bl	8006520 <vPortFree>
				vPortFree( pxTCB );
 8005b40:	4620      	mov	r0, r4
 8005b42:	f000 fced 	bl	8006520 <vPortFree>
	}
 8005b46:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 fce9 	bl	8006520 <vPortFree>
 8005b4e:	e7fa      	b.n	8005b46 <prvDeleteTCB+0x36>

08005b50 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b50:	4b0f      	ldr	r3, [pc, #60]	@ (8005b90 <prvCheckTasksWaitingTermination+0x40>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	b1d3      	cbz	r3, 8005b8c <prvCheckTasksWaitingTermination+0x3c>
{
 8005b56:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8005b58:	f000 fb14 	bl	8006184 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b94 <prvCheckTasksWaitingTermination+0x44>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b62:	1d20      	adds	r0, r4, #4
 8005b64:	f7ff fec5 	bl	80058f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b68:	4a0b      	ldr	r2, [pc, #44]	@ (8005b98 <prvCheckTasksWaitingTermination+0x48>)
 8005b6a:	6813      	ldr	r3, [r2, #0]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b70:	4a07      	ldr	r2, [pc, #28]	@ (8005b90 <prvCheckTasksWaitingTermination+0x40>)
 8005b72:	6813      	ldr	r3, [r2, #0]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005b78:	f000 fb26 	bl	80061c8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f7ff ffc7 	bl	8005b10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b82:	4b03      	ldr	r3, [pc, #12]	@ (8005b90 <prvCheckTasksWaitingTermination+0x40>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e6      	bne.n	8005b58 <prvCheckTasksWaitingTermination+0x8>
}
 8005b8a:	bd10      	pop	{r4, pc}
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	2000054c 	.word	0x2000054c
 8005b94:	20000550 	.word	0x20000550
 8005b98:	20000534 	.word	0x20000534

08005b9c <prvIdleTask>:
{
 8005b9c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8005b9e:	f7ff ffd7 	bl	8005b50 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ba2:	4b07      	ldr	r3, [pc, #28]	@ (8005bc0 <prvIdleTask+0x24>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d9f9      	bls.n	8005b9e <prvIdleTask+0x2>
				taskYIELD();
 8005baa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bb2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	e7ee      	b.n	8005b9e <prvIdleTask+0x2>
 8005bc0:	200005a8 	.word	0x200005a8

08005bc4 <xTaskCreateStatic>:
	{
 8005bc4:	b530      	push	{r4, r5, lr}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8005bca:	b17c      	cbz	r4, 8005bec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005bcc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005bce:	b1b5      	cbz	r5, 8005bfe <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005bd0:	25a0      	movs	r5, #160	@ 0xa0
 8005bd2:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005bd4:	9d04      	ldr	r5, [sp, #16]
 8005bd6:	2da0      	cmp	r5, #160	@ 0xa0
 8005bd8:	d01a      	beq.n	8005c10 <xTaskCreateStatic+0x4c>
 8005bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	e7fe      	b.n	8005bea <xTaskCreateStatic+0x26>
 8005bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005bfc:	e7fe      	b.n	8005bfc <xTaskCreateStatic+0x38>
 8005bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005c0e:	e7fe      	b.n	8005c0e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c10:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c12:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005c14:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c16:	2402      	movs	r4, #2
 8005c18:	f885 409d 	strb.w	r4, [r5, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c1c:	2400      	movs	r4, #0
 8005c1e:	9403      	str	r4, [sp, #12]
 8005c20:	9502      	str	r5, [sp, #8]
 8005c22:	ac05      	add	r4, sp, #20
 8005c24:	9401      	str	r4, [sp, #4]
 8005c26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005c28:	9400      	str	r4, [sp, #0]
 8005c2a:	f7ff fe8b 	bl	8005944 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c2e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005c30:	f7ff ff1a 	bl	8005a68 <prvAddNewTaskToReadyList>
	}
 8005c34:	9805      	ldr	r0, [sp, #20]
 8005c36:	b007      	add	sp, #28
 8005c38:	bd30      	pop	{r4, r5, pc}

08005c3a <xTaskCreate>:
	{
 8005c3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	4607      	mov	r7, r0
 8005c42:	4688      	mov	r8, r1
 8005c44:	4614      	mov	r4, r2
 8005c46:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c48:	0090      	lsls	r0, r2, #2
 8005c4a:	f000 fbe7 	bl	800641c <pvPortMalloc>
			if( pxStack != NULL )
 8005c4e:	b308      	cbz	r0, 8005c94 <xTaskCreate+0x5a>
 8005c50:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c52:	20a0      	movs	r0, #160	@ 0xa0
 8005c54:	f000 fbe2 	bl	800641c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005c58:	4605      	mov	r5, r0
 8005c5a:	b1a8      	cbz	r0, 8005c88 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8005c5c:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c60:	2300      	movs	r3, #0
 8005c62:	f880 309d 	strb.w	r3, [r0, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c66:	9303      	str	r3, [sp, #12]
 8005c68:	9002      	str	r0, [sp, #8]
 8005c6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	4633      	mov	r3, r6
 8005c74:	4622      	mov	r2, r4
 8005c76:	4641      	mov	r1, r8
 8005c78:	4638      	mov	r0, r7
 8005c7a:	f7ff fe63 	bl	8005944 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f7ff fef2 	bl	8005a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c84:	2001      	movs	r0, #1
 8005c86:	e007      	b.n	8005c98 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8005c88:	4648      	mov	r0, r9
 8005c8a:	f000 fc49 	bl	8006520 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c92:	e001      	b.n	8005c98 <xTaskCreate+0x5e>
 8005c94:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005c98:	b005      	add	sp, #20
 8005c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08005ca0 <vTaskStartScheduler>:
{
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ca4:	2400      	movs	r4, #0
 8005ca6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ca8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005caa:	aa07      	add	r2, sp, #28
 8005cac:	a906      	add	r1, sp, #24
 8005cae:	a805      	add	r0, sp, #20
 8005cb0:	f7fb f9fe 	bl	80010b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005cb4:	9b05      	ldr	r3, [sp, #20]
 8005cb6:	9302      	str	r3, [sp, #8]
 8005cb8:	9b06      	ldr	r3, [sp, #24]
 8005cba:	9301      	str	r3, [sp, #4]
 8005cbc:	9400      	str	r4, [sp, #0]
 8005cbe:	4623      	mov	r3, r4
 8005cc0:	9a07      	ldr	r2, [sp, #28]
 8005cc2:	4910      	ldr	r1, [pc, #64]	@ (8005d04 <vTaskStartScheduler+0x64>)
 8005cc4:	4810      	ldr	r0, [pc, #64]	@ (8005d08 <vTaskStartScheduler+0x68>)
 8005cc6:	f7ff ff7d 	bl	8005bc4 <xTaskCreateStatic>
 8005cca:	4b10      	ldr	r3, [pc, #64]	@ (8005d0c <vTaskStartScheduler+0x6c>)
 8005ccc:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8005cce:	b1b8      	cbz	r0, 8005d00 <vTaskStartScheduler+0x60>
 8005cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d10 <vTaskStartScheduler+0x70>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	334c      	adds	r3, #76	@ 0x4c
 8005ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8005d14 <vTaskStartScheduler+0x74>)
 8005ce8:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cea:	4b0b      	ldr	r3, [pc, #44]	@ (8005d18 <vTaskStartScheduler+0x78>)
 8005cec:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005d1c <vTaskStartScheduler+0x7c>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cf8:	4b09      	ldr	r3, [pc, #36]	@ (8005d20 <vTaskStartScheduler+0x80>)
 8005cfa:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005cfc:	f000 facc 	bl	8006298 <xPortStartScheduler>
}
 8005d00:	b008      	add	sp, #32
 8005d02:	bd10      	pop	{r4, pc}
 8005d04:	08007e58 	.word	0x08007e58
 8005d08:	08005b9d 	.word	0x08005b9d
 8005d0c:	20000510 	.word	0x20000510
 8005d10:	20000634 	.word	0x20000634
 8005d14:	2000001c 	.word	0x2000001c
 8005d18:	20000514 	.word	0x20000514
 8005d1c:	20000528 	.word	0x20000528
 8005d20:	20000530 	.word	0x20000530

08005d24 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005d24:	4a02      	ldr	r2, [pc, #8]	@ (8005d30 <vTaskSuspendAll+0xc>)
 8005d26:	6813      	ldr	r3, [r2, #0]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	6013      	str	r3, [r2, #0]
}
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	2000050c 	.word	0x2000050c

08005d34 <xTaskIncrementTick>:
{
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d36:	4b3a      	ldr	r3, [pc, #232]	@ (8005e20 <xTaskIncrementTick+0xec>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d169      	bne.n	8005e12 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d3e:	4b39      	ldr	r3, [pc, #228]	@ (8005e24 <xTaskIncrementTick+0xf0>)
 8005d40:	681d      	ldr	r5, [r3, #0]
 8005d42:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8005d44:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d46:	b9c5      	cbnz	r5, 8005d7a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8005d48:	4b37      	ldr	r3, [pc, #220]	@ (8005e28 <xTaskIncrementTick+0xf4>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	b143      	cbz	r3, 8005d62 <xTaskIncrementTick+0x2e>
 8005d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	e7fe      	b.n	8005d60 <xTaskIncrementTick+0x2c>
 8005d62:	4a31      	ldr	r2, [pc, #196]	@ (8005e28 <xTaskIncrementTick+0xf4>)
 8005d64:	6811      	ldr	r1, [r2, #0]
 8005d66:	4b31      	ldr	r3, [pc, #196]	@ (8005e2c <xTaskIncrementTick+0xf8>)
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	6010      	str	r0, [r2, #0]
 8005d6c:	6019      	str	r1, [r3, #0]
 8005d6e:	4a30      	ldr	r2, [pc, #192]	@ (8005e30 <xTaskIncrementTick+0xfc>)
 8005d70:	6813      	ldr	r3, [r2, #0]
 8005d72:	3301      	adds	r3, #1
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	f7ff fdcf 	bl	8005918 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d7a:	4b2e      	ldr	r3, [pc, #184]	@ (8005e34 <xTaskIncrementTick+0x100>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	42ab      	cmp	r3, r5
 8005d80:	d93d      	bls.n	8005dfe <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8005d82:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d84:	4b2c      	ldr	r3, [pc, #176]	@ (8005e38 <xTaskIncrementTick+0x104>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005d8e:	009a      	lsls	r2, r3, #2
 8005d90:	4b2a      	ldr	r3, [pc, #168]	@ (8005e3c <xTaskIncrementTick+0x108>)
 8005d92:	589b      	ldr	r3, [r3, r2]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d900      	bls.n	8005d9a <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8005d98:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8005d9a:	4b29      	ldr	r3, [pc, #164]	@ (8005e40 <xTaskIncrementTick+0x10c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d03c      	beq.n	8005e1c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8005da2:	2701      	movs	r7, #1
	return xSwitchRequired;
 8005da4:	e03a      	b.n	8005e1c <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8005da6:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da8:	4b1f      	ldr	r3, [pc, #124]	@ (8005e28 <xTaskIncrementTick+0xf4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	b343      	cbz	r3, 8005e02 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e28 <xTaskIncrementTick+0xf4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005db8:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8005dba:	429d      	cmp	r5, r3
 8005dbc:	d326      	bcc.n	8005e0c <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dbe:	1d26      	adds	r6, r4, #4
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	f7ff fd96 	bl	80058f2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005dc6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005dc8:	b11b      	cbz	r3, 8005dd2 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dca:	f104 0018 	add.w	r0, r4, #24
 8005dce:	f7ff fd90 	bl	80058f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005dd2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	409a      	lsls	r2, r3
 8005dd8:	491a      	ldr	r1, [pc, #104]	@ (8005e44 <xTaskIncrementTick+0x110>)
 8005dda:	6808      	ldr	r0, [r1, #0]
 8005ddc:	4302      	orrs	r2, r0
 8005dde:	600a      	str	r2, [r1, #0]
 8005de0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005de4:	009a      	lsls	r2, r3, #2
 8005de6:	4631      	mov	r1, r6
 8005de8:	4814      	ldr	r0, [pc, #80]	@ (8005e3c <xTaskIncrementTick+0x108>)
 8005dea:	4410      	add	r0, r2
 8005dec:	f7ff fd76 	bl	80058dc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005df0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005df2:	4b11      	ldr	r3, [pc, #68]	@ (8005e38 <xTaskIncrementTick+0x104>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d2d4      	bcs.n	8005da6 <xTaskIncrementTick+0x72>
 8005dfc:	e7d4      	b.n	8005da8 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8005dfe:	2700      	movs	r7, #0
 8005e00:	e7d2      	b.n	8005da8 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e02:	4b0c      	ldr	r3, [pc, #48]	@ (8005e34 <xTaskIncrementTick+0x100>)
 8005e04:	f04f 32ff 	mov.w	r2, #4294967295
 8005e08:	601a      	str	r2, [r3, #0]
					break;
 8005e0a:	e7bb      	b.n	8005d84 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8005e0c:	4a09      	ldr	r2, [pc, #36]	@ (8005e34 <xTaskIncrementTick+0x100>)
 8005e0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e10:	e7b8      	b.n	8005d84 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8005e12:	4a0d      	ldr	r2, [pc, #52]	@ (8005e48 <xTaskIncrementTick+0x114>)
 8005e14:	6813      	ldr	r3, [r2, #0]
 8005e16:	3301      	adds	r3, #1
 8005e18:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005e1a:	2700      	movs	r7, #0
}
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e20:	2000050c 	.word	0x2000050c
 8005e24:	20000530 	.word	0x20000530
 8005e28:	2000057c 	.word	0x2000057c
 8005e2c:	20000578 	.word	0x20000578
 8005e30:	2000051c 	.word	0x2000051c
 8005e34:	20000514 	.word	0x20000514
 8005e38:	20000634 	.word	0x20000634
 8005e3c:	200005a8 	.word	0x200005a8
 8005e40:	20000520 	.word	0x20000520
 8005e44:	2000052c 	.word	0x2000052c
 8005e48:	20000524 	.word	0x20000524

08005e4c <xTaskResumeAll>:
{
 8005e4c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8005e4e:	4b35      	ldr	r3, [pc, #212]	@ (8005f24 <xTaskResumeAll+0xd8>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	b943      	cbnz	r3, 8005e66 <xTaskResumeAll+0x1a>
 8005e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	e7fe      	b.n	8005e64 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8005e66:	f000 f98d 	bl	8006184 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f24 <xTaskResumeAll+0xd8>)
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	3a01      	subs	r2, #1
 8005e70:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d14f      	bne.n	8005f18 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e78:	4b2b      	ldr	r3, [pc, #172]	@ (8005f28 <xTaskResumeAll+0xdc>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	b90b      	cbnz	r3, 8005e82 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8005e7e:	2400      	movs	r4, #0
 8005e80:	e04b      	b.n	8005f1a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8005e82:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e84:	4b29      	ldr	r3, [pc, #164]	@ (8005f2c <xTaskResumeAll+0xe0>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	b31b      	cbz	r3, 8005ed2 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8a:	4b28      	ldr	r3, [pc, #160]	@ (8005f2c <xTaskResumeAll+0xe0>)
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e90:	f104 0018 	add.w	r0, r4, #24
 8005e94:	f7ff fd2d 	bl	80058f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e98:	1d25      	adds	r5, r4, #4
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	f7ff fd29 	bl	80058f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ea0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4083      	lsls	r3, r0
 8005ea6:	4a22      	ldr	r2, [pc, #136]	@ (8005f30 <xTaskResumeAll+0xe4>)
 8005ea8:	6811      	ldr	r1, [r2, #0]
 8005eaa:	430b      	orrs	r3, r1
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8005f34 <xTaskResumeAll+0xe8>)
 8005eb6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005eba:	f7ff fd0f 	bl	80058dc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ebe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f38 <xTaskResumeAll+0xec>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d3dc      	bcc.n	8005e84 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8005eca:	4b1c      	ldr	r3, [pc, #112]	@ (8005f3c <xTaskResumeAll+0xf0>)
 8005ecc:	2201      	movs	r2, #1
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	e7d8      	b.n	8005e84 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8005ed2:	b10c      	cbz	r4, 8005ed8 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8005ed4:	f7ff fd20 	bl	8005918 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ed8:	4b19      	ldr	r3, [pc, #100]	@ (8005f40 <xTaskResumeAll+0xf4>)
 8005eda:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005edc:	b984      	cbnz	r4, 8005f00 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8005ede:	4b17      	ldr	r3, [pc, #92]	@ (8005f3c <xTaskResumeAll+0xf0>)
 8005ee0:	681c      	ldr	r4, [r3, #0]
 8005ee2:	b1d4      	cbz	r4, 8005f1a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8005ee4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005ef8:	2401      	movs	r4, #1
 8005efa:	e00e      	b.n	8005f1a <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005efc:	3c01      	subs	r4, #1
 8005efe:	d007      	beq.n	8005f10 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8005f00:	f7ff ff18 	bl	8005d34 <xTaskIncrementTick>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d0f9      	beq.n	8005efc <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8005f08:	4b0c      	ldr	r3, [pc, #48]	@ (8005f3c <xTaskResumeAll+0xf0>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e7f5      	b.n	8005efc <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8005f10:	4b0b      	ldr	r3, [pc, #44]	@ (8005f40 <xTaskResumeAll+0xf4>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	e7e2      	b.n	8005ede <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8005f18:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005f1a:	f000 f955 	bl	80061c8 <vPortExitCritical>
}
 8005f1e:	4620      	mov	r0, r4
 8005f20:	bd38      	pop	{r3, r4, r5, pc}
 8005f22:	bf00      	nop
 8005f24:	2000050c 	.word	0x2000050c
 8005f28:	20000534 	.word	0x20000534
 8005f2c:	20000564 	.word	0x20000564
 8005f30:	2000052c 	.word	0x2000052c
 8005f34:	200005a8 	.word	0x200005a8
 8005f38:	20000634 	.word	0x20000634
 8005f3c:	20000520 	.word	0x20000520
 8005f40:	20000524 	.word	0x20000524

08005f44 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f44:	4b22      	ldr	r3, [pc, #136]	@ (8005fd0 <vTaskSwitchContext+0x8c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	b11b      	cbz	r3, 8005f52 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8005f4a:	4b22      	ldr	r3, [pc, #136]	@ (8005fd4 <vTaskSwitchContext+0x90>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005f52:	4b20      	ldr	r3, [pc, #128]	@ (8005fd4 <vTaskSwitchContext+0x90>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f58:	4b1f      	ldr	r3, [pc, #124]	@ (8005fd8 <vTaskSwitchContext+0x94>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005f5c:	fab3 f383 	clz	r3, r3
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	f1c3 031f 	rsb	r3, r3, #31
 8005f66:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005f6a:	008a      	lsls	r2, r1, #2
 8005f6c:	491b      	ldr	r1, [pc, #108]	@ (8005fdc <vTaskSwitchContext+0x98>)
 8005f6e:	588a      	ldr	r2, [r1, r2]
 8005f70:	b942      	cbnz	r2, 8005f84 <vTaskSwitchContext+0x40>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	e7fe      	b.n	8005f82 <vTaskSwitchContext+0x3e>
 8005f84:	4815      	ldr	r0, [pc, #84]	@ (8005fdc <vTaskSwitchContext+0x98>)
 8005f86:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005f8a:	008a      	lsls	r2, r1, #2
 8005f8c:	4402      	add	r2, r0
 8005f8e:	6851      	ldr	r1, [r2, #4]
 8005f90:	6849      	ldr	r1, [r1, #4]
 8005f92:	6051      	str	r1, [r2, #4]
 8005f94:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8005f98:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8005f9c:	3208      	adds	r2, #8
 8005f9e:	4402      	add	r2, r0
 8005fa0:	4291      	cmp	r1, r2
 8005fa2:	d00d      	beq.n	8005fc0 <vTaskSwitchContext+0x7c>
 8005fa4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005fa8:	009a      	lsls	r2, r3, #2
 8005faa:	4b0c      	ldr	r3, [pc, #48]	@ (8005fdc <vTaskSwitchContext+0x98>)
 8005fac:	4413      	add	r3, r2
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <vTaskSwitchContext+0x9c>)
 8005fb4:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	334c      	adds	r3, #76	@ 0x4c
 8005fba:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe4 <vTaskSwitchContext+0xa0>)
 8005fbc:	6013      	str	r3, [r2, #0]
}
 8005fbe:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc0:	6848      	ldr	r0, [r1, #4]
 8005fc2:	4662      	mov	r2, ip
 8005fc4:	0091      	lsls	r1, r2, #2
 8005fc6:	4a05      	ldr	r2, [pc, #20]	@ (8005fdc <vTaskSwitchContext+0x98>)
 8005fc8:	440a      	add	r2, r1
 8005fca:	6050      	str	r0, [r2, #4]
 8005fcc:	e7ea      	b.n	8005fa4 <vTaskSwitchContext+0x60>
 8005fce:	bf00      	nop
 8005fd0:	2000050c 	.word	0x2000050c
 8005fd4:	20000520 	.word	0x20000520
 8005fd8:	2000052c 	.word	0x2000052c
 8005fdc:	200005a8 	.word	0x200005a8
 8005fe0:	20000634 	.word	0x20000634
 8005fe4:	2000001c 	.word	0x2000001c

08005fe8 <vTaskSuspend>:
	{
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8005fec:	f000 f8ca 	bl	8006184 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005ff0:	b364      	cbz	r4, 800604c <vTaskSuspend+0x64>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ff2:	1d25      	adds	r5, r4, #4
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f7ff fc7c 	bl	80058f2 <uxListRemove>
 8005ffa:	b970      	cbnz	r0, 800601a <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005ffc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005ffe:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	492c      	ldr	r1, [pc, #176]	@ (80060b8 <vTaskSuspend+0xd0>)
 8006006:	58cb      	ldr	r3, [r1, r3]
 8006008:	b93b      	cbnz	r3, 800601a <vTaskSuspend+0x32>
 800600a:	2301      	movs	r3, #1
 800600c:	fa03 f202 	lsl.w	r2, r3, r2
 8006010:	492a      	ldr	r1, [pc, #168]	@ (80060bc <vTaskSuspend+0xd4>)
 8006012:	680b      	ldr	r3, [r1, #0]
 8006014:	ea23 0302 	bic.w	r3, r3, r2
 8006018:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800601a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800601c:	b11b      	cbz	r3, 8006026 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800601e:	f104 0018 	add.w	r0, r4, #24
 8006022:	f7ff fc66 	bl	80058f2 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006026:	4629      	mov	r1, r5
 8006028:	4825      	ldr	r0, [pc, #148]	@ (80060c0 <vTaskSuspend+0xd8>)
 800602a:	f7ff fc57 	bl	80058dc <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800602e:	f894 309c 	ldrb.w	r3, [r4, #156]	@ 0x9c
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b01      	cmp	r3, #1
 8006036:	d00c      	beq.n	8006052 <vTaskSuspend+0x6a>
		taskEXIT_CRITICAL();
 8006038:	f000 f8c6 	bl	80061c8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800603c:	4b21      	ldr	r3, [pc, #132]	@ (80060c4 <vTaskSuspend+0xdc>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	b95b      	cbnz	r3, 800605a <vTaskSuspend+0x72>
		if( pxTCB == pxCurrentTCB )
 8006042:	4b21      	ldr	r3, [pc, #132]	@ (80060c8 <vTaskSuspend+0xe0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	42a3      	cmp	r3, r4
 8006048:	d00e      	beq.n	8006068 <vTaskSuspend+0x80>
	}
 800604a:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800604c:	4b1e      	ldr	r3, [pc, #120]	@ (80060c8 <vTaskSuspend+0xe0>)
 800604e:	681c      	ldr	r4, [r3, #0]
 8006050:	e7cf      	b.n	8005ff2 <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006052:	2300      	movs	r3, #0
 8006054:	f884 309c 	strb.w	r3, [r4, #156]	@ 0x9c
 8006058:	e7ee      	b.n	8006038 <vTaskSuspend+0x50>
			taskENTER_CRITICAL();
 800605a:	f000 f893 	bl	8006184 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 800605e:	f7ff fc5b 	bl	8005918 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8006062:	f000 f8b1 	bl	80061c8 <vPortExitCritical>
 8006066:	e7ec      	b.n	8006042 <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
 8006068:	4b16      	ldr	r3, [pc, #88]	@ (80060c4 <vTaskSuspend+0xdc>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	b1b3      	cbz	r3, 800609c <vTaskSuspend+0xb4>
				configASSERT( uxSchedulerSuspended == 0 );
 800606e:	4b17      	ldr	r3, [pc, #92]	@ (80060cc <vTaskSuspend+0xe4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	b143      	cbz	r3, 8006086 <vTaskSuspend+0x9e>
 8006074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	e7fe      	b.n	8006084 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8006086:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800608a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800608e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	e7d6      	b.n	800604a <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800609c:	4b08      	ldr	r3, [pc, #32]	@ (80060c0 <vTaskSuspend+0xd8>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	4b0b      	ldr	r3, [pc, #44]	@ (80060d0 <vTaskSuspend+0xe8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d103      	bne.n	80060b0 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 80060a8:	4b07      	ldr	r3, [pc, #28]	@ (80060c8 <vTaskSuspend+0xe0>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	e7cc      	b.n	800604a <vTaskSuspend+0x62>
					vTaskSwitchContext();
 80060b0:	f7ff ff48 	bl	8005f44 <vTaskSwitchContext>
	}
 80060b4:	e7c9      	b.n	800604a <vTaskSuspend+0x62>
 80060b6:	bf00      	nop
 80060b8:	200005a8 	.word	0x200005a8
 80060bc:	2000052c 	.word	0x2000052c
 80060c0:	20000538 	.word	0x20000538
 80060c4:	20000528 	.word	0x20000528
 80060c8:	20000634 	.word	0x20000634
 80060cc:	2000050c 	.word	0x2000050c
 80060d0:	20000534 	.word	0x20000534

080060d4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060d4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060da:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <prvTaskExitError+0x3c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e2:	d008      	beq.n	80060f6 <prvTaskExitError+0x22>
 80060e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	e7fe      	b.n	80060f4 <prvTaskExitError+0x20>
 80060f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006106:	9b01      	ldr	r3, [sp, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0fc      	beq.n	8006106 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800610c:	b002      	add	sp, #8
 800610e:	4770      	bx	lr
 8006110:	20000014 	.word	0x20000014

08006114 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006114:	4806      	ldr	r0, [pc, #24]	@ (8006130 <prvPortStartFirstTask+0x1c>)
 8006116:	6800      	ldr	r0, [r0, #0]
 8006118:	6800      	ldr	r0, [r0, #0]
 800611a:	f380 8808 	msr	MSP, r0
 800611e:	b662      	cpsie	i
 8006120:	b661      	cpsie	f
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	df00      	svc	0
 800612c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800612e:	0000      	.short	0x0000
 8006130:	e000ed08 	.word	0xe000ed08

08006134 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006134:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006138:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800613c:	f021 0101 	bic.w	r1, r1, #1
 8006140:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006144:	4b03      	ldr	r3, [pc, #12]	@ (8006154 <pxPortInitialiseStack+0x20>)
 8006146:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800614a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800614e:	3840      	subs	r0, #64	@ 0x40
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	080060d5 	.word	0x080060d5
	...

08006160 <SVC_Handler>:
	__asm volatile (
 8006160:	4b07      	ldr	r3, [pc, #28]	@ (8006180 <pxCurrentTCBConst2>)
 8006162:	6819      	ldr	r1, [r3, #0]
 8006164:	6808      	ldr	r0, [r1, #0]
 8006166:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800616a:	f380 8809 	msr	PSP, r0
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f04f 0000 	mov.w	r0, #0
 8006176:	f380 8811 	msr	BASEPRI, r0
 800617a:	f04e 0e0d 	orr.w	lr, lr, #13
 800617e:	4770      	bx	lr

08006180 <pxCurrentTCBConst2>:
 8006180:	20000634 	.word	0x20000634

08006184 <vPortEnterCritical>:
 8006184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006194:	4a0b      	ldr	r2, [pc, #44]	@ (80061c4 <vPortEnterCritical+0x40>)
 8006196:	6813      	ldr	r3, [r2, #0]
 8006198:	3301      	adds	r3, #1
 800619a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800619c:	2b01      	cmp	r3, #1
 800619e:	d000      	beq.n	80061a2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80061a0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80061a6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80061aa:	f013 0fff 	tst.w	r3, #255	@ 0xff
 80061ae:	d0f7      	beq.n	80061a0 <vPortEnterCritical+0x1c>
 80061b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	e7fe      	b.n	80061c0 <vPortEnterCritical+0x3c>
 80061c2:	bf00      	nop
 80061c4:	20000014 	.word	0x20000014

080061c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80061c8:	4b09      	ldr	r3, [pc, #36]	@ (80061f0 <vPortExitCritical+0x28>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	b943      	cbnz	r3, 80061e0 <vPortExitCritical+0x18>
 80061ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	e7fe      	b.n	80061de <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80061e0:	3b01      	subs	r3, #1
 80061e2:	4a03      	ldr	r2, [pc, #12]	@ (80061f0 <vPortExitCritical+0x28>)
 80061e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061e6:	b90b      	cbnz	r3, 80061ec <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061e8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20000014 	.word	0x20000014
	...

08006200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006200:	f3ef 8009 	mrs	r0, PSP
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	4b0d      	ldr	r3, [pc, #52]	@ (8006240 <pxCurrentTCBConst>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006210:	6010      	str	r0, [r2, #0]
 8006212:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006216:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800621a:	f380 8811 	msr	BASEPRI, r0
 800621e:	f7ff fe91 	bl	8005f44 <vTaskSwitchContext>
 8006222:	f04f 0000 	mov.w	r0, #0
 8006226:	f380 8811 	msr	BASEPRI, r0
 800622a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800622e:	6819      	ldr	r1, [r3, #0]
 8006230:	6808      	ldr	r0, [r1, #0]
 8006232:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006236:	f380 8809 	msr	PSP, r0
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	4770      	bx	lr

08006240 <pxCurrentTCBConst>:
 8006240:	20000634 	.word	0x20000634

08006244 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006244:	b508      	push	{r3, lr}
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006256:	f7ff fd6d 	bl	8005d34 <xTaskIncrementTick>
 800625a:	b128      	cbz	r0, 8006268 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800625c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006264:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8006268:	2300      	movs	r3, #0
 800626a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800626e:	bd08      	pop	{r3, pc}

08006270 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006270:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006274:	2300      	movs	r3, #0
 8006276:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006278:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800627a:	4b05      	ldr	r3, [pc, #20]	@ (8006290 <vPortSetupTimerInterrupt+0x20>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4905      	ldr	r1, [pc, #20]	@ (8006294 <vPortSetupTimerInterrupt+0x24>)
 8006280:	fba1 1303 	umull	r1, r3, r1, r3
 8006284:	099b      	lsrs	r3, r3, #6
 8006286:	3b01      	subs	r3, #1
 8006288:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800628a:	2307      	movs	r3, #7
 800628c:	6113      	str	r3, [r2, #16]
}
 800628e:	4770      	bx	lr
 8006290:	20000004 	.word	0x20000004
 8006294:	10624dd3 	.word	0x10624dd3

08006298 <xPortStartScheduler>:
{
 8006298:	b510      	push	{r4, lr}
 800629a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800629c:	4b2a      	ldr	r3, [pc, #168]	@ (8006348 <xPortStartScheduler+0xb0>)
 800629e:	781a      	ldrb	r2, [r3, #0]
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062a4:	22ff      	movs	r2, #255	@ 0xff
 80062a6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80062b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80062b8:	4a24      	ldr	r2, [pc, #144]	@ (800634c <xPortStartScheduler+0xb4>)
 80062ba:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062bc:	4b24      	ldr	r3, [pc, #144]	@ (8006350 <xPortStartScheduler+0xb8>)
 80062be:	2207      	movs	r2, #7
 80062c0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062c2:	e009      	b.n	80062d8 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80062c4:	4a22      	ldr	r2, [pc, #136]	@ (8006350 <xPortStartScheduler+0xb8>)
 80062c6:	6813      	ldr	r3, [r2, #0]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80062dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062e0:	d1f0      	bne.n	80062c4 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006350 <xPortStartScheduler+0xb8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d008      	beq.n	80062fc <xPortStartScheduler+0x64>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	e7fe      	b.n	80062fa <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062fc:	021b      	lsls	r3, r3, #8
 80062fe:	4a14      	ldr	r2, [pc, #80]	@ (8006350 <xPortStartScheduler+0xb8>)
 8006300:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006302:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006306:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006308:	9b01      	ldr	r3, [sp, #4]
 800630a:	b2db      	uxtb	r3, r3
 800630c:	4a0e      	ldr	r2, [pc, #56]	@ (8006348 <xPortStartScheduler+0xb0>)
 800630e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006310:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006314:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8006318:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800631c:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006320:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8006324:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 8006328:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800632c:	f7ff ffa0 	bl	8006270 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006330:	2400      	movs	r4, #0
 8006332:	4b08      	ldr	r3, [pc, #32]	@ (8006354 <xPortStartScheduler+0xbc>)
 8006334:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8006336:	f7ff feed 	bl	8006114 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800633a:	f7ff fe03 	bl	8005f44 <vTaskSwitchContext>
	prvTaskExitError();
 800633e:	f7ff fec9 	bl	80060d4 <prvTaskExitError>
}
 8006342:	4620      	mov	r0, r4
 8006344:	b002      	add	sp, #8
 8006346:	bd10      	pop	{r4, pc}
 8006348:	e000e400 	.word	0xe000e400
 800634c:	2000063c 	.word	0x2000063c
 8006350:	20000638 	.word	0x20000638
 8006354:	20000014 	.word	0x20000014

08006358 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006358:	4a12      	ldr	r2, [pc, #72]	@ (80063a4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800635a:	f012 0f07 	tst.w	r2, #7
 800635e:	d01e      	beq.n	800639e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006360:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006362:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006366:	f5c1 6340 	rsb	r3, r1, #3072	@ 0xc00
 800636a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800636c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800636e:	480e      	ldr	r0, [pc, #56]	@ (80063a8 <prvHeapInit+0x50>)
 8006370:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006372:	2100      	movs	r1, #0
 8006374:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006376:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006378:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800637a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800637e:	480b      	ldr	r0, [pc, #44]	@ (80063ac <prvHeapInit+0x54>)
 8006380:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006382:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006384:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006386:	1a99      	subs	r1, r3, r2
 8006388:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800638a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800638c:	4b08      	ldr	r3, [pc, #32]	@ (80063b0 <prvHeapInit+0x58>)
 800638e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006390:	4b08      	ldr	r3, [pc, #32]	@ (80063b4 <prvHeapInit+0x5c>)
 8006392:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006394:	4b08      	ldr	r3, [pc, #32]	@ (80063b8 <prvHeapInit+0x60>)
 8006396:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800639a:	601a      	str	r2, [r3, #0]
}
 800639c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800639e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80063a2:	e7e4      	b.n	800636e <prvHeapInit+0x16>
 80063a4:	20000660 	.word	0x20000660
 80063a8:	20000658 	.word	0x20000658
 80063ac:	20000654 	.word	0x20000654
 80063b0:	2000064c 	.word	0x2000064c
 80063b4:	20000650 	.word	0x20000650
 80063b8:	20000640 	.word	0x20000640

080063bc <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063bc:	4b15      	ldr	r3, [pc, #84]	@ (8006414 <prvInsertBlockIntoFreeList+0x58>)
 80063be:	461a      	mov	r2, r3
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4283      	cmp	r3, r0
 80063c4:	d3fb      	bcc.n	80063be <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063c6:	6851      	ldr	r1, [r2, #4]
 80063c8:	eb02 0c01 	add.w	ip, r2, r1
 80063cc:	4584      	cmp	ip, r0
 80063ce:	d009      	beq.n	80063e4 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063d0:	6841      	ldr	r1, [r0, #4]
 80063d2:	eb00 0c01 	add.w	ip, r0, r1
 80063d6:	4563      	cmp	r3, ip
 80063d8:	d009      	beq.n	80063ee <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063da:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063dc:	4290      	cmp	r0, r2
 80063de:	d018      	beq.n	8006412 <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063e0:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80063e2:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063e4:	6840      	ldr	r0, [r0, #4]
 80063e6:	4401      	add	r1, r0
 80063e8:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80063ea:	4610      	mov	r0, r2
 80063ec:	e7f0      	b.n	80063d0 <prvInsertBlockIntoFreeList+0x14>
{
 80063ee:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063f0:	4c09      	ldr	r4, [pc, #36]	@ (8006418 <prvInsertBlockIntoFreeList+0x5c>)
 80063f2:	6824      	ldr	r4, [r4, #0]
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	d00a      	beq.n	800640e <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	4419      	add	r1, r3
 80063fc:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063fe:	6813      	ldr	r3, [r2, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8006404:	4290      	cmp	r0, r2
 8006406:	d000      	beq.n	800640a <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006408:	6010      	str	r0, [r2, #0]
	}
}
 800640a:	bc10      	pop	{r4}
 800640c:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800640e:	6004      	str	r4, [r0, #0]
 8006410:	e7f8      	b.n	8006404 <prvInsertBlockIntoFreeList+0x48>
 8006412:	4770      	bx	lr
 8006414:	20000658 	.word	0x20000658
 8006418:	20000654 	.word	0x20000654

0800641c <pvPortMalloc>:
{
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006420:	f7ff fc80 	bl	8005d24 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006424:	4b38      	ldr	r3, [pc, #224]	@ (8006508 <pvPortMalloc+0xec>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	b1b3      	cbz	r3, 8006458 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800642a:	4b38      	ldr	r3, [pc, #224]	@ (800650c <pvPortMalloc+0xf0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	421c      	tst	r4, r3
 8006430:	d150      	bne.n	80064d4 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8006432:	2c00      	cmp	r4, #0
 8006434:	d050      	beq.n	80064d8 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8006436:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800643a:	f014 0f07 	tst.w	r4, #7
 800643e:	d002      	beq.n	8006446 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006440:	f022 0207 	bic.w	r2, r2, #7
 8006444:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006446:	2a00      	cmp	r2, #0
 8006448:	d055      	beq.n	80064f6 <pvPortMalloc+0xda>
 800644a:	4b31      	ldr	r3, [pc, #196]	@ (8006510 <pvPortMalloc+0xf4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4293      	cmp	r3, r2
 8006450:	d353      	bcc.n	80064fa <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8006452:	4930      	ldr	r1, [pc, #192]	@ (8006514 <pvPortMalloc+0xf8>)
 8006454:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006456:	e004      	b.n	8006462 <pvPortMalloc+0x46>
			prvHeapInit();
 8006458:	f7ff ff7e 	bl	8006358 <prvHeapInit>
 800645c:	e7e5      	b.n	800642a <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800645e:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8006460:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006462:	6863      	ldr	r3, [r4, #4]
 8006464:	4293      	cmp	r3, r2
 8006466:	d202      	bcs.n	800646e <pvPortMalloc+0x52>
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1f7      	bne.n	800645e <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800646e:	4b26      	ldr	r3, [pc, #152]	@ (8006508 <pvPortMalloc+0xec>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	42a3      	cmp	r3, r4
 8006474:	d043      	beq.n	80064fe <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006476:	680d      	ldr	r5, [r1, #0]
 8006478:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800647e:	6863      	ldr	r3, [r4, #4]
 8006480:	1a9b      	subs	r3, r3, r2
 8006482:	2b10      	cmp	r3, #16
 8006484:	d910      	bls.n	80064a8 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006486:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006488:	f010 0f07 	tst.w	r0, #7
 800648c:	d008      	beq.n	80064a0 <pvPortMalloc+0x84>
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	e7fe      	b.n	800649e <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064a0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064a2:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064a4:	f7ff ff8a 	bl	80063bc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064a8:	6862      	ldr	r2, [r4, #4]
 80064aa:	4919      	ldr	r1, [pc, #100]	@ (8006510 <pvPortMalloc+0xf4>)
 80064ac:	680b      	ldr	r3, [r1, #0]
 80064ae:	1a9b      	subs	r3, r3, r2
 80064b0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064b2:	4919      	ldr	r1, [pc, #100]	@ (8006518 <pvPortMalloc+0xfc>)
 80064b4:	6809      	ldr	r1, [r1, #0]
 80064b6:	428b      	cmp	r3, r1
 80064b8:	d201      	bcs.n	80064be <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064ba:	4917      	ldr	r1, [pc, #92]	@ (8006518 <pvPortMalloc+0xfc>)
 80064bc:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064be:	4b13      	ldr	r3, [pc, #76]	@ (800650c <pvPortMalloc+0xf0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80064ca:	4a14      	ldr	r2, [pc, #80]	@ (800651c <pvPortMalloc+0x100>)
 80064cc:	6813      	ldr	r3, [r2, #0]
 80064ce:	3301      	adds	r3, #1
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	e002      	b.n	80064da <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 80064d4:	2500      	movs	r5, #0
 80064d6:	e000      	b.n	80064da <pvPortMalloc+0xbe>
 80064d8:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 80064da:	f7ff fcb7 	bl	8005e4c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064de:	f015 0f07 	tst.w	r5, #7
 80064e2:	d00e      	beq.n	8006502 <pvPortMalloc+0xe6>
 80064e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	e7fe      	b.n	80064f4 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 80064f6:	2500      	movs	r5, #0
 80064f8:	e7ef      	b.n	80064da <pvPortMalloc+0xbe>
 80064fa:	2500      	movs	r5, #0
 80064fc:	e7ed      	b.n	80064da <pvPortMalloc+0xbe>
 80064fe:	2500      	movs	r5, #0
 8006500:	e7eb      	b.n	80064da <pvPortMalloc+0xbe>
}
 8006502:	4628      	mov	r0, r5
 8006504:	bd38      	pop	{r3, r4, r5, pc}
 8006506:	bf00      	nop
 8006508:	20000654 	.word	0x20000654
 800650c:	20000640 	.word	0x20000640
 8006510:	20000650 	.word	0x20000650
 8006514:	20000658 	.word	0x20000658
 8006518:	2000064c 	.word	0x2000064c
 800651c:	20000648 	.word	0x20000648

08006520 <vPortFree>:
	if( pv != NULL )
 8006520:	2800      	cmp	r0, #0
 8006522:	d034      	beq.n	800658e <vPortFree+0x6e>
{
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006528:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800652c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006530:	4a17      	ldr	r2, [pc, #92]	@ (8006590 <vPortFree+0x70>)
 8006532:	6812      	ldr	r2, [r2, #0]
 8006534:	4213      	tst	r3, r2
 8006536:	d108      	bne.n	800654a <vPortFree+0x2a>
 8006538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	e7fe      	b.n	8006548 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800654a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800654e:	b141      	cbz	r1, 8006562 <vPortFree+0x42>
 8006550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	e7fe      	b.n	8006560 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006562:	ea23 0302 	bic.w	r3, r3, r2
 8006566:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800656a:	f7ff fbdb 	bl	8005d24 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800656e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006572:	4a08      	ldr	r2, [pc, #32]	@ (8006594 <vPortFree+0x74>)
 8006574:	6813      	ldr	r3, [r2, #0]
 8006576:	440b      	add	r3, r1
 8006578:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800657a:	4628      	mov	r0, r5
 800657c:	f7ff ff1e 	bl	80063bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006580:	4a05      	ldr	r2, [pc, #20]	@ (8006598 <vPortFree+0x78>)
 8006582:	6813      	ldr	r3, [r2, #0]
 8006584:	3301      	adds	r3, #1
 8006586:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8006588:	f7ff fc60 	bl	8005e4c <xTaskResumeAll>
}
 800658c:	bd38      	pop	{r3, r4, r5, pc}
 800658e:	4770      	bx	lr
 8006590:	20000640 	.word	0x20000640
 8006594:	20000650 	.word	0x20000650
 8006598:	20000644 	.word	0x20000644

0800659c <TMC2209_setdefault>:
static uint8_t oneStepMove_start = FALSE;

static uint8_t isBrake = FALSE;
void TMC2209_setdefault()
{
	gconfConfig.I_scale_analog = TRUE;
 800659c:	4b0e      	ldr	r3, [pc, #56]	@ (80065d8 <TMC2209_setdefault+0x3c>)
 800659e:	781a      	ldrb	r2, [r3, #0]
 80065a0:	f042 0201 	orr.w	r2, r2, #1
 80065a4:	701a      	strb	r2, [r3, #0]
	gconfConfig.multistep_filt = TRUE;
 80065a6:	785a      	ldrb	r2, [r3, #1]
 80065a8:	f042 0201 	orr.w	r2, r2, #1
 80065ac:	705a      	strb	r2, [r3, #1]
	chopConfig.bytes = CHOPPER_CONFIG_DEFAULT;
 80065ae:	4b0b      	ldr	r3, [pc, #44]	@ (80065dc <TMC2209_setdefault+0x40>)
 80065b0:	4a0b      	ldr	r2, [pc, #44]	@ (80065e0 <TMC2209_setdefault+0x44>)
 80065b2:	601a      	str	r2, [r3, #0]
	pwmConfig.bytes = PWMCONF_CONFIG_DEFAULT;
 80065b4:	4b0b      	ldr	r3, [pc, #44]	@ (80065e4 <TMC2209_setdefault+0x48>)
 80065b6:	4a0c      	ldr	r2, [pc, #48]	@ (80065e8 <TMC2209_setdefault+0x4c>)
 80065b8:	601a      	str	r2, [r3, #0]
	iholdIrun.ihold = TMC_IRUNDEFAULT;
 80065ba:	4b0c      	ldr	r3, [pc, #48]	@ (80065ec <TMC2209_setdefault+0x50>)
 80065bc:	781a      	ldrb	r2, [r3, #0]
 80065be:	f042 021f 	orr.w	r2, r2, #31
 80065c2:	701a      	strb	r2, [r3, #0]
	iholdIrun.iholddelay = TMC_IHOLDDELAY;
 80065c4:	789a      	ldrb	r2, [r3, #2]
 80065c6:	210a      	movs	r1, #10
 80065c8:	f361 0203 	bfi	r2, r1, #0, #4
 80065cc:	709a      	strb	r2, [r3, #2]
	iholdIrun.irun = TMC_IRUNDEFAULT;
 80065ce:	785a      	ldrb	r2, [r3, #1]
 80065d0:	f042 021f 	orr.w	r2, r2, #31
 80065d4:	705a      	strb	r2, [r3, #1]
}
 80065d6:	4770      	bx	lr
 80065d8:	2000129c 	.word	0x2000129c
 80065dc:	200012a0 	.word	0x200012a0
 80065e0:	10000053 	.word	0x10000053
 80065e4:	20001290 	.word	0x20001290
 80065e8:	c10d0024 	.word	0xc10d0024
 80065ec:	20001294 	.word	0x20001294

080065f0 <TMC2209_enable>:
	TMC2209_disable();
	HAL_Delay(100);
}

void TMC2209_enable()
{
 80065f0:	b508      	push	{r3, lr}
	if(Driver_Enable == FALSE){
 80065f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006620 <TMC2209_enable+0x30>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	b103      	cbz	r3, 80065fa <TMC2209_enable+0xa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
		Driver_Enable = TRUE;
		chopConfig.toff = toff_;
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
	}
}
 80065f8:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80065fa:	2200      	movs	r2, #0
 80065fc:	2104      	movs	r1, #4
 80065fe:	4809      	ldr	r0, [pc, #36]	@ (8006624 <TMC2209_enable+0x34>)
 8006600:	f7fb fcfb 	bl	8001ffa <HAL_GPIO_WritePin>
		Driver_Enable = TRUE;
 8006604:	4b06      	ldr	r3, [pc, #24]	@ (8006620 <TMC2209_enable+0x30>)
 8006606:	2201      	movs	r2, #1
 8006608:	701a      	strb	r2, [r3, #0]
		chopConfig.toff = toff_;
 800660a:	4b07      	ldr	r3, [pc, #28]	@ (8006628 <TMC2209_enable+0x38>)
 800660c:	781a      	ldrb	r2, [r3, #0]
 800660e:	2103      	movs	r1, #3
 8006610:	f361 0203 	bfi	r2, r1, #0, #4
 8006614:	701a      	strb	r2, [r3, #0]
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 8006616:	6819      	ldr	r1, [r3, #0]
 8006618:	206c      	movs	r0, #108	@ 0x6c
 800661a:	f000 fa9b 	bl	8006b54 <TMC2209_HAL_Write>
}
 800661e:	e7eb      	b.n	80065f8 <TMC2209_enable+0x8>
 8006620:	2000128d 	.word	0x2000128d
 8006624:	40010800 	.word	0x40010800
 8006628:	200012a0 	.word	0x200012a0

0800662c <TMC2209_disable>:

void TMC2209_disable()
{
 800662c:	b508      	push	{r3, lr}
	if(Driver_Enable == TRUE){
 800662e:	4b0b      	ldr	r3, [pc, #44]	@ (800665c <TMC2209_disable+0x30>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d000      	beq.n	8006638 <TMC2209_disable+0xc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
		Driver_Enable = FALSE;
		chopConfig.toff = TOFF_DISABLE;
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
	}
}
 8006636:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8006638:	2201      	movs	r2, #1
 800663a:	2104      	movs	r1, #4
 800663c:	4808      	ldr	r0, [pc, #32]	@ (8006660 <TMC2209_disable+0x34>)
 800663e:	f7fb fcdc 	bl	8001ffa <HAL_GPIO_WritePin>
		Driver_Enable = FALSE;
 8006642:	2100      	movs	r1, #0
 8006644:	4b05      	ldr	r3, [pc, #20]	@ (800665c <TMC2209_disable+0x30>)
 8006646:	7019      	strb	r1, [r3, #0]
		chopConfig.toff = TOFF_DISABLE;
 8006648:	4b06      	ldr	r3, [pc, #24]	@ (8006664 <TMC2209_disable+0x38>)
 800664a:	781a      	ldrb	r2, [r3, #0]
 800664c:	f361 0203 	bfi	r2, r1, #0, #4
 8006650:	701a      	strb	r2, [r3, #0]
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 8006652:	6819      	ldr	r1, [r3, #0]
 8006654:	206c      	movs	r0, #108	@ 0x6c
 8006656:	f000 fa7d 	bl	8006b54 <TMC2209_HAL_Write>
}
 800665a:	e7ec      	b.n	8006636 <TMC2209_disable+0xa>
 800665c:	2000128d 	.word	0x2000128d
 8006660:	40010800 	.word	0x40010800
 8006664:	200012a0 	.word	0x200012a0

08006668 <TMC2209_setup>:
{
 8006668:	b530      	push	{r4, r5, lr}
 800666a:	b083      	sub	sp, #12
	TMC2209_setdefault();
 800666c:	f7ff ff96 	bl	800659c <TMC2209_setdefault>
	gconfConfig.bytes = FALSE;
 8006670:	4b1f      	ldr	r3, [pc, #124]	@ (80066f0 <TMC2209_setup+0x88>)
 8006672:	2400      	movs	r4, #0
 8006674:	601c      	str	r4, [r3, #0]
	gconfConfig.I_scale_analog = TRUE;
 8006676:	781a      	ldrb	r2, [r3, #0]
 8006678:	f042 0201 	orr.w	r2, r2, #1
 800667c:	701a      	strb	r2, [r3, #0]
	gconfConfig.pdn_disable = TRUE;
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006684:	701a      	strb	r2, [r3, #0]
	gconfConfig.multistep_filt = TRUE;
 8006686:	785a      	ldrb	r2, [r3, #1]
 8006688:	f042 0201 	orr.w	r2, r2, #1
 800668c:	705a      	strb	r2, [r3, #1]
	gconfConfig.mstep_reg_select = TRUE;
 800668e:	781a      	ldrb	r2, [r3, #0]
 8006690:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006694:	701a      	strb	r2, [r3, #0]
	slaveConfig.conf = 0x00;
 8006696:	4b17      	ldr	r3, [pc, #92]	@ (80066f4 <TMC2209_setup+0x8c>)
 8006698:	785a      	ldrb	r2, [r3, #1]
 800669a:	f364 0203 	bfi	r2, r4, #0, #4
 800669e:	705a      	strb	r2, [r3, #1]
	while(timeout_cnt < TMC_SETUP_TIMEOUT){
 80066a0:	e004      	b.n	80066ac <TMC2209_setup+0x44>
			HAL_Delay(100);
 80066a2:	2064      	movs	r0, #100	@ 0x64
 80066a4:	f7fb fa14 	bl	8001ad0 <HAL_Delay>
		timeout_cnt++;
 80066a8:	3401      	adds	r4, #1
 80066aa:	b2e4      	uxtb	r4, r4
	while(timeout_cnt < TMC_SETUP_TIMEOUT){
 80066ac:	2c02      	cmp	r4, #2
 80066ae:	d811      	bhi.n	80066d4 <TMC2209_setup+0x6c>
		TMC2209_HAL_Write(TMC2209Reg_GCONF, gconfConfig.bytes);
 80066b0:	4d0f      	ldr	r5, [pc, #60]	@ (80066f0 <TMC2209_setup+0x88>)
 80066b2:	6829      	ldr	r1, [r5, #0]
 80066b4:	2000      	movs	r0, #0
 80066b6:	f000 fa4d 	bl	8006b54 <TMC2209_HAL_Write>
		TMC2209_HAL_Write(TMC2209Reg_SLAVECONF, slaveConfig.bytes);
 80066ba:	4b0e      	ldr	r3, [pc, #56]	@ (80066f4 <TMC2209_setup+0x8c>)
 80066bc:	6819      	ldr	r1, [r3, #0]
 80066be:	2003      	movs	r0, #3
 80066c0:	f000 fa48 	bl	8006b54 <TMC2209_HAL_Write>
		TMC2209_HAL_Read(TMC2209Reg_GCONF, &gconf_verif.bytes);
 80066c4:	a901      	add	r1, sp, #4
 80066c6:	2000      	movs	r0, #0
 80066c8:	f000 fa72 	bl	8006bb0 <TMC2209_HAL_Read>
		if(gconf_verif.bytes == gconfConfig.bytes) break;
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	9a01      	ldr	r2, [sp, #4]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d1e6      	bne.n	80066a2 <TMC2209_setup+0x3a>
	if(timeout_cnt >= TMC_SETUP_TIMEOUT){
 80066d4:	2c02      	cmp	r4, #2
 80066d6:	d806      	bhi.n	80066e6 <TMC2209_setup+0x7e>
	TMC2209_disable();
 80066d8:	f7ff ffa8 	bl	800662c <TMC2209_disable>
	HAL_Delay(100);
 80066dc:	2064      	movs	r0, #100	@ 0x64
 80066de:	f7fb f9f7 	bl	8001ad0 <HAL_Delay>
}
 80066e2:	b003      	add	sp, #12
 80066e4:	bd30      	pop	{r4, r5, pc}
		emmitSysError(err);
 80066e6:	2000      	movs	r0, #0
 80066e8:	f7fb f976 	bl	80019d8 <emmitSysError>
 80066ec:	e7f4      	b.n	80066d8 <TMC2209_setup+0x70>
 80066ee:	bf00      	nop
 80066f0:	2000129c 	.word	0x2000129c
 80066f4:	20001298 	.word	0x20001298

080066f8 <TMC2209_setMicrostep>:

void TMC2209_setMicrostep(TMC2209_Microstep Microstep)
{
 80066f8:	b510      	push	{r4, lr}
 80066fa:	4604      	mov	r4, r0
	chopConfig.mres = Microstep;
 80066fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006734 <TMC2209_setMicrostep+0x3c>)
 80066fe:	78da      	ldrb	r2, [r3, #3]
 8006700:	f360 0203 	bfi	r2, r0, #0, #4
 8006704:	70da      	strb	r2, [r3, #3]
	TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 8006706:	6819      	ldr	r1, [r3, #0]
 8006708:	206c      	movs	r0, #108	@ 0x6c
 800670a:	f000 fa23 	bl	8006b54 <TMC2209_HAL_Write>
	active_microstep = pow(2, abs(Microstep - TMC2209_Microsteps_1));
 800670e:	f1a4 0008 	sub.w	r0, r4, #8
 8006712:	2800      	cmp	r0, #0
 8006714:	bfb8      	it	lt
 8006716:	4240      	neglt	r0, r0
 8006718:	f7f9 fe6c 	bl	80003f4 <__aeabi_i2d>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	2000      	movs	r0, #0
 8006722:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006726:	f000 fb77 	bl	8006e18 <pow>
 800672a:	f7fa f97d 	bl	8000a28 <__aeabi_d2uiz>
 800672e:	4b02      	ldr	r3, [pc, #8]	@ (8006738 <TMC2209_setMicrostep+0x40>)
 8006730:	7018      	strb	r0, [r3, #0]
}
 8006732:	bd10      	pop	{r4, pc}
 8006734:	200012a0 	.word	0x200012a0
 8006738:	2000128c 	.word	0x2000128c

0800673c <TMC2209_velocity>:
	TMC2209_HAL_Read(TMC2209Reg_CHOPCONF, &buffer);
	*result = buffer;
}

void TMC2209_velocity(float velocity)
{
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	4604      	mov	r4, r0
	float frequency = 0.0f;
	uint16_t desired_period = 0;
	uint16_t prescaller = TMC2209_DEFAULT_PRESCALLER;

	if(vel_now == velocity) return;
 8006740:	4601      	mov	r1, r0
 8006742:	4b24      	ldr	r3, [pc, #144]	@ (80067d4 <TMC2209_velocity+0x98>)
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	f7fa fc81 	bl	800104c <__aeabi_fcmpeq>
 800674a:	2800      	cmp	r0, #0
 800674c:	d135      	bne.n	80067ba <TMC2209_velocity+0x7e>
	if(velocity < 0.01f) velocity = 0.01f;
 800674e:	4922      	ldr	r1, [pc, #136]	@ (80067d8 <TMC2209_velocity+0x9c>)
 8006750:	4620      	mov	r0, r4
 8006752:	f7fa fc85 	bl	8001060 <__aeabi_fcmplt>
 8006756:	b100      	cbz	r0, 800675a <TMC2209_velocity+0x1e>
 8006758:	4c1f      	ldr	r4, [pc, #124]	@ (80067d8 <TMC2209_velocity+0x9c>)
	if(velocity <= 0) {
 800675a:	2100      	movs	r1, #0
 800675c:	4620      	mov	r0, r4
 800675e:	f7fa fc89 	bl	8001074 <__aeabi_fcmple>
 8006762:	bb58      	cbnz	r0, 80067bc <TMC2209_velocity+0x80>
	uint16_t prescaller = TMC2209_DEFAULT_PRESCALLER;
 8006764:	2648      	movs	r6, #72	@ 0x48
		PWM_Pulse_Complete = TRUE;
		return;
	}

	while(TRUE){
		frequency  = (velocity * (STEP_PER_REV * active_microstep)) / 60;
 8006766:	4b1d      	ldr	r3, [pc, #116]	@ (80067dc <TMC2209_velocity+0xa0>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	20c8      	movs	r0, #200	@ 0xc8
 800676c:	fb03 f000 	mul.w	r0, r3, r0
 8006770:	f7fa fa84 	bl	8000c7c <__aeabi_i2f>
 8006774:	4621      	mov	r1, r4
 8006776:	f7fa fad5 	bl	8000d24 <__aeabi_fmul>
 800677a:	4919      	ldr	r1, [pc, #100]	@ (80067e0 <TMC2209_velocity+0xa4>)
 800677c:	f7fa fb86 	bl	8000e8c <__aeabi_fdiv>
 8006780:	4605      	mov	r5, r0
		if(((TMC2209_BASE_FREQ / prescaller) / frequency) > MAX_CNT_PERIOD){
 8006782:	4818      	ldr	r0, [pc, #96]	@ (80067e4 <TMC2209_velocity+0xa8>)
 8006784:	fb90 f0f6 	sdiv	r0, r0, r6
 8006788:	f7fa fa78 	bl	8000c7c <__aeabi_i2f>
 800678c:	4629      	mov	r1, r5
 800678e:	f7fa fb7d 	bl	8000e8c <__aeabi_fdiv>
 8006792:	4605      	mov	r5, r0
 8006794:	4914      	ldr	r1, [pc, #80]	@ (80067e8 <TMC2209_velocity+0xac>)
 8006796:	f7fa fc81 	bl	800109c <__aeabi_fcmpgt>
 800679a:	b9b8      	cbnz	r0, 80067cc <TMC2209_velocity+0x90>
			prescaller += TMC2209_DEFAULT_PRESCALLER;
			continue;
		}
		desired_period = (uint16_t)round((TMC2209_BASE_FREQ / prescaller) / frequency);
 800679c:	4628      	mov	r0, r5
 800679e:	f7f9 fe3b 	bl	8000418 <__aeabi_f2d>
 80067a2:	f000 fcc5 	bl	8007130 <round>
 80067a6:	f7fa f93f 	bl	8000a28 <__aeabi_d2uiz>
 80067aa:	b280      	uxth	r0, r0
		break;
	}

	__HAL_TIM_SET_PRESCALER(&htim2, prescaller);
 80067ac:	4b0f      	ldr	r3, [pc, #60]	@ (80067ec <TMC2209_velocity+0xb0>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	6296      	str	r6, [r2, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim2, desired_period);
 80067b2:	62d0      	str	r0, [r2, #44]	@ 0x2c
 80067b4:	60d8      	str	r0, [r3, #12]
	vel_now = velocity;
 80067b6:	4b07      	ldr	r3, [pc, #28]	@ (80067d4 <TMC2209_velocity+0x98>)
 80067b8:	601c      	str	r4, [r3, #0]
}
 80067ba:	bd70      	pop	{r4, r5, r6, pc}
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80067bc:	2100      	movs	r1, #0
 80067be:	480b      	ldr	r0, [pc, #44]	@ (80067ec <TMC2209_velocity+0xb0>)
 80067c0:	f7fe f982 	bl	8004ac8 <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 80067c4:	4b0a      	ldr	r3, [pc, #40]	@ (80067f0 <TMC2209_velocity+0xb4>)
 80067c6:	2201      	movs	r2, #1
 80067c8:	701a      	strb	r2, [r3, #0]
		return;
 80067ca:	e7f6      	b.n	80067ba <TMC2209_velocity+0x7e>
			prescaller += TMC2209_DEFAULT_PRESCALLER;
 80067cc:	3648      	adds	r6, #72	@ 0x48
 80067ce:	b2b6      	uxth	r6, r6
		frequency  = (velocity * (STEP_PER_REV * active_microstep)) / 60;
 80067d0:	e7c9      	b.n	8006766 <TMC2209_velocity+0x2a>
 80067d2:	bf00      	nop
 80067d4:	20001288 	.word	0x20001288
 80067d8:	3c23d70a 	.word	0x3c23d70a
 80067dc:	2000128c 	.word	0x2000128c
 80067e0:	42700000 	.word	0x42700000
 80067e4:	044aa200 	.word	0x044aa200
 80067e8:	477fff00 	.word	0x477fff00
 80067ec:	200003a4 	.word	0x200003a4
 80067f0:	20000018 	.word	0x20000018

080067f4 <TMC2209_move>:

void TMC2209_move(){
 80067f4:	b508      	push	{r3, lr}
	if(isBrake) return;
 80067f6:	4b08      	ldr	r3, [pc, #32]	@ (8006818 <TMC2209_move+0x24>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	b91b      	cbnz	r3, 8006804 <TMC2209_move+0x10>
	if(PWM_Pulse_Complete == TRUE){
 80067fc:	4b07      	ldr	r3, [pc, #28]	@ (800681c <TMC2209_move+0x28>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d000      	beq.n	8006806 <TMC2209_move+0x12>
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
		PWM_Pulse_Complete = FALSE;
	}
}
 8006804:	bd08      	pop	{r3, pc}
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8006806:	2100      	movs	r1, #0
 8006808:	4805      	ldr	r0, [pc, #20]	@ (8006820 <TMC2209_move+0x2c>)
 800680a:	f7fe f8b7 	bl	800497c <HAL_TIM_PWM_Start_IT>
		PWM_Pulse_Complete = FALSE;
 800680e:	4b03      	ldr	r3, [pc, #12]	@ (800681c <TMC2209_move+0x28>)
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	e7f6      	b.n	8006804 <TMC2209_move+0x10>
 8006816:	bf00      	nop
 8006818:	20001260 	.word	0x20001260
 800681c:	20000018 	.word	0x20000018
 8006820:	200003a4 	.word	0x200003a4

08006824 <TMC2209_stop>:

void TMC2209_stop(){
 8006824:	b508      	push	{r3, lr}
	if(PWM_Pulse_Complete == FALSE){
 8006826:	4b06      	ldr	r3, [pc, #24]	@ (8006840 <TMC2209_stop+0x1c>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	b103      	cbz	r3, 800682e <TMC2209_stop+0xa>
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
		PWM_Pulse_Complete = TRUE;
	}
}
 800682c:	bd08      	pop	{r3, pc}
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 800682e:	2100      	movs	r1, #0
 8006830:	4804      	ldr	r0, [pc, #16]	@ (8006844 <TMC2209_stop+0x20>)
 8006832:	f7fe f949 	bl	8004ac8 <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 8006836:	4b02      	ldr	r3, [pc, #8]	@ (8006840 <TMC2209_stop+0x1c>)
 8006838:	2201      	movs	r2, #1
 800683a:	701a      	strb	r2, [r3, #0]
}
 800683c:	e7f6      	b.n	800682c <TMC2209_stop+0x8>
 800683e:	bf00      	nop
 8006840:	20000018 	.word	0x20000018
 8006844:	200003a4 	.word	0x200003a4

08006848 <TMC2209_direction>:

		isBrake = FALSE;
	}
}
void TMC2209_direction(uint8_t direction){
	if(direction == rotation_dir) return;
 8006848:	4b0e      	ldr	r3, [pc, #56]	@ (8006884 <TMC2209_direction+0x3c>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	4283      	cmp	r3, r0
 800684e:	d017      	beq.n	8006880 <TMC2209_direction+0x38>
void TMC2209_direction(uint8_t direction){
 8006850:	b510      	push	{r4, lr}
 8006852:	4604      	mov	r4, r0

	if(direction == TMC2209_ROT_FWD){
 8006854:	b110      	cbz	r0, 800685c <TMC2209_direction+0x14>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
		rotation_dir = TMC2209_ROT_FWD;
	}
	if(direction == TMC2209_ROT_REV){
 8006856:	2c01      	cmp	r4, #1
 8006858:	d009      	beq.n	800686e <TMC2209_direction+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
		rotation_dir = TMC2209_ROT_REV;
	}
}
 800685a:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800685c:	2200      	movs	r2, #0
 800685e:	2102      	movs	r1, #2
 8006860:	4809      	ldr	r0, [pc, #36]	@ (8006888 <TMC2209_direction+0x40>)
 8006862:	f7fb fbca 	bl	8001ffa <HAL_GPIO_WritePin>
		rotation_dir = TMC2209_ROT_FWD;
 8006866:	4b07      	ldr	r3, [pc, #28]	@ (8006884 <TMC2209_direction+0x3c>)
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	e7f3      	b.n	8006856 <TMC2209_direction+0xe>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800686e:	2201      	movs	r2, #1
 8006870:	2102      	movs	r1, #2
 8006872:	4805      	ldr	r0, [pc, #20]	@ (8006888 <TMC2209_direction+0x40>)
 8006874:	f7fb fbc1 	bl	8001ffa <HAL_GPIO_WritePin>
		rotation_dir = TMC2209_ROT_REV;
 8006878:	4b02      	ldr	r3, [pc, #8]	@ (8006884 <TMC2209_direction+0x3c>)
 800687a:	2201      	movs	r2, #1
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	e7ec      	b.n	800685a <TMC2209_direction+0x12>
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20001284 	.word	0x20001284
 8006888:	40010800 	.word	0x40010800
 800688c:	00000000 	.word	0x00000000

08006890 <PID_controller>:

void PID_controller(int32_t* setpoint, int32_t *current, float* result){
 8006890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006894:	4607      	mov	r7, r0
 8006896:	460d      	mov	r5, r1
 8006898:	4616      	mov	r6, r2
	uint32_t time_now = HAL_GetTick();
 800689a:	f7fb f913 	bl	8001ac4 <HAL_GetTick>
 800689e:	4604      	mov	r4, r0
	if(time_now - pid_last_time >= PID_SAMPLING){
 80068a0:	4b57      	ldr	r3, [pc, #348]	@ (8006a00 <PID_controller+0x170>)
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	1a20      	subs	r0, r4, r0
 80068a6:	2809      	cmp	r0, #9
 80068a8:	f240 809b 	bls.w	80069e2 <PID_controller+0x152>
		float delta_time = (float)(time_now - pid_last_time) / 1000.0f;
 80068ac:	f7fa f9e2 	bl	8000c74 <__aeabi_ui2f>
 80068b0:	4954      	ldr	r1, [pc, #336]	@ (8006a04 <PID_controller+0x174>)
 80068b2:	f7fa faeb 	bl	8000e8c <__aeabi_fdiv>
 80068b6:	4680      	mov	r8, r0
		pid_error = (float)(*setpoint - *current);
 80068b8:	6838      	ldr	r0, [r7, #0]
 80068ba:	682b      	ldr	r3, [r5, #0]
 80068bc:	1ac0      	subs	r0, r0, r3
 80068be:	f7fa f9dd 	bl	8000c7c <__aeabi_i2f>
 80068c2:	4605      	mov	r5, r0
 80068c4:	4b50      	ldr	r3, [pc, #320]	@ (8006a08 <PID_controller+0x178>)
 80068c6:	6018      	str	r0, [r3, #0]

		if(fabs(pid_error) < PID_DEADBAND){
 80068c8:	f020 4700 	bic.w	r7, r0, #2147483648	@ 0x80000000
 80068cc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80068d0:	4638      	mov	r0, r7
 80068d2:	f7fa fbc5 	bl	8001060 <__aeabi_fcmplt>
 80068d6:	b9e8      	cbnz	r0, 8006914 <PID_controller+0x84>
			*result = 0;
			pid_last_time = time_now;
			return;
		}

		if(fabs(pid_error) > PID_INTEGRAL_TRESHOLD){
 80068d8:	494c      	ldr	r1, [pc, #304]	@ (8006a0c <PID_controller+0x17c>)
 80068da:	4638      	mov	r0, r7
 80068dc:	f7fa fbde 	bl	800109c <__aeabi_fcmpgt>
 80068e0:	b1e8      	cbz	r0, 800691e <PID_controller+0x8e>
			pid_integral += pid_error * delta_time;
 80068e2:	4641      	mov	r1, r8
 80068e4:	4628      	mov	r0, r5
 80068e6:	f7fa fa1d 	bl	8000d24 <__aeabi_fmul>
 80068ea:	4f49      	ldr	r7, [pc, #292]	@ (8006a10 <PID_controller+0x180>)
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	f7fa f911 	bl	8000b14 <__addsf3>
 80068f2:	6038      	str	r0, [r7, #0]
			if(pid_integral > PID_INTEGRAL_MAX) pid_integral = PID_INTEGRAL_MAX;
 80068f4:	4947      	ldr	r1, [pc, #284]	@ (8006a14 <PID_controller+0x184>)
 80068f6:	f7fa fbd1 	bl	800109c <__aeabi_fcmpgt>
 80068fa:	b108      	cbz	r0, 8006900 <PID_controller+0x70>
 80068fc:	4a45      	ldr	r2, [pc, #276]	@ (8006a14 <PID_controller+0x184>)
 80068fe:	603a      	str	r2, [r7, #0]
			if(pid_integral < PID_INTEGRAL_MIN) pid_integral = PID_INTEGRAL_MIN;
 8006900:	2100      	movs	r1, #0
 8006902:	4b43      	ldr	r3, [pc, #268]	@ (8006a10 <PID_controller+0x180>)
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	f7fa fbab 	bl	8001060 <__aeabi_fcmplt>
 800690a:	b170      	cbz	r0, 800692a <PID_controller+0x9a>
 800690c:	4b40      	ldr	r3, [pc, #256]	@ (8006a10 <PID_controller+0x180>)
 800690e:	2200      	movs	r2, #0
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e00a      	b.n	800692a <PID_controller+0x9a>
			*result = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	6033      	str	r3, [r6, #0]
			pid_last_time = time_now;
 8006918:	4b39      	ldr	r3, [pc, #228]	@ (8006a00 <PID_controller+0x170>)
 800691a:	601c      	str	r4, [r3, #0]
			return;
 800691c:	e061      	b.n	80069e2 <PID_controller+0x152>
		}else{
			pid_integral *= 0.9f;
 800691e:	4f3c      	ldr	r7, [pc, #240]	@ (8006a10 <PID_controller+0x180>)
 8006920:	493d      	ldr	r1, [pc, #244]	@ (8006a18 <PID_controller+0x188>)
 8006922:	6838      	ldr	r0, [r7, #0]
 8006924:	f7fa f9fe 	bl	8000d24 <__aeabi_fmul>
 8006928:	6038      	str	r0, [r7, #0]
		}

		float direvative = (pid_error - pid_last_error) / delta_time;
 800692a:	f8df a0f0 	ldr.w	sl, [pc, #240]	@ 8006a1c <PID_controller+0x18c>
 800692e:	f8da 1000 	ldr.w	r1, [sl]
 8006932:	4628      	mov	r0, r5
 8006934:	f7fa f8ec 	bl	8000b10 <__aeabi_fsub>
 8006938:	4641      	mov	r1, r8
 800693a:	f7fa faa7 	bl	8000e8c <__aeabi_fdiv>
 800693e:	4681      	mov	r9, r0
		pid_direvative = (pid_direvative * 0.9f) + (direvative * 0.1f);
 8006940:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 8006a20 <PID_controller+0x190>
 8006944:	4934      	ldr	r1, [pc, #208]	@ (8006a18 <PID_controller+0x188>)
 8006946:	f8d8 0000 	ldr.w	r0, [r8]
 800694a:	f7fa f9eb 	bl	8000d24 <__aeabi_fmul>
 800694e:	4607      	mov	r7, r0
 8006950:	4934      	ldr	r1, [pc, #208]	@ (8006a24 <PID_controller+0x194>)
 8006952:	4648      	mov	r0, r9
 8006954:	f7fa f9e6 	bl	8000d24 <__aeabi_fmul>
 8006958:	4601      	mov	r1, r0
 800695a:	4638      	mov	r0, r7
 800695c:	f7fa f8da 	bl	8000b14 <__addsf3>
 8006960:	4607      	mov	r7, r0
 8006962:	f8c8 0000 	str.w	r0, [r8]

		pid_output = (PID_KP * pid_error) + (PID_KI * pid_integral) + (PID_KD * pid_direvative);
 8006966:	4628      	mov	r0, r5
 8006968:	f7f9 fd56 	bl	8000418 <__aeabi_f2d>
 800696c:	a31e      	add	r3, pc, #120	@ (adr r3, 80069e8 <PID_controller+0x158>)
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	f7f9 fda9 	bl	80004c8 <__aeabi_dmul>
 8006976:	4680      	mov	r8, r0
 8006978:	4689      	mov	r9, r1
 800697a:	4b25      	ldr	r3, [pc, #148]	@ (8006a10 <PID_controller+0x180>)
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	f7f9 fd4b 	bl	8000418 <__aeabi_f2d>
 8006982:	a31b      	add	r3, pc, #108	@ (adr r3, 80069f0 <PID_controller+0x160>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7f9 fd9e 	bl	80004c8 <__aeabi_dmul>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4640      	mov	r0, r8
 8006992:	4649      	mov	r1, r9
 8006994:	f7f9 fbe2 	bl	800015c <__adddf3>
 8006998:	4680      	mov	r8, r0
 800699a:	4689      	mov	r9, r1
 800699c:	4638      	mov	r0, r7
 800699e:	f7f9 fd3b 	bl	8000418 <__aeabi_f2d>
 80069a2:	a315      	add	r3, pc, #84	@ (adr r3, 80069f8 <PID_controller+0x168>)
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	f7f9 fd8e 	bl	80004c8 <__aeabi_dmul>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4640      	mov	r0, r8
 80069b2:	4649      	mov	r1, r9
 80069b4:	f7f9 fbd2 	bl	800015c <__adddf3>
 80069b8:	f7fa f856 	bl	8000a68 <__aeabi_d2f>
 80069bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006a28 <PID_controller+0x198>)
 80069be:	6018      	str	r0, [r3, #0]

		pid_last_error = pid_error;
 80069c0:	f8ca 5000 	str.w	r5, [sl]
		pid_last_time = time_now;
 80069c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006a00 <PID_controller+0x170>)
 80069c6:	601c      	str	r4, [r3, #0]

		*result = fmaxf(0.0f, fminf(1.0f, fabs(pid_output / PID_MAX)));
 80069c8:	490e      	ldr	r1, [pc, #56]	@ (8006a04 <PID_controller+0x174>)
 80069ca:	f7fa fa5f 	bl	8000e8c <__aeabi_fdiv>
 80069ce:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80069d2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80069d6:	f000 faa6 	bl	8006f26 <fminf>
 80069da:	2100      	movs	r1, #0
 80069dc:	f000 fa8e 	bl	8006efc <fmaxf>
 80069e0:	6030      	str	r0, [r6, #0]
	}
}
 80069e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e6:	bf00      	nop
 80069e8:	39405e45 	.word	0x39405e45
 80069ec:	40208aac 	.word	0x40208aac
 80069f0:	f8b028f6 	.word	0xf8b028f6
 80069f4:	4028e5e4 	.word	0x4028e5e4
 80069f8:	5d88f133 	.word	0x5d88f133
 80069fc:	4034a834 	.word	0x4034a834
 8006a00:	20001264 	.word	0x20001264
 8006a04:	447a0000 	.word	0x447a0000
 8006a08:	2000127c 	.word	0x2000127c
 8006a0c:	42480000 	.word	0x42480000
 8006a10:	20001274 	.word	0x20001274
 8006a14:	49742400 	.word	0x49742400
 8006a18:	3f666666 	.word	0x3f666666
 8006a1c:	20001278 	.word	0x20001278
 8006a20:	20001270 	.word	0x20001270
 8006a24:	3dcccccd 	.word	0x3dcccccd
 8006a28:	2000126c 	.word	0x2000126c

08006a2c <TMC2209_watchPosition>:
void TMC2209_watchPosition(int32_t* target, int32_t* counter, float* speed){
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	4605      	mov	r5, r0
 8006a30:	460c      	mov	r4, r1
 8006a32:	4616      	mov	r6, r2

	PID_controller(target, counter, &pid_fraction);
 8006a34:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab4 <TMC2209_watchPosition+0x88>)
 8006a36:	f7ff ff2b 	bl	8006890 <PID_controller>

	int32_t error = *target - *counter;
 8006a3a:	6829      	ldr	r1, [r5, #0]
 8006a3c:	6823      	ldr	r3, [r4, #0]
	if(error == 0){
 8006a3e:	4299      	cmp	r1, r3
 8006a40:	d01e      	beq.n	8006a80 <TMC2209_watchPosition+0x54>
//		TMC2209_brake();
		*speed = 0;
		return;
	}else{
//		TMC2209_unBrake();
		TMC2209_move();
 8006a42:	f7ff fed7 	bl	80067f4 <TMC2209_move>
	}

	if(*counter > *target) TMC2209_direction(TMC2209_ROT_FWD);
 8006a46:	6822      	ldr	r2, [r4, #0]
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	dc1d      	bgt.n	8006a8a <TMC2209_watchPosition+0x5e>
	if(*counter < *target) TMC2209_direction(TMC2209_ROT_REV);
 8006a4e:	6822      	ldr	r2, [r4, #0]
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	db1d      	blt.n	8006a92 <TMC2209_watchPosition+0x66>

	if(abs(*target - *counter) > 100){
 8006a56:	682b      	ldr	r3, [r5, #0]
 8006a58:	6822      	ldr	r2, [r4, #0]
 8006a5a:	1a9b      	subs	r3, r3, r2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	bfb8      	it	lt
 8006a60:	425b      	neglt	r3, r3
 8006a62:	2b64      	cmp	r3, #100	@ 0x64
 8006a64:	dd1d      	ble.n	8006aa2 <TMC2209_watchPosition+0x76>
		if(active_microstep != TMC2209_Microsteps_1){
 8006a66:	4b14      	ldr	r3, [pc, #80]	@ (8006ab8 <TMC2209_watchPosition+0x8c>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b08      	cmp	r3, #8
 8006a6c:	d115      	bne.n	8006a9a <TMC2209_watchPosition+0x6e>
		if(active_microstep != TMC2209_Microsteps_64){
			TMC2209_setMicrostep(TMC2209_Microsteps_64);
		}
	}

	*speed = pid_fraction * MAX_SPEED;
 8006a6e:	4913      	ldr	r1, [pc, #76]	@ (8006abc <TMC2209_watchPosition+0x90>)
 8006a70:	4b10      	ldr	r3, [pc, #64]	@ (8006ab4 <TMC2209_watchPosition+0x88>)
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	f7fa f956 	bl	8000d24 <__aeabi_fmul>
 8006a78:	6030      	str	r0, [r6, #0]
	TMC2209_velocity(*speed);
 8006a7a:	f7ff fe5f 	bl	800673c <TMC2209_velocity>
}
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
		TMC2209_stop();
 8006a80:	f7ff fed0 	bl	8006824 <TMC2209_stop>
		*speed = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	6033      	str	r3, [r6, #0]
		return;
 8006a88:	e7f9      	b.n	8006a7e <TMC2209_watchPosition+0x52>
	if(*counter > *target) TMC2209_direction(TMC2209_ROT_FWD);
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	f7ff fedc 	bl	8006848 <TMC2209_direction>
 8006a90:	e7dd      	b.n	8006a4e <TMC2209_watchPosition+0x22>
	if(*counter < *target) TMC2209_direction(TMC2209_ROT_REV);
 8006a92:	2001      	movs	r0, #1
 8006a94:	f7ff fed8 	bl	8006848 <TMC2209_direction>
 8006a98:	e7dd      	b.n	8006a56 <TMC2209_watchPosition+0x2a>
			TMC2209_setMicrostep(TMC2209_Microsteps_1);
 8006a9a:	2008      	movs	r0, #8
 8006a9c:	f7ff fe2c 	bl	80066f8 <TMC2209_setMicrostep>
 8006aa0:	e7e5      	b.n	8006a6e <TMC2209_watchPosition+0x42>
		if(active_microstep != TMC2209_Microsteps_64){
 8006aa2:	4b05      	ldr	r3, [pc, #20]	@ (8006ab8 <TMC2209_watchPosition+0x8c>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d0e1      	beq.n	8006a6e <TMC2209_watchPosition+0x42>
			TMC2209_setMicrostep(TMC2209_Microsteps_64);
 8006aaa:	2002      	movs	r0, #2
 8006aac:	f7ff fe24 	bl	80066f8 <TMC2209_setMicrostep>
 8006ab0:	e7dd      	b.n	8006a6e <TMC2209_watchPosition+0x42>
 8006ab2:	bf00      	nop
 8006ab4:	20001268 	.word	0x20001268
 8006ab8:	2000128c 	.word	0x2000128c
 8006abc:	43820000 	.word	0x43820000

08006ac0 <HAL_TIM_PWM_PulseFinishedCallback>:
	HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);

}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM2) {
 8006ac0:	6803      	ldr	r3, [r0, #0]
 8006ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ac6:	d000      	beq.n	8006aca <HAL_TIM_PWM_PulseFinishedCallback+0xa>
			oneStepMove_start = FALSE;
		}

		stepCounter ++;
	}
}
 8006ac8:	4770      	bx	lr
		if(oneStepMove_start){
 8006aca:	4b07      	ldr	r3, [pc, #28]	@ (8006ae8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	b12b      	cbz	r3, 8006adc <HAL_TIM_PWM_PulseFinishedCallback+0x1c>
			oneStepMove_finish = TRUE;
 8006ad0:	4b06      	ldr	r3, [pc, #24]	@ (8006aec <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	701a      	strb	r2, [r3, #0]
			oneStepMove_start = FALSE;
 8006ad6:	4b04      	ldr	r3, [pc, #16]	@ (8006ae8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	701a      	strb	r2, [r3, #0]
		stepCounter ++;
 8006adc:	4a04      	ldr	r2, [pc, #16]	@ (8006af0 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8006ade:	6813      	ldr	r3, [r2, #0]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	6013      	str	r3, [r2, #0]
}
 8006ae4:	e7f0      	b.n	8006ac8 <HAL_TIM_PWM_PulseFinishedCallback+0x8>
 8006ae6:	bf00      	nop
 8006ae8:	20001261 	.word	0x20001261
 8006aec:	20001262 	.word	0x20001262
 8006af0:	20001280 	.word	0x20001280

08006af4 <calculateCRC>:
#include "../Inc/TMC2209_HAL.h"

extern UART_HandleTypeDef huart1;

static void calculateCRC(uint8_t* datagram, uint8_t datagram_len)
{
 8006af4:	b530      	push	{r4, r5, lr}
 8006af6:	4604      	mov	r4, r0
 8006af8:	460d      	mov	r5, r1
	int i,j;
	uint8_t *crc = datagram + (datagram_len - 1);
 8006afa:	1e4b      	subs	r3, r1, #1
 8006afc:	eb00 0e03 	add.w	lr, r0, r3
	uint8_t currentByte;
	*crc = 0;
 8006b00:	2100      	movs	r1, #0
 8006b02:	54c1      	strb	r1, [r0, r3]
	for (i = 0; i < (datagram_len - 1); i++) {
 8006b04:	e015      	b.n	8006b32 <calculateCRC+0x3e>
		currentByte = datagram[i];
		for (j = 0; j < 8; j++) {
			if ((*crc >> 7) ^ (currentByte & 0x01))
				*crc = (*crc << 1) ^ 0x07;
			else
				*crc = (*crc << 1);
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	f88e 3000 	strb.w	r3, [lr]
			currentByte = currentByte >> 1;
 8006b0c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
		for (j = 0; j < 8; j++) {
 8006b10:	3201      	adds	r2, #1
 8006b12:	2a07      	cmp	r2, #7
 8006b14:	dc0c      	bgt.n	8006b30 <calculateCRC+0x3c>
			if ((*crc >> 7) ^ (currentByte & 0x01))
 8006b16:	f89e 3000 	ldrb.w	r3, [lr]
 8006b1a:	f00c 0001 	and.w	r0, ip, #1
 8006b1e:	ebb0 1fd3 	cmp.w	r0, r3, lsr #7
 8006b22:	d0f0      	beq.n	8006b06 <calculateCRC+0x12>
				*crc = (*crc << 1) ^ 0x07;
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	f083 0307 	eor.w	r3, r3, #7
 8006b2a:	f88e 3000 	strb.w	r3, [lr]
 8006b2e:	e7ed      	b.n	8006b0c <calculateCRC+0x18>
	for (i = 0; i < (datagram_len - 1); i++) {
 8006b30:	3101      	adds	r1, #1
 8006b32:	1e6b      	subs	r3, r5, #1
 8006b34:	428b      	cmp	r3, r1
 8006b36:	dd03      	ble.n	8006b40 <calculateCRC+0x4c>
		currentByte = datagram[i];
 8006b38:	f814 c001 	ldrb.w	ip, [r4, r1]
		for (j = 0; j < 8; j++) {
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	e7e8      	b.n	8006b12 <calculateCRC+0x1e>
		}
	}
}
 8006b40:	bd30      	pop	{r4, r5, pc}

08006b42 <byteswap>:
static void byteswap (uint8_t data[4])
{
    uint8_t tmp;

    tmp = data[0];
 8006b42:	7803      	ldrb	r3, [r0, #0]
    data[0] = data[3];
 8006b44:	78c2      	ldrb	r2, [r0, #3]
 8006b46:	7002      	strb	r2, [r0, #0]
    data[3] = tmp;
 8006b48:	70c3      	strb	r3, [r0, #3]
    tmp = data[1];
 8006b4a:	7843      	ldrb	r3, [r0, #1]
    data[1] = data[2];
 8006b4c:	7882      	ldrb	r2, [r0, #2]
 8006b4e:	7042      	strb	r2, [r0, #1]
    data[2] = tmp;
 8006b50:	7083      	strb	r3, [r0, #2]
}
 8006b52:	4770      	bx	lr

08006b54 <TMC2209_HAL_Write>:

HAL_StatusTypeDef TMC2209_HAL_Write(uint8_t reg, uint32_t data)
{
 8006b54:	b510      	push	{r4, lr}
 8006b56:	b082      	sub	sp, #8
	TMC2209_Write_Datagram_t datagram;
	datagram.data = 0;
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e9cd 2300 	strd	r2, r3, [sp]
	datagram.message.sync = 0x05;
 8006b60:	2305      	movs	r3, #5
 8006b62:	f88d 3000 	strb.w	r3, [sp]
	datagram.message.slave = 0x00;
	datagram.message.address.idx = reg;
 8006b66:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8006b6a:	f360 0306 	bfi	r3, r0, #0, #7
 8006b6e:	f88d 3002 	strb.w	r3, [sp, #2]
	datagram.message.address.write = REG_WRITE;
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b78:	f88d 3002 	strb.w	r3, [sp, #2]
	datagram.message.payload.value = data;
 8006b7c:	f8cd 1003 	str.w	r1, [sp, #3]
	byteswap(datagram.message.payload.data);
 8006b80:	f10d 0003 	add.w	r0, sp, #3
 8006b84:	f7ff ffdd 	bl	8006b42 <byteswap>

	calculateCRC(datagram.bytes, sizeof(TMC2209_Write_Datagram_t));
 8006b88:	2108      	movs	r1, #8
 8006b8a:	4668      	mov	r0, sp
 8006b8c:	f7ff ffb2 	bl	8006af4 <calculateCRC>
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8006b90:	4c06      	ldr	r4, [pc, #24]	@ (8006bac <TMC2209_HAL_Write+0x58>)
 8006b92:	4620      	mov	r0, r4
 8006b94:	f7fe fbf8 	bl	8005388 <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, datagram.bytes, sizeof(TMC2209_Write_Datagram_t), HAL_MAX_DELAY);
 8006b98:	f04f 33ff 	mov.w	r3, #4294967295
 8006b9c:	2208      	movs	r2, #8
 8006b9e:	4669      	mov	r1, sp
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f7fe f954 	bl	8004e4e <HAL_UART_Transmit>

	return status;
}
 8006ba6:	b002      	add	sp, #8
 8006ba8:	bd10      	pop	{r4, pc}
 8006baa:	bf00      	nop
 8006bac:	2000035c 	.word	0x2000035c

08006bb0 <TMC2209_HAL_Read>:
HAL_StatusTypeDef TMC2209_HAL_Read(uint8_t reg, uint32_t* result)
{
 8006bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	460e      	mov	r6, r1
	TMC2209_Read_Datagram_t datagram;
	TMC2209_Write_Datagram_t res;

	datagram.data = 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	9305      	str	r3, [sp, #20]
	res.data = 0;
 8006bba:	9303      	str	r3, [sp, #12]
 8006bbc:	9304      	str	r3, [sp, #16]
	datagram.message.sync = 0x05;
 8006bbe:	2305      	movs	r3, #5
 8006bc0:	f88d 3014 	strb.w	r3, [sp, #20]
	datagram.message.slave = 0x00;
	datagram.message.address.idx = reg & 0x7F;
 8006bc4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006bc8:	f360 0306 	bfi	r3, r0, #0, #7
 8006bcc:	f88d 3016 	strb.w	r3, [sp, #22]
	datagram.message.address.write = REG_READ;
	calculateCRC(datagram.bytes, sizeof(TMC2209_Read_Datagram_t));
 8006bd0:	2104      	movs	r1, #4
 8006bd2:	a805      	add	r0, sp, #20
 8006bd4:	f7ff ff8e 	bl	8006af4 <calculateCRC>

	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8006bd8:	4c1f      	ldr	r4, [pc, #124]	@ (8006c58 <TMC2209_HAL_Read+0xa8>)
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f7fe fbd4 	bl	8005388 <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef wstatus = HAL_UART_Transmit(&huart1, datagram.bytes, sizeof(TMC2209_Read_Datagram_t), HAL_MAX_DELAY);
 8006be0:	f04f 33ff 	mov.w	r3, #4294967295
 8006be4:	2204      	movs	r2, #4
 8006be6:	a905      	add	r1, sp, #20
 8006be8:	4620      	mov	r0, r4
 8006bea:	f7fe f930 	bl	8004e4e <HAL_UART_Transmit>
	if(wstatus == HAL_OK){
 8006bee:	4607      	mov	r7, r0
 8006bf0:	bb08      	cbnz	r0, 8006c36 <TMC2209_HAL_Read+0x86>
		uint8_t buffer[8] = {0};
 8006bf2:	2400      	movs	r4, #0
 8006bf4:	9401      	str	r4, [sp, #4]
 8006bf6:	9402      	str	r4, [sp, #8]
		for(int i = 0; i < sizeof(buffer) ; i++){
 8006bf8:	e00b      	b.n	8006c12 <TMC2209_HAL_Read+0x62>
			HAL_HalfDuplex_EnableReceiver(&huart1);
 8006bfa:	4d17      	ldr	r5, [pc, #92]	@ (8006c58 <TMC2209_HAL_Read+0xa8>)
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f7fe fbde 	bl	80053be <HAL_HalfDuplex_EnableReceiver>
			HAL_UART_Receive(&huart1, &buffer[i], sizeof(buffer), 100);
 8006c02:	2364      	movs	r3, #100	@ 0x64
 8006c04:	2208      	movs	r2, #8
 8006c06:	a901      	add	r1, sp, #4
 8006c08:	4421      	add	r1, r4
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f7fe f985 	bl	8004f1a <HAL_UART_Receive>
		for(int i = 0; i < sizeof(buffer) ; i++){
 8006c10:	3401      	adds	r4, #1
 8006c12:	2c07      	cmp	r4, #7
 8006c14:	d9f1      	bls.n	8006bfa <TMC2209_HAL_Read+0x4a>
		}

		memcpy(res.bytes, buffer, sizeof(buffer));
 8006c16:	ab03      	add	r3, sp, #12
 8006c18:	aa01      	add	r2, sp, #4
 8006c1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c1e:	e883 0003 	stmia.w	r3, {r0, r1}
		uint8_t crc = res.message.crc;
 8006c22:	f89d 4013 	ldrb.w	r4, [sp, #19]
		calculateCRC(res.bytes, sizeof(	TMC2209_Write_Datagram_t));
 8006c26:	2108      	movs	r1, #8
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff ff63 	bl	8006af4 <calculateCRC>
		if(res.message.slave == 0xFF && crc == res.message.crc){
 8006c2e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8006c32:	2bff      	cmp	r3, #255	@ 0xff
 8006c34:	d002      	beq.n	8006c3c <TMC2209_HAL_Read+0x8c>
			byteswap(temp_var);
			*result = *(uint32_t*)temp_var;
		}
	}
	return wstatus;
}
 8006c36:	4638      	mov	r0, r7
 8006c38:	b007      	add	sp, #28
 8006c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(res.message.slave == 0xFF && crc == res.message.crc){
 8006c3c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006c40:	42a3      	cmp	r3, r4
 8006c42:	d1f8      	bne.n	8006c36 <TMC2209_HAL_Read+0x86>
			memcpy(temp_var,res.message.payload.data, sizeof(temp_var));
 8006c44:	f8dd 300f 	ldr.w	r3, [sp, #15]
 8006c48:	9300      	str	r3, [sp, #0]
			byteswap(temp_var);
 8006c4a:	4668      	mov	r0, sp
 8006c4c:	f7ff ff79 	bl	8006b42 <byteswap>
			*result = *(uint32_t*)temp_var;
 8006c50:	9b00      	ldr	r3, [sp, #0]
 8006c52:	6033      	str	r3, [r6, #0]
 8006c54:	e7ef      	b.n	8006c36 <TMC2209_HAL_Read+0x86>
 8006c56:	bf00      	nop
 8006c58:	2000035c 	.word	0x2000035c

08006c5c <__malloc_lock>:
 8006c5c:	4801      	ldr	r0, [pc, #4]	@ (8006c64 <__malloc_lock+0x8>)
 8006c5e:	f000 b891 	b.w	8006d84 <__retarget_lock_acquire_recursive>
 8006c62:	bf00      	nop
 8006c64:	200013e0 	.word	0x200013e0

08006c68 <__malloc_unlock>:
 8006c68:	4801      	ldr	r0, [pc, #4]	@ (8006c70 <__malloc_unlock+0x8>)
 8006c6a:	f000 b88c 	b.w	8006d86 <__retarget_lock_release_recursive>
 8006c6e:	bf00      	nop
 8006c70:	200013e0 	.word	0x200013e0

08006c74 <memset>:
 8006c74:	4603      	mov	r3, r0
 8006c76:	4402      	add	r2, r0
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d100      	bne.n	8006c7e <memset+0xa>
 8006c7c:	4770      	bx	lr
 8006c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c82:	e7f9      	b.n	8006c78 <memset+0x4>

08006c84 <_reclaim_reent>:
 8006c84:	4b29      	ldr	r3, [pc, #164]	@ (8006d2c <_reclaim_reent+0xa8>)
 8006c86:	b570      	push	{r4, r5, r6, lr}
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	4283      	cmp	r3, r0
 8006c8e:	d04b      	beq.n	8006d28 <_reclaim_reent+0xa4>
 8006c90:	69c3      	ldr	r3, [r0, #28]
 8006c92:	b1ab      	cbz	r3, 8006cc0 <_reclaim_reent+0x3c>
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	b16b      	cbz	r3, 8006cb4 <_reclaim_reent+0x30>
 8006c98:	2500      	movs	r5, #0
 8006c9a:	69e3      	ldr	r3, [r4, #28]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	5959      	ldr	r1, [r3, r5]
 8006ca0:	2900      	cmp	r1, #0
 8006ca2:	d13b      	bne.n	8006d1c <_reclaim_reent+0x98>
 8006ca4:	3504      	adds	r5, #4
 8006ca6:	2d80      	cmp	r5, #128	@ 0x80
 8006ca8:	d1f7      	bne.n	8006c9a <_reclaim_reent+0x16>
 8006caa:	69e3      	ldr	r3, [r4, #28]
 8006cac:	4620      	mov	r0, r4
 8006cae:	68d9      	ldr	r1, [r3, #12]
 8006cb0:	f000 f86a 	bl	8006d88 <_free_r>
 8006cb4:	69e3      	ldr	r3, [r4, #28]
 8006cb6:	6819      	ldr	r1, [r3, #0]
 8006cb8:	b111      	cbz	r1, 8006cc0 <_reclaim_reent+0x3c>
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f000 f864 	bl	8006d88 <_free_r>
 8006cc0:	6961      	ldr	r1, [r4, #20]
 8006cc2:	b111      	cbz	r1, 8006cca <_reclaim_reent+0x46>
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f000 f85f 	bl	8006d88 <_free_r>
 8006cca:	69e1      	ldr	r1, [r4, #28]
 8006ccc:	b111      	cbz	r1, 8006cd4 <_reclaim_reent+0x50>
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f000 f85a 	bl	8006d88 <_free_r>
 8006cd4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006cd6:	b111      	cbz	r1, 8006cde <_reclaim_reent+0x5a>
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 f855 	bl	8006d88 <_free_r>
 8006cde:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ce0:	b111      	cbz	r1, 8006ce8 <_reclaim_reent+0x64>
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f000 f850 	bl	8006d88 <_free_r>
 8006ce8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006cea:	b111      	cbz	r1, 8006cf2 <_reclaim_reent+0x6e>
 8006cec:	4620      	mov	r0, r4
 8006cee:	f000 f84b 	bl	8006d88 <_free_r>
 8006cf2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006cf4:	b111      	cbz	r1, 8006cfc <_reclaim_reent+0x78>
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f000 f846 	bl	8006d88 <_free_r>
 8006cfc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006cfe:	b111      	cbz	r1, 8006d06 <_reclaim_reent+0x82>
 8006d00:	4620      	mov	r0, r4
 8006d02:	f000 f841 	bl	8006d88 <_free_r>
 8006d06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006d08:	b111      	cbz	r1, 8006d10 <_reclaim_reent+0x8c>
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f000 f83c 	bl	8006d88 <_free_r>
 8006d10:	6a23      	ldr	r3, [r4, #32]
 8006d12:	b14b      	cbz	r3, 8006d28 <_reclaim_reent+0xa4>
 8006d14:	4620      	mov	r0, r4
 8006d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d1a:	4718      	bx	r3
 8006d1c:	680e      	ldr	r6, [r1, #0]
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 f832 	bl	8006d88 <_free_r>
 8006d24:	4631      	mov	r1, r6
 8006d26:	e7bb      	b.n	8006ca0 <_reclaim_reent+0x1c>
 8006d28:	bd70      	pop	{r4, r5, r6, pc}
 8006d2a:	bf00      	nop
 8006d2c:	2000001c 	.word	0x2000001c

08006d30 <__errno>:
 8006d30:	4b01      	ldr	r3, [pc, #4]	@ (8006d38 <__errno+0x8>)
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	2000001c 	.word	0x2000001c

08006d3c <__libc_init_array>:
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	2600      	movs	r6, #0
 8006d40:	4d0c      	ldr	r5, [pc, #48]	@ (8006d74 <__libc_init_array+0x38>)
 8006d42:	4c0d      	ldr	r4, [pc, #52]	@ (8006d78 <__libc_init_array+0x3c>)
 8006d44:	1b64      	subs	r4, r4, r5
 8006d46:	10a4      	asrs	r4, r4, #2
 8006d48:	42a6      	cmp	r6, r4
 8006d4a:	d109      	bne.n	8006d60 <__libc_init_array+0x24>
 8006d4c:	f000 fffe 	bl	8007d4c <_init>
 8006d50:	2600      	movs	r6, #0
 8006d52:	4d0a      	ldr	r5, [pc, #40]	@ (8006d7c <__libc_init_array+0x40>)
 8006d54:	4c0a      	ldr	r4, [pc, #40]	@ (8006d80 <__libc_init_array+0x44>)
 8006d56:	1b64      	subs	r4, r4, r5
 8006d58:	10a4      	asrs	r4, r4, #2
 8006d5a:	42a6      	cmp	r6, r4
 8006d5c:	d105      	bne.n	8006d6a <__libc_init_array+0x2e>
 8006d5e:	bd70      	pop	{r4, r5, r6, pc}
 8006d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d64:	4798      	blx	r3
 8006d66:	3601      	adds	r6, #1
 8006d68:	e7ee      	b.n	8006d48 <__libc_init_array+0xc>
 8006d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6e:	4798      	blx	r3
 8006d70:	3601      	adds	r6, #1
 8006d72:	e7f2      	b.n	8006d5a <__libc_init_array+0x1e>
 8006d74:	08007e90 	.word	0x08007e90
 8006d78:	08007e90 	.word	0x08007e90
 8006d7c:	08007e90 	.word	0x08007e90
 8006d80:	08007e94 	.word	0x08007e94

08006d84 <__retarget_lock_acquire_recursive>:
 8006d84:	4770      	bx	lr

08006d86 <__retarget_lock_release_recursive>:
 8006d86:	4770      	bx	lr

08006d88 <_free_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	2900      	cmp	r1, #0
 8006d8e:	d040      	beq.n	8006e12 <_free_r+0x8a>
 8006d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d94:	1f0c      	subs	r4, r1, #4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bfb8      	it	lt
 8006d9a:	18e4      	addlt	r4, r4, r3
 8006d9c:	f7ff ff5e 	bl	8006c5c <__malloc_lock>
 8006da0:	4a1c      	ldr	r2, [pc, #112]	@ (8006e14 <_free_r+0x8c>)
 8006da2:	6813      	ldr	r3, [r2, #0]
 8006da4:	b933      	cbnz	r3, 8006db4 <_free_r+0x2c>
 8006da6:	6063      	str	r3, [r4, #4]
 8006da8:	6014      	str	r4, [r2, #0]
 8006daa:	4628      	mov	r0, r5
 8006dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006db0:	f7ff bf5a 	b.w	8006c68 <__malloc_unlock>
 8006db4:	42a3      	cmp	r3, r4
 8006db6:	d908      	bls.n	8006dca <_free_r+0x42>
 8006db8:	6820      	ldr	r0, [r4, #0]
 8006dba:	1821      	adds	r1, r4, r0
 8006dbc:	428b      	cmp	r3, r1
 8006dbe:	bf01      	itttt	eq
 8006dc0:	6819      	ldreq	r1, [r3, #0]
 8006dc2:	685b      	ldreq	r3, [r3, #4]
 8006dc4:	1809      	addeq	r1, r1, r0
 8006dc6:	6021      	streq	r1, [r4, #0]
 8006dc8:	e7ed      	b.n	8006da6 <_free_r+0x1e>
 8006dca:	461a      	mov	r2, r3
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	b10b      	cbz	r3, 8006dd4 <_free_r+0x4c>
 8006dd0:	42a3      	cmp	r3, r4
 8006dd2:	d9fa      	bls.n	8006dca <_free_r+0x42>
 8006dd4:	6811      	ldr	r1, [r2, #0]
 8006dd6:	1850      	adds	r0, r2, r1
 8006dd8:	42a0      	cmp	r0, r4
 8006dda:	d10b      	bne.n	8006df4 <_free_r+0x6c>
 8006ddc:	6820      	ldr	r0, [r4, #0]
 8006dde:	4401      	add	r1, r0
 8006de0:	1850      	adds	r0, r2, r1
 8006de2:	4283      	cmp	r3, r0
 8006de4:	6011      	str	r1, [r2, #0]
 8006de6:	d1e0      	bne.n	8006daa <_free_r+0x22>
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	4408      	add	r0, r1
 8006dee:	6010      	str	r0, [r2, #0]
 8006df0:	6053      	str	r3, [r2, #4]
 8006df2:	e7da      	b.n	8006daa <_free_r+0x22>
 8006df4:	d902      	bls.n	8006dfc <_free_r+0x74>
 8006df6:	230c      	movs	r3, #12
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	e7d6      	b.n	8006daa <_free_r+0x22>
 8006dfc:	6820      	ldr	r0, [r4, #0]
 8006dfe:	1821      	adds	r1, r4, r0
 8006e00:	428b      	cmp	r3, r1
 8006e02:	bf01      	itttt	eq
 8006e04:	6819      	ldreq	r1, [r3, #0]
 8006e06:	685b      	ldreq	r3, [r3, #4]
 8006e08:	1809      	addeq	r1, r1, r0
 8006e0a:	6021      	streq	r1, [r4, #0]
 8006e0c:	6063      	str	r3, [r4, #4]
 8006e0e:	6054      	str	r4, [r2, #4]
 8006e10:	e7cb      	b.n	8006daa <_free_r+0x22>
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	200012a4 	.word	0x200012a4

08006e18 <pow>:
 8006e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	461d      	mov	r5, r3
 8006e20:	4680      	mov	r8, r0
 8006e22:	4689      	mov	r9, r1
 8006e24:	f000 f9cc 	bl	80071c0 <__ieee754_pow>
 8006e28:	4622      	mov	r2, r4
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460f      	mov	r7, r1
 8006e2e:	462b      	mov	r3, r5
 8006e30:	4620      	mov	r0, r4
 8006e32:	4629      	mov	r1, r5
 8006e34:	f7f9 fde2 	bl	80009fc <__aeabi_dcmpun>
 8006e38:	bbc8      	cbnz	r0, 8006eae <pow+0x96>
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	4640      	mov	r0, r8
 8006e40:	4649      	mov	r1, r9
 8006e42:	f7f9 fda9 	bl	8000998 <__aeabi_dcmpeq>
 8006e46:	b1b8      	cbz	r0, 8006e78 <pow+0x60>
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	4629      	mov	r1, r5
 8006e50:	f7f9 fda2 	bl	8000998 <__aeabi_dcmpeq>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d141      	bne.n	8006edc <pow+0xc4>
 8006e58:	4620      	mov	r0, r4
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	f000 f848 	bl	8006ef0 <finite>
 8006e60:	b328      	cbz	r0, 8006eae <pow+0x96>
 8006e62:	2200      	movs	r2, #0
 8006e64:	2300      	movs	r3, #0
 8006e66:	4620      	mov	r0, r4
 8006e68:	4629      	mov	r1, r5
 8006e6a:	f7f9 fd9f 	bl	80009ac <__aeabi_dcmplt>
 8006e6e:	b1f0      	cbz	r0, 8006eae <pow+0x96>
 8006e70:	f7ff ff5e 	bl	8006d30 <__errno>
 8006e74:	2322      	movs	r3, #34	@ 0x22
 8006e76:	e019      	b.n	8006eac <pow+0x94>
 8006e78:	4630      	mov	r0, r6
 8006e7a:	4639      	mov	r1, r7
 8006e7c:	f000 f838 	bl	8006ef0 <finite>
 8006e80:	b9c8      	cbnz	r0, 8006eb6 <pow+0x9e>
 8006e82:	4640      	mov	r0, r8
 8006e84:	4649      	mov	r1, r9
 8006e86:	f000 f833 	bl	8006ef0 <finite>
 8006e8a:	b1a0      	cbz	r0, 8006eb6 <pow+0x9e>
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	4629      	mov	r1, r5
 8006e90:	f000 f82e 	bl	8006ef0 <finite>
 8006e94:	b178      	cbz	r0, 8006eb6 <pow+0x9e>
 8006e96:	4632      	mov	r2, r6
 8006e98:	463b      	mov	r3, r7
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	f7f9 fdad 	bl	80009fc <__aeabi_dcmpun>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d0e4      	beq.n	8006e70 <pow+0x58>
 8006ea6:	f7ff ff43 	bl	8006d30 <__errno>
 8006eaa:	2321      	movs	r3, #33	@ 0x21
 8006eac:	6003      	str	r3, [r0, #0]
 8006eae:	4630      	mov	r0, r6
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2300      	movs	r3, #0
 8006eba:	4630      	mov	r0, r6
 8006ebc:	4639      	mov	r1, r7
 8006ebe:	f7f9 fd6b 	bl	8000998 <__aeabi_dcmpeq>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d0f3      	beq.n	8006eae <pow+0x96>
 8006ec6:	4640      	mov	r0, r8
 8006ec8:	4649      	mov	r1, r9
 8006eca:	f000 f811 	bl	8006ef0 <finite>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d0ed      	beq.n	8006eae <pow+0x96>
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	f000 f80b 	bl	8006ef0 <finite>
 8006eda:	e7c8      	b.n	8006e6e <pow+0x56>
 8006edc:	2600      	movs	r6, #0
 8006ede:	4f01      	ldr	r7, [pc, #4]	@ (8006ee4 <pow+0xcc>)
 8006ee0:	e7e5      	b.n	8006eae <pow+0x96>
 8006ee2:	bf00      	nop
 8006ee4:	3ff00000 	.word	0x3ff00000

08006ee8 <fabs>:
 8006ee8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006eec:	4619      	mov	r1, r3
 8006eee:	4770      	bx	lr

08006ef0 <finite>:
 8006ef0:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8006ef4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006ef8:	0fc0      	lsrs	r0, r0, #31
 8006efa:	4770      	bx	lr

08006efc <fmaxf>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4604      	mov	r4, r0
 8006f00:	460d      	mov	r5, r1
 8006f02:	f000 f825 	bl	8006f50 <__fpclassifyf>
 8006f06:	b910      	cbnz	r0, 8006f0e <fmaxf+0x12>
 8006f08:	462c      	mov	r4, r5
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	bd38      	pop	{r3, r4, r5, pc}
 8006f0e:	4628      	mov	r0, r5
 8006f10:	f000 f81e 	bl	8006f50 <__fpclassifyf>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d0f8      	beq.n	8006f0a <fmaxf+0xe>
 8006f18:	4629      	mov	r1, r5
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f7fa f8be 	bl	800109c <__aeabi_fcmpgt>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d0f1      	beq.n	8006f08 <fmaxf+0xc>
 8006f24:	e7f1      	b.n	8006f0a <fmaxf+0xe>

08006f26 <fminf>:
 8006f26:	b538      	push	{r3, r4, r5, lr}
 8006f28:	4604      	mov	r4, r0
 8006f2a:	460d      	mov	r5, r1
 8006f2c:	f000 f810 	bl	8006f50 <__fpclassifyf>
 8006f30:	b910      	cbnz	r0, 8006f38 <fminf+0x12>
 8006f32:	462c      	mov	r4, r5
 8006f34:	4620      	mov	r0, r4
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	4628      	mov	r0, r5
 8006f3a:	f000 f809 	bl	8006f50 <__fpclassifyf>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d0f8      	beq.n	8006f34 <fminf+0xe>
 8006f42:	4629      	mov	r1, r5
 8006f44:	4620      	mov	r0, r4
 8006f46:	f7fa f88b 	bl	8001060 <__aeabi_fcmplt>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d0f1      	beq.n	8006f32 <fminf+0xc>
 8006f4e:	e7f1      	b.n	8006f34 <fminf+0xe>

08006f50 <__fpclassifyf>:
 8006f50:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8006f54:	d00d      	beq.n	8006f72 <__fpclassifyf+0x22>
 8006f56:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8006f5a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006f5e:	d30a      	bcc.n	8006f76 <__fpclassifyf+0x26>
 8006f60:	4b07      	ldr	r3, [pc, #28]	@ (8006f80 <__fpclassifyf+0x30>)
 8006f62:	1e42      	subs	r2, r0, #1
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d908      	bls.n	8006f7a <__fpclassifyf+0x2a>
 8006f68:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8006f6c:	4258      	negs	r0, r3
 8006f6e:	4158      	adcs	r0, r3
 8006f70:	4770      	bx	lr
 8006f72:	2002      	movs	r0, #2
 8006f74:	4770      	bx	lr
 8006f76:	2004      	movs	r0, #4
 8006f78:	4770      	bx	lr
 8006f7a:	2003      	movs	r0, #3
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	007ffffe 	.word	0x007ffffe

08006f84 <__ieee754_sqrt>:
 8006f84:	4a67      	ldr	r2, [pc, #412]	@ (8007124 <__ieee754_sqrt+0x1a0>)
 8006f86:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8a:	438a      	bics	r2, r1
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	460f      	mov	r7, r1
 8006f90:	460b      	mov	r3, r1
 8006f92:	4604      	mov	r4, r0
 8006f94:	d10e      	bne.n	8006fb4 <__ieee754_sqrt+0x30>
 8006f96:	4602      	mov	r2, r0
 8006f98:	f7f9 fa96 	bl	80004c8 <__aeabi_dmul>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	f7f9 f8da 	bl	800015c <__adddf3>
 8006fa8:	4606      	mov	r6, r0
 8006faa:	460f      	mov	r7, r1
 8006fac:	4630      	mov	r0, r6
 8006fae:	4639      	mov	r1, r7
 8006fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb4:	2900      	cmp	r1, #0
 8006fb6:	dc0c      	bgt.n	8006fd2 <__ieee754_sqrt+0x4e>
 8006fb8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006fbc:	4302      	orrs	r2, r0
 8006fbe:	d0f5      	beq.n	8006fac <__ieee754_sqrt+0x28>
 8006fc0:	b189      	cbz	r1, 8006fe6 <__ieee754_sqrt+0x62>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	f7f9 f8c8 	bl	8000158 <__aeabi_dsub>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	f7f9 fba6 	bl	800071c <__aeabi_ddiv>
 8006fd0:	e7ea      	b.n	8006fa8 <__ieee754_sqrt+0x24>
 8006fd2:	150a      	asrs	r2, r1, #20
 8006fd4:	d115      	bne.n	8007002 <__ieee754_sqrt+0x7e>
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	e009      	b.n	8006fee <__ieee754_sqrt+0x6a>
 8006fda:	0ae3      	lsrs	r3, r4, #11
 8006fdc:	3a15      	subs	r2, #21
 8006fde:	0564      	lsls	r4, r4, #21
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d0fa      	beq.n	8006fda <__ieee754_sqrt+0x56>
 8006fe4:	e7f7      	b.n	8006fd6 <__ieee754_sqrt+0x52>
 8006fe6:	460a      	mov	r2, r1
 8006fe8:	e7fa      	b.n	8006fe0 <__ieee754_sqrt+0x5c>
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	3101      	adds	r1, #1
 8006fee:	02d8      	lsls	r0, r3, #11
 8006ff0:	d5fb      	bpl.n	8006fea <__ieee754_sqrt+0x66>
 8006ff2:	1e48      	subs	r0, r1, #1
 8006ff4:	1a12      	subs	r2, r2, r0
 8006ff6:	f1c1 0020 	rsb	r0, r1, #32
 8006ffa:	fa24 f000 	lsr.w	r0, r4, r0
 8006ffe:	4303      	orrs	r3, r0
 8007000:	408c      	lsls	r4, r1
 8007002:	2600      	movs	r6, #0
 8007004:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8007008:	2116      	movs	r1, #22
 800700a:	07d2      	lsls	r2, r2, #31
 800700c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007010:	4632      	mov	r2, r6
 8007012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800701a:	bf5c      	itt	pl
 800701c:	005b      	lslpl	r3, r3, #1
 800701e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007022:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007026:	bf58      	it	pl
 8007028:	0064      	lslpl	r4, r4, #1
 800702a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800702e:	107f      	asrs	r7, r7, #1
 8007030:	0064      	lsls	r4, r4, #1
 8007032:	1815      	adds	r5, r2, r0
 8007034:	429d      	cmp	r5, r3
 8007036:	bfde      	ittt	le
 8007038:	182a      	addle	r2, r5, r0
 800703a:	1b5b      	suble	r3, r3, r5
 800703c:	1836      	addle	r6, r6, r0
 800703e:	0fe5      	lsrs	r5, r4, #31
 8007040:	3901      	subs	r1, #1
 8007042:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8007046:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800704a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800704e:	d1f0      	bne.n	8007032 <__ieee754_sqrt+0xae>
 8007050:	460d      	mov	r5, r1
 8007052:	f04f 0a20 	mov.w	sl, #32
 8007056:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800705a:	429a      	cmp	r2, r3
 800705c:	eb01 0c00 	add.w	ip, r1, r0
 8007060:	db02      	blt.n	8007068 <__ieee754_sqrt+0xe4>
 8007062:	d113      	bne.n	800708c <__ieee754_sqrt+0x108>
 8007064:	45a4      	cmp	ip, r4
 8007066:	d811      	bhi.n	800708c <__ieee754_sqrt+0x108>
 8007068:	f1bc 0f00 	cmp.w	ip, #0
 800706c:	eb0c 0100 	add.w	r1, ip, r0
 8007070:	da42      	bge.n	80070f8 <__ieee754_sqrt+0x174>
 8007072:	2900      	cmp	r1, #0
 8007074:	db40      	blt.n	80070f8 <__ieee754_sqrt+0x174>
 8007076:	f102 0e01 	add.w	lr, r2, #1
 800707a:	1a9b      	subs	r3, r3, r2
 800707c:	4672      	mov	r2, lr
 800707e:	45a4      	cmp	ip, r4
 8007080:	bf88      	it	hi
 8007082:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007086:	eba4 040c 	sub.w	r4, r4, ip
 800708a:	4405      	add	r5, r0
 800708c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8007090:	f1ba 0a01 	subs.w	sl, sl, #1
 8007094:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8007098:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800709c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80070a0:	d1db      	bne.n	800705a <__ieee754_sqrt+0xd6>
 80070a2:	431c      	orrs	r4, r3
 80070a4:	d01a      	beq.n	80070dc <__ieee754_sqrt+0x158>
 80070a6:	4c20      	ldr	r4, [pc, #128]	@ (8007128 <__ieee754_sqrt+0x1a4>)
 80070a8:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800712c <__ieee754_sqrt+0x1a8>
 80070ac:	e9d4 0100 	ldrd	r0, r1, [r4]
 80070b0:	e9db 2300 	ldrd	r2, r3, [fp]
 80070b4:	f7f9 f850 	bl	8000158 <__aeabi_dsub>
 80070b8:	e9d4 8900 	ldrd	r8, r9, [r4]
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4640      	mov	r0, r8
 80070c2:	4649      	mov	r1, r9
 80070c4:	f7f9 fc7c 	bl	80009c0 <__aeabi_dcmple>
 80070c8:	b140      	cbz	r0, 80070dc <__ieee754_sqrt+0x158>
 80070ca:	e9d4 0100 	ldrd	r0, r1, [r4]
 80070ce:	e9db 2300 	ldrd	r2, r3, [fp]
 80070d2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80070d6:	d111      	bne.n	80070fc <__ieee754_sqrt+0x178>
 80070d8:	4655      	mov	r5, sl
 80070da:	3601      	adds	r6, #1
 80070dc:	1072      	asrs	r2, r6, #1
 80070de:	086b      	lsrs	r3, r5, #1
 80070e0:	07f1      	lsls	r1, r6, #31
 80070e2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80070e6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80070ea:	bf48      	it	mi
 80070ec:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80070f0:	4618      	mov	r0, r3
 80070f2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80070f6:	e757      	b.n	8006fa8 <__ieee754_sqrt+0x24>
 80070f8:	4696      	mov	lr, r2
 80070fa:	e7be      	b.n	800707a <__ieee754_sqrt+0xf6>
 80070fc:	f7f9 f82e 	bl	800015c <__adddf3>
 8007100:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4640      	mov	r0, r8
 800710a:	4649      	mov	r1, r9
 800710c:	f7f9 fc4e 	bl	80009ac <__aeabi_dcmplt>
 8007110:	b120      	cbz	r0, 800711c <__ieee754_sqrt+0x198>
 8007112:	1ca8      	adds	r0, r5, #2
 8007114:	bf08      	it	eq
 8007116:	3601      	addeq	r6, #1
 8007118:	3502      	adds	r5, #2
 800711a:	e7df      	b.n	80070dc <__ieee754_sqrt+0x158>
 800711c:	1c6b      	adds	r3, r5, #1
 800711e:	f023 0501 	bic.w	r5, r3, #1
 8007122:	e7db      	b.n	80070dc <__ieee754_sqrt+0x158>
 8007124:	7ff00000 	.word	0x7ff00000
 8007128:	20000078 	.word	0x20000078
 800712c:	20000070 	.word	0x20000070

08007130 <round>:
 8007130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007132:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007136:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800713a:	2a13      	cmp	r2, #19
 800713c:	4604      	mov	r4, r0
 800713e:	460d      	mov	r5, r1
 8007140:	460b      	mov	r3, r1
 8007142:	dc1a      	bgt.n	800717a <round+0x4a>
 8007144:	2a00      	cmp	r2, #0
 8007146:	da0b      	bge.n	8007160 <round+0x30>
 8007148:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800714c:	3201      	adds	r2, #1
 800714e:	bf04      	itt	eq
 8007150:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8007154:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8007158:	2200      	movs	r2, #0
 800715a:	461d      	mov	r5, r3
 800715c:	4614      	mov	r4, r2
 800715e:	e016      	b.n	800718e <round+0x5e>
 8007160:	4815      	ldr	r0, [pc, #84]	@ (80071b8 <round+0x88>)
 8007162:	4110      	asrs	r0, r2
 8007164:	4001      	ands	r1, r0
 8007166:	4321      	orrs	r1, r4
 8007168:	d011      	beq.n	800718e <round+0x5e>
 800716a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800716e:	fa41 f202 	asr.w	r2, r1, r2
 8007172:	4413      	add	r3, r2
 8007174:	ea23 0300 	bic.w	r3, r3, r0
 8007178:	e7ee      	b.n	8007158 <round+0x28>
 800717a:	2a33      	cmp	r2, #51	@ 0x33
 800717c:	dd0a      	ble.n	8007194 <round+0x64>
 800717e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8007182:	d104      	bne.n	800718e <round+0x5e>
 8007184:	4602      	mov	r2, r0
 8007186:	f7f8 ffe9 	bl	800015c <__adddf3>
 800718a:	4604      	mov	r4, r0
 800718c:	460d      	mov	r5, r1
 800718e:	4620      	mov	r0, r4
 8007190:	4629      	mov	r1, r5
 8007192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800719c:	40f8      	lsrs	r0, r7
 800719e:	4220      	tst	r0, r4
 80071a0:	d0f5      	beq.n	800718e <round+0x5e>
 80071a2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80071a6:	2201      	movs	r2, #1
 80071a8:	408a      	lsls	r2, r1
 80071aa:	1912      	adds	r2, r2, r4
 80071ac:	bf28      	it	cs
 80071ae:	3301      	addcs	r3, #1
 80071b0:	ea22 0200 	bic.w	r2, r2, r0
 80071b4:	e7d1      	b.n	800715a <round+0x2a>
 80071b6:	bf00      	nop
 80071b8:	000fffff 	.word	0x000fffff
 80071bc:	00000000 	.word	0x00000000

080071c0 <__ieee754_pow>:
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	b091      	sub	sp, #68	@ 0x44
 80071c6:	e9cd 2300 	strd	r2, r3, [sp]
 80071ca:	468b      	mov	fp, r1
 80071cc:	e9dd 1800 	ldrd	r1, r8, [sp]
 80071d0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80071d4:	4682      	mov	sl, r0
 80071d6:	ea57 0001 	orrs.w	r0, r7, r1
 80071da:	d112      	bne.n	8007202 <__ieee754_pow+0x42>
 80071dc:	4653      	mov	r3, sl
 80071de:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80071e2:	18db      	adds	r3, r3, r3
 80071e4:	4152      	adcs	r2, r2
 80071e6:	4298      	cmp	r0, r3
 80071e8:	4b91      	ldr	r3, [pc, #580]	@ (8007430 <__ieee754_pow+0x270>)
 80071ea:	4193      	sbcs	r3, r2
 80071ec:	f080 84ce 	bcs.w	8007b8c <__ieee754_pow+0x9cc>
 80071f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071f4:	4650      	mov	r0, sl
 80071f6:	4659      	mov	r1, fp
 80071f8:	f7f8 ffb0 	bl	800015c <__adddf3>
 80071fc:	b011      	add	sp, #68	@ 0x44
 80071fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007202:	4b8c      	ldr	r3, [pc, #560]	@ (8007434 <__ieee754_pow+0x274>)
 8007204:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8007208:	429e      	cmp	r6, r3
 800720a:	465d      	mov	r5, fp
 800720c:	46d1      	mov	r9, sl
 800720e:	d807      	bhi.n	8007220 <__ieee754_pow+0x60>
 8007210:	d102      	bne.n	8007218 <__ieee754_pow+0x58>
 8007212:	f1ba 0f00 	cmp.w	sl, #0
 8007216:	d1eb      	bne.n	80071f0 <__ieee754_pow+0x30>
 8007218:	429f      	cmp	r7, r3
 800721a:	d801      	bhi.n	8007220 <__ieee754_pow+0x60>
 800721c:	d10f      	bne.n	800723e <__ieee754_pow+0x7e>
 800721e:	b171      	cbz	r1, 800723e <__ieee754_pow+0x7e>
 8007220:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007224:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007228:	ea55 0509 	orrs.w	r5, r5, r9
 800722c:	d1e0      	bne.n	80071f0 <__ieee754_pow+0x30>
 800722e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007232:	18db      	adds	r3, r3, r3
 8007234:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007238:	4152      	adcs	r2, r2
 800723a:	429d      	cmp	r5, r3
 800723c:	e7d4      	b.n	80071e8 <__ieee754_pow+0x28>
 800723e:	2d00      	cmp	r5, #0
 8007240:	4633      	mov	r3, r6
 8007242:	da39      	bge.n	80072b8 <__ieee754_pow+0xf8>
 8007244:	4a7c      	ldr	r2, [pc, #496]	@ (8007438 <__ieee754_pow+0x278>)
 8007246:	4297      	cmp	r7, r2
 8007248:	d84e      	bhi.n	80072e8 <__ieee754_pow+0x128>
 800724a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800724e:	4297      	cmp	r7, r2
 8007250:	f240 84ab 	bls.w	8007baa <__ieee754_pow+0x9ea>
 8007254:	153a      	asrs	r2, r7, #20
 8007256:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800725a:	2a14      	cmp	r2, #20
 800725c:	dd0f      	ble.n	800727e <__ieee754_pow+0xbe>
 800725e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007262:	fa21 f402 	lsr.w	r4, r1, r2
 8007266:	fa04 f202 	lsl.w	r2, r4, r2
 800726a:	428a      	cmp	r2, r1
 800726c:	f040 849d 	bne.w	8007baa <__ieee754_pow+0x9ea>
 8007270:	f004 0401 	and.w	r4, r4, #1
 8007274:	f1c4 0402 	rsb	r4, r4, #2
 8007278:	2900      	cmp	r1, #0
 800727a:	d15a      	bne.n	8007332 <__ieee754_pow+0x172>
 800727c:	e00e      	b.n	800729c <__ieee754_pow+0xdc>
 800727e:	2900      	cmp	r1, #0
 8007280:	d156      	bne.n	8007330 <__ieee754_pow+0x170>
 8007282:	f1c2 0214 	rsb	r2, r2, #20
 8007286:	fa47 f402 	asr.w	r4, r7, r2
 800728a:	fa04 f202 	lsl.w	r2, r4, r2
 800728e:	42ba      	cmp	r2, r7
 8007290:	f040 8488 	bne.w	8007ba4 <__ieee754_pow+0x9e4>
 8007294:	f004 0401 	and.w	r4, r4, #1
 8007298:	f1c4 0402 	rsb	r4, r4, #2
 800729c:	4a67      	ldr	r2, [pc, #412]	@ (800743c <__ieee754_pow+0x27c>)
 800729e:	4297      	cmp	r7, r2
 80072a0:	d130      	bne.n	8007304 <__ieee754_pow+0x144>
 80072a2:	f1b8 0f00 	cmp.w	r8, #0
 80072a6:	f280 8479 	bge.w	8007b9c <__ieee754_pow+0x9dc>
 80072aa:	4652      	mov	r2, sl
 80072ac:	465b      	mov	r3, fp
 80072ae:	2000      	movs	r0, #0
 80072b0:	4962      	ldr	r1, [pc, #392]	@ (800743c <__ieee754_pow+0x27c>)
 80072b2:	f7f9 fa33 	bl	800071c <__aeabi_ddiv>
 80072b6:	e7a1      	b.n	80071fc <__ieee754_pow+0x3c>
 80072b8:	2400      	movs	r4, #0
 80072ba:	2900      	cmp	r1, #0
 80072bc:	d139      	bne.n	8007332 <__ieee754_pow+0x172>
 80072be:	4a5d      	ldr	r2, [pc, #372]	@ (8007434 <__ieee754_pow+0x274>)
 80072c0:	4297      	cmp	r7, r2
 80072c2:	d1eb      	bne.n	800729c <__ieee754_pow+0xdc>
 80072c4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80072c8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80072cc:	ea53 0309 	orrs.w	r3, r3, r9
 80072d0:	f000 845c 	beq.w	8007b8c <__ieee754_pow+0x9cc>
 80072d4:	4b5a      	ldr	r3, [pc, #360]	@ (8007440 <__ieee754_pow+0x280>)
 80072d6:	429e      	cmp	r6, r3
 80072d8:	d908      	bls.n	80072ec <__ieee754_pow+0x12c>
 80072da:	f1b8 0f00 	cmp.w	r8, #0
 80072de:	f2c0 8459 	blt.w	8007b94 <__ieee754_pow+0x9d4>
 80072e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072e6:	e789      	b.n	80071fc <__ieee754_pow+0x3c>
 80072e8:	2402      	movs	r4, #2
 80072ea:	e7e6      	b.n	80072ba <__ieee754_pow+0xfa>
 80072ec:	f1b8 0f00 	cmp.w	r8, #0
 80072f0:	f04f 0000 	mov.w	r0, #0
 80072f4:	f04f 0100 	mov.w	r1, #0
 80072f8:	da80      	bge.n	80071fc <__ieee754_pow+0x3c>
 80072fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80072fe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007302:	e77b      	b.n	80071fc <__ieee754_pow+0x3c>
 8007304:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8007308:	d106      	bne.n	8007318 <__ieee754_pow+0x158>
 800730a:	4652      	mov	r2, sl
 800730c:	465b      	mov	r3, fp
 800730e:	4650      	mov	r0, sl
 8007310:	4659      	mov	r1, fp
 8007312:	f7f9 f8d9 	bl	80004c8 <__aeabi_dmul>
 8007316:	e771      	b.n	80071fc <__ieee754_pow+0x3c>
 8007318:	4a4a      	ldr	r2, [pc, #296]	@ (8007444 <__ieee754_pow+0x284>)
 800731a:	4590      	cmp	r8, r2
 800731c:	d109      	bne.n	8007332 <__ieee754_pow+0x172>
 800731e:	2d00      	cmp	r5, #0
 8007320:	db07      	blt.n	8007332 <__ieee754_pow+0x172>
 8007322:	4650      	mov	r0, sl
 8007324:	4659      	mov	r1, fp
 8007326:	b011      	add	sp, #68	@ 0x44
 8007328:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	f7ff be2a 	b.w	8006f84 <__ieee754_sqrt>
 8007330:	2400      	movs	r4, #0
 8007332:	4650      	mov	r0, sl
 8007334:	4659      	mov	r1, fp
 8007336:	9302      	str	r3, [sp, #8]
 8007338:	f7ff fdd6 	bl	8006ee8 <fabs>
 800733c:	9b02      	ldr	r3, [sp, #8]
 800733e:	f1b9 0f00 	cmp.w	r9, #0
 8007342:	d127      	bne.n	8007394 <__ieee754_pow+0x1d4>
 8007344:	4a3d      	ldr	r2, [pc, #244]	@ (800743c <__ieee754_pow+0x27c>)
 8007346:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800734a:	4594      	cmp	ip, r2
 800734c:	d000      	beq.n	8007350 <__ieee754_pow+0x190>
 800734e:	bb0e      	cbnz	r6, 8007394 <__ieee754_pow+0x1d4>
 8007350:	f1b8 0f00 	cmp.w	r8, #0
 8007354:	da05      	bge.n	8007362 <__ieee754_pow+0x1a2>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	2000      	movs	r0, #0
 800735c:	4937      	ldr	r1, [pc, #220]	@ (800743c <__ieee754_pow+0x27c>)
 800735e:	f7f9 f9dd 	bl	800071c <__aeabi_ddiv>
 8007362:	2d00      	cmp	r5, #0
 8007364:	f6bf af4a 	bge.w	80071fc <__ieee754_pow+0x3c>
 8007368:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800736c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8007370:	4326      	orrs	r6, r4
 8007372:	d108      	bne.n	8007386 <__ieee754_pow+0x1c6>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4610      	mov	r0, r2
 800737a:	4619      	mov	r1, r3
 800737c:	f7f8 feec 	bl	8000158 <__aeabi_dsub>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	e795      	b.n	80072b2 <__ieee754_pow+0xf2>
 8007386:	2c01      	cmp	r4, #1
 8007388:	f47f af38 	bne.w	80071fc <__ieee754_pow+0x3c>
 800738c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007390:	4619      	mov	r1, r3
 8007392:	e733      	b.n	80071fc <__ieee754_pow+0x3c>
 8007394:	0fea      	lsrs	r2, r5, #31
 8007396:	3a01      	subs	r2, #1
 8007398:	ea52 0c04 	orrs.w	ip, r2, r4
 800739c:	d102      	bne.n	80073a4 <__ieee754_pow+0x1e4>
 800739e:	4652      	mov	r2, sl
 80073a0:	465b      	mov	r3, fp
 80073a2:	e7e9      	b.n	8007378 <__ieee754_pow+0x1b8>
 80073a4:	f04f 0900 	mov.w	r9, #0
 80073a8:	3c01      	subs	r4, #1
 80073aa:	4314      	orrs	r4, r2
 80073ac:	bf14      	ite	ne
 80073ae:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800743c <__ieee754_pow+0x27c>
 80073b2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8007448 <__ieee754_pow+0x288>
 80073b6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80073ba:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80073be:	f240 8107 	bls.w	80075d0 <__ieee754_pow+0x410>
 80073c2:	4b22      	ldr	r3, [pc, #136]	@ (800744c <__ieee754_pow+0x28c>)
 80073c4:	429f      	cmp	r7, r3
 80073c6:	4b1e      	ldr	r3, [pc, #120]	@ (8007440 <__ieee754_pow+0x280>)
 80073c8:	d913      	bls.n	80073f2 <__ieee754_pow+0x232>
 80073ca:	429e      	cmp	r6, r3
 80073cc:	d808      	bhi.n	80073e0 <__ieee754_pow+0x220>
 80073ce:	f1b8 0f00 	cmp.w	r8, #0
 80073d2:	da08      	bge.n	80073e6 <__ieee754_pow+0x226>
 80073d4:	2000      	movs	r0, #0
 80073d6:	b011      	add	sp, #68	@ 0x44
 80073d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	f000 bcb0 	b.w	8007d40 <__math_oflow>
 80073e0:	f1b8 0f00 	cmp.w	r8, #0
 80073e4:	dcf6      	bgt.n	80073d4 <__ieee754_pow+0x214>
 80073e6:	2000      	movs	r0, #0
 80073e8:	b011      	add	sp, #68	@ 0x44
 80073ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ee:	f000 bca2 	b.w	8007d36 <__math_uflow>
 80073f2:	429e      	cmp	r6, r3
 80073f4:	d20c      	bcs.n	8007410 <__ieee754_pow+0x250>
 80073f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073fa:	2200      	movs	r2, #0
 80073fc:	2300      	movs	r3, #0
 80073fe:	f7f9 fad5 	bl	80009ac <__aeabi_dcmplt>
 8007402:	3800      	subs	r0, #0
 8007404:	bf18      	it	ne
 8007406:	2001      	movne	r0, #1
 8007408:	f1b8 0f00 	cmp.w	r8, #0
 800740c:	daec      	bge.n	80073e8 <__ieee754_pow+0x228>
 800740e:	e7e2      	b.n	80073d6 <__ieee754_pow+0x216>
 8007410:	4b0a      	ldr	r3, [pc, #40]	@ (800743c <__ieee754_pow+0x27c>)
 8007412:	2200      	movs	r2, #0
 8007414:	429e      	cmp	r6, r3
 8007416:	d91b      	bls.n	8007450 <__ieee754_pow+0x290>
 8007418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800741c:	2300      	movs	r3, #0
 800741e:	f7f9 fac5 	bl	80009ac <__aeabi_dcmplt>
 8007422:	3800      	subs	r0, #0
 8007424:	bf18      	it	ne
 8007426:	2001      	movne	r0, #1
 8007428:	f1b8 0f00 	cmp.w	r8, #0
 800742c:	dcd3      	bgt.n	80073d6 <__ieee754_pow+0x216>
 800742e:	e7db      	b.n	80073e8 <__ieee754_pow+0x228>
 8007430:	fff00000 	.word	0xfff00000
 8007434:	7ff00000 	.word	0x7ff00000
 8007438:	433fffff 	.word	0x433fffff
 800743c:	3ff00000 	.word	0x3ff00000
 8007440:	3fefffff 	.word	0x3fefffff
 8007444:	3fe00000 	.word	0x3fe00000
 8007448:	bff00000 	.word	0xbff00000
 800744c:	43f00000 	.word	0x43f00000
 8007450:	4b5b      	ldr	r3, [pc, #364]	@ (80075c0 <__ieee754_pow+0x400>)
 8007452:	f7f8 fe81 	bl	8000158 <__aeabi_dsub>
 8007456:	a352      	add	r3, pc, #328	@ (adr r3, 80075a0 <__ieee754_pow+0x3e0>)
 8007458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745c:	4604      	mov	r4, r0
 800745e:	460d      	mov	r5, r1
 8007460:	f7f9 f832 	bl	80004c8 <__aeabi_dmul>
 8007464:	a350      	add	r3, pc, #320	@ (adr r3, 80075a8 <__ieee754_pow+0x3e8>)
 8007466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746a:	4606      	mov	r6, r0
 800746c:	460f      	mov	r7, r1
 800746e:	4620      	mov	r0, r4
 8007470:	4629      	mov	r1, r5
 8007472:	f7f9 f829 	bl	80004c8 <__aeabi_dmul>
 8007476:	2200      	movs	r2, #0
 8007478:	4682      	mov	sl, r0
 800747a:	468b      	mov	fp, r1
 800747c:	4620      	mov	r0, r4
 800747e:	4629      	mov	r1, r5
 8007480:	4b50      	ldr	r3, [pc, #320]	@ (80075c4 <__ieee754_pow+0x404>)
 8007482:	f7f9 f821 	bl	80004c8 <__aeabi_dmul>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	a149      	add	r1, pc, #292	@ (adr r1, 80075b0 <__ieee754_pow+0x3f0>)
 800748c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007490:	f7f8 fe62 	bl	8000158 <__aeabi_dsub>
 8007494:	4622      	mov	r2, r4
 8007496:	462b      	mov	r3, r5
 8007498:	f7f9 f816 	bl	80004c8 <__aeabi_dmul>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	2000      	movs	r0, #0
 80074a2:	4949      	ldr	r1, [pc, #292]	@ (80075c8 <__ieee754_pow+0x408>)
 80074a4:	f7f8 fe58 	bl	8000158 <__aeabi_dsub>
 80074a8:	4622      	mov	r2, r4
 80074aa:	4680      	mov	r8, r0
 80074ac:	4689      	mov	r9, r1
 80074ae:	462b      	mov	r3, r5
 80074b0:	4620      	mov	r0, r4
 80074b2:	4629      	mov	r1, r5
 80074b4:	f7f9 f808 	bl	80004c8 <__aeabi_dmul>
 80074b8:	4602      	mov	r2, r0
 80074ba:	460b      	mov	r3, r1
 80074bc:	4640      	mov	r0, r8
 80074be:	4649      	mov	r1, r9
 80074c0:	f7f9 f802 	bl	80004c8 <__aeabi_dmul>
 80074c4:	a33c      	add	r3, pc, #240	@ (adr r3, 80075b8 <__ieee754_pow+0x3f8>)
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	f7f8 fffd 	bl	80004c8 <__aeabi_dmul>
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4650      	mov	r0, sl
 80074d4:	4659      	mov	r1, fp
 80074d6:	f7f8 fe3f 	bl	8000158 <__aeabi_dsub>
 80074da:	2400      	movs	r4, #0
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	4680      	mov	r8, r0
 80074e2:	4689      	mov	r9, r1
 80074e4:	4630      	mov	r0, r6
 80074e6:	4639      	mov	r1, r7
 80074e8:	f7f8 fe38 	bl	800015c <__adddf3>
 80074ec:	4632      	mov	r2, r6
 80074ee:	463b      	mov	r3, r7
 80074f0:	4620      	mov	r0, r4
 80074f2:	460d      	mov	r5, r1
 80074f4:	f7f8 fe30 	bl	8000158 <__aeabi_dsub>
 80074f8:	4602      	mov	r2, r0
 80074fa:	460b      	mov	r3, r1
 80074fc:	4640      	mov	r0, r8
 80074fe:	4649      	mov	r1, r9
 8007500:	f7f8 fe2a 	bl	8000158 <__aeabi_dsub>
 8007504:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007508:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800750c:	2300      	movs	r3, #0
 800750e:	9304      	str	r3, [sp, #16]
 8007510:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007514:	4606      	mov	r6, r0
 8007516:	460f      	mov	r7, r1
 8007518:	e9dd 0100 	ldrd	r0, r1, [sp]
 800751c:	4652      	mov	r2, sl
 800751e:	465b      	mov	r3, fp
 8007520:	f7f8 fe1a 	bl	8000158 <__aeabi_dsub>
 8007524:	4622      	mov	r2, r4
 8007526:	462b      	mov	r3, r5
 8007528:	f7f8 ffce 	bl	80004c8 <__aeabi_dmul>
 800752c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007530:	4680      	mov	r8, r0
 8007532:	4689      	mov	r9, r1
 8007534:	4630      	mov	r0, r6
 8007536:	4639      	mov	r1, r7
 8007538:	f7f8 ffc6 	bl	80004c8 <__aeabi_dmul>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4640      	mov	r0, r8
 8007542:	4649      	mov	r1, r9
 8007544:	f7f8 fe0a 	bl	800015c <__adddf3>
 8007548:	4652      	mov	r2, sl
 800754a:	465b      	mov	r3, fp
 800754c:	4606      	mov	r6, r0
 800754e:	460f      	mov	r7, r1
 8007550:	4620      	mov	r0, r4
 8007552:	4629      	mov	r1, r5
 8007554:	f7f8 ffb8 	bl	80004c8 <__aeabi_dmul>
 8007558:	460b      	mov	r3, r1
 800755a:	4602      	mov	r2, r0
 800755c:	4680      	mov	r8, r0
 800755e:	4689      	mov	r9, r1
 8007560:	4630      	mov	r0, r6
 8007562:	4639      	mov	r1, r7
 8007564:	f7f8 fdfa 	bl	800015c <__adddf3>
 8007568:	4b18      	ldr	r3, [pc, #96]	@ (80075cc <__ieee754_pow+0x40c>)
 800756a:	4604      	mov	r4, r0
 800756c:	4299      	cmp	r1, r3
 800756e:	460d      	mov	r5, r1
 8007570:	468a      	mov	sl, r1
 8007572:	468b      	mov	fp, r1
 8007574:	f340 82e0 	ble.w	8007b38 <__ieee754_pow+0x978>
 8007578:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800757c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007580:	4303      	orrs	r3, r0
 8007582:	f000 81df 	beq.w	8007944 <__ieee754_pow+0x784>
 8007586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800758a:	2200      	movs	r2, #0
 800758c:	2300      	movs	r3, #0
 800758e:	f7f9 fa0d 	bl	80009ac <__aeabi_dcmplt>
 8007592:	3800      	subs	r0, #0
 8007594:	bf18      	it	ne
 8007596:	2001      	movne	r0, #1
 8007598:	e71d      	b.n	80073d6 <__ieee754_pow+0x216>
 800759a:	bf00      	nop
 800759c:	f3af 8000 	nop.w
 80075a0:	60000000 	.word	0x60000000
 80075a4:	3ff71547 	.word	0x3ff71547
 80075a8:	f85ddf44 	.word	0xf85ddf44
 80075ac:	3e54ae0b 	.word	0x3e54ae0b
 80075b0:	55555555 	.word	0x55555555
 80075b4:	3fd55555 	.word	0x3fd55555
 80075b8:	652b82fe 	.word	0x652b82fe
 80075bc:	3ff71547 	.word	0x3ff71547
 80075c0:	3ff00000 	.word	0x3ff00000
 80075c4:	3fd00000 	.word	0x3fd00000
 80075c8:	3fe00000 	.word	0x3fe00000
 80075cc:	408fffff 	.word	0x408fffff
 80075d0:	4ad3      	ldr	r2, [pc, #844]	@ (8007920 <__ieee754_pow+0x760>)
 80075d2:	402a      	ands	r2, r5
 80075d4:	2a00      	cmp	r2, #0
 80075d6:	f040 817a 	bne.w	80078ce <__ieee754_pow+0x70e>
 80075da:	4bd2      	ldr	r3, [pc, #840]	@ (8007924 <__ieee754_pow+0x764>)
 80075dc:	2200      	movs	r2, #0
 80075de:	f7f8 ff73 	bl	80004c8 <__aeabi_dmul>
 80075e2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80075e6:	460b      	mov	r3, r1
 80075e8:	151a      	asrs	r2, r3, #20
 80075ea:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80075ee:	4422      	add	r2, r4
 80075f0:	920a      	str	r2, [sp, #40]	@ 0x28
 80075f2:	4acd      	ldr	r2, [pc, #820]	@ (8007928 <__ieee754_pow+0x768>)
 80075f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075f8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80075fc:	4293      	cmp	r3, r2
 80075fe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007602:	dd08      	ble.n	8007616 <__ieee754_pow+0x456>
 8007604:	4ac9      	ldr	r2, [pc, #804]	@ (800792c <__ieee754_pow+0x76c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	f340 8163 	ble.w	80078d2 <__ieee754_pow+0x712>
 800760c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800760e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007612:	3301      	adds	r3, #1
 8007614:	930a      	str	r3, [sp, #40]	@ 0x28
 8007616:	2600      	movs	r6, #0
 8007618:	00f3      	lsls	r3, r6, #3
 800761a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800761c:	4bc4      	ldr	r3, [pc, #784]	@ (8007930 <__ieee754_pow+0x770>)
 800761e:	4629      	mov	r1, r5
 8007620:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007624:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007628:	461a      	mov	r2, r3
 800762a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800762e:	4623      	mov	r3, r4
 8007630:	4682      	mov	sl, r0
 8007632:	f7f8 fd91 	bl	8000158 <__aeabi_dsub>
 8007636:	4652      	mov	r2, sl
 8007638:	462b      	mov	r3, r5
 800763a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800763e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007642:	f7f8 fd8b 	bl	800015c <__adddf3>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	2000      	movs	r0, #0
 800764c:	49b9      	ldr	r1, [pc, #740]	@ (8007934 <__ieee754_pow+0x774>)
 800764e:	f7f9 f865 	bl	800071c <__aeabi_ddiv>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800765a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800765e:	f7f8 ff33 	bl	80004c8 <__aeabi_dmul>
 8007662:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007666:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800766a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800766e:	2300      	movs	r3, #0
 8007670:	2200      	movs	r2, #0
 8007672:	46ab      	mov	fp, r5
 8007674:	106d      	asrs	r5, r5, #1
 8007676:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800767a:	9304      	str	r3, [sp, #16]
 800767c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007680:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007684:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007688:	4640      	mov	r0, r8
 800768a:	4649      	mov	r1, r9
 800768c:	4614      	mov	r4, r2
 800768e:	461d      	mov	r5, r3
 8007690:	f7f8 ff1a 	bl	80004c8 <__aeabi_dmul>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800769c:	f7f8 fd5c 	bl	8000158 <__aeabi_dsub>
 80076a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076a4:	4606      	mov	r6, r0
 80076a6:	460f      	mov	r7, r1
 80076a8:	4620      	mov	r0, r4
 80076aa:	4629      	mov	r1, r5
 80076ac:	f7f8 fd54 	bl	8000158 <__aeabi_dsub>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	4650      	mov	r0, sl
 80076b6:	4659      	mov	r1, fp
 80076b8:	f7f8 fd4e 	bl	8000158 <__aeabi_dsub>
 80076bc:	4642      	mov	r2, r8
 80076be:	464b      	mov	r3, r9
 80076c0:	f7f8 ff02 	bl	80004c8 <__aeabi_dmul>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	4630      	mov	r0, r6
 80076ca:	4639      	mov	r1, r7
 80076cc:	f7f8 fd44 	bl	8000158 <__aeabi_dsub>
 80076d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80076d4:	f7f8 fef8 	bl	80004c8 <__aeabi_dmul>
 80076d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076e0:	4610      	mov	r0, r2
 80076e2:	4619      	mov	r1, r3
 80076e4:	f7f8 fef0 	bl	80004c8 <__aeabi_dmul>
 80076e8:	a37b      	add	r3, pc, #492	@ (adr r3, 80078d8 <__ieee754_pow+0x718>)
 80076ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ee:	4604      	mov	r4, r0
 80076f0:	460d      	mov	r5, r1
 80076f2:	f7f8 fee9 	bl	80004c8 <__aeabi_dmul>
 80076f6:	a37a      	add	r3, pc, #488	@ (adr r3, 80078e0 <__ieee754_pow+0x720>)
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f7f8 fd2e 	bl	800015c <__adddf3>
 8007700:	4622      	mov	r2, r4
 8007702:	462b      	mov	r3, r5
 8007704:	f7f8 fee0 	bl	80004c8 <__aeabi_dmul>
 8007708:	a377      	add	r3, pc, #476	@ (adr r3, 80078e8 <__ieee754_pow+0x728>)
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f7f8 fd25 	bl	800015c <__adddf3>
 8007712:	4622      	mov	r2, r4
 8007714:	462b      	mov	r3, r5
 8007716:	f7f8 fed7 	bl	80004c8 <__aeabi_dmul>
 800771a:	a375      	add	r3, pc, #468	@ (adr r3, 80078f0 <__ieee754_pow+0x730>)
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	f7f8 fd1c 	bl	800015c <__adddf3>
 8007724:	4622      	mov	r2, r4
 8007726:	462b      	mov	r3, r5
 8007728:	f7f8 fece 	bl	80004c8 <__aeabi_dmul>
 800772c:	a372      	add	r3, pc, #456	@ (adr r3, 80078f8 <__ieee754_pow+0x738>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f7f8 fd13 	bl	800015c <__adddf3>
 8007736:	4622      	mov	r2, r4
 8007738:	462b      	mov	r3, r5
 800773a:	f7f8 fec5 	bl	80004c8 <__aeabi_dmul>
 800773e:	a370      	add	r3, pc, #448	@ (adr r3, 8007900 <__ieee754_pow+0x740>)
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	f7f8 fd0a 	bl	800015c <__adddf3>
 8007748:	4622      	mov	r2, r4
 800774a:	4606      	mov	r6, r0
 800774c:	460f      	mov	r7, r1
 800774e:	462b      	mov	r3, r5
 8007750:	4620      	mov	r0, r4
 8007752:	4629      	mov	r1, r5
 8007754:	f7f8 feb8 	bl	80004c8 <__aeabi_dmul>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4630      	mov	r0, r6
 800775e:	4639      	mov	r1, r7
 8007760:	f7f8 feb2 	bl	80004c8 <__aeabi_dmul>
 8007764:	4604      	mov	r4, r0
 8007766:	460d      	mov	r5, r1
 8007768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800776c:	4642      	mov	r2, r8
 800776e:	464b      	mov	r3, r9
 8007770:	f7f8 fcf4 	bl	800015c <__adddf3>
 8007774:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007778:	f7f8 fea6 	bl	80004c8 <__aeabi_dmul>
 800777c:	4622      	mov	r2, r4
 800777e:	462b      	mov	r3, r5
 8007780:	f7f8 fcec 	bl	800015c <__adddf3>
 8007784:	4642      	mov	r2, r8
 8007786:	4682      	mov	sl, r0
 8007788:	468b      	mov	fp, r1
 800778a:	464b      	mov	r3, r9
 800778c:	4640      	mov	r0, r8
 800778e:	4649      	mov	r1, r9
 8007790:	f7f8 fe9a 	bl	80004c8 <__aeabi_dmul>
 8007794:	2200      	movs	r2, #0
 8007796:	4b68      	ldr	r3, [pc, #416]	@ (8007938 <__ieee754_pow+0x778>)
 8007798:	4606      	mov	r6, r0
 800779a:	460f      	mov	r7, r1
 800779c:	f7f8 fcde 	bl	800015c <__adddf3>
 80077a0:	4652      	mov	r2, sl
 80077a2:	465b      	mov	r3, fp
 80077a4:	f7f8 fcda 	bl	800015c <__adddf3>
 80077a8:	2400      	movs	r4, #0
 80077aa:	460d      	mov	r5, r1
 80077ac:	4622      	mov	r2, r4
 80077ae:	460b      	mov	r3, r1
 80077b0:	4640      	mov	r0, r8
 80077b2:	4649      	mov	r1, r9
 80077b4:	f7f8 fe88 	bl	80004c8 <__aeabi_dmul>
 80077b8:	2200      	movs	r2, #0
 80077ba:	4680      	mov	r8, r0
 80077bc:	4689      	mov	r9, r1
 80077be:	4620      	mov	r0, r4
 80077c0:	4629      	mov	r1, r5
 80077c2:	4b5d      	ldr	r3, [pc, #372]	@ (8007938 <__ieee754_pow+0x778>)
 80077c4:	f7f8 fcc8 	bl	8000158 <__aeabi_dsub>
 80077c8:	4632      	mov	r2, r6
 80077ca:	463b      	mov	r3, r7
 80077cc:	f7f8 fcc4 	bl	8000158 <__aeabi_dsub>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4650      	mov	r0, sl
 80077d6:	4659      	mov	r1, fp
 80077d8:	f7f8 fcbe 	bl	8000158 <__aeabi_dsub>
 80077dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077e0:	f7f8 fe72 	bl	80004c8 <__aeabi_dmul>
 80077e4:	4622      	mov	r2, r4
 80077e6:	4606      	mov	r6, r0
 80077e8:	460f      	mov	r7, r1
 80077ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80077ee:	462b      	mov	r3, r5
 80077f0:	f7f8 fe6a 	bl	80004c8 <__aeabi_dmul>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4630      	mov	r0, r6
 80077fa:	4639      	mov	r1, r7
 80077fc:	f7f8 fcae 	bl	800015c <__adddf3>
 8007800:	2400      	movs	r4, #0
 8007802:	4606      	mov	r6, r0
 8007804:	460f      	mov	r7, r1
 8007806:	4602      	mov	r2, r0
 8007808:	460b      	mov	r3, r1
 800780a:	4640      	mov	r0, r8
 800780c:	4649      	mov	r1, r9
 800780e:	f7f8 fca5 	bl	800015c <__adddf3>
 8007812:	a33d      	add	r3, pc, #244	@ (adr r3, 8007908 <__ieee754_pow+0x748>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	4620      	mov	r0, r4
 800781a:	460d      	mov	r5, r1
 800781c:	f7f8 fe54 	bl	80004c8 <__aeabi_dmul>
 8007820:	4642      	mov	r2, r8
 8007822:	464b      	mov	r3, r9
 8007824:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007828:	4620      	mov	r0, r4
 800782a:	4629      	mov	r1, r5
 800782c:	f7f8 fc94 	bl	8000158 <__aeabi_dsub>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	4630      	mov	r0, r6
 8007836:	4639      	mov	r1, r7
 8007838:	f7f8 fc8e 	bl	8000158 <__aeabi_dsub>
 800783c:	a334      	add	r3, pc, #208	@ (adr r3, 8007910 <__ieee754_pow+0x750>)
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	f7f8 fe41 	bl	80004c8 <__aeabi_dmul>
 8007846:	a334      	add	r3, pc, #208	@ (adr r3, 8007918 <__ieee754_pow+0x758>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	4606      	mov	r6, r0
 800784e:	460f      	mov	r7, r1
 8007850:	4620      	mov	r0, r4
 8007852:	4629      	mov	r1, r5
 8007854:	f7f8 fe38 	bl	80004c8 <__aeabi_dmul>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4630      	mov	r0, r6
 800785e:	4639      	mov	r1, r7
 8007860:	f7f8 fc7c 	bl	800015c <__adddf3>
 8007864:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007866:	4b35      	ldr	r3, [pc, #212]	@ (800793c <__ieee754_pow+0x77c>)
 8007868:	2400      	movs	r4, #0
 800786a:	4413      	add	r3, r2
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	f7f8 fc74 	bl	800015c <__adddf3>
 8007874:	4682      	mov	sl, r0
 8007876:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007878:	468b      	mov	fp, r1
 800787a:	f7f8 fdbb 	bl	80003f4 <__aeabi_i2d>
 800787e:	4606      	mov	r6, r0
 8007880:	460f      	mov	r7, r1
 8007882:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007884:	4b2e      	ldr	r3, [pc, #184]	@ (8007940 <__ieee754_pow+0x780>)
 8007886:	4413      	add	r3, r2
 8007888:	e9d3 8900 	ldrd	r8, r9, [r3]
 800788c:	4652      	mov	r2, sl
 800788e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007892:	465b      	mov	r3, fp
 8007894:	f7f8 fc62 	bl	800015c <__adddf3>
 8007898:	4642      	mov	r2, r8
 800789a:	464b      	mov	r3, r9
 800789c:	f7f8 fc5e 	bl	800015c <__adddf3>
 80078a0:	4632      	mov	r2, r6
 80078a2:	463b      	mov	r3, r7
 80078a4:	f7f8 fc5a 	bl	800015c <__adddf3>
 80078a8:	4632      	mov	r2, r6
 80078aa:	463b      	mov	r3, r7
 80078ac:	4620      	mov	r0, r4
 80078ae:	460d      	mov	r5, r1
 80078b0:	f7f8 fc52 	bl	8000158 <__aeabi_dsub>
 80078b4:	4642      	mov	r2, r8
 80078b6:	464b      	mov	r3, r9
 80078b8:	f7f8 fc4e 	bl	8000158 <__aeabi_dsub>
 80078bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078c0:	f7f8 fc4a 	bl	8000158 <__aeabi_dsub>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4650      	mov	r0, sl
 80078ca:	4659      	mov	r1, fp
 80078cc:	e618      	b.n	8007500 <__ieee754_pow+0x340>
 80078ce:	2400      	movs	r4, #0
 80078d0:	e68a      	b.n	80075e8 <__ieee754_pow+0x428>
 80078d2:	2601      	movs	r6, #1
 80078d4:	e6a0      	b.n	8007618 <__ieee754_pow+0x458>
 80078d6:	bf00      	nop
 80078d8:	4a454eef 	.word	0x4a454eef
 80078dc:	3fca7e28 	.word	0x3fca7e28
 80078e0:	93c9db65 	.word	0x93c9db65
 80078e4:	3fcd864a 	.word	0x3fcd864a
 80078e8:	a91d4101 	.word	0xa91d4101
 80078ec:	3fd17460 	.word	0x3fd17460
 80078f0:	518f264d 	.word	0x518f264d
 80078f4:	3fd55555 	.word	0x3fd55555
 80078f8:	db6fabff 	.word	0xdb6fabff
 80078fc:	3fdb6db6 	.word	0x3fdb6db6
 8007900:	33333303 	.word	0x33333303
 8007904:	3fe33333 	.word	0x3fe33333
 8007908:	e0000000 	.word	0xe0000000
 800790c:	3feec709 	.word	0x3feec709
 8007910:	dc3a03fd 	.word	0xdc3a03fd
 8007914:	3feec709 	.word	0x3feec709
 8007918:	145b01f5 	.word	0x145b01f5
 800791c:	be3e2fe0 	.word	0xbe3e2fe0
 8007920:	7ff00000 	.word	0x7ff00000
 8007924:	43400000 	.word	0x43400000
 8007928:	0003988e 	.word	0x0003988e
 800792c:	000bb679 	.word	0x000bb679
 8007930:	08007e80 	.word	0x08007e80
 8007934:	3ff00000 	.word	0x3ff00000
 8007938:	40080000 	.word	0x40080000
 800793c:	08007e60 	.word	0x08007e60
 8007940:	08007e70 	.word	0x08007e70
 8007944:	a39a      	add	r3, pc, #616	@ (adr r3, 8007bb0 <__ieee754_pow+0x9f0>)
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	4630      	mov	r0, r6
 800794c:	4639      	mov	r1, r7
 800794e:	f7f8 fc05 	bl	800015c <__adddf3>
 8007952:	4642      	mov	r2, r8
 8007954:	e9cd 0100 	strd	r0, r1, [sp]
 8007958:	464b      	mov	r3, r9
 800795a:	4620      	mov	r0, r4
 800795c:	4629      	mov	r1, r5
 800795e:	f7f8 fbfb 	bl	8000158 <__aeabi_dsub>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	e9dd 0100 	ldrd	r0, r1, [sp]
 800796a:	f7f9 f83d 	bl	80009e8 <__aeabi_dcmpgt>
 800796e:	2800      	cmp	r0, #0
 8007970:	f47f ae09 	bne.w	8007586 <__ieee754_pow+0x3c6>
 8007974:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007978:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800797c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8007980:	fa43 fa0a 	asr.w	sl, r3, sl
 8007984:	44da      	add	sl, fp
 8007986:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800798a:	489b      	ldr	r0, [pc, #620]	@ (8007bf8 <__ieee754_pow+0xa38>)
 800798c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007990:	4108      	asrs	r0, r1
 8007992:	ea00 030a 	and.w	r3, r0, sl
 8007996:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800799a:	f1c1 0114 	rsb	r1, r1, #20
 800799e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80079a2:	4640      	mov	r0, r8
 80079a4:	fa4a fa01 	asr.w	sl, sl, r1
 80079a8:	f1bb 0f00 	cmp.w	fp, #0
 80079ac:	4649      	mov	r1, r9
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	bfb8      	it	lt
 80079b4:	f1ca 0a00 	rsblt	sl, sl, #0
 80079b8:	f7f8 fbce 	bl	8000158 <__aeabi_dsub>
 80079bc:	4680      	mov	r8, r0
 80079be:	4689      	mov	r9, r1
 80079c0:	2400      	movs	r4, #0
 80079c2:	4632      	mov	r2, r6
 80079c4:	463b      	mov	r3, r7
 80079c6:	4640      	mov	r0, r8
 80079c8:	4649      	mov	r1, r9
 80079ca:	f7f8 fbc7 	bl	800015c <__adddf3>
 80079ce:	a37a      	add	r3, pc, #488	@ (adr r3, 8007bb8 <__ieee754_pow+0x9f8>)
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	4620      	mov	r0, r4
 80079d6:	460d      	mov	r5, r1
 80079d8:	f7f8 fd76 	bl	80004c8 <__aeabi_dmul>
 80079dc:	4642      	mov	r2, r8
 80079de:	464b      	mov	r3, r9
 80079e0:	e9cd 0100 	strd	r0, r1, [sp]
 80079e4:	4620      	mov	r0, r4
 80079e6:	4629      	mov	r1, r5
 80079e8:	f7f8 fbb6 	bl	8000158 <__aeabi_dsub>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	4630      	mov	r0, r6
 80079f2:	4639      	mov	r1, r7
 80079f4:	f7f8 fbb0 	bl	8000158 <__aeabi_dsub>
 80079f8:	a371      	add	r3, pc, #452	@ (adr r3, 8007bc0 <__ieee754_pow+0xa00>)
 80079fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fe:	f7f8 fd63 	bl	80004c8 <__aeabi_dmul>
 8007a02:	a371      	add	r3, pc, #452	@ (adr r3, 8007bc8 <__ieee754_pow+0xa08>)
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	4680      	mov	r8, r0
 8007a0a:	4689      	mov	r9, r1
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	4629      	mov	r1, r5
 8007a10:	f7f8 fd5a 	bl	80004c8 <__aeabi_dmul>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4640      	mov	r0, r8
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	f7f8 fb9e 	bl	800015c <__adddf3>
 8007a20:	4604      	mov	r4, r0
 8007a22:	460d      	mov	r5, r1
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a2c:	f7f8 fb96 	bl	800015c <__adddf3>
 8007a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a34:	4680      	mov	r8, r0
 8007a36:	4689      	mov	r9, r1
 8007a38:	f7f8 fb8e 	bl	8000158 <__aeabi_dsub>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4620      	mov	r0, r4
 8007a42:	4629      	mov	r1, r5
 8007a44:	f7f8 fb88 	bl	8000158 <__aeabi_dsub>
 8007a48:	4642      	mov	r2, r8
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	460f      	mov	r7, r1
 8007a4e:	464b      	mov	r3, r9
 8007a50:	4640      	mov	r0, r8
 8007a52:	4649      	mov	r1, r9
 8007a54:	f7f8 fd38 	bl	80004c8 <__aeabi_dmul>
 8007a58:	a35d      	add	r3, pc, #372	@ (adr r3, 8007bd0 <__ieee754_pow+0xa10>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	4604      	mov	r4, r0
 8007a60:	460d      	mov	r5, r1
 8007a62:	f7f8 fd31 	bl	80004c8 <__aeabi_dmul>
 8007a66:	a35c      	add	r3, pc, #368	@ (adr r3, 8007bd8 <__ieee754_pow+0xa18>)
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	f7f8 fb74 	bl	8000158 <__aeabi_dsub>
 8007a70:	4622      	mov	r2, r4
 8007a72:	462b      	mov	r3, r5
 8007a74:	f7f8 fd28 	bl	80004c8 <__aeabi_dmul>
 8007a78:	a359      	add	r3, pc, #356	@ (adr r3, 8007be0 <__ieee754_pow+0xa20>)
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	f7f8 fb6d 	bl	800015c <__adddf3>
 8007a82:	4622      	mov	r2, r4
 8007a84:	462b      	mov	r3, r5
 8007a86:	f7f8 fd1f 	bl	80004c8 <__aeabi_dmul>
 8007a8a:	a357      	add	r3, pc, #348	@ (adr r3, 8007be8 <__ieee754_pow+0xa28>)
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	f7f8 fb62 	bl	8000158 <__aeabi_dsub>
 8007a94:	4622      	mov	r2, r4
 8007a96:	462b      	mov	r3, r5
 8007a98:	f7f8 fd16 	bl	80004c8 <__aeabi_dmul>
 8007a9c:	a354      	add	r3, pc, #336	@ (adr r3, 8007bf0 <__ieee754_pow+0xa30>)
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	f7f8 fb5b 	bl	800015c <__adddf3>
 8007aa6:	4622      	mov	r2, r4
 8007aa8:	462b      	mov	r3, r5
 8007aaa:	f7f8 fd0d 	bl	80004c8 <__aeabi_dmul>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	f7f8 fb4f 	bl	8000158 <__aeabi_dsub>
 8007aba:	4604      	mov	r4, r0
 8007abc:	460d      	mov	r5, r1
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	4649      	mov	r1, r9
 8007ac6:	f7f8 fcff 	bl	80004c8 <__aeabi_dmul>
 8007aca:	2200      	movs	r2, #0
 8007acc:	e9cd 0100 	strd	r0, r1, [sp]
 8007ad0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	f7f8 fb3e 	bl	8000158 <__aeabi_dsub>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ae4:	f7f8 fe1a 	bl	800071c <__aeabi_ddiv>
 8007ae8:	4632      	mov	r2, r6
 8007aea:	4604      	mov	r4, r0
 8007aec:	460d      	mov	r5, r1
 8007aee:	463b      	mov	r3, r7
 8007af0:	4640      	mov	r0, r8
 8007af2:	4649      	mov	r1, r9
 8007af4:	f7f8 fce8 	bl	80004c8 <__aeabi_dmul>
 8007af8:	4632      	mov	r2, r6
 8007afa:	463b      	mov	r3, r7
 8007afc:	f7f8 fb2e 	bl	800015c <__adddf3>
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4620      	mov	r0, r4
 8007b06:	4629      	mov	r1, r5
 8007b08:	f7f8 fb26 	bl	8000158 <__aeabi_dsub>
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	464b      	mov	r3, r9
 8007b10:	f7f8 fb22 	bl	8000158 <__aeabi_dsub>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	2000      	movs	r0, #0
 8007b1a:	4938      	ldr	r1, [pc, #224]	@ (8007bfc <__ieee754_pow+0xa3c>)
 8007b1c:	f7f8 fb1c 	bl	8000158 <__aeabi_dsub>
 8007b20:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007b24:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8007b28:	da2e      	bge.n	8007b88 <__ieee754_pow+0x9c8>
 8007b2a:	4652      	mov	r2, sl
 8007b2c:	f000 f870 	bl	8007c10 <scalbn>
 8007b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b34:	f7ff bbed 	b.w	8007312 <__ieee754_pow+0x152>
 8007b38:	4c31      	ldr	r4, [pc, #196]	@ (8007c00 <__ieee754_pow+0xa40>)
 8007b3a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007b3e:	42a3      	cmp	r3, r4
 8007b40:	d91a      	bls.n	8007b78 <__ieee754_pow+0x9b8>
 8007b42:	4b30      	ldr	r3, [pc, #192]	@ (8007c04 <__ieee754_pow+0xa44>)
 8007b44:	440b      	add	r3, r1
 8007b46:	4303      	orrs	r3, r0
 8007b48:	d009      	beq.n	8007b5e <__ieee754_pow+0x99e>
 8007b4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2300      	movs	r3, #0
 8007b52:	f7f8 ff2b 	bl	80009ac <__aeabi_dcmplt>
 8007b56:	3800      	subs	r0, #0
 8007b58:	bf18      	it	ne
 8007b5a:	2001      	movne	r0, #1
 8007b5c:	e444      	b.n	80073e8 <__ieee754_pow+0x228>
 8007b5e:	4642      	mov	r2, r8
 8007b60:	464b      	mov	r3, r9
 8007b62:	f7f8 faf9 	bl	8000158 <__aeabi_dsub>
 8007b66:	4632      	mov	r2, r6
 8007b68:	463b      	mov	r3, r7
 8007b6a:	f7f8 ff33 	bl	80009d4 <__aeabi_dcmpge>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d1eb      	bne.n	8007b4a <__ieee754_pow+0x98a>
 8007b72:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8007c08 <__ieee754_pow+0xa48>
 8007b76:	e6fd      	b.n	8007974 <__ieee754_pow+0x7b4>
 8007b78:	469a      	mov	sl, r3
 8007b7a:	4b24      	ldr	r3, [pc, #144]	@ (8007c0c <__ieee754_pow+0xa4c>)
 8007b7c:	459a      	cmp	sl, r3
 8007b7e:	f63f aef9 	bhi.w	8007974 <__ieee754_pow+0x7b4>
 8007b82:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007b86:	e71b      	b.n	80079c0 <__ieee754_pow+0x800>
 8007b88:	4621      	mov	r1, r4
 8007b8a:	e7d1      	b.n	8007b30 <__ieee754_pow+0x970>
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	491b      	ldr	r1, [pc, #108]	@ (8007bfc <__ieee754_pow+0xa3c>)
 8007b90:	f7ff bb34 	b.w	80071fc <__ieee754_pow+0x3c>
 8007b94:	2000      	movs	r0, #0
 8007b96:	2100      	movs	r1, #0
 8007b98:	f7ff bb30 	b.w	80071fc <__ieee754_pow+0x3c>
 8007b9c:	4650      	mov	r0, sl
 8007b9e:	4659      	mov	r1, fp
 8007ba0:	f7ff bb2c 	b.w	80071fc <__ieee754_pow+0x3c>
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	f7ff bb79 	b.w	800729c <__ieee754_pow+0xdc>
 8007baa:	2400      	movs	r4, #0
 8007bac:	f7ff bb64 	b.w	8007278 <__ieee754_pow+0xb8>
 8007bb0:	652b82fe 	.word	0x652b82fe
 8007bb4:	3c971547 	.word	0x3c971547
 8007bb8:	00000000 	.word	0x00000000
 8007bbc:	3fe62e43 	.word	0x3fe62e43
 8007bc0:	fefa39ef 	.word	0xfefa39ef
 8007bc4:	3fe62e42 	.word	0x3fe62e42
 8007bc8:	0ca86c39 	.word	0x0ca86c39
 8007bcc:	be205c61 	.word	0xbe205c61
 8007bd0:	72bea4d0 	.word	0x72bea4d0
 8007bd4:	3e663769 	.word	0x3e663769
 8007bd8:	c5d26bf1 	.word	0xc5d26bf1
 8007bdc:	3ebbbd41 	.word	0x3ebbbd41
 8007be0:	af25de2c 	.word	0xaf25de2c
 8007be4:	3f11566a 	.word	0x3f11566a
 8007be8:	16bebd93 	.word	0x16bebd93
 8007bec:	3f66c16c 	.word	0x3f66c16c
 8007bf0:	5555553e 	.word	0x5555553e
 8007bf4:	3fc55555 	.word	0x3fc55555
 8007bf8:	fff00000 	.word	0xfff00000
 8007bfc:	3ff00000 	.word	0x3ff00000
 8007c00:	4090cbff 	.word	0x4090cbff
 8007c04:	3f6f3400 	.word	0x3f6f3400
 8007c08:	4090cc00 	.word	0x4090cc00
 8007c0c:	3fe00000 	.word	0x3fe00000

08007c10 <scalbn>:
 8007c10:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8007c14:	4616      	mov	r6, r2
 8007c16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c1a:	4683      	mov	fp, r0
 8007c1c:	468c      	mov	ip, r1
 8007c1e:	460b      	mov	r3, r1
 8007c20:	b982      	cbnz	r2, 8007c44 <scalbn+0x34>
 8007c22:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007c26:	4303      	orrs	r3, r0
 8007c28:	d039      	beq.n	8007c9e <scalbn+0x8e>
 8007c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8007ce8 <scalbn+0xd8>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f7f8 fc4b 	bl	80004c8 <__aeabi_dmul>
 8007c32:	4b2e      	ldr	r3, [pc, #184]	@ (8007cec <scalbn+0xdc>)
 8007c34:	4683      	mov	fp, r0
 8007c36:	429e      	cmp	r6, r3
 8007c38:	468c      	mov	ip, r1
 8007c3a:	da0d      	bge.n	8007c58 <scalbn+0x48>
 8007c3c:	a326      	add	r3, pc, #152	@ (adr r3, 8007cd8 <scalbn+0xc8>)
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	e01b      	b.n	8007c7c <scalbn+0x6c>
 8007c44:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8007c48:	42ba      	cmp	r2, r7
 8007c4a:	d109      	bne.n	8007c60 <scalbn+0x50>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	f7f8 fa85 	bl	800015c <__adddf3>
 8007c52:	4683      	mov	fp, r0
 8007c54:	468c      	mov	ip, r1
 8007c56:	e022      	b.n	8007c9e <scalbn+0x8e>
 8007c58:	460b      	mov	r3, r1
 8007c5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c5e:	3a36      	subs	r2, #54	@ 0x36
 8007c60:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007c64:	428e      	cmp	r6, r1
 8007c66:	dd0c      	ble.n	8007c82 <scalbn+0x72>
 8007c68:	a31d      	add	r3, pc, #116	@ (adr r3, 8007ce0 <scalbn+0xd0>)
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	461c      	mov	r4, r3
 8007c70:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8007c74:	f361 74df 	bfi	r4, r1, #31, #1
 8007c78:	4621      	mov	r1, r4
 8007c7a:	481d      	ldr	r0, [pc, #116]	@ (8007cf0 <scalbn+0xe0>)
 8007c7c:	f7f8 fc24 	bl	80004c8 <__aeabi_dmul>
 8007c80:	e7e7      	b.n	8007c52 <scalbn+0x42>
 8007c82:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007c86:	4432      	add	r2, r6
 8007c88:	428a      	cmp	r2, r1
 8007c8a:	dced      	bgt.n	8007c68 <scalbn+0x58>
 8007c8c:	2a00      	cmp	r2, #0
 8007c8e:	dd0a      	ble.n	8007ca6 <scalbn+0x96>
 8007c90:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007c94:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007c98:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c9c:	46ac      	mov	ip, r5
 8007c9e:	4658      	mov	r0, fp
 8007ca0:	4661      	mov	r1, ip
 8007ca2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8007ca6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007caa:	da09      	bge.n	8007cc0 <scalbn+0xb0>
 8007cac:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8007cb0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8007cb4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8007cb8:	480e      	ldr	r0, [pc, #56]	@ (8007cf4 <scalbn+0xe4>)
 8007cba:	f041 011f 	orr.w	r1, r1, #31
 8007cbe:	e7bd      	b.n	8007c3c <scalbn+0x2c>
 8007cc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007cc4:	3236      	adds	r2, #54	@ 0x36
 8007cc6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007cca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007cce:	4658      	mov	r0, fp
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4b08      	ldr	r3, [pc, #32]	@ (8007cf8 <scalbn+0xe8>)
 8007cd6:	e7d1      	b.n	8007c7c <scalbn+0x6c>
 8007cd8:	c2f8f359 	.word	0xc2f8f359
 8007cdc:	01a56e1f 	.word	0x01a56e1f
 8007ce0:	8800759c 	.word	0x8800759c
 8007ce4:	7e37e43c 	.word	0x7e37e43c
 8007ce8:	43500000 	.word	0x43500000
 8007cec:	ffff3cb0 	.word	0xffff3cb0
 8007cf0:	8800759c 	.word	0x8800759c
 8007cf4:	c2f8f359 	.word	0xc2f8f359
 8007cf8:	3c900000 	.word	0x3c900000

08007cfc <with_errno>:
 8007cfc:	b570      	push	{r4, r5, r6, lr}
 8007cfe:	4604      	mov	r4, r0
 8007d00:	460d      	mov	r5, r1
 8007d02:	4616      	mov	r6, r2
 8007d04:	f7ff f814 	bl	8006d30 <__errno>
 8007d08:	4629      	mov	r1, r5
 8007d0a:	6006      	str	r6, [r0, #0]
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}

08007d10 <xflow>:
 8007d10:	b513      	push	{r0, r1, r4, lr}
 8007d12:	4604      	mov	r4, r0
 8007d14:	4619      	mov	r1, r3
 8007d16:	4610      	mov	r0, r2
 8007d18:	b10c      	cbz	r4, 8007d1e <xflow+0xe>
 8007d1a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007d1e:	e9cd 2300 	strd	r2, r3, [sp]
 8007d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d26:	f7f8 fbcf 	bl	80004c8 <__aeabi_dmul>
 8007d2a:	2222      	movs	r2, #34	@ 0x22
 8007d2c:	b002      	add	sp, #8
 8007d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d32:	f7ff bfe3 	b.w	8007cfc <with_errno>

08007d36 <__math_uflow>:
 8007d36:	2200      	movs	r2, #0
 8007d38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d3c:	f7ff bfe8 	b.w	8007d10 <xflow>

08007d40 <__math_oflow>:
 8007d40:	2200      	movs	r2, #0
 8007d42:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8007d46:	f7ff bfe3 	b.w	8007d10 <xflow>
	...

08007d4c <_init>:
 8007d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4e:	bf00      	nop
 8007d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d52:	bc08      	pop	{r3}
 8007d54:	469e      	mov	lr, r3
 8007d56:	4770      	bx	lr

08007d58 <_fini>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	bf00      	nop
 8007d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5e:	bc08      	pop	{r3}
 8007d60:	469e      	mov	lr, r3
 8007d62:	4770      	bx	lr
