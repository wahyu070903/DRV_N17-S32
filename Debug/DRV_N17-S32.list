
DRV_N17-S32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080094b0  080094b0  0000a4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009590  08009590  0000b080  2**0
                  CONTENTS
  4 .ARM          00000000  08009590  08009590  0000b080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009590  08009590  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009590  08009590  0000a590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009594  08009594  0000a594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009598  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000132c  20000080  08009618  0000b080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013ac  08009618  0000b3ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187ce  00000000  00000000  0000b0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a3c  00000000  00000000  00023877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  000272b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001073  00000000  00000000  000287c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6ab  00000000  00000000  0002983b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019860  00000000  00000000  00043ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096315  00000000  00000000  0005d746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3a5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006024  00000000  00000000  000f3aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f9ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08009498 	.word	0x08009498

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08009498 	.word	0x08009498

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_frsub>:
 8000a68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a6c:	e002      	b.n	8000a74 <__addsf3>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_fsub>:
 8000a70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a74 <__addsf3>:
 8000a74:	0042      	lsls	r2, r0, #1
 8000a76:	bf1f      	itttt	ne
 8000a78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a7c:	ea92 0f03 	teqne	r2, r3
 8000a80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a88:	d06a      	beq.n	8000b60 <__addsf3+0xec>
 8000a8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a92:	bfc1      	itttt	gt
 8000a94:	18d2      	addgt	r2, r2, r3
 8000a96:	4041      	eorgt	r1, r0
 8000a98:	4048      	eorgt	r0, r1
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	bfb8      	it	lt
 8000a9e:	425b      	neglt	r3, r3
 8000aa0:	2b19      	cmp	r3, #25
 8000aa2:	bf88      	it	hi
 8000aa4:	4770      	bxhi	lr
 8000aa6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ab2:	bf18      	it	ne
 8000ab4:	4240      	negne	r0, r0
 8000ab6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000abe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ac2:	bf18      	it	ne
 8000ac4:	4249      	negne	r1, r1
 8000ac6:	ea92 0f03 	teq	r2, r3
 8000aca:	d03f      	beq.n	8000b4c <__addsf3+0xd8>
 8000acc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad4:	eb10 000c 	adds.w	r0, r0, ip
 8000ad8:	f1c3 0320 	rsb	r3, r3, #32
 8000adc:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ae4:	d502      	bpl.n	8000aec <__addsf3+0x78>
 8000ae6:	4249      	negs	r1, r1
 8000ae8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000af0:	d313      	bcc.n	8000b1a <__addsf3+0xa6>
 8000af2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000af6:	d306      	bcc.n	8000b06 <__addsf3+0x92>
 8000af8:	0840      	lsrs	r0, r0, #1
 8000afa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afe:	f102 0201 	add.w	r2, r2, #1
 8000b02:	2afe      	cmp	r2, #254	@ 0xfe
 8000b04:	d251      	bcs.n	8000baa <__addsf3+0x136>
 8000b06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b0e:	bf08      	it	eq
 8000b10:	f020 0001 	biceq.w	r0, r0, #1
 8000b14:	ea40 0003 	orr.w	r0, r0, r3
 8000b18:	4770      	bx	lr
 8000b1a:	0049      	lsls	r1, r1, #1
 8000b1c:	eb40 0000 	adc.w	r0, r0, r0
 8000b20:	3a01      	subs	r2, #1
 8000b22:	bf28      	it	cs
 8000b24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b28:	d2ed      	bcs.n	8000b06 <__addsf3+0x92>
 8000b2a:	fab0 fc80 	clz	ip, r0
 8000b2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b32:	ebb2 020c 	subs.w	r2, r2, ip
 8000b36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3a:	bfaa      	itet	ge
 8000b3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b40:	4252      	neglt	r2, r2
 8000b42:	4318      	orrge	r0, r3
 8000b44:	bfbc      	itt	lt
 8000b46:	40d0      	lsrlt	r0, r2
 8000b48:	4318      	orrlt	r0, r3
 8000b4a:	4770      	bx	lr
 8000b4c:	f092 0f00 	teq	r2, #0
 8000b50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b54:	bf06      	itte	eq
 8000b56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b5a:	3201      	addeq	r2, #1
 8000b5c:	3b01      	subne	r3, #1
 8000b5e:	e7b5      	b.n	8000acc <__addsf3+0x58>
 8000b60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b68:	bf18      	it	ne
 8000b6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6e:	d021      	beq.n	8000bb4 <__addsf3+0x140>
 8000b70:	ea92 0f03 	teq	r2, r3
 8000b74:	d004      	beq.n	8000b80 <__addsf3+0x10c>
 8000b76:	f092 0f00 	teq	r2, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	4608      	moveq	r0, r1
 8000b7e:	4770      	bx	lr
 8000b80:	ea90 0f01 	teq	r0, r1
 8000b84:	bf1c      	itt	ne
 8000b86:	2000      	movne	r0, #0
 8000b88:	4770      	bxne	lr
 8000b8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b8e:	d104      	bne.n	8000b9a <__addsf3+0x126>
 8000b90:	0040      	lsls	r0, r0, #1
 8000b92:	bf28      	it	cs
 8000b94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b98:	4770      	bx	lr
 8000b9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b9e:	bf3c      	itt	cc
 8000ba0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ba4:	4770      	bxcc	lr
 8000ba6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000baa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb2:	4770      	bx	lr
 8000bb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb8:	bf16      	itet	ne
 8000bba:	4608      	movne	r0, r1
 8000bbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc0:	4601      	movne	r1, r0
 8000bc2:	0242      	lsls	r2, r0, #9
 8000bc4:	bf06      	itte	eq
 8000bc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bca:	ea90 0f01 	teqeq	r0, r1
 8000bce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_ui2f>:
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e004      	b.n	8000be4 <__aeabi_i2f+0x8>
 8000bda:	bf00      	nop

08000bdc <__aeabi_i2f>:
 8000bdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000be0:	bf48      	it	mi
 8000be2:	4240      	negmi	r0, r0
 8000be4:	ea5f 0c00 	movs.w	ip, r0
 8000be8:	bf08      	it	eq
 8000bea:	4770      	bxeq	lr
 8000bec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	e01c      	b.n	8000c32 <__aeabi_l2f+0x2a>

08000bf8 <__aeabi_ul2f>:
 8000bf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bfc:	bf08      	it	eq
 8000bfe:	4770      	bxeq	lr
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e00a      	b.n	8000c1c <__aeabi_l2f+0x14>
 8000c06:	bf00      	nop

08000c08 <__aeabi_l2f>:
 8000c08:	ea50 0201 	orrs.w	r2, r0, r1
 8000c0c:	bf08      	it	eq
 8000c0e:	4770      	bxeq	lr
 8000c10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__aeabi_l2f+0x14>
 8000c16:	4240      	negs	r0, r0
 8000c18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1c:	ea5f 0c01 	movs.w	ip, r1
 8000c20:	bf02      	ittt	eq
 8000c22:	4684      	moveq	ip, r0
 8000c24:	4601      	moveq	r1, r0
 8000c26:	2000      	moveq	r0, #0
 8000c28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c2c:	bf08      	it	eq
 8000c2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c36:	fabc f28c 	clz	r2, ip
 8000c3a:	3a08      	subs	r2, #8
 8000c3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c40:	db10      	blt.n	8000c64 <__aeabi_l2f+0x5c>
 8000c42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c46:	4463      	add	r3, ip
 8000c48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c4c:	f1c2 0220 	rsb	r2, r2, #32
 8000c50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c54:	fa20 f202 	lsr.w	r2, r0, r2
 8000c58:	eb43 0002 	adc.w	r0, r3, r2
 8000c5c:	bf08      	it	eq
 8000c5e:	f020 0001 	biceq.w	r0, r0, #1
 8000c62:	4770      	bx	lr
 8000c64:	f102 0220 	add.w	r2, r2, #32
 8000c68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c74:	fa21 f202 	lsr.w	r2, r1, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_fmul>:
 8000c84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c92:	ea92 0f0c 	teqne	r2, ip
 8000c96:	ea93 0f0c 	teqne	r3, ip
 8000c9a:	d06f      	beq.n	8000d7c <__aeabi_fmul+0xf8>
 8000c9c:	441a      	add	r2, r3
 8000c9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca2:	0240      	lsls	r0, r0, #9
 8000ca4:	bf18      	it	ne
 8000ca6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000caa:	d01e      	beq.n	8000cea <__aeabi_fmul+0x66>
 8000cac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cb0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cc4:	bf3e      	ittt	cc
 8000cc6:	0049      	lslcc	r1, r1, #1
 8000cc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	ea40 0001 	orr.w	r0, r0, r1
 8000cd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cd8:	d81d      	bhi.n	8000d16 <__aeabi_fmul+0x92>
 8000cda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce2:	bf08      	it	eq
 8000ce4:	f020 0001 	biceq.w	r0, r0, #1
 8000ce8:	4770      	bx	lr
 8000cea:	f090 0f00 	teq	r0, #0
 8000cee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000cf2:	bf08      	it	eq
 8000cf4:	0249      	lsleq	r1, r1, #9
 8000cf6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000d00:	bfc2      	ittt	gt
 8000d02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d0a:	4770      	bxgt	lr
 8000d0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	dc5d      	bgt.n	8000dd4 <__aeabi_fmul+0x150>
 8000d18:	f112 0f19 	cmn.w	r2, #25
 8000d1c:	bfdc      	itt	le
 8000d1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d22:	4770      	bxle	lr
 8000d24:	f1c2 0200 	rsb	r2, r2, #0
 8000d28:	0041      	lsls	r1, r0, #1
 8000d2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d2e:	f1c2 0220 	rsb	r2, r2, #32
 8000d32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d3a:	f140 0000 	adc.w	r0, r0, #0
 8000d3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d42:	bf08      	it	eq
 8000d44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d48:	4770      	bx	lr
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fmul+0xce>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fmul+0xe6>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e78f      	b.n	8000c9c <__aeabi_fmul+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	bf18      	it	ne
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d00a      	beq.n	8000da2 <__aeabi_fmul+0x11e>
 8000d8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d90:	bf18      	it	ne
 8000d92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d96:	d1d8      	bne.n	8000d4a <__aeabi_fmul+0xc6>
 8000d98:	ea80 0001 	eor.w	r0, r0, r1
 8000d9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	bf17      	itett	ne
 8000da8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dac:	4608      	moveq	r0, r1
 8000dae:	f091 0f00 	teqne	r1, #0
 8000db2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000db6:	d014      	beq.n	8000de2 <__aeabi_fmul+0x15e>
 8000db8:	ea92 0f0c 	teq	r2, ip
 8000dbc:	d101      	bne.n	8000dc2 <__aeabi_fmul+0x13e>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	d10f      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dc2:	ea93 0f0c 	teq	r3, ip
 8000dc6:	d103      	bne.n	8000dd0 <__aeabi_fmul+0x14c>
 8000dc8:	024b      	lsls	r3, r1, #9
 8000dca:	bf18      	it	ne
 8000dcc:	4608      	movne	r0, r1
 8000dce:	d108      	bne.n	8000de2 <__aeabi_fmul+0x15e>
 8000dd0:	ea80 0001 	eor.w	r0, r0, r1
 8000dd4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ddc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de0:	4770      	bx	lr
 8000de2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000de6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000dea:	4770      	bx	lr

08000dec <__aeabi_fdiv>:
 8000dec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000df0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df4:	bf1e      	ittt	ne
 8000df6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dfa:	ea92 0f0c 	teqne	r2, ip
 8000dfe:	ea93 0f0c 	teqne	r3, ip
 8000e02:	d069      	beq.n	8000ed8 <__aeabi_fdiv+0xec>
 8000e04:	eba2 0203 	sub.w	r2, r2, r3
 8000e08:	ea80 0c01 	eor.w	ip, r0, r1
 8000e0c:	0249      	lsls	r1, r1, #9
 8000e0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e12:	d037      	beq.n	8000e84 <__aeabi_fdiv+0x98>
 8000e14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e24:	428b      	cmp	r3, r1
 8000e26:	bf38      	it	cc
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e32:	428b      	cmp	r3, r1
 8000e34:	bf24      	itt	cs
 8000e36:	1a5b      	subcs	r3, r3, r1
 8000e38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e40:	bf24      	itt	cs
 8000e42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e4e:	bf24      	itt	cs
 8000e50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e5c:	bf24      	itt	cs
 8000e5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	bf18      	it	ne
 8000e6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e6e:	d1e0      	bne.n	8000e32 <__aeabi_fdiv+0x46>
 8000e70:	2afd      	cmp	r2, #253	@ 0xfd
 8000e72:	f63f af50 	bhi.w	8000d16 <__aeabi_fmul+0x92>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e7c:	bf08      	it	eq
 8000e7e:	f020 0001 	biceq.w	r0, r0, #1
 8000e82:	4770      	bx	lr
 8000e84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8c:	327f      	adds	r2, #127	@ 0x7f
 8000e8e:	bfc2      	ittt	gt
 8000e90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e98:	4770      	bxgt	lr
 8000e9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	3a01      	subs	r2, #1
 8000ea4:	e737      	b.n	8000d16 <__aeabi_fmul+0x92>
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fdiv+0xc2>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fdiv+0xda>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e795      	b.n	8000e04 <__aeabi_fdiv+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	d108      	bne.n	8000ef4 <__aeabi_fdiv+0x108>
 8000ee2:	0242      	lsls	r2, r0, #9
 8000ee4:	f47f af7d 	bne.w	8000de2 <__aeabi_fmul+0x15e>
 8000ee8:	ea93 0f0c 	teq	r3, ip
 8000eec:	f47f af70 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e776      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000ef4:	ea93 0f0c 	teq	r3, ip
 8000ef8:	d104      	bne.n	8000f04 <__aeabi_fdiv+0x118>
 8000efa:	024b      	lsls	r3, r1, #9
 8000efc:	f43f af4c 	beq.w	8000d98 <__aeabi_fmul+0x114>
 8000f00:	4608      	mov	r0, r1
 8000f02:	e76e      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f04:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f08:	bf18      	it	ne
 8000f0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f0e:	d1ca      	bne.n	8000ea6 <__aeabi_fdiv+0xba>
 8000f10:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f14:	f47f af5c 	bne.w	8000dd0 <__aeabi_fmul+0x14c>
 8000f18:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f1c:	f47f af3c 	bne.w	8000d98 <__aeabi_fmul+0x114>
 8000f20:	e75f      	b.n	8000de2 <__aeabi_fmul+0x15e>
 8000f22:	bf00      	nop

08000f24 <__gesf2>:
 8000f24:	f04f 3cff 	mov.w	ip, #4294967295
 8000f28:	e006      	b.n	8000f38 <__cmpsf2+0x4>
 8000f2a:	bf00      	nop

08000f2c <__lesf2>:
 8000f2c:	f04f 0c01 	mov.w	ip, #1
 8000f30:	e002      	b.n	8000f38 <__cmpsf2+0x4>
 8000f32:	bf00      	nop

08000f34 <__cmpsf2>:
 8000f34:	f04f 0c01 	mov.w	ip, #1
 8000f38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f48:	bf18      	it	ne
 8000f4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f4e:	d011      	beq.n	8000f74 <__cmpsf2+0x40>
 8000f50:	b001      	add	sp, #4
 8000f52:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f56:	bf18      	it	ne
 8000f58:	ea90 0f01 	teqne	r0, r1
 8000f5c:	bf58      	it	pl
 8000f5e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f62:	bf88      	it	hi
 8000f64:	17c8      	asrhi	r0, r1, #31
 8000f66:	bf38      	it	cc
 8000f68:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f6c:	bf18      	it	ne
 8000f6e:	f040 0001 	orrne.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f78:	d102      	bne.n	8000f80 <__cmpsf2+0x4c>
 8000f7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f7e:	d105      	bne.n	8000f8c <__cmpsf2+0x58>
 8000f80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f84:	d1e4      	bne.n	8000f50 <__cmpsf2+0x1c>
 8000f86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f8a:	d0e1      	beq.n	8000f50 <__cmpsf2+0x1c>
 8000f8c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <__aeabi_cfrcmple>:
 8000f94:	4684      	mov	ip, r0
 8000f96:	4608      	mov	r0, r1
 8000f98:	4661      	mov	r1, ip
 8000f9a:	e7ff      	b.n	8000f9c <__aeabi_cfcmpeq>

08000f9c <__aeabi_cfcmpeq>:
 8000f9c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f9e:	f7ff ffc9 	bl	8000f34 <__cmpsf2>
 8000fa2:	2800      	cmp	r0, #0
 8000fa4:	bf48      	it	mi
 8000fa6:	f110 0f00 	cmnmi.w	r0, #0
 8000faa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fac <__aeabi_fcmpeq>:
 8000fac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb0:	f7ff fff4 	bl	8000f9c <__aeabi_cfcmpeq>
 8000fb4:	bf0c      	ite	eq
 8000fb6:	2001      	moveq	r0, #1
 8000fb8:	2000      	movne	r0, #0
 8000fba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_fcmplt>:
 8000fc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc4:	f7ff ffea 	bl	8000f9c <__aeabi_cfcmpeq>
 8000fc8:	bf34      	ite	cc
 8000fca:	2001      	movcc	r0, #1
 8000fcc:	2000      	movcs	r0, #0
 8000fce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_fcmple>:
 8000fd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd8:	f7ff ffe0 	bl	8000f9c <__aeabi_cfcmpeq>
 8000fdc:	bf94      	ite	ls
 8000fde:	2001      	movls	r0, #1
 8000fe0:	2000      	movhi	r0, #0
 8000fe2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_fcmpge>:
 8000fe8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fec:	f7ff ffd2 	bl	8000f94 <__aeabi_cfrcmple>
 8000ff0:	bf94      	ite	ls
 8000ff2:	2001      	movls	r0, #1
 8000ff4:	2000      	movhi	r0, #0
 8000ff6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ffa:	bf00      	nop

08000ffc <__aeabi_fcmpgt>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff ffc8 	bl	8000f94 <__aeabi_cfrcmple>
 8001004:	bf34      	ite	cc
 8001006:	2001      	movcc	r0, #1
 8001008:	2000      	movcs	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <encRead>:
	float angle_deg = (angle * 360.0) / 4096.0;

	*result = angle_deg;
}

void encRead(){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(&hi2c1, (ENC_ADDR << 1), AS5600_RAW_ANGLE_MSB_REG, I2C_MEMADD_SIZE_8BIT, raw_buffer, 2);
 8001016:	2302      	movs	r3, #2
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <encRead+0x20>)
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	220c      	movs	r2, #12
 8001022:	216c      	movs	r1, #108	@ 0x6c
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <encRead+0x24>)
 8001026:	f001 fc05 	bl	8002834 <HAL_I2C_Mem_Read_IT>
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200000a4 	.word	0x200000a4
 8001034:	2000034c 	.word	0x2000034c

08001038 <getCounter>:

int32_t getCounter(){
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
	return accumulate_counter;
 800103c:	4b02      	ldr	r3, [pc, #8]	@ (8001048 <getCounter+0x10>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	200000a0 	.word	0x200000a0

0800104c <encGetBuffer>:

void encGetBuffer(uint8_t* result){
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	result[0] = raw_buffer[0];
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <encGetBuffer+0x24>)
 8001056:	781a      	ldrb	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	701a      	strb	r2, [r3, #0]
	result[1] = raw_buffer[1];
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3301      	adds	r3, #1
 8001060:	4a03      	ldr	r2, [pc, #12]	@ (8001070 <encGetBuffer+0x24>)
 8001062:	7852      	ldrb	r2, [r2, #1]
 8001064:	701a      	strb	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	200000a4 	.word	0x200000a4

08001074 <HAL_I2C_MemRxCpltCallback>:
	filteredValue = sum / FILTER_SIZE;

	return filteredValue;
}

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a42      	ldr	r2, [pc, #264]	@ (800118c <HAL_I2C_MemRxCpltCallback+0x118>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d17c      	bne.n	8001180 <HAL_I2C_MemRxCpltCallback+0x10c>
    	uint16_t position_now = (raw_buffer[0] << 8) | raw_buffer[1];
 8001086:	4b42      	ldr	r3, [pc, #264]	@ (8001190 <HAL_I2C_MemRxCpltCallback+0x11c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	4b40      	ldr	r3, [pc, #256]	@ (8001190 <HAL_I2C_MemRxCpltCallback+0x11c>)
 8001090:	785b      	ldrb	r3, [r3, #1]
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21b      	sxth	r3, r3
 8001098:	817b      	strh	r3, [r7, #10]
//      filter make it worse disable it
//      position_now = lowPassFilter(position_now);
		active_quadrant = -1;
 800109a:	4b3e      	ldr	r3, [pc, #248]	@ (8001194 <HAL_I2C_MemRxCpltCallback+0x120>)
 800109c:	22ff      	movs	r2, #255	@ 0xff
 800109e:	701a      	strb	r2, [r3, #0]

		if(position_now >= 0 && position_now <= 1024) active_quadrant = 1;
 80010a0:	897b      	ldrh	r3, [r7, #10]
 80010a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010a6:	d802      	bhi.n	80010ae <HAL_I2C_MemRxCpltCallback+0x3a>
 80010a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001194 <HAL_I2C_MemRxCpltCallback+0x120>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	701a      	strb	r2, [r3, #0]
		if(position_now >= 1025 && position_now <= 2048) active_quadrant = 2;
 80010ae:	897b      	ldrh	r3, [r7, #10]
 80010b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010b4:	d906      	bls.n	80010c4 <HAL_I2C_MemRxCpltCallback+0x50>
 80010b6:	897b      	ldrh	r3, [r7, #10]
 80010b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80010bc:	d802      	bhi.n	80010c4 <HAL_I2C_MemRxCpltCallback+0x50>
 80010be:	4b35      	ldr	r3, [pc, #212]	@ (8001194 <HAL_I2C_MemRxCpltCallback+0x120>)
 80010c0:	2202      	movs	r2, #2
 80010c2:	701a      	strb	r2, [r3, #0]
		if(position_now >= 2049 && position_now <= 3072) active_quadrant = 3;
 80010c4:	897b      	ldrh	r3, [r7, #10]
 80010c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80010ca:	d906      	bls.n	80010da <HAL_I2C_MemRxCpltCallback+0x66>
 80010cc:	897b      	ldrh	r3, [r7, #10]
 80010ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80010d2:	d802      	bhi.n	80010da <HAL_I2C_MemRxCpltCallback+0x66>
 80010d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001194 <HAL_I2C_MemRxCpltCallback+0x120>)
 80010d6:	2203      	movs	r2, #3
 80010d8:	701a      	strb	r2, [r3, #0]
		if(position_now >= 3073 && position_now <= 4095) active_quadrant = 4;
 80010da:	897b      	ldrh	r3, [r7, #10]
 80010dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80010e0:	d906      	bls.n	80010f0 <HAL_I2C_MemRxCpltCallback+0x7c>
 80010e2:	897b      	ldrh	r3, [r7, #10]
 80010e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010e8:	d202      	bcs.n	80010f0 <HAL_I2C_MemRxCpltCallback+0x7c>
 80010ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <HAL_I2C_MemRxCpltCallback+0x120>)
 80010ec:	2204      	movs	r2, #4
 80010ee:	701a      	strb	r2, [r3, #0]

		if(last_quadrant == -1) last_quadrant = active_quadrant;
 80010f0:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <HAL_I2C_MemRxCpltCallback+0x124>)
 80010f2:	f993 3000 	ldrsb.w	r3, [r3]
 80010f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010fa:	d104      	bne.n	8001106 <HAL_I2C_MemRxCpltCallback+0x92>
 80010fc:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <HAL_I2C_MemRxCpltCallback+0x120>)
 80010fe:	f993 2000 	ldrsb.w	r2, [r3]
 8001102:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <HAL_I2C_MemRxCpltCallback+0x124>)
 8001104:	701a      	strb	r2, [r3, #0]
		int32_t delta = (int32_t)(position_now - position_prev);
 8001106:	897b      	ldrh	r3, [r7, #10]
 8001108:	4a24      	ldr	r2, [pc, #144]	@ (800119c <HAL_I2C_MemRxCpltCallback+0x128>)
 800110a:	8812      	ldrh	r2, [r2, #0]
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	60fb      	str	r3, [r7, #12]

		if(last_quadrant == 4 && active_quadrant == 1){
 8001110:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <HAL_I2C_MemRxCpltCallback+0x124>)
 8001112:	f993 3000 	ldrsb.w	r3, [r3]
 8001116:	2b04      	cmp	r3, #4
 8001118:	d10d      	bne.n	8001136 <HAL_I2C_MemRxCpltCallback+0xc2>
 800111a:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <HAL_I2C_MemRxCpltCallback+0x120>)
 800111c:	f993 3000 	ldrsb.w	r3, [r3]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d108      	bne.n	8001136 <HAL_I2C_MemRxCpltCallback+0xc2>
			elapsed_fall_f = TRUE;
 8001124:	4b1e      	ldr	r3, [pc, #120]	@ (80011a0 <HAL_I2C_MemRxCpltCallback+0x12c>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
			delta = (ENC_PPR - 1) - delta;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8001130:	330f      	adds	r3, #15
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	e010      	b.n	8001158 <HAL_I2C_MemRxCpltCallback+0xe4>
		}else if(last_quadrant == 1 && active_quadrant == 4){
 8001136:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <HAL_I2C_MemRxCpltCallback+0x124>)
 8001138:	f993 3000 	ldrsb.w	r3, [r3]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d10b      	bne.n	8001158 <HAL_I2C_MemRxCpltCallback+0xe4>
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <HAL_I2C_MemRxCpltCallback+0x120>)
 8001142:	f993 3000 	ldrsb.w	r3, [r3]
 8001146:	2b04      	cmp	r3, #4
 8001148:	d106      	bne.n	8001158 <HAL_I2C_MemRxCpltCallback+0xe4>
			elapsed_rise_f = TRUE;
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_I2C_MemRxCpltCallback+0x130>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
			delta = ((ENC_PPR - 1) - delta) * - 1;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f6a3 73ff 	subw	r3, r3, #4095	@ 0xfff
 8001156:	60fb      	str	r3, [r7, #12]
		}

		accumulate_counter += delta;
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <HAL_I2C_MemRxCpltCallback+0x134>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	4a11      	ldr	r2, [pc, #68]	@ (80011a8 <HAL_I2C_MemRxCpltCallback+0x134>)
 8001162:	6013      	str	r3, [r2, #0]

		elapsed_fall_f = FALSE;
 8001164:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <HAL_I2C_MemRxCpltCallback+0x12c>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
		elapsed_rise_f = FALSE;
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <HAL_I2C_MemRxCpltCallback+0x130>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
		position_prev = position_now;
 8001170:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <HAL_I2C_MemRxCpltCallback+0x128>)
 8001172:	897b      	ldrh	r3, [r7, #10]
 8001174:	8013      	strh	r3, [r2, #0]
		last_quadrant = active_quadrant;
 8001176:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <HAL_I2C_MemRxCpltCallback+0x120>)
 8001178:	f993 2000 	ldrsb.w	r2, [r3]
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_I2C_MemRxCpltCallback+0x124>)
 800117e:	701a      	strb	r2, [r3, #0]

    }
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40005400 	.word	0x40005400
 8001190:	200000a4 	.word	0x200000a4
 8001194:	20000000 	.word	0x20000000
 8001198:	20000001 	.word	0x20000001
 800119c:	2000009c 	.word	0x2000009c
 80011a0:	200000a6 	.word	0x200000a6
 80011a4:	200000a7 	.word	0x200000a7
 80011a8:	200000a0 	.word	0x200000a0

080011ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4a06      	ldr	r2, [pc, #24]	@ (80011d4 <vApplicationGetIdleTaskMemory+0x28>)
 80011bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	4a05      	ldr	r2, [pc, #20]	@ (80011d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80011c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2280      	movs	r2, #128	@ 0x80
 80011c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	200000a8 	.word	0x200000a8
 80011d8:	20000148 	.word	0x20000148

080011dc <i2c_scanbus>:


#include "i2c_bus.h"

/* Blocking function */
void i2c_scanbus(I2C_HandleTypeDef* channel, uint8_t* found_addr){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result;
	static uint8_t counter = 0;
	for(uint8_t i = 0 ; i <= I2C_MAX_NODE ; i++){
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	e020      	b.n	800122e <i2c_scanbus+0x52>
		result = HAL_I2C_IsDeviceReady(channel, (i << 1), 1, 100);
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	b299      	uxth	r1, r3
 80011f4:	2364      	movs	r3, #100	@ 0x64
 80011f6:	2201      	movs	r2, #1
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f001 fbd3 	bl	80029a4 <HAL_I2C_IsDeviceReady>
 80011fe:	4603      	mov	r3, r0
 8001200:	73bb      	strb	r3, [r7, #14]
		if(result == HAL_OK){
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10c      	bne.n	8001222 <i2c_scanbus+0x46>
			found_addr[counter] = i;
 8001208:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <i2c_scanbus+0x64>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	4413      	add	r3, r2
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	701a      	strb	r2, [r3, #0]
			counter++;
 8001216:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <i2c_scanbus+0x64>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <i2c_scanbus+0x64>)
 8001220:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(10);
 8001222:	200a      	movs	r0, #10
 8001224:	f000 fcec 	bl	8001c00 <HAL_Delay>
	for(uint8_t i = 0 ; i <= I2C_MAX_NODE ; i++){
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	3301      	adds	r3, #1
 800122c:	73fb      	strb	r3, [r7, #15]
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	2b00      	cmp	r3, #0
 8001234:	dada      	bge.n	80011ec <i2c_scanbus+0x10>
	}
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000348 	.word	0x20000348

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b5b0      	push	{r4, r5, r7, lr}
 8001246:	b096      	sub	sp, #88	@ 0x58
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124a:	f000 fca7 	bl	8001b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f85f 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f000 f971 	bl	8001538 <MX_GPIO_Init>
  MX_DMA_Init();
 8001256:	f000 f951 	bl	80014fc <MX_DMA_Init>
  MX_I2C1_Init();
 800125a:	f000 f89f 	bl	800139c <MX_I2C1_Init>
  MX_TIM2_Init();
 800125e:	f000 f8cb 	bl	80013f8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001262:	f000 f921 	bl	80014a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_scanbus(&hi2c1, i2c_available);
 8001266:	4922      	ldr	r1, [pc, #136]	@ (80012f0 <main+0xac>)
 8001268:	4822      	ldr	r0, [pc, #136]	@ (80012f4 <main+0xb0>)
 800126a:	f7ff ffb7 	bl	80011dc <i2c_scanbus>
  TMC2209_setup();
 800126e:	f006 fe5d 	bl	8007f2c <TMC2209_setup>
  TMC2209_setMicrostep(TMC2209_Microsteps_128);
 8001272:	2001      	movs	r0, #1
 8001274:	f006 fedc 	bl	8008030 <TMC2209_setMicrostep>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001278:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <main+0xb4>)
 800127a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800127e:	461d      	mov	r5, r3
 8001280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800128c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f005 fc26 	bl	8006ae4 <osThreadCreate>
 8001298:	4603      	mov	r3, r0
 800129a:	4a18      	ldr	r2, [pc, #96]	@ (80012fc <main+0xb8>)
 800129c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 800129e:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <main+0xbc>)
 80012a0:	f107 0420 	add.w	r4, r7, #32
 80012a4:	461d      	mov	r5, r3
 80012a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f005 fc13 	bl	8006ae4 <osThreadCreate>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <main+0xc0>)
 80012c2:	6013      	str	r3, [r2, #0]

  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 80012c4:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <main+0xc4>)
 80012c6:	1d3c      	adds	r4, r7, #4
 80012c8:	461d      	mov	r5, r3
 80012ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 fc02 	bl	8006ae4 <osThreadCreate>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <main+0xc8>)
 80012e4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80012e6:	f005 fbf6 	bl	8006ad6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ea:	bf00      	nop
 80012ec:	e7fd      	b.n	80012ea <main+0xa6>
 80012ee:	bf00      	nop
 80012f0:	20000480 	.word	0x20000480
 80012f4:	2000034c 	.word	0x2000034c
 80012f8:	080094bc 	.word	0x080094bc
 80012fc:	20000474 	.word	0x20000474
 8001300:	080094e4 	.word	0x080094e4
 8001304:	20000478 	.word	0x20000478
 8001308:	0800950c 	.word	0x0800950c
 800130c:	2000047c 	.word	0x2000047c

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b090      	sub	sp, #64	@ 0x40
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	2228      	movs	r2, #40	@ 0x28
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f007 f892 	bl	8008448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001332:	2301      	movs	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001336:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800133a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001340:	2301      	movs	r3, #1
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001344:	2302      	movs	r3, #2
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001348:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800134c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800134e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 0318 	add.w	r3, r7, #24
 8001358:	4618      	mov	r0, r3
 800135a:	f003 f995 	bl	8004688 <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001364:	f000 f9be 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136c:	2302      	movs	r3, #2
 800136e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001374:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2102      	movs	r1, #2
 8001382:	4618      	mov	r0, r3
 8001384:	f003 fc02 	bl	8004b8c <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800138e:	f000 f9a9 	bl	80016e4 <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3740      	adds	r7, #64	@ 0x40
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013a2:	4a13      	ldr	r2, [pc, #76]	@ (80013f0 <MX_I2C1_Init+0x54>)
 80013a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013a8:	4a12      	ldr	r2, [pc, #72]	@ (80013f4 <MX_I2C1_Init+0x58>)
 80013aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	@ (80013ec <MX_I2C1_Init+0x50>)
 80013da:	f001 f8d3 	bl	8002584 <HAL_I2C_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e4:	f000 f97e 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000034c 	.word	0x2000034c
 80013f0:	40005400 	.word	0x40005400
 80013f4:	00061a80 	.word	0x00061a80

080013f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
 8001416:	615a      	str	r2, [r3, #20]
 8001418:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800141a:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <MX_TIM2_Init+0xac>)
 800141c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001420:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 8001422:	4b20      	ldr	r3, [pc, #128]	@ (80014a4 <MX_TIM2_Init+0xac>)
 8001424:	2247      	movs	r2, #71	@ 0x47
 8001426:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <MX_TIM2_Init+0xac>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4 - 1;
 800142e:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <MX_TIM2_Init+0xac>)
 8001430:	2203      	movs	r2, #3
 8001432:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <MX_TIM2_Init+0xac>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_TIM2_Init+0xac>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001440:	4818      	ldr	r0, [pc, #96]	@ (80014a4 <MX_TIM2_Init+0xac>)
 8001442:	f003 fe0b 	bl	800505c <HAL_TIM_PWM_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800144c:	f000 f94a 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	4619      	mov	r1, r3
 800145e:	4811      	ldr	r0, [pc, #68]	@ (80014a4 <MX_TIM2_Init+0xac>)
 8001460:	f004 fbd6 	bl	8005c10 <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800146a:	f000 f93b 	bl	80016e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146e:	2360      	movs	r3, #96	@ 0x60
 8001470:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8001472:	2332      	movs	r3, #50	@ 0x32
 8001474:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4807      	ldr	r0, [pc, #28]	@ (80014a4 <MX_TIM2_Init+0xac>)
 8001486:	f004 f8cb 	bl	8005620 <HAL_TIM_PWM_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001490:	f000 f928 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001494:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <MX_TIM2_Init+0xac>)
 8001496:	f000 fa01 	bl	800189c <HAL_TIM_MspPostInit>

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	@ 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200003e4 	.word	0x200003e4

080014a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	@ (80014f8 <MX_USART1_UART_Init+0x50>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014b4:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80014b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_USART1_UART_Init+0x4c>)
 80014e0:	f004 fc06 	bl	8005cf0 <HAL_HalfDuplex_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ea:	f000 f8fb 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000042c 	.word	0x2000042c
 80014f8:	40013800 	.word	0x40013800

080014fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <MX_DMA_Init+0x38>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	4a0b      	ldr	r2, [pc, #44]	@ (8001534 <MX_DMA_Init+0x38>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6153      	str	r3, [r2, #20]
 800150e:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <MX_DMA_Init+0x38>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2105      	movs	r1, #5
 800151e:	2011      	movs	r0, #17
 8001520:	f000 fc47 	bl	8001db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001524:	2011      	movs	r0, #17
 8001526:	f000 fc60 	bl	8001dea <HAL_NVIC_EnableIRQ>

}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154c:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <MX_GPIO_Init+0x10c>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a3c      	ldr	r2, [pc, #240]	@ (8001644 <MX_GPIO_Init+0x10c>)
 8001552:	f043 0310 	orr.w	r3, r3, #16
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b3a      	ldr	r3, [pc, #232]	@ (8001644 <MX_GPIO_Init+0x10c>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001564:	4b37      	ldr	r3, [pc, #220]	@ (8001644 <MX_GPIO_Init+0x10c>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a36      	ldr	r2, [pc, #216]	@ (8001644 <MX_GPIO_Init+0x10c>)
 800156a:	f043 0320 	orr.w	r3, r3, #32
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b34      	ldr	r3, [pc, #208]	@ (8001644 <MX_GPIO_Init+0x10c>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0320 	and.w	r3, r3, #32
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	4b31      	ldr	r3, [pc, #196]	@ (8001644 <MX_GPIO_Init+0x10c>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a30      	ldr	r2, [pc, #192]	@ (8001644 <MX_GPIO_Init+0x10c>)
 8001582:	f043 0304 	orr.w	r3, r3, #4
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b2e      	ldr	r3, [pc, #184]	@ (8001644 <MX_GPIO_Init+0x10c>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001594:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <MX_GPIO_Init+0x10c>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a2a      	ldr	r2, [pc, #168]	@ (8001644 <MX_GPIO_Init+0x10c>)
 800159a:	f043 0308 	orr.w	r3, r3, #8
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b28      	ldr	r3, [pc, #160]	@ (8001644 <MX_GPIO_Init+0x10c>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015b2:	4825      	ldr	r0, [pc, #148]	@ (8001648 <MX_GPIO_Init+0x110>)
 80015b4:	f000 ffce 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2106      	movs	r1, #6
 80015bc:	4823      	ldr	r0, [pc, #140]	@ (800164c <MX_GPIO_Init+0x114>)
 80015be:	f000 ffc9 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2120      	movs	r1, #32
 80015c6:	4822      	ldr	r0, [pc, #136]	@ (8001650 <MX_GPIO_Init+0x118>)
 80015c8:	f000 ffc4 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2302      	movs	r3, #2
 80015dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	4619      	mov	r1, r3
 80015e4:	4818      	ldr	r0, [pc, #96]	@ (8001648 <MX_GPIO_Init+0x110>)
 80015e6:	f000 fe31 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80015ea:	2306      	movs	r3, #6
 80015ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	4619      	mov	r1, r3
 8001600:	4812      	ldr	r0, [pc, #72]	@ (800164c <MX_GPIO_Init+0x114>)
 8001602:	f000 fe23 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001606:	2310      	movs	r3, #16
 8001608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	4619      	mov	r1, r3
 8001618:	480d      	ldr	r0, [pc, #52]	@ (8001650 <MX_GPIO_Init+0x118>)
 800161a:	f000 fe17 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800161e:	2320      	movs	r3, #32
 8001620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2302      	movs	r3, #2
 800162c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	4619      	mov	r1, r3
 8001634:	4806      	ldr	r0, [pc, #24]	@ (8001650 <MX_GPIO_Init+0x118>)
 8001636:	f000 fe09 	bl	800224c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800163a:	bf00      	nop
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	40011000 	.word	0x40011000
 800164c:	40010800 	.word	0x40010800
 8001650:	40010c00 	.word	0x40010c00

08001654 <StartDriverTask>:

/* USER CODE BEGIN 4 */
void StartDriverTask(void const * argument){
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	for(;;){
		TMC2209_enable();
 800165c:	f006 fc9e 	bl	8007f9c <TMC2209_enable>
		TMC2209_velocity(motor_speed);
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <StartDriverTask+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f006 fd19 	bl	800809c <TMC2209_velocity>
		TMC2209_move();
 800166a:	f006 fdab 	bl	80081c4 <TMC2209_move>
		TMC2209_watchPosition(&motor_target, &encoder_counter);
 800166e:	4904      	ldr	r1, [pc, #16]	@ (8001680 <StartDriverTask+0x2c>)
 8001670:	4804      	ldr	r0, [pc, #16]	@ (8001684 <StartDriverTask+0x30>)
 8001672:	f006 fdf9 	bl	8008268 <TMC2209_watchPosition>
		TMC2209_enable();
 8001676:	bf00      	nop
 8001678:	e7f0      	b.n	800165c <StartDriverTask+0x8>
 800167a:	bf00      	nop
 800167c:	20000004 	.word	0x20000004
 8001680:	20000484 	.word	0x20000484
 8001684:	20000488 	.word	0x20000488

08001688 <StartEncoderTask>:

//		osDelay(5000);
	}
}

void StartEncoderTask(void const * argument){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	for(;;){
//		encChangeDir(motor_rotation);
		encRead();
 8001690:	f7ff fcbe 	bl	8001010 <encRead>
		encoder_counter = getCounter();
 8001694:	f7ff fcd0 	bl	8001038 <getCounter>
 8001698:	4603      	mov	r3, r0
 800169a:	4a03      	ldr	r2, [pc, #12]	@ (80016a8 <StartEncoderTask+0x20>)
 800169c:	6013      	str	r3, [r2, #0]
		encGetBuffer(raw_buffer_container);
 800169e:	4803      	ldr	r0, [pc, #12]	@ (80016ac <StartEncoderTask+0x24>)
 80016a0:	f7ff fcd4 	bl	800104c <encGetBuffer>
		encRead();
 80016a4:	bf00      	nop
 80016a6:	e7f3      	b.n	8001690 <StartEncoderTask+0x8>
 80016a8:	20000484 	.word	0x20000484
 80016ac:	2000048c 	.word	0x2000048c

080016b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f005 fa5f 	bl	8006b7c <osDelay>
 80016be:	e7fb      	b.n	80016b8 <StartDefaultTask+0x8>

080016c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016d2:	f000 fa79 	bl	8001bc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40012c00 	.word	0x40012c00

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <Error_Handler+0x8>

080016f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016f6:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <HAL_MspInit+0x68>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <HAL_MspInit+0x68>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6193      	str	r3, [r2, #24]
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_MspInit+0x68>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_MspInit+0x68>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a11      	ldr	r2, [pc, #68]	@ (8001758 <HAL_MspInit+0x68>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001718:	61d3      	str	r3, [r2, #28]
 800171a:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <HAL_MspInit+0x68>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	210f      	movs	r1, #15
 800172a:	f06f 0001 	mvn.w	r0, #1
 800172e:	f000 fb40 	bl	8001db2 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_MspInit+0x6c>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4a04      	ldr	r2, [pc, #16]	@ (800175c <HAL_MspInit+0x6c>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	40010000 	.word	0x40010000

08001760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a31      	ldr	r2, [pc, #196]	@ (8001840 <HAL_I2C_MspInit+0xe0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d15a      	bne.n	8001836 <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001780:	4b30      	ldr	r3, [pc, #192]	@ (8001844 <HAL_I2C_MspInit+0xe4>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a2f      	ldr	r2, [pc, #188]	@ (8001844 <HAL_I2C_MspInit+0xe4>)
 8001786:	f043 0308 	orr.w	r3, r3, #8
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b2d      	ldr	r3, [pc, #180]	@ (8001844 <HAL_I2C_MspInit+0xe4>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001798:	23c0      	movs	r3, #192	@ 0xc0
 800179a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179c:	2312      	movs	r3, #18
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	4827      	ldr	r0, [pc, #156]	@ (8001848 <HAL_I2C_MspInit+0xe8>)
 80017ac:	f000 fd4e 	bl	800224c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b0:	4b24      	ldr	r3, [pc, #144]	@ (8001844 <HAL_I2C_MspInit+0xe4>)
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	4a23      	ldr	r2, [pc, #140]	@ (8001844 <HAL_I2C_MspInit+0xe4>)
 80017b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017ba:	61d3      	str	r3, [r2, #28]
 80017bc:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <HAL_I2C_MspInit+0xe4>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80017c8:	4b20      	ldr	r3, [pc, #128]	@ (800184c <HAL_I2C_MspInit+0xec>)
 80017ca:	4a21      	ldr	r2, [pc, #132]	@ (8001850 <HAL_I2C_MspInit+0xf0>)
 80017cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ce:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <HAL_I2C_MspInit+0xec>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	@ (800184c <HAL_I2C_MspInit+0xec>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017da:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <HAL_I2C_MspInit+0xec>)
 80017dc:	2280      	movs	r2, #128	@ 0x80
 80017de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	@ (800184c <HAL_I2C_MspInit+0xec>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <HAL_I2C_MspInit+0xec>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80017ec:	4b17      	ldr	r3, [pc, #92]	@ (800184c <HAL_I2C_MspInit+0xec>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80017f2:	4b16      	ldr	r3, [pc, #88]	@ (800184c <HAL_I2C_MspInit+0xec>)
 80017f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80017fa:	4814      	ldr	r0, [pc, #80]	@ (800184c <HAL_I2C_MspInit+0xec>)
 80017fc:	f000 fb04 	bl	8001e08 <HAL_DMA_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 8001806:	f7ff ff6d 	bl	80016e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a0f      	ldr	r2, [pc, #60]	@ (800184c <HAL_I2C_MspInit+0xec>)
 800180e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001810:	4a0e      	ldr	r2, [pc, #56]	@ (800184c <HAL_I2C_MspInit+0xec>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2105      	movs	r1, #5
 800181a:	201f      	movs	r0, #31
 800181c:	f000 fac9 	bl	8001db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001820:	201f      	movs	r0, #31
 8001822:	f000 fae2 	bl	8001dea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2105      	movs	r1, #5
 800182a:	2020      	movs	r0, #32
 800182c:	f000 fac1 	bl	8001db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001830:	2020      	movs	r0, #32
 8001832:	f000 fada 	bl	8001dea <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001836:	bf00      	nop
 8001838:	3720      	adds	r7, #32
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40005400 	.word	0x40005400
 8001844:	40021000 	.word	0x40021000
 8001848:	40010c00 	.word	0x40010c00
 800184c:	200003a0 	.word	0x200003a0
 8001850:	40020080 	.word	0x40020080

08001854 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001864:	d113      	bne.n	800188e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001866:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <HAL_TIM_PWM_MspInit+0x44>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a0b      	ldr	r2, [pc, #44]	@ (8001898 <HAL_TIM_PWM_MspInit+0x44>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	61d3      	str	r3, [r2, #28]
 8001872:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <HAL_TIM_PWM_MspInit+0x44>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2105      	movs	r1, #5
 8001882:	201c      	movs	r0, #28
 8001884:	f000 fa95 	bl	8001db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001888:	201c      	movs	r0, #28
 800188a:	f000 faae 	bl	8001dea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000

0800189c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ba:	d117      	bne.n	80018ec <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <HAL_TIM_MspPostInit+0x58>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a0c      	ldr	r2, [pc, #48]	@ (80018f4 <HAL_TIM_MspPostInit+0x58>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_TIM_MspPostInit+0x58>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d4:	2301      	movs	r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2302      	movs	r3, #2
 80018de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4619      	mov	r1, r3
 80018e6:	4804      	ldr	r0, [pc, #16]	@ (80018f8 <HAL_TIM_MspPostInit+0x5c>)
 80018e8:	f000 fcb0 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40010800 	.word	0x40010800

080018fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a1a      	ldr	r2, [pc, #104]	@ (8001980 <HAL_UART_MspInit+0x84>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d12c      	bne.n	8001976 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_UART_MspInit+0x88>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a18      	ldr	r2, [pc, #96]	@ (8001984 <HAL_UART_MspInit+0x88>)
 8001922:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <HAL_UART_MspInit+0x88>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <HAL_UART_MspInit+0x88>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a12      	ldr	r2, [pc, #72]	@ (8001984 <HAL_UART_MspInit+0x88>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <HAL_UART_MspInit+0x88>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800194c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001950:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001952:	2312      	movs	r3, #18
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	4619      	mov	r1, r3
 8001960:	4809      	ldr	r0, [pc, #36]	@ (8001988 <HAL_UART_MspInit+0x8c>)
 8001962:	f000 fc73 	bl	800224c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2105      	movs	r1, #5
 800196a:	2025      	movs	r0, #37	@ 0x25
 800196c:	f000 fa21 	bl	8001db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001970:	2025      	movs	r0, #37	@ 0x25
 8001972:	f000 fa3a 	bl	8001dea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001976:	bf00      	nop
 8001978:	3720      	adds	r7, #32
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40013800 	.word	0x40013800
 8001984:	40021000 	.word	0x40021000
 8001988:	40010800 	.word	0x40010800

0800198c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	@ 0x30
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80019a2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a5c <HAL_InitTick+0xd0>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	4a2d      	ldr	r2, [pc, #180]	@ (8001a5c <HAL_InitTick+0xd0>)
 80019a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019ac:	6193      	str	r3, [r2, #24]
 80019ae:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <HAL_InitTick+0xd0>)
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019ba:	f107 020c 	add.w	r2, r7, #12
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 fa51 	bl	8004e6c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019ca:	f003 fa3b 	bl	8004e44 <HAL_RCC_GetPCLK2Freq>
 80019ce:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d2:	4a23      	ldr	r2, [pc, #140]	@ (8001a60 <HAL_InitTick+0xd4>)
 80019d4:	fba2 2303 	umull	r2, r3, r2, r3
 80019d8:	0c9b      	lsrs	r3, r3, #18
 80019da:	3b01      	subs	r3, #1
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80019de:	4b21      	ldr	r3, [pc, #132]	@ (8001a64 <HAL_InitTick+0xd8>)
 80019e0:	4a21      	ldr	r2, [pc, #132]	@ (8001a68 <HAL_InitTick+0xdc>)
 80019e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <HAL_InitTick+0xd8>)
 80019e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019ea:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001a64 <HAL_InitTick+0xd8>)
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <HAL_InitTick+0xd8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <HAL_InitTick+0xd8>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_InitTick+0xd8>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001a04:	4817      	ldr	r0, [pc, #92]	@ (8001a64 <HAL_InitTick+0xd8>)
 8001a06:	f003 fa7f 	bl	8004f08 <HAL_TIM_Base_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001a10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d11b      	bne.n	8001a50 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a18:	4812      	ldr	r0, [pc, #72]	@ (8001a64 <HAL_InitTick+0xd8>)
 8001a1a:	f003 facd 	bl	8004fb8 <HAL_TIM_Base_Start_IT>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001a24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d111      	bne.n	8001a50 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a2c:	2019      	movs	r0, #25
 8001a2e:	f000 f9dc 	bl	8001dea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b0f      	cmp	r3, #15
 8001a36:	d808      	bhi.n	8001a4a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	2019      	movs	r0, #25
 8001a3e:	f000 f9b8 	bl	8001db2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a42:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <HAL_InitTick+0xe0>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e002      	b.n	8001a50 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3730      	adds	r7, #48	@ 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	20000490 	.word	0x20000490
 8001a68:	40012c00 	.word	0x40012c00
 8001a6c:	2000000c 	.word	0x2000000c

08001a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <NMI_Handler+0x4>

08001a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <MemManage_Handler+0x4>

08001a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001aa8:	4802      	ldr	r0, [pc, #8]	@ (8001ab4 <DMA1_Channel7_IRQHandler+0x10>)
 8001aaa:	f000 fabb 	bl	8002024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200003a0 	.word	0x200003a0

08001ab8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001abc:	4802      	ldr	r0, [pc, #8]	@ (8001ac8 <TIM1_UP_IRQHandler+0x10>)
 8001abe:	f003 fcbf 	bl	8005440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000490 	.word	0x20000490

08001acc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ad0:	4802      	ldr	r0, [pc, #8]	@ (8001adc <TIM2_IRQHandler+0x10>)
 8001ad2:	f003 fcb5 	bl	8005440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200003e4 	.word	0x200003e4

08001ae0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <I2C1_EV_IRQHandler+0x10>)
 8001ae6:	f001 f88b 	bl	8002c00 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2000034c 	.word	0x2000034c

08001af4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001af8:	4802      	ldr	r0, [pc, #8]	@ (8001b04 <I2C1_ER_IRQHandler+0x10>)
 8001afa:	f001 f9d4 	bl	8002ea6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000034c 	.word	0x2000034c

08001b08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <USART1_IRQHandler+0x10>)
 8001b0e:	f004 fa2f 	bl	8005f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000042c 	.word	0x2000042c

08001b1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <HAL_UARTEx_RxEventCallback>:
	HAL_HalfDuplex_EnableReceiver(&huart1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 8001b34:	221e      	movs	r2, #30
 8001b36:	4904      	ldr	r1, [pc, #16]	@ (8001b48 <HAL_UARTEx_RxEventCallback+0x20>)
 8001b38:	4804      	ldr	r0, [pc, #16]	@ (8001b4c <HAL_UARTEx_RxEventCallback+0x24>)
 8001b3a:	f004 f9bc 	bl	8005eb6 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200004d8 	.word	0x200004d8
 8001b4c:	2000042c 	.word	0x2000042c

08001b50 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8001b50:	f7ff ffe4 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b54:	480b      	ldr	r0, [pc, #44]	@ (8001b84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b56:	490c      	ldr	r1, [pc, #48]	@ (8001b88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b58:	4a0c      	ldr	r2, [pc, #48]	@ (8001b8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a09      	ldr	r2, [pc, #36]	@ (8001b90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b6c:	4c09      	ldr	r4, [pc, #36]	@ (8001b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f006 fcc9 	bl	8008510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b7e:	f7ff fb61 	bl	8001244 <main>
  bx lr
 8001b82:	4770      	bx	lr
  ldr r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b88:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001b8c:	08009598 	.word	0x08009598
  ldr r2, =_sbss
 8001b90:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001b94:	200013ac 	.word	0x200013ac

08001b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC1_2_IRQHandler>
	...

08001b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <HAL_Init+0x28>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	@ (8001bc4 <HAL_Init+0x28>)
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 f8f5 	bl	8001d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	200f      	movs	r0, #15
 8001bb4:	f7ff feea 	bl	800198c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff fd9a 	bl	80016f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40022000 	.word	0x40022000

08001bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <HAL_IncTick+0x1c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <HAL_IncTick+0x20>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a03      	ldr	r2, [pc, #12]	@ (8001be8 <HAL_IncTick+0x20>)
 8001bda:	6013      	str	r3, [r2, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	20000010 	.word	0x20000010
 8001be8:	200004f8 	.word	0x200004f8

08001bec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b02      	ldr	r3, [pc, #8]	@ (8001bfc <HAL_GetTick+0x10>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	200004f8 	.word	0x200004f8

08001c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff fff0 	bl	8001bec <HAL_GetTick>
 8001c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d005      	beq.n	8001c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <HAL_Delay+0x44>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c26:	bf00      	nop
 8001c28:	f7ff ffe0 	bl	8001bec <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d8f7      	bhi.n	8001c28 <HAL_Delay+0x28>
  {
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000010 	.word	0x20000010

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0b      	blt.n	8001cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4906      	ldr	r1, [pc, #24]	@ (8001ce0 <__NVIC_EnableIRQ+0x34>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	@ (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	@ (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	@ 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f1c3 0307 	rsb	r3, r3, #7
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf28      	it	cs
 8001d56:	2304      	movcs	r3, #4
 8001d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d902      	bls.n	8001d68 <NVIC_EncodePriority+0x30>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	e000      	b.n	8001d6a <NVIC_EncodePriority+0x32>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	4313      	orrs	r3, r2
         );
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	@ 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff4f 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc4:	f7ff ff64 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	6978      	ldr	r0, [r7, #20]
 8001dd0:	f7ff ffb2 	bl	8001d38 <NVIC_EncodePriority>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff81 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff57 	bl	8001cac <__NVIC_EnableIRQ>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e043      	b.n	8001ea6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	4b22      	ldr	r3, [pc, #136]	@ (8001eb0 <HAL_DMA_Init+0xa8>)
 8001e26:	4413      	add	r3, r2
 8001e28:	4a22      	ldr	r2, [pc, #136]	@ (8001eb4 <HAL_DMA_Init+0xac>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	009a      	lsls	r2, r3, #2
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb8 <HAL_DMA_Init+0xb0>)
 8001e3a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e52:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001e56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	bffdfff8 	.word	0xbffdfff8
 8001eb4:	cccccccd 	.word	0xcccccccd
 8001eb8:	40020000 	.word	0x40020000

08001ebc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d008      	beq.n	8001ee6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e020      	b.n	8001f28 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 020e 	bic.w	r2, r2, #14
 8001ef4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f202 	lsl.w	r2, r1, r2
 8001f14:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d005      	beq.n	8001f58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2204      	movs	r2, #4
 8001f50:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	e051      	b.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 020e 	bic.w	r2, r2, #14
 8001f66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a22      	ldr	r2, [pc, #136]	@ (8002008 <HAL_DMA_Abort_IT+0xd4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d029      	beq.n	8001fd6 <HAL_DMA_Abort_IT+0xa2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a21      	ldr	r2, [pc, #132]	@ (800200c <HAL_DMA_Abort_IT+0xd8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d022      	beq.n	8001fd2 <HAL_DMA_Abort_IT+0x9e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1f      	ldr	r2, [pc, #124]	@ (8002010 <HAL_DMA_Abort_IT+0xdc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01a      	beq.n	8001fcc <HAL_DMA_Abort_IT+0x98>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002014 <HAL_DMA_Abort_IT+0xe0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d012      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x92>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8002018 <HAL_DMA_Abort_IT+0xe4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00a      	beq.n	8001fc0 <HAL_DMA_Abort_IT+0x8c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1b      	ldr	r2, [pc, #108]	@ (800201c <HAL_DMA_Abort_IT+0xe8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d102      	bne.n	8001fba <HAL_DMA_Abort_IT+0x86>
 8001fb4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001fb8:	e00e      	b.n	8001fd8 <HAL_DMA_Abort_IT+0xa4>
 8001fba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fbe:	e00b      	b.n	8001fd8 <HAL_DMA_Abort_IT+0xa4>
 8001fc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fc4:	e008      	b.n	8001fd8 <HAL_DMA_Abort_IT+0xa4>
 8001fc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fca:	e005      	b.n	8001fd8 <HAL_DMA_Abort_IT+0xa4>
 8001fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fd0:	e002      	b.n	8001fd8 <HAL_DMA_Abort_IT+0xa4>
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	e000      	b.n	8001fd8 <HAL_DMA_Abort_IT+0xa4>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	4a11      	ldr	r2, [pc, #68]	@ (8002020 <HAL_DMA_Abort_IT+0xec>)
 8001fda:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
    } 
  }
  return status;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40020008 	.word	0x40020008
 800200c:	4002001c 	.word	0x4002001c
 8002010:	40020030 	.word	0x40020030
 8002014:	40020044 	.word	0x40020044
 8002018:	40020058 	.word	0x40020058
 800201c:	4002006c 	.word	0x4002006c
 8002020:	40020000 	.word	0x40020000

08002024 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	2204      	movs	r2, #4
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d04f      	beq.n	80020ec <HAL_DMA_IRQHandler+0xc8>
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d04a      	beq.n	80020ec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0204 	bic.w	r2, r2, #4
 8002072:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a66      	ldr	r2, [pc, #408]	@ (8002214 <HAL_DMA_IRQHandler+0x1f0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d029      	beq.n	80020d2 <HAL_DMA_IRQHandler+0xae>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a65      	ldr	r2, [pc, #404]	@ (8002218 <HAL_DMA_IRQHandler+0x1f4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d022      	beq.n	80020ce <HAL_DMA_IRQHandler+0xaa>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a63      	ldr	r2, [pc, #396]	@ (800221c <HAL_DMA_IRQHandler+0x1f8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01a      	beq.n	80020c8 <HAL_DMA_IRQHandler+0xa4>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a62      	ldr	r2, [pc, #392]	@ (8002220 <HAL_DMA_IRQHandler+0x1fc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d012      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x9e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a60      	ldr	r2, [pc, #384]	@ (8002224 <HAL_DMA_IRQHandler+0x200>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00a      	beq.n	80020bc <HAL_DMA_IRQHandler+0x98>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002228 <HAL_DMA_IRQHandler+0x204>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d102      	bne.n	80020b6 <HAL_DMA_IRQHandler+0x92>
 80020b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020b4:	e00e      	b.n	80020d4 <HAL_DMA_IRQHandler+0xb0>
 80020b6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80020ba:	e00b      	b.n	80020d4 <HAL_DMA_IRQHandler+0xb0>
 80020bc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80020c0:	e008      	b.n	80020d4 <HAL_DMA_IRQHandler+0xb0>
 80020c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020c6:	e005      	b.n	80020d4 <HAL_DMA_IRQHandler+0xb0>
 80020c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020cc:	e002      	b.n	80020d4 <HAL_DMA_IRQHandler+0xb0>
 80020ce:	2340      	movs	r3, #64	@ 0x40
 80020d0:	e000      	b.n	80020d4 <HAL_DMA_IRQHandler+0xb0>
 80020d2:	2304      	movs	r3, #4
 80020d4:	4a55      	ldr	r2, [pc, #340]	@ (800222c <HAL_DMA_IRQHandler+0x208>)
 80020d6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 8094 	beq.w	800220a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80020ea:	e08e      	b.n	800220a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	2202      	movs	r2, #2
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d056      	beq.n	80021aa <HAL_DMA_IRQHandler+0x186>
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d051      	beq.n	80021aa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10b      	bne.n	800212c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 020a 	bic.w	r2, r2, #10
 8002122:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a38      	ldr	r2, [pc, #224]	@ (8002214 <HAL_DMA_IRQHandler+0x1f0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d029      	beq.n	800218a <HAL_DMA_IRQHandler+0x166>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a37      	ldr	r2, [pc, #220]	@ (8002218 <HAL_DMA_IRQHandler+0x1f4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d022      	beq.n	8002186 <HAL_DMA_IRQHandler+0x162>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a35      	ldr	r2, [pc, #212]	@ (800221c <HAL_DMA_IRQHandler+0x1f8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d01a      	beq.n	8002180 <HAL_DMA_IRQHandler+0x15c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a34      	ldr	r2, [pc, #208]	@ (8002220 <HAL_DMA_IRQHandler+0x1fc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d012      	beq.n	800217a <HAL_DMA_IRQHandler+0x156>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a32      	ldr	r2, [pc, #200]	@ (8002224 <HAL_DMA_IRQHandler+0x200>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00a      	beq.n	8002174 <HAL_DMA_IRQHandler+0x150>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a31      	ldr	r2, [pc, #196]	@ (8002228 <HAL_DMA_IRQHandler+0x204>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d102      	bne.n	800216e <HAL_DMA_IRQHandler+0x14a>
 8002168:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800216c:	e00e      	b.n	800218c <HAL_DMA_IRQHandler+0x168>
 800216e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002172:	e00b      	b.n	800218c <HAL_DMA_IRQHandler+0x168>
 8002174:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002178:	e008      	b.n	800218c <HAL_DMA_IRQHandler+0x168>
 800217a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800217e:	e005      	b.n	800218c <HAL_DMA_IRQHandler+0x168>
 8002180:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002184:	e002      	b.n	800218c <HAL_DMA_IRQHandler+0x168>
 8002186:	2320      	movs	r3, #32
 8002188:	e000      	b.n	800218c <HAL_DMA_IRQHandler+0x168>
 800218a:	2302      	movs	r3, #2
 800218c:	4a27      	ldr	r2, [pc, #156]	@ (800222c <HAL_DMA_IRQHandler+0x208>)
 800218e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219c:	2b00      	cmp	r3, #0
 800219e:	d034      	beq.n	800220a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021a8:	e02f      	b.n	800220a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	2208      	movs	r2, #8
 80021b0:	409a      	lsls	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d028      	beq.n	800220c <HAL_DMA_IRQHandler+0x1e8>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d023      	beq.n	800220c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 020e 	bic.w	r2, r2, #14
 80021d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f202 	lsl.w	r2, r1, r2
 80021e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
    }
  }
  return;
 800220a:	bf00      	nop
 800220c:	bf00      	nop
}
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40020008 	.word	0x40020008
 8002218:	4002001c 	.word	0x4002001c
 800221c:	40020030 	.word	0x40020030
 8002220:	40020044 	.word	0x40020044
 8002224:	40020058 	.word	0x40020058
 8002228:	4002006c 	.word	0x4002006c
 800222c:	40020000 	.word	0x40020000

08002230 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800223e:	b2db      	uxtb	r3, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr
	...

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b08b      	sub	sp, #44	@ 0x2c
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225e:	e169      	b.n	8002534 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002260:	2201      	movs	r2, #1
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	429a      	cmp	r2, r3
 800227a:	f040 8158 	bne.w	800252e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4a9a      	ldr	r2, [pc, #616]	@ (80024ec <HAL_GPIO_Init+0x2a0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d05e      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 8002288:	4a98      	ldr	r2, [pc, #608]	@ (80024ec <HAL_GPIO_Init+0x2a0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d875      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 800228e:	4a98      	ldr	r2, [pc, #608]	@ (80024f0 <HAL_GPIO_Init+0x2a4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d058      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 8002294:	4a96      	ldr	r2, [pc, #600]	@ (80024f0 <HAL_GPIO_Init+0x2a4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d86f      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 800229a:	4a96      	ldr	r2, [pc, #600]	@ (80024f4 <HAL_GPIO_Init+0x2a8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d052      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 80022a0:	4a94      	ldr	r2, [pc, #592]	@ (80024f4 <HAL_GPIO_Init+0x2a8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d869      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022a6:	4a94      	ldr	r2, [pc, #592]	@ (80024f8 <HAL_GPIO_Init+0x2ac>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d04c      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 80022ac:	4a92      	ldr	r2, [pc, #584]	@ (80024f8 <HAL_GPIO_Init+0x2ac>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d863      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022b2:	4a92      	ldr	r2, [pc, #584]	@ (80024fc <HAL_GPIO_Init+0x2b0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d046      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 80022b8:	4a90      	ldr	r2, [pc, #576]	@ (80024fc <HAL_GPIO_Init+0x2b0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d85d      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022be:	2b12      	cmp	r3, #18
 80022c0:	d82a      	bhi.n	8002318 <HAL_GPIO_Init+0xcc>
 80022c2:	2b12      	cmp	r3, #18
 80022c4:	d859      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022c6:	a201      	add	r2, pc, #4	@ (adr r2, 80022cc <HAL_GPIO_Init+0x80>)
 80022c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022cc:	08002347 	.word	0x08002347
 80022d0:	08002321 	.word	0x08002321
 80022d4:	08002333 	.word	0x08002333
 80022d8:	08002375 	.word	0x08002375
 80022dc:	0800237b 	.word	0x0800237b
 80022e0:	0800237b 	.word	0x0800237b
 80022e4:	0800237b 	.word	0x0800237b
 80022e8:	0800237b 	.word	0x0800237b
 80022ec:	0800237b 	.word	0x0800237b
 80022f0:	0800237b 	.word	0x0800237b
 80022f4:	0800237b 	.word	0x0800237b
 80022f8:	0800237b 	.word	0x0800237b
 80022fc:	0800237b 	.word	0x0800237b
 8002300:	0800237b 	.word	0x0800237b
 8002304:	0800237b 	.word	0x0800237b
 8002308:	0800237b 	.word	0x0800237b
 800230c:	0800237b 	.word	0x0800237b
 8002310:	08002329 	.word	0x08002329
 8002314:	0800233d 	.word	0x0800233d
 8002318:	4a79      	ldr	r2, [pc, #484]	@ (8002500 <HAL_GPIO_Init+0x2b4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800231e:	e02c      	b.n	800237a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	623b      	str	r3, [r7, #32]
          break;
 8002326:	e029      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	3304      	adds	r3, #4
 800232e:	623b      	str	r3, [r7, #32]
          break;
 8002330:	e024      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	3308      	adds	r3, #8
 8002338:	623b      	str	r3, [r7, #32]
          break;
 800233a:	e01f      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	330c      	adds	r3, #12
 8002342:	623b      	str	r3, [r7, #32]
          break;
 8002344:	e01a      	b.n	800237c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800234e:	2304      	movs	r3, #4
 8002350:	623b      	str	r3, [r7, #32]
          break;
 8002352:	e013      	b.n	800237c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d105      	bne.n	8002368 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800235c:	2308      	movs	r3, #8
 800235e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	611a      	str	r2, [r3, #16]
          break;
 8002366:	e009      	b.n	800237c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002368:	2308      	movs	r3, #8
 800236a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	615a      	str	r2, [r3, #20]
          break;
 8002372:	e003      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002374:	2300      	movs	r3, #0
 8002376:	623b      	str	r3, [r7, #32]
          break;
 8002378:	e000      	b.n	800237c <HAL_GPIO_Init+0x130>
          break;
 800237a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2bff      	cmp	r3, #255	@ 0xff
 8002380:	d801      	bhi.n	8002386 <HAL_GPIO_Init+0x13a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	e001      	b.n	800238a <HAL_GPIO_Init+0x13e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3304      	adds	r3, #4
 800238a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2bff      	cmp	r3, #255	@ 0xff
 8002390:	d802      	bhi.n	8002398 <HAL_GPIO_Init+0x14c>
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	e002      	b.n	800239e <HAL_GPIO_Init+0x152>
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	3b08      	subs	r3, #8
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	210f      	movs	r1, #15
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	401a      	ands	r2, r3
 80023b0:	6a39      	ldr	r1, [r7, #32]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	431a      	orrs	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80b1 	beq.w	800252e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002504 <HAL_GPIO_Init+0x2b8>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002504 <HAL_GPIO_Init+0x2b8>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6193      	str	r3, [r2, #24]
 80023d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002504 <HAL_GPIO_Init+0x2b8>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023e4:	4a48      	ldr	r2, [pc, #288]	@ (8002508 <HAL_GPIO_Init+0x2bc>)
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	3302      	adds	r3, #2
 80023ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	220f      	movs	r2, #15
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a40      	ldr	r2, [pc, #256]	@ (800250c <HAL_GPIO_Init+0x2c0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d013      	beq.n	8002438 <HAL_GPIO_Init+0x1ec>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a3f      	ldr	r2, [pc, #252]	@ (8002510 <HAL_GPIO_Init+0x2c4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00d      	beq.n	8002434 <HAL_GPIO_Init+0x1e8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a3e      	ldr	r2, [pc, #248]	@ (8002514 <HAL_GPIO_Init+0x2c8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d007      	beq.n	8002430 <HAL_GPIO_Init+0x1e4>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3d      	ldr	r2, [pc, #244]	@ (8002518 <HAL_GPIO_Init+0x2cc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_GPIO_Init+0x1e0>
 8002428:	2303      	movs	r3, #3
 800242a:	e006      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 800242c:	2304      	movs	r3, #4
 800242e:	e004      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002430:	2302      	movs	r3, #2
 8002432:	e002      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002438:	2300      	movs	r3, #0
 800243a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243c:	f002 0203 	and.w	r2, r2, #3
 8002440:	0092      	lsls	r2, r2, #2
 8002442:	4093      	lsls	r3, r2
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800244a:	492f      	ldr	r1, [pc, #188]	@ (8002508 <HAL_GPIO_Init+0x2bc>)
 800244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3302      	adds	r3, #2
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002464:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	492c      	ldr	r1, [pc, #176]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	608b      	str	r3, [r1, #8]
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002472:	4b2a      	ldr	r3, [pc, #168]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	43db      	mvns	r3, r3
 800247a:	4928      	ldr	r1, [pc, #160]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 800247c:	4013      	ands	r3, r2
 800247e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800248c:	4b23      	ldr	r3, [pc, #140]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	4922      	ldr	r1, [pc, #136]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	60cb      	str	r3, [r1, #12]
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800249a:	4b20      	ldr	r3, [pc, #128]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	491e      	ldr	r1, [pc, #120]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024b4:	4b19      	ldr	r3, [pc, #100]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4918      	ldr	r1, [pc, #96]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024c2:	4b16      	ldr	r3, [pc, #88]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	4914      	ldr	r1, [pc, #80]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d021      	beq.n	8002520 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024dc:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	490e      	ldr	r1, [pc, #56]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e021      	b.n	800252e <HAL_GPIO_Init+0x2e2>
 80024ea:	bf00      	nop
 80024ec:	10320000 	.word	0x10320000
 80024f0:	10310000 	.word	0x10310000
 80024f4:	10220000 	.word	0x10220000
 80024f8:	10210000 	.word	0x10210000
 80024fc:	10120000 	.word	0x10120000
 8002500:	10110000 	.word	0x10110000
 8002504:	40021000 	.word	0x40021000
 8002508:	40010000 	.word	0x40010000
 800250c:	40010800 	.word	0x40010800
 8002510:	40010c00 	.word	0x40010c00
 8002514:	40011000 	.word	0x40011000
 8002518:	40011400 	.word	0x40011400
 800251c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002520:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <HAL_GPIO_Init+0x304>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	43db      	mvns	r3, r3
 8002528:	4909      	ldr	r1, [pc, #36]	@ (8002550 <HAL_GPIO_Init+0x304>)
 800252a:	4013      	ands	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	3301      	adds	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	f47f ae8e 	bne.w	8002260 <HAL_GPIO_Init+0x14>
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	372c      	adds	r7, #44	@ 0x2c
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40010400 	.word	0x40010400

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002570:	e003      	b.n	800257a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002572:	887b      	ldrh	r3, [r7, #2]
 8002574:	041a      	lsls	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	611a      	str	r2, [r3, #16]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e12b      	b.n	80027ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff f8d8 	bl	8001760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2224      	movs	r2, #36	@ 0x24
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025e8:	f002 fc18 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 80025ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a81      	ldr	r2, [pc, #516]	@ (80027f8 <HAL_I2C_Init+0x274>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d807      	bhi.n	8002608 <HAL_I2C_Init+0x84>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a80      	ldr	r2, [pc, #512]	@ (80027fc <HAL_I2C_Init+0x278>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	bf94      	ite	ls
 8002600:	2301      	movls	r3, #1
 8002602:	2300      	movhi	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e006      	b.n	8002616 <HAL_I2C_Init+0x92>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a7d      	ldr	r2, [pc, #500]	@ (8002800 <HAL_I2C_Init+0x27c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	bf94      	ite	ls
 8002610:	2301      	movls	r3, #1
 8002612:	2300      	movhi	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0e7      	b.n	80027ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4a78      	ldr	r2, [pc, #480]	@ (8002804 <HAL_I2C_Init+0x280>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	0c9b      	lsrs	r3, r3, #18
 8002628:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	430a      	orrs	r2, r1
 800263c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a6a      	ldr	r2, [pc, #424]	@ (80027f8 <HAL_I2C_Init+0x274>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d802      	bhi.n	8002658 <HAL_I2C_Init+0xd4>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	3301      	adds	r3, #1
 8002656:	e009      	b.n	800266c <HAL_I2C_Init+0xe8>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	4a69      	ldr	r2, [pc, #420]	@ (8002808 <HAL_I2C_Init+0x284>)
 8002664:	fba2 2303 	umull	r2, r3, r2, r3
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	3301      	adds	r3, #1
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	430b      	orrs	r3, r1
 8002672:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800267e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	495c      	ldr	r1, [pc, #368]	@ (80027f8 <HAL_I2C_Init+0x274>)
 8002688:	428b      	cmp	r3, r1
 800268a:	d819      	bhi.n	80026c0 <HAL_I2C_Init+0x13c>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1e59      	subs	r1, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	fbb1 f3f3 	udiv	r3, r1, r3
 800269a:	1c59      	adds	r1, r3, #1
 800269c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026a0:	400b      	ands	r3, r1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_I2C_Init+0x138>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1e59      	subs	r1, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b4:	3301      	adds	r3, #1
 80026b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ba:	e051      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 80026bc:	2304      	movs	r3, #4
 80026be:	e04f      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d111      	bne.n	80026ec <HAL_I2C_Init+0x168>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e58      	subs	r0, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	440b      	add	r3, r1
 80026d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	e012      	b.n	8002712 <HAL_I2C_Init+0x18e>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1e58      	subs	r0, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6859      	ldr	r1, [r3, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	0099      	lsls	r1, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002702:	3301      	adds	r3, #1
 8002704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Init+0x196>
 8002716:	2301      	movs	r3, #1
 8002718:	e022      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10e      	bne.n	8002740 <HAL_I2C_Init+0x1bc>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1e58      	subs	r0, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	440b      	add	r3, r1
 8002730:	fbb0 f3f3 	udiv	r3, r0, r3
 8002734:	3301      	adds	r3, #1
 8002736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800273e:	e00f      	b.n	8002760 <HAL_I2C_Init+0x1dc>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1e58      	subs	r0, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	0099      	lsls	r1, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	fbb0 f3f3 	udiv	r3, r0, r3
 8002756:	3301      	adds	r3, #1
 8002758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	6809      	ldr	r1, [r1, #0]
 8002764:	4313      	orrs	r3, r2
 8002766:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69da      	ldr	r2, [r3, #28]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800278e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6911      	ldr	r1, [r2, #16]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68d2      	ldr	r2, [r2, #12]
 800279a:	4311      	orrs	r1, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	000186a0 	.word	0x000186a0
 80027fc:	001e847f 	.word	0x001e847f
 8002800:	003d08ff 	.word	0x003d08ff
 8002804:	431bde83 	.word	0x431bde83
 8002808:	10624dd3 	.word	0x10624dd3

0800280c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800281e:	2b80      	cmp	r3, #128	@ 0x80
 8002820:	d103      	bne.n	800282a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
  }
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	4608      	mov	r0, r1
 800283e:	4611      	mov	r1, r2
 8002840:	461a      	mov	r2, r3
 8002842:	4603      	mov	r3, r0
 8002844:	817b      	strh	r3, [r7, #10]
 8002846:	460b      	mov	r3, r1
 8002848:	813b      	strh	r3, [r7, #8]
 800284a:	4613      	mov	r3, r2
 800284c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	f040 8096 	bne.w	800298c <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002860:	4b4d      	ldr	r3, [pc, #308]	@ (8002998 <HAL_I2C_Mem_Read_IT+0x164>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	08db      	lsrs	r3, r3, #3
 8002866:	4a4d      	ldr	r2, [pc, #308]	@ (800299c <HAL_I2C_Mem_Read_IT+0x168>)
 8002868:	fba2 2303 	umull	r2, r3, r2, r3
 800286c:	0a1a      	lsrs	r2, r3, #8
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	009a      	lsls	r2, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	3b01      	subs	r3, #1
 800287e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d112      	bne.n	80028ac <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f043 0220 	orr.w	r2, r3, #32
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
 80028aa:	e070      	b.n	800298e <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d0df      	beq.n	800287a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_I2C_Mem_Read_IT+0x94>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e062      	b.n	800298e <HAL_I2C_Mem_Read_IT+0x15a>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d007      	beq.n	80028ee <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028fc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2222      	movs	r2, #34	@ 0x22
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2240      	movs	r2, #64	@ 0x40
 800290a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a3a      	ldr	r2, [r7, #32]
 8002918:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800291e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4a1c      	ldr	r2, [pc, #112]	@ (80029a0 <HAL_I2C_Mem_Read_IT+0x16c>)
 800292e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002930:	897a      	ldrh	r2, [r7, #10]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8002936:	893a      	ldrh	r2, [r7, #8]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800293c:	88fa      	ldrh	r2, [r7, #6]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002956:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002966:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002986:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	e000      	b.n	800298e <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 800298c:	2302      	movs	r3, #2
  }
}
 800298e:	4618      	mov	r0, r3
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	20000008 	.word	0x20000008
 800299c:	14f8b589 	.word	0x14f8b589
 80029a0:	ffff0000 	.word	0xffff0000

080029a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	@ 0x28
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	460b      	mov	r3, r1
 80029b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80029b4:	f7ff f91a 	bl	8001bec <HAL_GetTick>
 80029b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b20      	cmp	r3, #32
 80029c8:	f040 8111 	bne.w	8002bee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2319      	movs	r3, #25
 80029d2:	2201      	movs	r2, #1
 80029d4:	4988      	ldr	r1, [pc, #544]	@ (8002bf8 <HAL_I2C_IsDeviceReady+0x254>)
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f001 fd90 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
 80029e4:	e104      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_I2C_IsDeviceReady+0x50>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e0fd      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x24c>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d007      	beq.n	8002a1a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2224      	movs	r2, #36	@ 0x24
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a70      	ldr	r2, [pc, #448]	@ (8002bfc <HAL_I2C_IsDeviceReady+0x258>)
 8002a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f001 fd4e 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00d      	beq.n	8002a82 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a74:	d103      	bne.n	8002a7e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a7c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e0b6      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a82:	897b      	ldrh	r3, [r7, #10]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a90:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a92:	f7ff f8ab 	bl	8001bec <HAL_GetTick>
 8002a96:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2301      	moveq	r3, #1
 8002aa8:	2300      	movne	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002abc:	bf0c      	ite	eq
 8002abe:	2301      	moveq	r3, #1
 8002ac0:	2300      	movne	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ac6:	e025      	b.n	8002b14 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ac8:	f7ff f890 	bl	8001bec <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d302      	bcc.n	8002ade <HAL_I2C_IsDeviceReady+0x13a>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d103      	bne.n	8002ae6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	22a0      	movs	r2, #160	@ 0xa0
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b1e:	d005      	beq.n	8002b2c <HAL_I2C_IsDeviceReady+0x188>
 8002b20:	7dfb      	ldrb	r3, [r7, #23]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d102      	bne.n	8002b2c <HAL_I2C_IsDeviceReady+0x188>
 8002b26:	7dbb      	ldrb	r3, [r7, #22]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0cd      	beq.n	8002ac8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d129      	bne.n	8002b96 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b50:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2319      	movs	r3, #25
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4921      	ldr	r1, [pc, #132]	@ (8002bf8 <HAL_I2C_IsDeviceReady+0x254>)
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f001 fcc2 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e036      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e02c      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2319      	movs	r3, #25
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	490f      	ldr	r1, [pc, #60]	@ (8002bf8 <HAL_I2C_IsDeviceReady+0x254>)
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f001 fc9e 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e012      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	f4ff af32 	bcc.w	8002a3e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3720      	adds	r7, #32
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	00100002 	.word	0x00100002
 8002bfc:	ffff0000 	.word	0xffff0000

08002c00 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c18:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c20:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c28:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d003      	beq.n	8002c38 <HAL_I2C_EV_IRQHandler+0x38>
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	2b40      	cmp	r3, #64	@ 0x40
 8002c34:	f040 80b1 	bne.w	8002d9a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10d      	bne.n	8002c6e <HAL_I2C_EV_IRQHandler+0x6e>
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002c58:	d003      	beq.n	8002c62 <HAL_I2C_EV_IRQHandler+0x62>
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002c60:	d101      	bne.n	8002c66 <HAL_I2C_EV_IRQHandler+0x66>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_I2C_EV_IRQHandler+0x68>
 8002c66:	2300      	movs	r3, #0
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	f000 8114 	beq.w	8002e96 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <HAL_I2C_EV_IRQHandler+0x90>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d006      	beq.n	8002c90 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f001 fce6 	bl	8004654 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fd6b 	bl	8003764 <I2C_Master_SB>
 8002c8e:	e083      	b.n	8002d98 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_I2C_EV_IRQHandler+0xac>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fde2 	bl	800386e <I2C_Master_ADD10>
 8002caa:	e075      	b.n	8002d98 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_I2C_EV_IRQHandler+0xc8>
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fdfd 	bl	80038c0 <I2C_Master_ADDR>
 8002cc6:	e067      	b.n	8002d98 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d036      	beq.n	8002d40 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ce0:	f000 80db 	beq.w	8002e9a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00d      	beq.n	8002d0a <HAL_I2C_EV_IRQHandler+0x10a>
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_I2C_EV_IRQHandler+0x10a>
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d103      	bne.n	8002d0a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f9cb 	bl	800309e <I2C_MasterTransmit_TXE>
 8002d08:	e046      	b.n	8002d98 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80c2 	beq.w	8002e9a <HAL_I2C_EV_IRQHandler+0x29a>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80bc 	beq.w	8002e9a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d22:	7bbb      	ldrb	r3, [r7, #14]
 8002d24:	2b21      	cmp	r3, #33	@ 0x21
 8002d26:	d103      	bne.n	8002d30 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fa54 	bl	80031d6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d2e:	e0b4      	b.n	8002e9a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b40      	cmp	r3, #64	@ 0x40
 8002d34:	f040 80b1 	bne.w	8002e9a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fac2 	bl	80032c2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d3e:	e0ac      	b.n	8002e9a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d4e:	f000 80a4 	beq.w	8002e9a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <HAL_I2C_EV_IRQHandler+0x178>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_I2C_EV_IRQHandler+0x178>
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d103      	bne.n	8002d78 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fb3e 	bl	80033f2 <I2C_MasterReceive_RXNE>
 8002d76:	e00f      	b.n	8002d98 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 808b 	beq.w	8002e9a <HAL_I2C_EV_IRQHandler+0x29a>
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8085 	beq.w	8002e9a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fbf6 	bl	8003582 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d96:	e080      	b.n	8002e9a <HAL_I2C_EV_IRQHandler+0x29a>
 8002d98:	e07f      	b.n	8002e9a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d004      	beq.n	8002dac <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	e007      	b.n	8002dbc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d011      	beq.n	8002dea <HAL_I2C_EV_IRQHandler+0x1ea>
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00c      	beq.n	8002dea <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002de0:	69b9      	ldr	r1, [r7, #24]
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 ffc3 	bl	8003d6e <I2C_Slave_ADDR>
 8002de8:	e05a      	b.n	8002ea0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_I2C_EV_IRQHandler+0x206>
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fffe 	bl	8003e00 <I2C_Slave_STOPF>
 8002e04:	e04c      	b.n	8002ea0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e06:	7bbb      	ldrb	r3, [r7, #14]
 8002e08:	2b21      	cmp	r3, #33	@ 0x21
 8002e0a:	d002      	beq.n	8002e12 <HAL_I2C_EV_IRQHandler+0x212>
 8002e0c:	7bbb      	ldrb	r3, [r7, #14]
 8002e0e:	2b29      	cmp	r3, #41	@ 0x29
 8002e10:	d120      	bne.n	8002e54 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00d      	beq.n	8002e38 <HAL_I2C_EV_IRQHandler+0x238>
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_I2C_EV_IRQHandler+0x238>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fee0 	bl	8003bf6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e36:	e032      	b.n	8002e9e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d02d      	beq.n	8002e9e <HAL_I2C_EV_IRQHandler+0x29e>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d028      	beq.n	8002e9e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 ff0f 	bl	8003c70 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e52:	e024      	b.n	8002e9e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00d      	beq.n	8002e7a <HAL_I2C_EV_IRQHandler+0x27a>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_I2C_EV_IRQHandler+0x27a>
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 ff1c 	bl	8003cb0 <I2C_SlaveReceive_RXNE>
 8002e78:	e012      	b.n	8002ea0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00d      	beq.n	8002ea0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 ff4c 	bl	8003d2c <I2C_SlaveReceive_BTF>
 8002e94:	e004      	b.n	8002ea0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002e96:	bf00      	nop
 8002e98:	e002      	b.n	8002ea0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e9a:	bf00      	nop
 8002e9c:	e000      	b.n	8002ea0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e9e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b08a      	sub	sp, #40	@ 0x28
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ec8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d015      	beq.n	8002f00 <HAL_I2C_ER_IRQHandler+0x5a>
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d010      	beq.n	8002f00 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002eee:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002efe:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00d      	beq.n	8002f26 <HAL_I2C_ER_IRQHandler+0x80>
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	f043 0302 	orr.w	r3, r3, #2
 8002f1a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002f24:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d03e      	beq.n	8002fae <HAL_I2C_ER_IRQHandler+0x108>
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d039      	beq.n	8002fae <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8002f3a:	7efb      	ldrb	r3, [r7, #27]
 8002f3c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f4c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002f54:	7ebb      	ldrb	r3, [r7, #26]
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d112      	bne.n	8002f80 <HAL_I2C_ER_IRQHandler+0xda>
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10f      	bne.n	8002f80 <HAL_I2C_ER_IRQHandler+0xda>
 8002f60:	7cfb      	ldrb	r3, [r7, #19]
 8002f62:	2b21      	cmp	r3, #33	@ 0x21
 8002f64:	d008      	beq.n	8002f78 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002f66:	7cfb      	ldrb	r3, [r7, #19]
 8002f68:	2b29      	cmp	r3, #41	@ 0x29
 8002f6a:	d005      	beq.n	8002f78 <HAL_I2C_ER_IRQHandler+0xd2>
 8002f6c:	7cfb      	ldrb	r3, [r7, #19]
 8002f6e:	2b28      	cmp	r3, #40	@ 0x28
 8002f70:	d106      	bne.n	8002f80 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b21      	cmp	r3, #33	@ 0x21
 8002f76:	d103      	bne.n	8002f80 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f001 f871 	bl	8004060 <I2C_Slave_AF>
 8002f7e:	e016      	b.n	8002fae <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f88:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	f043 0304 	orr.w	r3, r3, #4
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f92:	7efb      	ldrb	r3, [r7, #27]
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d002      	beq.n	8002f9e <HAL_I2C_ER_IRQHandler+0xf8>
 8002f98:	7efb      	ldrb	r3, [r7, #27]
 8002f9a:	2b40      	cmp	r3, #64	@ 0x40
 8002f9c:	d107      	bne.n	8002fae <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_I2C_ER_IRQHandler+0x12e>
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	f043 0308 	orr.w	r3, r3, #8
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002fd2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d008      	beq.n	8002fec <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f001 f8ae 	bl	8004148 <I2C_ITError>
  }
}
 8002fec:	bf00      	nop
 8002fee:	3728      	adds	r7, #40	@ 0x28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr

0800302a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
 8003048:	4613      	mov	r3, r2
 800304a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr

0800307a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030b4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d150      	bne.n	8003166 <I2C_MasterTransmit_TXE+0xc8>
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	2b21      	cmp	r3, #33	@ 0x21
 80030c8:	d14d      	bne.n	8003166 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d01d      	beq.n	800310c <I2C_MasterTransmit_TXE+0x6e>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d01a      	beq.n	800310c <I2C_MasterTransmit_TXE+0x6e>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030dc:	d016      	beq.n	800310c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030ec:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2211      	movs	r2, #17
 80030f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ff75 	bl	8002ff4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800310a:	e060      	b.n	80031ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800311a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800312a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b40      	cmp	r3, #64	@ 0x40
 8003144:	d107      	bne.n	8003156 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ff8a 	bl	8003068 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003154:	e03b      	b.n	80031ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ff48 	bl	8002ff4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003164:	e033      	b.n	80031ce <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b21      	cmp	r3, #33	@ 0x21
 800316a:	d005      	beq.n	8003178 <I2C_MasterTransmit_TXE+0xda>
 800316c:	7bbb      	ldrb	r3, [r7, #14]
 800316e:	2b40      	cmp	r3, #64	@ 0x40
 8003170:	d12d      	bne.n	80031ce <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b22      	cmp	r3, #34	@ 0x22
 8003176:	d12a      	bne.n	80031ce <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d108      	bne.n	8003194 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003190:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003192:	e01c      	b.n	80031ce <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b40      	cmp	r3, #64	@ 0x40
 800319e:	d103      	bne.n	80031a8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f88e 	bl	80032c2 <I2C_MemoryTransmit_TXE_BTF>
}
 80031a6:	e012      	b.n	80031ce <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80031cc:	e7ff      	b.n	80031ce <I2C_MasterTransmit_TXE+0x130>
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b21      	cmp	r3, #33	@ 0x21
 80031ee:	d164      	bne.n	80032ba <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d012      	beq.n	8003220 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	781a      	ldrb	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800321e:	e04c      	b.n	80032ba <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b08      	cmp	r3, #8
 8003224:	d01d      	beq.n	8003262 <I2C_MasterTransmit_BTF+0x8c>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b20      	cmp	r3, #32
 800322a:	d01a      	beq.n	8003262 <I2C_MasterTransmit_BTF+0x8c>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003232:	d016      	beq.n	8003262 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003242:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2211      	movs	r2, #17
 8003248:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff feca 	bl	8002ff4 <HAL_I2C_MasterTxCpltCallback>
}
 8003260:	e02b      	b.n	80032ba <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003270:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003280:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b40      	cmp	r3, #64	@ 0x40
 800329a:	d107      	bne.n	80032ac <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff fedf 	bl	8003068 <HAL_I2C_MemTxCpltCallback>
}
 80032aa:	e006      	b.n	80032ba <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fe9d 	bl	8002ff4 <HAL_I2C_MasterTxCpltCallback>
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d11d      	bne.n	8003316 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d10b      	bne.n	80032fa <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032f2:	1c9a      	adds	r2, r3, #2
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80032f8:	e077      	b.n	80033ea <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032fe:	b29b      	uxth	r3, r3
 8003300:	121b      	asrs	r3, r3, #8
 8003302:	b2da      	uxtb	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003314:	e069      	b.n	80033ea <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800331a:	2b01      	cmp	r3, #1
 800331c:	d10b      	bne.n	8003336 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003322:	b2da      	uxtb	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003334:	e059      	b.n	80033ea <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800333a:	2b02      	cmp	r3, #2
 800333c:	d152      	bne.n	80033e4 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b22      	cmp	r3, #34	@ 0x22
 8003342:	d10d      	bne.n	8003360 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003352:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800335e:	e044      	b.n	80033ea <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d015      	beq.n	8003396 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	2b21      	cmp	r3, #33	@ 0x21
 800336e:	d112      	bne.n	8003396 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003394:	e029      	b.n	80033ea <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d124      	bne.n	80033ea <I2C_MemoryTransmit_TXE_BTF+0x128>
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b21      	cmp	r3, #33	@ 0x21
 80033a4:	d121      	bne.n	80033ea <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033b4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033c4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff fe43 	bl	8003068 <HAL_I2C_MemTxCpltCallback>
}
 80033e2:	e002      	b.n	80033ea <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff fa11 	bl	800280c <I2C_Flush_DR>
}
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b22      	cmp	r3, #34	@ 0x22
 8003404:	f040 80b9 	bne.w	800357a <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d921      	bls.n	8003460 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b03      	cmp	r3, #3
 800344a:	f040 8096 	bne.w	800357a <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800345c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800345e:	e08c      	b.n	800357a <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	2b02      	cmp	r3, #2
 8003466:	d07f      	beq.n	8003568 <I2C_MasterReceive_RXNE+0x176>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d002      	beq.n	8003474 <I2C_MasterReceive_RXNE+0x82>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d179      	bne.n	8003568 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f001 f8bb 	bl	80045f0 <I2C_WaitOnSTOPRequestThroughIT>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d14c      	bne.n	800351a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800348e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800349e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b40      	cmp	r3, #64	@ 0x40
 80034d8:	d10a      	bne.n	80034f0 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7fd fdc3 	bl	8001074 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80034ee:	e044      	b.n	800357a <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d002      	beq.n	8003504 <I2C_MasterReceive_RXNE+0x112>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b20      	cmp	r3, #32
 8003502:	d103      	bne.n	800350c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	@ 0x30
 800350a:	e002      	b.n	8003512 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2212      	movs	r2, #18
 8003510:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff fd77 	bl	8003006 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003518:	e02f      	b.n	800357a <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003528:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff fd8a 	bl	800307a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003566:	e008      	b.n	800357a <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003576:	605a      	str	r2, [r3, #4]
}
 8003578:	e7ff      	b.n	800357a <I2C_MasterReceive_RXNE+0x188>
 800357a:	bf00      	nop
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b04      	cmp	r3, #4
 8003598:	d11b      	bne.n	80035d2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80035d0:	e0c4      	b.n	800375c <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d129      	bne.n	8003630 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d00a      	beq.n	8003608 <I2C_MasterReceive_BTF+0x86>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d007      	beq.n	8003608 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003606:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800362e:	e095      	b.n	800375c <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d17d      	bne.n	8003736 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d002      	beq.n	8003646 <I2C_MasterReceive_BTF+0xc4>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b10      	cmp	r3, #16
 8003644:	d108      	bne.n	8003658 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	e016      	b.n	8003686 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b04      	cmp	r3, #4
 800365c:	d002      	beq.n	8003664 <I2C_MasterReceive_BTF+0xe2>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d108      	bne.n	8003676 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	e007      	b.n	8003686 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003684:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80036e0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b40      	cmp	r3, #64	@ 0x40
 80036f4:	d10a      	bne.n	800370c <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7fd fcb5 	bl	8001074 <HAL_I2C_MemRxCpltCallback>
}
 800370a:	e027      	b.n	800375c <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b08      	cmp	r3, #8
 8003718:	d002      	beq.n	8003720 <I2C_MasterReceive_BTF+0x19e>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b20      	cmp	r3, #32
 800371e:	d103      	bne.n	8003728 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	631a      	str	r2, [r3, #48]	@ 0x30
 8003726:	e002      	b.n	800372e <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2212      	movs	r2, #18
 800372c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff fc69 	bl	8003006 <HAL_I2C_MasterRxCpltCallback>
}
 8003734:	e012      	b.n	800375c <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800375c:	bf00      	nop
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b40      	cmp	r3, #64	@ 0x40
 8003776:	d117      	bne.n	80037a8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003784:	b2db      	uxtb	r3, r3
 8003786:	461a      	mov	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003790:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003792:	e067      	b.n	8003864 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	611a      	str	r2, [r3, #16]
}
 80037a6:	e05d      	b.n	8003864 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037b0:	d133      	bne.n	800381a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b21      	cmp	r3, #33	@ 0x21
 80037bc:	d109      	bne.n	80037d2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037ce:	611a      	str	r2, [r3, #16]
 80037d0:	e008      	b.n	80037e4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <I2C_Master_SB+0x92>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d108      	bne.n	8003808 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d032      	beq.n	8003864 <I2C_Master_SB+0x100>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	2b00      	cmp	r3, #0
 8003806:	d02d      	beq.n	8003864 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003816:	605a      	str	r2, [r3, #4]
}
 8003818:	e024      	b.n	8003864 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10e      	bne.n	8003840 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	b29b      	uxth	r3, r3
 8003828:	11db      	asrs	r3, r3, #7
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f003 0306 	and.w	r3, r3, #6
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f063 030f 	orn	r3, r3, #15
 8003836:	b2da      	uxtb	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	611a      	str	r2, [r3, #16]
}
 800383e:	e011      	b.n	8003864 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003844:	2b01      	cmp	r3, #1
 8003846:	d10d      	bne.n	8003864 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384c:	b29b      	uxth	r3, r3
 800384e:	11db      	asrs	r3, r3, #7
 8003850:	b2db      	uxtb	r3, r3
 8003852:	f003 0306 	and.w	r3, r3, #6
 8003856:	b2db      	uxtb	r3, r3
 8003858:	f063 030e 	orn	r3, r3, #14
 800385c:	b2da      	uxtb	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	611a      	str	r2, [r3, #16]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr

0800386e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387a:	b2da      	uxtb	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <I2C_Master_ADD10+0x26>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	2b00      	cmp	r3, #0
 8003892:	d108      	bne.n	80038a6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00c      	beq.n	80038b6 <I2C_Master_ADD10+0x48>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038b4:	605a      	str	r2, [r3, #4]
  }
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b091      	sub	sp, #68	@ 0x44
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b22      	cmp	r3, #34	@ 0x22
 80038e8:	f040 8174 	bne.w	8003bd4 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10f      	bne.n	8003914 <I2C_Master_ADDR+0x54>
 80038f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80038f8:	2b40      	cmp	r3, #64	@ 0x40
 80038fa:	d10b      	bne.n	8003914 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fc:	2300      	movs	r3, #0
 80038fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	633b      	str	r3, [r7, #48]	@ 0x30
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	e16b      	b.n	8003bec <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003918:	2b00      	cmp	r3, #0
 800391a:	d11d      	bne.n	8003958 <I2C_Master_ADDR+0x98>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003924:	d118      	bne.n	8003958 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003926:	2300      	movs	r3, #0
 8003928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800393a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800394a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	651a      	str	r2, [r3, #80]	@ 0x50
 8003956:	e149      	b.n	8003bec <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d113      	bne.n	800398a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003962:	2300      	movs	r3, #0
 8003964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003976:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e120      	b.n	8003bcc <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b01      	cmp	r3, #1
 8003992:	f040 808a 	bne.w	8003aaa <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003998:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800399c:	d137      	bne.n	8003a0e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ac:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039bc:	d113      	bne.n	80039e6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039cc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ce:	2300      	movs	r3, #0
 80039d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	e0f2      	b.n	8003bcc <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e6:	2300      	movs	r3, #0
 80039e8:	623b      	str	r3, [r7, #32]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	623b      	str	r3, [r7, #32]
 80039fa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	e0de      	b.n	8003bcc <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d02e      	beq.n	8003a72 <I2C_Master_ADDR+0x1b2>
 8003a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d02b      	beq.n	8003a72 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1c:	2b12      	cmp	r3, #18
 8003a1e:	d102      	bne.n	8003a26 <I2C_Master_ADDR+0x166>
 8003a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d125      	bne.n	8003a72 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d00e      	beq.n	8003a4a <I2C_Master_ADDR+0x18a>
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d00b      	beq.n	8003a4a <I2C_Master_ADDR+0x18a>
 8003a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d008      	beq.n	8003a4a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	e007      	b.n	8003a5a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a58:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	e0ac      	b.n	8003bcc <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a80:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a82:	2300      	movs	r3, #0
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	e090      	b.n	8003bcc <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d158      	bne.n	8003b66 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d021      	beq.n	8003afe <I2C_Master_ADDR+0x23e>
 8003aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d01e      	beq.n	8003afe <I2C_Master_ADDR+0x23e>
 8003ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d01b      	beq.n	8003afe <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ad4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	e012      	b.n	8003b24 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b0c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b32:	d14b      	bne.n	8003bcc <I2C_Master_ADDR+0x30c>
 8003b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b36:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b3a:	d00b      	beq.n	8003b54 <I2C_Master_ADDR+0x294>
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d008      	beq.n	8003b54 <I2C_Master_ADDR+0x294>
 8003b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d005      	beq.n	8003b54 <I2C_Master_ADDR+0x294>
 8003b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	d002      	beq.n	8003b54 <I2C_Master_ADDR+0x294>
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d13b      	bne.n	8003bcc <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	e032      	b.n	8003bcc <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b74:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b84:	d117      	bne.n	8003bb6 <I2C_Master_ADDR+0x2f6>
 8003b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b8c:	d00b      	beq.n	8003ba6 <I2C_Master_ADDR+0x2e6>
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d008      	beq.n	8003ba6 <I2C_Master_ADDR+0x2e6>
 8003b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d005      	beq.n	8003ba6 <I2C_Master_ADDR+0x2e6>
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d002      	beq.n	8003ba6 <I2C_Master_ADDR+0x2e6>
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d107      	bne.n	8003bb6 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bb4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003bd2:	e00b      	b.n	8003bec <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
}
 8003bea:	e7ff      	b.n	8003bec <I2C_Master_ADDR+0x32c>
 8003bec:	bf00      	nop
 8003bee:	3744      	adds	r7, #68	@ 0x44
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c04:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d02b      	beq.n	8003c68 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	781a      	ldrb	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d114      	bne.n	8003c68 <I2C_SlaveTransmit_TXE+0x72>
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b29      	cmp	r3, #41	@ 0x29
 8003c42:	d111      	bne.n	8003c68 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c52:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2221      	movs	r2, #33	@ 0x21
 8003c58:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2228      	movs	r2, #40	@ 0x28
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff f9d8 	bl	8003018 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d011      	beq.n	8003ca6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr

08003cb0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cbe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d02c      	beq.n	8003d24 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d114      	bne.n	8003d24 <I2C_SlaveReceive_RXNE+0x74>
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cfe:	d111      	bne.n	8003d24 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d0e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2222      	movs	r2, #34	@ 0x22
 8003d14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2228      	movs	r2, #40	@ 0x28
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff f983 	bl	800302a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d012      	beq.n	8003d64 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr

08003d6e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d88:	2b28      	cmp	r3, #40	@ 0x28
 8003d8a:	d125      	bne.n	8003dd8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d9a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d103      	bne.n	8003dbc <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	81bb      	strh	r3, [r7, #12]
 8003dba:	e002      	b.n	8003dc2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003dca:	89ba      	ldrh	r2, [r7, #12]
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff f933 	bl	800303c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003dd6:	e00e      	b.n	8003df6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e0e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e1e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003e20:	2300      	movs	r3, #0
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e4c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e5c:	d172      	bne.n	8003f44 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	2b22      	cmp	r3, #34	@ 0x22
 8003e62:	d002      	beq.n	8003e6a <I2C_Slave_STOPF+0x6a>
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e68:	d135      	bne.n	8003ed6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	f043 0204 	orr.w	r2, r3, #4
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe f9c4 	bl	8002230 <HAL_DMA_GetState>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d049      	beq.n	8003f42 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb2:	4a69      	ldr	r2, [pc, #420]	@ (8004058 <I2C_Slave_STOPF+0x258>)
 8003eb4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe f83a 	bl	8001f34 <HAL_DMA_Abort_IT>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d03d      	beq.n	8003f42 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ed4:	e035      	b.n	8003f42 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	f043 0204 	orr.w	r2, r3, #4
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fe f98e 	bl	8002230 <HAL_DMA_GetState>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d014      	beq.n	8003f44 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1e:	4a4e      	ldr	r2, [pc, #312]	@ (8004058 <I2C_Slave_STOPF+0x258>)
 8003f20:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe f804 	bl	8001f34 <HAL_DMA_Abort_IT>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4798      	blx	r3
 8003f40:	e000      	b.n	8003f44 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f42:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d03e      	beq.n	8003fcc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d112      	bne.n	8003f82 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8c:	2b40      	cmp	r3, #64	@ 0x40
 8003f8e:	d112      	bne.n	8003fb6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	f043 0204 	orr.w	r2, r3, #4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f8b7 	bl	8004148 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003fda:	e039      	b.n	8004050 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fe0:	d109      	bne.n	8003ff6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2228      	movs	r2, #40	@ 0x28
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff f81a 	bl	800302a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b28      	cmp	r3, #40	@ 0x28
 8004000:	d111      	bne.n	8004026 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a15      	ldr	r2, [pc, #84]	@ (800405c <I2C_Slave_STOPF+0x25c>)
 8004006:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff f819 	bl	8003056 <HAL_I2C_ListenCpltCallback>
}
 8004024:	e014      	b.n	8004050 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	2b22      	cmp	r3, #34	@ 0x22
 800402c:	d002      	beq.n	8004034 <I2C_Slave_STOPF+0x234>
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	2b22      	cmp	r3, #34	@ 0x22
 8004032:	d10d      	bne.n	8004050 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fe ffed 	bl	800302a <HAL_I2C_SlaveRxCpltCallback>
}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	080043ad 	.word	0x080043ad
 800405c:	ffff0000 	.word	0xffff0000

08004060 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b08      	cmp	r3, #8
 800407a:	d002      	beq.n	8004082 <I2C_Slave_AF+0x22>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b20      	cmp	r3, #32
 8004080:	d129      	bne.n	80040d6 <I2C_Slave_AF+0x76>
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	2b28      	cmp	r3, #40	@ 0x28
 8004086:	d126      	bne.n	80040d6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a2e      	ldr	r2, [pc, #184]	@ (8004144 <I2C_Slave_AF+0xe4>)
 800408c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800409c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040a6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040b6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fe ffc1 	bl	8003056 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80040d4:	e031      	b.n	800413a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	2b21      	cmp	r3, #33	@ 0x21
 80040da:	d129      	bne.n	8004130 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a19      	ldr	r2, [pc, #100]	@ (8004144 <I2C_Slave_AF+0xe4>)
 80040e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2221      	movs	r2, #33	@ 0x21
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004106:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004110:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004120:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fe fb72 	bl	800280c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7fe ff75 	bl	8003018 <HAL_I2C_SlaveTxCpltCallback>
}
 800412e:	e004      	b.n	800413a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004138:	615a      	str	r2, [r3, #20]
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	ffff0000 	.word	0xffff0000

08004148 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004156:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800415e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004160:	7bbb      	ldrb	r3, [r7, #14]
 8004162:	2b10      	cmp	r3, #16
 8004164:	d002      	beq.n	800416c <I2C_ITError+0x24>
 8004166:	7bbb      	ldrb	r3, [r7, #14]
 8004168:	2b40      	cmp	r3, #64	@ 0x40
 800416a:	d10a      	bne.n	8004182 <I2C_ITError+0x3a>
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b22      	cmp	r3, #34	@ 0x22
 8004170:	d107      	bne.n	8004182 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004180:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004188:	2b28      	cmp	r3, #40	@ 0x28
 800418a:	d107      	bne.n	800419c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2228      	movs	r2, #40	@ 0x28
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800419a:	e015      	b.n	80041c8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041aa:	d00a      	beq.n	80041c2 <I2C_ITError+0x7a>
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b60      	cmp	r3, #96	@ 0x60
 80041b0:	d007      	beq.n	80041c2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041d6:	d162      	bne.n	800429e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041e6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d020      	beq.n	8004238 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fa:	4a6a      	ldr	r2, [pc, #424]	@ (80043a4 <I2C_ITError+0x25c>)
 80041fc:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd fe96 	bl	8001f34 <HAL_DMA_Abort_IT>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 8089 	beq.w	8004322 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0201 	bic.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004232:	4610      	mov	r0, r2
 8004234:	4798      	blx	r3
 8004236:	e074      	b.n	8004322 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423c:	4a59      	ldr	r2, [pc, #356]	@ (80043a4 <I2C_ITError+0x25c>)
 800423e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	4618      	mov	r0, r3
 8004246:	f7fd fe75 	bl	8001f34 <HAL_DMA_Abort_IT>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d068      	beq.n	8004322 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425a:	2b40      	cmp	r3, #64	@ 0x40
 800425c:	d10b      	bne.n	8004276 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004298:	4610      	mov	r0, r2
 800429a:	4798      	blx	r3
 800429c:	e041      	b.n	8004322 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b60      	cmp	r3, #96	@ 0x60
 80042a8:	d125      	bne.n	80042f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c2:	2b40      	cmp	r3, #64	@ 0x40
 80042c4:	d10b      	bne.n	80042de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fe fecc 	bl	800308c <HAL_I2C_AbortCpltCallback>
 80042f4:	e015      	b.n	8004322 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004300:	2b40      	cmp	r3, #64	@ 0x40
 8004302:	d10b      	bne.n	800431c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fe feac 	bl	800307a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10e      	bne.n	8004350 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004338:	2b00      	cmp	r3, #0
 800433a:	d109      	bne.n	8004350 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004342:	2b00      	cmp	r3, #0
 8004344:	d104      	bne.n	8004350 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800434c:	2b00      	cmp	r3, #0
 800434e:	d007      	beq.n	8004360 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800435e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004366:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b04      	cmp	r3, #4
 8004372:	d113      	bne.n	800439c <I2C_ITError+0x254>
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b28      	cmp	r3, #40	@ 0x28
 8004378:	d110      	bne.n	800439c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a0a      	ldr	r2, [pc, #40]	@ (80043a8 <I2C_ITError+0x260>)
 800437e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fe fe5d 	bl	8003056 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	080043ad 	.word	0x080043ad
 80043a8:	ffff0000 	.word	0xffff0000

080043ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80043c6:	4b4b      	ldr	r3, [pc, #300]	@ (80044f4 <I2C_DMAAbort+0x148>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	08db      	lsrs	r3, r3, #3
 80043cc:	4a4a      	ldr	r2, [pc, #296]	@ (80044f8 <I2C_DMAAbort+0x14c>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	0a1a      	lsrs	r2, r3, #8
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	00da      	lsls	r2, r3, #3
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	f043 0220 	orr.w	r2, r3, #32
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80043f2:	e00a      	b.n	800440a <I2C_DMAAbort+0x5e>
    }
    count--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004408:	d0ea      	beq.n	80043e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004416:	2200      	movs	r2, #0
 8004418:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004426:	2200      	movs	r2, #0
 8004428:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004438:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2200      	movs	r2, #0
 800443e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444c:	2200      	movs	r2, #0
 800444e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445c:	2200      	movs	r2, #0
 800445e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b60      	cmp	r3, #96	@ 0x60
 800447a:	d10e      	bne.n	800449a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2200      	movs	r2, #0
 8004490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004492:	6978      	ldr	r0, [r7, #20]
 8004494:	f7fe fdfa 	bl	800308c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004498:	e027      	b.n	80044ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800449a:	7cfb      	ldrb	r3, [r7, #19]
 800449c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80044a0:	2b28      	cmp	r3, #40	@ 0x28
 80044a2:	d117      	bne.n	80044d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2200      	movs	r2, #0
 80044c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2228      	movs	r2, #40	@ 0x28
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80044d2:	e007      	b.n	80044e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80044e4:	6978      	ldr	r0, [r7, #20]
 80044e6:	f7fe fdc8 	bl	800307a <HAL_I2C_ErrorCallback>
}
 80044ea:	bf00      	nop
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000008 	.word	0x20000008
 80044f8:	14f8b589 	.word	0x14f8b589

080044fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	4613      	mov	r3, r2
 800450a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800450c:	e048      	b.n	80045a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d044      	beq.n	80045a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004516:	f7fd fb69 	bl	8001bec <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d302      	bcc.n	800452c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d139      	bne.n	80045a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	0c1b      	lsrs	r3, r3, #16
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d10d      	bne.n	8004552 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	43da      	mvns	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4013      	ands	r3, r2
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	bf0c      	ite	eq
 8004548:	2301      	moveq	r3, #1
 800454a:	2300      	movne	r3, #0
 800454c:	b2db      	uxtb	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	e00c      	b.n	800456c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	43da      	mvns	r2, r3
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4013      	ands	r3, r2
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	429a      	cmp	r2, r3
 8004570:	d116      	bne.n	80045a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458c:	f043 0220 	orr.w	r2, r3, #32
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e023      	b.n	80045e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	0c1b      	lsrs	r3, r3, #16
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d10d      	bne.n	80045c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	43da      	mvns	r2, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4013      	ands	r3, r2
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	e00c      	b.n	80045e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	43da      	mvns	r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4013      	ands	r3, r2
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf0c      	ite	eq
 80045d8:	2301      	moveq	r3, #1
 80045da:	2300      	movne	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d093      	beq.n	800450e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80045fc:	4b13      	ldr	r3, [pc, #76]	@ (800464c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	08db      	lsrs	r3, r3, #3
 8004602:	4a13      	ldr	r2, [pc, #76]	@ (8004650 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004604:	fba2 2303 	umull	r2, r3, r2, r3
 8004608:	0a1a      	lsrs	r2, r3, #8
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3b01      	subs	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e008      	b.n	8004640 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800463c:	d0e9      	beq.n	8004612 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000008 	.word	0x20000008
 8004650:	14f8b589 	.word	0x14f8b589

08004654 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004664:	d103      	bne.n	800466e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800466c:	e007      	b.n	800467e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004672:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004676:	d102      	bne.n	800467e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2208      	movs	r2, #8
 800467c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e272      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 8087 	beq.w	80047b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046a8:	4b92      	ldr	r3, [pc, #584]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 030c 	and.w	r3, r3, #12
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d00c      	beq.n	80046ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046b4:	4b8f      	ldr	r3, [pc, #572]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 030c 	and.w	r3, r3, #12
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d112      	bne.n	80046e6 <HAL_RCC_OscConfig+0x5e>
 80046c0:	4b8c      	ldr	r3, [pc, #560]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046cc:	d10b      	bne.n	80046e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ce:	4b89      	ldr	r3, [pc, #548]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d06c      	beq.n	80047b4 <HAL_RCC_OscConfig+0x12c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d168      	bne.n	80047b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e24c      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ee:	d106      	bne.n	80046fe <HAL_RCC_OscConfig+0x76>
 80046f0:	4b80      	ldr	r3, [pc, #512]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a7f      	ldr	r2, [pc, #508]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80046f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	e02e      	b.n	800475c <HAL_RCC_OscConfig+0xd4>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10c      	bne.n	8004720 <HAL_RCC_OscConfig+0x98>
 8004706:	4b7b      	ldr	r3, [pc, #492]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a7a      	ldr	r2, [pc, #488]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 800470c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	4b78      	ldr	r3, [pc, #480]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a77      	ldr	r2, [pc, #476]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004718:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e01d      	b.n	800475c <HAL_RCC_OscConfig+0xd4>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004728:	d10c      	bne.n	8004744 <HAL_RCC_OscConfig+0xbc>
 800472a:	4b72      	ldr	r3, [pc, #456]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a71      	ldr	r2, [pc, #452]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	4b6f      	ldr	r3, [pc, #444]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a6e      	ldr	r2, [pc, #440]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 800473c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	e00b      	b.n	800475c <HAL_RCC_OscConfig+0xd4>
 8004744:	4b6b      	ldr	r3, [pc, #428]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a6a      	ldr	r2, [pc, #424]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 800474a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	4b68      	ldr	r3, [pc, #416]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a67      	ldr	r2, [pc, #412]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800475a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d013      	beq.n	800478c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004764:	f7fd fa42 	bl	8001bec <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800476c:	f7fd fa3e 	bl	8001bec <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b64      	cmp	r3, #100	@ 0x64
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e200      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477e:	4b5d      	ldr	r3, [pc, #372]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0xe4>
 800478a:	e014      	b.n	80047b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fd fa2e 	bl	8001bec <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004794:	f7fd fa2a 	bl	8001bec <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	@ 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e1ec      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047a6:	4b53      	ldr	r3, [pc, #332]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x10c>
 80047b2:	e000      	b.n	80047b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d063      	beq.n	800488a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047c2:	4b4c      	ldr	r3, [pc, #304]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 030c 	and.w	r3, r3, #12
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047ce:	4b49      	ldr	r3, [pc, #292]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d11c      	bne.n	8004814 <HAL_RCC_OscConfig+0x18c>
 80047da:	4b46      	ldr	r3, [pc, #280]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d116      	bne.n	8004814 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047e6:	4b43      	ldr	r3, [pc, #268]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d005      	beq.n	80047fe <HAL_RCC_OscConfig+0x176>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d001      	beq.n	80047fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e1c0      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047fe:	4b3d      	ldr	r3, [pc, #244]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4939      	ldr	r1, [pc, #228]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 800480e:	4313      	orrs	r3, r2
 8004810:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004812:	e03a      	b.n	800488a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d020      	beq.n	800485e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800481c:	4b36      	ldr	r3, [pc, #216]	@ (80048f8 <HAL_RCC_OscConfig+0x270>)
 800481e:	2201      	movs	r2, #1
 8004820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004822:	f7fd f9e3 	bl	8001bec <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800482a:	f7fd f9df 	bl	8001bec <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e1a1      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483c:	4b2d      	ldr	r3, [pc, #180]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004848:	4b2a      	ldr	r3, [pc, #168]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	4927      	ldr	r1, [pc, #156]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004858:	4313      	orrs	r3, r2
 800485a:	600b      	str	r3, [r1, #0]
 800485c:	e015      	b.n	800488a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800485e:	4b26      	ldr	r3, [pc, #152]	@ (80048f8 <HAL_RCC_OscConfig+0x270>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004864:	f7fd f9c2 	bl	8001bec <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800486c:	f7fd f9be 	bl	8001bec <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e180      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800487e:	4b1d      	ldr	r3, [pc, #116]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f0      	bne.n	800486c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d03a      	beq.n	800490c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d019      	beq.n	80048d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800489e:	4b17      	ldr	r3, [pc, #92]	@ (80048fc <HAL_RCC_OscConfig+0x274>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a4:	f7fd f9a2 	bl	8001bec <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ac:	f7fd f99e 	bl	8001bec <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e160      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048be:	4b0d      	ldr	r3, [pc, #52]	@ (80048f4 <HAL_RCC_OscConfig+0x26c>)
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048ca:	2001      	movs	r0, #1
 80048cc:	f000 fafe 	bl	8004ecc <RCC_Delay>
 80048d0:	e01c      	b.n	800490c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d2:	4b0a      	ldr	r3, [pc, #40]	@ (80048fc <HAL_RCC_OscConfig+0x274>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d8:	f7fd f988 	bl	8001bec <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048de:	e00f      	b.n	8004900 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e0:	f7fd f984 	bl	8001bec <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d908      	bls.n	8004900 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e146      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000
 80048f8:	42420000 	.word	0x42420000
 80048fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004900:	4b92      	ldr	r3, [pc, #584]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e9      	bne.n	80048e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80a6 	beq.w	8004a66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800491a:	2300      	movs	r3, #0
 800491c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800491e:	4b8b      	ldr	r3, [pc, #556]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10d      	bne.n	8004946 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492a:	4b88      	ldr	r3, [pc, #544]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	4a87      	ldr	r2, [pc, #540]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004934:	61d3      	str	r3, [r2, #28]
 8004936:	4b85      	ldr	r3, [pc, #532]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004942:	2301      	movs	r3, #1
 8004944:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004946:	4b82      	ldr	r3, [pc, #520]	@ (8004b50 <HAL_RCC_OscConfig+0x4c8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d118      	bne.n	8004984 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004952:	4b7f      	ldr	r3, [pc, #508]	@ (8004b50 <HAL_RCC_OscConfig+0x4c8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a7e      	ldr	r2, [pc, #504]	@ (8004b50 <HAL_RCC_OscConfig+0x4c8>)
 8004958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800495c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495e:	f7fd f945 	bl	8001bec <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004966:	f7fd f941 	bl	8001bec <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b64      	cmp	r3, #100	@ 0x64
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e103      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004978:	4b75      	ldr	r3, [pc, #468]	@ (8004b50 <HAL_RCC_OscConfig+0x4c8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d106      	bne.n	800499a <HAL_RCC_OscConfig+0x312>
 800498c:	4b6f      	ldr	r3, [pc, #444]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	4a6e      	ldr	r2, [pc, #440]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	6213      	str	r3, [r2, #32]
 8004998:	e02d      	b.n	80049f6 <HAL_RCC_OscConfig+0x36e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10c      	bne.n	80049bc <HAL_RCC_OscConfig+0x334>
 80049a2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	4a69      	ldr	r2, [pc, #420]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	6213      	str	r3, [r2, #32]
 80049ae:	4b67      	ldr	r3, [pc, #412]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	4a66      	ldr	r2, [pc, #408]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 80049b4:	f023 0304 	bic.w	r3, r3, #4
 80049b8:	6213      	str	r3, [r2, #32]
 80049ba:	e01c      	b.n	80049f6 <HAL_RCC_OscConfig+0x36e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	2b05      	cmp	r3, #5
 80049c2:	d10c      	bne.n	80049de <HAL_RCC_OscConfig+0x356>
 80049c4:	4b61      	ldr	r3, [pc, #388]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	4a60      	ldr	r2, [pc, #384]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 80049ca:	f043 0304 	orr.w	r3, r3, #4
 80049ce:	6213      	str	r3, [r2, #32]
 80049d0:	4b5e      	ldr	r3, [pc, #376]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	4a5d      	ldr	r2, [pc, #372]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6213      	str	r3, [r2, #32]
 80049dc:	e00b      	b.n	80049f6 <HAL_RCC_OscConfig+0x36e>
 80049de:	4b5b      	ldr	r3, [pc, #364]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4a5a      	ldr	r2, [pc, #360]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 80049e4:	f023 0301 	bic.w	r3, r3, #1
 80049e8:	6213      	str	r3, [r2, #32]
 80049ea:	4b58      	ldr	r3, [pc, #352]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	4a57      	ldr	r2, [pc, #348]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 80049f0:	f023 0304 	bic.w	r3, r3, #4
 80049f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d015      	beq.n	8004a2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fe:	f7fd f8f5 	bl	8001bec <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a04:	e00a      	b.n	8004a1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a06:	f7fd f8f1 	bl	8001bec <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e0b1      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1c:	4b4b      	ldr	r3, [pc, #300]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0ee      	beq.n	8004a06 <HAL_RCC_OscConfig+0x37e>
 8004a28:	e014      	b.n	8004a54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2a:	f7fd f8df 	bl	8001bec <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7fd f8db 	bl	8001bec <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e09b      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a48:	4b40      	ldr	r3, [pc, #256]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1ee      	bne.n	8004a32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d105      	bne.n	8004a66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a5a:	4b3c      	ldr	r3, [pc, #240]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	4a3b      	ldr	r2, [pc, #236]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004a60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8087 	beq.w	8004b7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a70:	4b36      	ldr	r3, [pc, #216]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d061      	beq.n	8004b40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d146      	bne.n	8004b12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a84:	4b33      	ldr	r3, [pc, #204]	@ (8004b54 <HAL_RCC_OscConfig+0x4cc>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8a:	f7fd f8af 	bl	8001bec <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a92:	f7fd f8ab 	bl	8001bec <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e06d      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa4:	4b29      	ldr	r3, [pc, #164]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f0      	bne.n	8004a92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab8:	d108      	bne.n	8004acc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004aba:	4b24      	ldr	r3, [pc, #144]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	4921      	ldr	r1, [pc, #132]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004acc:	4b1f      	ldr	r3, [pc, #124]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a19      	ldr	r1, [r3, #32]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	430b      	orrs	r3, r1
 8004ade:	491b      	ldr	r1, [pc, #108]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b54 <HAL_RCC_OscConfig+0x4cc>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aea:	f7fd f87f 	bl	8001bec <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af2:	f7fd f87b 	bl	8001bec <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e03d      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b04:	4b11      	ldr	r3, [pc, #68]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x46a>
 8004b10:	e035      	b.n	8004b7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b12:	4b10      	ldr	r3, [pc, #64]	@ (8004b54 <HAL_RCC_OscConfig+0x4cc>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fd f868 	bl	8001bec <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b20:	f7fd f864 	bl	8001bec <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e026      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b32:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <HAL_RCC_OscConfig+0x4c4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x498>
 8004b3e:	e01e      	b.n	8004b7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d107      	bne.n	8004b58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e019      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	40007000 	.word	0x40007000
 8004b54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b58:	4b0b      	ldr	r3, [pc, #44]	@ (8004b88 <HAL_RCC_OscConfig+0x500>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d106      	bne.n	8004b7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d001      	beq.n	8004b7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40021000 	.word	0x40021000

08004b8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0d0      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b6a      	ldr	r3, [pc, #424]	@ (8004d4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d910      	bls.n	8004bd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b67      	ldr	r3, [pc, #412]	@ (8004d4c <HAL_RCC_ClockConfig+0x1c0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f023 0207 	bic.w	r2, r3, #7
 8004bb6:	4965      	ldr	r1, [pc, #404]	@ (8004d4c <HAL_RCC_ClockConfig+0x1c0>)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b63      	ldr	r3, [pc, #396]	@ (8004d4c <HAL_RCC_ClockConfig+0x1c0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0b8      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d020      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be8:	4b59      	ldr	r3, [pc, #356]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	4a58      	ldr	r2, [pc, #352]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004bee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bf2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c00:	4b53      	ldr	r3, [pc, #332]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	4a52      	ldr	r2, [pc, #328]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004c0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c0c:	4b50      	ldr	r3, [pc, #320]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	494d      	ldr	r1, [pc, #308]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d040      	beq.n	8004cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d107      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	4b47      	ldr	r3, [pc, #284]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d115      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e07f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d107      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4a:	4b41      	ldr	r3, [pc, #260]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e073      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e06b      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c6a:	4b39      	ldr	r3, [pc, #228]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f023 0203 	bic.w	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	4936      	ldr	r1, [pc, #216]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c7c:	f7fc ffb6 	bl	8001bec <HAL_GetTick>
 8004c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c82:	e00a      	b.n	8004c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c84:	f7fc ffb2 	bl	8001bec <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e053      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f003 020c 	and.w	r2, r3, #12
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d1eb      	bne.n	8004c84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cac:	4b27      	ldr	r3, [pc, #156]	@ (8004d4c <HAL_RCC_ClockConfig+0x1c0>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d210      	bcs.n	8004cdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b24      	ldr	r3, [pc, #144]	@ (8004d4c <HAL_RCC_ClockConfig+0x1c0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 0207 	bic.w	r2, r3, #7
 8004cc2:	4922      	ldr	r1, [pc, #136]	@ (8004d4c <HAL_RCC_ClockConfig+0x1c0>)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b20      	ldr	r3, [pc, #128]	@ (8004d4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e032      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce8:	4b19      	ldr	r3, [pc, #100]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4916      	ldr	r1, [pc, #88]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d06:	4b12      	ldr	r3, [pc, #72]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	490e      	ldr	r1, [pc, #56]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d1a:	f000 f821 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	4b0b      	ldr	r3, [pc, #44]	@ (8004d50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	490a      	ldr	r1, [pc, #40]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2c:	5ccb      	ldrb	r3, [r1, r3]
 8004d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d32:	4a09      	ldr	r2, [pc, #36]	@ (8004d58 <HAL_RCC_ClockConfig+0x1cc>)
 8004d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d36:	4b09      	ldr	r3, [pc, #36]	@ (8004d5c <HAL_RCC_ClockConfig+0x1d0>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fc fe26 	bl	800198c <HAL_InitTick>

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40022000 	.word	0x40022000
 8004d50:	40021000 	.word	0x40021000
 8004d54:	08009530 	.word	0x08009530
 8004d58:	20000008 	.word	0x20000008
 8004d5c:	2000000c 	.word	0x2000000c

08004d60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	2300      	movs	r3, #0
 8004d74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f003 030c 	and.w	r3, r3, #12
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d002      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x30>
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d003      	beq.n	8004d96 <HAL_RCC_GetSysClockFreq+0x36>
 8004d8e:	e027      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d90:	4b19      	ldr	r3, [pc, #100]	@ (8004df8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d92:	613b      	str	r3, [r7, #16]
      break;
 8004d94:	e027      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	0c9b      	lsrs	r3, r3, #18
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	4a17      	ldr	r2, [pc, #92]	@ (8004dfc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004da0:	5cd3      	ldrb	r3, [r2, r3]
 8004da2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d010      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dae:	4b11      	ldr	r3, [pc, #68]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	0c5b      	lsrs	r3, r3, #17
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	4a11      	ldr	r2, [pc, #68]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004dba:	5cd3      	ldrb	r3, [r2, r3]
 8004dbc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8004df8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dc2:	fb03 f202 	mul.w	r2, r3, r2
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e004      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8004e04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004dd4:	fb02 f303 	mul.w	r3, r2, r3
 8004dd8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	613b      	str	r3, [r7, #16]
      break;
 8004dde:	e002      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004de0:	4b05      	ldr	r3, [pc, #20]	@ (8004df8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004de2:	613b      	str	r3, [r7, #16]
      break;
 8004de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004de6:	693b      	ldr	r3, [r7, #16]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000
 8004df8:	007a1200 	.word	0x007a1200
 8004dfc:	08009548 	.word	0x08009548
 8004e00:	08009558 	.word	0x08009558
 8004e04:	003d0900 	.word	0x003d0900

08004e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e0c:	4b02      	ldr	r3, [pc, #8]	@ (8004e18 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr
 8004e18:	20000008 	.word	0x20000008

08004e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e20:	f7ff fff2 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8004e24:	4602      	mov	r2, r0
 8004e26:	4b05      	ldr	r3, [pc, #20]	@ (8004e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	0a1b      	lsrs	r3, r3, #8
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	4903      	ldr	r1, [pc, #12]	@ (8004e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e32:	5ccb      	ldrb	r3, [r1, r3]
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	08009540 	.word	0x08009540

08004e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e48:	f7ff ffde 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	0adb      	lsrs	r3, r3, #11
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4903      	ldr	r1, [pc, #12]	@ (8004e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e5a:	5ccb      	ldrb	r3, [r1, r3]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40021000 	.word	0x40021000
 8004e68:	08009540 	.word	0x08009540

08004e6c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	220f      	movs	r2, #15
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e7c:	4b11      	ldr	r3, [pc, #68]	@ (8004ec4 <HAL_RCC_GetClockConfig+0x58>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0203 	and.w	r2, r3, #3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e88:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec4 <HAL_RCC_GetClockConfig+0x58>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <HAL_RCC_GetClockConfig+0x58>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ea0:	4b08      	ldr	r3, [pc, #32]	@ (8004ec4 <HAL_RCC_GetClockConfig+0x58>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	08db      	lsrs	r3, r3, #3
 8004ea6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004eae:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <HAL_RCC_GetClockConfig+0x5c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0207 	and.w	r2, r3, #7
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	40022000 	.word	0x40022000

08004ecc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8004f00 <RCC_Delay+0x34>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8004f04 <RCC_Delay+0x38>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	0a5b      	lsrs	r3, r3, #9
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ee8:	bf00      	nop
  }
  while (Delay --);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1e5a      	subs	r2, r3, #1
 8004eee:	60fa      	str	r2, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f9      	bne.n	8004ee8 <RCC_Delay+0x1c>
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr
 8004f00:	20000008 	.word	0x20000008
 8004f04:	10624dd3 	.word	0x10624dd3

08004f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e041      	b.n	8004f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f839 	bl	8004fa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3304      	adds	r3, #4
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f000 fc48 	bl	80057dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d001      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e03a      	b.n	8005046 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a18      	ldr	r2, [pc, #96]	@ (8005050 <HAL_TIM_Base_Start_IT+0x98>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00e      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x58>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ffa:	d009      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x58>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a14      	ldr	r2, [pc, #80]	@ (8005054 <HAL_TIM_Base_Start_IT+0x9c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x58>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a13      	ldr	r2, [pc, #76]	@ (8005058 <HAL_TIM_Base_Start_IT+0xa0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d111      	bne.n	8005034 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b06      	cmp	r3, #6
 8005020:	d010      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	e007      	b.n	8005044 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr
 8005050:	40012c00 	.word	0x40012c00
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800

0800505c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e041      	b.n	80050f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fc fbe6 	bl	8001854 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3304      	adds	r3, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f000 fb9e 	bl	80057dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d109      	bne.n	8005124 <HAL_TIM_PWM_Start_IT+0x28>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	bf14      	ite	ne
 800511c:	2301      	movne	r3, #1
 800511e:	2300      	moveq	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	e022      	b.n	800516a <HAL_TIM_PWM_Start_IT+0x6e>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b04      	cmp	r3, #4
 8005128:	d109      	bne.n	800513e <HAL_TIM_PWM_Start_IT+0x42>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b01      	cmp	r3, #1
 8005134:	bf14      	ite	ne
 8005136:	2301      	movne	r3, #1
 8005138:	2300      	moveq	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	e015      	b.n	800516a <HAL_TIM_PWM_Start_IT+0x6e>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b08      	cmp	r3, #8
 8005142:	d109      	bne.n	8005158 <HAL_TIM_PWM_Start_IT+0x5c>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	bf14      	ite	ne
 8005150:	2301      	movne	r3, #1
 8005152:	2300      	moveq	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e008      	b.n	800516a <HAL_TIM_PWM_Start_IT+0x6e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e0a9      	b.n	80052c6 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d104      	bne.n	8005182 <HAL_TIM_PWM_Start_IT+0x86>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005180:	e013      	b.n	80051aa <HAL_TIM_PWM_Start_IT+0xae>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d104      	bne.n	8005192 <HAL_TIM_PWM_Start_IT+0x96>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005190:	e00b      	b.n	80051aa <HAL_TIM_PWM_Start_IT+0xae>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_PWM_Start_IT+0xa6>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051a0:	e003      	b.n	80051aa <HAL_TIM_PWM_Start_IT+0xae>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	d841      	bhi.n	8005234 <HAL_TIM_PWM_Start_IT+0x138>
 80051b0:	a201      	add	r2, pc, #4	@ (adr r2, 80051b8 <HAL_TIM_PWM_Start_IT+0xbc>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	080051ed 	.word	0x080051ed
 80051bc:	08005235 	.word	0x08005235
 80051c0:	08005235 	.word	0x08005235
 80051c4:	08005235 	.word	0x08005235
 80051c8:	080051ff 	.word	0x080051ff
 80051cc:	08005235 	.word	0x08005235
 80051d0:	08005235 	.word	0x08005235
 80051d4:	08005235 	.word	0x08005235
 80051d8:	08005211 	.word	0x08005211
 80051dc:	08005235 	.word	0x08005235
 80051e0:	08005235 	.word	0x08005235
 80051e4:	08005235 	.word	0x08005235
 80051e8:	08005223 	.word	0x08005223
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0202 	orr.w	r2, r2, #2
 80051fa:	60da      	str	r2, [r3, #12]
      break;
 80051fc:	e01d      	b.n	800523a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0204 	orr.w	r2, r2, #4
 800520c:	60da      	str	r2, [r3, #12]
      break;
 800520e:	e014      	b.n	800523a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0208 	orr.w	r2, r2, #8
 800521e:	60da      	str	r2, [r3, #12]
      break;
 8005220:	e00b      	b.n	800523a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0210 	orr.w	r2, r2, #16
 8005230:	60da      	str	r2, [r3, #12]
      break;
 8005232:	e002      	b.n	800523a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      break;
 8005238:	bf00      	nop
  }

  if (status == HAL_OK)
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d141      	bne.n	80052c4 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2201      	movs	r2, #1
 8005246:	6839      	ldr	r1, [r7, #0]
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fcbd 	bl	8005bc8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1f      	ldr	r2, [pc, #124]	@ (80052d0 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d107      	bne.n	8005268 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005266:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a18      	ldr	r2, [pc, #96]	@ (80052d0 <HAL_TIM_PWM_Start_IT+0x1d4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00e      	beq.n	8005290 <HAL_TIM_PWM_Start_IT+0x194>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800527a:	d009      	beq.n	8005290 <HAL_TIM_PWM_Start_IT+0x194>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a14      	ldr	r2, [pc, #80]	@ (80052d4 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <HAL_TIM_PWM_Start_IT+0x194>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a13      	ldr	r2, [pc, #76]	@ (80052d8 <HAL_TIM_PWM_Start_IT+0x1dc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d111      	bne.n	80052b4 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b06      	cmp	r3, #6
 80052a0:	d010      	beq.n	80052c4 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 0201 	orr.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b2:	e007      	b.n	80052c4 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800

080052dc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b0c      	cmp	r3, #12
 80052ee:	d841      	bhi.n	8005374 <HAL_TIM_PWM_Stop_IT+0x98>
 80052f0:	a201      	add	r2, pc, #4	@ (adr r2, 80052f8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80052f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f6:	bf00      	nop
 80052f8:	0800532d 	.word	0x0800532d
 80052fc:	08005375 	.word	0x08005375
 8005300:	08005375 	.word	0x08005375
 8005304:	08005375 	.word	0x08005375
 8005308:	0800533f 	.word	0x0800533f
 800530c:	08005375 	.word	0x08005375
 8005310:	08005375 	.word	0x08005375
 8005314:	08005375 	.word	0x08005375
 8005318:	08005351 	.word	0x08005351
 800531c:	08005375 	.word	0x08005375
 8005320:	08005375 	.word	0x08005375
 8005324:	08005375 	.word	0x08005375
 8005328:	08005363 	.word	0x08005363
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0202 	bic.w	r2, r2, #2
 800533a:	60da      	str	r2, [r3, #12]
      break;
 800533c:	e01d      	b.n	800537a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0204 	bic.w	r2, r2, #4
 800534c:	60da      	str	r2, [r3, #12]
      break;
 800534e:	e014      	b.n	800537a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0208 	bic.w	r2, r2, #8
 800535e:	60da      	str	r2, [r3, #12]
      break;
 8005360:	e00b      	b.n	800537a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0210 	bic.w	r2, r2, #16
 8005370:	60da      	str	r2, [r3, #12]
      break;
 8005372:	e002      	b.n	800537a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
      break;
 8005378:	bf00      	nop
  }

  if (status == HAL_OK)
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d157      	bne.n	8005430 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2200      	movs	r2, #0
 8005386:	6839      	ldr	r1, [r7, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fc1d 	bl	8005bc8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2a      	ldr	r2, [pc, #168]	@ (800543c <HAL_TIM_PWM_Stop_IT+0x160>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d117      	bne.n	80053c8 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6a1a      	ldr	r2, [r3, #32]
 800539e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10f      	bne.n	80053c8 <HAL_TIM_PWM_Stop_IT+0xec>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6a1a      	ldr	r2, [r3, #32]
 80053ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d107      	bne.n	80053c8 <HAL_TIM_PWM_Stop_IT+0xec>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053c6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6a1a      	ldr	r2, [r3, #32]
 80053ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10f      	bne.n	80053f8 <HAL_TIM_PWM_Stop_IT+0x11c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6a1a      	ldr	r2, [r3, #32]
 80053de:	f240 4344 	movw	r3, #1092	@ 0x444
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d107      	bne.n	80053f8 <HAL_TIM_PWM_Stop_IT+0x11c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0201 	bic.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d104      	bne.n	8005408 <HAL_TIM_PWM_Stop_IT+0x12c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005406:	e013      	b.n	8005430 <HAL_TIM_PWM_Stop_IT+0x154>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b04      	cmp	r3, #4
 800540c:	d104      	bne.n	8005418 <HAL_TIM_PWM_Stop_IT+0x13c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005416:	e00b      	b.n	8005430 <HAL_TIM_PWM_Stop_IT+0x154>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b08      	cmp	r3, #8
 800541c:	d104      	bne.n	8005428 <HAL_TIM_PWM_Stop_IT+0x14c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005426:	e003      	b.n	8005430 <HAL_TIM_PWM_Stop_IT+0x154>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8005430:	7bfb      	ldrb	r3, [r7, #15]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40012c00 	.word	0x40012c00

08005440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d020      	beq.n	80054a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01b      	beq.n	80054a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0202 	mvn.w	r2, #2
 8005474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f993 	bl	80057b6 <HAL_TIM_IC_CaptureCallback>
 8005490:	e005      	b.n	800549e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f986 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f002 ff09 	bl	80082b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d020      	beq.n	80054f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01b      	beq.n	80054f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0204 	mvn.w	r2, #4
 80054c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f96d 	bl	80057b6 <HAL_TIM_IC_CaptureCallback>
 80054dc:	e005      	b.n	80054ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f960 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f002 fee3 	bl	80082b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d020      	beq.n	800553c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	2b00      	cmp	r3, #0
 8005502:	d01b      	beq.n	800553c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0208 	mvn.w	r2, #8
 800550c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2204      	movs	r2, #4
 8005512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f947 	bl	80057b6 <HAL_TIM_IC_CaptureCallback>
 8005528:	e005      	b.n	8005536 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f93a 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f002 febd 	bl	80082b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b00      	cmp	r3, #0
 8005544:	d020      	beq.n	8005588 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01b      	beq.n	8005588 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0210 	mvn.w	r2, #16
 8005558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2208      	movs	r2, #8
 800555e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f921 	bl	80057b6 <HAL_TIM_IC_CaptureCallback>
 8005574:	e005      	b.n	8005582 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f914 	bl	80057a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f002 fe97 	bl	80082b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00c      	beq.n	80055ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d007      	beq.n	80055ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0201 	mvn.w	r2, #1
 80055a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fc f88a 	bl	80016c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d007      	beq.n	80055d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fb87 	bl	8005cde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00c      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f8ea 	bl	80057c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00c      	beq.n	8005618 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0220 	mvn.w	r2, #32
 8005610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fb5a 	bl	8005ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800563a:	2302      	movs	r3, #2
 800563c:	e0ae      	b.n	800579c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b0c      	cmp	r3, #12
 800564a:	f200 809f 	bhi.w	800578c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800564e:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	08005689 	.word	0x08005689
 8005658:	0800578d 	.word	0x0800578d
 800565c:	0800578d 	.word	0x0800578d
 8005660:	0800578d 	.word	0x0800578d
 8005664:	080056c9 	.word	0x080056c9
 8005668:	0800578d 	.word	0x0800578d
 800566c:	0800578d 	.word	0x0800578d
 8005670:	0800578d 	.word	0x0800578d
 8005674:	0800570b 	.word	0x0800570b
 8005678:	0800578d 	.word	0x0800578d
 800567c:	0800578d 	.word	0x0800578d
 8005680:	0800578d 	.word	0x0800578d
 8005684:	0800574b 	.word	0x0800574b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	4618      	mov	r0, r3
 8005690:	f000 f912 	bl	80058b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0208 	orr.w	r2, r2, #8
 80056a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0204 	bic.w	r2, r2, #4
 80056b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6999      	ldr	r1, [r3, #24]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	619a      	str	r2, [r3, #24]
      break;
 80056c6:	e064      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68b9      	ldr	r1, [r7, #8]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f958 	bl	8005984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6999      	ldr	r1, [r3, #24]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	021a      	lsls	r2, r3, #8
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	619a      	str	r2, [r3, #24]
      break;
 8005708:	e043      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	4618      	mov	r0, r3
 8005712:	f000 f9a1 	bl	8005a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 0208 	orr.w	r2, r2, #8
 8005724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0204 	bic.w	r2, r2, #4
 8005734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69d9      	ldr	r1, [r3, #28]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	61da      	str	r2, [r3, #28]
      break;
 8005748:	e023      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	4618      	mov	r0, r3
 8005752:	f000 f9eb 	bl	8005b2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69d9      	ldr	r1, [r3, #28]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	021a      	lsls	r2, r3, #8
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	61da      	str	r2, [r3, #28]
      break;
 800578a:	e002      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	75fb      	strb	r3, [r7, #23]
      break;
 8005790:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800579a:	7dfb      	ldrb	r3, [r7, #23]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr

080057b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr

080057c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr
	...

080057dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a2f      	ldr	r2, [pc, #188]	@ (80058ac <TIM_Base_SetConfig+0xd0>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00b      	beq.n	800580c <TIM_Base_SetConfig+0x30>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057fa:	d007      	beq.n	800580c <TIM_Base_SetConfig+0x30>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a2c      	ldr	r2, [pc, #176]	@ (80058b0 <TIM_Base_SetConfig+0xd4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <TIM_Base_SetConfig+0x30>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a2b      	ldr	r2, [pc, #172]	@ (80058b4 <TIM_Base_SetConfig+0xd8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d108      	bne.n	800581e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a22      	ldr	r2, [pc, #136]	@ (80058ac <TIM_Base_SetConfig+0xd0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00b      	beq.n	800583e <TIM_Base_SetConfig+0x62>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800582c:	d007      	beq.n	800583e <TIM_Base_SetConfig+0x62>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a1f      	ldr	r2, [pc, #124]	@ (80058b0 <TIM_Base_SetConfig+0xd4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d003      	beq.n	800583e <TIM_Base_SetConfig+0x62>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a1e      	ldr	r2, [pc, #120]	@ (80058b4 <TIM_Base_SetConfig+0xd8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d108      	bne.n	8005850 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a0d      	ldr	r2, [pc, #52]	@ (80058ac <TIM_Base_SetConfig+0xd0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d103      	bne.n	8005884 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d005      	beq.n	80058a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f023 0201 	bic.w	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	611a      	str	r2, [r3, #16]
  }
}
 80058a2:	bf00      	nop
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr
 80058ac:	40012c00 	.word	0x40012c00
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40000800 	.word	0x40000800

080058b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f023 0201 	bic.w	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f023 0302 	bic.w	r3, r3, #2
 8005900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a1c      	ldr	r2, [pc, #112]	@ (8005980 <TIM_OC1_SetConfig+0xc8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d10c      	bne.n	800592e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f023 0308 	bic.w	r3, r3, #8
 800591a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f023 0304 	bic.w	r3, r3, #4
 800592c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a13      	ldr	r2, [pc, #76]	@ (8005980 <TIM_OC1_SetConfig+0xc8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d111      	bne.n	800595a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800593c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	621a      	str	r2, [r3, #32]
}
 8005974:	bf00      	nop
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	bc80      	pop	{r7}
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40012c00 	.word	0x40012c00

08005984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	f023 0210 	bic.w	r2, r3, #16
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0320 	bic.w	r3, r3, #32
 80059ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a1d      	ldr	r2, [pc, #116]	@ (8005a54 <TIM_OC2_SetConfig+0xd0>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d10d      	bne.n	8005a00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a14      	ldr	r2, [pc, #80]	@ (8005a54 <TIM_OC2_SetConfig+0xd0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d113      	bne.n	8005a30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	621a      	str	r2, [r3, #32]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr
 8005a54:	40012c00 	.word	0x40012c00

08005a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b28 <TIM_OC3_SetConfig+0xd0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d10d      	bne.n	8005ad2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a14      	ldr	r2, [pc, #80]	@ (8005b28 <TIM_OC3_SetConfig+0xd0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d113      	bne.n	8005b02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	621a      	str	r2, [r3, #32]
}
 8005b1c:	bf00      	nop
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40012c00 	.word	0x40012c00

08005b2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	021b      	lsls	r3, r3, #8
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	031b      	lsls	r3, r3, #12
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a0f      	ldr	r2, [pc, #60]	@ (8005bc4 <TIM_OC4_SetConfig+0x98>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d109      	bne.n	8005ba0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	019b      	lsls	r3, r3, #6
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr
 8005bc4:	40012c00 	.word	0x40012c00

08005bc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	2201      	movs	r2, #1
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a1a      	ldr	r2, [r3, #32]
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	43db      	mvns	r3, r3
 8005bea:	401a      	ands	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a1a      	ldr	r2, [r3, #32]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005c00:	431a      	orrs	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	621a      	str	r2, [r3, #32]
}
 8005c06:	bf00      	nop
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e046      	b.n	8005cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a16      	ldr	r2, [pc, #88]	@ (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00e      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c74:	d009      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a12      	ldr	r2, [pc, #72]	@ (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d004      	beq.n	8005c8a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a10      	ldr	r2, [pc, #64]	@ (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d10c      	bne.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc80      	pop	{r7}
 8005cbe:	4770      	bx	lr
 8005cc0:	40012c00 	.word	0x40012c00
 8005cc4:	40000400 	.word	0x40000400
 8005cc8:	40000800 	.word	0x40000800

08005ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr

08005cde <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr

08005cf0 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e04a      	b.n	8005d98 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fb fdf0 	bl	80018fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2224      	movs	r2, #36	@ 0x24
 8005d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fe29 	bl	800698c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695a      	ldr	r2, [r3, #20]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8005d58:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695a      	ldr	r2, [r3, #20]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0208 	orr.w	r2, r2, #8
 8005d68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08a      	sub	sp, #40	@ 0x28
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	d175      	bne.n	8005eac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <HAL_UART_Transmit+0x2c>
 8005dc6:	88fb      	ldrh	r3, [r7, #6]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e06e      	b.n	8005eae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2221      	movs	r2, #33	@ 0x21
 8005dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dde:	f7fb ff05 	bl	8001bec <HAL_GetTick>
 8005de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	88fa      	ldrh	r2, [r7, #6]
 8005de8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	88fa      	ldrh	r2, [r7, #6]
 8005dee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005df8:	d108      	bne.n	8005e0c <HAL_UART_Transmit+0x6c>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d104      	bne.n	8005e0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	e003      	b.n	8005e14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e14:	e02e      	b.n	8005e74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2180      	movs	r1, #128	@ 0x80
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 fb85 	bl	8006530 <UART_WaitOnFlagUntilTimeout>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e03a      	b.n	8005eae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10b      	bne.n	8005e56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	3302      	adds	r3, #2
 8005e52:	61bb      	str	r3, [r7, #24]
 8005e54:	e007      	b.n	8005e66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	781a      	ldrb	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	3301      	adds	r3, #1
 8005e64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1cb      	bne.n	8005e16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2200      	movs	r2, #0
 8005e86:	2140      	movs	r1, #64	@ 0x40
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fb51 	bl	8006530 <UART_WaitOnFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e006      	b.n	8005eae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e000      	b.n	8005eae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005eac:	2302      	movs	r3, #2
  }
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3720      	adds	r7, #32
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b08c      	sub	sp, #48	@ 0x30
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b20      	cmp	r3, #32
 8005ece:	d14a      	bne.n	8005f66 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e043      	b.n	8005f68 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005eec:	88fb      	ldrh	r3, [r7, #6]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 fb75 	bl	80065e2 <UART_Start_Receive_IT>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005efe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d12c      	bne.n	8005f60 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d125      	bne.n	8005f5a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f0e:	2300      	movs	r3, #0
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	e853 3f00 	ldrex	r3, [r3]
 8005f32:	617b      	str	r3, [r7, #20]
   return(result);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f043 0310 	orr.w	r3, r3, #16
 8005f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f44:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f46:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f48:	6a39      	ldr	r1, [r7, #32]
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f4c:	e841 2300 	strex	r3, r2, [r1]
 8005f50:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e5      	bne.n	8005f24 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8005f58:	e002      	b.n	8005f60 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005f60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f64:	e000      	b.n	8005f68 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005f66:	2302      	movs	r3, #2
  }
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3730      	adds	r7, #48	@ 0x30
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b0ba      	sub	sp, #232	@ 0xe8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fa6:	f003 030f 	and.w	r3, r3, #15
 8005faa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10f      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x66>
 8005fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fc1d 	bl	800680e <UART_Receive_IT>
      return;
 8005fd4:	e25b      	b.n	800648e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005fd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 80de 	beq.w	800619c <HAL_UART_IRQHandler+0x22c>
 8005fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d106      	bne.n	8005ffa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80d1 	beq.w	800619c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00b      	beq.n	800601e <HAL_UART_IRQHandler+0xae>
 8006006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800600a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006016:	f043 0201 	orr.w	r2, r3, #1
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800601e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006022:	f003 0304 	and.w	r3, r3, #4
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00b      	beq.n	8006042 <HAL_UART_IRQHandler+0xd2>
 800602a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d005      	beq.n	8006042 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603a:	f043 0202 	orr.w	r2, r3, #2
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <HAL_UART_IRQHandler+0xf6>
 800604e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d005      	beq.n	8006066 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800605e:	f043 0204 	orr.w	r2, r3, #4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b00      	cmp	r3, #0
 8006070:	d011      	beq.n	8006096 <HAL_UART_IRQHandler+0x126>
 8006072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006076:	f003 0320 	and.w	r3, r3, #32
 800607a:	2b00      	cmp	r3, #0
 800607c:	d105      	bne.n	800608a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800607e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800608e:	f043 0208 	orr.w	r2, r3, #8
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 81f2 	beq.w	8006484 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d008      	beq.n	80060be <HAL_UART_IRQHandler+0x14e>
 80060ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fba8 	bl	800680e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	bf14      	ite	ne
 80060cc:	2301      	movne	r3, #1
 80060ce:	2300      	moveq	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d103      	bne.n	80060ea <HAL_UART_IRQHandler+0x17a>
 80060e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d04f      	beq.n	800618a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fab2 	bl	8006654 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d041      	beq.n	8006182 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3314      	adds	r3, #20
 8006104:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006114:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006118:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800611c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3314      	adds	r3, #20
 8006126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800612a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800612e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1d9      	bne.n	80060fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614e:	2b00      	cmp	r3, #0
 8006150:	d013      	beq.n	800617a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006156:	4a7e      	ldr	r2, [pc, #504]	@ (8006350 <HAL_UART_IRQHandler+0x3e0>)
 8006158:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800615e:	4618      	mov	r0, r3
 8006160:	f7fb fee8 	bl	8001f34 <HAL_DMA_Abort_IT>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d016      	beq.n	8006198 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006174:	4610      	mov	r0, r2
 8006176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006178:	e00e      	b.n	8006198 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f99c 	bl	80064b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006180:	e00a      	b.n	8006198 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f998 	bl	80064b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006188:	e006      	b.n	8006198 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f994 	bl	80064b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006196:	e175      	b.n	8006484 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006198:	bf00      	nop
    return;
 800619a:	e173      	b.n	8006484 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	f040 814f 	bne.w	8006444 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061aa:	f003 0310 	and.w	r3, r3, #16
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 8148 	beq.w	8006444 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 8141 	beq.w	8006444 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061c2:	2300      	movs	r3, #0
 80061c4:	60bb      	str	r3, [r7, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	60bb      	str	r3, [r7, #8]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	60bb      	str	r3, [r7, #8]
 80061d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 80b6 	beq.w	8006354 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 8145 	beq.w	8006488 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006206:	429a      	cmp	r2, r3
 8006208:	f080 813e 	bcs.w	8006488 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006212:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	2b20      	cmp	r3, #32
 800621c:	f000 8088 	beq.w	8006330 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	330c      	adds	r3, #12
 8006226:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006236:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800623a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800623e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	330c      	adds	r3, #12
 8006248:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800624c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006250:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006258:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006264:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1d9      	bne.n	8006220 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3314      	adds	r3, #20
 8006272:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006276:	e853 3f00 	ldrex	r3, [r3]
 800627a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800627c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800627e:	f023 0301 	bic.w	r3, r3, #1
 8006282:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3314      	adds	r3, #20
 800628c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006290:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006294:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006296:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006298:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80062a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e1      	bne.n	800626c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3314      	adds	r3, #20
 80062ae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80062b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3314      	adds	r3, #20
 80062c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80062cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80062ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80062d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80062d4:	e841 2300 	strex	r3, r2, [r1]
 80062d8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80062da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1e3      	bne.n	80062a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2220      	movs	r2, #32
 80062e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	330c      	adds	r3, #12
 80062f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006300:	f023 0310 	bic.w	r3, r3, #16
 8006304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	330c      	adds	r3, #12
 800630e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006312:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006314:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006318:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e3      	bne.n	80062ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632a:	4618      	mov	r0, r3
 800632c:	f7fb fdc6 	bl	8001ebc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800633e:	b29b      	uxth	r3, r3
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	b29b      	uxth	r3, r3
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fb fbee 	bl	8001b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800634c:	e09c      	b.n	8006488 <HAL_UART_IRQHandler+0x518>
 800634e:	bf00      	nop
 8006350:	08006719 	.word	0x08006719
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800635c:	b29b      	uxth	r3, r3
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006368:	b29b      	uxth	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 808e 	beq.w	800648c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006370:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 8089 	beq.w	800648c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800638a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800638c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006390:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	330c      	adds	r3, #12
 800639a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800639e:	647a      	str	r2, [r7, #68]	@ 0x44
 80063a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e3      	bne.n	800637a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3314      	adds	r3, #20
 80063b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	623b      	str	r3, [r7, #32]
   return(result);
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	f023 0301 	bic.w	r3, r3, #1
 80063c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3314      	adds	r3, #20
 80063d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80063d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80063d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063de:	e841 2300 	strex	r3, r2, [r1]
 80063e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1e3      	bne.n	80063b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	330c      	adds	r3, #12
 80063fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	60fb      	str	r3, [r7, #12]
   return(result);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0310 	bic.w	r3, r3, #16
 800640e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	330c      	adds	r3, #12
 8006418:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800641c:	61fa      	str	r2, [r7, #28]
 800641e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	69b9      	ldr	r1, [r7, #24]
 8006422:	69fa      	ldr	r2, [r7, #28]
 8006424:	e841 2300 	strex	r3, r2, [r1]
 8006428:	617b      	str	r3, [r7, #20]
   return(result);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d1e3      	bne.n	80063f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006436:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7fb fb73 	bl	8001b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006442:	e023      	b.n	800648c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800644c:	2b00      	cmp	r3, #0
 800644e:	d009      	beq.n	8006464 <HAL_UART_IRQHandler+0x4f4>
 8006450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f96f 	bl	8006740 <UART_Transmit_IT>
    return;
 8006462:	e014      	b.n	800648e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00e      	beq.n	800648e <HAL_UART_IRQHandler+0x51e>
 8006470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d008      	beq.n	800648e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f9ae 	bl	80067de <UART_EndTransmit_IT>
    return;
 8006482:	e004      	b.n	800648e <HAL_UART_IRQHandler+0x51e>
    return;
 8006484:	bf00      	nop
 8006486:	e002      	b.n	800648e <HAL_UART_IRQHandler+0x51e>
      return;
 8006488:	bf00      	nop
 800648a:	e000      	b.n	800648e <HAL_UART_IRQHandler+0x51e>
      return;
 800648c:	bf00      	nop
  }
}
 800648e:	37e8      	adds	r7, #232	@ 0xe8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bc80      	pop	{r7}
 80064a4:	4770      	bx	lr

080064a6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr

080064b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bc80      	pop	{r7}
 80064c8:	4770      	bx	lr

080064ca <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e020      	b.n	8006526 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2224      	movs	r2, #36	@ 0x24
 80064f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 030c 	bic.w	r3, r3, #12
 8006502:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f043 0308 	orr.w	r3, r3, #8
 800650a:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr

08006530 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	4613      	mov	r3, r2
 800653e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006540:	e03b      	b.n	80065ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006548:	d037      	beq.n	80065ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800654a:	f7fb fb4f 	bl	8001bec <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	6a3a      	ldr	r2, [r7, #32]
 8006556:	429a      	cmp	r2, r3
 8006558:	d302      	bcc.n	8006560 <UART_WaitOnFlagUntilTimeout+0x30>
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e03a      	b.n	80065da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	2b00      	cmp	r3, #0
 8006570:	d023      	beq.n	80065ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b80      	cmp	r3, #128	@ 0x80
 8006576:	d020      	beq.n	80065ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b40      	cmp	r3, #64	@ 0x40
 800657c:	d01d      	beq.n	80065ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b08      	cmp	r3, #8
 800658a:	d116      	bne.n	80065ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800658c:	2300      	movs	r3, #0
 800658e:	617b      	str	r3, [r7, #20]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 f856 	bl	8006654 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2208      	movs	r2, #8
 80065ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e00f      	b.n	80065da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4013      	ands	r3, r2
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	bf0c      	ite	eq
 80065ca:	2301      	moveq	r3, #1
 80065cc:	2300      	movne	r3, #0
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d0b4      	beq.n	8006542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b085      	sub	sp, #20
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	4613      	mov	r3, r2
 80065ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	88fa      	ldrh	r2, [r7, #6]
 80065fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	88fa      	ldrh	r2, [r7, #6]
 8006600:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2222      	movs	r2, #34	@ 0x22
 800660c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006626:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695a      	ldr	r2, [r3, #20]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0201 	orr.w	r2, r2, #1
 8006636:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0220 	orr.w	r2, r2, #32
 8006646:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	bc80      	pop	{r7}
 8006652:	4770      	bx	lr

08006654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006654:	b480      	push	{r7}
 8006656:	b095      	sub	sp, #84	@ 0x54
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006666:	e853 3f00 	ldrex	r3, [r3]
 800666a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800666c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	330c      	adds	r3, #12
 800667a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800667c:	643a      	str	r2, [r7, #64]	@ 0x40
 800667e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006682:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800668a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e5      	bne.n	800665c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3314      	adds	r3, #20
 8006696:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	61fb      	str	r3, [r7, #28]
   return(result);
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f023 0301 	bic.w	r3, r3, #1
 80066a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3314      	adds	r3, #20
 80066ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e5      	bne.n	8006690 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d119      	bne.n	8006700 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	330c      	adds	r3, #12
 80066d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	60bb      	str	r3, [r7, #8]
   return(result);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f023 0310 	bic.w	r3, r3, #16
 80066e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	330c      	adds	r3, #12
 80066ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066ec:	61ba      	str	r2, [r7, #24]
 80066ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6979      	ldr	r1, [r7, #20]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	613b      	str	r3, [r7, #16]
   return(result);
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e5      	bne.n	80066cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800670e:	bf00      	nop
 8006710:	3754      	adds	r7, #84	@ 0x54
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006724:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff fec0 	bl	80064b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006738:	bf00      	nop
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b21      	cmp	r3, #33	@ 0x21
 8006752:	d13e      	bne.n	80067d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800675c:	d114      	bne.n	8006788 <UART_Transmit_IT+0x48>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d110      	bne.n	8006788 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800677a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	1c9a      	adds	r2, r3, #2
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	621a      	str	r2, [r3, #32]
 8006786:	e008      	b.n	800679a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	1c59      	adds	r1, r3, #1
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6211      	str	r1, [r2, #32]
 8006792:	781a      	ldrb	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800679e:	b29b      	uxth	r3, r3
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	4619      	mov	r1, r3
 80067a8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10f      	bne.n	80067ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68da      	ldr	r2, [r3, #12]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e000      	b.n	80067d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067d2:	2302      	movs	r3, #2
  }
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	bc80      	pop	{r7}
 80067dc:	4770      	bx	lr

080067de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff fe48 	bl	8006494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b08c      	sub	sp, #48	@ 0x30
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b22      	cmp	r3, #34	@ 0x22
 8006820:	f040 80ae 	bne.w	8006980 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800682c:	d117      	bne.n	800685e <UART_Receive_IT+0x50>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d113      	bne.n	800685e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006836:	2300      	movs	r3, #0
 8006838:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800683e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	b29b      	uxth	r3, r3
 8006848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684c:	b29a      	uxth	r2, r3
 800684e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006850:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006856:	1c9a      	adds	r2, r3, #2
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	629a      	str	r2, [r3, #40]	@ 0x28
 800685c:	e026      	b.n	80068ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006862:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006864:	2300      	movs	r3, #0
 8006866:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006870:	d007      	beq.n	8006882 <UART_Receive_IT+0x74>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <UART_Receive_IT+0x82>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	b2da      	uxtb	r2, r3
 800688a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	e008      	b.n	80068a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800689c:	b2da      	uxtb	r2, r3
 800689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	4619      	mov	r1, r3
 80068ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d15d      	bne.n	800697c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0220 	bic.w	r2, r2, #32
 80068ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695a      	ldr	r2, [r3, #20]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0201 	bic.w	r2, r2, #1
 80068ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006902:	2b01      	cmp	r3, #1
 8006904:	d135      	bne.n	8006972 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	330c      	adds	r3, #12
 8006912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	e853 3f00 	ldrex	r3, [r3]
 800691a:	613b      	str	r3, [r7, #16]
   return(result);
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f023 0310 	bic.w	r3, r3, #16
 8006922:	627b      	str	r3, [r7, #36]	@ 0x24
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	330c      	adds	r3, #12
 800692a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800692c:	623a      	str	r2, [r7, #32]
 800692e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006930:	69f9      	ldr	r1, [r7, #28]
 8006932:	6a3a      	ldr	r2, [r7, #32]
 8006934:	e841 2300 	strex	r3, r2, [r1]
 8006938:	61bb      	str	r3, [r7, #24]
   return(result);
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e5      	bne.n	800690c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0310 	and.w	r3, r3, #16
 800694a:	2b10      	cmp	r3, #16
 800694c:	d10a      	bne.n	8006964 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fb f8dc 	bl	8001b28 <HAL_UARTEx_RxEventCallback>
 8006970:	e002      	b.n	8006978 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff fd97 	bl	80064a6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	e002      	b.n	8006982 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	e000      	b.n	8006982 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006980:	2302      	movs	r3, #2
  }
}
 8006982:	4618      	mov	r0, r3
 8006984:	3730      	adds	r7, #48	@ 0x30
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689a      	ldr	r2, [r3, #8]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80069c6:	f023 030c 	bic.w	r3, r3, #12
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	430b      	orrs	r3, r1
 80069d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a2c      	ldr	r2, [pc, #176]	@ (8006aa0 <UART_SetConfig+0x114>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d103      	bne.n	80069fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069f4:	f7fe fa26 	bl	8004e44 <HAL_RCC_GetPCLK2Freq>
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	e002      	b.n	8006a02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80069fc:	f7fe fa0e 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 8006a00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	009a      	lsls	r2, r3, #2
 8006a0c:	441a      	add	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a18:	4a22      	ldr	r2, [pc, #136]	@ (8006aa4 <UART_SetConfig+0x118>)
 8006a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	0119      	lsls	r1, r3, #4
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009a      	lsls	r2, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a38:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa4 <UART_SetConfig+0x118>)
 8006a3a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	2064      	movs	r0, #100	@ 0x64
 8006a42:	fb00 f303 	mul.w	r3, r0, r3
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	3332      	adds	r3, #50	@ 0x32
 8006a4c:	4a15      	ldr	r2, [pc, #84]	@ (8006aa4 <UART_SetConfig+0x118>)
 8006a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a58:	4419      	add	r1, r3
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	009a      	lsls	r2, r3, #2
 8006a64:	441a      	add	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a70:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa4 <UART_SetConfig+0x118>)
 8006a72:	fba3 0302 	umull	r0, r3, r3, r2
 8006a76:	095b      	lsrs	r3, r3, #5
 8006a78:	2064      	movs	r0, #100	@ 0x64
 8006a7a:	fb00 f303 	mul.w	r3, r0, r3
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	3332      	adds	r3, #50	@ 0x32
 8006a84:	4a07      	ldr	r2, [pc, #28]	@ (8006aa4 <UART_SetConfig+0x118>)
 8006a86:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	f003 020f 	and.w	r2, r3, #15
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	440a      	add	r2, r1
 8006a96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	40013800 	.word	0x40013800
 8006aa4:	51eb851f 	.word	0x51eb851f

08006aa8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006aba:	2b84      	cmp	r3, #132	@ 0x84
 8006abc:	d005      	beq.n	8006aca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006abe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	3303      	adds	r3, #3
 8006ac8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006aca:	68fb      	ldr	r3, [r7, #12]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr

08006ad6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006ada:	f000 faf7 	bl	80070cc <vTaskStartScheduler>
  
  return osOK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ae6:	b089      	sub	sp, #36	@ 0x24
 8006ae8:	af04      	add	r7, sp, #16
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d020      	beq.n	8006b38 <osThreadCreate+0x54>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01c      	beq.n	8006b38 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685c      	ldr	r4, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691e      	ldr	r6, [r3, #16]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff ffc9 	bl	8006aa8 <makeFreeRtosPriority>
 8006b16:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b20:	9202      	str	r2, [sp, #8]
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	9100      	str	r1, [sp, #0]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	4632      	mov	r2, r6
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f000 f8e8 	bl	8006d02 <xTaskCreateStatic>
 8006b32:	4603      	mov	r3, r0
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	e01c      	b.n	8006b72 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685c      	ldr	r4, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b44:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff ffab 	bl	8006aa8 <makeFreeRtosPriority>
 8006b52:	4602      	mov	r2, r0
 8006b54:	f107 030c 	add.w	r3, r7, #12
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	9200      	str	r2, [sp, #0]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	4632      	mov	r2, r6
 8006b60:	4629      	mov	r1, r5
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 f92d 	bl	8006dc2 <xTaskCreate>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d001      	beq.n	8006b72 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e000      	b.n	8006b74 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006b72:	68fb      	ldr	r3, [r7, #12]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b7c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <osDelay+0x16>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	e000      	b.n	8006b94 <osDelay+0x18>
 8006b92:	2301      	movs	r3, #1
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fa63 	bl	8007060 <vTaskDelay>
  
  return osOK;
 8006b9a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f103 0208 	add.w	r2, r3, #8
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f103 0208 	add.w	r2, r3, #8
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f103 0208 	add.w	r2, r3, #8
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr

08006be2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr

08006bfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	601a      	str	r2, [r3, #0]
}
 8006c36:	bf00      	nop
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr

08006c40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c56:	d103      	bne.n	8006c60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	60fb      	str	r3, [r7, #12]
 8006c5e:	e00c      	b.n	8006c7a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3308      	adds	r3, #8
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e002      	b.n	8006c6e <vListInsert+0x2e>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d2f6      	bcs.n	8006c68 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	601a      	str	r2, [r3, #0]
}
 8006ca6:	bf00      	nop
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bc80      	pop	{r7}
 8006cae:	4770      	bx	lr

08006cb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6892      	ldr	r2, [r2, #8]
 8006cc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6852      	ldr	r2, [r2, #4]
 8006cd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d103      	bne.n	8006ce4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	1e5a      	subs	r2, r3, #1
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bc80      	pop	{r7}
 8006d00:	4770      	bx	lr

08006d02 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b08e      	sub	sp, #56	@ 0x38
 8006d06:	af04      	add	r7, sp, #16
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
 8006d0e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10b      	bne.n	8006d2e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	e7fd      	b.n	8006d2a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10b      	bne.n	8006d4c <xTaskCreateStatic+0x4a>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	61fb      	str	r3, [r7, #28]
}
 8006d46:	bf00      	nop
 8006d48:	bf00      	nop
 8006d4a:	e7fd      	b.n	8006d48 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d4c:	23a0      	movs	r3, #160	@ 0xa0
 8006d4e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	2ba0      	cmp	r3, #160	@ 0xa0
 8006d54:	d00b      	beq.n	8006d6e <xTaskCreateStatic+0x6c>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	61bb      	str	r3, [r7, #24]
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	e7fd      	b.n	8006d6a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d01e      	beq.n	8006db4 <xTaskCreateStatic+0xb2>
 8006d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d01b      	beq.n	8006db4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d84:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	2202      	movs	r2, #2
 8006d8a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d8e:	2300      	movs	r3, #0
 8006d90:	9303      	str	r3, [sp, #12]
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	9302      	str	r3, [sp, #8]
 8006d96:	f107 0314 	add.w	r3, r7, #20
 8006d9a:	9301      	str	r3, [sp, #4]
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	68b9      	ldr	r1, [r7, #8]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f850 	bl	8006e4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006dac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006dae:	f000 f8ed 	bl	8006f8c <prvAddNewTaskToReadyList>
 8006db2:	e001      	b.n	8006db8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006db8:	697b      	ldr	r3, [r7, #20]
	}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3728      	adds	r7, #40	@ 0x28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b08c      	sub	sp, #48	@ 0x30
 8006dc6:	af04      	add	r7, sp, #16
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	603b      	str	r3, [r7, #0]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006dd2:	88fb      	ldrh	r3, [r7, #6]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fea2 	bl	8007b20 <pvPortMalloc>
 8006ddc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00e      	beq.n	8006e02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006de4:	20a0      	movs	r0, #160	@ 0xa0
 8006de6:	f000 fe9b 	bl	8007b20 <pvPortMalloc>
 8006dea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006df8:	e005      	b.n	8006e06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006dfa:	6978      	ldr	r0, [r7, #20]
 8006dfc:	f000 ff5e 	bl	8007cbc <vPortFree>
 8006e00:	e001      	b.n	8006e06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d017      	beq.n	8006e3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e14:	88fa      	ldrh	r2, [r7, #6]
 8006e16:	2300      	movs	r3, #0
 8006e18:	9303      	str	r3, [sp, #12]
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	9302      	str	r3, [sp, #8]
 8006e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	68b9      	ldr	r1, [r7, #8]
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 f80e 	bl	8006e4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e30:	69f8      	ldr	r0, [r7, #28]
 8006e32:	f000 f8ab 	bl	8006f8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e36:	2301      	movs	r3, #1
 8006e38:	61bb      	str	r3, [r7, #24]
 8006e3a:	e002      	b.n	8006e42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e42:	69bb      	ldr	r3, [r7, #24]
	}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3720      	adds	r7, #32
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e64:	3b01      	subs	r3, #1
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	f023 0307 	bic.w	r3, r3, #7
 8006e72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00b      	beq.n	8006e96 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	617b      	str	r3, [r7, #20]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01f      	beq.n	8006edc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	61fb      	str	r3, [r7, #28]
 8006ea0:	e012      	b.n	8006ec8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	7819      	ldrb	r1, [r3, #0]
 8006eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	4413      	add	r3, r2
 8006eb0:	3334      	adds	r3, #52	@ 0x34
 8006eb2:	460a      	mov	r2, r1
 8006eb4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	4413      	add	r3, r2
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d006      	beq.n	8006ed0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	2b0f      	cmp	r3, #15
 8006ecc:	d9e9      	bls.n	8006ea2 <prvInitialiseNewTask+0x56>
 8006ece:	e000      	b.n	8006ed2 <prvInitialiseNewTask+0x86>
			{
				break;
 8006ed0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006eda:	e003      	b.n	8006ee4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee6:	2b06      	cmp	r3, #6
 8006ee8:	d901      	bls.n	8006eee <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006eea:	2306      	movs	r3, #6
 8006eec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ef8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efc:	2200      	movs	r2, #0
 8006efe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f02:	3304      	adds	r3, #4
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7ff fe6c 	bl	8006be2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0c:	3318      	adds	r3, #24
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7ff fe67 	bl	8006be2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1c:	f1c3 0207 	rsb	r2, r3, #7
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f28:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3c:	334c      	adds	r3, #76	@ 0x4c
 8006f3e:	224c      	movs	r2, #76	@ 0x4c
 8006f40:	2100      	movs	r1, #0
 8006f42:	4618      	mov	r0, r3
 8006f44:	f001 fa80 	bl	8008448 <memset>
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8006f80 <prvInitialiseNewTask+0x134>)
 8006f4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f50:	4a0c      	ldr	r2, [pc, #48]	@ (8006f84 <prvInitialiseNewTask+0x138>)
 8006f52:	655a      	str	r2, [r3, #84]	@ 0x54
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	4a0c      	ldr	r2, [pc, #48]	@ (8006f88 <prvInitialiseNewTask+0x13c>)
 8006f58:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	68f9      	ldr	r1, [r7, #12]
 8006f5e:	69b8      	ldr	r0, [r7, #24]
 8006f60:	f000 fc28 	bl	80077b4 <pxPortInitialiseStack>
 8006f64:	4602      	mov	r2, r0
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f76:	bf00      	nop
 8006f78:	3720      	adds	r7, #32
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20001270 	.word	0x20001270
 8006f84:	200012d8 	.word	0x200012d8
 8006f88:	20001340 	.word	0x20001340

08006f8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f94:	f000 fd02 	bl	800799c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f98:	4b2a      	ldr	r3, [pc, #168]	@ (8007044 <prvAddNewTaskToReadyList+0xb8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	4a29      	ldr	r2, [pc, #164]	@ (8007044 <prvAddNewTaskToReadyList+0xb8>)
 8006fa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006fa2:	4b29      	ldr	r3, [pc, #164]	@ (8007048 <prvAddNewTaskToReadyList+0xbc>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d109      	bne.n	8006fbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006faa:	4a27      	ldr	r2, [pc, #156]	@ (8007048 <prvAddNewTaskToReadyList+0xbc>)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fb0:	4b24      	ldr	r3, [pc, #144]	@ (8007044 <prvAddNewTaskToReadyList+0xb8>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d110      	bne.n	8006fda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006fb8:	f000 fad2 	bl	8007560 <prvInitialiseTaskLists>
 8006fbc:	e00d      	b.n	8006fda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006fbe:	4b23      	ldr	r3, [pc, #140]	@ (800704c <prvAddNewTaskToReadyList+0xc0>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d109      	bne.n	8006fda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006fc6:	4b20      	ldr	r3, [pc, #128]	@ (8007048 <prvAddNewTaskToReadyList+0xbc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d802      	bhi.n	8006fda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8007048 <prvAddNewTaskToReadyList+0xbc>)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006fda:	4b1d      	ldr	r3, [pc, #116]	@ (8007050 <prvAddNewTaskToReadyList+0xc4>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8007050 <prvAddNewTaskToReadyList+0xc4>)
 8006fe2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe8:	2201      	movs	r2, #1
 8006fea:	409a      	lsls	r2, r3
 8006fec:	4b19      	ldr	r3, [pc, #100]	@ (8007054 <prvAddNewTaskToReadyList+0xc8>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	4a18      	ldr	r2, [pc, #96]	@ (8007054 <prvAddNewTaskToReadyList+0xc8>)
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4a15      	ldr	r2, [pc, #84]	@ (8007058 <prvAddNewTaskToReadyList+0xcc>)
 8007004:	441a      	add	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	3304      	adds	r3, #4
 800700a:	4619      	mov	r1, r3
 800700c:	4610      	mov	r0, r2
 800700e:	f7ff fdf4 	bl	8006bfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007012:	f000 fcf3 	bl	80079fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007016:	4b0d      	ldr	r3, [pc, #52]	@ (800704c <prvAddNewTaskToReadyList+0xc0>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00e      	beq.n	800703c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800701e:	4b0a      	ldr	r3, [pc, #40]	@ (8007048 <prvAddNewTaskToReadyList+0xbc>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007028:	429a      	cmp	r2, r3
 800702a:	d207      	bcs.n	800703c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800702c:	4b0b      	ldr	r3, [pc, #44]	@ (800705c <prvAddNewTaskToReadyList+0xd0>)
 800702e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800703c:	bf00      	nop
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	200005fc 	.word	0x200005fc
 8007048:	200004fc 	.word	0x200004fc
 800704c:	20000608 	.word	0x20000608
 8007050:	20000618 	.word	0x20000618
 8007054:	20000604 	.word	0x20000604
 8007058:	20000500 	.word	0x20000500
 800705c:	e000ed04 	.word	0xe000ed04

08007060 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d018      	beq.n	80070a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007072:	4b14      	ldr	r3, [pc, #80]	@ (80070c4 <vTaskDelay+0x64>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00b      	beq.n	8007092 <vTaskDelay+0x32>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	60bb      	str	r3, [r7, #8]
}
 800708c:	bf00      	nop
 800708e:	bf00      	nop
 8007090:	e7fd      	b.n	800708e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007092:	f000 f885 	bl	80071a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007096:	2100      	movs	r1, #0
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fb25 	bl	80076e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800709e:	f000 f88d 	bl	80071bc <xTaskResumeAll>
 80070a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d107      	bne.n	80070ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80070aa:	4b07      	ldr	r3, [pc, #28]	@ (80070c8 <vTaskDelay+0x68>)
 80070ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070ba:	bf00      	nop
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	20000624 	.word	0x20000624
 80070c8:	e000ed04 	.word	0xe000ed04

080070cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08a      	sub	sp, #40	@ 0x28
 80070d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070da:	463a      	mov	r2, r7
 80070dc:	1d39      	adds	r1, r7, #4
 80070de:	f107 0308 	add.w	r3, r7, #8
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fa f862 	bl	80011ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	9202      	str	r2, [sp, #8]
 80070f0:	9301      	str	r3, [sp, #4]
 80070f2:	2300      	movs	r3, #0
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	2300      	movs	r3, #0
 80070f8:	460a      	mov	r2, r1
 80070fa:	4921      	ldr	r1, [pc, #132]	@ (8007180 <vTaskStartScheduler+0xb4>)
 80070fc:	4821      	ldr	r0, [pc, #132]	@ (8007184 <vTaskStartScheduler+0xb8>)
 80070fe:	f7ff fe00 	bl	8006d02 <xTaskCreateStatic>
 8007102:	4603      	mov	r3, r0
 8007104:	4a20      	ldr	r2, [pc, #128]	@ (8007188 <vTaskStartScheduler+0xbc>)
 8007106:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007108:	4b1f      	ldr	r3, [pc, #124]	@ (8007188 <vTaskStartScheduler+0xbc>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007110:	2301      	movs	r3, #1
 8007112:	617b      	str	r3, [r7, #20]
 8007114:	e001      	b.n	800711a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007116:	2300      	movs	r3, #0
 8007118:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d11b      	bne.n	8007158 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	613b      	str	r3, [r7, #16]
}
 8007132:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007134:	4b15      	ldr	r3, [pc, #84]	@ (800718c <vTaskStartScheduler+0xc0>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	334c      	adds	r3, #76	@ 0x4c
 800713a:	4a15      	ldr	r2, [pc, #84]	@ (8007190 <vTaskStartScheduler+0xc4>)
 800713c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800713e:	4b15      	ldr	r3, [pc, #84]	@ (8007194 <vTaskStartScheduler+0xc8>)
 8007140:	f04f 32ff 	mov.w	r2, #4294967295
 8007144:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007146:	4b14      	ldr	r3, [pc, #80]	@ (8007198 <vTaskStartScheduler+0xcc>)
 8007148:	2201      	movs	r2, #1
 800714a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800714c:	4b13      	ldr	r3, [pc, #76]	@ (800719c <vTaskStartScheduler+0xd0>)
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007152:	f000 fbb1 	bl	80078b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007156:	e00f      	b.n	8007178 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715e:	d10b      	bne.n	8007178 <vTaskStartScheduler+0xac>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	60fb      	str	r3, [r7, #12]
}
 8007172:	bf00      	nop
 8007174:	bf00      	nop
 8007176:	e7fd      	b.n	8007174 <vTaskStartScheduler+0xa8>
}
 8007178:	bf00      	nop
 800717a:	3718      	adds	r7, #24
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	08009528 	.word	0x08009528
 8007184:	08007531 	.word	0x08007531
 8007188:	20000620 	.word	0x20000620
 800718c:	200004fc 	.word	0x200004fc
 8007190:	2000001c 	.word	0x2000001c
 8007194:	2000061c 	.word	0x2000061c
 8007198:	20000608 	.word	0x20000608
 800719c:	20000600 	.word	0x20000600

080071a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071a0:	b480      	push	{r7}
 80071a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80071a4:	4b04      	ldr	r3, [pc, #16]	@ (80071b8 <vTaskSuspendAll+0x18>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3301      	adds	r3, #1
 80071aa:	4a03      	ldr	r2, [pc, #12]	@ (80071b8 <vTaskSuspendAll+0x18>)
 80071ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80071ae:	bf00      	nop
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bc80      	pop	{r7}
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	20000624 	.word	0x20000624

080071bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071ca:	4b42      	ldr	r3, [pc, #264]	@ (80072d4 <xTaskResumeAll+0x118>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10b      	bne.n	80071ea <xTaskResumeAll+0x2e>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	603b      	str	r3, [r7, #0]
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop
 80071e8:	e7fd      	b.n	80071e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071ea:	f000 fbd7 	bl	800799c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071ee:	4b39      	ldr	r3, [pc, #228]	@ (80072d4 <xTaskResumeAll+0x118>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	4a37      	ldr	r2, [pc, #220]	@ (80072d4 <xTaskResumeAll+0x118>)
 80071f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071f8:	4b36      	ldr	r3, [pc, #216]	@ (80072d4 <xTaskResumeAll+0x118>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d161      	bne.n	80072c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007200:	4b35      	ldr	r3, [pc, #212]	@ (80072d8 <xTaskResumeAll+0x11c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d05d      	beq.n	80072c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007208:	e02e      	b.n	8007268 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800720a:	4b34      	ldr	r3, [pc, #208]	@ (80072dc <xTaskResumeAll+0x120>)
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3318      	adds	r3, #24
 8007216:	4618      	mov	r0, r3
 8007218:	f7ff fd4a 	bl	8006cb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3304      	adds	r3, #4
 8007220:	4618      	mov	r0, r3
 8007222:	f7ff fd45 	bl	8006cb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722a:	2201      	movs	r2, #1
 800722c:	409a      	lsls	r2, r3
 800722e:	4b2c      	ldr	r3, [pc, #176]	@ (80072e0 <xTaskResumeAll+0x124>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4313      	orrs	r3, r2
 8007234:	4a2a      	ldr	r2, [pc, #168]	@ (80072e0 <xTaskResumeAll+0x124>)
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4a27      	ldr	r2, [pc, #156]	@ (80072e4 <xTaskResumeAll+0x128>)
 8007246:	441a      	add	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3304      	adds	r3, #4
 800724c:	4619      	mov	r1, r3
 800724e:	4610      	mov	r0, r2
 8007250:	f7ff fcd3 	bl	8006bfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007258:	4b23      	ldr	r3, [pc, #140]	@ (80072e8 <xTaskResumeAll+0x12c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725e:	429a      	cmp	r2, r3
 8007260:	d302      	bcc.n	8007268 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007262:	4b22      	ldr	r3, [pc, #136]	@ (80072ec <xTaskResumeAll+0x130>)
 8007264:	2201      	movs	r2, #1
 8007266:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007268:	4b1c      	ldr	r3, [pc, #112]	@ (80072dc <xTaskResumeAll+0x120>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1cc      	bne.n	800720a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007276:	f000 fa17 	bl	80076a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800727a:	4b1d      	ldr	r3, [pc, #116]	@ (80072f0 <xTaskResumeAll+0x134>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d010      	beq.n	80072a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007286:	f000 f837 	bl	80072f8 <xTaskIncrementTick>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007290:	4b16      	ldr	r3, [pc, #88]	@ (80072ec <xTaskResumeAll+0x130>)
 8007292:	2201      	movs	r2, #1
 8007294:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3b01      	subs	r3, #1
 800729a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1f1      	bne.n	8007286 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80072a2:	4b13      	ldr	r3, [pc, #76]	@ (80072f0 <xTaskResumeAll+0x134>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072a8:	4b10      	ldr	r3, [pc, #64]	@ (80072ec <xTaskResumeAll+0x130>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d009      	beq.n	80072c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072b0:	2301      	movs	r3, #1
 80072b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072b4:	4b0f      	ldr	r3, [pc, #60]	@ (80072f4 <xTaskResumeAll+0x138>)
 80072b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072c4:	f000 fb9a 	bl	80079fc <vPortExitCritical>

	return xAlreadyYielded;
 80072c8:	68bb      	ldr	r3, [r7, #8]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000624 	.word	0x20000624
 80072d8:	200005fc 	.word	0x200005fc
 80072dc:	200005bc 	.word	0x200005bc
 80072e0:	20000604 	.word	0x20000604
 80072e4:	20000500 	.word	0x20000500
 80072e8:	200004fc 	.word	0x200004fc
 80072ec:	20000610 	.word	0x20000610
 80072f0:	2000060c 	.word	0x2000060c
 80072f4:	e000ed04 	.word	0xe000ed04

080072f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007302:	4b4f      	ldr	r3, [pc, #316]	@ (8007440 <xTaskIncrementTick+0x148>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f040 808f 	bne.w	800742a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800730c:	4b4d      	ldr	r3, [pc, #308]	@ (8007444 <xTaskIncrementTick+0x14c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3301      	adds	r3, #1
 8007312:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007314:	4a4b      	ldr	r2, [pc, #300]	@ (8007444 <xTaskIncrementTick+0x14c>)
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d121      	bne.n	8007364 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007320:	4b49      	ldr	r3, [pc, #292]	@ (8007448 <xTaskIncrementTick+0x150>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00b      	beq.n	8007342 <xTaskIncrementTick+0x4a>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	603b      	str	r3, [r7, #0]
}
 800733c:	bf00      	nop
 800733e:	bf00      	nop
 8007340:	e7fd      	b.n	800733e <xTaskIncrementTick+0x46>
 8007342:	4b41      	ldr	r3, [pc, #260]	@ (8007448 <xTaskIncrementTick+0x150>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	4b40      	ldr	r3, [pc, #256]	@ (800744c <xTaskIncrementTick+0x154>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a3e      	ldr	r2, [pc, #248]	@ (8007448 <xTaskIncrementTick+0x150>)
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	4a3e      	ldr	r2, [pc, #248]	@ (800744c <xTaskIncrementTick+0x154>)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	4b3e      	ldr	r3, [pc, #248]	@ (8007450 <xTaskIncrementTick+0x158>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3301      	adds	r3, #1
 800735c:	4a3c      	ldr	r2, [pc, #240]	@ (8007450 <xTaskIncrementTick+0x158>)
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	f000 f9a2 	bl	80076a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007364:	4b3b      	ldr	r3, [pc, #236]	@ (8007454 <xTaskIncrementTick+0x15c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	429a      	cmp	r2, r3
 800736c:	d348      	bcc.n	8007400 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800736e:	4b36      	ldr	r3, [pc, #216]	@ (8007448 <xTaskIncrementTick+0x150>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007378:	4b36      	ldr	r3, [pc, #216]	@ (8007454 <xTaskIncrementTick+0x15c>)
 800737a:	f04f 32ff 	mov.w	r2, #4294967295
 800737e:	601a      	str	r2, [r3, #0]
					break;
 8007380:	e03e      	b.n	8007400 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007382:	4b31      	ldr	r3, [pc, #196]	@ (8007448 <xTaskIncrementTick+0x150>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	429a      	cmp	r2, r3
 8007398:	d203      	bcs.n	80073a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800739a:	4a2e      	ldr	r2, [pc, #184]	@ (8007454 <xTaskIncrementTick+0x15c>)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073a0:	e02e      	b.n	8007400 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	3304      	adds	r3, #4
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7ff fc82 	bl	8006cb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d004      	beq.n	80073be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	3318      	adds	r3, #24
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff fc79 	bl	8006cb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c2:	2201      	movs	r2, #1
 80073c4:	409a      	lsls	r2, r3
 80073c6:	4b24      	ldr	r3, [pc, #144]	@ (8007458 <xTaskIncrementTick+0x160>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	4a22      	ldr	r2, [pc, #136]	@ (8007458 <xTaskIncrementTick+0x160>)
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4a1f      	ldr	r2, [pc, #124]	@ (800745c <xTaskIncrementTick+0x164>)
 80073de:	441a      	add	r2, r3
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	3304      	adds	r3, #4
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f7ff fc07 	bl	8006bfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007460 <xTaskIncrementTick+0x168>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d3b9      	bcc.n	800736e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80073fa:	2301      	movs	r3, #1
 80073fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073fe:	e7b6      	b.n	800736e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007400:	4b17      	ldr	r3, [pc, #92]	@ (8007460 <xTaskIncrementTick+0x168>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007406:	4915      	ldr	r1, [pc, #84]	@ (800745c <xTaskIncrementTick+0x164>)
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	440b      	add	r3, r1
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d901      	bls.n	800741c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007418:	2301      	movs	r3, #1
 800741a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800741c:	4b11      	ldr	r3, [pc, #68]	@ (8007464 <xTaskIncrementTick+0x16c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d007      	beq.n	8007434 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007424:	2301      	movs	r3, #1
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	e004      	b.n	8007434 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800742a:	4b0f      	ldr	r3, [pc, #60]	@ (8007468 <xTaskIncrementTick+0x170>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3301      	adds	r3, #1
 8007430:	4a0d      	ldr	r2, [pc, #52]	@ (8007468 <xTaskIncrementTick+0x170>)
 8007432:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007434:	697b      	ldr	r3, [r7, #20]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000624 	.word	0x20000624
 8007444:	20000600 	.word	0x20000600
 8007448:	200005b4 	.word	0x200005b4
 800744c:	200005b8 	.word	0x200005b8
 8007450:	20000614 	.word	0x20000614
 8007454:	2000061c 	.word	0x2000061c
 8007458:	20000604 	.word	0x20000604
 800745c:	20000500 	.word	0x20000500
 8007460:	200004fc 	.word	0x200004fc
 8007464:	20000610 	.word	0x20000610
 8007468:	2000060c 	.word	0x2000060c

0800746c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007472:	4b29      	ldr	r3, [pc, #164]	@ (8007518 <vTaskSwitchContext+0xac>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800747a:	4b28      	ldr	r3, [pc, #160]	@ (800751c <vTaskSwitchContext+0xb0>)
 800747c:	2201      	movs	r2, #1
 800747e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007480:	e045      	b.n	800750e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007482:	4b26      	ldr	r3, [pc, #152]	@ (800751c <vTaskSwitchContext+0xb0>)
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007488:	4b25      	ldr	r3, [pc, #148]	@ (8007520 <vTaskSwitchContext+0xb4>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	fab3 f383 	clz	r3, r3
 8007494:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007496:	7afb      	ldrb	r3, [r7, #11]
 8007498:	f1c3 031f 	rsb	r3, r3, #31
 800749c:	617b      	str	r3, [r7, #20]
 800749e:	4921      	ldr	r1, [pc, #132]	@ (8007524 <vTaskSwitchContext+0xb8>)
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	440b      	add	r3, r1
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10b      	bne.n	80074ca <vTaskSwitchContext+0x5e>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	607b      	str	r3, [r7, #4]
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop
 80074c8:	e7fd      	b.n	80074c6 <vTaskSwitchContext+0x5a>
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4a13      	ldr	r2, [pc, #76]	@ (8007524 <vTaskSwitchContext+0xb8>)
 80074d6:	4413      	add	r3, r2
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	605a      	str	r2, [r3, #4]
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	3308      	adds	r3, #8
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d104      	bne.n	80074fa <vTaskSwitchContext+0x8e>
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	605a      	str	r2, [r3, #4]
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	4a09      	ldr	r2, [pc, #36]	@ (8007528 <vTaskSwitchContext+0xbc>)
 8007502:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007504:	4b08      	ldr	r3, [pc, #32]	@ (8007528 <vTaskSwitchContext+0xbc>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	334c      	adds	r3, #76	@ 0x4c
 800750a:	4a08      	ldr	r2, [pc, #32]	@ (800752c <vTaskSwitchContext+0xc0>)
 800750c:	6013      	str	r3, [r2, #0]
}
 800750e:	bf00      	nop
 8007510:	371c      	adds	r7, #28
 8007512:	46bd      	mov	sp, r7
 8007514:	bc80      	pop	{r7}
 8007516:	4770      	bx	lr
 8007518:	20000624 	.word	0x20000624
 800751c:	20000610 	.word	0x20000610
 8007520:	20000604 	.word	0x20000604
 8007524:	20000500 	.word	0x20000500
 8007528:	200004fc 	.word	0x200004fc
 800752c:	2000001c 	.word	0x2000001c

08007530 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007538:	f000 f852 	bl	80075e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800753c:	4b06      	ldr	r3, [pc, #24]	@ (8007558 <prvIdleTask+0x28>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d9f9      	bls.n	8007538 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007544:	4b05      	ldr	r3, [pc, #20]	@ (800755c <prvIdleTask+0x2c>)
 8007546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007554:	e7f0      	b.n	8007538 <prvIdleTask+0x8>
 8007556:	bf00      	nop
 8007558:	20000500 	.word	0x20000500
 800755c:	e000ed04 	.word	0xe000ed04

08007560 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007566:	2300      	movs	r3, #0
 8007568:	607b      	str	r3, [r7, #4]
 800756a:	e00c      	b.n	8007586 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	4613      	mov	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4a12      	ldr	r2, [pc, #72]	@ (80075c0 <prvInitialiseTaskLists+0x60>)
 8007578:	4413      	add	r3, r2
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff fb12 	bl	8006ba4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3301      	adds	r3, #1
 8007584:	607b      	str	r3, [r7, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b06      	cmp	r3, #6
 800758a:	d9ef      	bls.n	800756c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800758c:	480d      	ldr	r0, [pc, #52]	@ (80075c4 <prvInitialiseTaskLists+0x64>)
 800758e:	f7ff fb09 	bl	8006ba4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007592:	480d      	ldr	r0, [pc, #52]	@ (80075c8 <prvInitialiseTaskLists+0x68>)
 8007594:	f7ff fb06 	bl	8006ba4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007598:	480c      	ldr	r0, [pc, #48]	@ (80075cc <prvInitialiseTaskLists+0x6c>)
 800759a:	f7ff fb03 	bl	8006ba4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800759e:	480c      	ldr	r0, [pc, #48]	@ (80075d0 <prvInitialiseTaskLists+0x70>)
 80075a0:	f7ff fb00 	bl	8006ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075a4:	480b      	ldr	r0, [pc, #44]	@ (80075d4 <prvInitialiseTaskLists+0x74>)
 80075a6:	f7ff fafd 	bl	8006ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075aa:	4b0b      	ldr	r3, [pc, #44]	@ (80075d8 <prvInitialiseTaskLists+0x78>)
 80075ac:	4a05      	ldr	r2, [pc, #20]	@ (80075c4 <prvInitialiseTaskLists+0x64>)
 80075ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075b0:	4b0a      	ldr	r3, [pc, #40]	@ (80075dc <prvInitialiseTaskLists+0x7c>)
 80075b2:	4a05      	ldr	r2, [pc, #20]	@ (80075c8 <prvInitialiseTaskLists+0x68>)
 80075b4:	601a      	str	r2, [r3, #0]
}
 80075b6:	bf00      	nop
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	20000500 	.word	0x20000500
 80075c4:	2000058c 	.word	0x2000058c
 80075c8:	200005a0 	.word	0x200005a0
 80075cc:	200005bc 	.word	0x200005bc
 80075d0:	200005d0 	.word	0x200005d0
 80075d4:	200005e8 	.word	0x200005e8
 80075d8:	200005b4 	.word	0x200005b4
 80075dc:	200005b8 	.word	0x200005b8

080075e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075e6:	e019      	b.n	800761c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075e8:	f000 f9d8 	bl	800799c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ec:	4b10      	ldr	r3, [pc, #64]	@ (8007630 <prvCheckTasksWaitingTermination+0x50>)
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3304      	adds	r3, #4
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff fb59 	bl	8006cb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007634 <prvCheckTasksWaitingTermination+0x54>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3b01      	subs	r3, #1
 8007604:	4a0b      	ldr	r2, [pc, #44]	@ (8007634 <prvCheckTasksWaitingTermination+0x54>)
 8007606:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007608:	4b0b      	ldr	r3, [pc, #44]	@ (8007638 <prvCheckTasksWaitingTermination+0x58>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3b01      	subs	r3, #1
 800760e:	4a0a      	ldr	r2, [pc, #40]	@ (8007638 <prvCheckTasksWaitingTermination+0x58>)
 8007610:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007612:	f000 f9f3 	bl	80079fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f810 	bl	800763c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800761c:	4b06      	ldr	r3, [pc, #24]	@ (8007638 <prvCheckTasksWaitingTermination+0x58>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e1      	bne.n	80075e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop
 8007628:	3708      	adds	r7, #8
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	200005d0 	.word	0x200005d0
 8007634:	200005fc 	.word	0x200005fc
 8007638:	200005e4 	.word	0x200005e4

0800763c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	334c      	adds	r3, #76	@ 0x4c
 8007648:	4618      	mov	r0, r3
 800764a:	f000 ff05 	bl	8008458 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007654:	2b00      	cmp	r3, #0
 8007656:	d108      	bne.n	800766a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800765c:	4618      	mov	r0, r3
 800765e:	f000 fb2d 	bl	8007cbc <vPortFree>
				vPortFree( pxTCB );
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fb2a 	bl	8007cbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007668:	e019      	b.n	800769e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007670:	2b01      	cmp	r3, #1
 8007672:	d103      	bne.n	800767c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fb21 	bl	8007cbc <vPortFree>
	}
 800767a:	e010      	b.n	800769e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007682:	2b02      	cmp	r3, #2
 8007684:	d00b      	beq.n	800769e <prvDeleteTCB+0x62>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	60fb      	str	r3, [r7, #12]
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	e7fd      	b.n	800769a <prvDeleteTCB+0x5e>
	}
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ae:	4b0c      	ldr	r3, [pc, #48]	@ (80076e0 <prvResetNextTaskUnblockTime+0x38>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076b8:	4b0a      	ldr	r3, [pc, #40]	@ (80076e4 <prvResetNextTaskUnblockTime+0x3c>)
 80076ba:	f04f 32ff 	mov.w	r2, #4294967295
 80076be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076c0:	e008      	b.n	80076d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076c2:	4b07      	ldr	r3, [pc, #28]	@ (80076e0 <prvResetNextTaskUnblockTime+0x38>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	4a04      	ldr	r2, [pc, #16]	@ (80076e4 <prvResetNextTaskUnblockTime+0x3c>)
 80076d2:	6013      	str	r3, [r2, #0]
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	bc80      	pop	{r7}
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	200005b4 	.word	0x200005b4
 80076e4:	2000061c 	.word	0x2000061c

080076e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076f2:	4b29      	ldr	r3, [pc, #164]	@ (8007798 <prvAddCurrentTaskToDelayedList+0xb0>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076f8:	4b28      	ldr	r3, [pc, #160]	@ (800779c <prvAddCurrentTaskToDelayedList+0xb4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4618      	mov	r0, r3
 8007700:	f7ff fad6 	bl	8006cb0 <uxListRemove>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10b      	bne.n	8007722 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800770a:	4b24      	ldr	r3, [pc, #144]	@ (800779c <prvAddCurrentTaskToDelayedList+0xb4>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007710:	2201      	movs	r2, #1
 8007712:	fa02 f303 	lsl.w	r3, r2, r3
 8007716:	43da      	mvns	r2, r3
 8007718:	4b21      	ldr	r3, [pc, #132]	@ (80077a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4013      	ands	r3, r2
 800771e:	4a20      	ldr	r2, [pc, #128]	@ (80077a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007720:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007728:	d10a      	bne.n	8007740 <prvAddCurrentTaskToDelayedList+0x58>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d007      	beq.n	8007740 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007730:	4b1a      	ldr	r3, [pc, #104]	@ (800779c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3304      	adds	r3, #4
 8007736:	4619      	mov	r1, r3
 8007738:	481a      	ldr	r0, [pc, #104]	@ (80077a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800773a:	f7ff fa5e 	bl	8006bfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800773e:	e026      	b.n	800778e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4413      	add	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007748:	4b14      	ldr	r3, [pc, #80]	@ (800779c <prvAddCurrentTaskToDelayedList+0xb4>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	429a      	cmp	r2, r3
 8007756:	d209      	bcs.n	800776c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007758:	4b13      	ldr	r3, [pc, #76]	@ (80077a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	4b0f      	ldr	r3, [pc, #60]	@ (800779c <prvAddCurrentTaskToDelayedList+0xb4>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3304      	adds	r3, #4
 8007762:	4619      	mov	r1, r3
 8007764:	4610      	mov	r0, r2
 8007766:	f7ff fa6b 	bl	8006c40 <vListInsert>
}
 800776a:	e010      	b.n	800778e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800776c:	4b0f      	ldr	r3, [pc, #60]	@ (80077ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	4b0a      	ldr	r3, [pc, #40]	@ (800779c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3304      	adds	r3, #4
 8007776:	4619      	mov	r1, r3
 8007778:	4610      	mov	r0, r2
 800777a:	f7ff fa61 	bl	8006c40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800777e:	4b0c      	ldr	r3, [pc, #48]	@ (80077b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	429a      	cmp	r2, r3
 8007786:	d202      	bcs.n	800778e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007788:	4a09      	ldr	r2, [pc, #36]	@ (80077b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	6013      	str	r3, [r2, #0]
}
 800778e:	bf00      	nop
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20000600 	.word	0x20000600
 800779c:	200004fc 	.word	0x200004fc
 80077a0:	20000604 	.word	0x20000604
 80077a4:	200005e8 	.word	0x200005e8
 80077a8:	200005b8 	.word	0x200005b8
 80077ac:	200005b4 	.word	0x200005b4
 80077b0:	2000061c 	.word	0x2000061c

080077b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3b04      	subs	r3, #4
 80077c4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80077cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3b04      	subs	r3, #4
 80077d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f023 0201 	bic.w	r2, r3, #1
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3b04      	subs	r3, #4
 80077e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077e4:	4a08      	ldr	r2, [pc, #32]	@ (8007808 <pxPortInitialiseStack+0x54>)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3b14      	subs	r3, #20
 80077ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3b20      	subs	r3, #32
 80077fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077fc:	68fb      	ldr	r3, [r7, #12]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	bc80      	pop	{r7}
 8007806:	4770      	bx	lr
 8007808:	0800780d 	.word	0x0800780d

0800780c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007812:	2300      	movs	r3, #0
 8007814:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007816:	4b12      	ldr	r3, [pc, #72]	@ (8007860 <prvTaskExitError+0x54>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781e:	d00b      	beq.n	8007838 <prvTaskExitError+0x2c>
	__asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	60fb      	str	r3, [r7, #12]
}
 8007832:	bf00      	nop
 8007834:	bf00      	nop
 8007836:	e7fd      	b.n	8007834 <prvTaskExitError+0x28>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	60bb      	str	r3, [r7, #8]
}
 800784a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800784c:	bf00      	nop
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0fc      	beq.n	800784e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	bc80      	pop	{r7}
 800785e:	4770      	bx	lr
 8007860:	20000014 	.word	0x20000014
	...

08007870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007870:	4b07      	ldr	r3, [pc, #28]	@ (8007890 <pxCurrentTCBConst2>)
 8007872:	6819      	ldr	r1, [r3, #0]
 8007874:	6808      	ldr	r0, [r1, #0]
 8007876:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800787a:	f380 8809 	msr	PSP, r0
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f04f 0000 	mov.w	r0, #0
 8007886:	f380 8811 	msr	BASEPRI, r0
 800788a:	f04e 0e0d 	orr.w	lr, lr, #13
 800788e:	4770      	bx	lr

08007890 <pxCurrentTCBConst2>:
 8007890:	200004fc 	.word	0x200004fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop

08007898 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007898:	4806      	ldr	r0, [pc, #24]	@ (80078b4 <prvPortStartFirstTask+0x1c>)
 800789a:	6800      	ldr	r0, [r0, #0]
 800789c:	6800      	ldr	r0, [r0, #0]
 800789e:	f380 8808 	msr	MSP, r0
 80078a2:	b662      	cpsie	i
 80078a4:	b661      	cpsie	f
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	df00      	svc	0
 80078b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078b2:	bf00      	nop
 80078b4:	e000ed08 	.word	0xe000ed08

080078b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078be:	4b32      	ldr	r3, [pc, #200]	@ (8007988 <xPortStartScheduler+0xd0>)
 80078c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	22ff      	movs	r2, #255	@ 0xff
 80078ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	4b2a      	ldr	r3, [pc, #168]	@ (800798c <xPortStartScheduler+0xd4>)
 80078e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007990 <xPortStartScheduler+0xd8>)
 80078e8:	2207      	movs	r2, #7
 80078ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078ec:	e009      	b.n	8007902 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80078ee:	4b28      	ldr	r3, [pc, #160]	@ (8007990 <xPortStartScheduler+0xd8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	4a26      	ldr	r2, [pc, #152]	@ (8007990 <xPortStartScheduler+0xd8>)
 80078f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007902:	78fb      	ldrb	r3, [r7, #3]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800790a:	2b80      	cmp	r3, #128	@ 0x80
 800790c:	d0ef      	beq.n	80078ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800790e:	4b20      	ldr	r3, [pc, #128]	@ (8007990 <xPortStartScheduler+0xd8>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f1c3 0307 	rsb	r3, r3, #7
 8007916:	2b04      	cmp	r3, #4
 8007918:	d00b      	beq.n	8007932 <xPortStartScheduler+0x7a>
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	60bb      	str	r3, [r7, #8]
}
 800792c:	bf00      	nop
 800792e:	bf00      	nop
 8007930:	e7fd      	b.n	800792e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007932:	4b17      	ldr	r3, [pc, #92]	@ (8007990 <xPortStartScheduler+0xd8>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	021b      	lsls	r3, r3, #8
 8007938:	4a15      	ldr	r2, [pc, #84]	@ (8007990 <xPortStartScheduler+0xd8>)
 800793a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800793c:	4b14      	ldr	r3, [pc, #80]	@ (8007990 <xPortStartScheduler+0xd8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007944:	4a12      	ldr	r2, [pc, #72]	@ (8007990 <xPortStartScheduler+0xd8>)
 8007946:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	b2da      	uxtb	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007950:	4b10      	ldr	r3, [pc, #64]	@ (8007994 <xPortStartScheduler+0xdc>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a0f      	ldr	r2, [pc, #60]	@ (8007994 <xPortStartScheduler+0xdc>)
 8007956:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800795a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800795c:	4b0d      	ldr	r3, [pc, #52]	@ (8007994 <xPortStartScheduler+0xdc>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a0c      	ldr	r2, [pc, #48]	@ (8007994 <xPortStartScheduler+0xdc>)
 8007962:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007966:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007968:	f000 f8b8 	bl	8007adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800796c:	4b0a      	ldr	r3, [pc, #40]	@ (8007998 <xPortStartScheduler+0xe0>)
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007972:	f7ff ff91 	bl	8007898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007976:	f7ff fd79 	bl	800746c <vTaskSwitchContext>
	prvTaskExitError();
 800797a:	f7ff ff47 	bl	800780c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	e000e400 	.word	0xe000e400
 800798c:	20000628 	.word	0x20000628
 8007990:	2000062c 	.word	0x2000062c
 8007994:	e000ed20 	.word	0xe000ed20
 8007998:	20000014 	.word	0x20000014

0800799c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	607b      	str	r3, [r7, #4]
}
 80079b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079b6:	4b0f      	ldr	r3, [pc, #60]	@ (80079f4 <vPortEnterCritical+0x58>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3301      	adds	r3, #1
 80079bc:	4a0d      	ldr	r2, [pc, #52]	@ (80079f4 <vPortEnterCritical+0x58>)
 80079be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079c0:	4b0c      	ldr	r3, [pc, #48]	@ (80079f4 <vPortEnterCritical+0x58>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d110      	bne.n	80079ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079c8:	4b0b      	ldr	r3, [pc, #44]	@ (80079f8 <vPortEnterCritical+0x5c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00b      	beq.n	80079ea <vPortEnterCritical+0x4e>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	603b      	str	r3, [r7, #0]
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop
 80079e8:	e7fd      	b.n	80079e6 <vPortEnterCritical+0x4a>
	}
}
 80079ea:	bf00      	nop
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bc80      	pop	{r7}
 80079f2:	4770      	bx	lr
 80079f4:	20000014 	.word	0x20000014
 80079f8:	e000ed04 	.word	0xe000ed04

080079fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a02:	4b12      	ldr	r3, [pc, #72]	@ (8007a4c <vPortExitCritical+0x50>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10b      	bne.n	8007a22 <vPortExitCritical+0x26>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	607b      	str	r3, [r7, #4]
}
 8007a1c:	bf00      	nop
 8007a1e:	bf00      	nop
 8007a20:	e7fd      	b.n	8007a1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a22:	4b0a      	ldr	r3, [pc, #40]	@ (8007a4c <vPortExitCritical+0x50>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	4a08      	ldr	r2, [pc, #32]	@ (8007a4c <vPortExitCritical+0x50>)
 8007a2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a2c:	4b07      	ldr	r3, [pc, #28]	@ (8007a4c <vPortExitCritical+0x50>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d105      	bne.n	8007a40 <vPortExitCritical+0x44>
 8007a34:	2300      	movs	r3, #0
 8007a36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bc80      	pop	{r7}
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	20000014 	.word	0x20000014

08007a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a50:	f3ef 8009 	mrs	r0, PSP
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	4b0d      	ldr	r3, [pc, #52]	@ (8007a90 <pxCurrentTCBConst>)
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a60:	6010      	str	r0, [r2, #0]
 8007a62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007a66:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a6a:	f380 8811 	msr	BASEPRI, r0
 8007a6e:	f7ff fcfd 	bl	800746c <vTaskSwitchContext>
 8007a72:	f04f 0000 	mov.w	r0, #0
 8007a76:	f380 8811 	msr	BASEPRI, r0
 8007a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a7e:	6819      	ldr	r1, [r3, #0]
 8007a80:	6808      	ldr	r0, [r1, #0]
 8007a82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a86:	f380 8809 	msr	PSP, r0
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	4770      	bx	lr

08007a90 <pxCurrentTCBConst>:
 8007a90:	200004fc 	.word	0x200004fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop

08007a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	607b      	str	r3, [r7, #4]
}
 8007ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ab2:	f7ff fc21 	bl	80072f8 <xTaskIncrementTick>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007abc:	4b06      	ldr	r3, [pc, #24]	@ (8007ad8 <SysTick_Handler+0x40>)
 8007abe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	f383 8811 	msr	BASEPRI, r3
}
 8007ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007adc:	b480      	push	{r7}
 8007ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8007b0c <vPortSetupTimerInterrupt+0x30>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8007b10 <vPortSetupTimerInterrupt+0x34>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007aec:	4b09      	ldr	r3, [pc, #36]	@ (8007b14 <vPortSetupTimerInterrupt+0x38>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a09      	ldr	r2, [pc, #36]	@ (8007b18 <vPortSetupTimerInterrupt+0x3c>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	099b      	lsrs	r3, r3, #6
 8007af8:	4a08      	ldr	r2, [pc, #32]	@ (8007b1c <vPortSetupTimerInterrupt+0x40>)
 8007afa:	3b01      	subs	r3, #1
 8007afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007afe:	4b03      	ldr	r3, [pc, #12]	@ (8007b0c <vPortSetupTimerInterrupt+0x30>)
 8007b00:	2207      	movs	r2, #7
 8007b02:	601a      	str	r2, [r3, #0]
}
 8007b04:	bf00      	nop
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bc80      	pop	{r7}
 8007b0a:	4770      	bx	lr
 8007b0c:	e000e010 	.word	0xe000e010
 8007b10:	e000e018 	.word	0xe000e018
 8007b14:	20000008 	.word	0x20000008
 8007b18:	10624dd3 	.word	0x10624dd3
 8007b1c:	e000e014 	.word	0xe000e014

08007b20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08a      	sub	sp, #40	@ 0x28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b2c:	f7ff fb38 	bl	80071a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b30:	4b5c      	ldr	r3, [pc, #368]	@ (8007ca4 <pvPortMalloc+0x184>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b38:	f000 f924 	bl	8007d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b3c:	4b5a      	ldr	r3, [pc, #360]	@ (8007ca8 <pvPortMalloc+0x188>)
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4013      	ands	r3, r2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f040 8095 	bne.w	8007c74 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d01e      	beq.n	8007b8e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b50:	2208      	movs	r2, #8
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4413      	add	r3, r2
 8007b56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f003 0307 	and.w	r3, r3, #7
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d015      	beq.n	8007b8e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f023 0307 	bic.w	r3, r3, #7
 8007b68:	3308      	adds	r3, #8
 8007b6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00b      	beq.n	8007b8e <pvPortMalloc+0x6e>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	617b      	str	r3, [r7, #20]
}
 8007b88:	bf00      	nop
 8007b8a:	bf00      	nop
 8007b8c:	e7fd      	b.n	8007b8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d06f      	beq.n	8007c74 <pvPortMalloc+0x154>
 8007b94:	4b45      	ldr	r3, [pc, #276]	@ (8007cac <pvPortMalloc+0x18c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d86a      	bhi.n	8007c74 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b9e:	4b44      	ldr	r3, [pc, #272]	@ (8007cb0 <pvPortMalloc+0x190>)
 8007ba0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ba2:	4b43      	ldr	r3, [pc, #268]	@ (8007cb0 <pvPortMalloc+0x190>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ba8:	e004      	b.n	8007bb4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d903      	bls.n	8007bc6 <pvPortMalloc+0xa6>
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1f1      	bne.n	8007baa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bc6:	4b37      	ldr	r3, [pc, #220]	@ (8007ca4 <pvPortMalloc+0x184>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d051      	beq.n	8007c74 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2208      	movs	r2, #8
 8007bd6:	4413      	add	r3, r2
 8007bd8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	1ad2      	subs	r2, r2, r3
 8007bea:	2308      	movs	r3, #8
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d920      	bls.n	8007c34 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	f003 0307 	and.w	r3, r3, #7
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00b      	beq.n	8007c1c <pvPortMalloc+0xfc>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	613b      	str	r3, [r7, #16]
}
 8007c16:	bf00      	nop
 8007c18:	bf00      	nop
 8007c1a:	e7fd      	b.n	8007c18 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	1ad2      	subs	r2, r2, r3
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c2e:	69b8      	ldr	r0, [r7, #24]
 8007c30:	f000 f90a 	bl	8007e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c34:	4b1d      	ldr	r3, [pc, #116]	@ (8007cac <pvPortMalloc+0x18c>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8007cac <pvPortMalloc+0x18c>)
 8007c40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c42:	4b1a      	ldr	r3, [pc, #104]	@ (8007cac <pvPortMalloc+0x18c>)
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb4 <pvPortMalloc+0x194>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d203      	bcs.n	8007c56 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c4e:	4b17      	ldr	r3, [pc, #92]	@ (8007cac <pvPortMalloc+0x18c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a18      	ldr	r2, [pc, #96]	@ (8007cb4 <pvPortMalloc+0x194>)
 8007c54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	4b13      	ldr	r3, [pc, #76]	@ (8007ca8 <pvPortMalloc+0x188>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	2200      	movs	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007c6a:	4b13      	ldr	r3, [pc, #76]	@ (8007cb8 <pvPortMalloc+0x198>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	4a11      	ldr	r2, [pc, #68]	@ (8007cb8 <pvPortMalloc+0x198>)
 8007c72:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c74:	f7ff faa2 	bl	80071bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	f003 0307 	and.w	r3, r3, #7
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00b      	beq.n	8007c9a <pvPortMalloc+0x17a>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	60fb      	str	r3, [r7, #12]
}
 8007c94:	bf00      	nop
 8007c96:	bf00      	nop
 8007c98:	e7fd      	b.n	8007c96 <pvPortMalloc+0x176>
	return pvReturn;
 8007c9a:	69fb      	ldr	r3, [r7, #28]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3728      	adds	r7, #40	@ 0x28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20001238 	.word	0x20001238
 8007ca8:	2000124c 	.word	0x2000124c
 8007cac:	2000123c 	.word	0x2000123c
 8007cb0:	20001230 	.word	0x20001230
 8007cb4:	20001240 	.word	0x20001240
 8007cb8:	20001244 	.word	0x20001244

08007cbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d04f      	beq.n	8007d6e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cce:	2308      	movs	r3, #8
 8007cd0:	425b      	negs	r3, r3
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	4b25      	ldr	r3, [pc, #148]	@ (8007d78 <vPortFree+0xbc>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10b      	bne.n	8007d02 <vPortFree+0x46>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cee:	f383 8811 	msr	BASEPRI, r3
 8007cf2:	f3bf 8f6f 	isb	sy
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	60fb      	str	r3, [r7, #12]
}
 8007cfc:	bf00      	nop
 8007cfe:	bf00      	nop
 8007d00:	e7fd      	b.n	8007cfe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00b      	beq.n	8007d22 <vPortFree+0x66>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	60bb      	str	r3, [r7, #8]
}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	e7fd      	b.n	8007d1e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	4b14      	ldr	r3, [pc, #80]	@ (8007d78 <vPortFree+0xbc>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01e      	beq.n	8007d6e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d11a      	bne.n	8007d6e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8007d78 <vPortFree+0xbc>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	43db      	mvns	r3, r3
 8007d42:	401a      	ands	r2, r3
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d48:	f7ff fa2a 	bl	80071a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	4b0a      	ldr	r3, [pc, #40]	@ (8007d7c <vPortFree+0xc0>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4413      	add	r3, r2
 8007d56:	4a09      	ldr	r2, [pc, #36]	@ (8007d7c <vPortFree+0xc0>)
 8007d58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d5a:	6938      	ldr	r0, [r7, #16]
 8007d5c:	f000 f874 	bl	8007e48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007d60:	4b07      	ldr	r3, [pc, #28]	@ (8007d80 <vPortFree+0xc4>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3301      	adds	r3, #1
 8007d66:	4a06      	ldr	r2, [pc, #24]	@ (8007d80 <vPortFree+0xc4>)
 8007d68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007d6a:	f7ff fa27 	bl	80071bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d6e:	bf00      	nop
 8007d70:	3718      	adds	r7, #24
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	2000124c 	.word	0x2000124c
 8007d7c:	2000123c 	.word	0x2000123c
 8007d80:	20001248 	.word	0x20001248

08007d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d90:	4b27      	ldr	r3, [pc, #156]	@ (8007e30 <prvHeapInit+0xac>)
 8007d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00c      	beq.n	8007db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3307      	adds	r3, #7
 8007da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0307 	bic.w	r3, r3, #7
 8007daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	4a1f      	ldr	r2, [pc, #124]	@ (8007e30 <prvHeapInit+0xac>)
 8007db4:	4413      	add	r3, r2
 8007db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8007e34 <prvHeapInit+0xb0>)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e34 <prvHeapInit+0xb0>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	4413      	add	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007dd0:	2208      	movs	r2, #8
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0307 	bic.w	r3, r3, #7
 8007dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4a15      	ldr	r2, [pc, #84]	@ (8007e38 <prvHeapInit+0xb4>)
 8007de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007de6:	4b14      	ldr	r3, [pc, #80]	@ (8007e38 <prvHeapInit+0xb4>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2200      	movs	r2, #0
 8007dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dee:	4b12      	ldr	r3, [pc, #72]	@ (8007e38 <prvHeapInit+0xb4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e04:	4b0c      	ldr	r3, [pc, #48]	@ (8007e38 <prvHeapInit+0xb4>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	4a0a      	ldr	r2, [pc, #40]	@ (8007e3c <prvHeapInit+0xb8>)
 8007e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	4a09      	ldr	r2, [pc, #36]	@ (8007e40 <prvHeapInit+0xbc>)
 8007e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e1c:	4b09      	ldr	r3, [pc, #36]	@ (8007e44 <prvHeapInit+0xc0>)
 8007e1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e22:	601a      	str	r2, [r3, #0]
}
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bc80      	pop	{r7}
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	20000630 	.word	0x20000630
 8007e34:	20001230 	.word	0x20001230
 8007e38:	20001238 	.word	0x20001238
 8007e3c:	20001240 	.word	0x20001240
 8007e40:	2000123c 	.word	0x2000123c
 8007e44:	2000124c 	.word	0x2000124c

08007e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e50:	4b27      	ldr	r3, [pc, #156]	@ (8007ef0 <prvInsertBlockIntoFreeList+0xa8>)
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e002      	b.n	8007e5c <prvInsertBlockIntoFreeList+0x14>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d8f7      	bhi.n	8007e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	4413      	add	r3, r2
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d108      	bne.n	8007e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	441a      	add	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	441a      	add	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d118      	bne.n	8007ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4b14      	ldr	r3, [pc, #80]	@ (8007ef4 <prvInsertBlockIntoFreeList+0xac>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d00d      	beq.n	8007ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	441a      	add	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	e008      	b.n	8007ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef4 <prvInsertBlockIntoFreeList+0xac>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	e003      	b.n	8007ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d002      	beq.n	8007ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ee6:	bf00      	nop
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bc80      	pop	{r7}
 8007eee:	4770      	bx	lr
 8007ef0:	20001230 	.word	0x20001230
 8007ef4:	20001238 	.word	0x20001238

08007ef8 <TMC2209_setdefault>:
static float vel_now = 0.0;
static uint8_t rotation_dir;
static uint32_t stepCounter = 0;

void TMC2209_setdefault()
{
 8007ef8:	b480      	push	{r7}
 8007efa:	af00      	add	r7, sp, #0
	gconfConfig.I_scale_analog = TRUE;
 8007efc:	4a08      	ldr	r2, [pc, #32]	@ (8007f20 <TMC2209_setdefault+0x28>)
 8007efe:	7813      	ldrb	r3, [r2, #0]
 8007f00:	f043 0301 	orr.w	r3, r3, #1
 8007f04:	7013      	strb	r3, [r2, #0]
	gconfConfig.multistep_filt = TRUE;
 8007f06:	4a06      	ldr	r2, [pc, #24]	@ (8007f20 <TMC2209_setdefault+0x28>)
 8007f08:	7853      	ldrb	r3, [r2, #1]
 8007f0a:	f043 0301 	orr.w	r3, r3, #1
 8007f0e:	7053      	strb	r3, [r2, #1]
	chopConfig.bytes = CHOPPER_CONFIG_DEFAULT;
 8007f10:	4a04      	ldr	r2, [pc, #16]	@ (8007f24 <TMC2209_setdefault+0x2c>)
 8007f12:	4b05      	ldr	r3, [pc, #20]	@ (8007f28 <TMC2209_setdefault+0x30>)
 8007f14:	601a      	str	r2, [r3, #0]
}
 8007f16:	bf00      	nop
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bc80      	pop	{r7}
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	20001254 	.word	0x20001254
 8007f24:	10000053 	.word	0x10000053
 8007f28:	20001250 	.word	0x20001250

08007f2c <TMC2209_setup>:

void TMC2209_setup()
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
	TMC2209_setdefault();
 8007f30:	f7ff ffe2 	bl	8007ef8 <TMC2209_setdefault>
	gconfConfig.bytes = FALSE;
 8007f34:	4b17      	ldr	r3, [pc, #92]	@ (8007f94 <TMC2209_setup+0x68>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]
	gconfConfig.I_scale_analog = TRUE;
 8007f3a:	4a16      	ldr	r2, [pc, #88]	@ (8007f94 <TMC2209_setup+0x68>)
 8007f3c:	7813      	ldrb	r3, [r2, #0]
 8007f3e:	f043 0301 	orr.w	r3, r3, #1
 8007f42:	7013      	strb	r3, [r2, #0]
	gconfConfig.pdn_disable = TRUE;
 8007f44:	4a13      	ldr	r2, [pc, #76]	@ (8007f94 <TMC2209_setup+0x68>)
 8007f46:	7813      	ldrb	r3, [r2, #0]
 8007f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f4c:	7013      	strb	r3, [r2, #0]
	gconfConfig.multistep_filt = TRUE;
 8007f4e:	4a11      	ldr	r2, [pc, #68]	@ (8007f94 <TMC2209_setup+0x68>)
 8007f50:	7853      	ldrb	r3, [r2, #1]
 8007f52:	f043 0301 	orr.w	r3, r3, #1
 8007f56:	7053      	strb	r3, [r2, #1]
	gconfConfig.mstep_reg_select = TRUE;
 8007f58:	4a0e      	ldr	r2, [pc, #56]	@ (8007f94 <TMC2209_setup+0x68>)
 8007f5a:	7813      	ldrb	r3, [r2, #0]
 8007f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f60:	7013      	strb	r3, [r2, #0]

	slaveConfig.conf = 0x00;
 8007f62:	4a0d      	ldr	r2, [pc, #52]	@ (8007f98 <TMC2209_setup+0x6c>)
 8007f64:	7853      	ldrb	r3, [r2, #1]
 8007f66:	f36f 0303 	bfc	r3, #0, #4
 8007f6a:	7053      	strb	r3, [r2, #1]

	TMC2209_HAL_Write(TMC2209Reg_GCONF, gconfConfig.bytes);
 8007f6c:	4b09      	ldr	r3, [pc, #36]	@ (8007f94 <TMC2209_setup+0x68>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4619      	mov	r1, r3
 8007f72:	2000      	movs	r0, #0
 8007f74:	f000 fa1e 	bl	80083b4 <TMC2209_HAL_Write>
	TMC2209_HAL_Write(TMC2209Reg_SLAVECONF, slaveConfig.bytes);
 8007f78:	4b07      	ldr	r3, [pc, #28]	@ (8007f98 <TMC2209_setup+0x6c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	2003      	movs	r0, #3
 8007f80:	f000 fa18 	bl	80083b4 <TMC2209_HAL_Write>
//	TMC2209_setMicrostep(TMC2209_Microsteps_1);
	TMC2209_disable();
 8007f84:	f000 f832 	bl	8007fec <TMC2209_disable>
	HAL_Delay(100);
 8007f88:	2064      	movs	r0, #100	@ 0x64
 8007f8a:	f7f9 fe39 	bl	8001c00 <HAL_Delay>
}
 8007f8e:	bf00      	nop
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20001254 	.word	0x20001254
 8007f98:	20001258 	.word	0x20001258

08007f9c <TMC2209_enable>:

void TMC2209_enable()
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
	if(Driver_Enable == FALSE){
 8007fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8007fdc <TMC2209_enable+0x40>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d117      	bne.n	8007fd8 <TMC2209_enable+0x3c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2104      	movs	r1, #4
 8007fac:	480c      	ldr	r0, [pc, #48]	@ (8007fe0 <TMC2209_enable+0x44>)
 8007fae:	f7fa fad1 	bl	8002554 <HAL_GPIO_WritePin>
		Driver_Enable = TRUE;
 8007fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007fdc <TMC2209_enable+0x40>)
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	701a      	strb	r2, [r3, #0]
		chopConfig.toff = toff_;
 8007fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8007fe4 <TMC2209_enable+0x48>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	f003 030f 	and.w	r3, r3, #15
 8007fc0:	b2d9      	uxtb	r1, r3
 8007fc2:	4a09      	ldr	r2, [pc, #36]	@ (8007fe8 <TMC2209_enable+0x4c>)
 8007fc4:	7813      	ldrb	r3, [r2, #0]
 8007fc6:	f361 0303 	bfi	r3, r1, #0, #4
 8007fca:	7013      	strb	r3, [r2, #0]
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 8007fcc:	4b06      	ldr	r3, [pc, #24]	@ (8007fe8 <TMC2209_enable+0x4c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	206c      	movs	r0, #108	@ 0x6c
 8007fd4:	f000 f9ee 	bl	80083b4 <TMC2209_HAL_Write>
	}
}
 8007fd8:	bf00      	nop
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	2000125c 	.word	0x2000125c
 8007fe0:	40010800 	.word	0x40010800
 8007fe4:	20000018 	.word	0x20000018
 8007fe8:	20001250 	.word	0x20001250

08007fec <TMC2209_disable>:

void TMC2209_disable()
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0
	if(Driver_Enable == TRUE){
 8007ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8008024 <TMC2209_disable+0x38>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d112      	bne.n	800801e <TMC2209_disable+0x32>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	2104      	movs	r1, #4
 8007ffc:	480a      	ldr	r0, [pc, #40]	@ (8008028 <TMC2209_disable+0x3c>)
 8007ffe:	f7fa faa9 	bl	8002554 <HAL_GPIO_WritePin>
		Driver_Enable = FALSE;
 8008002:	4b08      	ldr	r3, [pc, #32]	@ (8008024 <TMC2209_disable+0x38>)
 8008004:	2200      	movs	r2, #0
 8008006:	701a      	strb	r2, [r3, #0]
		chopConfig.toff = TOFF_DISABLE;
 8008008:	4a08      	ldr	r2, [pc, #32]	@ (800802c <TMC2209_disable+0x40>)
 800800a:	7813      	ldrb	r3, [r2, #0]
 800800c:	f36f 0303 	bfc	r3, #0, #4
 8008010:	7013      	strb	r3, [r2, #0]
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 8008012:	4b06      	ldr	r3, [pc, #24]	@ (800802c <TMC2209_disable+0x40>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4619      	mov	r1, r3
 8008018:	206c      	movs	r0, #108	@ 0x6c
 800801a:	f000 f9cb 	bl	80083b4 <TMC2209_HAL_Write>
	}
}
 800801e:	bf00      	nop
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	2000125c 	.word	0x2000125c
 8008028:	40010800 	.word	0x40010800
 800802c:	20001250 	.word	0x20001250

08008030 <TMC2209_setMicrostep>:

void TMC2209_setMicrostep(TMC2209_Microstep Microstep)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	4603      	mov	r3, r0
 8008038:	71fb      	strb	r3, [r7, #7]
	chopConfig.mres = Microstep;
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	f003 030f 	and.w	r3, r3, #15
 8008040:	b2d9      	uxtb	r1, r3
 8008042:	4a14      	ldr	r2, [pc, #80]	@ (8008094 <TMC2209_setMicrostep+0x64>)
 8008044:	78d3      	ldrb	r3, [r2, #3]
 8008046:	f361 0303 	bfi	r3, r1, #0, #4
 800804a:	70d3      	strb	r3, [r2, #3]
	TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 800804c:	4b11      	ldr	r3, [pc, #68]	@ (8008094 <TMC2209_setMicrostep+0x64>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4619      	mov	r1, r3
 8008052:	206c      	movs	r0, #108	@ 0x6c
 8008054:	f000 f9ae 	bl	80083b4 <TMC2209_HAL_Write>
	active_microstep = pow(2, abs(Microstep - TMC2209_Microsteps_1));
 8008058:	79fb      	ldrb	r3, [r7, #7]
 800805a:	3b08      	subs	r3, #8
 800805c:	2b00      	cmp	r3, #0
 800805e:	bfb8      	it	lt
 8008060:	425b      	neglt	r3, r3
 8008062:	4618      	mov	r0, r3
 8008064:	f7f8 f9c6 	bl	80003f4 <__aeabi_i2d>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	f04f 0000 	mov.w	r0, #0
 8008070:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008074:	f000 faba 	bl	80085ec <pow>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	4610      	mov	r0, r2
 800807e:	4619      	mov	r1, r3
 8008080:	f7f8 fcd2 	bl	8000a28 <__aeabi_d2uiz>
 8008084:	4603      	mov	r3, r0
 8008086:	b2da      	uxtb	r2, r3
 8008088:	4b03      	ldr	r3, [pc, #12]	@ (8008098 <TMC2209_setMicrostep+0x68>)
 800808a:	701a      	strb	r2, [r3, #0]
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	20001250 	.word	0x20001250
 8008098:	2000125d 	.word	0x2000125d

0800809c <TMC2209_velocity>:
	TMC2209_HAL_Read(TMC2209Reg_CHOPCONF, &buffer);
	*result = buffer;
}

void TMC2209_velocity(float velocity)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
	float frequency = 0.0f;
 80080a4:	f04f 0300 	mov.w	r3, #0
 80080a8:	613b      	str	r3, [r7, #16]
	uint16_t desired_period = 0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	81fb      	strh	r3, [r7, #14]
	uint16_t prescaller = TMC2209_DEFAULT_PRESCALLER;
 80080ae:	2348      	movs	r3, #72	@ 0x48
 80080b0:	82fb      	strh	r3, [r7, #22]

	if(vel_now == velocity) return;
 80080b2:	4b3d      	ldr	r3, [pc, #244]	@ (80081a8 <TMC2209_velocity+0x10c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7f8 ff77 	bl	8000fac <__aeabi_fcmpeq>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d16c      	bne.n	800819e <TMC2209_velocity+0x102>
	if(velocity <= 0) {
 80080c4:	f04f 0100 	mov.w	r1, #0
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7f8 ff83 	bl	8000fd4 <__aeabi_fcmple>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d100      	bne.n	80080d6 <TMC2209_velocity+0x3a>
 80080d4:	e007      	b.n	80080e6 <TMC2209_velocity+0x4a>
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80080d6:	2100      	movs	r1, #0
 80080d8:	4834      	ldr	r0, [pc, #208]	@ (80081ac <TMC2209_velocity+0x110>)
 80080da:	f7fd f8ff 	bl	80052dc <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 80080de:	4b34      	ldr	r3, [pc, #208]	@ (80081b0 <TMC2209_velocity+0x114>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	701a      	strb	r2, [r3, #0]
		return;
 80080e4:	e05c      	b.n	80081a0 <TMC2209_velocity+0x104>
	}

	while(TRUE){
		frequency  = (velocity * (STEP_PER_REV * active_microstep)) / 60;
 80080e6:	4b33      	ldr	r3, [pc, #204]	@ (80081b4 <TMC2209_velocity+0x118>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	23c8      	movs	r3, #200	@ 0xc8
 80080ee:	fb02 f303 	mul.w	r3, r2, r3
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7f8 fd72 	bl	8000bdc <__aeabi_i2f>
 80080f8:	4603      	mov	r3, r0
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7f8 fdc1 	bl	8000c84 <__aeabi_fmul>
 8008102:	4603      	mov	r3, r0
 8008104:	492c      	ldr	r1, [pc, #176]	@ (80081b8 <TMC2209_velocity+0x11c>)
 8008106:	4618      	mov	r0, r3
 8008108:	f7f8 fe70 	bl	8000dec <__aeabi_fdiv>
 800810c:	4603      	mov	r3, r0
 800810e:	613b      	str	r3, [r7, #16]
		if(((TMC2209_BASE_FREQ / prescaller) / frequency) > MAX_CNT_PERIOD){
 8008110:	8afb      	ldrh	r3, [r7, #22]
 8008112:	4a2a      	ldr	r2, [pc, #168]	@ (80081bc <TMC2209_velocity+0x120>)
 8008114:	fb92 f3f3 	sdiv	r3, r2, r3
 8008118:	4618      	mov	r0, r3
 800811a:	f7f8 fd5f 	bl	8000bdc <__aeabi_i2f>
 800811e:	4603      	mov	r3, r0
 8008120:	6939      	ldr	r1, [r7, #16]
 8008122:	4618      	mov	r0, r3
 8008124:	f7f8 fe62 	bl	8000dec <__aeabi_fdiv>
 8008128:	4603      	mov	r3, r0
 800812a:	4925      	ldr	r1, [pc, #148]	@ (80081c0 <TMC2209_velocity+0x124>)
 800812c:	4618      	mov	r0, r3
 800812e:	f7f8 ff65 	bl	8000ffc <__aeabi_fcmpgt>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <TMC2209_velocity+0xa4>
			prescaller += TMC2209_DEFAULT_PRESCALLER;
 8008138:	8afb      	ldrh	r3, [r7, #22]
 800813a:	3348      	adds	r3, #72	@ 0x48
 800813c:	82fb      	strh	r3, [r7, #22]
			continue;
 800813e:	e02d      	b.n	800819c <TMC2209_velocity+0x100>
		}
		desired_period = (uint16_t)round((TMC2209_BASE_FREQ / prescaller) / frequency);
 8008140:	8afb      	ldrh	r3, [r7, #22]
 8008142:	4a1e      	ldr	r2, [pc, #120]	@ (80081bc <TMC2209_velocity+0x120>)
 8008144:	fb92 f3f3 	sdiv	r3, r2, r3
 8008148:	4618      	mov	r0, r3
 800814a:	f7f8 fd47 	bl	8000bdc <__aeabi_i2f>
 800814e:	4603      	mov	r3, r0
 8008150:	6939      	ldr	r1, [r7, #16]
 8008152:	4618      	mov	r0, r3
 8008154:	f7f8 fe4a 	bl	8000dec <__aeabi_fdiv>
 8008158:	4603      	mov	r3, r0
 800815a:	4618      	mov	r0, r3
 800815c:	f7f8 f95c 	bl	8000418 <__aeabi_f2d>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4610      	mov	r0, r2
 8008166:	4619      	mov	r1, r3
 8008168:	f000 faae 	bl	80086c8 <round>
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	4610      	mov	r0, r2
 8008172:	4619      	mov	r1, r3
 8008174:	f7f8 fc58 	bl	8000a28 <__aeabi_d2uiz>
 8008178:	4603      	mov	r3, r0
 800817a:	81fb      	strh	r3, [r7, #14]
		break;
 800817c:	bf00      	nop
	}

	__HAL_TIM_SET_PRESCALER(&htim2, prescaller);
 800817e:	4b0b      	ldr	r3, [pc, #44]	@ (80081ac <TMC2209_velocity+0x110>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	8afa      	ldrh	r2, [r7, #22]
 8008184:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim2, desired_period);
 8008186:	4b09      	ldr	r3, [pc, #36]	@ (80081ac <TMC2209_velocity+0x110>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	89fa      	ldrh	r2, [r7, #14]
 800818c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800818e:	89fb      	ldrh	r3, [r7, #14]
 8008190:	4a06      	ldr	r2, [pc, #24]	@ (80081ac <TMC2209_velocity+0x110>)
 8008192:	60d3      	str	r3, [r2, #12]
	vel_now = velocity;
 8008194:	4a04      	ldr	r2, [pc, #16]	@ (80081a8 <TMC2209_velocity+0x10c>)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	e001      	b.n	80081a0 <TMC2209_velocity+0x104>
		frequency  = (velocity * (STEP_PER_REV * active_microstep)) / 60;
 800819c:	e7a3      	b.n	80080e6 <TMC2209_velocity+0x4a>
	if(vel_now == velocity) return;
 800819e:	bf00      	nop
}
 80081a0:	3718      	adds	r7, #24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20001260 	.word	0x20001260
 80081ac:	200003e4 	.word	0x200003e4
 80081b0:	20000019 	.word	0x20000019
 80081b4:	2000125d 	.word	0x2000125d
 80081b8:	42700000 	.word	0x42700000
 80081bc:	044aa200 	.word	0x044aa200
 80081c0:	477fff00 	.word	0x477fff00

080081c4 <TMC2209_move>:

void TMC2209_move(){
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
	if(PWM_Pulse_Complete == TRUE){
 80081c8:	4b06      	ldr	r3, [pc, #24]	@ (80081e4 <TMC2209_move+0x20>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d106      	bne.n	80081de <TMC2209_move+0x1a>
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80081d0:	2100      	movs	r1, #0
 80081d2:	4805      	ldr	r0, [pc, #20]	@ (80081e8 <TMC2209_move+0x24>)
 80081d4:	f7fc ff92 	bl	80050fc <HAL_TIM_PWM_Start_IT>
		PWM_Pulse_Complete = FALSE;
 80081d8:	4b02      	ldr	r3, [pc, #8]	@ (80081e4 <TMC2209_move+0x20>)
 80081da:	2200      	movs	r2, #0
 80081dc:	701a      	strb	r2, [r3, #0]
	}
}
 80081de:	bf00      	nop
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20000019 	.word	0x20000019
 80081e8:	200003e4 	.word	0x200003e4

080081ec <TMC2209_stop>:

void TMC2209_stop(){
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
	if(PWM_Pulse_Complete == FALSE){
 80081f0:	4b06      	ldr	r3, [pc, #24]	@ (800820c <TMC2209_stop+0x20>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d106      	bne.n	8008206 <TMC2209_stop+0x1a>
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80081f8:	2100      	movs	r1, #0
 80081fa:	4805      	ldr	r0, [pc, #20]	@ (8008210 <TMC2209_stop+0x24>)
 80081fc:	f7fd f86e 	bl	80052dc <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 8008200:	4b02      	ldr	r3, [pc, #8]	@ (800820c <TMC2209_stop+0x20>)
 8008202:	2201      	movs	r2, #1
 8008204:	701a      	strb	r2, [r3, #0]
	}
}
 8008206:	bf00      	nop
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20000019 	.word	0x20000019
 8008210:	200003e4 	.word	0x200003e4

08008214 <TMC2209_direction>:

void TMC2209_direction(uint8_t direction){
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	4603      	mov	r3, r0
 800821c:	71fb      	strb	r3, [r7, #7]
	if(direction == rotation_dir) return;
 800821e:	4b10      	ldr	r3, [pc, #64]	@ (8008260 <TMC2209_direction+0x4c>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	79fa      	ldrb	r2, [r7, #7]
 8008224:	429a      	cmp	r2, r3
 8008226:	d016      	beq.n	8008256 <TMC2209_direction+0x42>

	if(direction == TMC2209_ROT_FWD){
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d107      	bne.n	800823e <TMC2209_direction+0x2a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800822e:	2200      	movs	r2, #0
 8008230:	2102      	movs	r1, #2
 8008232:	480c      	ldr	r0, [pc, #48]	@ (8008264 <TMC2209_direction+0x50>)
 8008234:	f7fa f98e 	bl	8002554 <HAL_GPIO_WritePin>
		rotation_dir = TMC2209_ROT_FWD;
 8008238:	4b09      	ldr	r3, [pc, #36]	@ (8008260 <TMC2209_direction+0x4c>)
 800823a:	2200      	movs	r2, #0
 800823c:	701a      	strb	r2, [r3, #0]
	}
	if(direction == TMC2209_ROT_REV){
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d109      	bne.n	8008258 <TMC2209_direction+0x44>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8008244:	2201      	movs	r2, #1
 8008246:	2102      	movs	r1, #2
 8008248:	4806      	ldr	r0, [pc, #24]	@ (8008264 <TMC2209_direction+0x50>)
 800824a:	f7fa f983 	bl	8002554 <HAL_GPIO_WritePin>
		rotation_dir = TMC2209_ROT_REV;
 800824e:	4b04      	ldr	r3, [pc, #16]	@ (8008260 <TMC2209_direction+0x4c>)
 8008250:	2201      	movs	r2, #1
 8008252:	701a      	strb	r2, [r3, #0]
 8008254:	e000      	b.n	8008258 <TMC2209_direction+0x44>
	if(direction == rotation_dir) return;
 8008256:	bf00      	nop
	}
}
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20001264 	.word	0x20001264
 8008264:	40010800 	.word	0x40010800

08008268 <TMC2209_watchPosition>:

void TMC2209_watchPosition(int32_t* target, int32_t* counter){
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
	if(*counter > *target){
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	dd02      	ble.n	8008284 <TMC2209_watchPosition+0x1c>
		TMC2209_direction(TMC2209_ROT_FWD);
 800827e:	2000      	movs	r0, #0
 8008280:	f7ff ffc8 	bl	8008214 <TMC2209_direction>
	}
	if(*counter < *target){
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	429a      	cmp	r2, r3
 800828e:	da02      	bge.n	8008296 <TMC2209_watchPosition+0x2e>
		TMC2209_direction(TMC2209_ROT_REV);
 8008290:	2001      	movs	r0, #1
 8008292:	f7ff ffbf 	bl	8008214 <TMC2209_direction>
	}

	if(*counter == *target){
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d101      	bne.n	80082a6 <TMC2209_watchPosition+0x3e>
		TMC2209_stop();
 80082a2:	f7ff ffa3 	bl	80081ec <TMC2209_stop>
	}
}
 80082a6:	bf00      	nop
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <HAL_TIM_PWM_PulseFinishedCallback>:
		}
	}
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082c0:	d104      	bne.n	80082cc <HAL_TIM_PWM_PulseFinishedCallback+0x1c>
		stepCounter ++;
 80082c2:	4b05      	ldr	r3, [pc, #20]	@ (80082d8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3301      	adds	r3, #1
 80082c8:	4a03      	ldr	r2, [pc, #12]	@ (80082d8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80082ca:	6013      	str	r3, [r2, #0]
	}
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bc80      	pop	{r7}
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	20001268 	.word	0x20001268

080082dc <calculateCRC>:
#include "../Inc/TMC2209_HAL.h"

extern UART_HandleTypeDef huart1;

static void calculateCRC(uint8_t* datagram, uint8_t datagram_len)
{
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
	int i,j;
	uint8_t *crc = datagram + (datagram_len - 1);
 80082e8:	78fb      	ldrb	r3, [r7, #3]
 80082ea:	3b01      	subs	r3, #1
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	4413      	add	r3, r2
 80082f0:	60bb      	str	r3, [r7, #8]
	uint8_t currentByte;
	*crc = 0;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2200      	movs	r2, #0
 80082f6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (datagram_len - 1); i++) {
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	e02e      	b.n	800835c <calculateCRC+0x80>
		currentByte = datagram[i];
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	4413      	add	r3, r2
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < 8; j++) {
 8008308:	2300      	movs	r3, #0
 800830a:	613b      	str	r3, [r7, #16]
 800830c:	e020      	b.n	8008350 <calculateCRC+0x74>
			if ((*crc >> 7) ^ (currentByte & 0x01))
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	09db      	lsrs	r3, r3, #7
 8008314:	b2db      	uxtb	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	429a      	cmp	r2, r3
 8008320:	d00a      	beq.n	8008338 <calculateCRC+0x5c>
				*crc = (*crc << 1) ^ 0x07;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	b25b      	sxtb	r3, r3
 800832a:	f083 0307 	eor.w	r3, r3, #7
 800832e:	b25b      	sxtb	r3, r3
 8008330:	b2da      	uxtb	r2, r3
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	e005      	b.n	8008344 <calculateCRC+0x68>
			else
				*crc = (*crc << 1);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	b2da      	uxtb	r2, r3
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	701a      	strb	r2, [r3, #0]
			currentByte = currentByte >> 1;
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	085b      	lsrs	r3, r3, #1
 8008348:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < 8; j++) {
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	3301      	adds	r3, #1
 800834e:	613b      	str	r3, [r7, #16]
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	2b07      	cmp	r3, #7
 8008354:	dddb      	ble.n	800830e <calculateCRC+0x32>
	for (i = 0; i < (datagram_len - 1); i++) {
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	3301      	adds	r3, #1
 800835a:	617b      	str	r3, [r7, #20]
 800835c:	78fb      	ldrb	r3, [r7, #3]
 800835e:	3b01      	subs	r3, #1
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	429a      	cmp	r2, r3
 8008364:	dbcb      	blt.n	80082fe <calculateCRC+0x22>
		}
	}
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	371c      	adds	r7, #28
 800836c:	46bd      	mov	sp, r7
 800836e:	bc80      	pop	{r7}
 8008370:	4770      	bx	lr

08008372 <byteswap>:
static void byteswap (uint8_t data[4])
{
 8008372:	b480      	push	{r7}
 8008374:	b085      	sub	sp, #20
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
    uint8_t tmp;

    tmp = data[0];
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	73fb      	strb	r3, [r7, #15]
    data[0] = data[3];
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	78da      	ldrb	r2, [r3, #3]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	701a      	strb	r2, [r3, #0]
    data[3] = tmp;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3303      	adds	r3, #3
 800838c:	7bfa      	ldrb	r2, [r7, #15]
 800838e:	701a      	strb	r2, [r3, #0]
    tmp = data[1];
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	73fb      	strb	r3, [r7, #15]
    data[1] = data[2];
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3301      	adds	r3, #1
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	7892      	ldrb	r2, [r2, #2]
 800839e:	701a      	strb	r2, [r3, #0]
    data[2] = tmp;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3302      	adds	r3, #2
 80083a4:	7bfa      	ldrb	r2, [r7, #15]
 80083a6:	701a      	strb	r2, [r3, #0]
}
 80083a8:	bf00      	nop
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bc80      	pop	{r7}
 80083b0:	4770      	bx	lr
	...

080083b4 <TMC2209_HAL_Write>:

HAL_StatusTypeDef TMC2209_HAL_Write(uint8_t reg, uint32_t data)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	6039      	str	r1, [r7, #0]
 80083be:	71fb      	strb	r3, [r7, #7]
	TMC2209_Write_Datagram_t datagram;
	datagram.data = 0;
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	2300      	movs	r3, #0
 80083c6:	613b      	str	r3, [r7, #16]
	datagram.message.sync = 0x05;
 80083c8:	2305      	movs	r3, #5
 80083ca:	733b      	strb	r3, [r7, #12]
	datagram.message.slave = 0x00;
 80083cc:	2300      	movs	r3, #0
 80083ce:	737b      	strb	r3, [r7, #13]
	datagram.message.address.idx = reg;
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	f362 0306 	bfi	r3, r2, #0, #7
 80083de:	73bb      	strb	r3, [r7, #14]
	datagram.message.address.write = REG_WRITE;
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083e6:	73bb      	strb	r3, [r7, #14]
	datagram.message.payload.value = data;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	f8c7 300f 	str.w	r3, [r7, #15]
	byteswap(datagram.message.payload.data);
 80083ee:	f107 030c 	add.w	r3, r7, #12
 80083f2:	3303      	adds	r3, #3
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7ff ffbc 	bl	8008372 <byteswap>

	calculateCRC(datagram.bytes, sizeof(TMC2209_Write_Datagram_t));
 80083fa:	f107 030c 	add.w	r3, r7, #12
 80083fe:	2108      	movs	r1, #8
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff ff6b 	bl	80082dc <calculateCRC>
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8008406:	4809      	ldr	r0, [pc, #36]	@ (800842c <TMC2209_HAL_Write+0x78>)
 8008408:	f7fe f85f 	bl	80064ca <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, datagram.bytes, sizeof(TMC2209_Write_Datagram_t), HAL_MAX_DELAY);
 800840c:	f107 010c 	add.w	r1, r7, #12
 8008410:	f04f 33ff 	mov.w	r3, #4294967295
 8008414:	2208      	movs	r2, #8
 8008416:	4805      	ldr	r0, [pc, #20]	@ (800842c <TMC2209_HAL_Write+0x78>)
 8008418:	f7fd fcc2 	bl	8005da0 <HAL_UART_Transmit>
 800841c:	4603      	mov	r3, r0
 800841e:	75fb      	strb	r3, [r7, #23]

	return status;
 8008420:	7dfb      	ldrb	r3, [r7, #23]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	2000042c 	.word	0x2000042c

08008430 <__malloc_lock>:
 8008430:	4801      	ldr	r0, [pc, #4]	@ (8008438 <__malloc_lock+0x8>)
 8008432:	f000 b891 	b.w	8008558 <__retarget_lock_acquire_recursive>
 8008436:	bf00      	nop
 8008438:	200013a8 	.word	0x200013a8

0800843c <__malloc_unlock>:
 800843c:	4801      	ldr	r0, [pc, #4]	@ (8008444 <__malloc_unlock+0x8>)
 800843e:	f000 b88c 	b.w	800855a <__retarget_lock_release_recursive>
 8008442:	bf00      	nop
 8008444:	200013a8 	.word	0x200013a8

08008448 <memset>:
 8008448:	4603      	mov	r3, r0
 800844a:	4402      	add	r2, r0
 800844c:	4293      	cmp	r3, r2
 800844e:	d100      	bne.n	8008452 <memset+0xa>
 8008450:	4770      	bx	lr
 8008452:	f803 1b01 	strb.w	r1, [r3], #1
 8008456:	e7f9      	b.n	800844c <memset+0x4>

08008458 <_reclaim_reent>:
 8008458:	4b29      	ldr	r3, [pc, #164]	@ (8008500 <_reclaim_reent+0xa8>)
 800845a:	b570      	push	{r4, r5, r6, lr}
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4604      	mov	r4, r0
 8008460:	4283      	cmp	r3, r0
 8008462:	d04b      	beq.n	80084fc <_reclaim_reent+0xa4>
 8008464:	69c3      	ldr	r3, [r0, #28]
 8008466:	b1ab      	cbz	r3, 8008494 <_reclaim_reent+0x3c>
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	b16b      	cbz	r3, 8008488 <_reclaim_reent+0x30>
 800846c:	2500      	movs	r5, #0
 800846e:	69e3      	ldr	r3, [r4, #28]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	5959      	ldr	r1, [r3, r5]
 8008474:	2900      	cmp	r1, #0
 8008476:	d13b      	bne.n	80084f0 <_reclaim_reent+0x98>
 8008478:	3504      	adds	r5, #4
 800847a:	2d80      	cmp	r5, #128	@ 0x80
 800847c:	d1f7      	bne.n	800846e <_reclaim_reent+0x16>
 800847e:	69e3      	ldr	r3, [r4, #28]
 8008480:	4620      	mov	r0, r4
 8008482:	68d9      	ldr	r1, [r3, #12]
 8008484:	f000 f86a 	bl	800855c <_free_r>
 8008488:	69e3      	ldr	r3, [r4, #28]
 800848a:	6819      	ldr	r1, [r3, #0]
 800848c:	b111      	cbz	r1, 8008494 <_reclaim_reent+0x3c>
 800848e:	4620      	mov	r0, r4
 8008490:	f000 f864 	bl	800855c <_free_r>
 8008494:	6961      	ldr	r1, [r4, #20]
 8008496:	b111      	cbz	r1, 800849e <_reclaim_reent+0x46>
 8008498:	4620      	mov	r0, r4
 800849a:	f000 f85f 	bl	800855c <_free_r>
 800849e:	69e1      	ldr	r1, [r4, #28]
 80084a0:	b111      	cbz	r1, 80084a8 <_reclaim_reent+0x50>
 80084a2:	4620      	mov	r0, r4
 80084a4:	f000 f85a 	bl	800855c <_free_r>
 80084a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80084aa:	b111      	cbz	r1, 80084b2 <_reclaim_reent+0x5a>
 80084ac:	4620      	mov	r0, r4
 80084ae:	f000 f855 	bl	800855c <_free_r>
 80084b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084b4:	b111      	cbz	r1, 80084bc <_reclaim_reent+0x64>
 80084b6:	4620      	mov	r0, r4
 80084b8:	f000 f850 	bl	800855c <_free_r>
 80084bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80084be:	b111      	cbz	r1, 80084c6 <_reclaim_reent+0x6e>
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 f84b 	bl	800855c <_free_r>
 80084c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80084c8:	b111      	cbz	r1, 80084d0 <_reclaim_reent+0x78>
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 f846 	bl	800855c <_free_r>
 80084d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80084d2:	b111      	cbz	r1, 80084da <_reclaim_reent+0x82>
 80084d4:	4620      	mov	r0, r4
 80084d6:	f000 f841 	bl	800855c <_free_r>
 80084da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80084dc:	b111      	cbz	r1, 80084e4 <_reclaim_reent+0x8c>
 80084de:	4620      	mov	r0, r4
 80084e0:	f000 f83c 	bl	800855c <_free_r>
 80084e4:	6a23      	ldr	r3, [r4, #32]
 80084e6:	b14b      	cbz	r3, 80084fc <_reclaim_reent+0xa4>
 80084e8:	4620      	mov	r0, r4
 80084ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084ee:	4718      	bx	r3
 80084f0:	680e      	ldr	r6, [r1, #0]
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 f832 	bl	800855c <_free_r>
 80084f8:	4631      	mov	r1, r6
 80084fa:	e7bb      	b.n	8008474 <_reclaim_reent+0x1c>
 80084fc:	bd70      	pop	{r4, r5, r6, pc}
 80084fe:	bf00      	nop
 8008500:	2000001c 	.word	0x2000001c

08008504 <__errno>:
 8008504:	4b01      	ldr	r3, [pc, #4]	@ (800850c <__errno+0x8>)
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	2000001c 	.word	0x2000001c

08008510 <__libc_init_array>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	2600      	movs	r6, #0
 8008514:	4d0c      	ldr	r5, [pc, #48]	@ (8008548 <__libc_init_array+0x38>)
 8008516:	4c0d      	ldr	r4, [pc, #52]	@ (800854c <__libc_init_array+0x3c>)
 8008518:	1b64      	subs	r4, r4, r5
 800851a:	10a4      	asrs	r4, r4, #2
 800851c:	42a6      	cmp	r6, r4
 800851e:	d109      	bne.n	8008534 <__libc_init_array+0x24>
 8008520:	f000 ffba 	bl	8009498 <_init>
 8008524:	2600      	movs	r6, #0
 8008526:	4d0a      	ldr	r5, [pc, #40]	@ (8008550 <__libc_init_array+0x40>)
 8008528:	4c0a      	ldr	r4, [pc, #40]	@ (8008554 <__libc_init_array+0x44>)
 800852a:	1b64      	subs	r4, r4, r5
 800852c:	10a4      	asrs	r4, r4, #2
 800852e:	42a6      	cmp	r6, r4
 8008530:	d105      	bne.n	800853e <__libc_init_array+0x2e>
 8008532:	bd70      	pop	{r4, r5, r6, pc}
 8008534:	f855 3b04 	ldr.w	r3, [r5], #4
 8008538:	4798      	blx	r3
 800853a:	3601      	adds	r6, #1
 800853c:	e7ee      	b.n	800851c <__libc_init_array+0xc>
 800853e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008542:	4798      	blx	r3
 8008544:	3601      	adds	r6, #1
 8008546:	e7f2      	b.n	800852e <__libc_init_array+0x1e>
 8008548:	08009590 	.word	0x08009590
 800854c:	08009590 	.word	0x08009590
 8008550:	08009590 	.word	0x08009590
 8008554:	08009594 	.word	0x08009594

08008558 <__retarget_lock_acquire_recursive>:
 8008558:	4770      	bx	lr

0800855a <__retarget_lock_release_recursive>:
 800855a:	4770      	bx	lr

0800855c <_free_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4605      	mov	r5, r0
 8008560:	2900      	cmp	r1, #0
 8008562:	d040      	beq.n	80085e6 <_free_r+0x8a>
 8008564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008568:	1f0c      	subs	r4, r1, #4
 800856a:	2b00      	cmp	r3, #0
 800856c:	bfb8      	it	lt
 800856e:	18e4      	addlt	r4, r4, r3
 8008570:	f7ff ff5e 	bl	8008430 <__malloc_lock>
 8008574:	4a1c      	ldr	r2, [pc, #112]	@ (80085e8 <_free_r+0x8c>)
 8008576:	6813      	ldr	r3, [r2, #0]
 8008578:	b933      	cbnz	r3, 8008588 <_free_r+0x2c>
 800857a:	6063      	str	r3, [r4, #4]
 800857c:	6014      	str	r4, [r2, #0]
 800857e:	4628      	mov	r0, r5
 8008580:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008584:	f7ff bf5a 	b.w	800843c <__malloc_unlock>
 8008588:	42a3      	cmp	r3, r4
 800858a:	d908      	bls.n	800859e <_free_r+0x42>
 800858c:	6820      	ldr	r0, [r4, #0]
 800858e:	1821      	adds	r1, r4, r0
 8008590:	428b      	cmp	r3, r1
 8008592:	bf01      	itttt	eq
 8008594:	6819      	ldreq	r1, [r3, #0]
 8008596:	685b      	ldreq	r3, [r3, #4]
 8008598:	1809      	addeq	r1, r1, r0
 800859a:	6021      	streq	r1, [r4, #0]
 800859c:	e7ed      	b.n	800857a <_free_r+0x1e>
 800859e:	461a      	mov	r2, r3
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	b10b      	cbz	r3, 80085a8 <_free_r+0x4c>
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	d9fa      	bls.n	800859e <_free_r+0x42>
 80085a8:	6811      	ldr	r1, [r2, #0]
 80085aa:	1850      	adds	r0, r2, r1
 80085ac:	42a0      	cmp	r0, r4
 80085ae:	d10b      	bne.n	80085c8 <_free_r+0x6c>
 80085b0:	6820      	ldr	r0, [r4, #0]
 80085b2:	4401      	add	r1, r0
 80085b4:	1850      	adds	r0, r2, r1
 80085b6:	4283      	cmp	r3, r0
 80085b8:	6011      	str	r1, [r2, #0]
 80085ba:	d1e0      	bne.n	800857e <_free_r+0x22>
 80085bc:	6818      	ldr	r0, [r3, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	4408      	add	r0, r1
 80085c2:	6010      	str	r0, [r2, #0]
 80085c4:	6053      	str	r3, [r2, #4]
 80085c6:	e7da      	b.n	800857e <_free_r+0x22>
 80085c8:	d902      	bls.n	80085d0 <_free_r+0x74>
 80085ca:	230c      	movs	r3, #12
 80085cc:	602b      	str	r3, [r5, #0]
 80085ce:	e7d6      	b.n	800857e <_free_r+0x22>
 80085d0:	6820      	ldr	r0, [r4, #0]
 80085d2:	1821      	adds	r1, r4, r0
 80085d4:	428b      	cmp	r3, r1
 80085d6:	bf01      	itttt	eq
 80085d8:	6819      	ldreq	r1, [r3, #0]
 80085da:	685b      	ldreq	r3, [r3, #4]
 80085dc:	1809      	addeq	r1, r1, r0
 80085de:	6021      	streq	r1, [r4, #0]
 80085e0:	6063      	str	r3, [r4, #4]
 80085e2:	6054      	str	r4, [r2, #4]
 80085e4:	e7cb      	b.n	800857e <_free_r+0x22>
 80085e6:	bd38      	pop	{r3, r4, r5, pc}
 80085e8:	2000126c 	.word	0x2000126c

080085ec <pow>:
 80085ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f0:	4614      	mov	r4, r2
 80085f2:	461d      	mov	r5, r3
 80085f4:	4680      	mov	r8, r0
 80085f6:	4689      	mov	r9, r1
 80085f8:	f000 f8ae 	bl	8008758 <__ieee754_pow>
 80085fc:	4622      	mov	r2, r4
 80085fe:	4606      	mov	r6, r0
 8008600:	460f      	mov	r7, r1
 8008602:	462b      	mov	r3, r5
 8008604:	4620      	mov	r0, r4
 8008606:	4629      	mov	r1, r5
 8008608:	f7f8 f9f8 	bl	80009fc <__aeabi_dcmpun>
 800860c:	bbc8      	cbnz	r0, 8008682 <pow+0x96>
 800860e:	2200      	movs	r2, #0
 8008610:	2300      	movs	r3, #0
 8008612:	4640      	mov	r0, r8
 8008614:	4649      	mov	r1, r9
 8008616:	f7f8 f9bf 	bl	8000998 <__aeabi_dcmpeq>
 800861a:	b1b8      	cbz	r0, 800864c <pow+0x60>
 800861c:	2200      	movs	r2, #0
 800861e:	2300      	movs	r3, #0
 8008620:	4620      	mov	r0, r4
 8008622:	4629      	mov	r1, r5
 8008624:	f7f8 f9b8 	bl	8000998 <__aeabi_dcmpeq>
 8008628:	2800      	cmp	r0, #0
 800862a:	d141      	bne.n	80086b0 <pow+0xc4>
 800862c:	4620      	mov	r0, r4
 800862e:	4629      	mov	r1, r5
 8008630:	f000 f844 	bl	80086bc <finite>
 8008634:	b328      	cbz	r0, 8008682 <pow+0x96>
 8008636:	2200      	movs	r2, #0
 8008638:	2300      	movs	r3, #0
 800863a:	4620      	mov	r0, r4
 800863c:	4629      	mov	r1, r5
 800863e:	f7f8 f9b5 	bl	80009ac <__aeabi_dcmplt>
 8008642:	b1f0      	cbz	r0, 8008682 <pow+0x96>
 8008644:	f7ff ff5e 	bl	8008504 <__errno>
 8008648:	2322      	movs	r3, #34	@ 0x22
 800864a:	e019      	b.n	8008680 <pow+0x94>
 800864c:	4630      	mov	r0, r6
 800864e:	4639      	mov	r1, r7
 8008650:	f000 f834 	bl	80086bc <finite>
 8008654:	b9c8      	cbnz	r0, 800868a <pow+0x9e>
 8008656:	4640      	mov	r0, r8
 8008658:	4649      	mov	r1, r9
 800865a:	f000 f82f 	bl	80086bc <finite>
 800865e:	b1a0      	cbz	r0, 800868a <pow+0x9e>
 8008660:	4620      	mov	r0, r4
 8008662:	4629      	mov	r1, r5
 8008664:	f000 f82a 	bl	80086bc <finite>
 8008668:	b178      	cbz	r0, 800868a <pow+0x9e>
 800866a:	4632      	mov	r2, r6
 800866c:	463b      	mov	r3, r7
 800866e:	4630      	mov	r0, r6
 8008670:	4639      	mov	r1, r7
 8008672:	f7f8 f9c3 	bl	80009fc <__aeabi_dcmpun>
 8008676:	2800      	cmp	r0, #0
 8008678:	d0e4      	beq.n	8008644 <pow+0x58>
 800867a:	f7ff ff43 	bl	8008504 <__errno>
 800867e:	2321      	movs	r3, #33	@ 0x21
 8008680:	6003      	str	r3, [r0, #0]
 8008682:	4630      	mov	r0, r6
 8008684:	4639      	mov	r1, r7
 8008686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800868a:	2200      	movs	r2, #0
 800868c:	2300      	movs	r3, #0
 800868e:	4630      	mov	r0, r6
 8008690:	4639      	mov	r1, r7
 8008692:	f7f8 f981 	bl	8000998 <__aeabi_dcmpeq>
 8008696:	2800      	cmp	r0, #0
 8008698:	d0f3      	beq.n	8008682 <pow+0x96>
 800869a:	4640      	mov	r0, r8
 800869c:	4649      	mov	r1, r9
 800869e:	f000 f80d 	bl	80086bc <finite>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	d0ed      	beq.n	8008682 <pow+0x96>
 80086a6:	4620      	mov	r0, r4
 80086a8:	4629      	mov	r1, r5
 80086aa:	f000 f807 	bl	80086bc <finite>
 80086ae:	e7c8      	b.n	8008642 <pow+0x56>
 80086b0:	2600      	movs	r6, #0
 80086b2:	4f01      	ldr	r7, [pc, #4]	@ (80086b8 <pow+0xcc>)
 80086b4:	e7e5      	b.n	8008682 <pow+0x96>
 80086b6:	bf00      	nop
 80086b8:	3ff00000 	.word	0x3ff00000

080086bc <finite>:
 80086bc:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80086c0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80086c4:	0fc0      	lsrs	r0, r0, #31
 80086c6:	4770      	bx	lr

080086c8 <round>:
 80086c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ca:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80086ce:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 80086d2:	2a13      	cmp	r2, #19
 80086d4:	4604      	mov	r4, r0
 80086d6:	460d      	mov	r5, r1
 80086d8:	460b      	mov	r3, r1
 80086da:	dc1a      	bgt.n	8008712 <round+0x4a>
 80086dc:	2a00      	cmp	r2, #0
 80086de:	da0b      	bge.n	80086f8 <round+0x30>
 80086e0:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80086e4:	3201      	adds	r2, #1
 80086e6:	bf04      	itt	eq
 80086e8:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80086ec:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80086f0:	2200      	movs	r2, #0
 80086f2:	461d      	mov	r5, r3
 80086f4:	4614      	mov	r4, r2
 80086f6:	e016      	b.n	8008726 <round+0x5e>
 80086f8:	4815      	ldr	r0, [pc, #84]	@ (8008750 <round+0x88>)
 80086fa:	4110      	asrs	r0, r2
 80086fc:	4001      	ands	r1, r0
 80086fe:	4321      	orrs	r1, r4
 8008700:	d011      	beq.n	8008726 <round+0x5e>
 8008702:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8008706:	fa41 f202 	asr.w	r2, r1, r2
 800870a:	4413      	add	r3, r2
 800870c:	ea23 0300 	bic.w	r3, r3, r0
 8008710:	e7ee      	b.n	80086f0 <round+0x28>
 8008712:	2a33      	cmp	r2, #51	@ 0x33
 8008714:	dd0a      	ble.n	800872c <round+0x64>
 8008716:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800871a:	d104      	bne.n	8008726 <round+0x5e>
 800871c:	4602      	mov	r2, r0
 800871e:	f7f7 fd1d 	bl	800015c <__adddf3>
 8008722:	4604      	mov	r4, r0
 8008724:	460d      	mov	r5, r1
 8008726:	4620      	mov	r0, r4
 8008728:	4629      	mov	r1, r5
 800872a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8008734:	40f8      	lsrs	r0, r7
 8008736:	4220      	tst	r0, r4
 8008738:	d0f5      	beq.n	8008726 <round+0x5e>
 800873a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800873e:	2201      	movs	r2, #1
 8008740:	408a      	lsls	r2, r1
 8008742:	1912      	adds	r2, r2, r4
 8008744:	bf28      	it	cs
 8008746:	3301      	addcs	r3, #1
 8008748:	ea22 0200 	bic.w	r2, r2, r0
 800874c:	e7d1      	b.n	80086f2 <round+0x2a>
 800874e:	bf00      	nop
 8008750:	000fffff 	.word	0x000fffff
 8008754:	00000000 	.word	0x00000000

08008758 <__ieee754_pow>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	b091      	sub	sp, #68	@ 0x44
 800875e:	e9cd 2300 	strd	r2, r3, [sp]
 8008762:	468b      	mov	fp, r1
 8008764:	e9dd 1800 	ldrd	r1, r8, [sp]
 8008768:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800876c:	4682      	mov	sl, r0
 800876e:	ea57 0001 	orrs.w	r0, r7, r1
 8008772:	d112      	bne.n	800879a <__ieee754_pow+0x42>
 8008774:	4653      	mov	r3, sl
 8008776:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800877a:	18db      	adds	r3, r3, r3
 800877c:	4152      	adcs	r2, r2
 800877e:	4298      	cmp	r0, r3
 8008780:	4b91      	ldr	r3, [pc, #580]	@ (80089c8 <__ieee754_pow+0x270>)
 8008782:	4193      	sbcs	r3, r2
 8008784:	f080 84ce 	bcs.w	8009124 <__ieee754_pow+0x9cc>
 8008788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800878c:	4650      	mov	r0, sl
 800878e:	4659      	mov	r1, fp
 8008790:	f7f7 fce4 	bl	800015c <__adddf3>
 8008794:	b011      	add	sp, #68	@ 0x44
 8008796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879a:	4b8c      	ldr	r3, [pc, #560]	@ (80089cc <__ieee754_pow+0x274>)
 800879c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 80087a0:	429e      	cmp	r6, r3
 80087a2:	465d      	mov	r5, fp
 80087a4:	46d1      	mov	r9, sl
 80087a6:	d807      	bhi.n	80087b8 <__ieee754_pow+0x60>
 80087a8:	d102      	bne.n	80087b0 <__ieee754_pow+0x58>
 80087aa:	f1ba 0f00 	cmp.w	sl, #0
 80087ae:	d1eb      	bne.n	8008788 <__ieee754_pow+0x30>
 80087b0:	429f      	cmp	r7, r3
 80087b2:	d801      	bhi.n	80087b8 <__ieee754_pow+0x60>
 80087b4:	d10f      	bne.n	80087d6 <__ieee754_pow+0x7e>
 80087b6:	b171      	cbz	r1, 80087d6 <__ieee754_pow+0x7e>
 80087b8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80087bc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80087c0:	ea55 0509 	orrs.w	r5, r5, r9
 80087c4:	d1e0      	bne.n	8008788 <__ieee754_pow+0x30>
 80087c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80087ca:	18db      	adds	r3, r3, r3
 80087cc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80087d0:	4152      	adcs	r2, r2
 80087d2:	429d      	cmp	r5, r3
 80087d4:	e7d4      	b.n	8008780 <__ieee754_pow+0x28>
 80087d6:	2d00      	cmp	r5, #0
 80087d8:	4633      	mov	r3, r6
 80087da:	da39      	bge.n	8008850 <__ieee754_pow+0xf8>
 80087dc:	4a7c      	ldr	r2, [pc, #496]	@ (80089d0 <__ieee754_pow+0x278>)
 80087de:	4297      	cmp	r7, r2
 80087e0:	d84e      	bhi.n	8008880 <__ieee754_pow+0x128>
 80087e2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80087e6:	4297      	cmp	r7, r2
 80087e8:	f240 84ab 	bls.w	8009142 <__ieee754_pow+0x9ea>
 80087ec:	153a      	asrs	r2, r7, #20
 80087ee:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80087f2:	2a14      	cmp	r2, #20
 80087f4:	dd0f      	ble.n	8008816 <__ieee754_pow+0xbe>
 80087f6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80087fa:	fa21 f402 	lsr.w	r4, r1, r2
 80087fe:	fa04 f202 	lsl.w	r2, r4, r2
 8008802:	428a      	cmp	r2, r1
 8008804:	f040 849d 	bne.w	8009142 <__ieee754_pow+0x9ea>
 8008808:	f004 0401 	and.w	r4, r4, #1
 800880c:	f1c4 0402 	rsb	r4, r4, #2
 8008810:	2900      	cmp	r1, #0
 8008812:	d15a      	bne.n	80088ca <__ieee754_pow+0x172>
 8008814:	e00e      	b.n	8008834 <__ieee754_pow+0xdc>
 8008816:	2900      	cmp	r1, #0
 8008818:	d156      	bne.n	80088c8 <__ieee754_pow+0x170>
 800881a:	f1c2 0214 	rsb	r2, r2, #20
 800881e:	fa47 f402 	asr.w	r4, r7, r2
 8008822:	fa04 f202 	lsl.w	r2, r4, r2
 8008826:	42ba      	cmp	r2, r7
 8008828:	f040 8488 	bne.w	800913c <__ieee754_pow+0x9e4>
 800882c:	f004 0401 	and.w	r4, r4, #1
 8008830:	f1c4 0402 	rsb	r4, r4, #2
 8008834:	4a67      	ldr	r2, [pc, #412]	@ (80089d4 <__ieee754_pow+0x27c>)
 8008836:	4297      	cmp	r7, r2
 8008838:	d130      	bne.n	800889c <__ieee754_pow+0x144>
 800883a:	f1b8 0f00 	cmp.w	r8, #0
 800883e:	f280 8479 	bge.w	8009134 <__ieee754_pow+0x9dc>
 8008842:	4652      	mov	r2, sl
 8008844:	465b      	mov	r3, fp
 8008846:	2000      	movs	r0, #0
 8008848:	4962      	ldr	r1, [pc, #392]	@ (80089d4 <__ieee754_pow+0x27c>)
 800884a:	f7f7 ff67 	bl	800071c <__aeabi_ddiv>
 800884e:	e7a1      	b.n	8008794 <__ieee754_pow+0x3c>
 8008850:	2400      	movs	r4, #0
 8008852:	2900      	cmp	r1, #0
 8008854:	d139      	bne.n	80088ca <__ieee754_pow+0x172>
 8008856:	4a5d      	ldr	r2, [pc, #372]	@ (80089cc <__ieee754_pow+0x274>)
 8008858:	4297      	cmp	r7, r2
 800885a:	d1eb      	bne.n	8008834 <__ieee754_pow+0xdc>
 800885c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8008860:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8008864:	ea53 0309 	orrs.w	r3, r3, r9
 8008868:	f000 845c 	beq.w	8009124 <__ieee754_pow+0x9cc>
 800886c:	4b5a      	ldr	r3, [pc, #360]	@ (80089d8 <__ieee754_pow+0x280>)
 800886e:	429e      	cmp	r6, r3
 8008870:	d908      	bls.n	8008884 <__ieee754_pow+0x12c>
 8008872:	f1b8 0f00 	cmp.w	r8, #0
 8008876:	f2c0 8459 	blt.w	800912c <__ieee754_pow+0x9d4>
 800887a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800887e:	e789      	b.n	8008794 <__ieee754_pow+0x3c>
 8008880:	2402      	movs	r4, #2
 8008882:	e7e6      	b.n	8008852 <__ieee754_pow+0xfa>
 8008884:	f1b8 0f00 	cmp.w	r8, #0
 8008888:	f04f 0000 	mov.w	r0, #0
 800888c:	f04f 0100 	mov.w	r1, #0
 8008890:	da80      	bge.n	8008794 <__ieee754_pow+0x3c>
 8008892:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008896:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800889a:	e77b      	b.n	8008794 <__ieee754_pow+0x3c>
 800889c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80088a0:	d106      	bne.n	80088b0 <__ieee754_pow+0x158>
 80088a2:	4652      	mov	r2, sl
 80088a4:	465b      	mov	r3, fp
 80088a6:	4650      	mov	r0, sl
 80088a8:	4659      	mov	r1, fp
 80088aa:	f7f7 fe0d 	bl	80004c8 <__aeabi_dmul>
 80088ae:	e771      	b.n	8008794 <__ieee754_pow+0x3c>
 80088b0:	4a4a      	ldr	r2, [pc, #296]	@ (80089dc <__ieee754_pow+0x284>)
 80088b2:	4590      	cmp	r8, r2
 80088b4:	d109      	bne.n	80088ca <__ieee754_pow+0x172>
 80088b6:	2d00      	cmp	r5, #0
 80088b8:	db07      	blt.n	80088ca <__ieee754_pow+0x172>
 80088ba:	4650      	mov	r0, sl
 80088bc:	4659      	mov	r1, fp
 80088be:	b011      	add	sp, #68	@ 0x44
 80088c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	f000 bd12 	b.w	80092ec <__ieee754_sqrt>
 80088c8:	2400      	movs	r4, #0
 80088ca:	4650      	mov	r0, sl
 80088cc:	4659      	mov	r1, fp
 80088ce:	9302      	str	r3, [sp, #8]
 80088d0:	f000 fc6a 	bl	80091a8 <fabs>
 80088d4:	9b02      	ldr	r3, [sp, #8]
 80088d6:	f1b9 0f00 	cmp.w	r9, #0
 80088da:	d127      	bne.n	800892c <__ieee754_pow+0x1d4>
 80088dc:	4a3d      	ldr	r2, [pc, #244]	@ (80089d4 <__ieee754_pow+0x27c>)
 80088de:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80088e2:	4594      	cmp	ip, r2
 80088e4:	d000      	beq.n	80088e8 <__ieee754_pow+0x190>
 80088e6:	bb0e      	cbnz	r6, 800892c <__ieee754_pow+0x1d4>
 80088e8:	f1b8 0f00 	cmp.w	r8, #0
 80088ec:	da05      	bge.n	80088fa <__ieee754_pow+0x1a2>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	2000      	movs	r0, #0
 80088f4:	4937      	ldr	r1, [pc, #220]	@ (80089d4 <__ieee754_pow+0x27c>)
 80088f6:	f7f7 ff11 	bl	800071c <__aeabi_ddiv>
 80088fa:	2d00      	cmp	r5, #0
 80088fc:	f6bf af4a 	bge.w	8008794 <__ieee754_pow+0x3c>
 8008900:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8008904:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8008908:	4326      	orrs	r6, r4
 800890a:	d108      	bne.n	800891e <__ieee754_pow+0x1c6>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4610      	mov	r0, r2
 8008912:	4619      	mov	r1, r3
 8008914:	f7f7 fc20 	bl	8000158 <__aeabi_dsub>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	e795      	b.n	800884a <__ieee754_pow+0xf2>
 800891e:	2c01      	cmp	r4, #1
 8008920:	f47f af38 	bne.w	8008794 <__ieee754_pow+0x3c>
 8008924:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008928:	4619      	mov	r1, r3
 800892a:	e733      	b.n	8008794 <__ieee754_pow+0x3c>
 800892c:	0fea      	lsrs	r2, r5, #31
 800892e:	3a01      	subs	r2, #1
 8008930:	ea52 0c04 	orrs.w	ip, r2, r4
 8008934:	d102      	bne.n	800893c <__ieee754_pow+0x1e4>
 8008936:	4652      	mov	r2, sl
 8008938:	465b      	mov	r3, fp
 800893a:	e7e9      	b.n	8008910 <__ieee754_pow+0x1b8>
 800893c:	f04f 0900 	mov.w	r9, #0
 8008940:	3c01      	subs	r4, #1
 8008942:	4314      	orrs	r4, r2
 8008944:	bf14      	ite	ne
 8008946:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80089d4 <__ieee754_pow+0x27c>
 800894a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80089e0 <__ieee754_pow+0x288>
 800894e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8008952:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8008956:	f240 8107 	bls.w	8008b68 <__ieee754_pow+0x410>
 800895a:	4b22      	ldr	r3, [pc, #136]	@ (80089e4 <__ieee754_pow+0x28c>)
 800895c:	429f      	cmp	r7, r3
 800895e:	4b1e      	ldr	r3, [pc, #120]	@ (80089d8 <__ieee754_pow+0x280>)
 8008960:	d913      	bls.n	800898a <__ieee754_pow+0x232>
 8008962:	429e      	cmp	r6, r3
 8008964:	d808      	bhi.n	8008978 <__ieee754_pow+0x220>
 8008966:	f1b8 0f00 	cmp.w	r8, #0
 800896a:	da08      	bge.n	800897e <__ieee754_pow+0x226>
 800896c:	2000      	movs	r0, #0
 800896e:	b011      	add	sp, #68	@ 0x44
 8008970:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	f000 bcb4 	b.w	80092e0 <__math_oflow>
 8008978:	f1b8 0f00 	cmp.w	r8, #0
 800897c:	dcf6      	bgt.n	800896c <__ieee754_pow+0x214>
 800897e:	2000      	movs	r0, #0
 8008980:	b011      	add	sp, #68	@ 0x44
 8008982:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008986:	f000 bca6 	b.w	80092d6 <__math_uflow>
 800898a:	429e      	cmp	r6, r3
 800898c:	d20c      	bcs.n	80089a8 <__ieee754_pow+0x250>
 800898e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008992:	2200      	movs	r2, #0
 8008994:	2300      	movs	r3, #0
 8008996:	f7f8 f809 	bl	80009ac <__aeabi_dcmplt>
 800899a:	3800      	subs	r0, #0
 800899c:	bf18      	it	ne
 800899e:	2001      	movne	r0, #1
 80089a0:	f1b8 0f00 	cmp.w	r8, #0
 80089a4:	daec      	bge.n	8008980 <__ieee754_pow+0x228>
 80089a6:	e7e2      	b.n	800896e <__ieee754_pow+0x216>
 80089a8:	4b0a      	ldr	r3, [pc, #40]	@ (80089d4 <__ieee754_pow+0x27c>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	429e      	cmp	r6, r3
 80089ae:	d91b      	bls.n	80089e8 <__ieee754_pow+0x290>
 80089b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089b4:	2300      	movs	r3, #0
 80089b6:	f7f7 fff9 	bl	80009ac <__aeabi_dcmplt>
 80089ba:	3800      	subs	r0, #0
 80089bc:	bf18      	it	ne
 80089be:	2001      	movne	r0, #1
 80089c0:	f1b8 0f00 	cmp.w	r8, #0
 80089c4:	dcd3      	bgt.n	800896e <__ieee754_pow+0x216>
 80089c6:	e7db      	b.n	8008980 <__ieee754_pow+0x228>
 80089c8:	fff00000 	.word	0xfff00000
 80089cc:	7ff00000 	.word	0x7ff00000
 80089d0:	433fffff 	.word	0x433fffff
 80089d4:	3ff00000 	.word	0x3ff00000
 80089d8:	3fefffff 	.word	0x3fefffff
 80089dc:	3fe00000 	.word	0x3fe00000
 80089e0:	bff00000 	.word	0xbff00000
 80089e4:	43f00000 	.word	0x43f00000
 80089e8:	4b5b      	ldr	r3, [pc, #364]	@ (8008b58 <__ieee754_pow+0x400>)
 80089ea:	f7f7 fbb5 	bl	8000158 <__aeabi_dsub>
 80089ee:	a352      	add	r3, pc, #328	@ (adr r3, 8008b38 <__ieee754_pow+0x3e0>)
 80089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f4:	4604      	mov	r4, r0
 80089f6:	460d      	mov	r5, r1
 80089f8:	f7f7 fd66 	bl	80004c8 <__aeabi_dmul>
 80089fc:	a350      	add	r3, pc, #320	@ (adr r3, 8008b40 <__ieee754_pow+0x3e8>)
 80089fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a02:	4606      	mov	r6, r0
 8008a04:	460f      	mov	r7, r1
 8008a06:	4620      	mov	r0, r4
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f7f7 fd5d 	bl	80004c8 <__aeabi_dmul>
 8008a0e:	2200      	movs	r2, #0
 8008a10:	4682      	mov	sl, r0
 8008a12:	468b      	mov	fp, r1
 8008a14:	4620      	mov	r0, r4
 8008a16:	4629      	mov	r1, r5
 8008a18:	4b50      	ldr	r3, [pc, #320]	@ (8008b5c <__ieee754_pow+0x404>)
 8008a1a:	f7f7 fd55 	bl	80004c8 <__aeabi_dmul>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	a149      	add	r1, pc, #292	@ (adr r1, 8008b48 <__ieee754_pow+0x3f0>)
 8008a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a28:	f7f7 fb96 	bl	8000158 <__aeabi_dsub>
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	462b      	mov	r3, r5
 8008a30:	f7f7 fd4a 	bl	80004c8 <__aeabi_dmul>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	2000      	movs	r0, #0
 8008a3a:	4949      	ldr	r1, [pc, #292]	@ (8008b60 <__ieee754_pow+0x408>)
 8008a3c:	f7f7 fb8c 	bl	8000158 <__aeabi_dsub>
 8008a40:	4622      	mov	r2, r4
 8008a42:	4680      	mov	r8, r0
 8008a44:	4689      	mov	r9, r1
 8008a46:	462b      	mov	r3, r5
 8008a48:	4620      	mov	r0, r4
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	f7f7 fd3c 	bl	80004c8 <__aeabi_dmul>
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	4640      	mov	r0, r8
 8008a56:	4649      	mov	r1, r9
 8008a58:	f7f7 fd36 	bl	80004c8 <__aeabi_dmul>
 8008a5c:	a33c      	add	r3, pc, #240	@ (adr r3, 8008b50 <__ieee754_pow+0x3f8>)
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	f7f7 fd31 	bl	80004c8 <__aeabi_dmul>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4650      	mov	r0, sl
 8008a6c:	4659      	mov	r1, fp
 8008a6e:	f7f7 fb73 	bl	8000158 <__aeabi_dsub>
 8008a72:	2400      	movs	r4, #0
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4680      	mov	r8, r0
 8008a7a:	4689      	mov	r9, r1
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	4639      	mov	r1, r7
 8008a80:	f7f7 fb6c 	bl	800015c <__adddf3>
 8008a84:	4632      	mov	r2, r6
 8008a86:	463b      	mov	r3, r7
 8008a88:	4620      	mov	r0, r4
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	f7f7 fb64 	bl	8000158 <__aeabi_dsub>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4640      	mov	r0, r8
 8008a96:	4649      	mov	r1, r9
 8008a98:	f7f7 fb5e 	bl	8000158 <__aeabi_dsub>
 8008a9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	9304      	str	r3, [sp, #16]
 8008aa8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008aac:	4606      	mov	r6, r0
 8008aae:	460f      	mov	r7, r1
 8008ab0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ab4:	4652      	mov	r2, sl
 8008ab6:	465b      	mov	r3, fp
 8008ab8:	f7f7 fb4e 	bl	8000158 <__aeabi_dsub>
 8008abc:	4622      	mov	r2, r4
 8008abe:	462b      	mov	r3, r5
 8008ac0:	f7f7 fd02 	bl	80004c8 <__aeabi_dmul>
 8008ac4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ac8:	4680      	mov	r8, r0
 8008aca:	4689      	mov	r9, r1
 8008acc:	4630      	mov	r0, r6
 8008ace:	4639      	mov	r1, r7
 8008ad0:	f7f7 fcfa 	bl	80004c8 <__aeabi_dmul>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4640      	mov	r0, r8
 8008ada:	4649      	mov	r1, r9
 8008adc:	f7f7 fb3e 	bl	800015c <__adddf3>
 8008ae0:	4652      	mov	r2, sl
 8008ae2:	465b      	mov	r3, fp
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	460f      	mov	r7, r1
 8008ae8:	4620      	mov	r0, r4
 8008aea:	4629      	mov	r1, r5
 8008aec:	f7f7 fcec 	bl	80004c8 <__aeabi_dmul>
 8008af0:	460b      	mov	r3, r1
 8008af2:	4602      	mov	r2, r0
 8008af4:	4680      	mov	r8, r0
 8008af6:	4689      	mov	r9, r1
 8008af8:	4630      	mov	r0, r6
 8008afa:	4639      	mov	r1, r7
 8008afc:	f7f7 fb2e 	bl	800015c <__adddf3>
 8008b00:	4b18      	ldr	r3, [pc, #96]	@ (8008b64 <__ieee754_pow+0x40c>)
 8008b02:	4604      	mov	r4, r0
 8008b04:	4299      	cmp	r1, r3
 8008b06:	460d      	mov	r5, r1
 8008b08:	468a      	mov	sl, r1
 8008b0a:	468b      	mov	fp, r1
 8008b0c:	f340 82e0 	ble.w	80090d0 <__ieee754_pow+0x978>
 8008b10:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008b14:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008b18:	4303      	orrs	r3, r0
 8008b1a:	f000 81df 	beq.w	8008edc <__ieee754_pow+0x784>
 8008b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b22:	2200      	movs	r2, #0
 8008b24:	2300      	movs	r3, #0
 8008b26:	f7f7 ff41 	bl	80009ac <__aeabi_dcmplt>
 8008b2a:	3800      	subs	r0, #0
 8008b2c:	bf18      	it	ne
 8008b2e:	2001      	movne	r0, #1
 8008b30:	e71d      	b.n	800896e <__ieee754_pow+0x216>
 8008b32:	bf00      	nop
 8008b34:	f3af 8000 	nop.w
 8008b38:	60000000 	.word	0x60000000
 8008b3c:	3ff71547 	.word	0x3ff71547
 8008b40:	f85ddf44 	.word	0xf85ddf44
 8008b44:	3e54ae0b 	.word	0x3e54ae0b
 8008b48:	55555555 	.word	0x55555555
 8008b4c:	3fd55555 	.word	0x3fd55555
 8008b50:	652b82fe 	.word	0x652b82fe
 8008b54:	3ff71547 	.word	0x3ff71547
 8008b58:	3ff00000 	.word	0x3ff00000
 8008b5c:	3fd00000 	.word	0x3fd00000
 8008b60:	3fe00000 	.word	0x3fe00000
 8008b64:	408fffff 	.word	0x408fffff
 8008b68:	4ad3      	ldr	r2, [pc, #844]	@ (8008eb8 <__ieee754_pow+0x760>)
 8008b6a:	402a      	ands	r2, r5
 8008b6c:	2a00      	cmp	r2, #0
 8008b6e:	f040 817a 	bne.w	8008e66 <__ieee754_pow+0x70e>
 8008b72:	4bd2      	ldr	r3, [pc, #840]	@ (8008ebc <__ieee754_pow+0x764>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	f7f7 fca7 	bl	80004c8 <__aeabi_dmul>
 8008b7a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8008b7e:	460b      	mov	r3, r1
 8008b80:	151a      	asrs	r2, r3, #20
 8008b82:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008b86:	4422      	add	r2, r4
 8008b88:	920a      	str	r2, [sp, #40]	@ 0x28
 8008b8a:	4acd      	ldr	r2, [pc, #820]	@ (8008ec0 <__ieee754_pow+0x768>)
 8008b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b90:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8008b94:	4293      	cmp	r3, r2
 8008b96:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008b9a:	dd08      	ble.n	8008bae <__ieee754_pow+0x456>
 8008b9c:	4ac9      	ldr	r2, [pc, #804]	@ (8008ec4 <__ieee754_pow+0x76c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	f340 8163 	ble.w	8008e6a <__ieee754_pow+0x712>
 8008ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ba6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008baa:	3301      	adds	r3, #1
 8008bac:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bae:	2600      	movs	r6, #0
 8008bb0:	00f3      	lsls	r3, r6, #3
 8008bb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bb4:	4bc4      	ldr	r3, [pc, #784]	@ (8008ec8 <__ieee754_pow+0x770>)
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008bbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8008bc6:	4623      	mov	r3, r4
 8008bc8:	4682      	mov	sl, r0
 8008bca:	f7f7 fac5 	bl	8000158 <__aeabi_dsub>
 8008bce:	4652      	mov	r2, sl
 8008bd0:	462b      	mov	r3, r5
 8008bd2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008bd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bda:	f7f7 fabf 	bl	800015c <__adddf3>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	2000      	movs	r0, #0
 8008be4:	49b9      	ldr	r1, [pc, #740]	@ (8008ecc <__ieee754_pow+0x774>)
 8008be6:	f7f7 fd99 	bl	800071c <__aeabi_ddiv>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008bf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bf6:	f7f7 fc67 	bl	80004c8 <__aeabi_dmul>
 8008bfa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008bfe:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8008c02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008c06:	2300      	movs	r3, #0
 8008c08:	2200      	movs	r2, #0
 8008c0a:	46ab      	mov	fp, r5
 8008c0c:	106d      	asrs	r5, r5, #1
 8008c0e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008c12:	9304      	str	r3, [sp, #16]
 8008c14:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008c18:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008c1c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008c20:	4640      	mov	r0, r8
 8008c22:	4649      	mov	r1, r9
 8008c24:	4614      	mov	r4, r2
 8008c26:	461d      	mov	r5, r3
 8008c28:	f7f7 fc4e 	bl	80004c8 <__aeabi_dmul>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c34:	f7f7 fa90 	bl	8000158 <__aeabi_dsub>
 8008c38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	460f      	mov	r7, r1
 8008c40:	4620      	mov	r0, r4
 8008c42:	4629      	mov	r1, r5
 8008c44:	f7f7 fa88 	bl	8000158 <__aeabi_dsub>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4650      	mov	r0, sl
 8008c4e:	4659      	mov	r1, fp
 8008c50:	f7f7 fa82 	bl	8000158 <__aeabi_dsub>
 8008c54:	4642      	mov	r2, r8
 8008c56:	464b      	mov	r3, r9
 8008c58:	f7f7 fc36 	bl	80004c8 <__aeabi_dmul>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	4630      	mov	r0, r6
 8008c62:	4639      	mov	r1, r7
 8008c64:	f7f7 fa78 	bl	8000158 <__aeabi_dsub>
 8008c68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008c6c:	f7f7 fc2c 	bl	80004c8 <__aeabi_dmul>
 8008c70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c74:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c78:	4610      	mov	r0, r2
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	f7f7 fc24 	bl	80004c8 <__aeabi_dmul>
 8008c80:	a37b      	add	r3, pc, #492	@ (adr r3, 8008e70 <__ieee754_pow+0x718>)
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	4604      	mov	r4, r0
 8008c88:	460d      	mov	r5, r1
 8008c8a:	f7f7 fc1d 	bl	80004c8 <__aeabi_dmul>
 8008c8e:	a37a      	add	r3, pc, #488	@ (adr r3, 8008e78 <__ieee754_pow+0x720>)
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	f7f7 fa62 	bl	800015c <__adddf3>
 8008c98:	4622      	mov	r2, r4
 8008c9a:	462b      	mov	r3, r5
 8008c9c:	f7f7 fc14 	bl	80004c8 <__aeabi_dmul>
 8008ca0:	a377      	add	r3, pc, #476	@ (adr r3, 8008e80 <__ieee754_pow+0x728>)
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	f7f7 fa59 	bl	800015c <__adddf3>
 8008caa:	4622      	mov	r2, r4
 8008cac:	462b      	mov	r3, r5
 8008cae:	f7f7 fc0b 	bl	80004c8 <__aeabi_dmul>
 8008cb2:	a375      	add	r3, pc, #468	@ (adr r3, 8008e88 <__ieee754_pow+0x730>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f7f7 fa50 	bl	800015c <__adddf3>
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	462b      	mov	r3, r5
 8008cc0:	f7f7 fc02 	bl	80004c8 <__aeabi_dmul>
 8008cc4:	a372      	add	r3, pc, #456	@ (adr r3, 8008e90 <__ieee754_pow+0x738>)
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	f7f7 fa47 	bl	800015c <__adddf3>
 8008cce:	4622      	mov	r2, r4
 8008cd0:	462b      	mov	r3, r5
 8008cd2:	f7f7 fbf9 	bl	80004c8 <__aeabi_dmul>
 8008cd6:	a370      	add	r3, pc, #448	@ (adr r3, 8008e98 <__ieee754_pow+0x740>)
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f7f7 fa3e 	bl	800015c <__adddf3>
 8008ce0:	4622      	mov	r2, r4
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	460f      	mov	r7, r1
 8008ce6:	462b      	mov	r3, r5
 8008ce8:	4620      	mov	r0, r4
 8008cea:	4629      	mov	r1, r5
 8008cec:	f7f7 fbec 	bl	80004c8 <__aeabi_dmul>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	4639      	mov	r1, r7
 8008cf8:	f7f7 fbe6 	bl	80004c8 <__aeabi_dmul>
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	460d      	mov	r5, r1
 8008d00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d04:	4642      	mov	r2, r8
 8008d06:	464b      	mov	r3, r9
 8008d08:	f7f7 fa28 	bl	800015c <__adddf3>
 8008d0c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d10:	f7f7 fbda 	bl	80004c8 <__aeabi_dmul>
 8008d14:	4622      	mov	r2, r4
 8008d16:	462b      	mov	r3, r5
 8008d18:	f7f7 fa20 	bl	800015c <__adddf3>
 8008d1c:	4642      	mov	r2, r8
 8008d1e:	4682      	mov	sl, r0
 8008d20:	468b      	mov	fp, r1
 8008d22:	464b      	mov	r3, r9
 8008d24:	4640      	mov	r0, r8
 8008d26:	4649      	mov	r1, r9
 8008d28:	f7f7 fbce 	bl	80004c8 <__aeabi_dmul>
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	4b68      	ldr	r3, [pc, #416]	@ (8008ed0 <__ieee754_pow+0x778>)
 8008d30:	4606      	mov	r6, r0
 8008d32:	460f      	mov	r7, r1
 8008d34:	f7f7 fa12 	bl	800015c <__adddf3>
 8008d38:	4652      	mov	r2, sl
 8008d3a:	465b      	mov	r3, fp
 8008d3c:	f7f7 fa0e 	bl	800015c <__adddf3>
 8008d40:	2400      	movs	r4, #0
 8008d42:	460d      	mov	r5, r1
 8008d44:	4622      	mov	r2, r4
 8008d46:	460b      	mov	r3, r1
 8008d48:	4640      	mov	r0, r8
 8008d4a:	4649      	mov	r1, r9
 8008d4c:	f7f7 fbbc 	bl	80004c8 <__aeabi_dmul>
 8008d50:	2200      	movs	r2, #0
 8008d52:	4680      	mov	r8, r0
 8008d54:	4689      	mov	r9, r1
 8008d56:	4620      	mov	r0, r4
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8008ed0 <__ieee754_pow+0x778>)
 8008d5c:	f7f7 f9fc 	bl	8000158 <__aeabi_dsub>
 8008d60:	4632      	mov	r2, r6
 8008d62:	463b      	mov	r3, r7
 8008d64:	f7f7 f9f8 	bl	8000158 <__aeabi_dsub>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	4650      	mov	r0, sl
 8008d6e:	4659      	mov	r1, fp
 8008d70:	f7f7 f9f2 	bl	8000158 <__aeabi_dsub>
 8008d74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d78:	f7f7 fba6 	bl	80004c8 <__aeabi_dmul>
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	4606      	mov	r6, r0
 8008d80:	460f      	mov	r7, r1
 8008d82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d86:	462b      	mov	r3, r5
 8008d88:	f7f7 fb9e 	bl	80004c8 <__aeabi_dmul>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	4630      	mov	r0, r6
 8008d92:	4639      	mov	r1, r7
 8008d94:	f7f7 f9e2 	bl	800015c <__adddf3>
 8008d98:	2400      	movs	r4, #0
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	460f      	mov	r7, r1
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	4640      	mov	r0, r8
 8008da4:	4649      	mov	r1, r9
 8008da6:	f7f7 f9d9 	bl	800015c <__adddf3>
 8008daa:	a33d      	add	r3, pc, #244	@ (adr r3, 8008ea0 <__ieee754_pow+0x748>)
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	4620      	mov	r0, r4
 8008db2:	460d      	mov	r5, r1
 8008db4:	f7f7 fb88 	bl	80004c8 <__aeabi_dmul>
 8008db8:	4642      	mov	r2, r8
 8008dba:	464b      	mov	r3, r9
 8008dbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	f7f7 f9c8 	bl	8000158 <__aeabi_dsub>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4630      	mov	r0, r6
 8008dce:	4639      	mov	r1, r7
 8008dd0:	f7f7 f9c2 	bl	8000158 <__aeabi_dsub>
 8008dd4:	a334      	add	r3, pc, #208	@ (adr r3, 8008ea8 <__ieee754_pow+0x750>)
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	f7f7 fb75 	bl	80004c8 <__aeabi_dmul>
 8008dde:	a334      	add	r3, pc, #208	@ (adr r3, 8008eb0 <__ieee754_pow+0x758>)
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	4606      	mov	r6, r0
 8008de6:	460f      	mov	r7, r1
 8008de8:	4620      	mov	r0, r4
 8008dea:	4629      	mov	r1, r5
 8008dec:	f7f7 fb6c 	bl	80004c8 <__aeabi_dmul>
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	4630      	mov	r0, r6
 8008df6:	4639      	mov	r1, r7
 8008df8:	f7f7 f9b0 	bl	800015c <__adddf3>
 8008dfc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008dfe:	4b35      	ldr	r3, [pc, #212]	@ (8008ed4 <__ieee754_pow+0x77c>)
 8008e00:	2400      	movs	r4, #0
 8008e02:	4413      	add	r3, r2
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	f7f7 f9a8 	bl	800015c <__adddf3>
 8008e0c:	4682      	mov	sl, r0
 8008e0e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e10:	468b      	mov	fp, r1
 8008e12:	f7f7 faef 	bl	80003f4 <__aeabi_i2d>
 8008e16:	4606      	mov	r6, r0
 8008e18:	460f      	mov	r7, r1
 8008e1a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8008ed8 <__ieee754_pow+0x780>)
 8008e1e:	4413      	add	r3, r2
 8008e20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e24:	4652      	mov	r2, sl
 8008e26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e2a:	465b      	mov	r3, fp
 8008e2c:	f7f7 f996 	bl	800015c <__adddf3>
 8008e30:	4642      	mov	r2, r8
 8008e32:	464b      	mov	r3, r9
 8008e34:	f7f7 f992 	bl	800015c <__adddf3>
 8008e38:	4632      	mov	r2, r6
 8008e3a:	463b      	mov	r3, r7
 8008e3c:	f7f7 f98e 	bl	800015c <__adddf3>
 8008e40:	4632      	mov	r2, r6
 8008e42:	463b      	mov	r3, r7
 8008e44:	4620      	mov	r0, r4
 8008e46:	460d      	mov	r5, r1
 8008e48:	f7f7 f986 	bl	8000158 <__aeabi_dsub>
 8008e4c:	4642      	mov	r2, r8
 8008e4e:	464b      	mov	r3, r9
 8008e50:	f7f7 f982 	bl	8000158 <__aeabi_dsub>
 8008e54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e58:	f7f7 f97e 	bl	8000158 <__aeabi_dsub>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4650      	mov	r0, sl
 8008e62:	4659      	mov	r1, fp
 8008e64:	e618      	b.n	8008a98 <__ieee754_pow+0x340>
 8008e66:	2400      	movs	r4, #0
 8008e68:	e68a      	b.n	8008b80 <__ieee754_pow+0x428>
 8008e6a:	2601      	movs	r6, #1
 8008e6c:	e6a0      	b.n	8008bb0 <__ieee754_pow+0x458>
 8008e6e:	bf00      	nop
 8008e70:	4a454eef 	.word	0x4a454eef
 8008e74:	3fca7e28 	.word	0x3fca7e28
 8008e78:	93c9db65 	.word	0x93c9db65
 8008e7c:	3fcd864a 	.word	0x3fcd864a
 8008e80:	a91d4101 	.word	0xa91d4101
 8008e84:	3fd17460 	.word	0x3fd17460
 8008e88:	518f264d 	.word	0x518f264d
 8008e8c:	3fd55555 	.word	0x3fd55555
 8008e90:	db6fabff 	.word	0xdb6fabff
 8008e94:	3fdb6db6 	.word	0x3fdb6db6
 8008e98:	33333303 	.word	0x33333303
 8008e9c:	3fe33333 	.word	0x3fe33333
 8008ea0:	e0000000 	.word	0xe0000000
 8008ea4:	3feec709 	.word	0x3feec709
 8008ea8:	dc3a03fd 	.word	0xdc3a03fd
 8008eac:	3feec709 	.word	0x3feec709
 8008eb0:	145b01f5 	.word	0x145b01f5
 8008eb4:	be3e2fe0 	.word	0xbe3e2fe0
 8008eb8:	7ff00000 	.word	0x7ff00000
 8008ebc:	43400000 	.word	0x43400000
 8008ec0:	0003988e 	.word	0x0003988e
 8008ec4:	000bb679 	.word	0x000bb679
 8008ec8:	08009580 	.word	0x08009580
 8008ecc:	3ff00000 	.word	0x3ff00000
 8008ed0:	40080000 	.word	0x40080000
 8008ed4:	08009560 	.word	0x08009560
 8008ed8:	08009570 	.word	0x08009570
 8008edc:	a39a      	add	r3, pc, #616	@ (adr r3, 8009148 <__ieee754_pow+0x9f0>)
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	4639      	mov	r1, r7
 8008ee6:	f7f7 f939 	bl	800015c <__adddf3>
 8008eea:	4642      	mov	r2, r8
 8008eec:	e9cd 0100 	strd	r0, r1, [sp]
 8008ef0:	464b      	mov	r3, r9
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	f7f7 f92f 	bl	8000158 <__aeabi_dsub>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f02:	f7f7 fd71 	bl	80009e8 <__aeabi_dcmpgt>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	f47f ae09 	bne.w	8008b1e <__ieee754_pow+0x3c6>
 8008f0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008f10:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008f14:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008f18:	fa43 fa0a 	asr.w	sl, r3, sl
 8008f1c:	44da      	add	sl, fp
 8008f1e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008f22:	489b      	ldr	r0, [pc, #620]	@ (8009190 <__ieee754_pow+0xa38>)
 8008f24:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008f28:	4108      	asrs	r0, r1
 8008f2a:	ea00 030a 	and.w	r3, r0, sl
 8008f2e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008f32:	f1c1 0114 	rsb	r1, r1, #20
 8008f36:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008f3a:	4640      	mov	r0, r8
 8008f3c:	fa4a fa01 	asr.w	sl, sl, r1
 8008f40:	f1bb 0f00 	cmp.w	fp, #0
 8008f44:	4649      	mov	r1, r9
 8008f46:	f04f 0200 	mov.w	r2, #0
 8008f4a:	bfb8      	it	lt
 8008f4c:	f1ca 0a00 	rsblt	sl, sl, #0
 8008f50:	f7f7 f902 	bl	8000158 <__aeabi_dsub>
 8008f54:	4680      	mov	r8, r0
 8008f56:	4689      	mov	r9, r1
 8008f58:	2400      	movs	r4, #0
 8008f5a:	4632      	mov	r2, r6
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	4640      	mov	r0, r8
 8008f60:	4649      	mov	r1, r9
 8008f62:	f7f7 f8fb 	bl	800015c <__adddf3>
 8008f66:	a37a      	add	r3, pc, #488	@ (adr r3, 8009150 <__ieee754_pow+0x9f8>)
 8008f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	460d      	mov	r5, r1
 8008f70:	f7f7 faaa 	bl	80004c8 <__aeabi_dmul>
 8008f74:	4642      	mov	r2, r8
 8008f76:	464b      	mov	r3, r9
 8008f78:	e9cd 0100 	strd	r0, r1, [sp]
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	4629      	mov	r1, r5
 8008f80:	f7f7 f8ea 	bl	8000158 <__aeabi_dsub>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	4630      	mov	r0, r6
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	f7f7 f8e4 	bl	8000158 <__aeabi_dsub>
 8008f90:	a371      	add	r3, pc, #452	@ (adr r3, 8009158 <__ieee754_pow+0xa00>)
 8008f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f96:	f7f7 fa97 	bl	80004c8 <__aeabi_dmul>
 8008f9a:	a371      	add	r3, pc, #452	@ (adr r3, 8009160 <__ieee754_pow+0xa08>)
 8008f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa0:	4680      	mov	r8, r0
 8008fa2:	4689      	mov	r9, r1
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	f7f7 fa8e 	bl	80004c8 <__aeabi_dmul>
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4640      	mov	r0, r8
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	f7f7 f8d2 	bl	800015c <__adddf3>
 8008fb8:	4604      	mov	r4, r0
 8008fba:	460d      	mov	r5, r1
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fc4:	f7f7 f8ca 	bl	800015c <__adddf3>
 8008fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fcc:	4680      	mov	r8, r0
 8008fce:	4689      	mov	r9, r1
 8008fd0:	f7f7 f8c2 	bl	8000158 <__aeabi_dsub>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4620      	mov	r0, r4
 8008fda:	4629      	mov	r1, r5
 8008fdc:	f7f7 f8bc 	bl	8000158 <__aeabi_dsub>
 8008fe0:	4642      	mov	r2, r8
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	460f      	mov	r7, r1
 8008fe6:	464b      	mov	r3, r9
 8008fe8:	4640      	mov	r0, r8
 8008fea:	4649      	mov	r1, r9
 8008fec:	f7f7 fa6c 	bl	80004c8 <__aeabi_dmul>
 8008ff0:	a35d      	add	r3, pc, #372	@ (adr r3, 8009168 <__ieee754_pow+0xa10>)
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	460d      	mov	r5, r1
 8008ffa:	f7f7 fa65 	bl	80004c8 <__aeabi_dmul>
 8008ffe:	a35c      	add	r3, pc, #368	@ (adr r3, 8009170 <__ieee754_pow+0xa18>)
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	f7f7 f8a8 	bl	8000158 <__aeabi_dsub>
 8009008:	4622      	mov	r2, r4
 800900a:	462b      	mov	r3, r5
 800900c:	f7f7 fa5c 	bl	80004c8 <__aeabi_dmul>
 8009010:	a359      	add	r3, pc, #356	@ (adr r3, 8009178 <__ieee754_pow+0xa20>)
 8009012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009016:	f7f7 f8a1 	bl	800015c <__adddf3>
 800901a:	4622      	mov	r2, r4
 800901c:	462b      	mov	r3, r5
 800901e:	f7f7 fa53 	bl	80004c8 <__aeabi_dmul>
 8009022:	a357      	add	r3, pc, #348	@ (adr r3, 8009180 <__ieee754_pow+0xa28>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f7f7 f896 	bl	8000158 <__aeabi_dsub>
 800902c:	4622      	mov	r2, r4
 800902e:	462b      	mov	r3, r5
 8009030:	f7f7 fa4a 	bl	80004c8 <__aeabi_dmul>
 8009034:	a354      	add	r3, pc, #336	@ (adr r3, 8009188 <__ieee754_pow+0xa30>)
 8009036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903a:	f7f7 f88f 	bl	800015c <__adddf3>
 800903e:	4622      	mov	r2, r4
 8009040:	462b      	mov	r3, r5
 8009042:	f7f7 fa41 	bl	80004c8 <__aeabi_dmul>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4640      	mov	r0, r8
 800904c:	4649      	mov	r1, r9
 800904e:	f7f7 f883 	bl	8000158 <__aeabi_dsub>
 8009052:	4604      	mov	r4, r0
 8009054:	460d      	mov	r5, r1
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	4640      	mov	r0, r8
 800905c:	4649      	mov	r1, r9
 800905e:	f7f7 fa33 	bl	80004c8 <__aeabi_dmul>
 8009062:	2200      	movs	r2, #0
 8009064:	e9cd 0100 	strd	r0, r1, [sp]
 8009068:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800906c:	4620      	mov	r0, r4
 800906e:	4629      	mov	r1, r5
 8009070:	f7f7 f872 	bl	8000158 <__aeabi_dsub>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	e9dd 0100 	ldrd	r0, r1, [sp]
 800907c:	f7f7 fb4e 	bl	800071c <__aeabi_ddiv>
 8009080:	4632      	mov	r2, r6
 8009082:	4604      	mov	r4, r0
 8009084:	460d      	mov	r5, r1
 8009086:	463b      	mov	r3, r7
 8009088:	4640      	mov	r0, r8
 800908a:	4649      	mov	r1, r9
 800908c:	f7f7 fa1c 	bl	80004c8 <__aeabi_dmul>
 8009090:	4632      	mov	r2, r6
 8009092:	463b      	mov	r3, r7
 8009094:	f7f7 f862 	bl	800015c <__adddf3>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	4620      	mov	r0, r4
 800909e:	4629      	mov	r1, r5
 80090a0:	f7f7 f85a 	bl	8000158 <__aeabi_dsub>
 80090a4:	4642      	mov	r2, r8
 80090a6:	464b      	mov	r3, r9
 80090a8:	f7f7 f856 	bl	8000158 <__aeabi_dsub>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	2000      	movs	r0, #0
 80090b2:	4938      	ldr	r1, [pc, #224]	@ (8009194 <__ieee754_pow+0xa3c>)
 80090b4:	f7f7 f850 	bl	8000158 <__aeabi_dsub>
 80090b8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80090bc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80090c0:	da2e      	bge.n	8009120 <__ieee754_pow+0x9c8>
 80090c2:	4652      	mov	r2, sl
 80090c4:	f000 f874 	bl	80091b0 <scalbn>
 80090c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090cc:	f7ff bbed 	b.w	80088aa <__ieee754_pow+0x152>
 80090d0:	4c31      	ldr	r4, [pc, #196]	@ (8009198 <__ieee754_pow+0xa40>)
 80090d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80090d6:	42a3      	cmp	r3, r4
 80090d8:	d91a      	bls.n	8009110 <__ieee754_pow+0x9b8>
 80090da:	4b30      	ldr	r3, [pc, #192]	@ (800919c <__ieee754_pow+0xa44>)
 80090dc:	440b      	add	r3, r1
 80090de:	4303      	orrs	r3, r0
 80090e0:	d009      	beq.n	80090f6 <__ieee754_pow+0x99e>
 80090e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090e6:	2200      	movs	r2, #0
 80090e8:	2300      	movs	r3, #0
 80090ea:	f7f7 fc5f 	bl	80009ac <__aeabi_dcmplt>
 80090ee:	3800      	subs	r0, #0
 80090f0:	bf18      	it	ne
 80090f2:	2001      	movne	r0, #1
 80090f4:	e444      	b.n	8008980 <__ieee754_pow+0x228>
 80090f6:	4642      	mov	r2, r8
 80090f8:	464b      	mov	r3, r9
 80090fa:	f7f7 f82d 	bl	8000158 <__aeabi_dsub>
 80090fe:	4632      	mov	r2, r6
 8009100:	463b      	mov	r3, r7
 8009102:	f7f7 fc67 	bl	80009d4 <__aeabi_dcmpge>
 8009106:	2800      	cmp	r0, #0
 8009108:	d1eb      	bne.n	80090e2 <__ieee754_pow+0x98a>
 800910a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80091a0 <__ieee754_pow+0xa48>
 800910e:	e6fd      	b.n	8008f0c <__ieee754_pow+0x7b4>
 8009110:	469a      	mov	sl, r3
 8009112:	4b24      	ldr	r3, [pc, #144]	@ (80091a4 <__ieee754_pow+0xa4c>)
 8009114:	459a      	cmp	sl, r3
 8009116:	f63f aef9 	bhi.w	8008f0c <__ieee754_pow+0x7b4>
 800911a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800911e:	e71b      	b.n	8008f58 <__ieee754_pow+0x800>
 8009120:	4621      	mov	r1, r4
 8009122:	e7d1      	b.n	80090c8 <__ieee754_pow+0x970>
 8009124:	2000      	movs	r0, #0
 8009126:	491b      	ldr	r1, [pc, #108]	@ (8009194 <__ieee754_pow+0xa3c>)
 8009128:	f7ff bb34 	b.w	8008794 <__ieee754_pow+0x3c>
 800912c:	2000      	movs	r0, #0
 800912e:	2100      	movs	r1, #0
 8009130:	f7ff bb30 	b.w	8008794 <__ieee754_pow+0x3c>
 8009134:	4650      	mov	r0, sl
 8009136:	4659      	mov	r1, fp
 8009138:	f7ff bb2c 	b.w	8008794 <__ieee754_pow+0x3c>
 800913c:	460c      	mov	r4, r1
 800913e:	f7ff bb79 	b.w	8008834 <__ieee754_pow+0xdc>
 8009142:	2400      	movs	r4, #0
 8009144:	f7ff bb64 	b.w	8008810 <__ieee754_pow+0xb8>
 8009148:	652b82fe 	.word	0x652b82fe
 800914c:	3c971547 	.word	0x3c971547
 8009150:	00000000 	.word	0x00000000
 8009154:	3fe62e43 	.word	0x3fe62e43
 8009158:	fefa39ef 	.word	0xfefa39ef
 800915c:	3fe62e42 	.word	0x3fe62e42
 8009160:	0ca86c39 	.word	0x0ca86c39
 8009164:	be205c61 	.word	0xbe205c61
 8009168:	72bea4d0 	.word	0x72bea4d0
 800916c:	3e663769 	.word	0x3e663769
 8009170:	c5d26bf1 	.word	0xc5d26bf1
 8009174:	3ebbbd41 	.word	0x3ebbbd41
 8009178:	af25de2c 	.word	0xaf25de2c
 800917c:	3f11566a 	.word	0x3f11566a
 8009180:	16bebd93 	.word	0x16bebd93
 8009184:	3f66c16c 	.word	0x3f66c16c
 8009188:	5555553e 	.word	0x5555553e
 800918c:	3fc55555 	.word	0x3fc55555
 8009190:	fff00000 	.word	0xfff00000
 8009194:	3ff00000 	.word	0x3ff00000
 8009198:	4090cbff 	.word	0x4090cbff
 800919c:	3f6f3400 	.word	0x3f6f3400
 80091a0:	4090cc00 	.word	0x4090cc00
 80091a4:	3fe00000 	.word	0x3fe00000

080091a8 <fabs>:
 80091a8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80091ac:	4619      	mov	r1, r3
 80091ae:	4770      	bx	lr

080091b0 <scalbn>:
 80091b0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80091b4:	4616      	mov	r6, r2
 80091b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80091ba:	4683      	mov	fp, r0
 80091bc:	468c      	mov	ip, r1
 80091be:	460b      	mov	r3, r1
 80091c0:	b982      	cbnz	r2, 80091e4 <scalbn+0x34>
 80091c2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80091c6:	4303      	orrs	r3, r0
 80091c8:	d039      	beq.n	800923e <scalbn+0x8e>
 80091ca:	4b2f      	ldr	r3, [pc, #188]	@ (8009288 <scalbn+0xd8>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	f7f7 f97b 	bl	80004c8 <__aeabi_dmul>
 80091d2:	4b2e      	ldr	r3, [pc, #184]	@ (800928c <scalbn+0xdc>)
 80091d4:	4683      	mov	fp, r0
 80091d6:	429e      	cmp	r6, r3
 80091d8:	468c      	mov	ip, r1
 80091da:	da0d      	bge.n	80091f8 <scalbn+0x48>
 80091dc:	a326      	add	r3, pc, #152	@ (adr r3, 8009278 <scalbn+0xc8>)
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	e01b      	b.n	800921c <scalbn+0x6c>
 80091e4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80091e8:	42ba      	cmp	r2, r7
 80091ea:	d109      	bne.n	8009200 <scalbn+0x50>
 80091ec:	4602      	mov	r2, r0
 80091ee:	f7f6 ffb5 	bl	800015c <__adddf3>
 80091f2:	4683      	mov	fp, r0
 80091f4:	468c      	mov	ip, r1
 80091f6:	e022      	b.n	800923e <scalbn+0x8e>
 80091f8:	460b      	mov	r3, r1
 80091fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80091fe:	3a36      	subs	r2, #54	@ 0x36
 8009200:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009204:	428e      	cmp	r6, r1
 8009206:	dd0c      	ble.n	8009222 <scalbn+0x72>
 8009208:	a31d      	add	r3, pc, #116	@ (adr r3, 8009280 <scalbn+0xd0>)
 800920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920e:	461c      	mov	r4, r3
 8009210:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8009214:	f361 74df 	bfi	r4, r1, #31, #1
 8009218:	4621      	mov	r1, r4
 800921a:	481d      	ldr	r0, [pc, #116]	@ (8009290 <scalbn+0xe0>)
 800921c:	f7f7 f954 	bl	80004c8 <__aeabi_dmul>
 8009220:	e7e7      	b.n	80091f2 <scalbn+0x42>
 8009222:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009226:	4432      	add	r2, r6
 8009228:	428a      	cmp	r2, r1
 800922a:	dced      	bgt.n	8009208 <scalbn+0x58>
 800922c:	2a00      	cmp	r2, #0
 800922e:	dd0a      	ble.n	8009246 <scalbn+0x96>
 8009230:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009234:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009238:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800923c:	46ac      	mov	ip, r5
 800923e:	4658      	mov	r0, fp
 8009240:	4661      	mov	r1, ip
 8009242:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8009246:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800924a:	da09      	bge.n	8009260 <scalbn+0xb0>
 800924c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8009250:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8009254:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8009258:	480e      	ldr	r0, [pc, #56]	@ (8009294 <scalbn+0xe4>)
 800925a:	f041 011f 	orr.w	r1, r1, #31
 800925e:	e7bd      	b.n	80091dc <scalbn+0x2c>
 8009260:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009264:	3236      	adds	r2, #54	@ 0x36
 8009266:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800926a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800926e:	4658      	mov	r0, fp
 8009270:	4629      	mov	r1, r5
 8009272:	2200      	movs	r2, #0
 8009274:	4b08      	ldr	r3, [pc, #32]	@ (8009298 <scalbn+0xe8>)
 8009276:	e7d1      	b.n	800921c <scalbn+0x6c>
 8009278:	c2f8f359 	.word	0xc2f8f359
 800927c:	01a56e1f 	.word	0x01a56e1f
 8009280:	8800759c 	.word	0x8800759c
 8009284:	7e37e43c 	.word	0x7e37e43c
 8009288:	43500000 	.word	0x43500000
 800928c:	ffff3cb0 	.word	0xffff3cb0
 8009290:	8800759c 	.word	0x8800759c
 8009294:	c2f8f359 	.word	0xc2f8f359
 8009298:	3c900000 	.word	0x3c900000

0800929c <with_errno>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	4604      	mov	r4, r0
 80092a0:	460d      	mov	r5, r1
 80092a2:	4616      	mov	r6, r2
 80092a4:	f7ff f92e 	bl	8008504 <__errno>
 80092a8:	4629      	mov	r1, r5
 80092aa:	6006      	str	r6, [r0, #0]
 80092ac:	4620      	mov	r0, r4
 80092ae:	bd70      	pop	{r4, r5, r6, pc}

080092b0 <xflow>:
 80092b0:	b513      	push	{r0, r1, r4, lr}
 80092b2:	4604      	mov	r4, r0
 80092b4:	4619      	mov	r1, r3
 80092b6:	4610      	mov	r0, r2
 80092b8:	b10c      	cbz	r4, 80092be <xflow+0xe>
 80092ba:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80092be:	e9cd 2300 	strd	r2, r3, [sp]
 80092c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092c6:	f7f7 f8ff 	bl	80004c8 <__aeabi_dmul>
 80092ca:	2222      	movs	r2, #34	@ 0x22
 80092cc:	b002      	add	sp, #8
 80092ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092d2:	f7ff bfe3 	b.w	800929c <with_errno>

080092d6 <__math_uflow>:
 80092d6:	2200      	movs	r2, #0
 80092d8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80092dc:	f7ff bfe8 	b.w	80092b0 <xflow>

080092e0 <__math_oflow>:
 80092e0:	2200      	movs	r2, #0
 80092e2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80092e6:	f7ff bfe3 	b.w	80092b0 <xflow>
	...

080092ec <__ieee754_sqrt>:
 80092ec:	4a67      	ldr	r2, [pc, #412]	@ (800948c <__ieee754_sqrt+0x1a0>)
 80092ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f2:	438a      	bics	r2, r1
 80092f4:	4606      	mov	r6, r0
 80092f6:	460f      	mov	r7, r1
 80092f8:	460b      	mov	r3, r1
 80092fa:	4604      	mov	r4, r0
 80092fc:	d10e      	bne.n	800931c <__ieee754_sqrt+0x30>
 80092fe:	4602      	mov	r2, r0
 8009300:	f7f7 f8e2 	bl	80004c8 <__aeabi_dmul>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4630      	mov	r0, r6
 800930a:	4639      	mov	r1, r7
 800930c:	f7f6 ff26 	bl	800015c <__adddf3>
 8009310:	4606      	mov	r6, r0
 8009312:	460f      	mov	r7, r1
 8009314:	4630      	mov	r0, r6
 8009316:	4639      	mov	r1, r7
 8009318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931c:	2900      	cmp	r1, #0
 800931e:	dc0c      	bgt.n	800933a <__ieee754_sqrt+0x4e>
 8009320:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009324:	4302      	orrs	r2, r0
 8009326:	d0f5      	beq.n	8009314 <__ieee754_sqrt+0x28>
 8009328:	b189      	cbz	r1, 800934e <__ieee754_sqrt+0x62>
 800932a:	4602      	mov	r2, r0
 800932c:	f7f6 ff14 	bl	8000158 <__aeabi_dsub>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	f7f7 f9f2 	bl	800071c <__aeabi_ddiv>
 8009338:	e7ea      	b.n	8009310 <__ieee754_sqrt+0x24>
 800933a:	150a      	asrs	r2, r1, #20
 800933c:	d115      	bne.n	800936a <__ieee754_sqrt+0x7e>
 800933e:	2100      	movs	r1, #0
 8009340:	e009      	b.n	8009356 <__ieee754_sqrt+0x6a>
 8009342:	0ae3      	lsrs	r3, r4, #11
 8009344:	3a15      	subs	r2, #21
 8009346:	0564      	lsls	r4, r4, #21
 8009348:	2b00      	cmp	r3, #0
 800934a:	d0fa      	beq.n	8009342 <__ieee754_sqrt+0x56>
 800934c:	e7f7      	b.n	800933e <__ieee754_sqrt+0x52>
 800934e:	460a      	mov	r2, r1
 8009350:	e7fa      	b.n	8009348 <__ieee754_sqrt+0x5c>
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	3101      	adds	r1, #1
 8009356:	02d8      	lsls	r0, r3, #11
 8009358:	d5fb      	bpl.n	8009352 <__ieee754_sqrt+0x66>
 800935a:	1e48      	subs	r0, r1, #1
 800935c:	1a12      	subs	r2, r2, r0
 800935e:	f1c1 0020 	rsb	r0, r1, #32
 8009362:	fa24 f000 	lsr.w	r0, r4, r0
 8009366:	4303      	orrs	r3, r0
 8009368:	408c      	lsls	r4, r1
 800936a:	2600      	movs	r6, #0
 800936c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009370:	2116      	movs	r1, #22
 8009372:	07d2      	lsls	r2, r2, #31
 8009374:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009378:	4632      	mov	r2, r6
 800937a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800937e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009382:	bf5c      	itt	pl
 8009384:	005b      	lslpl	r3, r3, #1
 8009386:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800938a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800938e:	bf58      	it	pl
 8009390:	0064      	lslpl	r4, r4, #1
 8009392:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009396:	107f      	asrs	r7, r7, #1
 8009398:	0064      	lsls	r4, r4, #1
 800939a:	1815      	adds	r5, r2, r0
 800939c:	429d      	cmp	r5, r3
 800939e:	bfde      	ittt	le
 80093a0:	182a      	addle	r2, r5, r0
 80093a2:	1b5b      	suble	r3, r3, r5
 80093a4:	1836      	addle	r6, r6, r0
 80093a6:	0fe5      	lsrs	r5, r4, #31
 80093a8:	3901      	subs	r1, #1
 80093aa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80093ae:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80093b2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80093b6:	d1f0      	bne.n	800939a <__ieee754_sqrt+0xae>
 80093b8:	460d      	mov	r5, r1
 80093ba:	f04f 0a20 	mov.w	sl, #32
 80093be:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80093c2:	429a      	cmp	r2, r3
 80093c4:	eb01 0c00 	add.w	ip, r1, r0
 80093c8:	db02      	blt.n	80093d0 <__ieee754_sqrt+0xe4>
 80093ca:	d113      	bne.n	80093f4 <__ieee754_sqrt+0x108>
 80093cc:	45a4      	cmp	ip, r4
 80093ce:	d811      	bhi.n	80093f4 <__ieee754_sqrt+0x108>
 80093d0:	f1bc 0f00 	cmp.w	ip, #0
 80093d4:	eb0c 0100 	add.w	r1, ip, r0
 80093d8:	da42      	bge.n	8009460 <__ieee754_sqrt+0x174>
 80093da:	2900      	cmp	r1, #0
 80093dc:	db40      	blt.n	8009460 <__ieee754_sqrt+0x174>
 80093de:	f102 0e01 	add.w	lr, r2, #1
 80093e2:	1a9b      	subs	r3, r3, r2
 80093e4:	4672      	mov	r2, lr
 80093e6:	45a4      	cmp	ip, r4
 80093e8:	bf88      	it	hi
 80093ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80093ee:	eba4 040c 	sub.w	r4, r4, ip
 80093f2:	4405      	add	r5, r0
 80093f4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80093f8:	f1ba 0a01 	subs.w	sl, sl, #1
 80093fc:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009400:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009404:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009408:	d1db      	bne.n	80093c2 <__ieee754_sqrt+0xd6>
 800940a:	431c      	orrs	r4, r3
 800940c:	d01a      	beq.n	8009444 <__ieee754_sqrt+0x158>
 800940e:	4c20      	ldr	r4, [pc, #128]	@ (8009490 <__ieee754_sqrt+0x1a4>)
 8009410:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8009494 <__ieee754_sqrt+0x1a8>
 8009414:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009418:	e9db 2300 	ldrd	r2, r3, [fp]
 800941c:	f7f6 fe9c 	bl	8000158 <__aeabi_dsub>
 8009420:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4640      	mov	r0, r8
 800942a:	4649      	mov	r1, r9
 800942c:	f7f7 fac8 	bl	80009c0 <__aeabi_dcmple>
 8009430:	b140      	cbz	r0, 8009444 <__ieee754_sqrt+0x158>
 8009432:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009436:	e9db 2300 	ldrd	r2, r3, [fp]
 800943a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800943e:	d111      	bne.n	8009464 <__ieee754_sqrt+0x178>
 8009440:	4655      	mov	r5, sl
 8009442:	3601      	adds	r6, #1
 8009444:	1072      	asrs	r2, r6, #1
 8009446:	086b      	lsrs	r3, r5, #1
 8009448:	07f1      	lsls	r1, r6, #31
 800944a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800944e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009452:	bf48      	it	mi
 8009454:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009458:	4618      	mov	r0, r3
 800945a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800945e:	e757      	b.n	8009310 <__ieee754_sqrt+0x24>
 8009460:	4696      	mov	lr, r2
 8009462:	e7be      	b.n	80093e2 <__ieee754_sqrt+0xf6>
 8009464:	f7f6 fe7a 	bl	800015c <__adddf3>
 8009468:	e9d4 8900 	ldrd	r8, r9, [r4]
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4640      	mov	r0, r8
 8009472:	4649      	mov	r1, r9
 8009474:	f7f7 fa9a 	bl	80009ac <__aeabi_dcmplt>
 8009478:	b120      	cbz	r0, 8009484 <__ieee754_sqrt+0x198>
 800947a:	1ca8      	adds	r0, r5, #2
 800947c:	bf08      	it	eq
 800947e:	3601      	addeq	r6, #1
 8009480:	3502      	adds	r5, #2
 8009482:	e7df      	b.n	8009444 <__ieee754_sqrt+0x158>
 8009484:	1c6b      	adds	r3, r5, #1
 8009486:	f023 0501 	bic.w	r5, r3, #1
 800948a:	e7db      	b.n	8009444 <__ieee754_sqrt+0x158>
 800948c:	7ff00000 	.word	0x7ff00000
 8009490:	20000078 	.word	0x20000078
 8009494:	20000070 	.word	0x20000070

08009498 <_init>:
 8009498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949a:	bf00      	nop
 800949c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800949e:	bc08      	pop	{r3}
 80094a0:	469e      	mov	lr, r3
 80094a2:	4770      	bx	lr

080094a4 <_fini>:
 80094a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a6:	bf00      	nop
 80094a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094aa:	bc08      	pop	{r3}
 80094ac:	469e      	mov	lr, r3
 80094ae:	4770      	bx	lr
