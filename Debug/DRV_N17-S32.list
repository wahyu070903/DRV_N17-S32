
DRV_N17-S32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008854  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08008964  08008964  00009964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a10  08008a10  0000a064  2**0
                  CONTENTS
  4 .ARM          00000000  08008a10  08008a10  0000a064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a10  08008a10  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a10  08008a10  00009a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a14  08008a14  00009a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08008a18  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b24  20000064  08008a7c  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b88  08008a7c  0000ab88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185e5  00000000  00000000  0000a08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039c5  00000000  00000000  00022672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00026038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000104f  00000000  00000000  00027518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a663  00000000  00000000  00028567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019712  00000000  00000000  00042bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000961f4  00000000  00000000  0005c2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f24d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b80  00000000  00000000  000f2514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f8094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	0800894c 	.word	0x0800894c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	0800894c 	.word	0x0800894c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_d2uiz>:
 80004c8:	004a      	lsls	r2, r1, #1
 80004ca:	d211      	bcs.n	80004f0 <__aeabi_d2uiz+0x28>
 80004cc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80004d0:	d211      	bcs.n	80004f6 <__aeabi_d2uiz+0x2e>
 80004d2:	d50d      	bpl.n	80004f0 <__aeabi_d2uiz+0x28>
 80004d4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80004d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004dc:	d40e      	bmi.n	80004fc <__aeabi_d2uiz+0x34>
 80004de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	4770      	bx	lr
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	4770      	bx	lr
 80004f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fa:	d102      	bne.n	8000502 <__aeabi_d2uiz+0x3a>
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000500:	4770      	bx	lr
 8000502:	f04f 0000 	mov.w	r0, #0
 8000506:	4770      	bx	lr

08000508 <__aeabi_frsub>:
 8000508:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800050c:	e002      	b.n	8000514 <__addsf3>
 800050e:	bf00      	nop

08000510 <__aeabi_fsub>:
 8000510:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000514 <__addsf3>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	bf1f      	itttt	ne
 8000518:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800051c:	ea92 0f03 	teqne	r2, r3
 8000520:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000524:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000528:	d06a      	beq.n	8000600 <__addsf3+0xec>
 800052a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800052e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000532:	bfc1      	itttt	gt
 8000534:	18d2      	addgt	r2, r2, r3
 8000536:	4041      	eorgt	r1, r0
 8000538:	4048      	eorgt	r0, r1
 800053a:	4041      	eorgt	r1, r0
 800053c:	bfb8      	it	lt
 800053e:	425b      	neglt	r3, r3
 8000540:	2b19      	cmp	r3, #25
 8000542:	bf88      	it	hi
 8000544:	4770      	bxhi	lr
 8000546:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800054a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800054e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000552:	bf18      	it	ne
 8000554:	4240      	negne	r0, r0
 8000556:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800055a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800055e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000562:	bf18      	it	ne
 8000564:	4249      	negne	r1, r1
 8000566:	ea92 0f03 	teq	r2, r3
 800056a:	d03f      	beq.n	80005ec <__addsf3+0xd8>
 800056c:	f1a2 0201 	sub.w	r2, r2, #1
 8000570:	fa41 fc03 	asr.w	ip, r1, r3
 8000574:	eb10 000c 	adds.w	r0, r0, ip
 8000578:	f1c3 0320 	rsb	r3, r3, #32
 800057c:	fa01 f103 	lsl.w	r1, r1, r3
 8000580:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000584:	d502      	bpl.n	800058c <__addsf3+0x78>
 8000586:	4249      	negs	r1, r1
 8000588:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800058c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000590:	d313      	bcc.n	80005ba <__addsf3+0xa6>
 8000592:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000596:	d306      	bcc.n	80005a6 <__addsf3+0x92>
 8000598:	0840      	lsrs	r0, r0, #1
 800059a:	ea4f 0131 	mov.w	r1, r1, rrx
 800059e:	f102 0201 	add.w	r2, r2, #1
 80005a2:	2afe      	cmp	r2, #254	@ 0xfe
 80005a4:	d251      	bcs.n	800064a <__addsf3+0x136>
 80005a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80005aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005ae:	bf08      	it	eq
 80005b0:	f020 0001 	biceq.w	r0, r0, #1
 80005b4:	ea40 0003 	orr.w	r0, r0, r3
 80005b8:	4770      	bx	lr
 80005ba:	0049      	lsls	r1, r1, #1
 80005bc:	eb40 0000 	adc.w	r0, r0, r0
 80005c0:	3a01      	subs	r2, #1
 80005c2:	bf28      	it	cs
 80005c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80005c8:	d2ed      	bcs.n	80005a6 <__addsf3+0x92>
 80005ca:	fab0 fc80 	clz	ip, r0
 80005ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80005d2:	ebb2 020c 	subs.w	r2, r2, ip
 80005d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80005da:	bfaa      	itet	ge
 80005dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005e0:	4252      	neglt	r2, r2
 80005e2:	4318      	orrge	r0, r3
 80005e4:	bfbc      	itt	lt
 80005e6:	40d0      	lsrlt	r0, r2
 80005e8:	4318      	orrlt	r0, r3
 80005ea:	4770      	bx	lr
 80005ec:	f092 0f00 	teq	r2, #0
 80005f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005f4:	bf06      	itte	eq
 80005f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005fa:	3201      	addeq	r2, #1
 80005fc:	3b01      	subne	r3, #1
 80005fe:	e7b5      	b.n	800056c <__addsf3+0x58>
 8000600:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000604:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000608:	bf18      	it	ne
 800060a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800060e:	d021      	beq.n	8000654 <__addsf3+0x140>
 8000610:	ea92 0f03 	teq	r2, r3
 8000614:	d004      	beq.n	8000620 <__addsf3+0x10c>
 8000616:	f092 0f00 	teq	r2, #0
 800061a:	bf08      	it	eq
 800061c:	4608      	moveq	r0, r1
 800061e:	4770      	bx	lr
 8000620:	ea90 0f01 	teq	r0, r1
 8000624:	bf1c      	itt	ne
 8000626:	2000      	movne	r0, #0
 8000628:	4770      	bxne	lr
 800062a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800062e:	d104      	bne.n	800063a <__addsf3+0x126>
 8000630:	0040      	lsls	r0, r0, #1
 8000632:	bf28      	it	cs
 8000634:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000638:	4770      	bx	lr
 800063a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800063e:	bf3c      	itt	cc
 8000640:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000644:	4770      	bxcc	lr
 8000646:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800064a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800064e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000652:	4770      	bx	lr
 8000654:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000658:	bf16      	itet	ne
 800065a:	4608      	movne	r0, r1
 800065c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000660:	4601      	movne	r1, r0
 8000662:	0242      	lsls	r2, r0, #9
 8000664:	bf06      	itte	eq
 8000666:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800066a:	ea90 0f01 	teqeq	r0, r1
 800066e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000672:	4770      	bx	lr

08000674 <__aeabi_ui2f>:
 8000674:	f04f 0300 	mov.w	r3, #0
 8000678:	e004      	b.n	8000684 <__aeabi_i2f+0x8>
 800067a:	bf00      	nop

0800067c <__aeabi_i2f>:
 800067c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000680:	bf48      	it	mi
 8000682:	4240      	negmi	r0, r0
 8000684:	ea5f 0c00 	movs.w	ip, r0
 8000688:	bf08      	it	eq
 800068a:	4770      	bxeq	lr
 800068c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000690:	4601      	mov	r1, r0
 8000692:	f04f 0000 	mov.w	r0, #0
 8000696:	e01c      	b.n	80006d2 <__aeabi_l2f+0x2a>

08000698 <__aeabi_ul2f>:
 8000698:	ea50 0201 	orrs.w	r2, r0, r1
 800069c:	bf08      	it	eq
 800069e:	4770      	bxeq	lr
 80006a0:	f04f 0300 	mov.w	r3, #0
 80006a4:	e00a      	b.n	80006bc <__aeabi_l2f+0x14>
 80006a6:	bf00      	nop

080006a8 <__aeabi_l2f>:
 80006a8:	ea50 0201 	orrs.w	r2, r0, r1
 80006ac:	bf08      	it	eq
 80006ae:	4770      	bxeq	lr
 80006b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80006b4:	d502      	bpl.n	80006bc <__aeabi_l2f+0x14>
 80006b6:	4240      	negs	r0, r0
 80006b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006bc:	ea5f 0c01 	movs.w	ip, r1
 80006c0:	bf02      	ittt	eq
 80006c2:	4684      	moveq	ip, r0
 80006c4:	4601      	moveq	r1, r0
 80006c6:	2000      	moveq	r0, #0
 80006c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80006cc:	bf08      	it	eq
 80006ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80006d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80006d6:	fabc f28c 	clz	r2, ip
 80006da:	3a08      	subs	r2, #8
 80006dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006e0:	db10      	blt.n	8000704 <__aeabi_l2f+0x5c>
 80006e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80006e6:	4463      	add	r3, ip
 80006e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80006ec:	f1c2 0220 	rsb	r2, r2, #32
 80006f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006f4:	fa20 f202 	lsr.w	r2, r0, r2
 80006f8:	eb43 0002 	adc.w	r0, r3, r2
 80006fc:	bf08      	it	eq
 80006fe:	f020 0001 	biceq.w	r0, r0, #1
 8000702:	4770      	bx	lr
 8000704:	f102 0220 	add.w	r2, r2, #32
 8000708:	fa01 fc02 	lsl.w	ip, r1, r2
 800070c:	f1c2 0220 	rsb	r2, r2, #32
 8000710:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000714:	fa21 f202 	lsr.w	r2, r1, r2
 8000718:	eb43 0002 	adc.w	r0, r3, r2
 800071c:	bf08      	it	eq
 800071e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000722:	4770      	bx	lr

08000724 <__aeabi_fmul>:
 8000724:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000728:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800072c:	bf1e      	ittt	ne
 800072e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000732:	ea92 0f0c 	teqne	r2, ip
 8000736:	ea93 0f0c 	teqne	r3, ip
 800073a:	d06f      	beq.n	800081c <__aeabi_fmul+0xf8>
 800073c:	441a      	add	r2, r3
 800073e:	ea80 0c01 	eor.w	ip, r0, r1
 8000742:	0240      	lsls	r0, r0, #9
 8000744:	bf18      	it	ne
 8000746:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800074a:	d01e      	beq.n	800078a <__aeabi_fmul+0x66>
 800074c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000750:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000754:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000758:	fba0 3101 	umull	r3, r1, r0, r1
 800075c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000760:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000764:	bf3e      	ittt	cc
 8000766:	0049      	lslcc	r1, r1, #1
 8000768:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800076c:	005b      	lslcc	r3, r3, #1
 800076e:	ea40 0001 	orr.w	r0, r0, r1
 8000772:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000776:	2afd      	cmp	r2, #253	@ 0xfd
 8000778:	d81d      	bhi.n	80007b6 <__aeabi_fmul+0x92>
 800077a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800077e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000782:	bf08      	it	eq
 8000784:	f020 0001 	biceq.w	r0, r0, #1
 8000788:	4770      	bx	lr
 800078a:	f090 0f00 	teq	r0, #0
 800078e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000792:	bf08      	it	eq
 8000794:	0249      	lsleq	r1, r1, #9
 8000796:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800079a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800079e:	3a7f      	subs	r2, #127	@ 0x7f
 80007a0:	bfc2      	ittt	gt
 80007a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80007a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80007aa:	4770      	bxgt	lr
 80007ac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007b0:	f04f 0300 	mov.w	r3, #0
 80007b4:	3a01      	subs	r2, #1
 80007b6:	dc5d      	bgt.n	8000874 <__aeabi_fmul+0x150>
 80007b8:	f112 0f19 	cmn.w	r2, #25
 80007bc:	bfdc      	itt	le
 80007be:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80007c2:	4770      	bxle	lr
 80007c4:	f1c2 0200 	rsb	r2, r2, #0
 80007c8:	0041      	lsls	r1, r0, #1
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	f1c2 0220 	rsb	r2, r2, #32
 80007d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80007d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80007da:	f140 0000 	adc.w	r0, r0, #0
 80007de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007e2:	bf08      	it	eq
 80007e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007e8:	4770      	bx	lr
 80007ea:	f092 0f00 	teq	r2, #0
 80007ee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007f2:	bf02      	ittt	eq
 80007f4:	0040      	lsleq	r0, r0, #1
 80007f6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80007fa:	3a01      	subeq	r2, #1
 80007fc:	d0f9      	beq.n	80007f2 <__aeabi_fmul+0xce>
 80007fe:	ea40 000c 	orr.w	r0, r0, ip
 8000802:	f093 0f00 	teq	r3, #0
 8000806:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800080a:	bf02      	ittt	eq
 800080c:	0049      	lsleq	r1, r1, #1
 800080e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000812:	3b01      	subeq	r3, #1
 8000814:	d0f9      	beq.n	800080a <__aeabi_fmul+0xe6>
 8000816:	ea41 010c 	orr.w	r1, r1, ip
 800081a:	e78f      	b.n	800073c <__aeabi_fmul+0x18>
 800081c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000820:	ea92 0f0c 	teq	r2, ip
 8000824:	bf18      	it	ne
 8000826:	ea93 0f0c 	teqne	r3, ip
 800082a:	d00a      	beq.n	8000842 <__aeabi_fmul+0x11e>
 800082c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000830:	bf18      	it	ne
 8000832:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000836:	d1d8      	bne.n	80007ea <__aeabi_fmul+0xc6>
 8000838:	ea80 0001 	eor.w	r0, r0, r1
 800083c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000840:	4770      	bx	lr
 8000842:	f090 0f00 	teq	r0, #0
 8000846:	bf17      	itett	ne
 8000848:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800084c:	4608      	moveq	r0, r1
 800084e:	f091 0f00 	teqne	r1, #0
 8000852:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000856:	d014      	beq.n	8000882 <__aeabi_fmul+0x15e>
 8000858:	ea92 0f0c 	teq	r2, ip
 800085c:	d101      	bne.n	8000862 <__aeabi_fmul+0x13e>
 800085e:	0242      	lsls	r2, r0, #9
 8000860:	d10f      	bne.n	8000882 <__aeabi_fmul+0x15e>
 8000862:	ea93 0f0c 	teq	r3, ip
 8000866:	d103      	bne.n	8000870 <__aeabi_fmul+0x14c>
 8000868:	024b      	lsls	r3, r1, #9
 800086a:	bf18      	it	ne
 800086c:	4608      	movne	r0, r1
 800086e:	d108      	bne.n	8000882 <__aeabi_fmul+0x15e>
 8000870:	ea80 0001 	eor.w	r0, r0, r1
 8000874:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000880:	4770      	bx	lr
 8000882:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000886:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800088a:	4770      	bx	lr

0800088c <__aeabi_fdiv>:
 800088c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000890:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000894:	bf1e      	ittt	ne
 8000896:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800089a:	ea92 0f0c 	teqne	r2, ip
 800089e:	ea93 0f0c 	teqne	r3, ip
 80008a2:	d069      	beq.n	8000978 <__aeabi_fdiv+0xec>
 80008a4:	eba2 0203 	sub.w	r2, r2, r3
 80008a8:	ea80 0c01 	eor.w	ip, r0, r1
 80008ac:	0249      	lsls	r1, r1, #9
 80008ae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80008b2:	d037      	beq.n	8000924 <__aeabi_fdiv+0x98>
 80008b4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80008b8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80008bc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80008c0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008c4:	428b      	cmp	r3, r1
 80008c6:	bf38      	it	cc
 80008c8:	005b      	lslcc	r3, r3, #1
 80008ca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80008ce:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80008d2:	428b      	cmp	r3, r1
 80008d4:	bf24      	itt	cs
 80008d6:	1a5b      	subcs	r3, r3, r1
 80008d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008dc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008e0:	bf24      	itt	cs
 80008e2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008e6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008ee:	bf24      	itt	cs
 80008f0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008fc:	bf24      	itt	cs
 80008fe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000902:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	bf18      	it	ne
 800090a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800090e:	d1e0      	bne.n	80008d2 <__aeabi_fdiv+0x46>
 8000910:	2afd      	cmp	r2, #253	@ 0xfd
 8000912:	f63f af50 	bhi.w	80007b6 <__aeabi_fmul+0x92>
 8000916:	428b      	cmp	r3, r1
 8000918:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000928:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800092c:	327f      	adds	r2, #127	@ 0x7f
 800092e:	bfc2      	ittt	gt
 8000930:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000934:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000938:	4770      	bxgt	lr
 800093a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800093e:	f04f 0300 	mov.w	r3, #0
 8000942:	3a01      	subs	r2, #1
 8000944:	e737      	b.n	80007b6 <__aeabi_fmul+0x92>
 8000946:	f092 0f00 	teq	r2, #0
 800094a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800094e:	bf02      	ittt	eq
 8000950:	0040      	lsleq	r0, r0, #1
 8000952:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000956:	3a01      	subeq	r2, #1
 8000958:	d0f9      	beq.n	800094e <__aeabi_fdiv+0xc2>
 800095a:	ea40 000c 	orr.w	r0, r0, ip
 800095e:	f093 0f00 	teq	r3, #0
 8000962:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000966:	bf02      	ittt	eq
 8000968:	0049      	lsleq	r1, r1, #1
 800096a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800096e:	3b01      	subeq	r3, #1
 8000970:	d0f9      	beq.n	8000966 <__aeabi_fdiv+0xda>
 8000972:	ea41 010c 	orr.w	r1, r1, ip
 8000976:	e795      	b.n	80008a4 <__aeabi_fdiv+0x18>
 8000978:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800097c:	ea92 0f0c 	teq	r2, ip
 8000980:	d108      	bne.n	8000994 <__aeabi_fdiv+0x108>
 8000982:	0242      	lsls	r2, r0, #9
 8000984:	f47f af7d 	bne.w	8000882 <__aeabi_fmul+0x15e>
 8000988:	ea93 0f0c 	teq	r3, ip
 800098c:	f47f af70 	bne.w	8000870 <__aeabi_fmul+0x14c>
 8000990:	4608      	mov	r0, r1
 8000992:	e776      	b.n	8000882 <__aeabi_fmul+0x15e>
 8000994:	ea93 0f0c 	teq	r3, ip
 8000998:	d104      	bne.n	80009a4 <__aeabi_fdiv+0x118>
 800099a:	024b      	lsls	r3, r1, #9
 800099c:	f43f af4c 	beq.w	8000838 <__aeabi_fmul+0x114>
 80009a0:	4608      	mov	r0, r1
 80009a2:	e76e      	b.n	8000882 <__aeabi_fmul+0x15e>
 80009a4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80009a8:	bf18      	it	ne
 80009aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80009ae:	d1ca      	bne.n	8000946 <__aeabi_fdiv+0xba>
 80009b0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80009b4:	f47f af5c 	bne.w	8000870 <__aeabi_fmul+0x14c>
 80009b8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80009bc:	f47f af3c 	bne.w	8000838 <__aeabi_fmul+0x114>
 80009c0:	e75f      	b.n	8000882 <__aeabi_fmul+0x15e>
 80009c2:	bf00      	nop

080009c4 <__gesf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpsf2+0x4>
 80009ca:	bf00      	nop

080009cc <__lesf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpsf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpsf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ee:	d011      	beq.n	8000a14 <__cmpsf2+0x40>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009f6:	bf18      	it	ne
 80009f8:	ea90 0f01 	teqne	r0, r1
 80009fc:	bf58      	it	pl
 80009fe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a02:	bf88      	it	hi
 8000a04:	17c8      	asrhi	r0, r1, #31
 8000a06:	bf38      	it	cc
 8000a08:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a0c:	bf18      	it	ne
 8000a0e:	f040 0001 	orrne.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a18:	d102      	bne.n	8000a20 <__cmpsf2+0x4c>
 8000a1a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a1e:	d105      	bne.n	8000a2c <__cmpsf2+0x58>
 8000a20:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a24:	d1e4      	bne.n	80009f0 <__cmpsf2+0x1c>
 8000a26:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a2a:	d0e1      	beq.n	80009f0 <__cmpsf2+0x1c>
 8000a2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <__aeabi_cfrcmple>:
 8000a34:	4684      	mov	ip, r0
 8000a36:	4608      	mov	r0, r1
 8000a38:	4661      	mov	r1, ip
 8000a3a:	e7ff      	b.n	8000a3c <__aeabi_cfcmpeq>

08000a3c <__aeabi_cfcmpeq>:
 8000a3c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a3e:	f7ff ffc9 	bl	80009d4 <__cmpsf2>
 8000a42:	2800      	cmp	r0, #0
 8000a44:	bf48      	it	mi
 8000a46:	f110 0f00 	cmnmi.w	r0, #0
 8000a4a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a4c <__aeabi_fcmpeq>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff fff4 	bl	8000a3c <__aeabi_cfcmpeq>
 8000a54:	bf0c      	ite	eq
 8000a56:	2001      	moveq	r0, #1
 8000a58:	2000      	movne	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_fcmplt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffea 	bl	8000a3c <__aeabi_cfcmpeq>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_fcmple>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffe0 	bl	8000a3c <__aeabi_cfcmpeq>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_fcmpge>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffd2 	bl	8000a34 <__aeabi_cfrcmple>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fcmpgt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffc8 	bl	8000a34 <__aeabi_cfrcmple>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <encChangeDir>:
uint8_t raw_buffer[2] = {0};
uint16_t encoderReadings[FILTER_SIZE];
uint16_t filterIndex = 0;
uint16_t filteredValue = 0;

void encChangeDir(uint8_t direction){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	if(direction == 1){
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d108      	bne.n	8000ad2 <encChangeDir+0x22>
		//Clockwise
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	480a      	ldr	r0, [pc, #40]	@ (8000af0 <encChangeDir+0x40>)
 8000ac6:	f001 fb43 	bl	8002150 <HAL_GPIO_WritePin>
		rotation_direction = 1;
 8000aca:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <encChangeDir+0x44>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
	}else if (direction == 0){
		//Counter clockwise
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
		rotation_direction = 0;
	}
}
 8000ad0:	e00a      	b.n	8000ae8 <encChangeDir+0x38>
	}else if (direction == 0){
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d107      	bne.n	8000ae8 <encChangeDir+0x38>
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2120      	movs	r1, #32
 8000adc:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <encChangeDir+0x40>)
 8000ade:	f001 fb37 	bl	8002150 <HAL_GPIO_WritePin>
		rotation_direction = 0;
 8000ae2:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <encChangeDir+0x44>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	20000080 	.word	0x20000080

08000af8 <encRead>:
	float angle_deg = (angle * 360.0) / 4096.0;

	*result = angle_deg;
}

void encRead(){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, (ENC_ADDR << 1), AS5600_RAW_ANGLE_MSB_REG, I2C_MEMADD_SIZE_8BIT, raw_buffer, 2);
 8000afe:	2302      	movs	r3, #2
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <encRead+0x20>)
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2301      	movs	r3, #1
 8000b08:	220c      	movs	r2, #12
 8000b0a:	216c      	movs	r1, #108	@ 0x6c
 8000b0c:	4803      	ldr	r0, [pc, #12]	@ (8000b1c <encRead+0x24>)
 8000b0e:	f001 fc8f 	bl	8002430 <HAL_I2C_Mem_Read_DMA>
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000088 	.word	0x20000088
 8000b1c:	20000b34 	.word	0x20000b34

08000b20 <getCounter>:

int32_t getCounter(){
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	return accumulate_counter;
 8000b24:	4b02      	ldr	r3, [pc, #8]	@ (8000b30 <getCounter+0x10>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	20000084 	.word	0x20000084

08000b34 <lowPassFilter>:

uint16_t lowPassFilter(uint16_t newData){
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80fb      	strh	r3, [r7, #6]
	encoderReadings[filterIndex] = newData;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb0 <lowPassFilter+0x7c>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	4619      	mov	r1, r3
 8000b44:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb4 <lowPassFilter+0x80>)
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	filterIndex = (filterIndex + 1) % FILTER_SIZE;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <lowPassFilter+0x7c>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	425a      	negs	r2, r3
 8000b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b58:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000b5c:	bf58      	it	pl
 8000b5e:	4253      	negpl	r3, r2
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <lowPassFilter+0x7c>)
 8000b64:	801a      	strh	r2, [r3, #0]

	int sum = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTER_SIZE; i++) {
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	e00a      	b.n	8000b86 <lowPassFilter+0x52>
		sum += encoderReadings[i];
 8000b70:	4a10      	ldr	r2, [pc, #64]	@ (8000bb4 <lowPassFilter+0x80>)
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTER_SIZE; i++) {
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	3301      	adds	r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b8c:	dbf0      	blt.n	8000b70 <lowPassFilter+0x3c>
	}

	filteredValue = sum / FILTER_SIZE;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	da01      	bge.n	8000b98 <lowPassFilter+0x64>
 8000b94:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8000b98:	129b      	asrs	r3, r3, #10
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <lowPassFilter+0x84>)
 8000b9e:	801a      	strh	r2, [r3, #0]

	return filteredValue;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <lowPassFilter+0x84>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	2000088c 	.word	0x2000088c
 8000bb4:	2000008c 	.word	0x2000008c
 8000bb8:	2000088e 	.word	0x2000088e

08000bbc <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8000c80 <HAL_I2C_MemRxCpltCallback+0xc4>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d154      	bne.n	8000c78 <HAL_I2C_MemRxCpltCallback+0xbc>
        uint16_t position_now = (raw_buffer[0] << 8) | raw_buffer[1];
 8000bce:	4b2d      	ldr	r3, [pc, #180]	@ (8000c84 <HAL_I2C_MemRxCpltCallback+0xc8>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	b21a      	sxth	r2, r3
 8000bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c84 <HAL_I2C_MemRxCpltCallback+0xc8>)
 8000bd8:	785b      	ldrb	r3, [r3, #1]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	817b      	strh	r3, [r7, #10]
        position_now = lowPassFilter(position_now);
 8000be2:	897b      	ldrh	r3, [r7, #10]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ffa5 	bl	8000b34 <lowPassFilter>
 8000bea:	4603      	mov	r3, r0
 8000bec:	817b      	strh	r3, [r7, #10]
        int32_t delta = (int32_t)(position_now - position_prev);
 8000bee:	897b      	ldrh	r3, [r7, #10]
 8000bf0:	4a25      	ldr	r2, [pc, #148]	@ (8000c88 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8000bf2:	8812      	ldrh	r2, [r2, #0]
 8000bf4:	1a9b      	subs	r3, r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]

        if(rotation_direction){
 8000bf8:	4b24      	ldr	r3, [pc, #144]	@ (8000c8c <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00d      	beq.n	8000c1c <HAL_I2C_MemRxCpltCallback+0x60>
        	if(delta > ENC_PPR/2){
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000c06:	dd03      	ble.n	8000c10 <HAL_I2C_MemRxCpltCallback+0x54>
        		delta -= ENC_PPR;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8000c0e:	60fb      	str	r3, [r7, #12]
        	}
        	delta = abs(delta);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	e00d      	b.n	8000c38 <HAL_I2C_MemRxCpltCallback+0x7c>
        }else{
        	if(delta < -(ENC_PPR/2)){
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8000c22:	da03      	bge.n	8000c2c <HAL_I2C_MemRxCpltCallback+0x70>
        		delta += ENC_PPR;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c2a:	60fb      	str	r3, [r7, #12]
        	}
        	delta = -abs(delta);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bfb8      	it	lt
 8000c32:	425b      	neglt	r3, r3
 8000c34:	425b      	negs	r3, r3
 8000c36:	60fb      	str	r3, [r7, #12]
        }

        accumulate_counter += delta;
 8000c38:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a13      	ldr	r2, [pc, #76]	@ (8000c90 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000c42:	6013      	str	r3, [r2, #0]

        if(accumulate_counter >= ENC_MAX_COUNT){
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	dd06      	ble.n	8000c5c <HAL_I2C_MemRxCpltCallback+0xa0>
			accumulate_counter -= ENC_MAX_COUNT;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8000c54:	4413      	add	r3, r2
 8000c56:	4a0e      	ldr	r2, [pc, #56]	@ (8000c90 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	e00a      	b.n	8000c72 <HAL_I2C_MemRxCpltCallback+0xb6>
		}else if(accumulate_counter < ENC_MIN_COUNT){
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	da05      	bge.n	8000c72 <HAL_I2C_MemRxCpltCallback+0xb6>
			accumulate_counter += ENC_MAX_COUNT;
 8000c66:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <HAL_I2C_MemRxCpltCallback+0xe0>)
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a08      	ldr	r2, [pc, #32]	@ (8000c90 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000c70:	6013      	str	r3, [r2, #0]
		}

        position_prev = position_now;
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8000c74:	897b      	ldrh	r3, [r7, #10]
 8000c76:	8013      	strh	r3, [r2, #0]
    }
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40005400 	.word	0x40005400
 8000c84:	20000088 	.word	0x20000088
 8000c88:	20000082 	.word	0x20000082
 8000c8c:	20000080 	.word	0x20000080
 8000c90:	20000084 	.word	0x20000084
 8000c94:	0098967e 	.word	0x0098967e
 8000c98:	ff676981 	.word	0xff676981
 8000c9c:	0098967f 	.word	0x0098967f

08000ca0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4a06      	ldr	r2, [pc, #24]	@ (8000cc8 <vApplicationGetIdleTaskMemory+0x28>)
 8000cb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <vApplicationGetIdleTaskMemory+0x2c>)
 8000cb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2280      	movs	r2, #128	@ 0x80
 8000cbc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	20000890 	.word	0x20000890
 8000ccc:	20000930 	.word	0x20000930

08000cd0 <i2c_scanbus>:


#include "i2c_bus.h"

/* Blocking function */
void i2c_scanbus(I2C_HandleTypeDef* channel, uint8_t* found_addr){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result;
	static uint8_t counter = 0;
	for(uint8_t i = 0 ; i <= I2C_MAX_NODE ; i++){
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]
 8000cde:	e020      	b.n	8000d22 <i2c_scanbus+0x52>
		result = HAL_I2C_IsDeviceReady(channel, (i << 1), 1, 100);
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	b299      	uxth	r1, r3
 8000ce8:	2364      	movs	r3, #100	@ 0x64
 8000cea:	2201      	movs	r2, #1
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f001 fd25 	bl	800273c <HAL_I2C_IsDeviceReady>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73bb      	strb	r3, [r7, #14]
		if(result == HAL_OK){
 8000cf6:	7bbb      	ldrb	r3, [r7, #14]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10c      	bne.n	8000d16 <i2c_scanbus+0x46>
			found_addr[counter] = i;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <i2c_scanbus+0x64>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	4413      	add	r3, r2
 8000d06:	7bfa      	ldrb	r2, [r7, #15]
 8000d08:	701a      	strb	r2, [r3, #0]
			counter++;
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <i2c_scanbus+0x64>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <i2c_scanbus+0x64>)
 8000d14:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(10);
 8000d16:	200a      	movs	r0, #10
 8000d18:	f000 fce4 	bl	80016e4 <HAL_Delay>
	for(uint8_t i = 0 ; i <= I2C_MAX_NODE ; i++){
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	dada      	bge.n	8000ce0 <i2c_scanbus+0x10>
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000b30 	.word	0x20000b30

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b5b0      	push	{r4, r5, r7, lr}
 8000d3a:	b096      	sub	sp, #88	@ 0x58
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3e:	f000 fc9f 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d42:	f000 f85f 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d46:	f000 f971 	bl	800102c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d4a:	f000 f951 	bl	8000ff0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d4e:	f000 f89f 	bl	8000e90 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000d52:	f000 f8cb 	bl	8000eec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000d56:	f000 f921 	bl	8000f9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_scanbus(&hi2c1, i2c_available);
 8000d5a:	4922      	ldr	r1, [pc, #136]	@ (8000de4 <main+0xac>)
 8000d5c:	4822      	ldr	r0, [pc, #136]	@ (8000de8 <main+0xb0>)
 8000d5e:	f7ff ffb7 	bl	8000cd0 <i2c_scanbus>
  TMC2209_setup();
 8000d62:	f007 fac3 	bl	80082ec <TMC2209_setup>
  TMC2209_setMicrostep(TMC2209_Microsteps_1);
 8000d66:	2008      	movs	r0, #8
 8000d68:	f007 fb42 	bl	80083f0 <TMC2209_setMicrostep>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <main+0xb4>)
 8000d6e:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000d72:	461d      	mov	r5, r3
 8000d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d80:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f006 f88c 	bl	8006ea4 <osThreadCreate>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4a18      	ldr	r2, [pc, #96]	@ (8000df0 <main+0xb8>)
 8000d90:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 8000d92:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <main+0xbc>)
 8000d94:	f107 0420 	add.w	r4, r7, #32
 8000d98:	461d      	mov	r5, r3
 8000d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000da2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 8000da6:	f107 0320 	add.w	r3, r7, #32
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f006 f879 	bl	8006ea4 <osThreadCreate>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a10      	ldr	r2, [pc, #64]	@ (8000df8 <main+0xc0>)
 8000db6:	6013      	str	r3, [r2, #0]

  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 8000db8:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <main+0xc4>)
 8000dba:	1d3c      	adds	r4, r7, #4
 8000dbc:	461d      	mov	r5, r3
 8000dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f006 f868 	bl	8006ea4 <osThreadCreate>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e00 <main+0xc8>)
 8000dd8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000dda:	f006 f85c 	bl	8006e96 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dde:	bf00      	nop
 8000de0:	e7fd      	b.n	8000dde <main+0xa6>
 8000de2:	bf00      	nop
 8000de4:	20000c68 	.word	0x20000c68
 8000de8:	20000b34 	.word	0x20000b34
 8000dec:	08008970 	.word	0x08008970
 8000df0:	20000c5c 	.word	0x20000c5c
 8000df4:	08008998 	.word	0x08008998
 8000df8:	20000c60 	.word	0x20000c60
 8000dfc:	080089c0 	.word	0x080089c0
 8000e00:	20000c64 	.word	0x20000c64

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b090      	sub	sp, #64	@ 0x40
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0318 	add.w	r3, r7, #24
 8000e0e:	2228      	movs	r2, #40	@ 0x28
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f007 fc88 	bl	8008728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e26:	2301      	movs	r3, #1
 8000e28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e34:	2301      	movs	r3, #1
 8000e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e42:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f003 fdfb 	bl	8004a48 <HAL_RCC_OscConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e58:	f000 f9b6 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e60:	2302      	movs	r3, #2
 8000e62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2102      	movs	r1, #2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f004 f868 	bl	8004f4c <HAL_RCC_ClockConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e82:	f000 f9a1 	bl	80011c8 <Error_Handler>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3740      	adds	r7, #64	@ 0x40
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000e96:	4a13      	ldr	r2, [pc, #76]	@ (8000ee4 <MX_I2C1_Init+0x54>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000e9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ee8 <MX_I2C1_Init+0x58>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000eae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <MX_I2C1_Init+0x50>)
 8000ece:	f001 f957 	bl	8002180 <HAL_I2C_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ed8:	f000 f976 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000b34 	.word	0x20000b34
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	00061a80 	.word	0x00061a80

08000eec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef2:	f107 0320 	add.w	r3, r7, #32
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	615a      	str	r2, [r3, #20]
 8000f0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0e:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <MX_TIM2_Init+0xac>)
 8000f10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 8000f16:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <MX_TIM2_Init+0xac>)
 8000f18:	2247      	movs	r2, #71	@ 0x47
 8000f1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <MX_TIM2_Init+0xac>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4 - 1;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <MX_TIM2_Init+0xac>)
 8000f24:	2203      	movs	r2, #3
 8000f26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <MX_TIM2_Init+0xac>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f98 <MX_TIM2_Init+0xac>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f34:	4818      	ldr	r0, [pc, #96]	@ (8000f98 <MX_TIM2_Init+0xac>)
 8000f36:	f004 fa71 	bl	800541c <HAL_TIM_PWM_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000f40:	f000 f942 	bl	80011c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	4619      	mov	r1, r3
 8000f52:	4811      	ldr	r0, [pc, #68]	@ (8000f98 <MX_TIM2_Init+0xac>)
 8000f54:	f005 f83c 	bl	8005fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000f5e:	f000 f933 	bl	80011c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f62:	2360      	movs	r3, #96	@ 0x60
 8000f64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000f66:	2332      	movs	r3, #50	@ 0x32
 8000f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	4619      	mov	r1, r3
 8000f78:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <MX_TIM2_Init+0xac>)
 8000f7a:	f004 fd31 	bl	80059e0 <HAL_TIM_PWM_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000f84:	f000 f920 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f88:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <MX_TIM2_Init+0xac>)
 8000f8a:	f000 f9f9 	bl	8001380 <HAL_TIM_MspPostInit>

}
 8000f8e:	bf00      	nop
 8000f90:	3728      	adds	r7, #40	@ 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000bcc 	.word	0x20000bcc

08000f9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <MX_USART1_UART_Init+0x50>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fa8:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <MX_USART1_UART_Init+0x4c>)
 8000fd4:	f005 f86c 	bl	80060b0 <HAL_HalfDuplex_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fde:	f000 f8f3 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000c14 	.word	0x20000c14
 8000fec:	40013800 	.word	0x40013800

08000ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_DMA_Init+0x38>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <MX_DMA_Init+0x38>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6153      	str	r3, [r2, #20]
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_DMA_Init+0x38>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2105      	movs	r1, #5
 8001012:	2011      	movs	r0, #17
 8001014:	f000 fc3f 	bl	8001896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001018:	2011      	movs	r0, #17
 800101a:	f000 fc58 	bl	80018ce <HAL_NVIC_EnableIRQ>

}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001040:	4b3d      	ldr	r3, [pc, #244]	@ (8001138 <MX_GPIO_Init+0x10c>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a3c      	ldr	r2, [pc, #240]	@ (8001138 <MX_GPIO_Init+0x10c>)
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b3a      	ldr	r3, [pc, #232]	@ (8001138 <MX_GPIO_Init+0x10c>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0310 	and.w	r3, r3, #16
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001058:	4b37      	ldr	r3, [pc, #220]	@ (8001138 <MX_GPIO_Init+0x10c>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a36      	ldr	r2, [pc, #216]	@ (8001138 <MX_GPIO_Init+0x10c>)
 800105e:	f043 0320 	orr.w	r3, r3, #32
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b34      	ldr	r3, [pc, #208]	@ (8001138 <MX_GPIO_Init+0x10c>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0320 	and.w	r3, r3, #32
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b31      	ldr	r3, [pc, #196]	@ (8001138 <MX_GPIO_Init+0x10c>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a30      	ldr	r2, [pc, #192]	@ (8001138 <MX_GPIO_Init+0x10c>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b2e      	ldr	r3, [pc, #184]	@ (8001138 <MX_GPIO_Init+0x10c>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <MX_GPIO_Init+0x10c>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a2a      	ldr	r2, [pc, #168]	@ (8001138 <MX_GPIO_Init+0x10c>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <MX_GPIO_Init+0x10c>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010a6:	4825      	ldr	r0, [pc, #148]	@ (800113c <MX_GPIO_Init+0x110>)
 80010a8:	f001 f852 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2106      	movs	r1, #6
 80010b0:	4823      	ldr	r0, [pc, #140]	@ (8001140 <MX_GPIO_Init+0x114>)
 80010b2:	f001 f84d 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2120      	movs	r1, #32
 80010ba:	4822      	ldr	r0, [pc, #136]	@ (8001144 <MX_GPIO_Init+0x118>)
 80010bc:	f001 f848 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	4619      	mov	r1, r3
 80010d8:	4818      	ldr	r0, [pc, #96]	@ (800113c <MX_GPIO_Init+0x110>)
 80010da:	f000 feb5 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80010de:	2306      	movs	r3, #6
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2302      	movs	r3, #2
 80010ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0310 	add.w	r3, r7, #16
 80010f2:	4619      	mov	r1, r3
 80010f4:	4812      	ldr	r0, [pc, #72]	@ (8001140 <MX_GPIO_Init+0x114>)
 80010f6:	f000 fea7 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010fa:	2310      	movs	r3, #16
 80010fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	480d      	ldr	r0, [pc, #52]	@ (8001144 <MX_GPIO_Init+0x118>)
 800110e:	f000 fe9b 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001112:	2320      	movs	r3, #32
 8001114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2302      	movs	r3, #2
 8001120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4619      	mov	r1, r3
 8001128:	4806      	ldr	r0, [pc, #24]	@ (8001144 <MX_GPIO_Init+0x118>)
 800112a:	f000 fe8d 	bl	8001e48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800112e:	bf00      	nop
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	40011000 	.word	0x40011000
 8001140:	40010800 	.word	0x40010800
 8001144:	40010c00 	.word	0x40010c00

08001148 <StartDriverTask>:

/* USER CODE BEGIN 4 */
void StartDriverTask(void const * argument){
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	for(;;){
//		TMC2209_readChopConfig(&driver_value);
		TMC2209_enable();
 8001150:	f007 f904 	bl	800835c <TMC2209_enable>
		TMC2209_velocity(1.0);
 8001154:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001158:	f007 f972 	bl	8008440 <TMC2209_velocity>
		TMC2209_move();
 800115c:	f007 fa04 	bl	8008568 <TMC2209_move>
		TMC2209_enable();
 8001160:	bf00      	nop
 8001162:	e7f5      	b.n	8001150 <StartDriverTask+0x8>

08001164 <StartEncoderTask>:
//
//		osDelay(100);
	}
}

void StartEncoderTask(void const * argument){
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	for(;;){
		encChangeDir(motor_rotation);
 800116c:	4b07      	ldr	r3, [pc, #28]	@ (800118c <StartEncoderTask+0x28>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fc9c 	bl	8000ab0 <encChangeDir>
		encRead();
 8001178:	f7ff fcbe 	bl	8000af8 <encRead>
		encoder_counter = getCounter();
 800117c:	f7ff fcd0 	bl	8000b20 <getCounter>
 8001180:	4603      	mov	r3, r0
 8001182:	4a03      	ldr	r2, [pc, #12]	@ (8001190 <StartEncoderTask+0x2c>)
 8001184:	6013      	str	r3, [r2, #0]
		encChangeDir(motor_rotation);
 8001186:	bf00      	nop
 8001188:	e7f0      	b.n	800116c <StartEncoderTask+0x8>
 800118a:	bf00      	nop
 800118c:	20000c70 	.word	0x20000c70
 8001190:	20000c6c 	.word	0x20000c6c

08001194 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800119c:	2001      	movs	r0, #1
 800119e:	f005 fecd 	bl	8006f3c <osDelay>
 80011a2:	e7fb      	b.n	800119c <StartDefaultTask+0x8>

080011a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011b6:	f000 fa79 	bl	80016ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40012c00 	.word	0x40012c00

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <Error_Handler+0x8>

080011d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_MspInit+0x68>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	4a17      	ldr	r2, [pc, #92]	@ (800123c <HAL_MspInit+0x68>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6193      	str	r3, [r2, #24]
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_MspInit+0x68>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_MspInit+0x68>)
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	4a11      	ldr	r2, [pc, #68]	@ (800123c <HAL_MspInit+0x68>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011fc:	61d3      	str	r3, [r2, #28]
 80011fe:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <HAL_MspInit+0x68>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	210f      	movs	r1, #15
 800120e:	f06f 0001 	mvn.w	r0, #1
 8001212:	f000 fb40 	bl	8001896 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8001216:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <HAL_MspInit+0x6c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	4a04      	ldr	r2, [pc, #16]	@ (8001240 <HAL_MspInit+0x6c>)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000
 8001240:	40010000 	.word	0x40010000

08001244 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a31      	ldr	r2, [pc, #196]	@ (8001324 <HAL_I2C_MspInit+0xe0>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d15a      	bne.n	800131a <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001264:	4b30      	ldr	r3, [pc, #192]	@ (8001328 <HAL_I2C_MspInit+0xe4>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a2f      	ldr	r2, [pc, #188]	@ (8001328 <HAL_I2C_MspInit+0xe4>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b2d      	ldr	r3, [pc, #180]	@ (8001328 <HAL_I2C_MspInit+0xe4>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800127c:	23c0      	movs	r3, #192	@ 0xc0
 800127e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001280:	2312      	movs	r3, #18
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	4827      	ldr	r0, [pc, #156]	@ (800132c <HAL_I2C_MspInit+0xe8>)
 8001290:	f000 fdda 	bl	8001e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001294:	4b24      	ldr	r3, [pc, #144]	@ (8001328 <HAL_I2C_MspInit+0xe4>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	4a23      	ldr	r2, [pc, #140]	@ (8001328 <HAL_I2C_MspInit+0xe4>)
 800129a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800129e:	61d3      	str	r3, [r2, #28]
 80012a0:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <HAL_I2C_MspInit+0xe4>)
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80012ac:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <HAL_I2C_MspInit+0xec>)
 80012ae:	4a21      	ldr	r2, [pc, #132]	@ (8001334 <HAL_I2C_MspInit+0xf0>)
 80012b0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <HAL_I2C_MspInit+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001330 <HAL_I2C_MspInit+0xec>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012be:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <HAL_I2C_MspInit+0xec>)
 80012c0:	2280      	movs	r2, #128	@ 0x80
 80012c2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <HAL_I2C_MspInit+0xec>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <HAL_I2C_MspInit+0xec>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80012d0:	4b17      	ldr	r3, [pc, #92]	@ (8001330 <HAL_I2C_MspInit+0xec>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80012d6:	4b16      	ldr	r3, [pc, #88]	@ (8001330 <HAL_I2C_MspInit+0xec>)
 80012d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80012de:	4814      	ldr	r0, [pc, #80]	@ (8001330 <HAL_I2C_MspInit+0xec>)
 80012e0:	f000 fb04 	bl	80018ec <HAL_DMA_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80012ea:	f7ff ff6d 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001330 <HAL_I2C_MspInit+0xec>)
 80012f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80012f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001330 <HAL_I2C_MspInit+0xec>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2105      	movs	r1, #5
 80012fe:	201f      	movs	r0, #31
 8001300:	f000 fac9 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001304:	201f      	movs	r0, #31
 8001306:	f000 fae2 	bl	80018ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2105      	movs	r1, #5
 800130e:	2020      	movs	r0, #32
 8001310:	f000 fac1 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001314:	2020      	movs	r0, #32
 8001316:	f000 fada 	bl	80018ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40005400 	.word	0x40005400
 8001328:	40021000 	.word	0x40021000
 800132c:	40010c00 	.word	0x40010c00
 8001330:	20000b88 	.word	0x20000b88
 8001334:	40020080 	.word	0x40020080

08001338 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001348:	d113      	bne.n	8001372 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134a:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <HAL_TIM_PWM_MspInit+0x44>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a0b      	ldr	r2, [pc, #44]	@ (800137c <HAL_TIM_PWM_MspInit+0x44>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b09      	ldr	r3, [pc, #36]	@ (800137c <HAL_TIM_PWM_MspInit+0x44>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2105      	movs	r1, #5
 8001366:	201c      	movs	r0, #28
 8001368:	f000 fa95 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800136c:	201c      	movs	r0, #28
 800136e:	f000 faae 	bl	80018ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800139e:	d117      	bne.n	80013d0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <HAL_TIM_MspPostInit+0x58>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a0c      	ldr	r2, [pc, #48]	@ (80013d8 <HAL_TIM_MspPostInit+0x58>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_TIM_MspPostInit+0x58>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013b8:	2301      	movs	r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0310 	add.w	r3, r7, #16
 80013c8:	4619      	mov	r1, r3
 80013ca:	4804      	ldr	r0, [pc, #16]	@ (80013dc <HAL_TIM_MspPostInit+0x5c>)
 80013cc:	f000 fd3c 	bl	8001e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010800 	.word	0x40010800

080013e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001464 <HAL_UART_MspInit+0x84>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d12c      	bne.n	800145a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001400:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <HAL_UART_MspInit+0x88>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a18      	ldr	r2, [pc, #96]	@ (8001468 <HAL_UART_MspInit+0x88>)
 8001406:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <HAL_UART_MspInit+0x88>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <HAL_UART_MspInit+0x88>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <HAL_UART_MspInit+0x88>)
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <HAL_UART_MspInit+0x88>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001430:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001434:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001436:	2312      	movs	r3, #18
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	4619      	mov	r1, r3
 8001444:	4809      	ldr	r0, [pc, #36]	@ (800146c <HAL_UART_MspInit+0x8c>)
 8001446:	f000 fcff 	bl	8001e48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2105      	movs	r1, #5
 800144e:	2025      	movs	r0, #37	@ 0x25
 8001450:	f000 fa21 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001454:	2025      	movs	r0, #37	@ 0x25
 8001456:	f000 fa3a 	bl	80018ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800145a:	bf00      	nop
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40013800 	.word	0x40013800
 8001468:	40021000 	.word	0x40021000
 800146c:	40010800 	.word	0x40010800

08001470 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	@ 0x30
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001486:	4b2e      	ldr	r3, [pc, #184]	@ (8001540 <HAL_InitTick+0xd0>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	4a2d      	ldr	r2, [pc, #180]	@ (8001540 <HAL_InitTick+0xd0>)
 800148c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001490:	6193      	str	r3, [r2, #24]
 8001492:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <HAL_InitTick+0xd0>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800149e:	f107 020c 	add.w	r2, r7, #12
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 febf 	bl	800522c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014ae:	f003 fea9 	bl	8005204 <HAL_RCC_GetPCLK2Freq>
 80014b2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b6:	4a23      	ldr	r2, [pc, #140]	@ (8001544 <HAL_InitTick+0xd4>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	0c9b      	lsrs	r3, r3, #18
 80014be:	3b01      	subs	r3, #1
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014c2:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <HAL_InitTick+0xd8>)
 80014c4:	4a21      	ldr	r2, [pc, #132]	@ (800154c <HAL_InitTick+0xdc>)
 80014c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001548 <HAL_InitTick+0xd8>)
 80014ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014ce:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001548 <HAL_InitTick+0xd8>)
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <HAL_InitTick+0xd8>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_InitTick+0xd8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <HAL_InitTick+0xd8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80014e8:	4817      	ldr	r0, [pc, #92]	@ (8001548 <HAL_InitTick+0xd8>)
 80014ea:	f003 feed 	bl	80052c8 <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80014f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d11b      	bne.n	8001534 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80014fc:	4812      	ldr	r0, [pc, #72]	@ (8001548 <HAL_InitTick+0xd8>)
 80014fe:	f003 ff3b 	bl	8005378 <HAL_TIM_Base_Start_IT>
 8001502:	4603      	mov	r3, r0
 8001504:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001508:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800150c:	2b00      	cmp	r3, #0
 800150e:	d111      	bne.n	8001534 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001510:	2019      	movs	r0, #25
 8001512:	f000 f9dc 	bl	80018ce <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d808      	bhi.n	800152e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	2019      	movs	r0, #25
 8001522:	f000 f9b8 	bl	8001896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <HAL_InitTick+0xe0>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	e002      	b.n	8001534 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001534:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001538:	4618      	mov	r0, r3
 800153a:	3730      	adds	r7, #48	@ 0x30
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	431bde83 	.word	0x431bde83
 8001548:	20000c74 	.word	0x20000c74
 800154c:	40012c00 	.word	0x40012c00
 8001550:	20000004 	.word	0x20000004

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <NMI_Handler+0x4>

0800155c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <MemManage_Handler+0x4>

0800156c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <UsageFault_Handler+0x4>

0800157c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800158c:	4802      	ldr	r0, [pc, #8]	@ (8001598 <DMA1_Channel7_IRQHandler+0x10>)
 800158e:	f000 fb1b 	bl	8001bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000b88 	.word	0x20000b88

0800159c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <TIM1_UP_IRQHandler+0x10>)
 80015a2:	f004 f92d 	bl	8005800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000c74 	.word	0x20000c74

080015b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <TIM2_IRQHandler+0x10>)
 80015b6:	f004 f923 	bl	8005800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000bcc 	.word	0x20000bcc

080015c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015c8:	4802      	ldr	r0, [pc, #8]	@ (80015d4 <I2C1_EV_IRQHandler+0x10>)
 80015ca:	f001 f9e5 	bl	8002998 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000b34 	.word	0x20000b34

080015d8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80015dc:	4802      	ldr	r0, [pc, #8]	@ (80015e8 <I2C1_ER_IRQHandler+0x10>)
 80015de:	f001 fb2e 	bl	8002c3e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000b34 	.word	0x20000b34

080015ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015f0:	4802      	ldr	r0, [pc, #8]	@ (80015fc <USART1_IRQHandler+0x10>)
 80015f2:	f004 fe9d 	bl	8006330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000c14 	.word	0x20000c14

08001600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <HAL_UARTEx_RxEventCallback>:
	HAL_HalfDuplex_EnableReceiver(&huart1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 8001618:	221e      	movs	r2, #30
 800161a:	4904      	ldr	r1, [pc, #16]	@ (800162c <HAL_UARTEx_RxEventCallback+0x20>)
 800161c:	4804      	ldr	r0, [pc, #16]	@ (8001630 <HAL_UARTEx_RxEventCallback+0x24>)
 800161e:	f004 fe2a 	bl	8006276 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000cbc 	.word	0x20000cbc
 8001630:	20000c14 	.word	0x20000c14

08001634 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8001634:	f7ff ffe4 	bl	8001600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001638:	480b      	ldr	r0, [pc, #44]	@ (8001668 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800163a:	490c      	ldr	r1, [pc, #48]	@ (800166c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800163c:	4a0c      	ldr	r2, [pc, #48]	@ (8001670 <LoopFillZerobss+0x16>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a09      	ldr	r2, [pc, #36]	@ (8001674 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001650:	4c09      	ldr	r4, [pc, #36]	@ (8001678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165e:	f007 f8c1 	bl	80087e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001662:	f7ff fb69 	bl	8000d38 <main>
  bx lr
 8001666:	4770      	bx	lr
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001670:	08008a18 	.word	0x08008a18
  ldr r2, =_sbss
 8001674:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001678:	20001b88 	.word	0x20001b88

0800167c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC1_2_IRQHandler>
	...

08001680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <HAL_Init+0x28>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	@ (80016a8 <HAL_Init+0x28>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f8f5 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	200f      	movs	r0, #15
 8001698:	f7ff feea 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff fd9a 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40022000 	.word	0x40022000

080016ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b0:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <HAL_IncTick+0x1c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_IncTick+0x20>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	4a03      	ldr	r2, [pc, #12]	@ (80016cc <HAL_IncTick+0x20>)
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000cdc 	.word	0x20000cdc

080016d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b02      	ldr	r3, [pc, #8]	@ (80016e0 <HAL_GetTick+0x10>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	20000cdc 	.word	0x20000cdc

080016e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff fff0 	bl	80016d0 <HAL_GetTick>
 80016f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d005      	beq.n	800170a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <HAL_Delay+0x44>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170a:	bf00      	nop
 800170c:	f7ff ffe0 	bl	80016d0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d8f7      	bhi.n	800170c <HAL_Delay+0x28>
  {
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000008 	.word	0x20000008

0800172c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800173c:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001748:	4013      	ands	r3, r2
 800174a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800175c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175e:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <__NVIC_SetPriorityGrouping+0x44>)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	60d3      	str	r3, [r2, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001778:	4b04      	ldr	r3, [pc, #16]	@ (800178c <__NVIC_GetPriorityGrouping+0x18>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	f003 0307 	and.w	r3, r3, #7
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db0b      	blt.n	80017ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	f003 021f 	and.w	r2, r3, #31
 80017a8:	4906      	ldr	r1, [pc, #24]	@ (80017c4 <__NVIC_EnableIRQ+0x34>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	2001      	movs	r0, #1
 80017b2:	fa00 f202 	lsl.w	r2, r0, r2
 80017b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100

080017c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	db0a      	blt.n	80017f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	490c      	ldr	r1, [pc, #48]	@ (8001814 <__NVIC_SetPriority+0x4c>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	440b      	add	r3, r1
 80017ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f0:	e00a      	b.n	8001808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	4908      	ldr	r1, [pc, #32]	@ (8001818 <__NVIC_SetPriority+0x50>)
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	3b04      	subs	r3, #4
 8001800:	0112      	lsls	r2, r2, #4
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	440b      	add	r3, r1
 8001806:	761a      	strb	r2, [r3, #24]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	@ 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f1c3 0307 	rsb	r3, r3, #7
 8001836:	2b04      	cmp	r3, #4
 8001838:	bf28      	it	cs
 800183a:	2304      	movcs	r3, #4
 800183c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3304      	adds	r3, #4
 8001842:	2b06      	cmp	r3, #6
 8001844:	d902      	bls.n	800184c <NVIC_EncodePriority+0x30>
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3b03      	subs	r3, #3
 800184a:	e000      	b.n	800184e <NVIC_EncodePriority+0x32>
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	f04f 32ff 	mov.w	r2, #4294967295
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43da      	mvns	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	401a      	ands	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001864:	f04f 31ff 	mov.w	r1, #4294967295
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	43d9      	mvns	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	4313      	orrs	r3, r2
         );
}
 8001876:	4618      	mov	r0, r3
 8001878:	3724      	adds	r7, #36	@ 0x24
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff4f 	bl	800172c <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a8:	f7ff ff64 	bl	8001774 <__NVIC_GetPriorityGrouping>
 80018ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7ff ffb2 	bl	800181c <NVIC_EncodePriority>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff81 	bl	80017c8 <__NVIC_SetPriority>
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff57 	bl	8001790 <__NVIC_EnableIRQ>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e043      	b.n	800198a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	4b22      	ldr	r3, [pc, #136]	@ (8001994 <HAL_DMA_Init+0xa8>)
 800190a:	4413      	add	r3, r2
 800190c:	4a22      	ldr	r2, [pc, #136]	@ (8001998 <HAL_DMA_Init+0xac>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	009a      	lsls	r2, r3, #2
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a1f      	ldr	r2, [pc, #124]	@ (800199c <HAL_DMA_Init+0xb0>)
 800191e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001936:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800193a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001944:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001950:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	bffdfff8 	.word	0xbffdfff8
 8001998:	cccccccd 	.word	0xcccccccd
 800199c:	40020000 	.word	0x40020000

080019a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_DMA_Start_IT+0x20>
 80019bc:	2302      	movs	r3, #2
 80019be:	e04b      	b.n	8001a58 <HAL_DMA_Start_IT+0xb8>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d13a      	bne.n	8001a4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0201 	bic.w	r2, r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	68b9      	ldr	r1, [r7, #8]
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f9f8 	bl	8001dee <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d008      	beq.n	8001a18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 020e 	orr.w	r2, r2, #14
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e00f      	b.n	8001a38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0204 	bic.w	r2, r2, #4
 8001a26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 020a 	orr.w	r2, r2, #10
 8001a36:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e005      	b.n	8001a56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a52:	2302      	movs	r3, #2
 8001a54:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d008      	beq.n	8001a8a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e020      	b.n	8001acc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 020e 	bic.w	r2, r2, #14
 8001a98:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0201 	bic.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
	...

08001ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d005      	beq.n	8001afc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2204      	movs	r2, #4
 8001af4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e051      	b.n	8001ba0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 020e 	bic.w	r2, r2, #14
 8001b0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0201 	bic.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a22      	ldr	r2, [pc, #136]	@ (8001bac <HAL_DMA_Abort_IT+0xd4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d029      	beq.n	8001b7a <HAL_DMA_Abort_IT+0xa2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a21      	ldr	r2, [pc, #132]	@ (8001bb0 <HAL_DMA_Abort_IT+0xd8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d022      	beq.n	8001b76 <HAL_DMA_Abort_IT+0x9e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb4 <HAL_DMA_Abort_IT+0xdc>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d01a      	beq.n	8001b70 <HAL_DMA_Abort_IT+0x98>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb8 <HAL_DMA_Abort_IT+0xe0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d012      	beq.n	8001b6a <HAL_DMA_Abort_IT+0x92>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1c      	ldr	r2, [pc, #112]	@ (8001bbc <HAL_DMA_Abort_IT+0xe4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00a      	beq.n	8001b64 <HAL_DMA_Abort_IT+0x8c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc0 <HAL_DMA_Abort_IT+0xe8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d102      	bne.n	8001b5e <HAL_DMA_Abort_IT+0x86>
 8001b58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001b5c:	e00e      	b.n	8001b7c <HAL_DMA_Abort_IT+0xa4>
 8001b5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b62:	e00b      	b.n	8001b7c <HAL_DMA_Abort_IT+0xa4>
 8001b64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b68:	e008      	b.n	8001b7c <HAL_DMA_Abort_IT+0xa4>
 8001b6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b6e:	e005      	b.n	8001b7c <HAL_DMA_Abort_IT+0xa4>
 8001b70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b74:	e002      	b.n	8001b7c <HAL_DMA_Abort_IT+0xa4>
 8001b76:	2310      	movs	r3, #16
 8001b78:	e000      	b.n	8001b7c <HAL_DMA_Abort_IT+0xa4>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	4a11      	ldr	r2, [pc, #68]	@ (8001bc4 <HAL_DMA_Abort_IT+0xec>)
 8001b7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
    } 
  }
  return status;
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40020008 	.word	0x40020008
 8001bb0:	4002001c 	.word	0x4002001c
 8001bb4:	40020030 	.word	0x40020030
 8001bb8:	40020044 	.word	0x40020044
 8001bbc:	40020058 	.word	0x40020058
 8001bc0:	4002006c 	.word	0x4002006c
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	2204      	movs	r2, #4
 8001be6:	409a      	lsls	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d04f      	beq.n	8001c90 <HAL_DMA_IRQHandler+0xc8>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d04a      	beq.n	8001c90 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0320 	and.w	r3, r3, #32
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d107      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0204 	bic.w	r2, r2, #4
 8001c16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a66      	ldr	r2, [pc, #408]	@ (8001db8 <HAL_DMA_IRQHandler+0x1f0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d029      	beq.n	8001c76 <HAL_DMA_IRQHandler+0xae>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a65      	ldr	r2, [pc, #404]	@ (8001dbc <HAL_DMA_IRQHandler+0x1f4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d022      	beq.n	8001c72 <HAL_DMA_IRQHandler+0xaa>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a63      	ldr	r2, [pc, #396]	@ (8001dc0 <HAL_DMA_IRQHandler+0x1f8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01a      	beq.n	8001c6c <HAL_DMA_IRQHandler+0xa4>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a62      	ldr	r2, [pc, #392]	@ (8001dc4 <HAL_DMA_IRQHandler+0x1fc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d012      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x9e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a60      	ldr	r2, [pc, #384]	@ (8001dc8 <HAL_DMA_IRQHandler+0x200>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00a      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x98>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a5f      	ldr	r2, [pc, #380]	@ (8001dcc <HAL_DMA_IRQHandler+0x204>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d102      	bne.n	8001c5a <HAL_DMA_IRQHandler+0x92>
 8001c54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c58:	e00e      	b.n	8001c78 <HAL_DMA_IRQHandler+0xb0>
 8001c5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c5e:	e00b      	b.n	8001c78 <HAL_DMA_IRQHandler+0xb0>
 8001c60:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c64:	e008      	b.n	8001c78 <HAL_DMA_IRQHandler+0xb0>
 8001c66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c6a:	e005      	b.n	8001c78 <HAL_DMA_IRQHandler+0xb0>
 8001c6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c70:	e002      	b.n	8001c78 <HAL_DMA_IRQHandler+0xb0>
 8001c72:	2340      	movs	r3, #64	@ 0x40
 8001c74:	e000      	b.n	8001c78 <HAL_DMA_IRQHandler+0xb0>
 8001c76:	2304      	movs	r3, #4
 8001c78:	4a55      	ldr	r2, [pc, #340]	@ (8001dd0 <HAL_DMA_IRQHandler+0x208>)
 8001c7a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 8094 	beq.w	8001dae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c8e:	e08e      	b.n	8001dae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	2202      	movs	r2, #2
 8001c96:	409a      	lsls	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d056      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x186>
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d051      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 020a 	bic.w	r2, r2, #10
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a38      	ldr	r2, [pc, #224]	@ (8001db8 <HAL_DMA_IRQHandler+0x1f0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d029      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x166>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a37      	ldr	r2, [pc, #220]	@ (8001dbc <HAL_DMA_IRQHandler+0x1f4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d022      	beq.n	8001d2a <HAL_DMA_IRQHandler+0x162>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a35      	ldr	r2, [pc, #212]	@ (8001dc0 <HAL_DMA_IRQHandler+0x1f8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d01a      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x15c>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a34      	ldr	r2, [pc, #208]	@ (8001dc4 <HAL_DMA_IRQHandler+0x1fc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d012      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x156>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a32      	ldr	r2, [pc, #200]	@ (8001dc8 <HAL_DMA_IRQHandler+0x200>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00a      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x150>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a31      	ldr	r2, [pc, #196]	@ (8001dcc <HAL_DMA_IRQHandler+0x204>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d102      	bne.n	8001d12 <HAL_DMA_IRQHandler+0x14a>
 8001d0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d10:	e00e      	b.n	8001d30 <HAL_DMA_IRQHandler+0x168>
 8001d12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d16:	e00b      	b.n	8001d30 <HAL_DMA_IRQHandler+0x168>
 8001d18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d1c:	e008      	b.n	8001d30 <HAL_DMA_IRQHandler+0x168>
 8001d1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d22:	e005      	b.n	8001d30 <HAL_DMA_IRQHandler+0x168>
 8001d24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d28:	e002      	b.n	8001d30 <HAL_DMA_IRQHandler+0x168>
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	e000      	b.n	8001d30 <HAL_DMA_IRQHandler+0x168>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	4a27      	ldr	r2, [pc, #156]	@ (8001dd0 <HAL_DMA_IRQHandler+0x208>)
 8001d32:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d034      	beq.n	8001dae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d4c:	e02f      	b.n	8001dae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	2208      	movs	r2, #8
 8001d54:	409a      	lsls	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d028      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x1e8>
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d023      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 020e 	bic.w	r2, r2, #14
 8001d76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d80:	2101      	movs	r1, #1
 8001d82:	fa01 f202 	lsl.w	r2, r1, r2
 8001d86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d004      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	4798      	blx	r3
    }
  }
  return;
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
}
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40020008 	.word	0x40020008
 8001dbc:	4002001c 	.word	0x4002001c
 8001dc0:	40020030 	.word	0x40020030
 8001dc4:	40020044 	.word	0x40020044
 8001dc8:	40020058 	.word	0x40020058
 8001dcc:	4002006c 	.word	0x4002006c
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001de2:	b2db      	uxtb	r3, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e04:	2101      	movs	r1, #1
 8001e06:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	d108      	bne.n	8001e2e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e2c:	e007      	b.n	8001e3e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	60da      	str	r2, [r3, #12]
}
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b08b      	sub	sp, #44	@ 0x2c
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5a:	e169      	b.n	8002130 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f040 8158 	bne.w	800212a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4a9a      	ldr	r2, [pc, #616]	@ (80020e8 <HAL_GPIO_Init+0x2a0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d05e      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e84:	4a98      	ldr	r2, [pc, #608]	@ (80020e8 <HAL_GPIO_Init+0x2a0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d875      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001e8a:	4a98      	ldr	r2, [pc, #608]	@ (80020ec <HAL_GPIO_Init+0x2a4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d058      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e90:	4a96      	ldr	r2, [pc, #600]	@ (80020ec <HAL_GPIO_Init+0x2a4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d86f      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001e96:	4a96      	ldr	r2, [pc, #600]	@ (80020f0 <HAL_GPIO_Init+0x2a8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d052      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001e9c:	4a94      	ldr	r2, [pc, #592]	@ (80020f0 <HAL_GPIO_Init+0x2a8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d869      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001ea2:	4a94      	ldr	r2, [pc, #592]	@ (80020f4 <HAL_GPIO_Init+0x2ac>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d04c      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001ea8:	4a92      	ldr	r2, [pc, #584]	@ (80020f4 <HAL_GPIO_Init+0x2ac>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d863      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001eae:	4a92      	ldr	r2, [pc, #584]	@ (80020f8 <HAL_GPIO_Init+0x2b0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d046      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
 8001eb4:	4a90      	ldr	r2, [pc, #576]	@ (80020f8 <HAL_GPIO_Init+0x2b0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d85d      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001eba:	2b12      	cmp	r3, #18
 8001ebc:	d82a      	bhi.n	8001f14 <HAL_GPIO_Init+0xcc>
 8001ebe:	2b12      	cmp	r3, #18
 8001ec0:	d859      	bhi.n	8001f76 <HAL_GPIO_Init+0x12e>
 8001ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec8 <HAL_GPIO_Init+0x80>)
 8001ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec8:	08001f43 	.word	0x08001f43
 8001ecc:	08001f1d 	.word	0x08001f1d
 8001ed0:	08001f2f 	.word	0x08001f2f
 8001ed4:	08001f71 	.word	0x08001f71
 8001ed8:	08001f77 	.word	0x08001f77
 8001edc:	08001f77 	.word	0x08001f77
 8001ee0:	08001f77 	.word	0x08001f77
 8001ee4:	08001f77 	.word	0x08001f77
 8001ee8:	08001f77 	.word	0x08001f77
 8001eec:	08001f77 	.word	0x08001f77
 8001ef0:	08001f77 	.word	0x08001f77
 8001ef4:	08001f77 	.word	0x08001f77
 8001ef8:	08001f77 	.word	0x08001f77
 8001efc:	08001f77 	.word	0x08001f77
 8001f00:	08001f77 	.word	0x08001f77
 8001f04:	08001f77 	.word	0x08001f77
 8001f08:	08001f77 	.word	0x08001f77
 8001f0c:	08001f25 	.word	0x08001f25
 8001f10:	08001f39 	.word	0x08001f39
 8001f14:	4a79      	ldr	r2, [pc, #484]	@ (80020fc <HAL_GPIO_Init+0x2b4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f1a:	e02c      	b.n	8001f76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	623b      	str	r3, [r7, #32]
          break;
 8001f22:	e029      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	e024      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	3308      	adds	r3, #8
 8001f34:	623b      	str	r3, [r7, #32]
          break;
 8001f36:	e01f      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	330c      	adds	r3, #12
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e01a      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e013      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	611a      	str	r2, [r3, #16]
          break;
 8001f62:	e009      	b.n	8001f78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f64:	2308      	movs	r3, #8
 8001f66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	615a      	str	r2, [r3, #20]
          break;
 8001f6e:	e003      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f70:	2300      	movs	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x130>
          break;
 8001f76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2bff      	cmp	r3, #255	@ 0xff
 8001f7c:	d801      	bhi.n	8001f82 <HAL_GPIO_Init+0x13a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	e001      	b.n	8001f86 <HAL_GPIO_Init+0x13e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3304      	adds	r3, #4
 8001f86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2bff      	cmp	r3, #255	@ 0xff
 8001f8c:	d802      	bhi.n	8001f94 <HAL_GPIO_Init+0x14c>
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	e002      	b.n	8001f9a <HAL_GPIO_Init+0x152>
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	3b08      	subs	r3, #8
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	210f      	movs	r1, #15
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	6a39      	ldr	r1, [r7, #32]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80b1 	beq.w	800212a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fc8:	4b4d      	ldr	r3, [pc, #308]	@ (8002100 <HAL_GPIO_Init+0x2b8>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a4c      	ldr	r2, [pc, #304]	@ (8002100 <HAL_GPIO_Init+0x2b8>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b4a      	ldr	r3, [pc, #296]	@ (8002100 <HAL_GPIO_Init+0x2b8>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fe0:	4a48      	ldr	r2, [pc, #288]	@ (8002104 <HAL_GPIO_Init+0x2bc>)
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a40      	ldr	r2, [pc, #256]	@ (8002108 <HAL_GPIO_Init+0x2c0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d013      	beq.n	8002034 <HAL_GPIO_Init+0x1ec>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3f      	ldr	r2, [pc, #252]	@ (800210c <HAL_GPIO_Init+0x2c4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00d      	beq.n	8002030 <HAL_GPIO_Init+0x1e8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3e      	ldr	r2, [pc, #248]	@ (8002110 <HAL_GPIO_Init+0x2c8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <HAL_GPIO_Init+0x1e4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3d      	ldr	r2, [pc, #244]	@ (8002114 <HAL_GPIO_Init+0x2cc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d101      	bne.n	8002028 <HAL_GPIO_Init+0x1e0>
 8002024:	2303      	movs	r3, #3
 8002026:	e006      	b.n	8002036 <HAL_GPIO_Init+0x1ee>
 8002028:	2304      	movs	r3, #4
 800202a:	e004      	b.n	8002036 <HAL_GPIO_Init+0x1ee>
 800202c:	2302      	movs	r3, #2
 800202e:	e002      	b.n	8002036 <HAL_GPIO_Init+0x1ee>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <HAL_GPIO_Init+0x1ee>
 8002034:	2300      	movs	r3, #0
 8002036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002038:	f002 0203 	and.w	r2, r2, #3
 800203c:	0092      	lsls	r2, r2, #2
 800203e:	4093      	lsls	r3, r2
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002046:	492f      	ldr	r1, [pc, #188]	@ (8002104 <HAL_GPIO_Init+0x2bc>)
 8002048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d006      	beq.n	800206e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002060:	4b2d      	ldr	r3, [pc, #180]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	492c      	ldr	r1, [pc, #176]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	608b      	str	r3, [r1, #8]
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800206e:	4b2a      	ldr	r3, [pc, #168]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	43db      	mvns	r3, r3
 8002076:	4928      	ldr	r1, [pc, #160]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 8002078:	4013      	ands	r3, r2
 800207a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002088:	4b23      	ldr	r3, [pc, #140]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	4922      	ldr	r1, [pc, #136]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	60cb      	str	r3, [r1, #12]
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002096:	4b20      	ldr	r3, [pc, #128]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	43db      	mvns	r3, r3
 800209e:	491e      	ldr	r1, [pc, #120]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020b0:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4918      	ldr	r1, [pc, #96]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020be:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4914      	ldr	r1, [pc, #80]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d021      	beq.n	800211c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	490e      	ldr	r1, [pc, #56]	@ (8002118 <HAL_GPIO_Init+0x2d0>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	600b      	str	r3, [r1, #0]
 80020e4:	e021      	b.n	800212a <HAL_GPIO_Init+0x2e2>
 80020e6:	bf00      	nop
 80020e8:	10320000 	.word	0x10320000
 80020ec:	10310000 	.word	0x10310000
 80020f0:	10220000 	.word	0x10220000
 80020f4:	10210000 	.word	0x10210000
 80020f8:	10120000 	.word	0x10120000
 80020fc:	10110000 	.word	0x10110000
 8002100:	40021000 	.word	0x40021000
 8002104:	40010000 	.word	0x40010000
 8002108:	40010800 	.word	0x40010800
 800210c:	40010c00 	.word	0x40010c00
 8002110:	40011000 	.word	0x40011000
 8002114:	40011400 	.word	0x40011400
 8002118:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800211c:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <HAL_GPIO_Init+0x304>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	43db      	mvns	r3, r3
 8002124:	4909      	ldr	r1, [pc, #36]	@ (800214c <HAL_GPIO_Init+0x304>)
 8002126:	4013      	ands	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	3301      	adds	r3, #1
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	f47f ae8e 	bne.w	8001e5c <HAL_GPIO_Init+0x14>
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	372c      	adds	r7, #44	@ 0x2c
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	40010400 	.word	0x40010400

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800216c:	e003      	b.n	8002176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	611a      	str	r2, [r3, #16]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e12b      	b.n	80023ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff f84c 	bl	8001244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	@ 0x24
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021e4:	f002 fffa 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 80021e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4a81      	ldr	r2, [pc, #516]	@ (80023f4 <HAL_I2C_Init+0x274>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d807      	bhi.n	8002204 <HAL_I2C_Init+0x84>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a80      	ldr	r2, [pc, #512]	@ (80023f8 <HAL_I2C_Init+0x278>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	bf94      	ite	ls
 80021fc:	2301      	movls	r3, #1
 80021fe:	2300      	movhi	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	e006      	b.n	8002212 <HAL_I2C_Init+0x92>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a7d      	ldr	r2, [pc, #500]	@ (80023fc <HAL_I2C_Init+0x27c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	bf94      	ite	ls
 800220c:	2301      	movls	r3, #1
 800220e:	2300      	movhi	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0e7      	b.n	80023ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a78      	ldr	r2, [pc, #480]	@ (8002400 <HAL_I2C_Init+0x280>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	0c9b      	lsrs	r3, r3, #18
 8002224:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a6a      	ldr	r2, [pc, #424]	@ (80023f4 <HAL_I2C_Init+0x274>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d802      	bhi.n	8002254 <HAL_I2C_Init+0xd4>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	3301      	adds	r3, #1
 8002252:	e009      	b.n	8002268 <HAL_I2C_Init+0xe8>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	4a69      	ldr	r2, [pc, #420]	@ (8002404 <HAL_I2C_Init+0x284>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	3301      	adds	r3, #1
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	430b      	orrs	r3, r1
 800226e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800227a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	495c      	ldr	r1, [pc, #368]	@ (80023f4 <HAL_I2C_Init+0x274>)
 8002284:	428b      	cmp	r3, r1
 8002286:	d819      	bhi.n	80022bc <HAL_I2C_Init+0x13c>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1e59      	subs	r1, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fbb1 f3f3 	udiv	r3, r1, r3
 8002296:	1c59      	adds	r1, r3, #1
 8002298:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800229c:	400b      	ands	r3, r1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00a      	beq.n	80022b8 <HAL_I2C_Init+0x138>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1e59      	subs	r1, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b0:	3301      	adds	r3, #1
 80022b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b6:	e051      	b.n	800235c <HAL_I2C_Init+0x1dc>
 80022b8:	2304      	movs	r3, #4
 80022ba:	e04f      	b.n	800235c <HAL_I2C_Init+0x1dc>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d111      	bne.n	80022e8 <HAL_I2C_Init+0x168>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e58      	subs	r0, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	440b      	add	r3, r1
 80022d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d6:	3301      	adds	r3, #1
 80022d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf0c      	ite	eq
 80022e0:	2301      	moveq	r3, #1
 80022e2:	2300      	movne	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e012      	b.n	800230e <HAL_I2C_Init+0x18e>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e58      	subs	r0, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	0099      	lsls	r1, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Init+0x196>
 8002312:	2301      	movs	r3, #1
 8002314:	e022      	b.n	800235c <HAL_I2C_Init+0x1dc>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10e      	bne.n	800233c <HAL_I2C_Init+0x1bc>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1e58      	subs	r0, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6859      	ldr	r1, [r3, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	440b      	add	r3, r1
 800232c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002330:	3301      	adds	r3, #1
 8002332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800233a:	e00f      	b.n	800235c <HAL_I2C_Init+0x1dc>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1e58      	subs	r0, r3, #1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	0099      	lsls	r1, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	6809      	ldr	r1, [r1, #0]
 8002360:	4313      	orrs	r3, r2
 8002362:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800238a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6911      	ldr	r1, [r2, #16]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68d2      	ldr	r2, [r2, #12]
 8002396:	4311      	orrs	r1, r2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	430b      	orrs	r3, r1
 800239e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	000186a0 	.word	0x000186a0
 80023f8:	001e847f 	.word	0x001e847f
 80023fc:	003d08ff 	.word	0x003d08ff
 8002400:	431bde83 	.word	0x431bde83
 8002404:	10624dd3 	.word	0x10624dd3

08002408 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800241a:	2b80      	cmp	r3, #128	@ 0x80
 800241c:	d103      	bne.n	8002426 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
  }
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08c      	sub	sp, #48	@ 0x30
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	4608      	mov	r0, r1
 800243a:	4611      	mov	r1, r2
 800243c:	461a      	mov	r2, r3
 800243e:	4603      	mov	r3, r0
 8002440:	817b      	strh	r3, [r7, #10]
 8002442:	460b      	mov	r3, r1
 8002444:	813b      	strh	r3, [r7, #8]
 8002446:	4613      	mov	r3, r2
 8002448:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800244a:	f7ff f941 	bl	80016d0 <HAL_GetTick>
 800244e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b20      	cmp	r3, #32
 800245e:	f040 8168 	bne.w	8002732 <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002462:	4b98      	ldr	r3, [pc, #608]	@ (80026c4 <HAL_I2C_Mem_Read_DMA+0x294>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	08db      	lsrs	r3, r3, #3
 8002468:	4a97      	ldr	r2, [pc, #604]	@ (80026c8 <HAL_I2C_Mem_Read_DMA+0x298>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0a1a      	lsrs	r2, r3, #8
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	009a      	lsls	r2, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	3b01      	subs	r3, #1
 8002480:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d112      	bne.n	80024ae <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f043 0220 	orr.w	r2, r3, #32
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
 80024ac:	e142      	b.n	8002734 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d0df      	beq.n	800247c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_I2C_Mem_Read_DMA+0x9a>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e134      	b.n	8002734 <HAL_I2C_Mem_Read_DMA+0x304>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d007      	beq.n	80024f0 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0201 	orr.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2222      	movs	r2, #34	@ 0x22
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2240      	movs	r2, #64	@ 0x40
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002520:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a67      	ldr	r2, [pc, #412]	@ (80026cc <HAL_I2C_Mem_Read_DMA+0x29c>)
 8002530:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002532:	897a      	ldrh	r2, [r7, #10]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8002538:	893a      	ldrh	r2, [r7, #8]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800253e:	88fa      	ldrh	r2, [r7, #6]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 80c2 	beq.w	80026d8 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002558:	2b00      	cmp	r3, #0
 800255a:	d024      	beq.n	80025a6 <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002560:	4a5b      	ldr	r2, [pc, #364]	@ (80026d0 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002568:	4a5a      	ldr	r2, [pc, #360]	@ (80026d4 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 800256a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002570:	2200      	movs	r2, #0
 8002572:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002578:	2200      	movs	r2, #0
 800257a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	3310      	adds	r3, #16
 8002586:	4619      	mov	r1, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	461a      	mov	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002592:	f7ff fa05 	bl	80019a0 <HAL_DMA_Start_IT>
 8002596:	4603      	mov	r3, r0
 8002598:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800259c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d17b      	bne.n	800269c <HAL_I2C_Mem_Read_DMA+0x26c>
 80025a4:	e013      	b.n	80025ce <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e0b2      	b.n	8002734 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80025ce:	88f8      	ldrh	r0, [r7, #6]
 80025d0:	893a      	ldrh	r2, [r7, #8]
 80025d2:	8979      	ldrh	r1, [r7, #10]
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	2323      	movs	r3, #35	@ 0x23
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	4603      	mov	r3, r0
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f001 fdb0 	bl	8004144 <I2C_RequestMemoryRead>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d023      	beq.n	8002632 <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fa72 	bl	8001ad8 <HAL_DMA_Abort_IT>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fe:	2200      	movs	r2, #0
 8002600:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002610:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0201 	bic.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e080      	b.n	8002734 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002636:	2b01      	cmp	r3, #1
 8002638:	d108      	bne.n	800264c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	e007      	b.n	800265c <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800265a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265c:	2300      	movs	r3, #0
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002688:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	e048      	b.n	800272e <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	f043 0210 	orr.w	r2, r3, #16
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e037      	b.n	8002734 <HAL_I2C_Mem_Read_DMA+0x304>
 80026c4:	20000000 	.word	0x20000000
 80026c8:	14f8b589 	.word	0x14f8b589
 80026cc:	ffff0000 	.word	0xffff0000
 80026d0:	08004315 	.word	0x08004315
 80026d4:	080044d3 	.word	0x080044d3
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80026d8:	88f8      	ldrh	r0, [r7, #6]
 80026da:	893a      	ldrh	r2, [r7, #8]
 80026dc:	8979      	ldrh	r1, [r7, #10]
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	2323      	movs	r3, #35	@ 0x23
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	4603      	mov	r3, r0
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f001 fd2b 	bl	8004144 <I2C_RequestMemoryRead>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e01d      	b.n	8002734 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800271c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e000      	b.n	8002734 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	3728      	adds	r7, #40	@ 0x28
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	@ 0x28
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	460b      	mov	r3, r1
 800274a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800274c:	f7fe ffc0 	bl	80016d0 <HAL_GetTick>
 8002750:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b20      	cmp	r3, #32
 8002760:	f040 8111 	bne.w	8002986 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2319      	movs	r3, #25
 800276a:	2201      	movs	r2, #1
 800276c:	4988      	ldr	r1, [pc, #544]	@ (8002990 <HAL_I2C_IsDeviceReady+0x254>)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f001 ff8e 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800277a:	2302      	movs	r3, #2
 800277c:	e104      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_I2C_IsDeviceReady+0x50>
 8002788:	2302      	movs	r3, #2
 800278a:	e0fd      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x24c>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d007      	beq.n	80027b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0201 	orr.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2224      	movs	r2, #36	@ 0x24
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a70      	ldr	r2, [pc, #448]	@ (8002994 <HAL_I2C_IsDeviceReady+0x258>)
 80027d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f001 ff4c 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00d      	beq.n	800281a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800280c:	d103      	bne.n	8002816 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002814:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e0b6      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800281a:	897b      	ldrh	r3, [r7, #10]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002828:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800282a:	f7fe ff51 	bl	80016d0 <HAL_GetTick>
 800282e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b02      	cmp	r3, #2
 800283c:	bf0c      	ite	eq
 800283e:	2301      	moveq	r3, #1
 8002840:	2300      	movne	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002854:	bf0c      	ite	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	2300      	movne	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800285e:	e025      	b.n	80028ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002860:	f7fe ff36 	bl	80016d0 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d302      	bcc.n	8002876 <HAL_I2C_IsDeviceReady+0x13a>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d103      	bne.n	800287e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	22a0      	movs	r2, #160	@ 0xa0
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b02      	cmp	r3, #2
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80028b6:	d005      	beq.n	80028c4 <HAL_I2C_IsDeviceReady+0x188>
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <HAL_I2C_IsDeviceReady+0x188>
 80028be:	7dbb      	ldrb	r3, [r7, #22]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0cd      	beq.n	8002860 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d129      	bne.n	800292e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	2319      	movs	r3, #25
 8002906:	2201      	movs	r2, #1
 8002908:	4921      	ldr	r1, [pc, #132]	@ (8002990 <HAL_I2C_IsDeviceReady+0x254>)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f001 fec0 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e036      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e02c      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800293c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002946:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2319      	movs	r3, #25
 800294e:	2201      	movs	r2, #1
 8002950:	490f      	ldr	r1, [pc, #60]	@ (8002990 <HAL_I2C_IsDeviceReady+0x254>)
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f001 fe9c 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e012      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	3301      	adds	r3, #1
 8002966:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	f4ff af32 	bcc.w	80027d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
  }
}
 8002988:	4618      	mov	r0, r3
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	00100002 	.word	0x00100002
 8002994:	ffff0000 	.word	0xffff0000

08002998 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	2b10      	cmp	r3, #16
 80029c6:	d003      	beq.n	80029d0 <HAL_I2C_EV_IRQHandler+0x38>
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b40      	cmp	r3, #64	@ 0x40
 80029cc:	f040 80b1 	bne.w	8002b32 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10d      	bne.n	8002a06 <HAL_I2C_EV_IRQHandler+0x6e>
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80029f0:	d003      	beq.n	80029fa <HAL_I2C_EV_IRQHandler+0x62>
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80029f8:	d101      	bne.n	80029fe <HAL_I2C_EV_IRQHandler+0x66>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_I2C_EV_IRQHandler+0x68>
 80029fe:	2300      	movs	r3, #0
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	f000 8114 	beq.w	8002c2e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_I2C_EV_IRQHandler+0x90>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d006      	beq.n	8002a28 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f001 fffa 	bl	8004a14 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fd6b 	bl	80034fc <I2C_Master_SB>
 8002a26:	e083      	b.n	8002b30 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <HAL_I2C_EV_IRQHandler+0xac>
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fde2 	bl	8003606 <I2C_Master_ADD10>
 8002a42:	e075      	b.n	8002b30 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <HAL_I2C_EV_IRQHandler+0xc8>
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fdfd 	bl	8003658 <I2C_Master_ADDR>
 8002a5e:	e067      	b.n	8002b30 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d036      	beq.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a78:	f000 80db 	beq.w	8002c32 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00d      	beq.n	8002aa2 <HAL_I2C_EV_IRQHandler+0x10a>
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_I2C_EV_IRQHandler+0x10a>
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d103      	bne.n	8002aa2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f9cb 	bl	8002e36 <I2C_MasterTransmit_TXE>
 8002aa0:	e046      	b.n	8002b30 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80c2 	beq.w	8002c32 <HAL_I2C_EV_IRQHandler+0x29a>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80bc 	beq.w	8002c32 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002aba:	7bbb      	ldrb	r3, [r7, #14]
 8002abc:	2b21      	cmp	r3, #33	@ 0x21
 8002abe:	d103      	bne.n	8002ac8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 fa54 	bl	8002f6e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ac6:	e0b4      	b.n	8002c32 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b40      	cmp	r3, #64	@ 0x40
 8002acc:	f040 80b1 	bne.w	8002c32 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fac2 	bl	800305a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ad6:	e0ac      	b.n	8002c32 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ae6:	f000 80a4 	beq.w	8002c32 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00d      	beq.n	8002b10 <HAL_I2C_EV_IRQHandler+0x178>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_I2C_EV_IRQHandler+0x178>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d103      	bne.n	8002b10 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fb3e 	bl	800318a <I2C_MasterReceive_RXNE>
 8002b0e:	e00f      	b.n	8002b30 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 808b 	beq.w	8002c32 <HAL_I2C_EV_IRQHandler+0x29a>
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 8085 	beq.w	8002c32 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fbf6 	bl	800331a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b2e:	e080      	b.n	8002c32 <HAL_I2C_EV_IRQHandler+0x29a>
 8002b30:	e07f      	b.n	8002c32 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d004      	beq.n	8002b44 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	e007      	b.n	8002b54 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d011      	beq.n	8002b82 <HAL_I2C_EV_IRQHandler+0x1ea>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00c      	beq.n	8002b82 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002b78:	69b9      	ldr	r1, [r7, #24]
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 ffc3 	bl	8003b06 <I2C_Slave_ADDR>
 8002b80:	e05a      	b.n	8002c38 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_I2C_EV_IRQHandler+0x206>
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fffe 	bl	8003b98 <I2C_Slave_STOPF>
 8002b9c:	e04c      	b.n	8002c38 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ba0:	2b21      	cmp	r3, #33	@ 0x21
 8002ba2:	d002      	beq.n	8002baa <HAL_I2C_EV_IRQHandler+0x212>
 8002ba4:	7bbb      	ldrb	r3, [r7, #14]
 8002ba6:	2b29      	cmp	r3, #41	@ 0x29
 8002ba8:	d120      	bne.n	8002bec <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00d      	beq.n	8002bd0 <HAL_I2C_EV_IRQHandler+0x238>
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_I2C_EV_IRQHandler+0x238>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fee0 	bl	800398e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bce:	e032      	b.n	8002c36 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d02d      	beq.n	8002c36 <HAL_I2C_EV_IRQHandler+0x29e>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d028      	beq.n	8002c36 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 ff0f 	bl	8003a08 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bea:	e024      	b.n	8002c36 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00d      	beq.n	8002c12 <HAL_I2C_EV_IRQHandler+0x27a>
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d008      	beq.n	8002c12 <HAL_I2C_EV_IRQHandler+0x27a>
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d103      	bne.n	8002c12 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 ff1c 	bl	8003a48 <I2C_SlaveReceive_RXNE>
 8002c10:	e012      	b.n	8002c38 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00d      	beq.n	8002c38 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 ff4c 	bl	8003ac4 <I2C_SlaveReceive_BTF>
 8002c2c:	e004      	b.n	8002c38 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002c2e:	bf00      	nop
 8002c30:	e002      	b.n	8002c38 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c32:	bf00      	nop
 8002c34:	e000      	b.n	8002c38 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c36:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b08a      	sub	sp, #40	@ 0x28
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c60:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d015      	beq.n	8002c98 <HAL_I2C_ER_IRQHandler+0x5a>
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d010      	beq.n	8002c98 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c86:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c96:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <HAL_I2C_ER_IRQHandler+0x80>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	f043 0302 	orr.w	r3, r3, #2
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002cbc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d03e      	beq.n	8002d46 <HAL_I2C_ER_IRQHandler+0x108>
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d039      	beq.n	8002d46 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8002cd2:	7efb      	ldrb	r3, [r7, #27]
 8002cd4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ce4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002cec:	7ebb      	ldrb	r3, [r7, #26]
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d112      	bne.n	8002d18 <HAL_I2C_ER_IRQHandler+0xda>
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10f      	bne.n	8002d18 <HAL_I2C_ER_IRQHandler+0xda>
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	2b21      	cmp	r3, #33	@ 0x21
 8002cfc:	d008      	beq.n	8002d10 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002cfe:	7cfb      	ldrb	r3, [r7, #19]
 8002d00:	2b29      	cmp	r3, #41	@ 0x29
 8002d02:	d005      	beq.n	8002d10 <HAL_I2C_ER_IRQHandler+0xd2>
 8002d04:	7cfb      	ldrb	r3, [r7, #19]
 8002d06:	2b28      	cmp	r3, #40	@ 0x28
 8002d08:	d106      	bne.n	8002d18 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b21      	cmp	r3, #33	@ 0x21
 8002d0e:	d103      	bne.n	8002d18 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f001 f871 	bl	8003df8 <I2C_Slave_AF>
 8002d16:	e016      	b.n	8002d46 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d20:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d2a:	7efb      	ldrb	r3, [r7, #27]
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d002      	beq.n	8002d36 <HAL_I2C_ER_IRQHandler+0xf8>
 8002d30:	7efb      	ldrb	r3, [r7, #27]
 8002d32:	2b40      	cmp	r3, #64	@ 0x40
 8002d34:	d107      	bne.n	8002d46 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d44:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <HAL_I2C_ER_IRQHandler+0x12e>
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	f043 0308 	orr.w	r3, r3, #8
 8002d60:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002d6a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d008      	beq.n	8002d84 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f001 f8ae 	bl	8003ee0 <I2C_ITError>
  }
}
 8002d84:	bf00      	nop
 8002d86:	3728      	adds	r7, #40	@ 0x28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]
 8002de0:	4613      	mov	r3, r2
 8002de2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr

08002e36 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e4c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e52:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d150      	bne.n	8002efe <I2C_MasterTransmit_TXE+0xc8>
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b21      	cmp	r3, #33	@ 0x21
 8002e60:	d14d      	bne.n	8002efe <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d01d      	beq.n	8002ea4 <I2C_MasterTransmit_TXE+0x6e>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d01a      	beq.n	8002ea4 <I2C_MasterTransmit_TXE+0x6e>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e74:	d016      	beq.n	8002ea4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e84:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2211      	movs	r2, #17
 8002e8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ff75 	bl	8002d8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ea2:	e060      	b.n	8002f66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002eb2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b40      	cmp	r3, #64	@ 0x40
 8002edc:	d107      	bne.n	8002eee <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff ff8a 	bl	8002e00 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002eec:	e03b      	b.n	8002f66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ff48 	bl	8002d8c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002efc:	e033      	b.n	8002f66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b21      	cmp	r3, #33	@ 0x21
 8002f02:	d005      	beq.n	8002f10 <I2C_MasterTransmit_TXE+0xda>
 8002f04:	7bbb      	ldrb	r3, [r7, #14]
 8002f06:	2b40      	cmp	r3, #64	@ 0x40
 8002f08:	d12d      	bne.n	8002f66 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b22      	cmp	r3, #34	@ 0x22
 8002f0e:	d12a      	bne.n	8002f66 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d108      	bne.n	8002f2c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f28:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002f2a:	e01c      	b.n	8002f66 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b40      	cmp	r3, #64	@ 0x40
 8002f36:	d103      	bne.n	8002f40 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f88e 	bl	800305a <I2C_MemoryTransmit_TXE_BTF>
}
 8002f3e:	e012      	b.n	8002f66 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	781a      	ldrb	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002f64:	e7ff      	b.n	8002f66 <I2C_MasterTransmit_TXE+0x130>
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b21      	cmp	r3, #33	@ 0x21
 8002f86:	d164      	bne.n	8003052 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d012      	beq.n	8002fb8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	781a      	ldrb	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002fb6:	e04c      	b.n	8003052 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d01d      	beq.n	8002ffa <I2C_MasterTransmit_BTF+0x8c>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d01a      	beq.n	8002ffa <I2C_MasterTransmit_BTF+0x8c>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fca:	d016      	beq.n	8002ffa <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fda:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2211      	movs	r2, #17
 8002fe0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff feca 	bl	8002d8c <HAL_I2C_MasterTxCpltCallback>
}
 8002ff8:	e02b      	b.n	8003052 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003008:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003018:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b40      	cmp	r3, #64	@ 0x40
 8003032:	d107      	bne.n	8003044 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff fedf 	bl	8002e00 <HAL_I2C_MemTxCpltCallback>
}
 8003042:	e006      	b.n	8003052 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff fe9d 	bl	8002d8c <HAL_I2C_MasterTxCpltCallback>
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003068:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11d      	bne.n	80030ae <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d10b      	bne.n	8003092 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800307e:	b2da      	uxtb	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800308a:	1c9a      	adds	r2, r3, #2
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003090:	e077      	b.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003096:	b29b      	uxth	r3, r3
 8003098:	121b      	asrs	r3, r3, #8
 800309a:	b2da      	uxtb	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80030ac:	e069      	b.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d10b      	bne.n	80030ce <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80030cc:	e059      	b.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d152      	bne.n	800317c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b22      	cmp	r3, #34	@ 0x22
 80030da:	d10d      	bne.n	80030f8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030ea:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80030f6:	e044      	b.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d015      	beq.n	800312e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b21      	cmp	r3, #33	@ 0x21
 8003106:	d112      	bne.n	800312e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	781a      	ldrb	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800312c:	e029      	b.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d124      	bne.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	2b21      	cmp	r3, #33	@ 0x21
 800313c:	d121      	bne.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800314c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800315c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fe43 	bl	8002e00 <HAL_I2C_MemTxCpltCallback>
}
 800317a:	e002      	b.n	8003182 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff f943 	bl	8002408 <I2C_Flush_DR>
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b22      	cmp	r3, #34	@ 0x22
 800319c:	f040 80b9 	bne.w	8003312 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d921      	bls.n	80031f8 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	f040 8096 	bne.w	8003312 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80031f6:	e08c      	b.n	8003312 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d07f      	beq.n	8003300 <I2C_MasterReceive_RXNE+0x176>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d002      	beq.n	800320c <I2C_MasterReceive_RXNE+0x82>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d179      	bne.n	8003300 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f001 fba1 	bl	8004954 <I2C_WaitOnSTOPRequestThroughIT>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d14c      	bne.n	80032b2 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003226:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003236:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b40      	cmp	r3, #64	@ 0x40
 8003270:	d10a      	bne.n	8003288 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fd fc9b 	bl	8000bbc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003286:	e044      	b.n	8003312 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b08      	cmp	r3, #8
 8003294:	d002      	beq.n	800329c <I2C_MasterReceive_RXNE+0x112>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b20      	cmp	r3, #32
 800329a:	d103      	bne.n	80032a4 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80032a2:	e002      	b.n	80032aa <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2212      	movs	r2, #18
 80032a8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7ff fd77 	bl	8002d9e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032b0:	e02f      	b.n	8003312 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff fd8a 	bl	8002e12 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032fe:	e008      	b.n	8003312 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800330e:	605a      	str	r2, [r3, #4]
}
 8003310:	e7ff      	b.n	8003312 <I2C_MasterReceive_RXNE+0x188>
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b04      	cmp	r3, #4
 8003330:	d11b      	bne.n	800336a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003340:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003368:	e0c4      	b.n	80034f4 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b03      	cmp	r3, #3
 8003372:	d129      	bne.n	80033c8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003382:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b04      	cmp	r3, #4
 8003388:	d00a      	beq.n	80033a0 <I2C_MasterReceive_BTF+0x86>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d007      	beq.n	80033a0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800339e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80033c6:	e095      	b.n	80034f4 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d17d      	bne.n	80034ce <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d002      	beq.n	80033de <I2C_MasterReceive_BTF+0xc4>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d108      	bne.n	80033f0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e016      	b.n	800341e <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d002      	beq.n	80033fc <I2C_MasterReceive_BTF+0xe2>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d108      	bne.n	800340e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	e007      	b.n	800341e <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800341c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003478:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b40      	cmp	r3, #64	@ 0x40
 800348c:	d10a      	bne.n	80034a4 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7fd fb8d 	bl	8000bbc <HAL_I2C_MemRxCpltCallback>
}
 80034a2:	e027      	b.n	80034f4 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d002      	beq.n	80034b8 <I2C_MasterReceive_BTF+0x19e>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b20      	cmp	r3, #32
 80034b6:	d103      	bne.n	80034c0 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80034be:	e002      	b.n	80034c6 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2212      	movs	r2, #18
 80034c4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff fc69 	bl	8002d9e <HAL_I2C_MasterRxCpltCallback>
}
 80034cc:	e012      	b.n	80034f4 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b40      	cmp	r3, #64	@ 0x40
 800350e:	d117      	bne.n	8003540 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003514:	2b00      	cmp	r3, #0
 8003516:	d109      	bne.n	800352c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003528:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800352a:	e067      	b.n	80035fc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	b2da      	uxtb	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	611a      	str	r2, [r3, #16]
}
 800353e:	e05d      	b.n	80035fc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003548:	d133      	bne.n	80035b2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b21      	cmp	r3, #33	@ 0x21
 8003554:	d109      	bne.n	800356a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	b2db      	uxtb	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003566:	611a      	str	r2, [r3, #16]
 8003568:	e008      	b.n	800357c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	b2da      	uxtb	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003580:	2b00      	cmp	r3, #0
 8003582:	d004      	beq.n	800358e <I2C_Master_SB+0x92>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	d108      	bne.n	80035a0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003592:	2b00      	cmp	r3, #0
 8003594:	d032      	beq.n	80035fc <I2C_Master_SB+0x100>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	2b00      	cmp	r3, #0
 800359e:	d02d      	beq.n	80035fc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ae:	605a      	str	r2, [r3, #4]
}
 80035b0:	e024      	b.n	80035fc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10e      	bne.n	80035d8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	b29b      	uxth	r3, r3
 80035c0:	11db      	asrs	r3, r3, #7
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f003 0306 	and.w	r3, r3, #6
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f063 030f 	orn	r3, r3, #15
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	611a      	str	r2, [r3, #16]
}
 80035d6:	e011      	b.n	80035fc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d10d      	bne.n	80035fc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	11db      	asrs	r3, r3, #7
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	f003 0306 	and.w	r3, r3, #6
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f063 030e 	orn	r3, r3, #14
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	611a      	str	r2, [r3, #16]
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003612:	b2da      	uxtb	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <I2C_Master_ADD10+0x26>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	d108      	bne.n	800363e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00c      	beq.n	800364e <I2C_Master_ADD10+0x48>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800364c:	605a      	str	r2, [r3, #4]
  }
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003658:	b480      	push	{r7}
 800365a:	b091      	sub	sp, #68	@ 0x44
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003666:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b22      	cmp	r3, #34	@ 0x22
 8003680:	f040 8174 	bne.w	800396c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10f      	bne.n	80036ac <I2C_Master_ADDR+0x54>
 800368c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003690:	2b40      	cmp	r3, #64	@ 0x40
 8003692:	d10b      	bne.n	80036ac <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003694:	2300      	movs	r3, #0
 8003696:	633b      	str	r3, [r7, #48]	@ 0x30
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	633b      	str	r3, [r7, #48]	@ 0x30
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	e16b      	b.n	8003984 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d11d      	bne.n	80036f0 <I2C_Master_ADDR+0x98>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80036bc:	d118      	bne.n	80036f0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036e2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80036ee:	e149      	b.n	8003984 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d113      	bne.n	8003722 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fa:	2300      	movs	r3, #0
 80036fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800370e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	e120      	b.n	8003964 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	f040 808a 	bne.w	8003842 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800372e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003730:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003734:	d137      	bne.n	80037a6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003744:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003754:	d113      	bne.n	800377e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003764:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	@ 0x24
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	627b      	str	r3, [r7, #36]	@ 0x24
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	e0f2      	b.n	8003964 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377e:	2300      	movs	r3, #0
 8003780:	623b      	str	r3, [r7, #32]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	623b      	str	r3, [r7, #32]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	623b      	str	r3, [r7, #32]
 8003792:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e0de      	b.n	8003964 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80037a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d02e      	beq.n	800380a <I2C_Master_ADDR+0x1b2>
 80037ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d02b      	beq.n	800380a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80037b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b4:	2b12      	cmp	r3, #18
 80037b6:	d102      	bne.n	80037be <I2C_Master_ADDR+0x166>
 80037b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d125      	bne.n	800380a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d00e      	beq.n	80037e2 <I2C_Master_ADDR+0x18a>
 80037c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d00b      	beq.n	80037e2 <I2C_Master_ADDR+0x18a>
 80037ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d008      	beq.n	80037e2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e007      	b.n	80037f2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	e0ac      	b.n	8003964 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003818:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e090      	b.n	8003964 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d158      	bne.n	80038fe <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800384c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384e:	2b04      	cmp	r3, #4
 8003850:	d021      	beq.n	8003896 <I2C_Master_ADDR+0x23e>
 8003852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003854:	2b02      	cmp	r3, #2
 8003856:	d01e      	beq.n	8003896 <I2C_Master_ADDR+0x23e>
 8003858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385a:	2b10      	cmp	r3, #16
 800385c:	d01b      	beq.n	8003896 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800386c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e012      	b.n	80038bc <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80038a4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038ca:	d14b      	bne.n	8003964 <I2C_Master_ADDR+0x30c>
 80038cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ce:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038d2:	d00b      	beq.n	80038ec <I2C_Master_ADDR+0x294>
 80038d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d008      	beq.n	80038ec <I2C_Master_ADDR+0x294>
 80038da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d005      	beq.n	80038ec <I2C_Master_ADDR+0x294>
 80038e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d002      	beq.n	80038ec <I2C_Master_ADDR+0x294>
 80038e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d13b      	bne.n	8003964 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	e032      	b.n	8003964 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800390c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003918:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800391c:	d117      	bne.n	800394e <I2C_Master_ADDR+0x2f6>
 800391e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003920:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003924:	d00b      	beq.n	800393e <I2C_Master_ADDR+0x2e6>
 8003926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003928:	2b01      	cmp	r3, #1
 800392a:	d008      	beq.n	800393e <I2C_Master_ADDR+0x2e6>
 800392c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392e:	2b08      	cmp	r3, #8
 8003930:	d005      	beq.n	800393e <I2C_Master_ADDR+0x2e6>
 8003932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003934:	2b10      	cmp	r3, #16
 8003936:	d002      	beq.n	800393e <I2C_Master_ADDR+0x2e6>
 8003938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393a:	2b20      	cmp	r3, #32
 800393c:	d107      	bne.n	800394e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800394c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800396a:	e00b      	b.n	8003984 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396c:	2300      	movs	r3, #0
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
}
 8003982:	e7ff      	b.n	8003984 <I2C_Master_ADDR+0x32c>
 8003984:	bf00      	nop
 8003986:	3744      	adds	r7, #68	@ 0x44
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800399c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d02b      	beq.n	8003a00 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d114      	bne.n	8003a00 <I2C_SlaveTransmit_TXE+0x72>
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b29      	cmp	r3, #41	@ 0x29
 80039da:	d111      	bne.n	8003a00 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2221      	movs	r2, #33	@ 0x21
 80039f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2228      	movs	r2, #40	@ 0x28
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff f9d8 	bl	8002db0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a00:	bf00      	nop
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d011      	beq.n	8003a3e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	781a      	ldrb	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a56:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d02c      	beq.n	8003abc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d114      	bne.n	8003abc <I2C_SlaveReceive_RXNE+0x74>
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a96:	d111      	bne.n	8003abc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aa6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2222      	movs	r2, #34	@ 0x22
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2228      	movs	r2, #40	@ 0x28
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff f983 	bl	8002dc2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d012      	beq.n	8003afc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003b10:	2300      	movs	r3, #0
 8003b12:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b20:	2b28      	cmp	r3, #40	@ 0x28
 8003b22:	d125      	bne.n	8003b70 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b32:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d103      	bne.n	8003b54 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	81bb      	strh	r3, [r7, #12]
 8003b52:	e002      	b.n	8003b5a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003b62:	89ba      	ldrh	r2, [r7, #12]
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
 8003b66:	4619      	mov	r1, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff f933 	bl	8002dd4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b6e:	e00e      	b.n	8003b8e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b70:	2300      	movs	r3, #0
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bb6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bf4:	d172      	bne.n	8003cdc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	2b22      	cmp	r3, #34	@ 0x22
 8003bfa:	d002      	beq.n	8003c02 <I2C_Slave_STOPF+0x6a>
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c00:	d135      	bne.n	8003c6e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f043 0204 	orr.w	r2, r3, #4
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe f8ca 	bl	8001dd4 <HAL_DMA_GetState>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d049      	beq.n	8003cda <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4a:	4a69      	ldr	r2, [pc, #420]	@ (8003df0 <I2C_Slave_STOPF+0x258>)
 8003c4c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fd ff40 	bl	8001ad8 <HAL_DMA_Abort_IT>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d03d      	beq.n	8003cda <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c6c:	e035      	b.n	8003cda <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	f043 0204 	orr.w	r2, r3, #4
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ca0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe f894 	bl	8001dd4 <HAL_DMA_GetState>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d014      	beq.n	8003cdc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb6:	4a4e      	ldr	r2, [pc, #312]	@ (8003df0 <I2C_Slave_STOPF+0x258>)
 8003cb8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fd ff0a 	bl	8001ad8 <HAL_DMA_Abort_IT>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4798      	blx	r3
 8003cd8:	e000      	b.n	8003cdc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cda:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d03e      	beq.n	8003d64 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d112      	bne.n	8003d1a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d24:	2b40      	cmp	r3, #64	@ 0x40
 8003d26:	d112      	bne.n	8003d4e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	f043 0204 	orr.w	r2, r3, #4
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f8b7 	bl	8003ee0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003d72:	e039      	b.n	8003de8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d78:	d109      	bne.n	8003d8e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2228      	movs	r2, #40	@ 0x28
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff f81a 	bl	8002dc2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b28      	cmp	r3, #40	@ 0x28
 8003d98:	d111      	bne.n	8003dbe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a15      	ldr	r2, [pc, #84]	@ (8003df4 <I2C_Slave_STOPF+0x25c>)
 8003d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff f819 	bl	8002dee <HAL_I2C_ListenCpltCallback>
}
 8003dbc:	e014      	b.n	8003de8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	2b22      	cmp	r3, #34	@ 0x22
 8003dc4:	d002      	beq.n	8003dcc <I2C_Slave_STOPF+0x234>
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b22      	cmp	r3, #34	@ 0x22
 8003dca:	d10d      	bne.n	8003de8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fe ffed 	bl	8002dc2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003de8:	bf00      	nop
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	08004541 	.word	0x08004541
 8003df4:	ffff0000 	.word	0xffff0000

08003df8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e06:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d002      	beq.n	8003e1a <I2C_Slave_AF+0x22>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d129      	bne.n	8003e6e <I2C_Slave_AF+0x76>
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b28      	cmp	r3, #40	@ 0x28
 8003e1e:	d126      	bne.n	8003e6e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a2e      	ldr	r2, [pc, #184]	@ (8003edc <I2C_Slave_AF+0xe4>)
 8003e24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e34:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e3e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e4e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fe ffc1 	bl	8002dee <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003e6c:	e031      	b.n	8003ed2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	2b21      	cmp	r3, #33	@ 0x21
 8003e72:	d129      	bne.n	8003ec8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a19      	ldr	r2, [pc, #100]	@ (8003edc <I2C_Slave_AF+0xe4>)
 8003e78:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2221      	movs	r2, #33	@ 0x21
 8003e7e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e9e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ea8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eb8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fe faa4 	bl	8002408 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fe ff75 	bl	8002db0 <HAL_I2C_SlaveTxCpltCallback>
}
 8003ec6:	e004      	b.n	8003ed2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ed0:	615a      	str	r2, [r3, #20]
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	ffff0000 	.word	0xffff0000

08003ee0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ef6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003ef8:	7bbb      	ldrb	r3, [r7, #14]
 8003efa:	2b10      	cmp	r3, #16
 8003efc:	d002      	beq.n	8003f04 <I2C_ITError+0x24>
 8003efe:	7bbb      	ldrb	r3, [r7, #14]
 8003f00:	2b40      	cmp	r3, #64	@ 0x40
 8003f02:	d10a      	bne.n	8003f1a <I2C_ITError+0x3a>
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b22      	cmp	r3, #34	@ 0x22
 8003f08:	d107      	bne.n	8003f1a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f18:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f20:	2b28      	cmp	r3, #40	@ 0x28
 8003f22:	d107      	bne.n	8003f34 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2228      	movs	r2, #40	@ 0x28
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f32:	e015      	b.n	8003f60 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f42:	d00a      	beq.n	8003f5a <I2C_ITError+0x7a>
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b60      	cmp	r3, #96	@ 0x60
 8003f48:	d007      	beq.n	8003f5a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f6e:	d162      	bne.n	8004036 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f7e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f84:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d020      	beq.n	8003fd0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f92:	4a6a      	ldr	r2, [pc, #424]	@ (800413c <I2C_ITError+0x25c>)
 8003f94:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fd fd9c 	bl	8001ad8 <HAL_DMA_Abort_IT>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8089 	beq.w	80040ba <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4798      	blx	r3
 8003fce:	e074      	b.n	80040ba <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd4:	4a59      	ldr	r2, [pc, #356]	@ (800413c <I2C_ITError+0x25c>)
 8003fd6:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fd fd7b 	bl	8001ad8 <HAL_DMA_Abort_IT>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d068      	beq.n	80040ba <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff2:	2b40      	cmp	r3, #64	@ 0x40
 8003ff4:	d10b      	bne.n	800400e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004030:	4610      	mov	r0, r2
 8004032:	4798      	blx	r3
 8004034:	e041      	b.n	80040ba <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b60      	cmp	r3, #96	@ 0x60
 8004040:	d125      	bne.n	800408e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405a:	2b40      	cmp	r3, #64	@ 0x40
 800405c:	d10b      	bne.n	8004076 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0201 	bic.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fe fecc 	bl	8002e24 <HAL_I2C_AbortCpltCallback>
 800408c:	e015      	b.n	80040ba <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004098:	2b40      	cmp	r3, #64	@ 0x40
 800409a:	d10b      	bne.n	80040b4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7fe feac 	bl	8002e12 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10e      	bne.n	80040e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d104      	bne.n	80040e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040f6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b04      	cmp	r3, #4
 800410a:	d113      	bne.n	8004134 <I2C_ITError+0x254>
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	2b28      	cmp	r3, #40	@ 0x28
 8004110:	d110      	bne.n	8004134 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a0a      	ldr	r2, [pc, #40]	@ (8004140 <I2C_ITError+0x260>)
 8004116:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fe fe5d 	bl	8002dee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	08004541 	.word	0x08004541
 8004140:	ffff0000 	.word	0xffff0000

08004144 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	4608      	mov	r0, r1
 800414e:	4611      	mov	r1, r2
 8004150:	461a      	mov	r2, r3
 8004152:	4603      	mov	r3, r0
 8004154:	817b      	strh	r3, [r7, #10]
 8004156:	460b      	mov	r3, r1
 8004158:	813b      	strh	r3, [r7, #8]
 800415a:	4613      	mov	r3, r2
 800415c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800416c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800417c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	2200      	movs	r2, #0
 8004186:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fa80 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041a4:	d103      	bne.n	80041ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e0aa      	b.n	8004308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041b2:	897b      	ldrh	r3, [r7, #10]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	4952      	ldr	r1, [pc, #328]	@ (8004310 <I2C_RequestMemoryRead+0x1cc>)
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 fadb 	bl	8004784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e097      	b.n	8004308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f0:	6a39      	ldr	r1, [r7, #32]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fb66 	bl	80048c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00d      	beq.n	800421a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	2b04      	cmp	r3, #4
 8004204:	d107      	bne.n	8004216 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004214:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e076      	b.n	8004308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d105      	bne.n	800422c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004220:	893b      	ldrh	r3, [r7, #8]
 8004222:	b2da      	uxtb	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	611a      	str	r2, [r3, #16]
 800422a:	e021      	b.n	8004270 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800422c:	893b      	ldrh	r3, [r7, #8]
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	b29b      	uxth	r3, r3
 8004232:	b2da      	uxtb	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800423a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423c:	6a39      	ldr	r1, [r7, #32]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fb40 	bl	80048c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00d      	beq.n	8004266 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	2b04      	cmp	r3, #4
 8004250:	d107      	bne.n	8004262 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004260:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e050      	b.n	8004308 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004266:	893b      	ldrh	r3, [r7, #8]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004272:	6a39      	ldr	r1, [r7, #32]
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 fb25 	bl	80048c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	2b04      	cmp	r3, #4
 8004286:	d107      	bne.n	8004298 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004296:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e035      	b.n	8004308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f9e9 	bl	8004690 <I2C_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00d      	beq.n	80042e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042d2:	d103      	bne.n	80042dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e013      	b.n	8004308 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042e0:	897b      	ldrh	r3, [r7, #10]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	6a3a      	ldr	r2, [r7, #32]
 80042f4:	4906      	ldr	r1, [pc, #24]	@ (8004310 <I2C_RequestMemoryRead+0x1cc>)
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fa44 	bl	8004784 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	00010002 	.word	0x00010002

08004314 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004328:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004330:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004336:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004346:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004354:	2200      	movs	r2, #0
 8004356:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004364:	2200      	movs	r2, #0
 8004366:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800436e:	2b21      	cmp	r3, #33	@ 0x21
 8004370:	d007      	beq.n	8004382 <I2C_DMAXferCplt+0x6e>
 8004372:	7cfb      	ldrb	r3, [r7, #19]
 8004374:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004378:	2b22      	cmp	r3, #34	@ 0x22
 800437a:	d131      	bne.n	80043e0 <I2C_DMAXferCplt+0xcc>
 800437c:	7cbb      	ldrb	r3, [r7, #18]
 800437e:	2b20      	cmp	r3, #32
 8004380:	d12e      	bne.n	80043e0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004390:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2200      	movs	r2, #0
 8004396:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	2b29      	cmp	r3, #41	@ 0x29
 800439c:	d10a      	bne.n	80043b4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2221      	movs	r2, #33	@ 0x21
 80043a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2228      	movs	r2, #40	@ 0x28
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043ac:	6978      	ldr	r0, [r7, #20]
 80043ae:	f7fe fcff 	bl	8002db0 <HAL_I2C_SlaveTxCpltCallback>
 80043b2:	e00c      	b.n	80043ce <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80043b8:	d109      	bne.n	80043ce <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2222      	movs	r2, #34	@ 0x22
 80043be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2228      	movs	r2, #40	@ 0x28
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043c8:	6978      	ldr	r0, [r7, #20]
 80043ca:	f7fe fcfa 	bl	8002dc2 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80043dc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80043de:	e074      	b.n	80044ca <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d06e      	beq.n	80044ca <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d107      	bne.n	8004406 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004404:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004414:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800441c:	d009      	beq.n	8004432 <I2C_DMAXferCplt+0x11e>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d006      	beq.n	8004432 <I2C_DMAXferCplt+0x11e>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800442a:	d002      	beq.n	8004432 <I2C_DMAXferCplt+0x11e>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b20      	cmp	r3, #32
 8004430:	d107      	bne.n	8004442 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004440:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004450:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004460:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2200      	movs	r2, #0
 8004466:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004470:	6978      	ldr	r0, [r7, #20]
 8004472:	f7fe fcce 	bl	8002e12 <HAL_I2C_ErrorCallback>
}
 8004476:	e028      	b.n	80044ca <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b40      	cmp	r3, #64	@ 0x40
 800448a:	d10a      	bne.n	80044a2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	2200      	movs	r2, #0
 8004498:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800449a:	6978      	ldr	r0, [r7, #20]
 800449c:	f7fc fb8e 	bl	8000bbc <HAL_I2C_MemRxCpltCallback>
}
 80044a0:	e013      	b.n	80044ca <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d002      	beq.n	80044b6 <I2C_DMAXferCplt+0x1a2>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d103      	bne.n	80044be <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80044bc:	e002      	b.n	80044c4 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2212      	movs	r2, #18
 80044c2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80044c4:	6978      	ldr	r0, [r7, #20]
 80044c6:	f7fe fc6a 	bl	8002d9e <HAL_I2C_MasterRxCpltCallback>
}
 80044ca:	bf00      	nop
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ec:	2200      	movs	r2, #0
 80044ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fc:	2200      	movs	r2, #0
 80044fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800450e:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	f043 0210 	orr.w	r2, r3, #16
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f7fe fc6d 	bl	8002e12 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004558:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800455a:	4b4b      	ldr	r3, [pc, #300]	@ (8004688 <I2C_DMAAbort+0x148>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	08db      	lsrs	r3, r3, #3
 8004560:	4a4a      	ldr	r2, [pc, #296]	@ (800468c <I2C_DMAAbort+0x14c>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	0a1a      	lsrs	r2, r3, #8
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	00da      	lsls	r2, r3, #3
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004586:	e00a      	b.n	800459e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3b01      	subs	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800459c:	d0ea      	beq.n	8004574 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045aa:	2200      	movs	r2, #0
 80045ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ba:	2200      	movs	r2, #0
 80045bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2200      	movs	r2, #0
 80045d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e0:	2200      	movs	r2, #0
 80045e2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f0:	2200      	movs	r2, #0
 80045f2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b60      	cmp	r3, #96	@ 0x60
 800460e:	d10e      	bne.n	800462e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2200      	movs	r2, #0
 8004624:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004626:	6978      	ldr	r0, [r7, #20]
 8004628:	f7fe fbfc 	bl	8002e24 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800462c:	e027      	b.n	800467e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800462e:	7cfb      	ldrb	r3, [r7, #19]
 8004630:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004634:	2b28      	cmp	r3, #40	@ 0x28
 8004636:	d117      	bne.n	8004668 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004656:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2200      	movs	r2, #0
 800465c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2228      	movs	r2, #40	@ 0x28
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004666:	e007      	b.n	8004678 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004678:	6978      	ldr	r0, [r7, #20]
 800467a:	f7fe fbca 	bl	8002e12 <HAL_I2C_ErrorCallback>
}
 800467e:	bf00      	nop
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20000000 	.word	0x20000000
 800468c:	14f8b589 	.word	0x14f8b589

08004690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a0:	e048      	b.n	8004734 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d044      	beq.n	8004734 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046aa:	f7fd f811 	bl	80016d0 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d302      	bcc.n	80046c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d139      	bne.n	8004734 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	0c1b      	lsrs	r3, r3, #16
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d10d      	bne.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	43da      	mvns	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	4013      	ands	r3, r2
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	bf0c      	ite	eq
 80046dc:	2301      	moveq	r3, #1
 80046de:	2300      	movne	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	e00c      	b.n	8004700 <I2C_WaitOnFlagUntilTimeout+0x70>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	43da      	mvns	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	4013      	ands	r3, r2
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	79fb      	ldrb	r3, [r7, #7]
 8004702:	429a      	cmp	r2, r3
 8004704:	d116      	bne.n	8004734 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	f043 0220 	orr.w	r2, r3, #32
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e023      	b.n	800477c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	0c1b      	lsrs	r3, r3, #16
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b01      	cmp	r3, #1
 800473c:	d10d      	bne.n	800475a <I2C_WaitOnFlagUntilTimeout+0xca>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	43da      	mvns	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4013      	ands	r3, r2
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	461a      	mov	r2, r3
 8004758:	e00c      	b.n	8004774 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	43da      	mvns	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	4013      	ands	r3, r2
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf0c      	ite	eq
 800476c:	2301      	moveq	r3, #1
 800476e:	2300      	movne	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	429a      	cmp	r2, r3
 8004778:	d093      	beq.n	80046a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004792:	e071      	b.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800479e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a2:	d123      	bne.n	80047ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d8:	f043 0204 	orr.w	r2, r3, #4
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e067      	b.n	80048bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f2:	d041      	beq.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f4:	f7fc ff6c 	bl	80016d0 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	429a      	cmp	r2, r3
 8004802:	d302      	bcc.n	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d136      	bne.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d10c      	bne.n	800482e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	43da      	mvns	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4013      	ands	r3, r2
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	bf14      	ite	ne
 8004826:	2301      	movne	r3, #1
 8004828:	2300      	moveq	r3, #0
 800482a:	b2db      	uxtb	r3, r3
 800482c:	e00b      	b.n	8004846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	43da      	mvns	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf14      	ite	ne
 8004840:	2301      	movne	r3, #1
 8004842:	2300      	moveq	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d016      	beq.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004864:	f043 0220 	orr.w	r2, r3, #32
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e021      	b.n	80048bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	0c1b      	lsrs	r3, r3, #16
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b01      	cmp	r3, #1
 8004880:	d10c      	bne.n	800489c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	43da      	mvns	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	4013      	ands	r3, r2
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	e00b      	b.n	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	43da      	mvns	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4013      	ands	r3, r2
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bf14      	ite	ne
 80048ae:	2301      	movne	r3, #1
 80048b0:	2300      	moveq	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f47f af6d 	bne.w	8004794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048d0:	e034      	b.n	800493c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 f870 	bl	80049b8 <I2C_IsAcknowledgeFailed>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e034      	b.n	800494c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e8:	d028      	beq.n	800493c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ea:	f7fc fef1 	bl	80016d0 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d302      	bcc.n	8004900 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d11d      	bne.n	800493c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800490a:	2b80      	cmp	r3, #128	@ 0x80
 800490c:	d016      	beq.n	800493c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004928:	f043 0220 	orr.w	r2, r3, #32
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e007      	b.n	800494c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004946:	2b80      	cmp	r3, #128	@ 0x80
 8004948:	d1c3      	bne.n	80048d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004960:	4b13      	ldr	r3, [pc, #76]	@ (80049b0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	08db      	lsrs	r3, r3, #3
 8004966:	4a13      	ldr	r2, [pc, #76]	@ (80049b4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	0a1a      	lsrs	r2, r3, #8
 800496e:	4613      	mov	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3b01      	subs	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d107      	bne.n	8004992 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	f043 0220 	orr.w	r2, r3, #32
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e008      	b.n	80049a4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800499c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049a0:	d0e9      	beq.n	8004976 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20000000 	.word	0x20000000
 80049b4:	14f8b589 	.word	0x14f8b589

080049b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ce:	d11b      	bne.n	8004a08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	f043 0204 	orr.w	r2, r3, #4
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a20:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004a24:	d103      	bne.n	8004a2e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a2c:	e007      	b.n	8004a3e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004a36:	d102      	bne.n	8004a3e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr

08004a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e272      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8087 	beq.w	8004b76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a68:	4b92      	ldr	r3, [pc, #584]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d00c      	beq.n	8004a8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a74:	4b8f      	ldr	r3, [pc, #572]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d112      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x5e>
 8004a80:	4b8c      	ldr	r3, [pc, #560]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a8c:	d10b      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8e:	4b89      	ldr	r3, [pc, #548]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d06c      	beq.n	8004b74 <HAL_RCC_OscConfig+0x12c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d168      	bne.n	8004b74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e24c      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aae:	d106      	bne.n	8004abe <HAL_RCC_OscConfig+0x76>
 8004ab0:	4b80      	ldr	r3, [pc, #512]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a7f      	ldr	r2, [pc, #508]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	e02e      	b.n	8004b1c <HAL_RCC_OscConfig+0xd4>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x98>
 8004ac6:	4b7b      	ldr	r3, [pc, #492]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a7a      	ldr	r2, [pc, #488]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004acc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	4b78      	ldr	r3, [pc, #480]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a77      	ldr	r2, [pc, #476]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004ad8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e01d      	b.n	8004b1c <HAL_RCC_OscConfig+0xd4>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ae8:	d10c      	bne.n	8004b04 <HAL_RCC_OscConfig+0xbc>
 8004aea:	4b72      	ldr	r3, [pc, #456]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a71      	ldr	r2, [pc, #452]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	4b6f      	ldr	r3, [pc, #444]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a6e      	ldr	r2, [pc, #440]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e00b      	b.n	8004b1c <HAL_RCC_OscConfig+0xd4>
 8004b04:	4b6b      	ldr	r3, [pc, #428]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a6a      	ldr	r2, [pc, #424]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	4b68      	ldr	r3, [pc, #416]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a67      	ldr	r2, [pc, #412]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d013      	beq.n	8004b4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b24:	f7fc fdd4 	bl	80016d0 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b2c:	f7fc fdd0 	bl	80016d0 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b64      	cmp	r3, #100	@ 0x64
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e200      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0xe4>
 8004b4a:	e014      	b.n	8004b76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f7fc fdc0 	bl	80016d0 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b54:	f7fc fdbc 	bl	80016d0 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b64      	cmp	r3, #100	@ 0x64
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e1ec      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b66:	4b53      	ldr	r3, [pc, #332]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x10c>
 8004b72:	e000      	b.n	8004b76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d063      	beq.n	8004c4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b82:	4b4c      	ldr	r3, [pc, #304]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 030c 	and.w	r3, r3, #12
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00b      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b8e:	4b49      	ldr	r3, [pc, #292]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d11c      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x18c>
 8004b9a:	4b46      	ldr	r3, [pc, #280]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d116      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba6:	4b43      	ldr	r3, [pc, #268]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <HAL_RCC_OscConfig+0x176>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d001      	beq.n	8004bbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e1c0      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4939      	ldr	r1, [pc, #228]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd2:	e03a      	b.n	8004c4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d020      	beq.n	8004c1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bdc:	4b36      	ldr	r3, [pc, #216]	@ (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be2:	f7fc fd75 	bl	80016d0 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bea:	f7fc fd71 	bl	80016d0 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e1a1      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c08:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	00db      	lsls	r3, r3, #3
 8004c16:	4927      	ldr	r1, [pc, #156]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	600b      	str	r3, [r1, #0]
 8004c1c:	e015      	b.n	8004c4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c1e:	4b26      	ldr	r3, [pc, #152]	@ (8004cb8 <HAL_RCC_OscConfig+0x270>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c24:	f7fc fd54 	bl	80016d0 <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c2c:	f7fc fd50 	bl	80016d0 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e180      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f0      	bne.n	8004c2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d03a      	beq.n	8004ccc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d019      	beq.n	8004c92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c5e:	4b17      	ldr	r3, [pc, #92]	@ (8004cbc <HAL_RCC_OscConfig+0x274>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c64:	f7fc fd34 	bl	80016d0 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6c:	f7fc fd30 	bl	80016d0 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e160      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb4 <HAL_RCC_OscConfig+0x26c>)
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	f000 fafe 	bl	800528c <RCC_Delay>
 8004c90:	e01c      	b.n	8004ccc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c92:	4b0a      	ldr	r3, [pc, #40]	@ (8004cbc <HAL_RCC_OscConfig+0x274>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c98:	f7fc fd1a 	bl	80016d0 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c9e:	e00f      	b.n	8004cc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca0:	f7fc fd16 	bl	80016d0 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d908      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e146      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
 8004cb2:	bf00      	nop
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	42420000 	.word	0x42420000
 8004cbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc0:	4b92      	ldr	r3, [pc, #584]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e9      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80a6 	beq.w	8004e26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cde:	4b8b      	ldr	r3, [pc, #556]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10d      	bne.n	8004d06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cea:	4b88      	ldr	r3, [pc, #544]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	4a87      	ldr	r2, [pc, #540]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf4:	61d3      	str	r3, [r2, #28]
 8004cf6:	4b85      	ldr	r3, [pc, #532]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfe:	60bb      	str	r3, [r7, #8]
 8004d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d06:	4b82      	ldr	r3, [pc, #520]	@ (8004f10 <HAL_RCC_OscConfig+0x4c8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d118      	bne.n	8004d44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d12:	4b7f      	ldr	r3, [pc, #508]	@ (8004f10 <HAL_RCC_OscConfig+0x4c8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a7e      	ldr	r2, [pc, #504]	@ (8004f10 <HAL_RCC_OscConfig+0x4c8>)
 8004d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d1e:	f7fc fcd7 	bl	80016d0 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d26:	f7fc fcd3 	bl	80016d0 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b64      	cmp	r3, #100	@ 0x64
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e103      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d38:	4b75      	ldr	r3, [pc, #468]	@ (8004f10 <HAL_RCC_OscConfig+0x4c8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f0      	beq.n	8004d26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d106      	bne.n	8004d5a <HAL_RCC_OscConfig+0x312>
 8004d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	4a6e      	ldr	r2, [pc, #440]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	6213      	str	r3, [r2, #32]
 8004d58:	e02d      	b.n	8004db6 <HAL_RCC_OscConfig+0x36e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10c      	bne.n	8004d7c <HAL_RCC_OscConfig+0x334>
 8004d62:	4b6a      	ldr	r3, [pc, #424]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	4a69      	ldr	r2, [pc, #420]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	6213      	str	r3, [r2, #32]
 8004d6e:	4b67      	ldr	r3, [pc, #412]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	4a66      	ldr	r2, [pc, #408]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004d74:	f023 0304 	bic.w	r3, r3, #4
 8004d78:	6213      	str	r3, [r2, #32]
 8004d7a:	e01c      	b.n	8004db6 <HAL_RCC_OscConfig+0x36e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	2b05      	cmp	r3, #5
 8004d82:	d10c      	bne.n	8004d9e <HAL_RCC_OscConfig+0x356>
 8004d84:	4b61      	ldr	r3, [pc, #388]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	4a60      	ldr	r2, [pc, #384]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004d8a:	f043 0304 	orr.w	r3, r3, #4
 8004d8e:	6213      	str	r3, [r2, #32]
 8004d90:	4b5e      	ldr	r3, [pc, #376]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	4a5d      	ldr	r2, [pc, #372]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	6213      	str	r3, [r2, #32]
 8004d9c:	e00b      	b.n	8004db6 <HAL_RCC_OscConfig+0x36e>
 8004d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	4a5a      	ldr	r2, [pc, #360]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004da4:	f023 0301 	bic.w	r3, r3, #1
 8004da8:	6213      	str	r3, [r2, #32]
 8004daa:	4b58      	ldr	r3, [pc, #352]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	4a57      	ldr	r2, [pc, #348]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004db0:	f023 0304 	bic.w	r3, r3, #4
 8004db4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d015      	beq.n	8004dea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dbe:	f7fc fc87 	bl	80016d0 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc6:	f7fc fc83 	bl	80016d0 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e0b1      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ddc:	4b4b      	ldr	r3, [pc, #300]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0ee      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x37e>
 8004de8:	e014      	b.n	8004e14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dea:	f7fc fc71 	bl	80016d0 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004df0:	e00a      	b.n	8004e08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df2:	f7fc fc6d 	bl	80016d0 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e09b      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e08:	4b40      	ldr	r3, [pc, #256]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1ee      	bne.n	8004df2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e14:	7dfb      	ldrb	r3, [r7, #23]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d105      	bne.n	8004e26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	4a3b      	ldr	r2, [pc, #236]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004e20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8087 	beq.w	8004f3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e30:	4b36      	ldr	r3, [pc, #216]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 030c 	and.w	r3, r3, #12
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d061      	beq.n	8004f00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d146      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e44:	4b33      	ldr	r3, [pc, #204]	@ (8004f14 <HAL_RCC_OscConfig+0x4cc>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4a:	f7fc fc41 	bl	80016d0 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e52:	f7fc fc3d 	bl	80016d0 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e06d      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e64:	4b29      	ldr	r3, [pc, #164]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f0      	bne.n	8004e52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e78:	d108      	bne.n	8004e8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e7a:	4b24      	ldr	r3, [pc, #144]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	4921      	ldr	r1, [pc, #132]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a19      	ldr	r1, [r3, #32]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	491b      	ldr	r1, [pc, #108]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f14 <HAL_RCC_OscConfig+0x4cc>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fc fc11 	bl	80016d0 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb2:	f7fc fc0d 	bl	80016d0 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e03d      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ec4:	4b11      	ldr	r3, [pc, #68]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x46a>
 8004ed0:	e035      	b.n	8004f3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed2:	4b10      	ldr	r3, [pc, #64]	@ (8004f14 <HAL_RCC_OscConfig+0x4cc>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7fc fbfa 	bl	80016d0 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fc fbf6 	bl	80016d0 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e026      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef2:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <HAL_RCC_OscConfig+0x4c4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x498>
 8004efe:	e01e      	b.n	8004f3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d107      	bne.n	8004f18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e019      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40007000 	.word	0x40007000
 8004f14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f18:	4b0b      	ldr	r3, [pc, #44]	@ (8004f48 <HAL_RCC_OscConfig+0x500>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d106      	bne.n	8004f3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d001      	beq.n	8004f3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40021000 	.word	0x40021000

08004f4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d101      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0d0      	b.n	8005102 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f60:	4b6a      	ldr	r3, [pc, #424]	@ (800510c <HAL_RCC_ClockConfig+0x1c0>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d910      	bls.n	8004f90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6e:	4b67      	ldr	r3, [pc, #412]	@ (800510c <HAL_RCC_ClockConfig+0x1c0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f023 0207 	bic.w	r2, r3, #7
 8004f76:	4965      	ldr	r1, [pc, #404]	@ (800510c <HAL_RCC_ClockConfig+0x1c0>)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7e:	4b63      	ldr	r3, [pc, #396]	@ (800510c <HAL_RCC_ClockConfig+0x1c0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d001      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0b8      	b.n	8005102 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d020      	beq.n	8004fde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fa8:	4b59      	ldr	r3, [pc, #356]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	4a58      	ldr	r2, [pc, #352]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 8004fae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004fb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fc0:	4b53      	ldr	r3, [pc, #332]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4a52      	ldr	r2, [pc, #328]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004fca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fcc:	4b50      	ldr	r3, [pc, #320]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	494d      	ldr	r1, [pc, #308]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d040      	beq.n	800506c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d107      	bne.n	8005002 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff2:	4b47      	ldr	r3, [pc, #284]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d115      	bne.n	800502a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e07f      	b.n	8005102 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d107      	bne.n	800501a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800500a:	4b41      	ldr	r3, [pc, #260]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d109      	bne.n	800502a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e073      	b.n	8005102 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501a:	4b3d      	ldr	r3, [pc, #244]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e06b      	b.n	8005102 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800502a:	4b39      	ldr	r3, [pc, #228]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f023 0203 	bic.w	r2, r3, #3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	4936      	ldr	r1, [pc, #216]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 8005038:	4313      	orrs	r3, r2
 800503a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800503c:	f7fc fb48 	bl	80016d0 <HAL_GetTick>
 8005040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005042:	e00a      	b.n	800505a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005044:	f7fc fb44 	bl	80016d0 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005052:	4293      	cmp	r3, r2
 8005054:	d901      	bls.n	800505a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e053      	b.n	8005102 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505a:	4b2d      	ldr	r3, [pc, #180]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f003 020c 	and.w	r2, r3, #12
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	429a      	cmp	r2, r3
 800506a:	d1eb      	bne.n	8005044 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800506c:	4b27      	ldr	r3, [pc, #156]	@ (800510c <HAL_RCC_ClockConfig+0x1c0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0307 	and.w	r3, r3, #7
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d210      	bcs.n	800509c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507a:	4b24      	ldr	r3, [pc, #144]	@ (800510c <HAL_RCC_ClockConfig+0x1c0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f023 0207 	bic.w	r2, r3, #7
 8005082:	4922      	ldr	r1, [pc, #136]	@ (800510c <HAL_RCC_ClockConfig+0x1c0>)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	4313      	orrs	r3, r2
 8005088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508a:	4b20      	ldr	r3, [pc, #128]	@ (800510c <HAL_RCC_ClockConfig+0x1c0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e032      	b.n	8005102 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a8:	4b19      	ldr	r3, [pc, #100]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4916      	ldr	r1, [pc, #88]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d009      	beq.n	80050da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050c6:	4b12      	ldr	r3, [pc, #72]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	490e      	ldr	r1, [pc, #56]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050da:	f000 f821 	bl	8005120 <HAL_RCC_GetSysClockFreq>
 80050de:	4602      	mov	r2, r0
 80050e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005110 <HAL_RCC_ClockConfig+0x1c4>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	490a      	ldr	r1, [pc, #40]	@ (8005114 <HAL_RCC_ClockConfig+0x1c8>)
 80050ec:	5ccb      	ldrb	r3, [r1, r3]
 80050ee:	fa22 f303 	lsr.w	r3, r2, r3
 80050f2:	4a09      	ldr	r2, [pc, #36]	@ (8005118 <HAL_RCC_ClockConfig+0x1cc>)
 80050f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050f6:	4b09      	ldr	r3, [pc, #36]	@ (800511c <HAL_RCC_ClockConfig+0x1d0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fc f9b8 	bl	8001470 <HAL_InitTick>

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40022000 	.word	0x40022000
 8005110:	40021000 	.word	0x40021000
 8005114:	080089e4 	.word	0x080089e4
 8005118:	20000000 	.word	0x20000000
 800511c:	20000004 	.word	0x20000004

08005120 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	2300      	movs	r3, #0
 800512c:	60bb      	str	r3, [r7, #8]
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	2300      	movs	r3, #0
 8005134:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800513a:	4b1e      	ldr	r3, [pc, #120]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 030c 	and.w	r3, r3, #12
 8005146:	2b04      	cmp	r3, #4
 8005148:	d002      	beq.n	8005150 <HAL_RCC_GetSysClockFreq+0x30>
 800514a:	2b08      	cmp	r3, #8
 800514c:	d003      	beq.n	8005156 <HAL_RCC_GetSysClockFreq+0x36>
 800514e:	e027      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005150:	4b19      	ldr	r3, [pc, #100]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005152:	613b      	str	r3, [r7, #16]
      break;
 8005154:	e027      	b.n	80051a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	0c9b      	lsrs	r3, r3, #18
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	4a17      	ldr	r2, [pc, #92]	@ (80051bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005160:	5cd3      	ldrb	r3, [r2, r3]
 8005162:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d010      	beq.n	8005190 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800516e:	4b11      	ldr	r3, [pc, #68]	@ (80051b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	0c5b      	lsrs	r3, r3, #17
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	4a11      	ldr	r2, [pc, #68]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800517a:	5cd3      	ldrb	r3, [r2, r3]
 800517c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a0d      	ldr	r2, [pc, #52]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005182:	fb03 f202 	mul.w	r2, r3, r2
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	fbb2 f3f3 	udiv	r3, r2, r3
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	e004      	b.n	800519a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a0c      	ldr	r2, [pc, #48]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005194:	fb02 f303 	mul.w	r3, r2, r3
 8005198:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	613b      	str	r3, [r7, #16]
      break;
 800519e:	e002      	b.n	80051a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051a0:	4b05      	ldr	r3, [pc, #20]	@ (80051b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80051a2:	613b      	str	r3, [r7, #16]
      break;
 80051a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051a6:	693b      	ldr	r3, [r7, #16]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40021000 	.word	0x40021000
 80051b8:	007a1200 	.word	0x007a1200
 80051bc:	080089fc 	.word	0x080089fc
 80051c0:	08008a0c 	.word	0x08008a0c
 80051c4:	003d0900 	.word	0x003d0900

080051c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051cc:	4b02      	ldr	r3, [pc, #8]	@ (80051d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80051ce:	681b      	ldr	r3, [r3, #0]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr
 80051d8:	20000000 	.word	0x20000000

080051dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051e0:	f7ff fff2 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 80051e4:	4602      	mov	r2, r0
 80051e6:	4b05      	ldr	r3, [pc, #20]	@ (80051fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	4903      	ldr	r1, [pc, #12]	@ (8005200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051f2:	5ccb      	ldrb	r3, [r1, r3]
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40021000 	.word	0x40021000
 8005200:	080089f4 	.word	0x080089f4

08005204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005208:	f7ff ffde 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 800520c:	4602      	mov	r2, r0
 800520e:	4b05      	ldr	r3, [pc, #20]	@ (8005224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	0adb      	lsrs	r3, r3, #11
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	4903      	ldr	r1, [pc, #12]	@ (8005228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800521a:	5ccb      	ldrb	r3, [r1, r3]
 800521c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005220:	4618      	mov	r0, r3
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40021000 	.word	0x40021000
 8005228:	080089f4 	.word	0x080089f4

0800522c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	220f      	movs	r2, #15
 800523a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800523c:	4b11      	ldr	r3, [pc, #68]	@ (8005284 <HAL_RCC_GetClockConfig+0x58>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f003 0203 	and.w	r2, r3, #3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005248:	4b0e      	ldr	r3, [pc, #56]	@ (8005284 <HAL_RCC_GetClockConfig+0x58>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005254:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <HAL_RCC_GetClockConfig+0x58>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005260:	4b08      	ldr	r3, [pc, #32]	@ (8005284 <HAL_RCC_GetClockConfig+0x58>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	08db      	lsrs	r3, r3, #3
 8005266:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800526e:	4b06      	ldr	r3, [pc, #24]	@ (8005288 <HAL_RCC_GetClockConfig+0x5c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0207 	and.w	r2, r3, #7
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr
 8005284:	40021000 	.word	0x40021000
 8005288:	40022000 	.word	0x40022000

0800528c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005294:	4b0a      	ldr	r3, [pc, #40]	@ (80052c0 <RCC_Delay+0x34>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a0a      	ldr	r2, [pc, #40]	@ (80052c4 <RCC_Delay+0x38>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	0a5b      	lsrs	r3, r3, #9
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
 80052a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052a8:	bf00      	nop
  }
  while (Delay --);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	1e5a      	subs	r2, r3, #1
 80052ae:	60fa      	str	r2, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1f9      	bne.n	80052a8 <RCC_Delay+0x1c>
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr
 80052c0:	20000000 	.word	0x20000000
 80052c4:	10624dd3 	.word	0x10624dd3

080052c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e041      	b.n	800535e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f839 	bl	8005366 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3304      	adds	r3, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f000 fc48 	bl	8005b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b01      	cmp	r3, #1
 800538a:	d001      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e03a      	b.n	8005406 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a18      	ldr	r2, [pc, #96]	@ (8005410 <HAL_TIM_Base_Start_IT+0x98>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00e      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x58>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ba:	d009      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x58>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a14      	ldr	r2, [pc, #80]	@ (8005414 <HAL_TIM_Base_Start_IT+0x9c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d004      	beq.n	80053d0 <HAL_TIM_Base_Start_IT+0x58>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a13      	ldr	r2, [pc, #76]	@ (8005418 <HAL_TIM_Base_Start_IT+0xa0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d111      	bne.n	80053f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b06      	cmp	r3, #6
 80053e0:	d010      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0201 	orr.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f2:	e007      	b.n	8005404 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	bc80      	pop	{r7}
 800540e:	4770      	bx	lr
 8005410:	40012c00 	.word	0x40012c00
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800

0800541c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e041      	b.n	80054b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fb ff78 	bl	8001338 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f000 fb9e 	bl	8005b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d109      	bne.n	80054e4 <HAL_TIM_PWM_Start_IT+0x28>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	bf14      	ite	ne
 80054dc:	2301      	movne	r3, #1
 80054de:	2300      	moveq	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	e022      	b.n	800552a <HAL_TIM_PWM_Start_IT+0x6e>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d109      	bne.n	80054fe <HAL_TIM_PWM_Start_IT+0x42>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	bf14      	ite	ne
 80054f6:	2301      	movne	r3, #1
 80054f8:	2300      	moveq	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	e015      	b.n	800552a <HAL_TIM_PWM_Start_IT+0x6e>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b08      	cmp	r3, #8
 8005502:	d109      	bne.n	8005518 <HAL_TIM_PWM_Start_IT+0x5c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b01      	cmp	r3, #1
 800550e:	bf14      	ite	ne
 8005510:	2301      	movne	r3, #1
 8005512:	2300      	moveq	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	e008      	b.n	800552a <HAL_TIM_PWM_Start_IT+0x6e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b01      	cmp	r3, #1
 8005522:	bf14      	ite	ne
 8005524:	2301      	movne	r3, #1
 8005526:	2300      	moveq	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e0a9      	b.n	8005686 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d104      	bne.n	8005542 <HAL_TIM_PWM_Start_IT+0x86>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005540:	e013      	b.n	800556a <HAL_TIM_PWM_Start_IT+0xae>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b04      	cmp	r3, #4
 8005546:	d104      	bne.n	8005552 <HAL_TIM_PWM_Start_IT+0x96>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005550:	e00b      	b.n	800556a <HAL_TIM_PWM_Start_IT+0xae>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b08      	cmp	r3, #8
 8005556:	d104      	bne.n	8005562 <HAL_TIM_PWM_Start_IT+0xa6>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005560:	e003      	b.n	800556a <HAL_TIM_PWM_Start_IT+0xae>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2202      	movs	r2, #2
 8005566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b0c      	cmp	r3, #12
 800556e:	d841      	bhi.n	80055f4 <HAL_TIM_PWM_Start_IT+0x138>
 8005570:	a201      	add	r2, pc, #4	@ (adr r2, 8005578 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	080055ad 	.word	0x080055ad
 800557c:	080055f5 	.word	0x080055f5
 8005580:	080055f5 	.word	0x080055f5
 8005584:	080055f5 	.word	0x080055f5
 8005588:	080055bf 	.word	0x080055bf
 800558c:	080055f5 	.word	0x080055f5
 8005590:	080055f5 	.word	0x080055f5
 8005594:	080055f5 	.word	0x080055f5
 8005598:	080055d1 	.word	0x080055d1
 800559c:	080055f5 	.word	0x080055f5
 80055a0:	080055f5 	.word	0x080055f5
 80055a4:	080055f5 	.word	0x080055f5
 80055a8:	080055e3 	.word	0x080055e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0202 	orr.w	r2, r2, #2
 80055ba:	60da      	str	r2, [r3, #12]
      break;
 80055bc:	e01d      	b.n	80055fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 0204 	orr.w	r2, r2, #4
 80055cc:	60da      	str	r2, [r3, #12]
      break;
 80055ce:	e014      	b.n	80055fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0208 	orr.w	r2, r2, #8
 80055de:	60da      	str	r2, [r3, #12]
      break;
 80055e0:	e00b      	b.n	80055fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0210 	orr.w	r2, r2, #16
 80055f0:	60da      	str	r2, [r3, #12]
      break;
 80055f2:	e002      	b.n	80055fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	73fb      	strb	r3, [r7, #15]
      break;
 80055f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d141      	bne.n	8005684 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2201      	movs	r2, #1
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fcbd 	bl	8005f88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1f      	ldr	r2, [pc, #124]	@ (8005690 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d107      	bne.n	8005628 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005626:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a18      	ldr	r2, [pc, #96]	@ (8005690 <HAL_TIM_PWM_Start_IT+0x1d4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00e      	beq.n	8005650 <HAL_TIM_PWM_Start_IT+0x194>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800563a:	d009      	beq.n	8005650 <HAL_TIM_PWM_Start_IT+0x194>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a14      	ldr	r2, [pc, #80]	@ (8005694 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d004      	beq.n	8005650 <HAL_TIM_PWM_Start_IT+0x194>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a13      	ldr	r2, [pc, #76]	@ (8005698 <HAL_TIM_PWM_Start_IT+0x1dc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d111      	bne.n	8005674 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b06      	cmp	r3, #6
 8005660:	d010      	beq.n	8005684 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0201 	orr.w	r2, r2, #1
 8005670:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005672:	e007      	b.n	8005684 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005684:	7bfb      	ldrb	r3, [r7, #15]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40012c00 	.word	0x40012c00
 8005694:	40000400 	.word	0x40000400
 8005698:	40000800 	.word	0x40000800

0800569c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b0c      	cmp	r3, #12
 80056ae:	d841      	bhi.n	8005734 <HAL_TIM_PWM_Stop_IT+0x98>
 80056b0:	a201      	add	r2, pc, #4	@ (adr r2, 80056b8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056ed 	.word	0x080056ed
 80056bc:	08005735 	.word	0x08005735
 80056c0:	08005735 	.word	0x08005735
 80056c4:	08005735 	.word	0x08005735
 80056c8:	080056ff 	.word	0x080056ff
 80056cc:	08005735 	.word	0x08005735
 80056d0:	08005735 	.word	0x08005735
 80056d4:	08005735 	.word	0x08005735
 80056d8:	08005711 	.word	0x08005711
 80056dc:	08005735 	.word	0x08005735
 80056e0:	08005735 	.word	0x08005735
 80056e4:	08005735 	.word	0x08005735
 80056e8:	08005723 	.word	0x08005723
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0202 	bic.w	r2, r2, #2
 80056fa:	60da      	str	r2, [r3, #12]
      break;
 80056fc:	e01d      	b.n	800573a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0204 	bic.w	r2, r2, #4
 800570c:	60da      	str	r2, [r3, #12]
      break;
 800570e:	e014      	b.n	800573a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0208 	bic.w	r2, r2, #8
 800571e:	60da      	str	r2, [r3, #12]
      break;
 8005720:	e00b      	b.n	800573a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0210 	bic.w	r2, r2, #16
 8005730:	60da      	str	r2, [r3, #12]
      break;
 8005732:	e002      	b.n	800573a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
      break;
 8005738:	bf00      	nop
  }

  if (status == HAL_OK)
 800573a:	7bfb      	ldrb	r3, [r7, #15]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d157      	bne.n	80057f0 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2200      	movs	r2, #0
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fc1d 	bl	8005f88 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2a      	ldr	r2, [pc, #168]	@ (80057fc <HAL_TIM_PWM_Stop_IT+0x160>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d117      	bne.n	8005788 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6a1a      	ldr	r2, [r3, #32]
 800575e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005762:	4013      	ands	r3, r2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10f      	bne.n	8005788 <HAL_TIM_PWM_Stop_IT+0xec>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6a1a      	ldr	r2, [r3, #32]
 800576e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005772:	4013      	ands	r3, r2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d107      	bne.n	8005788 <HAL_TIM_PWM_Stop_IT+0xec>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005786:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6a1a      	ldr	r2, [r3, #32]
 800578e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005792:	4013      	ands	r3, r2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10f      	bne.n	80057b8 <HAL_TIM_PWM_Stop_IT+0x11c>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a1a      	ldr	r2, [r3, #32]
 800579e:	f240 4344 	movw	r3, #1092	@ 0x444
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d107      	bne.n	80057b8 <HAL_TIM_PWM_Stop_IT+0x11c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d104      	bne.n	80057c8 <HAL_TIM_PWM_Stop_IT+0x12c>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057c6:	e013      	b.n	80057f0 <HAL_TIM_PWM_Stop_IT+0x154>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d104      	bne.n	80057d8 <HAL_TIM_PWM_Stop_IT+0x13c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057d6:	e00b      	b.n	80057f0 <HAL_TIM_PWM_Stop_IT+0x154>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d104      	bne.n	80057e8 <HAL_TIM_PWM_Stop_IT+0x14c>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057e6:	e003      	b.n	80057f0 <HAL_TIM_PWM_Stop_IT+0x154>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40012c00 	.word	0x40012c00

08005800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d020      	beq.n	8005864 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f003 0302 	and.w	r3, r3, #2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01b      	beq.n	8005864 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f06f 0202 	mvn.w	r2, #2
 8005834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f993 	bl	8005b76 <HAL_TIM_IC_CaptureCallback>
 8005850:	e005      	b.n	800585e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f986 	bl	8005b64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f002 fe99 	bl	8008590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	2b00      	cmp	r3, #0
 800586c:	d020      	beq.n	80058b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01b      	beq.n	80058b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0204 	mvn.w	r2, #4
 8005880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f96d 	bl	8005b76 <HAL_TIM_IC_CaptureCallback>
 800589c:	e005      	b.n	80058aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f960 	bl	8005b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f002 fe73 	bl	8008590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d020      	beq.n	80058fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01b      	beq.n	80058fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0208 	mvn.w	r2, #8
 80058cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2204      	movs	r2, #4
 80058d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f947 	bl	8005b76 <HAL_TIM_IC_CaptureCallback>
 80058e8:	e005      	b.n	80058f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f93a 	bl	8005b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f002 fe4d 	bl	8008590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 0310 	and.w	r3, r3, #16
 8005902:	2b00      	cmp	r3, #0
 8005904:	d020      	beq.n	8005948 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f003 0310 	and.w	r3, r3, #16
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01b      	beq.n	8005948 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0210 	mvn.w	r2, #16
 8005918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2208      	movs	r2, #8
 800591e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f921 	bl	8005b76 <HAL_TIM_IC_CaptureCallback>
 8005934:	e005      	b.n	8005942 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f914 	bl	8005b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f002 fe27 	bl	8008590 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00c      	beq.n	800596c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d007      	beq.n	800596c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0201 	mvn.w	r2, #1
 8005964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fb fc1c 	bl	80011a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00c      	beq.n	8005990 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fb87 	bl	800609e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00c      	beq.n	80059b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80059ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f8ea 	bl	8005b88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00c      	beq.n	80059d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d007      	beq.n	80059d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0220 	mvn.w	r2, #32
 80059d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fb5a 	bl	800608c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e0ae      	b.n	8005b5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b0c      	cmp	r3, #12
 8005a0a:	f200 809f 	bhi.w	8005b4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a14:	08005a49 	.word	0x08005a49
 8005a18:	08005b4d 	.word	0x08005b4d
 8005a1c:	08005b4d 	.word	0x08005b4d
 8005a20:	08005b4d 	.word	0x08005b4d
 8005a24:	08005a89 	.word	0x08005a89
 8005a28:	08005b4d 	.word	0x08005b4d
 8005a2c:	08005b4d 	.word	0x08005b4d
 8005a30:	08005b4d 	.word	0x08005b4d
 8005a34:	08005acb 	.word	0x08005acb
 8005a38:	08005b4d 	.word	0x08005b4d
 8005a3c:	08005b4d 	.word	0x08005b4d
 8005a40:	08005b4d 	.word	0x08005b4d
 8005a44:	08005b0b 	.word	0x08005b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f912 	bl	8005c78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0208 	orr.w	r2, r2, #8
 8005a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0204 	bic.w	r2, r2, #4
 8005a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6999      	ldr	r1, [r3, #24]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	619a      	str	r2, [r3, #24]
      break;
 8005a86:	e064      	b.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 f958 	bl	8005d44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699a      	ldr	r2, [r3, #24]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6999      	ldr	r1, [r3, #24]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	021a      	lsls	r2, r3, #8
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	619a      	str	r2, [r3, #24]
      break;
 8005ac8:	e043      	b.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 f9a1 	bl	8005e18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0208 	orr.w	r2, r2, #8
 8005ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0204 	bic.w	r2, r2, #4
 8005af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69d9      	ldr	r1, [r3, #28]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	61da      	str	r2, [r3, #28]
      break;
 8005b08:	e023      	b.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 f9eb 	bl	8005eec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69da      	ldr	r2, [r3, #28]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69d9      	ldr	r1, [r3, #28]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	021a      	lsls	r2, r3, #8
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	61da      	str	r2, [r3, #28]
      break;
 8005b4a:	e002      	b.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bc80      	pop	{r7}
 8005b74:	4770      	bx	lr

08005b76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr

08005b88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr
	...

08005b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a2f      	ldr	r2, [pc, #188]	@ (8005c6c <TIM_Base_SetConfig+0xd0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00b      	beq.n	8005bcc <TIM_Base_SetConfig+0x30>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bba:	d007      	beq.n	8005bcc <TIM_Base_SetConfig+0x30>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8005c70 <TIM_Base_SetConfig+0xd4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d003      	beq.n	8005bcc <TIM_Base_SetConfig+0x30>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8005c74 <TIM_Base_SetConfig+0xd8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d108      	bne.n	8005bde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a22      	ldr	r2, [pc, #136]	@ (8005c6c <TIM_Base_SetConfig+0xd0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00b      	beq.n	8005bfe <TIM_Base_SetConfig+0x62>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bec:	d007      	beq.n	8005bfe <TIM_Base_SetConfig+0x62>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8005c70 <TIM_Base_SetConfig+0xd4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d003      	beq.n	8005bfe <TIM_Base_SetConfig+0x62>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8005c74 <TIM_Base_SetConfig+0xd8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d108      	bne.n	8005c10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a0d      	ldr	r2, [pc, #52]	@ (8005c6c <TIM_Base_SetConfig+0xd0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d103      	bne.n	8005c44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d005      	beq.n	8005c62 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f023 0201 	bic.w	r2, r3, #1
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	611a      	str	r2, [r3, #16]
  }
}
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr
 8005c6c:	40012c00 	.word	0x40012c00
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800

08005c78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	f023 0201 	bic.w	r2, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f023 0302 	bic.w	r3, r3, #2
 8005cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a1c      	ldr	r2, [pc, #112]	@ (8005d40 <TIM_OC1_SetConfig+0xc8>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d10c      	bne.n	8005cee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f023 0308 	bic.w	r3, r3, #8
 8005cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f023 0304 	bic.w	r3, r3, #4
 8005cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a13      	ldr	r2, [pc, #76]	@ (8005d40 <TIM_OC1_SetConfig+0xc8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d111      	bne.n	8005d1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	621a      	str	r2, [r3, #32]
}
 8005d34:	bf00      	nop
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40012c00 	.word	0x40012c00

08005d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	f023 0210 	bic.w	r2, r3, #16
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	021b      	lsls	r3, r3, #8
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f023 0320 	bic.w	r3, r3, #32
 8005d8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8005e14 <TIM_OC2_SetConfig+0xd0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d10d      	bne.n	8005dc0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a14      	ldr	r2, [pc, #80]	@ (8005e14 <TIM_OC2_SetConfig+0xd0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d113      	bne.n	8005df0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005dce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr
 8005e14:	40012c00 	.word	0x40012c00

08005e18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0303 	bic.w	r3, r3, #3
 8005e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	021b      	lsls	r3, r3, #8
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee8 <TIM_OC3_SetConfig+0xd0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d10d      	bne.n	8005e92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	021b      	lsls	r3, r3, #8
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a14      	ldr	r2, [pc, #80]	@ (8005ee8 <TIM_OC3_SetConfig+0xd0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d113      	bne.n	8005ec2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	621a      	str	r2, [r3, #32]
}
 8005edc:	bf00      	nop
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bc80      	pop	{r7}
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40012c00 	.word	0x40012c00

08005eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	021b      	lsls	r3, r3, #8
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	031b      	lsls	r3, r3, #12
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a0f      	ldr	r2, [pc, #60]	@ (8005f84 <TIM_OC4_SetConfig+0x98>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d109      	bne.n	8005f60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	019b      	lsls	r3, r3, #6
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	621a      	str	r2, [r3, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr
 8005f84:	40012c00 	.word	0x40012c00

08005f88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a1a      	ldr	r2, [r3, #32]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	401a      	ands	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a1a      	ldr	r2, [r3, #32]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f003 031f 	and.w	r3, r3, #31
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr

08005fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e046      	b.n	8006076 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800600e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a16      	ldr	r2, [pc, #88]	@ (8006080 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00e      	beq.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006034:	d009      	beq.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a12      	ldr	r2, [pc, #72]	@ (8006084 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d004      	beq.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a10      	ldr	r2, [pc, #64]	@ (8006088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d10c      	bne.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	4313      	orrs	r3, r2
 800605a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	bc80      	pop	{r7}
 800607e:	4770      	bx	lr
 8006080:	40012c00 	.word	0x40012c00
 8006084:	40000400 	.word	0x40000400
 8006088:	40000800 	.word	0x40000800

0800608c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	bc80      	pop	{r7}
 800609c:	4770      	bx	lr

0800609e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr

080060b0 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e04a      	b.n	8006158 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d106      	bne.n	80060dc <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fb f982 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2224      	movs	r2, #36	@ 0x24
 80060e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fe29 	bl	8006d4c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695a      	ldr	r2, [r3, #20]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8006118:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0208 	orr.w	r2, r2, #8
 8006128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	@ 0x28
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	603b      	str	r3, [r7, #0]
 800616c:	4613      	mov	r3, r2
 800616e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b20      	cmp	r3, #32
 800617e:	d175      	bne.n	800626c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <HAL_UART_Transmit+0x2c>
 8006186:	88fb      	ldrh	r3, [r7, #6]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e06e      	b.n	800626e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2221      	movs	r2, #33	@ 0x21
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800619e:	f7fb fa97 	bl	80016d0 <HAL_GetTick>
 80061a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061b8:	d108      	bne.n	80061cc <HAL_UART_Transmit+0x6c>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	e003      	b.n	80061d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061d4:	e02e      	b.n	8006234 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2200      	movs	r2, #0
 80061de:	2180      	movs	r1, #128	@ 0x80
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 fb85 	bl	80068f0 <UART_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e03a      	b.n	800626e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800620c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	3302      	adds	r3, #2
 8006212:	61bb      	str	r3, [r7, #24]
 8006214:	e007      	b.n	8006226 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	781a      	ldrb	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	3301      	adds	r3, #1
 8006224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1cb      	bne.n	80061d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2200      	movs	r2, #0
 8006246:	2140      	movs	r1, #64	@ 0x40
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 fb51 	bl	80068f0 <UART_WaitOnFlagUntilTimeout>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e006      	b.n	800626e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	e000      	b.n	800626e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800626c:	2302      	movs	r3, #2
  }
}
 800626e:	4618      	mov	r0, r3
 8006270:	3720      	adds	r7, #32
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b08c      	sub	sp, #48	@ 0x30
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	4613      	mov	r3, r2
 8006282:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b20      	cmp	r3, #32
 800628e:	d14a      	bne.n	8006326 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8006296:	88fb      	ldrh	r3, [r7, #6]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e043      	b.n	8006328 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2201      	movs	r2, #1
 80062a4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	461a      	mov	r2, r3
 80062b0:	68b9      	ldr	r1, [r7, #8]
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 fb75 	bl	80069a2 <UART_Start_Receive_IT>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80062be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d12c      	bne.n	8006320 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d125      	bne.n	800631a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	330c      	adds	r3, #12
 80062ea:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	e853 3f00 	ldrex	r3, [r3]
 80062f2:	617b      	str	r3, [r7, #20]
   return(result);
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f043 0310 	orr.w	r3, r3, #16
 80062fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	330c      	adds	r3, #12
 8006302:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006304:	627a      	str	r2, [r7, #36]	@ 0x24
 8006306:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	6a39      	ldr	r1, [r7, #32]
 800630a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800630c:	e841 2300 	strex	r3, r2, [r1]
 8006310:	61fb      	str	r3, [r7, #28]
   return(result);
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e5      	bne.n	80062e4 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8006318:	e002      	b.n	8006320 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006320:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006324:	e000      	b.n	8006328 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006326:	2302      	movs	r3, #2
  }
}
 8006328:	4618      	mov	r0, r3
 800632a:	3730      	adds	r7, #48	@ 0x30
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b0ba      	sub	sp, #232	@ 0xe8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006356:	2300      	movs	r3, #0
 8006358:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800635c:	2300      	movs	r3, #0
 800635e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800636e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10f      	bne.n	8006396 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b00      	cmp	r3, #0
 8006380:	d009      	beq.n	8006396 <HAL_UART_IRQHandler+0x66>
 8006382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fc1d 	bl	8006bce <UART_Receive_IT>
      return;
 8006394:	e25b      	b.n	800684e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 80de 	beq.w	800655c <HAL_UART_IRQHandler+0x22c>
 80063a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d106      	bne.n	80063ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 80d1 	beq.w	800655c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00b      	beq.n	80063de <HAL_UART_IRQHandler+0xae>
 80063c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d005      	beq.n	80063de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d6:	f043 0201 	orr.w	r2, r3, #1
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00b      	beq.n	8006402 <HAL_UART_IRQHandler+0xd2>
 80063ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fa:	f043 0202 	orr.w	r2, r3, #2
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <HAL_UART_IRQHandler+0xf6>
 800640e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641e:	f043 0204 	orr.w	r2, r3, #4
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d011      	beq.n	8006456 <HAL_UART_IRQHandler+0x126>
 8006432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d105      	bne.n	800644a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800643e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644e:	f043 0208 	orr.w	r2, r3, #8
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 81f2 	beq.w	8006844 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b00      	cmp	r3, #0
 800646a:	d008      	beq.n	800647e <HAL_UART_IRQHandler+0x14e>
 800646c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006470:	f003 0320 	and.w	r3, r3, #32
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fba8 	bl	8006bce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	bf14      	ite	ne
 800648c:	2301      	movne	r3, #1
 800648e:	2300      	moveq	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d103      	bne.n	80064aa <HAL_UART_IRQHandler+0x17a>
 80064a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d04f      	beq.n	800654a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fab2 	bl	8006a14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d041      	beq.n	8006542 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3314      	adds	r3, #20
 80064c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3314      	adds	r3, #20
 80064e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1d9      	bne.n	80064be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800650e:	2b00      	cmp	r3, #0
 8006510:	d013      	beq.n	800653a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006516:	4a7e      	ldr	r2, [pc, #504]	@ (8006710 <HAL_UART_IRQHandler+0x3e0>)
 8006518:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800651e:	4618      	mov	r0, r3
 8006520:	f7fb fada 	bl	8001ad8 <HAL_DMA_Abort_IT>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d016      	beq.n	8006558 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800652e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006534:	4610      	mov	r0, r2
 8006536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006538:	e00e      	b.n	8006558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f99c 	bl	8006878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006540:	e00a      	b.n	8006558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f998 	bl	8006878 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006548:	e006      	b.n	8006558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f994 	bl	8006878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006556:	e175      	b.n	8006844 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006558:	bf00      	nop
    return;
 800655a:	e173      	b.n	8006844 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006560:	2b01      	cmp	r3, #1
 8006562:	f040 814f 	bne.w	8006804 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800656a:	f003 0310 	and.w	r3, r3, #16
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8148 	beq.w	8006804 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006578:	f003 0310 	and.w	r3, r3, #16
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 8141 	beq.w	8006804 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006582:	2300      	movs	r3, #0
 8006584:	60bb      	str	r3, [r7, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60bb      	str	r3, [r7, #8]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 80b6 	beq.w	8006714 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8145 	beq.w	8006848 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065c6:	429a      	cmp	r2, r3
 80065c8:	f080 813e 	bcs.w	8006848 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	2b20      	cmp	r3, #32
 80065dc:	f000 8088 	beq.w	80066f0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	330c      	adds	r3, #12
 80065e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	330c      	adds	r3, #12
 8006608:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800660c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006610:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006618:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006624:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1d9      	bne.n	80065e0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3314      	adds	r3, #20
 8006632:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800663c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3314      	adds	r3, #20
 800664c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006650:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006654:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006658:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800665c:	e841 2300 	strex	r3, r2, [r1]
 8006660:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006662:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e1      	bne.n	800662c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3314      	adds	r3, #20
 800666e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006672:	e853 3f00 	ldrex	r3, [r3]
 8006676:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006678:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800667a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800667e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3314      	adds	r3, #20
 8006688:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800668c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800668e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006692:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800669a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e3      	bne.n	8006668 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066c0:	f023 0310 	bic.w	r3, r3, #16
 80066c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	330c      	adds	r3, #12
 80066ce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80066d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80066d4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e3      	bne.n	80066ae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fb f9b8 	bl	8001a60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066fe:	b29b      	uxth	r3, r3
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	b29b      	uxth	r3, r3
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fa ff80 	bl	800160c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800670c:	e09c      	b.n	8006848 <HAL_UART_IRQHandler+0x518>
 800670e:	bf00      	nop
 8006710:	08006ad9 	.word	0x08006ad9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800671c:	b29b      	uxth	r3, r3
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 808e 	beq.w	800684c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8089 	beq.w	800684c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	330c      	adds	r3, #12
 8006740:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800674a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006750:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	330c      	adds	r3, #12
 800675a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800675e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006760:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006764:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800676c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1e3      	bne.n	800673a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3314      	adds	r3, #20
 8006778:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	623b      	str	r3, [r7, #32]
   return(result);
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	f023 0301 	bic.w	r3, r3, #1
 8006788:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3314      	adds	r3, #20
 8006792:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006796:	633a      	str	r2, [r7, #48]	@ 0x30
 8006798:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800679c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e3      	bne.n	8006772 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	330c      	adds	r3, #12
 80067be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0310 	bic.w	r3, r3, #16
 80067ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	330c      	adds	r3, #12
 80067d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80067dc:	61fa      	str	r2, [r7, #28]
 80067de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	69b9      	ldr	r1, [r7, #24]
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	617b      	str	r3, [r7, #20]
   return(result);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e3      	bne.n	80067b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7fa ff05 	bl	800160c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006802:	e023      	b.n	800684c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800680c:	2b00      	cmp	r3, #0
 800680e:	d009      	beq.n	8006824 <HAL_UART_IRQHandler+0x4f4>
 8006810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f96f 	bl	8006b00 <UART_Transmit_IT>
    return;
 8006822:	e014      	b.n	800684e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00e      	beq.n	800684e <HAL_UART_IRQHandler+0x51e>
 8006830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d008      	beq.n	800684e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f9ae 	bl	8006b9e <UART_EndTransmit_IT>
    return;
 8006842:	e004      	b.n	800684e <HAL_UART_IRQHandler+0x51e>
    return;
 8006844:	bf00      	nop
 8006846:	e002      	b.n	800684e <HAL_UART_IRQHandler+0x51e>
      return;
 8006848:	bf00      	nop
 800684a:	e000      	b.n	800684e <HAL_UART_IRQHandler+0x51e>
      return;
 800684c:	bf00      	nop
  }
}
 800684e:	37e8      	adds	r7, #232	@ 0xe8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	bc80      	pop	{r7}
 8006864:	4770      	bx	lr

08006866 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr

08006878 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	bc80      	pop	{r7}
 8006888:	4770      	bx	lr

0800688a <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800688a:	b480      	push	{r7}
 800688c:	b085      	sub	sp, #20
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e020      	b.n	80068e6 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2224      	movs	r2, #36	@ 0x24
 80068b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 030c 	bic.w	r3, r3, #12
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f043 0308 	orr.w	r3, r3, #8
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bc80      	pop	{r7}
 80068ee:	4770      	bx	lr

080068f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	4613      	mov	r3, r2
 80068fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006900:	e03b      	b.n	800697a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006908:	d037      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690a:	f7fa fee1 	bl	80016d0 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	6a3a      	ldr	r2, [r7, #32]
 8006916:	429a      	cmp	r2, r3
 8006918:	d302      	bcc.n	8006920 <UART_WaitOnFlagUntilTimeout+0x30>
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e03a      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f003 0304 	and.w	r3, r3, #4
 800692e:	2b00      	cmp	r3, #0
 8006930:	d023      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b80      	cmp	r3, #128	@ 0x80
 8006936:	d020      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b40      	cmp	r3, #64	@ 0x40
 800693c:	d01d      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b08      	cmp	r3, #8
 800694a:	d116      	bne.n	800697a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f856 	bl	8006a14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2208      	movs	r2, #8
 800696c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e00f      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4013      	ands	r3, r2
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	429a      	cmp	r2, r3
 8006988:	bf0c      	ite	eq
 800698a:	2301      	moveq	r3, #1
 800698c:	2300      	movne	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	461a      	mov	r2, r3
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	429a      	cmp	r2, r3
 8006996:	d0b4      	beq.n	8006902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b085      	sub	sp, #20
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	4613      	mov	r3, r2
 80069ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	88fa      	ldrh	r2, [r7, #6]
 80069ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	88fa      	ldrh	r2, [r7, #6]
 80069c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2222      	movs	r2, #34	@ 0x22
 80069cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68da      	ldr	r2, [r3, #12]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069e6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695a      	ldr	r2, [r3, #20]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0201 	orr.w	r2, r2, #1
 80069f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0220 	orr.w	r2, r2, #32
 8006a06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr

08006a14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b095      	sub	sp, #84	@ 0x54
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	330c      	adds	r3, #12
 8006a22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a3c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e5      	bne.n	8006a1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3314      	adds	r3, #20
 8006a56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f023 0301 	bic.w	r3, r3, #1
 8006a66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e5      	bne.n	8006a50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d119      	bne.n	8006ac0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f023 0310 	bic.w	r3, r3, #16
 8006aa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aac:	61ba      	str	r2, [r7, #24]
 8006aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e5      	bne.n	8006a8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ace:	bf00      	nop
 8006ad0:	3754      	adds	r7, #84	@ 0x54
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr

08006ad8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7ff fec0 	bl	8006878 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006af8:	bf00      	nop
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b21      	cmp	r3, #33	@ 0x21
 8006b12:	d13e      	bne.n	8006b92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b1c:	d114      	bne.n	8006b48 <UART_Transmit_IT+0x48>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d110      	bne.n	8006b48 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	1c9a      	adds	r2, r3, #2
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	621a      	str	r2, [r3, #32]
 8006b46:	e008      	b.n	8006b5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	1c59      	adds	r1, r3, #1
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6211      	str	r1, [r2, #32]
 8006b52:	781a      	ldrb	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	4619      	mov	r1, r3
 8006b68:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10f      	bne.n	8006b8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e000      	b.n	8006b94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b92:	2302      	movs	r3, #2
  }
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr

08006b9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7ff fe48 	bl	8006854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b08c      	sub	sp, #48	@ 0x30
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b22      	cmp	r3, #34	@ 0x22
 8006be0:	f040 80ae 	bne.w	8006d40 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bec:	d117      	bne.n	8006c1e <UART_Receive_IT+0x50>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d113      	bne.n	8006c1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c16:	1c9a      	adds	r2, r3, #2
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c1c:	e026      	b.n	8006c6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c30:	d007      	beq.n	8006c42 <UART_Receive_IT+0x74>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <UART_Receive_IT+0x82>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e008      	b.n	8006c62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b01      	subs	r3, #1
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d15d      	bne.n	8006d3c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0220 	bic.w	r2, r2, #32
 8006c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695a      	ldr	r2, [r3, #20]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0201 	bic.w	r2, r2, #1
 8006cae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d135      	bne.n	8006d32 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	330c      	adds	r3, #12
 8006cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	e853 3f00 	ldrex	r3, [r3]
 8006cda:	613b      	str	r3, [r7, #16]
   return(result);
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f023 0310 	bic.w	r3, r3, #16
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	330c      	adds	r3, #12
 8006cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cec:	623a      	str	r2, [r7, #32]
 8006cee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	69f9      	ldr	r1, [r7, #28]
 8006cf2:	6a3a      	ldr	r2, [r7, #32]
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e5      	bne.n	8006ccc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0310 	and.w	r3, r3, #16
 8006d0a:	2b10      	cmp	r3, #16
 8006d0c:	d10a      	bne.n	8006d24 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fa fc6e 	bl	800160c <HAL_UARTEx_RxEventCallback>
 8006d30:	e002      	b.n	8006d38 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff fd97 	bl	8006866 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	e002      	b.n	8006d42 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e000      	b.n	8006d42 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d40:	2302      	movs	r3, #2
  }
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3730      	adds	r7, #48	@ 0x30
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006d86:	f023 030c 	bic.w	r3, r3, #12
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6812      	ldr	r2, [r2, #0]
 8006d8e:	68b9      	ldr	r1, [r7, #8]
 8006d90:	430b      	orrs	r3, r1
 8006d92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a2c      	ldr	r2, [pc, #176]	@ (8006e60 <UART_SetConfig+0x114>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d103      	bne.n	8006dbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006db4:	f7fe fa26 	bl	8005204 <HAL_RCC_GetPCLK2Freq>
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	e002      	b.n	8006dc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006dbc:	f7fe fa0e 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
 8006dc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	009a      	lsls	r2, r3, #2
 8006dcc:	441a      	add	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd8:	4a22      	ldr	r2, [pc, #136]	@ (8006e64 <UART_SetConfig+0x118>)
 8006dda:	fba2 2303 	umull	r2, r3, r2, r3
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	0119      	lsls	r1, r3, #4
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009a      	lsls	r2, r3, #2
 8006dec:	441a      	add	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006df8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e64 <UART_SetConfig+0x118>)
 8006dfa:	fba3 0302 	umull	r0, r3, r3, r2
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	2064      	movs	r0, #100	@ 0x64
 8006e02:	fb00 f303 	mul.w	r3, r0, r3
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	3332      	adds	r3, #50	@ 0x32
 8006e0c:	4a15      	ldr	r2, [pc, #84]	@ (8006e64 <UART_SetConfig+0x118>)
 8006e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e12:	095b      	lsrs	r3, r3, #5
 8006e14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e18:	4419      	add	r1, r3
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	009a      	lsls	r2, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e30:	4b0c      	ldr	r3, [pc, #48]	@ (8006e64 <UART_SetConfig+0x118>)
 8006e32:	fba3 0302 	umull	r0, r3, r3, r2
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	2064      	movs	r0, #100	@ 0x64
 8006e3a:	fb00 f303 	mul.w	r3, r0, r3
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	011b      	lsls	r3, r3, #4
 8006e42:	3332      	adds	r3, #50	@ 0x32
 8006e44:	4a07      	ldr	r2, [pc, #28]	@ (8006e64 <UART_SetConfig+0x118>)
 8006e46:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	f003 020f 	and.w	r2, r3, #15
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	440a      	add	r2, r1
 8006e56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006e58:	bf00      	nop
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	40013800 	.word	0x40013800
 8006e64:	51eb851f 	.word	0x51eb851f

08006e68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e7a:	2b84      	cmp	r3, #132	@ 0x84
 8006e7c:	d005      	beq.n	8006e8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006e7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	4413      	add	r3, r2
 8006e86:	3303      	adds	r3, #3
 8006e88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bc80      	pop	{r7}
 8006e94:	4770      	bx	lr

08006e96 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e9a:	f000 faf7 	bl	800748c <vTaskStartScheduler>
  
  return osOK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ea6:	b089      	sub	sp, #36	@ 0x24
 8006ea8:	af04      	add	r7, sp, #16
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d020      	beq.n	8006ef8 <osThreadCreate+0x54>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d01c      	beq.n	8006ef8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685c      	ldr	r4, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691e      	ldr	r6, [r3, #16]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff ffc9 	bl	8006e68 <makeFreeRtosPriority>
 8006ed6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ee0:	9202      	str	r2, [sp, #8]
 8006ee2:	9301      	str	r3, [sp, #4]
 8006ee4:	9100      	str	r1, [sp, #0]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	4632      	mov	r2, r6
 8006eea:	4629      	mov	r1, r5
 8006eec:	4620      	mov	r0, r4
 8006eee:	f000 f8e8 	bl	80070c2 <xTaskCreateStatic>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	e01c      	b.n	8006f32 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685c      	ldr	r4, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f04:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff ffab 	bl	8006e68 <makeFreeRtosPriority>
 8006f12:	4602      	mov	r2, r0
 8006f14:	f107 030c 	add.w	r3, r7, #12
 8006f18:	9301      	str	r3, [sp, #4]
 8006f1a:	9200      	str	r2, [sp, #0]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	4632      	mov	r2, r6
 8006f20:	4629      	mov	r1, r5
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 f92d 	bl	8007182 <xTaskCreate>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d001      	beq.n	8006f32 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e000      	b.n	8006f34 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006f32:	68fb      	ldr	r3, [r7, #12]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f3c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <osDelay+0x16>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	e000      	b.n	8006f54 <osDelay+0x18>
 8006f52:	2301      	movs	r3, #1
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fa63 	bl	8007420 <vTaskDelay>
  
  return osOK;
 8006f5a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f103 0208 	add.w	r2, r3, #8
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f103 0208 	add.w	r2, r3, #8
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f103 0208 	add.w	r2, r3, #8
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bc80      	pop	{r7}
 8006fa0:	4770      	bx	lr

08006fa2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc80      	pop	{r7}
 8006fb8:	4770      	bx	lr

08006fba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	601a      	str	r2, [r3, #0]
}
 8006ff6:	bf00      	nop
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bc80      	pop	{r7}
 8006ffe:	4770      	bx	lr

08007000 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007016:	d103      	bne.n	8007020 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	e00c      	b.n	800703a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3308      	adds	r3, #8
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	e002      	b.n	800702e <vListInsert+0x2e>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	429a      	cmp	r2, r3
 8007038:	d2f6      	bcs.n	8007028 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	601a      	str	r2, [r3, #0]
}
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	bc80      	pop	{r7}
 800706e:	4770      	bx	lr

08007070 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6892      	ldr	r2, [r2, #8]
 8007086:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6852      	ldr	r2, [r2, #4]
 8007090:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	429a      	cmp	r2, r3
 800709a:	d103      	bne.n	80070a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	1e5a      	subs	r2, r3, #1
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr

080070c2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b08e      	sub	sp, #56	@ 0x38
 80070c6:	af04      	add	r7, sp, #16
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	607a      	str	r2, [r7, #4]
 80070ce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10b      	bne.n	80070ee <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070da:	f383 8811 	msr	BASEPRI, r3
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f3bf 8f4f 	dsb	sy
 80070e6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070e8:	bf00      	nop
 80070ea:	bf00      	nop
 80070ec:	e7fd      	b.n	80070ea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10b      	bne.n	800710c <xTaskCreateStatic+0x4a>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	61fb      	str	r3, [r7, #28]
}
 8007106:	bf00      	nop
 8007108:	bf00      	nop
 800710a:	e7fd      	b.n	8007108 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800710c:	23a0      	movs	r3, #160	@ 0xa0
 800710e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2ba0      	cmp	r3, #160	@ 0xa0
 8007114:	d00b      	beq.n	800712e <xTaskCreateStatic+0x6c>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	61bb      	str	r3, [r7, #24]
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	e7fd      	b.n	800712a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800712e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007132:	2b00      	cmp	r3, #0
 8007134:	d01e      	beq.n	8007174 <xTaskCreateStatic+0xb2>
 8007136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01b      	beq.n	8007174 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007142:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007144:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	2202      	movs	r2, #2
 800714a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800714e:	2300      	movs	r3, #0
 8007150:	9303      	str	r3, [sp, #12]
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	9302      	str	r3, [sp, #8]
 8007156:	f107 0314 	add.w	r3, r7, #20
 800715a:	9301      	str	r3, [sp, #4]
 800715c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	68b9      	ldr	r1, [r7, #8]
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 f850 	bl	800720c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800716c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800716e:	f000 f8ed 	bl	800734c <prvAddNewTaskToReadyList>
 8007172:	e001      	b.n	8007178 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007178:	697b      	ldr	r3, [r7, #20]
	}
 800717a:	4618      	mov	r0, r3
 800717c:	3728      	adds	r7, #40	@ 0x28
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007182:	b580      	push	{r7, lr}
 8007184:	b08c      	sub	sp, #48	@ 0x30
 8007186:	af04      	add	r7, sp, #16
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	603b      	str	r3, [r7, #0]
 800718e:	4613      	mov	r3, r2
 8007190:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007192:	88fb      	ldrh	r3, [r7, #6]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4618      	mov	r0, r3
 8007198:	f000 fea2 	bl	8007ee0 <pvPortMalloc>
 800719c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00e      	beq.n	80071c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071a4:	20a0      	movs	r0, #160	@ 0xa0
 80071a6:	f000 fe9b 	bl	8007ee0 <pvPortMalloc>
 80071aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80071b8:	e005      	b.n	80071c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071ba:	6978      	ldr	r0, [r7, #20]
 80071bc:	f000 ff5e 	bl	800807c <vPortFree>
 80071c0:	e001      	b.n	80071c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d017      	beq.n	80071fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071d4:	88fa      	ldrh	r2, [r7, #6]
 80071d6:	2300      	movs	r3, #0
 80071d8:	9303      	str	r3, [sp, #12]
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	9302      	str	r3, [sp, #8]
 80071de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	68b9      	ldr	r1, [r7, #8]
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f80e 	bl	800720c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071f0:	69f8      	ldr	r0, [r7, #28]
 80071f2:	f000 f8ab 	bl	800734c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071f6:	2301      	movs	r3, #1
 80071f8:	61bb      	str	r3, [r7, #24]
 80071fa:	e002      	b.n	8007202 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007200:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007202:	69bb      	ldr	r3, [r7, #24]
	}
 8007204:	4618      	mov	r0, r3
 8007206:	3720      	adds	r7, #32
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800721a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007224:	3b01      	subs	r3, #1
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	f023 0307 	bic.w	r3, r3, #7
 8007232:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00b      	beq.n	8007256 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	617b      	str	r3, [r7, #20]
}
 8007250:	bf00      	nop
 8007252:	bf00      	nop
 8007254:	e7fd      	b.n	8007252 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d01f      	beq.n	800729c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800725c:	2300      	movs	r3, #0
 800725e:	61fb      	str	r3, [r7, #28]
 8007260:	e012      	b.n	8007288 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	4413      	add	r3, r2
 8007268:	7819      	ldrb	r1, [r3, #0]
 800726a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	4413      	add	r3, r2
 8007270:	3334      	adds	r3, #52	@ 0x34
 8007272:	460a      	mov	r2, r1
 8007274:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	4413      	add	r3, r2
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d006      	beq.n	8007290 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	3301      	adds	r3, #1
 8007286:	61fb      	str	r3, [r7, #28]
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	2b0f      	cmp	r3, #15
 800728c:	d9e9      	bls.n	8007262 <prvInitialiseNewTask+0x56>
 800728e:	e000      	b.n	8007292 <prvInitialiseNewTask+0x86>
			{
				break;
 8007290:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800729a:	e003      	b.n	80072a4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800729c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a6:	2b06      	cmp	r3, #6
 80072a8:	d901      	bls.n	80072ae <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072aa:	2306      	movs	r3, #6
 80072ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072b8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	2200      	movs	r2, #0
 80072be:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	3304      	adds	r3, #4
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7ff fe6c 	bl	8006fa2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	3318      	adds	r3, #24
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7ff fe67 	bl	8006fa2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072dc:	f1c3 0207 	rsb	r2, r3, #7
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	2200      	movs	r2, #0
 80072ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80072fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fc:	334c      	adds	r3, #76	@ 0x4c
 80072fe:	224c      	movs	r2, #76	@ 0x4c
 8007300:	2100      	movs	r1, #0
 8007302:	4618      	mov	r0, r3
 8007304:	f001 fa10 	bl	8008728 <memset>
 8007308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730a:	4a0d      	ldr	r2, [pc, #52]	@ (8007340 <prvInitialiseNewTask+0x134>)
 800730c:	651a      	str	r2, [r3, #80]	@ 0x50
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	4a0c      	ldr	r2, [pc, #48]	@ (8007344 <prvInitialiseNewTask+0x138>)
 8007312:	655a      	str	r2, [r3, #84]	@ 0x54
 8007314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007316:	4a0c      	ldr	r2, [pc, #48]	@ (8007348 <prvInitialiseNewTask+0x13c>)
 8007318:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	68f9      	ldr	r1, [r7, #12]
 800731e:	69b8      	ldr	r0, [r7, #24]
 8007320:	f000 fc28 	bl	8007b74 <pxPortInitialiseStack>
 8007324:	4602      	mov	r2, r0
 8007326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007328:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800732a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007336:	bf00      	nop
 8007338:	3720      	adds	r7, #32
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20001a4c 	.word	0x20001a4c
 8007344:	20001ab4 	.word	0x20001ab4
 8007348:	20001b1c 	.word	0x20001b1c

0800734c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007354:	f000 fd02 	bl	8007d5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007358:	4b2a      	ldr	r3, [pc, #168]	@ (8007404 <prvAddNewTaskToReadyList+0xb8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3301      	adds	r3, #1
 800735e:	4a29      	ldr	r2, [pc, #164]	@ (8007404 <prvAddNewTaskToReadyList+0xb8>)
 8007360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007362:	4b29      	ldr	r3, [pc, #164]	@ (8007408 <prvAddNewTaskToReadyList+0xbc>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d109      	bne.n	800737e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800736a:	4a27      	ldr	r2, [pc, #156]	@ (8007408 <prvAddNewTaskToReadyList+0xbc>)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007370:	4b24      	ldr	r3, [pc, #144]	@ (8007404 <prvAddNewTaskToReadyList+0xb8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d110      	bne.n	800739a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007378:	f000 fad2 	bl	8007920 <prvInitialiseTaskLists>
 800737c:	e00d      	b.n	800739a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800737e:	4b23      	ldr	r3, [pc, #140]	@ (800740c <prvAddNewTaskToReadyList+0xc0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d109      	bne.n	800739a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007386:	4b20      	ldr	r3, [pc, #128]	@ (8007408 <prvAddNewTaskToReadyList+0xbc>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007390:	429a      	cmp	r2, r3
 8007392:	d802      	bhi.n	800739a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007394:	4a1c      	ldr	r2, [pc, #112]	@ (8007408 <prvAddNewTaskToReadyList+0xbc>)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800739a:	4b1d      	ldr	r3, [pc, #116]	@ (8007410 <prvAddNewTaskToReadyList+0xc4>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3301      	adds	r3, #1
 80073a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007410 <prvAddNewTaskToReadyList+0xc4>)
 80073a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a8:	2201      	movs	r2, #1
 80073aa:	409a      	lsls	r2, r3
 80073ac:	4b19      	ldr	r3, [pc, #100]	@ (8007414 <prvAddNewTaskToReadyList+0xc8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	4a18      	ldr	r2, [pc, #96]	@ (8007414 <prvAddNewTaskToReadyList+0xc8>)
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4a15      	ldr	r2, [pc, #84]	@ (8007418 <prvAddNewTaskToReadyList+0xcc>)
 80073c4:	441a      	add	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3304      	adds	r3, #4
 80073ca:	4619      	mov	r1, r3
 80073cc:	4610      	mov	r0, r2
 80073ce:	f7ff fdf4 	bl	8006fba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073d2:	f000 fcf3 	bl	8007dbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073d6:	4b0d      	ldr	r3, [pc, #52]	@ (800740c <prvAddNewTaskToReadyList+0xc0>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00e      	beq.n	80073fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073de:	4b0a      	ldr	r3, [pc, #40]	@ (8007408 <prvAddNewTaskToReadyList+0xbc>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d207      	bcs.n	80073fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073ec:	4b0b      	ldr	r3, [pc, #44]	@ (800741c <prvAddNewTaskToReadyList+0xd0>)
 80073ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073fc:	bf00      	nop
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	20000de0 	.word	0x20000de0
 8007408:	20000ce0 	.word	0x20000ce0
 800740c:	20000dec 	.word	0x20000dec
 8007410:	20000dfc 	.word	0x20000dfc
 8007414:	20000de8 	.word	0x20000de8
 8007418:	20000ce4 	.word	0x20000ce4
 800741c:	e000ed04 	.word	0xe000ed04

08007420 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d018      	beq.n	8007464 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007432:	4b14      	ldr	r3, [pc, #80]	@ (8007484 <vTaskDelay+0x64>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00b      	beq.n	8007452 <vTaskDelay+0x32>
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	60bb      	str	r3, [r7, #8]
}
 800744c:	bf00      	nop
 800744e:	bf00      	nop
 8007450:	e7fd      	b.n	800744e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007452:	f000 f885 	bl	8007560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007456:	2100      	movs	r1, #0
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fb25 	bl	8007aa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800745e:	f000 f88d 	bl	800757c <xTaskResumeAll>
 8007462:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d107      	bne.n	800747a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800746a:	4b07      	ldr	r3, [pc, #28]	@ (8007488 <vTaskDelay+0x68>)
 800746c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20000e08 	.word	0x20000e08
 8007488:	e000ed04 	.word	0xe000ed04

0800748c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08a      	sub	sp, #40	@ 0x28
 8007490:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800749a:	463a      	mov	r2, r7
 800749c:	1d39      	adds	r1, r7, #4
 800749e:	f107 0308 	add.w	r3, r7, #8
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7f9 fbfc 	bl	8000ca0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	9202      	str	r2, [sp, #8]
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	2300      	movs	r3, #0
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	2300      	movs	r3, #0
 80074b8:	460a      	mov	r2, r1
 80074ba:	4921      	ldr	r1, [pc, #132]	@ (8007540 <vTaskStartScheduler+0xb4>)
 80074bc:	4821      	ldr	r0, [pc, #132]	@ (8007544 <vTaskStartScheduler+0xb8>)
 80074be:	f7ff fe00 	bl	80070c2 <xTaskCreateStatic>
 80074c2:	4603      	mov	r3, r0
 80074c4:	4a20      	ldr	r2, [pc, #128]	@ (8007548 <vTaskStartScheduler+0xbc>)
 80074c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074c8:	4b1f      	ldr	r3, [pc, #124]	@ (8007548 <vTaskStartScheduler+0xbc>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074d0:	2301      	movs	r3, #1
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	e001      	b.n	80074da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d11b      	bne.n	8007518 <vTaskStartScheduler+0x8c>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	613b      	str	r3, [r7, #16]
}
 80074f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074f4:	4b15      	ldr	r3, [pc, #84]	@ (800754c <vTaskStartScheduler+0xc0>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	334c      	adds	r3, #76	@ 0x4c
 80074fa:	4a15      	ldr	r2, [pc, #84]	@ (8007550 <vTaskStartScheduler+0xc4>)
 80074fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074fe:	4b15      	ldr	r3, [pc, #84]	@ (8007554 <vTaskStartScheduler+0xc8>)
 8007500:	f04f 32ff 	mov.w	r2, #4294967295
 8007504:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007506:	4b14      	ldr	r3, [pc, #80]	@ (8007558 <vTaskStartScheduler+0xcc>)
 8007508:	2201      	movs	r2, #1
 800750a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800750c:	4b13      	ldr	r3, [pc, #76]	@ (800755c <vTaskStartScheduler+0xd0>)
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007512:	f000 fbb1 	bl	8007c78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007516:	e00f      	b.n	8007538 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751e:	d10b      	bne.n	8007538 <vTaskStartScheduler+0xac>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	60fb      	str	r3, [r7, #12]
}
 8007532:	bf00      	nop
 8007534:	bf00      	nop
 8007536:	e7fd      	b.n	8007534 <vTaskStartScheduler+0xa8>
}
 8007538:	bf00      	nop
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	080089dc 	.word	0x080089dc
 8007544:	080078f1 	.word	0x080078f1
 8007548:	20000e04 	.word	0x20000e04
 800754c:	20000ce0 	.word	0x20000ce0
 8007550:	20000014 	.word	0x20000014
 8007554:	20000e00 	.word	0x20000e00
 8007558:	20000dec 	.word	0x20000dec
 800755c:	20000de4 	.word	0x20000de4

08007560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007564:	4b04      	ldr	r3, [pc, #16]	@ (8007578 <vTaskSuspendAll+0x18>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3301      	adds	r3, #1
 800756a:	4a03      	ldr	r2, [pc, #12]	@ (8007578 <vTaskSuspendAll+0x18>)
 800756c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800756e:	bf00      	nop
 8007570:	46bd      	mov	sp, r7
 8007572:	bc80      	pop	{r7}
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	20000e08 	.word	0x20000e08

0800757c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007586:	2300      	movs	r3, #0
 8007588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800758a:	4b42      	ldr	r3, [pc, #264]	@ (8007694 <xTaskResumeAll+0x118>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10b      	bne.n	80075aa <xTaskResumeAll+0x2e>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	603b      	str	r3, [r7, #0]
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	e7fd      	b.n	80075a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075aa:	f000 fbd7 	bl	8007d5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075ae:	4b39      	ldr	r3, [pc, #228]	@ (8007694 <xTaskResumeAll+0x118>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	4a37      	ldr	r2, [pc, #220]	@ (8007694 <xTaskResumeAll+0x118>)
 80075b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075b8:	4b36      	ldr	r3, [pc, #216]	@ (8007694 <xTaskResumeAll+0x118>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d161      	bne.n	8007684 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075c0:	4b35      	ldr	r3, [pc, #212]	@ (8007698 <xTaskResumeAll+0x11c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d05d      	beq.n	8007684 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075c8:	e02e      	b.n	8007628 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ca:	4b34      	ldr	r3, [pc, #208]	@ (800769c <xTaskResumeAll+0x120>)
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3318      	adds	r3, #24
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff fd4a 	bl	8007070 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3304      	adds	r3, #4
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff fd45 	bl	8007070 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ea:	2201      	movs	r2, #1
 80075ec:	409a      	lsls	r2, r3
 80075ee:	4b2c      	ldr	r3, [pc, #176]	@ (80076a0 <xTaskResumeAll+0x124>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	4a2a      	ldr	r2, [pc, #168]	@ (80076a0 <xTaskResumeAll+0x124>)
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4a27      	ldr	r2, [pc, #156]	@ (80076a4 <xTaskResumeAll+0x128>)
 8007606:	441a      	add	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	3304      	adds	r3, #4
 800760c:	4619      	mov	r1, r3
 800760e:	4610      	mov	r0, r2
 8007610:	f7ff fcd3 	bl	8006fba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007618:	4b23      	ldr	r3, [pc, #140]	@ (80076a8 <xTaskResumeAll+0x12c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761e:	429a      	cmp	r2, r3
 8007620:	d302      	bcc.n	8007628 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007622:	4b22      	ldr	r3, [pc, #136]	@ (80076ac <xTaskResumeAll+0x130>)
 8007624:	2201      	movs	r2, #1
 8007626:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007628:	4b1c      	ldr	r3, [pc, #112]	@ (800769c <xTaskResumeAll+0x120>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1cc      	bne.n	80075ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007636:	f000 fa17 	bl	8007a68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800763a:	4b1d      	ldr	r3, [pc, #116]	@ (80076b0 <xTaskResumeAll+0x134>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d010      	beq.n	8007668 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007646:	f000 f837 	bl	80076b8 <xTaskIncrementTick>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007650:	4b16      	ldr	r3, [pc, #88]	@ (80076ac <xTaskResumeAll+0x130>)
 8007652:	2201      	movs	r2, #1
 8007654:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3b01      	subs	r3, #1
 800765a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1f1      	bne.n	8007646 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007662:	4b13      	ldr	r3, [pc, #76]	@ (80076b0 <xTaskResumeAll+0x134>)
 8007664:	2200      	movs	r2, #0
 8007666:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007668:	4b10      	ldr	r3, [pc, #64]	@ (80076ac <xTaskResumeAll+0x130>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d009      	beq.n	8007684 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007670:	2301      	movs	r3, #1
 8007672:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007674:	4b0f      	ldr	r3, [pc, #60]	@ (80076b4 <xTaskResumeAll+0x138>)
 8007676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007684:	f000 fb9a 	bl	8007dbc <vPortExitCritical>

	return xAlreadyYielded;
 8007688:	68bb      	ldr	r3, [r7, #8]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	20000e08 	.word	0x20000e08
 8007698:	20000de0 	.word	0x20000de0
 800769c:	20000da0 	.word	0x20000da0
 80076a0:	20000de8 	.word	0x20000de8
 80076a4:	20000ce4 	.word	0x20000ce4
 80076a8:	20000ce0 	.word	0x20000ce0
 80076ac:	20000df4 	.word	0x20000df4
 80076b0:	20000df0 	.word	0x20000df0
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076be:	2300      	movs	r3, #0
 80076c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007800 <xTaskIncrementTick+0x148>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f040 808f 	bne.w	80077ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076cc:	4b4d      	ldr	r3, [pc, #308]	@ (8007804 <xTaskIncrementTick+0x14c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3301      	adds	r3, #1
 80076d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076d4:	4a4b      	ldr	r2, [pc, #300]	@ (8007804 <xTaskIncrementTick+0x14c>)
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d121      	bne.n	8007724 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80076e0:	4b49      	ldr	r3, [pc, #292]	@ (8007808 <xTaskIncrementTick+0x150>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00b      	beq.n	8007702 <xTaskIncrementTick+0x4a>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	603b      	str	r3, [r7, #0]
}
 80076fc:	bf00      	nop
 80076fe:	bf00      	nop
 8007700:	e7fd      	b.n	80076fe <xTaskIncrementTick+0x46>
 8007702:	4b41      	ldr	r3, [pc, #260]	@ (8007808 <xTaskIncrementTick+0x150>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	4b40      	ldr	r3, [pc, #256]	@ (800780c <xTaskIncrementTick+0x154>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a3e      	ldr	r2, [pc, #248]	@ (8007808 <xTaskIncrementTick+0x150>)
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	4a3e      	ldr	r2, [pc, #248]	@ (800780c <xTaskIncrementTick+0x154>)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	4b3e      	ldr	r3, [pc, #248]	@ (8007810 <xTaskIncrementTick+0x158>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	3301      	adds	r3, #1
 800771c:	4a3c      	ldr	r2, [pc, #240]	@ (8007810 <xTaskIncrementTick+0x158>)
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	f000 f9a2 	bl	8007a68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007724:	4b3b      	ldr	r3, [pc, #236]	@ (8007814 <xTaskIncrementTick+0x15c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	429a      	cmp	r2, r3
 800772c:	d348      	bcc.n	80077c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800772e:	4b36      	ldr	r3, [pc, #216]	@ (8007808 <xTaskIncrementTick+0x150>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d104      	bne.n	8007742 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007738:	4b36      	ldr	r3, [pc, #216]	@ (8007814 <xTaskIncrementTick+0x15c>)
 800773a:	f04f 32ff 	mov.w	r2, #4294967295
 800773e:	601a      	str	r2, [r3, #0]
					break;
 8007740:	e03e      	b.n	80077c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007742:	4b31      	ldr	r3, [pc, #196]	@ (8007808 <xTaskIncrementTick+0x150>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	429a      	cmp	r2, r3
 8007758:	d203      	bcs.n	8007762 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800775a:	4a2e      	ldr	r2, [pc, #184]	@ (8007814 <xTaskIncrementTick+0x15c>)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007760:	e02e      	b.n	80077c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	3304      	adds	r3, #4
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff fc82 	bl	8007070 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007770:	2b00      	cmp	r3, #0
 8007772:	d004      	beq.n	800777e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	3318      	adds	r3, #24
 8007778:	4618      	mov	r0, r3
 800777a:	f7ff fc79 	bl	8007070 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007782:	2201      	movs	r2, #1
 8007784:	409a      	lsls	r2, r3
 8007786:	4b24      	ldr	r3, [pc, #144]	@ (8007818 <xTaskIncrementTick+0x160>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4313      	orrs	r3, r2
 800778c:	4a22      	ldr	r2, [pc, #136]	@ (8007818 <xTaskIncrementTick+0x160>)
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4a1f      	ldr	r2, [pc, #124]	@ (800781c <xTaskIncrementTick+0x164>)
 800779e:	441a      	add	r2, r3
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	3304      	adds	r3, #4
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f7ff fc07 	bl	8006fba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007820 <xTaskIncrementTick+0x168>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d3b9      	bcc.n	800772e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80077ba:	2301      	movs	r3, #1
 80077bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077be:	e7b6      	b.n	800772e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077c0:	4b17      	ldr	r3, [pc, #92]	@ (8007820 <xTaskIncrementTick+0x168>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c6:	4915      	ldr	r1, [pc, #84]	@ (800781c <xTaskIncrementTick+0x164>)
 80077c8:	4613      	mov	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	440b      	add	r3, r1
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d901      	bls.n	80077dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80077d8:	2301      	movs	r3, #1
 80077da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077dc:	4b11      	ldr	r3, [pc, #68]	@ (8007824 <xTaskIncrementTick+0x16c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d007      	beq.n	80077f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	e004      	b.n	80077f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80077ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007828 <xTaskIncrementTick+0x170>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3301      	adds	r3, #1
 80077f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007828 <xTaskIncrementTick+0x170>)
 80077f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80077f4:	697b      	ldr	r3, [r7, #20]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000e08 	.word	0x20000e08
 8007804:	20000de4 	.word	0x20000de4
 8007808:	20000d98 	.word	0x20000d98
 800780c:	20000d9c 	.word	0x20000d9c
 8007810:	20000df8 	.word	0x20000df8
 8007814:	20000e00 	.word	0x20000e00
 8007818:	20000de8 	.word	0x20000de8
 800781c:	20000ce4 	.word	0x20000ce4
 8007820:	20000ce0 	.word	0x20000ce0
 8007824:	20000df4 	.word	0x20000df4
 8007828:	20000df0 	.word	0x20000df0

0800782c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007832:	4b29      	ldr	r3, [pc, #164]	@ (80078d8 <vTaskSwitchContext+0xac>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800783a:	4b28      	ldr	r3, [pc, #160]	@ (80078dc <vTaskSwitchContext+0xb0>)
 800783c:	2201      	movs	r2, #1
 800783e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007840:	e045      	b.n	80078ce <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007842:	4b26      	ldr	r3, [pc, #152]	@ (80078dc <vTaskSwitchContext+0xb0>)
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007848:	4b25      	ldr	r3, [pc, #148]	@ (80078e0 <vTaskSwitchContext+0xb4>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	fab3 f383 	clz	r3, r3
 8007854:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007856:	7afb      	ldrb	r3, [r7, #11]
 8007858:	f1c3 031f 	rsb	r3, r3, #31
 800785c:	617b      	str	r3, [r7, #20]
 800785e:	4921      	ldr	r1, [pc, #132]	@ (80078e4 <vTaskSwitchContext+0xb8>)
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	440b      	add	r3, r1
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10b      	bne.n	800788a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	607b      	str	r3, [r7, #4]
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop
 8007888:	e7fd      	b.n	8007886 <vTaskSwitchContext+0x5a>
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	4613      	mov	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4a13      	ldr	r2, [pc, #76]	@ (80078e4 <vTaskSwitchContext+0xb8>)
 8007896:	4413      	add	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	605a      	str	r2, [r3, #4]
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	3308      	adds	r3, #8
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d104      	bne.n	80078ba <vTaskSwitchContext+0x8e>
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	605a      	str	r2, [r3, #4]
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	4a09      	ldr	r2, [pc, #36]	@ (80078e8 <vTaskSwitchContext+0xbc>)
 80078c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078c4:	4b08      	ldr	r3, [pc, #32]	@ (80078e8 <vTaskSwitchContext+0xbc>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	334c      	adds	r3, #76	@ 0x4c
 80078ca:	4a08      	ldr	r2, [pc, #32]	@ (80078ec <vTaskSwitchContext+0xc0>)
 80078cc:	6013      	str	r3, [r2, #0]
}
 80078ce:	bf00      	nop
 80078d0:	371c      	adds	r7, #28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bc80      	pop	{r7}
 80078d6:	4770      	bx	lr
 80078d8:	20000e08 	.word	0x20000e08
 80078dc:	20000df4 	.word	0x20000df4
 80078e0:	20000de8 	.word	0x20000de8
 80078e4:	20000ce4 	.word	0x20000ce4
 80078e8:	20000ce0 	.word	0x20000ce0
 80078ec:	20000014 	.word	0x20000014

080078f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80078f8:	f000 f852 	bl	80079a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80078fc:	4b06      	ldr	r3, [pc, #24]	@ (8007918 <prvIdleTask+0x28>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d9f9      	bls.n	80078f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007904:	4b05      	ldr	r3, [pc, #20]	@ (800791c <prvIdleTask+0x2c>)
 8007906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007914:	e7f0      	b.n	80078f8 <prvIdleTask+0x8>
 8007916:	bf00      	nop
 8007918:	20000ce4 	.word	0x20000ce4
 800791c:	e000ed04 	.word	0xe000ed04

08007920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007926:	2300      	movs	r3, #0
 8007928:	607b      	str	r3, [r7, #4]
 800792a:	e00c      	b.n	8007946 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4a12      	ldr	r2, [pc, #72]	@ (8007980 <prvInitialiseTaskLists+0x60>)
 8007938:	4413      	add	r3, r2
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff fb12 	bl	8006f64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3301      	adds	r3, #1
 8007944:	607b      	str	r3, [r7, #4]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b06      	cmp	r3, #6
 800794a:	d9ef      	bls.n	800792c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800794c:	480d      	ldr	r0, [pc, #52]	@ (8007984 <prvInitialiseTaskLists+0x64>)
 800794e:	f7ff fb09 	bl	8006f64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007952:	480d      	ldr	r0, [pc, #52]	@ (8007988 <prvInitialiseTaskLists+0x68>)
 8007954:	f7ff fb06 	bl	8006f64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007958:	480c      	ldr	r0, [pc, #48]	@ (800798c <prvInitialiseTaskLists+0x6c>)
 800795a:	f7ff fb03 	bl	8006f64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800795e:	480c      	ldr	r0, [pc, #48]	@ (8007990 <prvInitialiseTaskLists+0x70>)
 8007960:	f7ff fb00 	bl	8006f64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007964:	480b      	ldr	r0, [pc, #44]	@ (8007994 <prvInitialiseTaskLists+0x74>)
 8007966:	f7ff fafd 	bl	8006f64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800796a:	4b0b      	ldr	r3, [pc, #44]	@ (8007998 <prvInitialiseTaskLists+0x78>)
 800796c:	4a05      	ldr	r2, [pc, #20]	@ (8007984 <prvInitialiseTaskLists+0x64>)
 800796e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007970:	4b0a      	ldr	r3, [pc, #40]	@ (800799c <prvInitialiseTaskLists+0x7c>)
 8007972:	4a05      	ldr	r2, [pc, #20]	@ (8007988 <prvInitialiseTaskLists+0x68>)
 8007974:	601a      	str	r2, [r3, #0]
}
 8007976:	bf00      	nop
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000ce4 	.word	0x20000ce4
 8007984:	20000d70 	.word	0x20000d70
 8007988:	20000d84 	.word	0x20000d84
 800798c:	20000da0 	.word	0x20000da0
 8007990:	20000db4 	.word	0x20000db4
 8007994:	20000dcc 	.word	0x20000dcc
 8007998:	20000d98 	.word	0x20000d98
 800799c:	20000d9c 	.word	0x20000d9c

080079a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079a6:	e019      	b.n	80079dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079a8:	f000 f9d8 	bl	8007d5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ac:	4b10      	ldr	r3, [pc, #64]	@ (80079f0 <prvCheckTasksWaitingTermination+0x50>)
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff fb59 	bl	8007070 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079be:	4b0d      	ldr	r3, [pc, #52]	@ (80079f4 <prvCheckTasksWaitingTermination+0x54>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	4a0b      	ldr	r2, [pc, #44]	@ (80079f4 <prvCheckTasksWaitingTermination+0x54>)
 80079c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079c8:	4b0b      	ldr	r3, [pc, #44]	@ (80079f8 <prvCheckTasksWaitingTermination+0x58>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	4a0a      	ldr	r2, [pc, #40]	@ (80079f8 <prvCheckTasksWaitingTermination+0x58>)
 80079d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80079d2:	f000 f9f3 	bl	8007dbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f810 	bl	80079fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079dc:	4b06      	ldr	r3, [pc, #24]	@ (80079f8 <prvCheckTasksWaitingTermination+0x58>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e1      	bne.n	80079a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	20000db4 	.word	0x20000db4
 80079f4:	20000de0 	.word	0x20000de0
 80079f8:	20000dc8 	.word	0x20000dc8

080079fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	334c      	adds	r3, #76	@ 0x4c
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 fe95 	bl	8008738 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d108      	bne.n	8007a2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 fb2d 	bl	800807c <vPortFree>
				vPortFree( pxTCB );
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fb2a 	bl	800807c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a28:	e019      	b.n	8007a5e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d103      	bne.n	8007a3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fb21 	bl	800807c <vPortFree>
	}
 8007a3a:	e010      	b.n	8007a5e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d00b      	beq.n	8007a5e <prvDeleteTCB+0x62>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	60fb      	str	r3, [r7, #12]
}
 8007a58:	bf00      	nop
 8007a5a:	bf00      	nop
 8007a5c:	e7fd      	b.n	8007a5a <prvDeleteTCB+0x5e>
	}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007aa0 <prvResetNextTaskUnblockTime+0x38>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d104      	bne.n	8007a82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a78:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa4 <prvResetNextTaskUnblockTime+0x3c>)
 8007a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a80:	e008      	b.n	8007a94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a82:	4b07      	ldr	r3, [pc, #28]	@ (8007aa0 <prvResetNextTaskUnblockTime+0x38>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	4a04      	ldr	r2, [pc, #16]	@ (8007aa4 <prvResetNextTaskUnblockTime+0x3c>)
 8007a92:	6013      	str	r3, [r2, #0]
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bc80      	pop	{r7}
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	20000d98 	.word	0x20000d98
 8007aa4:	20000e00 	.word	0x20000e00

08007aa8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ab2:	4b29      	ldr	r3, [pc, #164]	@ (8007b58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ab8:	4b28      	ldr	r3, [pc, #160]	@ (8007b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff fad6 	bl	8007070 <uxListRemove>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10b      	bne.n	8007ae2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007aca:	4b24      	ldr	r3, [pc, #144]	@ (8007b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad6:	43da      	mvns	r2, r3
 8007ad8:	4b21      	ldr	r3, [pc, #132]	@ (8007b60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4013      	ands	r3, r2
 8007ade:	4a20      	ldr	r2, [pc, #128]	@ (8007b60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ae0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae8:	d10a      	bne.n	8007b00 <prvAddCurrentTaskToDelayedList+0x58>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d007      	beq.n	8007b00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007af0:	4b1a      	ldr	r3, [pc, #104]	@ (8007b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3304      	adds	r3, #4
 8007af6:	4619      	mov	r1, r3
 8007af8:	481a      	ldr	r0, [pc, #104]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007afa:	f7ff fa5e 	bl	8006fba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007afe:	e026      	b.n	8007b4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4413      	add	r3, r2
 8007b06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b08:	4b14      	ldr	r3, [pc, #80]	@ (8007b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d209      	bcs.n	8007b2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b18:	4b13      	ldr	r3, [pc, #76]	@ (8007b68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3304      	adds	r3, #4
 8007b22:	4619      	mov	r1, r3
 8007b24:	4610      	mov	r0, r2
 8007b26:	f7ff fa6b 	bl	8007000 <vListInsert>
}
 8007b2a:	e010      	b.n	8007b4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	4b0a      	ldr	r3, [pc, #40]	@ (8007b5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3304      	adds	r3, #4
 8007b36:	4619      	mov	r1, r3
 8007b38:	4610      	mov	r0, r2
 8007b3a:	f7ff fa61 	bl	8007000 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007b70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d202      	bcs.n	8007b4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007b48:	4a09      	ldr	r2, [pc, #36]	@ (8007b70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	6013      	str	r3, [r2, #0]
}
 8007b4e:	bf00      	nop
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20000de4 	.word	0x20000de4
 8007b5c:	20000ce0 	.word	0x20000ce0
 8007b60:	20000de8 	.word	0x20000de8
 8007b64:	20000dcc 	.word	0x20000dcc
 8007b68:	20000d9c 	.word	0x20000d9c
 8007b6c:	20000d98 	.word	0x20000d98
 8007b70:	20000e00 	.word	0x20000e00

08007b74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3b04      	subs	r3, #4
 8007b84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3b04      	subs	r3, #4
 8007b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f023 0201 	bic.w	r2, r3, #1
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3b04      	subs	r3, #4
 8007ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ba4:	4a08      	ldr	r2, [pc, #32]	@ (8007bc8 <pxPortInitialiseStack+0x54>)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3b14      	subs	r3, #20
 8007bae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3b20      	subs	r3, #32
 8007bba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr
 8007bc8:	08007bcd 	.word	0x08007bcd

08007bcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bd6:	4b12      	ldr	r3, [pc, #72]	@ (8007c20 <prvTaskExitError+0x54>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d00b      	beq.n	8007bf8 <prvTaskExitError+0x2c>
	__asm volatile
 8007be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	60fb      	str	r3, [r7, #12]
}
 8007bf2:	bf00      	nop
 8007bf4:	bf00      	nop
 8007bf6:	e7fd      	b.n	8007bf4 <prvTaskExitError+0x28>
	__asm volatile
 8007bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	60bb      	str	r3, [r7, #8]
}
 8007c0a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c0c:	bf00      	nop
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0fc      	beq.n	8007c0e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc80      	pop	{r7}
 8007c1e:	4770      	bx	lr
 8007c20:	2000000c 	.word	0x2000000c
	...

08007c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c30:	4b07      	ldr	r3, [pc, #28]	@ (8007c50 <pxCurrentTCBConst2>)
 8007c32:	6819      	ldr	r1, [r3, #0]
 8007c34:	6808      	ldr	r0, [r1, #0]
 8007c36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c3a:	f380 8809 	msr	PSP, r0
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	f380 8811 	msr	BASEPRI, r0
 8007c4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007c4e:	4770      	bx	lr

08007c50 <pxCurrentTCBConst2>:
 8007c50:	20000ce0 	.word	0x20000ce0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop

08007c58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007c58:	4806      	ldr	r0, [pc, #24]	@ (8007c74 <prvPortStartFirstTask+0x1c>)
 8007c5a:	6800      	ldr	r0, [r0, #0]
 8007c5c:	6800      	ldr	r0, [r0, #0]
 8007c5e:	f380 8808 	msr	MSP, r0
 8007c62:	b662      	cpsie	i
 8007c64:	b661      	cpsie	f
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	df00      	svc	0
 8007c70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c72:	bf00      	nop
 8007c74:	e000ed08 	.word	0xe000ed08

08007c78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c7e:	4b32      	ldr	r3, [pc, #200]	@ (8007d48 <xPortStartScheduler+0xd0>)
 8007c80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	22ff      	movs	r2, #255	@ 0xff
 8007c8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8007d4c <xPortStartScheduler+0xd4>)
 8007ca4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8007d50 <xPortStartScheduler+0xd8>)
 8007ca8:	2207      	movs	r2, #7
 8007caa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cac:	e009      	b.n	8007cc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007cae:	4b28      	ldr	r3, [pc, #160]	@ (8007d50 <xPortStartScheduler+0xd8>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	4a26      	ldr	r2, [pc, #152]	@ (8007d50 <xPortStartScheduler+0xd8>)
 8007cb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cb8:	78fb      	ldrb	r3, [r7, #3]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cca:	2b80      	cmp	r3, #128	@ 0x80
 8007ccc:	d0ef      	beq.n	8007cae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cce:	4b20      	ldr	r3, [pc, #128]	@ (8007d50 <xPortStartScheduler+0xd8>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f1c3 0307 	rsb	r3, r3, #7
 8007cd6:	2b04      	cmp	r3, #4
 8007cd8:	d00b      	beq.n	8007cf2 <xPortStartScheduler+0x7a>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	60bb      	str	r3, [r7, #8]
}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	e7fd      	b.n	8007cee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cf2:	4b17      	ldr	r3, [pc, #92]	@ (8007d50 <xPortStartScheduler+0xd8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	021b      	lsls	r3, r3, #8
 8007cf8:	4a15      	ldr	r2, [pc, #84]	@ (8007d50 <xPortStartScheduler+0xd8>)
 8007cfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cfc:	4b14      	ldr	r3, [pc, #80]	@ (8007d50 <xPortStartScheduler+0xd8>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d04:	4a12      	ldr	r2, [pc, #72]	@ (8007d50 <xPortStartScheduler+0xd8>)
 8007d06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d10:	4b10      	ldr	r3, [pc, #64]	@ (8007d54 <xPortStartScheduler+0xdc>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a0f      	ldr	r2, [pc, #60]	@ (8007d54 <xPortStartScheduler+0xdc>)
 8007d16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d54 <xPortStartScheduler+0xdc>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a0c      	ldr	r2, [pc, #48]	@ (8007d54 <xPortStartScheduler+0xdc>)
 8007d22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d28:	f000 f8b8 	bl	8007e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d58 <xPortStartScheduler+0xe0>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d32:	f7ff ff91 	bl	8007c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d36:	f7ff fd79 	bl	800782c <vTaskSwitchContext>
	prvTaskExitError();
 8007d3a:	f7ff ff47 	bl	8007bcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	e000e400 	.word	0xe000e400
 8007d4c:	20000e0c 	.word	0x20000e0c
 8007d50:	20000e10 	.word	0x20000e10
 8007d54:	e000ed20 	.word	0xe000ed20
 8007d58:	2000000c 	.word	0x2000000c

08007d5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
	__asm volatile
 8007d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d66:	f383 8811 	msr	BASEPRI, r3
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	607b      	str	r3, [r7, #4]
}
 8007d74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d76:	4b0f      	ldr	r3, [pc, #60]	@ (8007db4 <vPortEnterCritical+0x58>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8007db4 <vPortEnterCritical+0x58>)
 8007d7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d80:	4b0c      	ldr	r3, [pc, #48]	@ (8007db4 <vPortEnterCritical+0x58>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d110      	bne.n	8007daa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d88:	4b0b      	ldr	r3, [pc, #44]	@ (8007db8 <vPortEnterCritical+0x5c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00b      	beq.n	8007daa <vPortEnterCritical+0x4e>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	603b      	str	r3, [r7, #0]
}
 8007da4:	bf00      	nop
 8007da6:	bf00      	nop
 8007da8:	e7fd      	b.n	8007da6 <vPortEnterCritical+0x4a>
	}
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr
 8007db4:	2000000c 	.word	0x2000000c
 8007db8:	e000ed04 	.word	0xe000ed04

08007dbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dc2:	4b12      	ldr	r3, [pc, #72]	@ (8007e0c <vPortExitCritical+0x50>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10b      	bne.n	8007de2 <vPortExitCritical+0x26>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	607b      	str	r3, [r7, #4]
}
 8007ddc:	bf00      	nop
 8007dde:	bf00      	nop
 8007de0:	e7fd      	b.n	8007dde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007de2:	4b0a      	ldr	r3, [pc, #40]	@ (8007e0c <vPortExitCritical+0x50>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	4a08      	ldr	r2, [pc, #32]	@ (8007e0c <vPortExitCritical+0x50>)
 8007dea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dec:	4b07      	ldr	r3, [pc, #28]	@ (8007e0c <vPortExitCritical+0x50>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d105      	bne.n	8007e00 <vPortExitCritical+0x44>
 8007df4:	2300      	movs	r3, #0
 8007df6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007dfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bc80      	pop	{r7}
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	2000000c 	.word	0x2000000c

08007e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e10:	f3ef 8009 	mrs	r0, PSP
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	4b0d      	ldr	r3, [pc, #52]	@ (8007e50 <pxCurrentTCBConst>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e20:	6010      	str	r0, [r2, #0]
 8007e22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007e26:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e2a:	f380 8811 	msr	BASEPRI, r0
 8007e2e:	f7ff fcfd 	bl	800782c <vTaskSwitchContext>
 8007e32:	f04f 0000 	mov.w	r0, #0
 8007e36:	f380 8811 	msr	BASEPRI, r0
 8007e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e3e:	6819      	ldr	r1, [r3, #0]
 8007e40:	6808      	ldr	r0, [r1, #0]
 8007e42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e46:	f380 8809 	msr	PSP, r0
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	4770      	bx	lr

08007e50 <pxCurrentTCBConst>:
 8007e50:	20000ce0 	.word	0x20000ce0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	607b      	str	r3, [r7, #4]
}
 8007e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e72:	f7ff fc21 	bl	80076b8 <xTaskIncrementTick>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e7c:	4b06      	ldr	r3, [pc, #24]	@ (8007e98 <SysTick_Handler+0x40>)
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	2300      	movs	r3, #0
 8007e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f383 8811 	msr	BASEPRI, r3
}
 8007e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ecc <vPortSetupTimerInterrupt+0x30>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed0 <vPortSetupTimerInterrupt+0x34>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007eac:	4b09      	ldr	r3, [pc, #36]	@ (8007ed4 <vPortSetupTimerInterrupt+0x38>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a09      	ldr	r2, [pc, #36]	@ (8007ed8 <vPortSetupTimerInterrupt+0x3c>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	099b      	lsrs	r3, r3, #6
 8007eb8:	4a08      	ldr	r2, [pc, #32]	@ (8007edc <vPortSetupTimerInterrupt+0x40>)
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ebe:	4b03      	ldr	r3, [pc, #12]	@ (8007ecc <vPortSetupTimerInterrupt+0x30>)
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	601a      	str	r2, [r3, #0]
}
 8007ec4:	bf00      	nop
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr
 8007ecc:	e000e010 	.word	0xe000e010
 8007ed0:	e000e018 	.word	0xe000e018
 8007ed4:	20000000 	.word	0x20000000
 8007ed8:	10624dd3 	.word	0x10624dd3
 8007edc:	e000e014 	.word	0xe000e014

08007ee0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08a      	sub	sp, #40	@ 0x28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007eec:	f7ff fb38 	bl	8007560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ef0:	4b5c      	ldr	r3, [pc, #368]	@ (8008064 <pvPortMalloc+0x184>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ef8:	f000 f924 	bl	8008144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007efc:	4b5a      	ldr	r3, [pc, #360]	@ (8008068 <pvPortMalloc+0x188>)
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4013      	ands	r3, r2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f040 8095 	bne.w	8008034 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01e      	beq.n	8007f4e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007f10:	2208      	movs	r2, #8
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4413      	add	r3, r2
 8007f16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f003 0307 	and.w	r3, r3, #7
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d015      	beq.n	8007f4e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f023 0307 	bic.w	r3, r3, #7
 8007f28:	3308      	adds	r3, #8
 8007f2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00b      	beq.n	8007f4e <pvPortMalloc+0x6e>
	__asm volatile
 8007f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	617b      	str	r3, [r7, #20]
}
 8007f48:	bf00      	nop
 8007f4a:	bf00      	nop
 8007f4c:	e7fd      	b.n	8007f4a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d06f      	beq.n	8008034 <pvPortMalloc+0x154>
 8007f54:	4b45      	ldr	r3, [pc, #276]	@ (800806c <pvPortMalloc+0x18c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d86a      	bhi.n	8008034 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f5e:	4b44      	ldr	r3, [pc, #272]	@ (8008070 <pvPortMalloc+0x190>)
 8007f60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f62:	4b43      	ldr	r3, [pc, #268]	@ (8008070 <pvPortMalloc+0x190>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f68:	e004      	b.n	8007f74 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d903      	bls.n	8007f86 <pvPortMalloc+0xa6>
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1f1      	bne.n	8007f6a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f86:	4b37      	ldr	r3, [pc, #220]	@ (8008064 <pvPortMalloc+0x184>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d051      	beq.n	8008034 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2208      	movs	r2, #8
 8007f96:	4413      	add	r3, r2
 8007f98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	1ad2      	subs	r2, r2, r3
 8007faa:	2308      	movs	r3, #8
 8007fac:	005b      	lsls	r3, r3, #1
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d920      	bls.n	8007ff4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00b      	beq.n	8007fdc <pvPortMalloc+0xfc>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	613b      	str	r3, [r7, #16]
}
 8007fd6:	bf00      	nop
 8007fd8:	bf00      	nop
 8007fda:	e7fd      	b.n	8007fd8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	1ad2      	subs	r2, r2, r3
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fee:	69b8      	ldr	r0, [r7, #24]
 8007ff0:	f000 f90a 	bl	8008208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800806c <pvPortMalloc+0x18c>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800806c <pvPortMalloc+0x18c>)
 8008000:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008002:	4b1a      	ldr	r3, [pc, #104]	@ (800806c <pvPortMalloc+0x18c>)
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	4b1b      	ldr	r3, [pc, #108]	@ (8008074 <pvPortMalloc+0x194>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d203      	bcs.n	8008016 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800800e:	4b17      	ldr	r3, [pc, #92]	@ (800806c <pvPortMalloc+0x18c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a18      	ldr	r2, [pc, #96]	@ (8008074 <pvPortMalloc+0x194>)
 8008014:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	4b13      	ldr	r3, [pc, #76]	@ (8008068 <pvPortMalloc+0x188>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	431a      	orrs	r2, r3
 8008020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008022:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800802a:	4b13      	ldr	r3, [pc, #76]	@ (8008078 <pvPortMalloc+0x198>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3301      	adds	r3, #1
 8008030:	4a11      	ldr	r2, [pc, #68]	@ (8008078 <pvPortMalloc+0x198>)
 8008032:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008034:	f7ff faa2 	bl	800757c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	f003 0307 	and.w	r3, r3, #7
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00b      	beq.n	800805a <pvPortMalloc+0x17a>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	60fb      	str	r3, [r7, #12]
}
 8008054:	bf00      	nop
 8008056:	bf00      	nop
 8008058:	e7fd      	b.n	8008056 <pvPortMalloc+0x176>
	return pvReturn;
 800805a:	69fb      	ldr	r3, [r7, #28]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3728      	adds	r7, #40	@ 0x28
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20001a1c 	.word	0x20001a1c
 8008068:	20001a30 	.word	0x20001a30
 800806c:	20001a20 	.word	0x20001a20
 8008070:	20001a14 	.word	0x20001a14
 8008074:	20001a24 	.word	0x20001a24
 8008078:	20001a28 	.word	0x20001a28

0800807c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d04f      	beq.n	800812e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800808e:	2308      	movs	r3, #8
 8008090:	425b      	negs	r3, r3
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	4413      	add	r3, r2
 8008096:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	4b25      	ldr	r3, [pc, #148]	@ (8008138 <vPortFree+0xbc>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10b      	bne.n	80080c2 <vPortFree+0x46>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	60fb      	str	r3, [r7, #12]
}
 80080bc:	bf00      	nop
 80080be:	bf00      	nop
 80080c0:	e7fd      	b.n	80080be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00b      	beq.n	80080e2 <vPortFree+0x66>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	60bb      	str	r3, [r7, #8]
}
 80080dc:	bf00      	nop
 80080de:	bf00      	nop
 80080e0:	e7fd      	b.n	80080de <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	4b14      	ldr	r3, [pc, #80]	@ (8008138 <vPortFree+0xbc>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4013      	ands	r3, r2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01e      	beq.n	800812e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d11a      	bne.n	800812e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008138 <vPortFree+0xbc>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	43db      	mvns	r3, r3
 8008102:	401a      	ands	r2, r3
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008108:	f7ff fa2a 	bl	8007560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	4b0a      	ldr	r3, [pc, #40]	@ (800813c <vPortFree+0xc0>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4413      	add	r3, r2
 8008116:	4a09      	ldr	r2, [pc, #36]	@ (800813c <vPortFree+0xc0>)
 8008118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800811a:	6938      	ldr	r0, [r7, #16]
 800811c:	f000 f874 	bl	8008208 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008120:	4b07      	ldr	r3, [pc, #28]	@ (8008140 <vPortFree+0xc4>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3301      	adds	r3, #1
 8008126:	4a06      	ldr	r2, [pc, #24]	@ (8008140 <vPortFree+0xc4>)
 8008128:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800812a:	f7ff fa27 	bl	800757c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800812e:	bf00      	nop
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20001a30 	.word	0x20001a30
 800813c:	20001a20 	.word	0x20001a20
 8008140:	20001a2c 	.word	0x20001a2c

08008144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800814a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800814e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008150:	4b27      	ldr	r3, [pc, #156]	@ (80081f0 <prvHeapInit+0xac>)
 8008152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00c      	beq.n	8008178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3307      	adds	r3, #7
 8008162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0307 	bic.w	r3, r3, #7
 800816a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	4a1f      	ldr	r2, [pc, #124]	@ (80081f0 <prvHeapInit+0xac>)
 8008174:	4413      	add	r3, r2
 8008176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800817c:	4a1d      	ldr	r2, [pc, #116]	@ (80081f4 <prvHeapInit+0xb0>)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008182:	4b1c      	ldr	r3, [pc, #112]	@ (80081f4 <prvHeapInit+0xb0>)
 8008184:	2200      	movs	r2, #0
 8008186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	4413      	add	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008190:	2208      	movs	r2, #8
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	1a9b      	subs	r3, r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 0307 	bic.w	r3, r3, #7
 800819e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a15      	ldr	r2, [pc, #84]	@ (80081f8 <prvHeapInit+0xb4>)
 80081a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081a6:	4b14      	ldr	r3, [pc, #80]	@ (80081f8 <prvHeapInit+0xb4>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2200      	movs	r2, #0
 80081ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081ae:	4b12      	ldr	r3, [pc, #72]	@ (80081f8 <prvHeapInit+0xb4>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	1ad2      	subs	r2, r2, r3
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081c4:	4b0c      	ldr	r3, [pc, #48]	@ (80081f8 <prvHeapInit+0xb4>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4a0a      	ldr	r2, [pc, #40]	@ (80081fc <prvHeapInit+0xb8>)
 80081d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	4a09      	ldr	r2, [pc, #36]	@ (8008200 <prvHeapInit+0xbc>)
 80081da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081dc:	4b09      	ldr	r3, [pc, #36]	@ (8008204 <prvHeapInit+0xc0>)
 80081de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80081e2:	601a      	str	r2, [r3, #0]
}
 80081e4:	bf00      	nop
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bc80      	pop	{r7}
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20000e14 	.word	0x20000e14
 80081f4:	20001a14 	.word	0x20001a14
 80081f8:	20001a1c 	.word	0x20001a1c
 80081fc:	20001a24 	.word	0x20001a24
 8008200:	20001a20 	.word	0x20001a20
 8008204:	20001a30 	.word	0x20001a30

08008208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008210:	4b27      	ldr	r3, [pc, #156]	@ (80082b0 <prvInsertBlockIntoFreeList+0xa8>)
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	e002      	b.n	800821c <prvInsertBlockIntoFreeList+0x14>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	429a      	cmp	r2, r3
 8008224:	d8f7      	bhi.n	8008216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	4413      	add	r3, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	429a      	cmp	r2, r3
 8008236:	d108      	bne.n	800824a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	441a      	add	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	441a      	add	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d118      	bne.n	8008290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	4b14      	ldr	r3, [pc, #80]	@ (80082b4 <prvInsertBlockIntoFreeList+0xac>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	429a      	cmp	r2, r3
 8008268:	d00d      	beq.n	8008286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	441a      	add	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	e008      	b.n	8008298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008286:	4b0b      	ldr	r3, [pc, #44]	@ (80082b4 <prvInsertBlockIntoFreeList+0xac>)
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	e003      	b.n	8008298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	429a      	cmp	r2, r3
 800829e:	d002      	beq.n	80082a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082a6:	bf00      	nop
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bc80      	pop	{r7}
 80082ae:	4770      	bx	lr
 80082b0:	20001a14 	.word	0x20001a14
 80082b4:	20001a1c 	.word	0x20001a1c

080082b8 <TMC2209_setdefault>:
static uint8_t Driver_Enable = FALSE;
static uint8_t active_microstep;
static float vel_now = 0.0;

void TMC2209_setdefault()
{
 80082b8:	b480      	push	{r7}
 80082ba:	af00      	add	r7, sp, #0
	gconfConfig.I_scale_analog = TRUE;
 80082bc:	4a08      	ldr	r2, [pc, #32]	@ (80082e0 <TMC2209_setdefault+0x28>)
 80082be:	7813      	ldrb	r3, [r2, #0]
 80082c0:	f043 0301 	orr.w	r3, r3, #1
 80082c4:	7013      	strb	r3, [r2, #0]
	gconfConfig.multistep_filt = TRUE;
 80082c6:	4a06      	ldr	r2, [pc, #24]	@ (80082e0 <TMC2209_setdefault+0x28>)
 80082c8:	7853      	ldrb	r3, [r2, #1]
 80082ca:	f043 0301 	orr.w	r3, r3, #1
 80082ce:	7053      	strb	r3, [r2, #1]
	chopConfig.bytes = CHOPPER_CONFIG_DEFAULT;
 80082d0:	4a04      	ldr	r2, [pc, #16]	@ (80082e4 <TMC2209_setdefault+0x2c>)
 80082d2:	4b05      	ldr	r3, [pc, #20]	@ (80082e8 <TMC2209_setdefault+0x30>)
 80082d4:	601a      	str	r2, [r3, #0]
}
 80082d6:	bf00      	nop
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc80      	pop	{r7}
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	20001a38 	.word	0x20001a38
 80082e4:	10000053 	.word	0x10000053
 80082e8:	20001a34 	.word	0x20001a34

080082ec <TMC2209_setup>:

void TMC2209_setup()
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
	TMC2209_setdefault();
 80082f0:	f7ff ffe2 	bl	80082b8 <TMC2209_setdefault>
	gconfConfig.bytes = FALSE;
 80082f4:	4b17      	ldr	r3, [pc, #92]	@ (8008354 <TMC2209_setup+0x68>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	601a      	str	r2, [r3, #0]
	gconfConfig.I_scale_analog = TRUE;
 80082fa:	4a16      	ldr	r2, [pc, #88]	@ (8008354 <TMC2209_setup+0x68>)
 80082fc:	7813      	ldrb	r3, [r2, #0]
 80082fe:	f043 0301 	orr.w	r3, r3, #1
 8008302:	7013      	strb	r3, [r2, #0]
	gconfConfig.pdn_disable = TRUE;
 8008304:	4a13      	ldr	r2, [pc, #76]	@ (8008354 <TMC2209_setup+0x68>)
 8008306:	7813      	ldrb	r3, [r2, #0]
 8008308:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800830c:	7013      	strb	r3, [r2, #0]
	gconfConfig.multistep_filt = TRUE;
 800830e:	4a11      	ldr	r2, [pc, #68]	@ (8008354 <TMC2209_setup+0x68>)
 8008310:	7853      	ldrb	r3, [r2, #1]
 8008312:	f043 0301 	orr.w	r3, r3, #1
 8008316:	7053      	strb	r3, [r2, #1]
	gconfConfig.mstep_reg_select = TRUE;
 8008318:	4a0e      	ldr	r2, [pc, #56]	@ (8008354 <TMC2209_setup+0x68>)
 800831a:	7813      	ldrb	r3, [r2, #0]
 800831c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008320:	7013      	strb	r3, [r2, #0]

	slaveConfig.conf = 0x00;
 8008322:	4a0d      	ldr	r2, [pc, #52]	@ (8008358 <TMC2209_setup+0x6c>)
 8008324:	7853      	ldrb	r3, [r2, #1]
 8008326:	f36f 0303 	bfc	r3, #0, #4
 800832a:	7053      	strb	r3, [r2, #1]

	TMC2209_HAL_Write(TMC2209Reg_GCONF, gconfConfig.bytes);
 800832c:	4b09      	ldr	r3, [pc, #36]	@ (8008354 <TMC2209_setup+0x68>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4619      	mov	r1, r3
 8008332:	2000      	movs	r0, #0
 8008334:	f000 f9ae 	bl	8008694 <TMC2209_HAL_Write>
	TMC2209_HAL_Write(TMC2209Reg_SLAVECONF, slaveConfig.bytes);
 8008338:	4b07      	ldr	r3, [pc, #28]	@ (8008358 <TMC2209_setup+0x6c>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4619      	mov	r1, r3
 800833e:	2003      	movs	r0, #3
 8008340:	f000 f9a8 	bl	8008694 <TMC2209_HAL_Write>
//	TMC2209_setMicrostep(TMC2209_Microsteps_1);
	TMC2209_disable();
 8008344:	f000 f832 	bl	80083ac <TMC2209_disable>
	HAL_Delay(100);
 8008348:	2064      	movs	r0, #100	@ 0x64
 800834a:	f7f9 f9cb 	bl	80016e4 <HAL_Delay>
}
 800834e:	bf00      	nop
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	20001a38 	.word	0x20001a38
 8008358:	20001a3c 	.word	0x20001a3c

0800835c <TMC2209_enable>:

void TMC2209_enable()
{
 800835c:	b580      	push	{r7, lr}
 800835e:	af00      	add	r7, sp, #0
	if(Driver_Enable == FALSE){
 8008360:	4b0e      	ldr	r3, [pc, #56]	@ (800839c <TMC2209_enable+0x40>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d117      	bne.n	8008398 <TMC2209_enable+0x3c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8008368:	2200      	movs	r2, #0
 800836a:	2104      	movs	r1, #4
 800836c:	480c      	ldr	r0, [pc, #48]	@ (80083a0 <TMC2209_enable+0x44>)
 800836e:	f7f9 feef 	bl	8002150 <HAL_GPIO_WritePin>
		Driver_Enable = TRUE;
 8008372:	4b0a      	ldr	r3, [pc, #40]	@ (800839c <TMC2209_enable+0x40>)
 8008374:	2201      	movs	r2, #1
 8008376:	701a      	strb	r2, [r3, #0]
		chopConfig.toff = toff_;
 8008378:	4b0a      	ldr	r3, [pc, #40]	@ (80083a4 <TMC2209_enable+0x48>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	f003 030f 	and.w	r3, r3, #15
 8008380:	b2d9      	uxtb	r1, r3
 8008382:	4a09      	ldr	r2, [pc, #36]	@ (80083a8 <TMC2209_enable+0x4c>)
 8008384:	7813      	ldrb	r3, [r2, #0]
 8008386:	f361 0303 	bfi	r3, r1, #0, #4
 800838a:	7013      	strb	r3, [r2, #0]
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 800838c:	4b06      	ldr	r3, [pc, #24]	@ (80083a8 <TMC2209_enable+0x4c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4619      	mov	r1, r3
 8008392:	206c      	movs	r0, #108	@ 0x6c
 8008394:	f000 f97e 	bl	8008694 <TMC2209_HAL_Write>
	}
}
 8008398:	bf00      	nop
 800839a:	bd80      	pop	{r7, pc}
 800839c:	20001a40 	.word	0x20001a40
 80083a0:	40010800 	.word	0x40010800
 80083a4:	20000010 	.word	0x20000010
 80083a8:	20001a34 	.word	0x20001a34

080083ac <TMC2209_disable>:

void TMC2209_disable()
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
	if(Driver_Enable == TRUE){
 80083b0:	4b0c      	ldr	r3, [pc, #48]	@ (80083e4 <TMC2209_disable+0x38>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d112      	bne.n	80083de <TMC2209_disable+0x32>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80083b8:	2201      	movs	r2, #1
 80083ba:	2104      	movs	r1, #4
 80083bc:	480a      	ldr	r0, [pc, #40]	@ (80083e8 <TMC2209_disable+0x3c>)
 80083be:	f7f9 fec7 	bl	8002150 <HAL_GPIO_WritePin>
		Driver_Enable = FALSE;
 80083c2:	4b08      	ldr	r3, [pc, #32]	@ (80083e4 <TMC2209_disable+0x38>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	701a      	strb	r2, [r3, #0]
		chopConfig.toff = TOFF_DISABLE;
 80083c8:	4a08      	ldr	r2, [pc, #32]	@ (80083ec <TMC2209_disable+0x40>)
 80083ca:	7813      	ldrb	r3, [r2, #0]
 80083cc:	f36f 0303 	bfc	r3, #0, #4
 80083d0:	7013      	strb	r3, [r2, #0]
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 80083d2:	4b06      	ldr	r3, [pc, #24]	@ (80083ec <TMC2209_disable+0x40>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4619      	mov	r1, r3
 80083d8:	206c      	movs	r0, #108	@ 0x6c
 80083da:	f000 f95b 	bl	8008694 <TMC2209_HAL_Write>
	}
}
 80083de:	bf00      	nop
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20001a40 	.word	0x20001a40
 80083e8:	40010800 	.word	0x40010800
 80083ec:	20001a34 	.word	0x20001a34

080083f0 <TMC2209_setMicrostep>:

void TMC2209_setMicrostep(TMC2209_Microstep Microstep)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	71fb      	strb	r3, [r7, #7]
	chopConfig.mres = Microstep;
 80083fa:	79fb      	ldrb	r3, [r7, #7]
 80083fc:	f003 030f 	and.w	r3, r3, #15
 8008400:	b2d9      	uxtb	r1, r3
 8008402:	4a0d      	ldr	r2, [pc, #52]	@ (8008438 <TMC2209_setMicrostep+0x48>)
 8008404:	78d3      	ldrb	r3, [r2, #3]
 8008406:	f361 0303 	bfi	r3, r1, #0, #4
 800840a:	70d3      	strb	r3, [r2, #3]
	TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 800840c:	4b0a      	ldr	r3, [pc, #40]	@ (8008438 <TMC2209_setMicrostep+0x48>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4619      	mov	r1, r3
 8008412:	206c      	movs	r0, #108	@ 0x6c
 8008414:	f000 f93e 	bl	8008694 <TMC2209_HAL_Write>
	active_microstep = 2 ^ abs(Microstep - TMC2209_Microsteps_1);
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	3b08      	subs	r3, #8
 800841c:	2b00      	cmp	r3, #0
 800841e:	bfb8      	it	lt
 8008420:	425b      	neglt	r3, r3
 8008422:	b25b      	sxtb	r3, r3
 8008424:	f083 0302 	eor.w	r3, r3, #2
 8008428:	b25b      	sxtb	r3, r3
 800842a:	b2da      	uxtb	r2, r3
 800842c:	4b03      	ldr	r3, [pc, #12]	@ (800843c <TMC2209_setMicrostep+0x4c>)
 800842e:	701a      	strb	r2, [r3, #0]
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20001a34 	.word	0x20001a34
 800843c:	20001a41 	.word	0x20001a41

08008440 <TMC2209_velocity>:
	TMC2209_HAL_Read(TMC2209Reg_CHOPCONF, &buffer);
	*result = buffer;
}

void TMC2209_velocity(float velocity)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
	float frequency = 0.0f;
 8008448:	f04f 0300 	mov.w	r3, #0
 800844c:	613b      	str	r3, [r7, #16]
	uint16_t desired_period = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	81fb      	strh	r3, [r7, #14]
	uint16_t prescaller = TMC2209_DEFAULT_PRESCALLER;
 8008452:	2348      	movs	r3, #72	@ 0x48
 8008454:	82fb      	strh	r3, [r7, #22]

	if(vel_now == velocity) return;
 8008456:	4b3d      	ldr	r3, [pc, #244]	@ (800854c <TMC2209_velocity+0x10c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7f8 faf5 	bl	8000a4c <__aeabi_fcmpeq>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d16c      	bne.n	8008542 <TMC2209_velocity+0x102>
	if(velocity <= 0) {
 8008468:	f04f 0100 	mov.w	r1, #0
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7f8 fb01 	bl	8000a74 <__aeabi_fcmple>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d100      	bne.n	800847a <TMC2209_velocity+0x3a>
 8008478:	e007      	b.n	800848a <TMC2209_velocity+0x4a>
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 800847a:	2100      	movs	r1, #0
 800847c:	4834      	ldr	r0, [pc, #208]	@ (8008550 <TMC2209_velocity+0x110>)
 800847e:	f7fd f90d 	bl	800569c <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 8008482:	4b34      	ldr	r3, [pc, #208]	@ (8008554 <TMC2209_velocity+0x114>)
 8008484:	2201      	movs	r2, #1
 8008486:	701a      	strb	r2, [r3, #0]
		return;
 8008488:	e05c      	b.n	8008544 <TMC2209_velocity+0x104>
	}

	while(TRUE){
		frequency  = (velocity * (STEP_PER_REV * active_microstep)) / 60;
 800848a:	4b33      	ldr	r3, [pc, #204]	@ (8008558 <TMC2209_velocity+0x118>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	23c8      	movs	r3, #200	@ 0xc8
 8008492:	fb02 f303 	mul.w	r3, r2, r3
 8008496:	4618      	mov	r0, r3
 8008498:	f7f8 f8f0 	bl	800067c <__aeabi_i2f>
 800849c:	4603      	mov	r3, r0
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7f8 f93f 	bl	8000724 <__aeabi_fmul>
 80084a6:	4603      	mov	r3, r0
 80084a8:	492c      	ldr	r1, [pc, #176]	@ (800855c <TMC2209_velocity+0x11c>)
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7f8 f9ee 	bl	800088c <__aeabi_fdiv>
 80084b0:	4603      	mov	r3, r0
 80084b2:	613b      	str	r3, [r7, #16]
		if(((TMC2209_BASE_FREQ / prescaller) / frequency) > MAX_CNT_PERIOD){
 80084b4:	8afb      	ldrh	r3, [r7, #22]
 80084b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008560 <TMC2209_velocity+0x120>)
 80084b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80084bc:	4618      	mov	r0, r3
 80084be:	f7f8 f8dd 	bl	800067c <__aeabi_i2f>
 80084c2:	4603      	mov	r3, r0
 80084c4:	6939      	ldr	r1, [r7, #16]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7f8 f9e0 	bl	800088c <__aeabi_fdiv>
 80084cc:	4603      	mov	r3, r0
 80084ce:	4925      	ldr	r1, [pc, #148]	@ (8008564 <TMC2209_velocity+0x124>)
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7f8 fae3 	bl	8000a9c <__aeabi_fcmpgt>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <TMC2209_velocity+0xa4>
			prescaller = prescaller * 2;
 80084dc:	8afb      	ldrh	r3, [r7, #22]
 80084de:	005b      	lsls	r3, r3, #1
 80084e0:	82fb      	strh	r3, [r7, #22]
			continue;
 80084e2:	e02d      	b.n	8008540 <TMC2209_velocity+0x100>
		}
		desired_period = (uint16_t)round((TMC2209_BASE_FREQ / prescaller) / frequency);
 80084e4:	8afb      	ldrh	r3, [r7, #22]
 80084e6:	4a1e      	ldr	r2, [pc, #120]	@ (8008560 <TMC2209_velocity+0x120>)
 80084e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7f8 f8c5 	bl	800067c <__aeabi_i2f>
 80084f2:	4603      	mov	r3, r0
 80084f4:	6939      	ldr	r1, [r7, #16]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7f8 f9c8 	bl	800088c <__aeabi_fdiv>
 80084fc:	4603      	mov	r3, r0
 80084fe:	4618      	mov	r0, r3
 8008500:	f7f7 ff8a 	bl	8000418 <__aeabi_f2d>
 8008504:	4602      	mov	r2, r0
 8008506:	460b      	mov	r3, r1
 8008508:	4610      	mov	r0, r2
 800850a:	4619      	mov	r1, r3
 800850c:	f000 f9d8 	bl	80088c0 <round>
 8008510:	4602      	mov	r2, r0
 8008512:	460b      	mov	r3, r1
 8008514:	4610      	mov	r0, r2
 8008516:	4619      	mov	r1, r3
 8008518:	f7f7 ffd6 	bl	80004c8 <__aeabi_d2uiz>
 800851c:	4603      	mov	r3, r0
 800851e:	81fb      	strh	r3, [r7, #14]
		break;
 8008520:	bf00      	nop
	}

	__HAL_TIM_SET_PRESCALER(&htim2, prescaller);
 8008522:	4b0b      	ldr	r3, [pc, #44]	@ (8008550 <TMC2209_velocity+0x110>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	8afa      	ldrh	r2, [r7, #22]
 8008528:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim2, desired_period);
 800852a:	4b09      	ldr	r3, [pc, #36]	@ (8008550 <TMC2209_velocity+0x110>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	89fa      	ldrh	r2, [r7, #14]
 8008530:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008532:	89fb      	ldrh	r3, [r7, #14]
 8008534:	4a06      	ldr	r2, [pc, #24]	@ (8008550 <TMC2209_velocity+0x110>)
 8008536:	60d3      	str	r3, [r2, #12]
	vel_now = velocity;
 8008538:	4a04      	ldr	r2, [pc, #16]	@ (800854c <TMC2209_velocity+0x10c>)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	e001      	b.n	8008544 <TMC2209_velocity+0x104>
		frequency  = (velocity * (STEP_PER_REV * active_microstep)) / 60;
 8008540:	e7a3      	b.n	800848a <TMC2209_velocity+0x4a>
	if(vel_now == velocity) return;
 8008542:	bf00      	nop
}
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20001a44 	.word	0x20001a44
 8008550:	20000bcc 	.word	0x20000bcc
 8008554:	20000011 	.word	0x20000011
 8008558:	20001a41 	.word	0x20001a41
 800855c:	42700000 	.word	0x42700000
 8008560:	044aa200 	.word	0x044aa200
 8008564:	477fff00 	.word	0x477fff00

08008568 <TMC2209_move>:

void TMC2209_move(){
 8008568:	b580      	push	{r7, lr}
 800856a:	af00      	add	r7, sp, #0
	if(PWM_Pulse_Complete == TRUE){
 800856c:	4b06      	ldr	r3, [pc, #24]	@ (8008588 <TMC2209_move+0x20>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d106      	bne.n	8008582 <TMC2209_move+0x1a>
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8008574:	2100      	movs	r1, #0
 8008576:	4805      	ldr	r0, [pc, #20]	@ (800858c <TMC2209_move+0x24>)
 8008578:	f7fc ffa0 	bl	80054bc <HAL_TIM_PWM_Start_IT>
		PWM_Pulse_Complete = FALSE;
 800857c:	4b02      	ldr	r3, [pc, #8]	@ (8008588 <TMC2209_move+0x20>)
 800857e:	2200      	movs	r2, #0
 8008580:	701a      	strb	r2, [r3, #0]
	}
}
 8008582:	bf00      	nop
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20000011 	.word	0x20000011
 800858c:	20000bcc 	.word	0x20000bcc

08008590 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085a0:	d106      	bne.n	80085b0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
		HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 80085a2:	2100      	movs	r1, #0
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f7fd f879 	bl	800569c <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 80085aa:	4b03      	ldr	r3, [pc, #12]	@ (80085b8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80085ac:	2201      	movs	r2, #1
 80085ae:	701a      	strb	r2, [r3, #0]
	}
}
 80085b0:	bf00      	nop
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	20000011 	.word	0x20000011

080085bc <calculateCRC>:
#include "../Inc/TMC2209_HAL.h"

extern UART_HandleTypeDef huart1;

static void calculateCRC(uint8_t* datagram, uint8_t datagram_len)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70fb      	strb	r3, [r7, #3]
	int i,j;
	uint8_t *crc = datagram + (datagram_len - 1);
 80085c8:	78fb      	ldrb	r3, [r7, #3]
 80085ca:	3b01      	subs	r3, #1
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	4413      	add	r3, r2
 80085d0:	60bb      	str	r3, [r7, #8]
	uint8_t currentByte;
	*crc = 0;
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2200      	movs	r2, #0
 80085d6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (datagram_len - 1); i++) {
 80085d8:	2300      	movs	r3, #0
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	e02e      	b.n	800863c <calculateCRC+0x80>
		currentByte = datagram[i];
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	4413      	add	r3, r2
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < 8; j++) {
 80085e8:	2300      	movs	r3, #0
 80085ea:	613b      	str	r3, [r7, #16]
 80085ec:	e020      	b.n	8008630 <calculateCRC+0x74>
			if ((*crc >> 7) ^ (currentByte & 0x01))
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	09db      	lsrs	r3, r3, #7
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	461a      	mov	r2, r3
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	429a      	cmp	r2, r3
 8008600:	d00a      	beq.n	8008618 <calculateCRC+0x5c>
				*crc = (*crc << 1) ^ 0x07;
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	b25b      	sxtb	r3, r3
 800860a:	f083 0307 	eor.w	r3, r3, #7
 800860e:	b25b      	sxtb	r3, r3
 8008610:	b2da      	uxtb	r2, r3
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	701a      	strb	r2, [r3, #0]
 8008616:	e005      	b.n	8008624 <calculateCRC+0x68>
			else
				*crc = (*crc << 1);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	b2da      	uxtb	r2, r3
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	701a      	strb	r2, [r3, #0]
			currentByte = currentByte >> 1;
 8008624:	7bfb      	ldrb	r3, [r7, #15]
 8008626:	085b      	lsrs	r3, r3, #1
 8008628:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < 8; j++) {
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	3301      	adds	r3, #1
 800862e:	613b      	str	r3, [r7, #16]
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	2b07      	cmp	r3, #7
 8008634:	dddb      	ble.n	80085ee <calculateCRC+0x32>
	for (i = 0; i < (datagram_len - 1); i++) {
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	3301      	adds	r3, #1
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	78fb      	ldrb	r3, [r7, #3]
 800863e:	3b01      	subs	r3, #1
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	429a      	cmp	r2, r3
 8008644:	dbcb      	blt.n	80085de <calculateCRC+0x22>
		}
	}
}
 8008646:	bf00      	nop
 8008648:	bf00      	nop
 800864a:	371c      	adds	r7, #28
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr

08008652 <byteswap>:
static void byteswap (uint8_t data[4])
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
    uint8_t tmp;

    tmp = data[0];
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	73fb      	strb	r3, [r7, #15]
    data[0] = data[3];
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	78da      	ldrb	r2, [r3, #3]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	701a      	strb	r2, [r3, #0]
    data[3] = tmp;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	3303      	adds	r3, #3
 800866c:	7bfa      	ldrb	r2, [r7, #15]
 800866e:	701a      	strb	r2, [r3, #0]
    tmp = data[1];
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	73fb      	strb	r3, [r7, #15]
    data[1] = data[2];
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3301      	adds	r3, #1
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	7892      	ldrb	r2, [r2, #2]
 800867e:	701a      	strb	r2, [r3, #0]
    data[2] = tmp;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3302      	adds	r3, #2
 8008684:	7bfa      	ldrb	r2, [r7, #15]
 8008686:	701a      	strb	r2, [r3, #0]
}
 8008688:	bf00      	nop
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	bc80      	pop	{r7}
 8008690:	4770      	bx	lr
	...

08008694 <TMC2209_HAL_Write>:

HAL_StatusTypeDef TMC2209_HAL_Write(uint8_t reg, uint32_t data)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	6039      	str	r1, [r7, #0]
 800869e:	71fb      	strb	r3, [r7, #7]
	TMC2209_Write_Datagram_t datagram;
	datagram.data = 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	2300      	movs	r3, #0
 80086a6:	613b      	str	r3, [r7, #16]
	datagram.message.sync = 0x05;
 80086a8:	2305      	movs	r3, #5
 80086aa:	733b      	strb	r3, [r7, #12]
	datagram.message.slave = 0x00;
 80086ac:	2300      	movs	r3, #0
 80086ae:	737b      	strb	r3, [r7, #13]
	datagram.message.address.idx = reg;
 80086b0:	79fb      	ldrb	r3, [r7, #7]
 80086b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	7bbb      	ldrb	r3, [r7, #14]
 80086ba:	f362 0306 	bfi	r3, r2, #0, #7
 80086be:	73bb      	strb	r3, [r7, #14]
	datagram.message.address.write = REG_WRITE;
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086c6:	73bb      	strb	r3, [r7, #14]
	datagram.message.payload.value = data;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	f8c7 300f 	str.w	r3, [r7, #15]
	byteswap(datagram.message.payload.data);
 80086ce:	f107 030c 	add.w	r3, r7, #12
 80086d2:	3303      	adds	r3, #3
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff ffbc 	bl	8008652 <byteswap>

	calculateCRC(datagram.bytes, sizeof(TMC2209_Write_Datagram_t));
 80086da:	f107 030c 	add.w	r3, r7, #12
 80086de:	2108      	movs	r1, #8
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff ff6b 	bl	80085bc <calculateCRC>
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 80086e6:	4809      	ldr	r0, [pc, #36]	@ (800870c <TMC2209_HAL_Write+0x78>)
 80086e8:	f7fe f8cf 	bl	800688a <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, datagram.bytes, sizeof(TMC2209_Write_Datagram_t), HAL_MAX_DELAY);
 80086ec:	f107 010c 	add.w	r1, r7, #12
 80086f0:	f04f 33ff 	mov.w	r3, #4294967295
 80086f4:	2208      	movs	r2, #8
 80086f6:	4805      	ldr	r0, [pc, #20]	@ (800870c <TMC2209_HAL_Write+0x78>)
 80086f8:	f7fd fd32 	bl	8006160 <HAL_UART_Transmit>
 80086fc:	4603      	mov	r3, r0
 80086fe:	75fb      	strb	r3, [r7, #23]

	return status;
 8008700:	7dfb      	ldrb	r3, [r7, #23]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	20000c14 	.word	0x20000c14

08008710 <__malloc_lock>:
 8008710:	4801      	ldr	r0, [pc, #4]	@ (8008718 <__malloc_lock+0x8>)
 8008712:	f000 b88b 	b.w	800882c <__retarget_lock_acquire_recursive>
 8008716:	bf00      	nop
 8008718:	20001b84 	.word	0x20001b84

0800871c <__malloc_unlock>:
 800871c:	4801      	ldr	r0, [pc, #4]	@ (8008724 <__malloc_unlock+0x8>)
 800871e:	f000 b886 	b.w	800882e <__retarget_lock_release_recursive>
 8008722:	bf00      	nop
 8008724:	20001b84 	.word	0x20001b84

08008728 <memset>:
 8008728:	4603      	mov	r3, r0
 800872a:	4402      	add	r2, r0
 800872c:	4293      	cmp	r3, r2
 800872e:	d100      	bne.n	8008732 <memset+0xa>
 8008730:	4770      	bx	lr
 8008732:	f803 1b01 	strb.w	r1, [r3], #1
 8008736:	e7f9      	b.n	800872c <memset+0x4>

08008738 <_reclaim_reent>:
 8008738:	4b29      	ldr	r3, [pc, #164]	@ (80087e0 <_reclaim_reent+0xa8>)
 800873a:	b570      	push	{r4, r5, r6, lr}
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4604      	mov	r4, r0
 8008740:	4283      	cmp	r3, r0
 8008742:	d04b      	beq.n	80087dc <_reclaim_reent+0xa4>
 8008744:	69c3      	ldr	r3, [r0, #28]
 8008746:	b1ab      	cbz	r3, 8008774 <_reclaim_reent+0x3c>
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	b16b      	cbz	r3, 8008768 <_reclaim_reent+0x30>
 800874c:	2500      	movs	r5, #0
 800874e:	69e3      	ldr	r3, [r4, #28]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	5959      	ldr	r1, [r3, r5]
 8008754:	2900      	cmp	r1, #0
 8008756:	d13b      	bne.n	80087d0 <_reclaim_reent+0x98>
 8008758:	3504      	adds	r5, #4
 800875a:	2d80      	cmp	r5, #128	@ 0x80
 800875c:	d1f7      	bne.n	800874e <_reclaim_reent+0x16>
 800875e:	69e3      	ldr	r3, [r4, #28]
 8008760:	4620      	mov	r0, r4
 8008762:	68d9      	ldr	r1, [r3, #12]
 8008764:	f000 f864 	bl	8008830 <_free_r>
 8008768:	69e3      	ldr	r3, [r4, #28]
 800876a:	6819      	ldr	r1, [r3, #0]
 800876c:	b111      	cbz	r1, 8008774 <_reclaim_reent+0x3c>
 800876e:	4620      	mov	r0, r4
 8008770:	f000 f85e 	bl	8008830 <_free_r>
 8008774:	6961      	ldr	r1, [r4, #20]
 8008776:	b111      	cbz	r1, 800877e <_reclaim_reent+0x46>
 8008778:	4620      	mov	r0, r4
 800877a:	f000 f859 	bl	8008830 <_free_r>
 800877e:	69e1      	ldr	r1, [r4, #28]
 8008780:	b111      	cbz	r1, 8008788 <_reclaim_reent+0x50>
 8008782:	4620      	mov	r0, r4
 8008784:	f000 f854 	bl	8008830 <_free_r>
 8008788:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800878a:	b111      	cbz	r1, 8008792 <_reclaim_reent+0x5a>
 800878c:	4620      	mov	r0, r4
 800878e:	f000 f84f 	bl	8008830 <_free_r>
 8008792:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008794:	b111      	cbz	r1, 800879c <_reclaim_reent+0x64>
 8008796:	4620      	mov	r0, r4
 8008798:	f000 f84a 	bl	8008830 <_free_r>
 800879c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800879e:	b111      	cbz	r1, 80087a6 <_reclaim_reent+0x6e>
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 f845 	bl	8008830 <_free_r>
 80087a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80087a8:	b111      	cbz	r1, 80087b0 <_reclaim_reent+0x78>
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 f840 	bl	8008830 <_free_r>
 80087b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80087b2:	b111      	cbz	r1, 80087ba <_reclaim_reent+0x82>
 80087b4:	4620      	mov	r0, r4
 80087b6:	f000 f83b 	bl	8008830 <_free_r>
 80087ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80087bc:	b111      	cbz	r1, 80087c4 <_reclaim_reent+0x8c>
 80087be:	4620      	mov	r0, r4
 80087c0:	f000 f836 	bl	8008830 <_free_r>
 80087c4:	6a23      	ldr	r3, [r4, #32]
 80087c6:	b14b      	cbz	r3, 80087dc <_reclaim_reent+0xa4>
 80087c8:	4620      	mov	r0, r4
 80087ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80087ce:	4718      	bx	r3
 80087d0:	680e      	ldr	r6, [r1, #0]
 80087d2:	4620      	mov	r0, r4
 80087d4:	f000 f82c 	bl	8008830 <_free_r>
 80087d8:	4631      	mov	r1, r6
 80087da:	e7bb      	b.n	8008754 <_reclaim_reent+0x1c>
 80087dc:	bd70      	pop	{r4, r5, r6, pc}
 80087de:	bf00      	nop
 80087e0:	20000014 	.word	0x20000014

080087e4 <__libc_init_array>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	2600      	movs	r6, #0
 80087e8:	4d0c      	ldr	r5, [pc, #48]	@ (800881c <__libc_init_array+0x38>)
 80087ea:	4c0d      	ldr	r4, [pc, #52]	@ (8008820 <__libc_init_array+0x3c>)
 80087ec:	1b64      	subs	r4, r4, r5
 80087ee:	10a4      	asrs	r4, r4, #2
 80087f0:	42a6      	cmp	r6, r4
 80087f2:	d109      	bne.n	8008808 <__libc_init_array+0x24>
 80087f4:	f000 f8aa 	bl	800894c <_init>
 80087f8:	2600      	movs	r6, #0
 80087fa:	4d0a      	ldr	r5, [pc, #40]	@ (8008824 <__libc_init_array+0x40>)
 80087fc:	4c0a      	ldr	r4, [pc, #40]	@ (8008828 <__libc_init_array+0x44>)
 80087fe:	1b64      	subs	r4, r4, r5
 8008800:	10a4      	asrs	r4, r4, #2
 8008802:	42a6      	cmp	r6, r4
 8008804:	d105      	bne.n	8008812 <__libc_init_array+0x2e>
 8008806:	bd70      	pop	{r4, r5, r6, pc}
 8008808:	f855 3b04 	ldr.w	r3, [r5], #4
 800880c:	4798      	blx	r3
 800880e:	3601      	adds	r6, #1
 8008810:	e7ee      	b.n	80087f0 <__libc_init_array+0xc>
 8008812:	f855 3b04 	ldr.w	r3, [r5], #4
 8008816:	4798      	blx	r3
 8008818:	3601      	adds	r6, #1
 800881a:	e7f2      	b.n	8008802 <__libc_init_array+0x1e>
 800881c:	08008a10 	.word	0x08008a10
 8008820:	08008a10 	.word	0x08008a10
 8008824:	08008a10 	.word	0x08008a10
 8008828:	08008a14 	.word	0x08008a14

0800882c <__retarget_lock_acquire_recursive>:
 800882c:	4770      	bx	lr

0800882e <__retarget_lock_release_recursive>:
 800882e:	4770      	bx	lr

08008830 <_free_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4605      	mov	r5, r0
 8008834:	2900      	cmp	r1, #0
 8008836:	d040      	beq.n	80088ba <_free_r+0x8a>
 8008838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800883c:	1f0c      	subs	r4, r1, #4
 800883e:	2b00      	cmp	r3, #0
 8008840:	bfb8      	it	lt
 8008842:	18e4      	addlt	r4, r4, r3
 8008844:	f7ff ff64 	bl	8008710 <__malloc_lock>
 8008848:	4a1c      	ldr	r2, [pc, #112]	@ (80088bc <_free_r+0x8c>)
 800884a:	6813      	ldr	r3, [r2, #0]
 800884c:	b933      	cbnz	r3, 800885c <_free_r+0x2c>
 800884e:	6063      	str	r3, [r4, #4]
 8008850:	6014      	str	r4, [r2, #0]
 8008852:	4628      	mov	r0, r5
 8008854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008858:	f7ff bf60 	b.w	800871c <__malloc_unlock>
 800885c:	42a3      	cmp	r3, r4
 800885e:	d908      	bls.n	8008872 <_free_r+0x42>
 8008860:	6820      	ldr	r0, [r4, #0]
 8008862:	1821      	adds	r1, r4, r0
 8008864:	428b      	cmp	r3, r1
 8008866:	bf01      	itttt	eq
 8008868:	6819      	ldreq	r1, [r3, #0]
 800886a:	685b      	ldreq	r3, [r3, #4]
 800886c:	1809      	addeq	r1, r1, r0
 800886e:	6021      	streq	r1, [r4, #0]
 8008870:	e7ed      	b.n	800884e <_free_r+0x1e>
 8008872:	461a      	mov	r2, r3
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	b10b      	cbz	r3, 800887c <_free_r+0x4c>
 8008878:	42a3      	cmp	r3, r4
 800887a:	d9fa      	bls.n	8008872 <_free_r+0x42>
 800887c:	6811      	ldr	r1, [r2, #0]
 800887e:	1850      	adds	r0, r2, r1
 8008880:	42a0      	cmp	r0, r4
 8008882:	d10b      	bne.n	800889c <_free_r+0x6c>
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	4401      	add	r1, r0
 8008888:	1850      	adds	r0, r2, r1
 800888a:	4283      	cmp	r3, r0
 800888c:	6011      	str	r1, [r2, #0]
 800888e:	d1e0      	bne.n	8008852 <_free_r+0x22>
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	4408      	add	r0, r1
 8008896:	6010      	str	r0, [r2, #0]
 8008898:	6053      	str	r3, [r2, #4]
 800889a:	e7da      	b.n	8008852 <_free_r+0x22>
 800889c:	d902      	bls.n	80088a4 <_free_r+0x74>
 800889e:	230c      	movs	r3, #12
 80088a0:	602b      	str	r3, [r5, #0]
 80088a2:	e7d6      	b.n	8008852 <_free_r+0x22>
 80088a4:	6820      	ldr	r0, [r4, #0]
 80088a6:	1821      	adds	r1, r4, r0
 80088a8:	428b      	cmp	r3, r1
 80088aa:	bf01      	itttt	eq
 80088ac:	6819      	ldreq	r1, [r3, #0]
 80088ae:	685b      	ldreq	r3, [r3, #4]
 80088b0:	1809      	addeq	r1, r1, r0
 80088b2:	6021      	streq	r1, [r4, #0]
 80088b4:	6063      	str	r3, [r4, #4]
 80088b6:	6054      	str	r4, [r2, #4]
 80088b8:	e7cb      	b.n	8008852 <_free_r+0x22>
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
 80088bc:	20001a48 	.word	0x20001a48

080088c0 <round>:
 80088c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c2:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80088c6:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 80088ca:	2a13      	cmp	r2, #19
 80088cc:	4604      	mov	r4, r0
 80088ce:	460d      	mov	r5, r1
 80088d0:	460b      	mov	r3, r1
 80088d2:	dc1a      	bgt.n	800890a <round+0x4a>
 80088d4:	2a00      	cmp	r2, #0
 80088d6:	da0b      	bge.n	80088f0 <round+0x30>
 80088d8:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80088dc:	3201      	adds	r2, #1
 80088de:	bf04      	itt	eq
 80088e0:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80088e4:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80088e8:	2200      	movs	r2, #0
 80088ea:	461d      	mov	r5, r3
 80088ec:	4614      	mov	r4, r2
 80088ee:	e016      	b.n	800891e <round+0x5e>
 80088f0:	4815      	ldr	r0, [pc, #84]	@ (8008948 <round+0x88>)
 80088f2:	4110      	asrs	r0, r2
 80088f4:	4001      	ands	r1, r0
 80088f6:	4321      	orrs	r1, r4
 80088f8:	d011      	beq.n	800891e <round+0x5e>
 80088fa:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80088fe:	fa41 f202 	asr.w	r2, r1, r2
 8008902:	4413      	add	r3, r2
 8008904:	ea23 0300 	bic.w	r3, r3, r0
 8008908:	e7ee      	b.n	80088e8 <round+0x28>
 800890a:	2a33      	cmp	r2, #51	@ 0x33
 800890c:	dd0a      	ble.n	8008924 <round+0x64>
 800890e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8008912:	d104      	bne.n	800891e <round+0x5e>
 8008914:	4602      	mov	r2, r0
 8008916:	f7f7 fc21 	bl	800015c <__adddf3>
 800891a:	4604      	mov	r4, r0
 800891c:	460d      	mov	r5, r1
 800891e:	4620      	mov	r0, r4
 8008920:	4629      	mov	r1, r5
 8008922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008924:	f04f 30ff 	mov.w	r0, #4294967295
 8008928:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800892c:	40f8      	lsrs	r0, r7
 800892e:	4220      	tst	r0, r4
 8008930:	d0f5      	beq.n	800891e <round+0x5e>
 8008932:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8008936:	2201      	movs	r2, #1
 8008938:	408a      	lsls	r2, r1
 800893a:	1912      	adds	r2, r2, r4
 800893c:	bf28      	it	cs
 800893e:	3301      	addcs	r3, #1
 8008940:	ea22 0200 	bic.w	r2, r2, r0
 8008944:	e7d1      	b.n	80088ea <round+0x2a>
 8008946:	bf00      	nop
 8008948:	000fffff 	.word	0x000fffff

0800894c <_init>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	bf00      	nop
 8008950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008952:	bc08      	pop	{r3}
 8008954:	469e      	mov	lr, r3
 8008956:	4770      	bx	lr

08008958 <_fini>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr
