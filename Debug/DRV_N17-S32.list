
DRV_N17-S32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006ac0  08006ac0  00007ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b6c  08006b6c  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  08006b6c  08006b6c  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b6c  08006b6c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b6c  08006b6c  00007b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b70  08006b70  00007b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006b74  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b04  20000060  08006bd4  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b64  08006bd4  00008b64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172eb  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035d8  00000000  00000000  0001f374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  00022950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffd  00000000  00000000  00023db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f98  00000000  00000000  00024db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001839a  00000000  00000000  0003ed4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000958c9  00000000  00000000  000570e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec9b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005800  00000000  00000000  000ec9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f21f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006aa8 	.word	0x08006aa8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006aa8 	.word	0x08006aa8

08000150 <calcCRC>:
#include "driver.h"

extern UART_HandleTypeDef huart1;

static void calcCRC (uint8_t *datagram, uint8_t datagramLength)
{
 8000150:	b480      	push	{r7}
 8000152:	b087      	sub	sp, #28
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	460b      	mov	r3, r1
 800015a:	70fb      	strb	r3, [r7, #3]
    int i,j;
    uint8_t *crc = datagram + (datagramLength - 1); // CRC located in last byte of message
 800015c:	78fb      	ldrb	r3, [r7, #3]
 800015e:	3b01      	subs	r3, #1
 8000160:	687a      	ldr	r2, [r7, #4]
 8000162:	4413      	add	r3, r2
 8000164:	60bb      	str	r3, [r7, #8]
    uint8_t currentByte;
    *crc = 0;
 8000166:	68bb      	ldr	r3, [r7, #8]
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (datagramLength - 1); i++) {    // Execute for all bytes of a message
 800016c:	2300      	movs	r3, #0
 800016e:	617b      	str	r3, [r7, #20]
 8000170:	e02e      	b.n	80001d0 <calcCRC+0x80>
        currentByte = datagram[i];                  // Retrieve a byte to be sent from Array
 8000172:	697b      	ldr	r3, [r7, #20]
 8000174:	687a      	ldr	r2, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	73fb      	strb	r3, [r7, #15]
        for (j = 0; j < 8; j++) {
 800017c:	2300      	movs	r3, #0
 800017e:	613b      	str	r3, [r7, #16]
 8000180:	e020      	b.n	80001c4 <calcCRC+0x74>
            if ((*crc >> 7) ^ (currentByte & 0x01)) // update CRC based result of XOR operation
 8000182:	68bb      	ldr	r3, [r7, #8]
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	09db      	lsrs	r3, r3, #7
 8000188:	b2db      	uxtb	r3, r3
 800018a:	461a      	mov	r2, r3
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	f003 0301 	and.w	r3, r3, #1
 8000192:	429a      	cmp	r2, r3
 8000194:	d00a      	beq.n	80001ac <calcCRC+0x5c>
                *crc = (*crc << 1) ^ 0x07;
 8000196:	68bb      	ldr	r3, [r7, #8]
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	005b      	lsls	r3, r3, #1
 800019c:	b25b      	sxtb	r3, r3
 800019e:	f083 0307 	eor.w	r3, r3, #7
 80001a2:	b25b      	sxtb	r3, r3
 80001a4:	b2da      	uxtb	r2, r3
 80001a6:	68bb      	ldr	r3, [r7, #8]
 80001a8:	701a      	strb	r2, [r3, #0]
 80001aa:	e005      	b.n	80001b8 <calcCRC+0x68>
            else
                *crc = (*crc << 1);
 80001ac:	68bb      	ldr	r3, [r7, #8]
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	005b      	lsls	r3, r3, #1
 80001b2:	b2da      	uxtb	r2, r3
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	701a      	strb	r2, [r3, #0]
            currentByte = currentByte >> 1;
 80001b8:	7bfb      	ldrb	r3, [r7, #15]
 80001ba:	085b      	lsrs	r3, r3, #1
 80001bc:	73fb      	strb	r3, [r7, #15]
        for (j = 0; j < 8; j++) {
 80001be:	693b      	ldr	r3, [r7, #16]
 80001c0:	3301      	adds	r3, #1
 80001c2:	613b      	str	r3, [r7, #16]
 80001c4:	693b      	ldr	r3, [r7, #16]
 80001c6:	2b07      	cmp	r3, #7
 80001c8:	dddb      	ble.n	8000182 <calcCRC+0x32>
    for (i = 0; i < (datagramLength - 1); i++) {    // Execute for all bytes of a message
 80001ca:	697b      	ldr	r3, [r7, #20]
 80001cc:	3301      	adds	r3, #1
 80001ce:	617b      	str	r3, [r7, #20]
 80001d0:	78fb      	ldrb	r3, [r7, #3]
 80001d2:	3b01      	subs	r3, #1
 80001d4:	697a      	ldr	r2, [r7, #20]
 80001d6:	429a      	cmp	r2, r3
 80001d8:	dbcb      	blt.n	8000172 <calcCRC+0x22>
        } // for CRC bit
    }
}
 80001da:	bf00      	nop
 80001dc:	bf00      	nop
 80001de:	371c      	adds	r7, #28
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
	...

080001e8 <TMC_ReadRegister>:

static HAL_StatusTypeDef TMC_ReadRegister(TMC2209_read_datagram_t* datagram, uint32_t* value){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	6039      	str	r1, [r7, #0]

	datagram->msg.addr = datagram->msg.addr & 0x7F;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	789b      	ldrb	r3, [r3, #2]
 80001f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	709a      	strb	r2, [r3, #2]
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, datagram->data, sizeof(datagram), 100);
 8000200:	6879      	ldr	r1, [r7, #4]
 8000202:	2364      	movs	r3, #100	@ 0x64
 8000204:	2204      	movs	r2, #4
 8000206:	4816      	ldr	r0, [pc, #88]	@ (8000260 <TMC_ReadRegister+0x78>)
 8000208:	f004 fa66 	bl	80046d8 <HAL_UART_Transmit>
 800020c:	4603      	mov	r3, r0
 800020e:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8000210:	7dfb      	ldrb	r3, [r7, #23]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <TMC_ReadRegister+0x32>
 8000216:	7dfb      	ldrb	r3, [r7, #23]
 8000218:	e01e      	b.n	8000258 <TMC_ReadRegister+0x70>

	HAL_Delay(2);
 800021a:	2002      	movs	r0, #2
 800021c:	f000 fe10 	bl	8000e40 <HAL_Delay>

	uint8_t response[8];
	status = HAL_UART_Receive(&huart1, response, sizeof(response), 100);
 8000220:	f107 010c 	add.w	r1, r7, #12
 8000224:	2364      	movs	r3, #100	@ 0x64
 8000226:	2208      	movs	r2, #8
 8000228:	480d      	ldr	r0, [pc, #52]	@ (8000260 <TMC_ReadRegister+0x78>)
 800022a:	f004 fae0 	bl	80047ee <HAL_UART_Receive>
 800022e:	4603      	mov	r3, r0
 8000230:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8000232:	7dfb      	ldrb	r3, [r7, #23]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <TMC_ReadRegister+0x54>
 8000238:	7dfb      	ldrb	r3, [r7, #23]
 800023a:	e00d      	b.n	8000258 <TMC_ReadRegister+0x70>

	*value = (response[4] << 24) | (response[5] << 16) | (response[6] << 8) | response[7];
 800023c:	7c3b      	ldrb	r3, [r7, #16]
 800023e:	061a      	lsls	r2, r3, #24
 8000240:	7c7b      	ldrb	r3, [r7, #17]
 8000242:	041b      	lsls	r3, r3, #16
 8000244:	431a      	orrs	r2, r3
 8000246:	7cbb      	ldrb	r3, [r7, #18]
 8000248:	021b      	lsls	r3, r3, #8
 800024a:	4313      	orrs	r3, r2
 800024c:	7cfa      	ldrb	r2, [r7, #19]
 800024e:	4313      	orrs	r3, r2
 8000250:	461a      	mov	r2, r3
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 8000256:	2300      	movs	r3, #0
}
 8000258:	4618      	mov	r0, r3
 800025a:	3718      	adds	r7, #24
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000c0c 	.word	0x20000c0c

08000264 <TMC_WriteRegister>:

static HAL_StatusTypeDef TMC_WriteRegister(TMC2209_write_datagram_t* datagram){
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]

	datagram->msg.addr = datagram->msg.addr | 0x80;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	789b      	ldrb	r3, [r3, #2]
 8000270:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000274:	b2da      	uxtb	r2, r3
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	709a      	strb	r2, [r3, #2]
	HAL_StatusTypeDef status;
	status =  HAL_UART_Transmit(&huart1, datagram->data, sizeof(datagram), 100);
 800027a:	6879      	ldr	r1, [r7, #4]
 800027c:	2364      	movs	r3, #100	@ 0x64
 800027e:	2204      	movs	r2, #4
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <TMC_WriteRegister+0x30>)
 8000282:	f004 fa29 	bl	80046d8 <HAL_UART_Transmit>
 8000286:	4603      	mov	r3, r0
 8000288:	73fb      	strb	r3, [r7, #15]
	return status;
 800028a:	7bfb      	ldrb	r3, [r7, #15]
}
 800028c:	4618      	mov	r0, r3
 800028e:	3710      	adds	r7, #16
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000c0c 	.word	0x20000c0c

08000298 <byteswap>:

static void byteswap(uint8_t* bytes){
 8000298:	b480      	push	{r7}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	uint8_t temp = bytes[0];
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	73fb      	strb	r3, [r7, #15]
	bytes[0] = bytes[3];
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	78da      	ldrb	r2, [r3, #3]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	701a      	strb	r2, [r3, #0]
	bytes[3] = temp;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	3303      	adds	r3, #3
 80002b2:	7bfa      	ldrb	r2, [r7, #15]
 80002b4:	701a      	strb	r2, [r3, #0]
	temp = bytes[1];
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	785b      	ldrb	r3, [r3, #1]
 80002ba:	73fb      	strb	r3, [r7, #15]
	bytes[1] = bytes[2];
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	3301      	adds	r3, #1
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	7892      	ldrb	r2, [r2, #2]
 80002c4:	701a      	strb	r2, [r3, #0]
	bytes[2] = temp;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	3302      	adds	r3, #2
 80002ca:	7bfa      	ldrb	r2, [r7, #15]
 80002cc:	701a      	strb	r2, [r3, #0]
}
 80002ce:	bf00      	nop
 80002d0:	3714      	adds	r7, #20
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr

080002d8 <tmc2209_init>:

void tmc2209_init() {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
	TMC2209_write_datagram_t gconf_dat;
	tmc2209_regaddr_t gconf_reg = TMC2209Reg_GCONF;
 80002de:	2300      	movs	r3, #0
 80002e0:	73fb      	strb	r3, [r7, #15]
	TMC2209_payload gconf_payload;

	gconf_dat.msg.sync = 0x05;
 80002e2:	2305      	movs	r3, #5
 80002e4:	713b      	strb	r3, [r7, #4]
	gconf_dat.msg.slave = TMC2209_SLAVE_ADDR;
 80002e6:	2300      	movs	r3, #0
 80002e8:	717b      	strb	r3, [r7, #5]
	gconf_dat.msg.addr = gconf_reg;
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
 80002ec:	71bb      	strb	r3, [r7, #6]

	gconf_payload.gconf.pdn_disable = 1;
 80002ee:	783b      	ldrb	r3, [r7, #0]
 80002f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002f4:	703b      	strb	r3, [r7, #0]
	gconf_dat.msg.payload = gconf_payload;
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	463a      	mov	r2, r7
 80002fa:	6810      	ldr	r0, [r2, #0]
 80002fc:	6018      	str	r0, [r3, #0]
	byteswap(gconf_dat.msg.payload.data);
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	3303      	adds	r3, #3
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ffc8 	bl	8000298 <byteswap>

	calcCRC(gconf_dat.data, sizeof(TMC2209_write_datagram_t));
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2108      	movs	r1, #8
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff1f 	bl	8000150 <calcCRC>

	TMC_WriteRegister(&gconf_dat);  // Set PDN_DISABLE in GCONF
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ffa5 	bl	8000264 <TMC_WriteRegister>
	HAL_Delay(100);
 800031a:	2064      	movs	r0, #100	@ 0x64
 800031c:	f000 fd90 	bl	8000e40 <HAL_Delay>
}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <DRV_readgconf>:

void DRV_readgconf(uint32_t* result){
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]

	TMC2209_read_datagram_t datagram;
	tmc2209_regaddr_t reg = TMC2209Reg_GCONF;
 8000330:	2300      	movs	r3, #0
 8000332:	73fb      	strb	r3, [r7, #15]

	datagram.msg.sync = 0x05;
 8000334:	2305      	movs	r3, #5
 8000336:	723b      	strb	r3, [r7, #8]
	datagram.msg.slave = TMC2209_SLAVE_ADDR;
 8000338:	2300      	movs	r3, #0
 800033a:	727b      	strb	r3, [r7, #9]
	datagram.msg.addr = reg;
 800033c:	7bfb      	ldrb	r3, [r7, #15]
 800033e:	72bb      	strb	r3, [r7, #10]
	calcCRC(datagram.data, sizeof(TMC2209_read_datagram_t));
 8000340:	f107 0308 	add.w	r3, r7, #8
 8000344:	2104      	movs	r1, #4
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff02 	bl	8000150 <calcCRC>

	TMC_ReadRegister(&datagram, result);
 800034c:	f107 0308 	add.w	r3, r7, #8
 8000350:	6879      	ldr	r1, [r7, #4]
 8000352:	4618      	mov	r0, r3
 8000354:	f7ff ff48 	bl	80001e8 <TMC_ReadRegister>
}
 8000358:	bf00      	nop
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <lowPassFilter>:

int32_t getCounter(){
	return accumulate_counter;
}

uint16_t lowPassFilter(uint16_t newData){
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	80fb      	strh	r3, [r7, #6]
	encoderReadings[filterIndex] = newData;
 800036a:	4b1c      	ldr	r3, [pc, #112]	@ (80003dc <lowPassFilter+0x7c>)
 800036c:	881b      	ldrh	r3, [r3, #0]
 800036e:	4619      	mov	r1, r3
 8000370:	4a1b      	ldr	r2, [pc, #108]	@ (80003e0 <lowPassFilter+0x80>)
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	filterIndex = (filterIndex + 1) % FILTER_SIZE;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <lowPassFilter+0x7c>)
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	3301      	adds	r3, #1
 800037e:	425a      	negs	r2, r3
 8000380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000384:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000388:	bf58      	it	pl
 800038a:	4253      	negpl	r3, r2
 800038c:	b29a      	uxth	r2, r3
 800038e:	4b13      	ldr	r3, [pc, #76]	@ (80003dc <lowPassFilter+0x7c>)
 8000390:	801a      	strh	r2, [r3, #0]

	int sum = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTER_SIZE; i++) {
 8000396:	2300      	movs	r3, #0
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	e00a      	b.n	80003b2 <lowPassFilter+0x52>
		sum += encoderReadings[i];
 800039c:	4a10      	ldr	r2, [pc, #64]	@ (80003e0 <lowPassFilter+0x80>)
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003a4:	461a      	mov	r2, r3
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	4413      	add	r3, r2
 80003aa:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTER_SIZE; i++) {
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	3301      	adds	r3, #1
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80003b8:	dbf0      	blt.n	800039c <lowPassFilter+0x3c>
	}

	filteredValue = sum / FILTER_SIZE;
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	da01      	bge.n	80003c4 <lowPassFilter+0x64>
 80003c0:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80003c4:	129b      	asrs	r3, r3, #10
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <lowPassFilter+0x84>)
 80003ca:	801a      	strh	r2, [r3, #0]

	return filteredValue;
 80003cc:	4b05      	ldr	r3, [pc, #20]	@ (80003e4 <lowPassFilter+0x84>)
 80003ce:	881b      	ldrh	r3, [r3, #0]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000888 	.word	0x20000888
 80003e0:	20000088 	.word	0x20000088
 80003e4:	2000088a 	.word	0x2000088a

080003e8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a2d      	ldr	r2, [pc, #180]	@ (80004ac <HAL_I2C_MemRxCpltCallback+0xc4>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d154      	bne.n	80004a4 <HAL_I2C_MemRxCpltCallback+0xbc>
        uint16_t position_now = (raw_buffer[0] << 8) | raw_buffer[1];
 80003fa:	4b2d      	ldr	r3, [pc, #180]	@ (80004b0 <HAL_I2C_MemRxCpltCallback+0xc8>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	021b      	lsls	r3, r3, #8
 8000400:	b21a      	sxth	r2, r3
 8000402:	4b2b      	ldr	r3, [pc, #172]	@ (80004b0 <HAL_I2C_MemRxCpltCallback+0xc8>)
 8000404:	785b      	ldrb	r3, [r3, #1]
 8000406:	b21b      	sxth	r3, r3
 8000408:	4313      	orrs	r3, r2
 800040a:	b21b      	sxth	r3, r3
 800040c:	817b      	strh	r3, [r7, #10]
        position_now = lowPassFilter(position_now);
 800040e:	897b      	ldrh	r3, [r7, #10]
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ffa5 	bl	8000360 <lowPassFilter>
 8000416:	4603      	mov	r3, r0
 8000418:	817b      	strh	r3, [r7, #10]
        int32_t delta = (int32_t)(position_now - position_prev);
 800041a:	897b      	ldrh	r3, [r7, #10]
 800041c:	4a25      	ldr	r2, [pc, #148]	@ (80004b4 <HAL_I2C_MemRxCpltCallback+0xcc>)
 800041e:	8812      	ldrh	r2, [r2, #0]
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	60fb      	str	r3, [r7, #12]

        if(rotation_direction){
 8000424:	4b24      	ldr	r3, [pc, #144]	@ (80004b8 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d00d      	beq.n	8000448 <HAL_I2C_MemRxCpltCallback+0x60>
        	if(delta > ENC_PPR/2){
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000432:	dd03      	ble.n	800043c <HAL_I2C_MemRxCpltCallback+0x54>
        		delta -= ENC_PPR;
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800043a:	60fb      	str	r3, [r7, #12]
        	}
        	delta = abs(delta);
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	2b00      	cmp	r3, #0
 8000440:	bfb8      	it	lt
 8000442:	425b      	neglt	r3, r3
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	e00d      	b.n	8000464 <HAL_I2C_MemRxCpltCallback+0x7c>
        }else{
        	if(delta < -(ENC_PPR/2)){
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 800044e:	da03      	bge.n	8000458 <HAL_I2C_MemRxCpltCallback+0x70>
        		delta += ENC_PPR;
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000456:	60fb      	str	r3, [r7, #12]
        	}
        	delta = -abs(delta);
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	2b00      	cmp	r3, #0
 800045c:	bfb8      	it	lt
 800045e:	425b      	neglt	r3, r3
 8000460:	425b      	negs	r3, r3
 8000462:	60fb      	str	r3, [r7, #12]
        }

        accumulate_counter += delta;
 8000464:	4b15      	ldr	r3, [pc, #84]	@ (80004bc <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	4413      	add	r3, r2
 800046c:	4a13      	ldr	r2, [pc, #76]	@ (80004bc <HAL_I2C_MemRxCpltCallback+0xd4>)
 800046e:	6013      	str	r3, [r2, #0]

        if(accumulate_counter >= ENC_MAX_COUNT){
 8000470:	4b12      	ldr	r3, [pc, #72]	@ (80004bc <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a12      	ldr	r2, [pc, #72]	@ (80004c0 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8000476:	4293      	cmp	r3, r2
 8000478:	dd06      	ble.n	8000488 <HAL_I2C_MemRxCpltCallback+0xa0>
			accumulate_counter -= ENC_MAX_COUNT;
 800047a:	4b10      	ldr	r3, [pc, #64]	@ (80004bc <HAL_I2C_MemRxCpltCallback+0xd4>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	4b11      	ldr	r3, [pc, #68]	@ (80004c4 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8000480:	4413      	add	r3, r2
 8000482:	4a0e      	ldr	r2, [pc, #56]	@ (80004bc <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000484:	6013      	str	r3, [r2, #0]
 8000486:	e00a      	b.n	800049e <HAL_I2C_MemRxCpltCallback+0xb6>
		}else if(accumulate_counter < ENC_MIN_COUNT){
 8000488:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <HAL_I2C_MemRxCpltCallback+0xd4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a0d      	ldr	r2, [pc, #52]	@ (80004c4 <HAL_I2C_MemRxCpltCallback+0xdc>)
 800048e:	4293      	cmp	r3, r2
 8000490:	da05      	bge.n	800049e <HAL_I2C_MemRxCpltCallback+0xb6>
			accumulate_counter += ENC_MAX_COUNT;
 8000492:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <HAL_I2C_MemRxCpltCallback+0xe0>)
 8000498:	4413      	add	r3, r2
 800049a:	4a08      	ldr	r2, [pc, #32]	@ (80004bc <HAL_I2C_MemRxCpltCallback+0xd4>)
 800049c:	6013      	str	r3, [r2, #0]
		}

        position_prev = position_now;
 800049e:	4a05      	ldr	r2, [pc, #20]	@ (80004b4 <HAL_I2C_MemRxCpltCallback+0xcc>)
 80004a0:	897b      	ldrh	r3, [r7, #10]
 80004a2:	8013      	strh	r3, [r2, #0]
    }
}
 80004a4:	bf00      	nop
 80004a6:	3710      	adds	r7, #16
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40005400 	.word	0x40005400
 80004b0:	20000084 	.word	0x20000084
 80004b4:	2000007e 	.word	0x2000007e
 80004b8:	2000007c 	.word	0x2000007c
 80004bc:	20000080 	.word	0x20000080
 80004c0:	0098967e 	.word	0x0098967e
 80004c4:	ff676981 	.word	0xff676981
 80004c8:	0098967f 	.word	0x0098967f

080004cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	4a06      	ldr	r2, [pc, #24]	@ (80004f4 <vApplicationGetIdleTaskMemory+0x28>)
 80004dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	4a05      	ldr	r2, [pc, #20]	@ (80004f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2280      	movs	r2, #128	@ 0x80
 80004e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	2000088c 	.word	0x2000088c
 80004f8:	2000092c 	.word	0x2000092c

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b096      	sub	sp, #88	@ 0x58
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fc6b 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f853 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f965 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800050e:	f000 f945 	bl	800079c <MX_DMA_Init>
  MX_I2C1_Init();
 8000512:	f000 f893 	bl	800063c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000516:	f000 f8bf 	bl	8000698 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800051a:	f000 f915 	bl	8000748 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //i2c_scanbus(&hi2c1, i2c_available);
  tmc2209_init();
 800051e:	f7ff fedb 	bl	80002d8 <tmc2209_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000522:	4b1d      	ldr	r3, [pc, #116]	@ (8000598 <main+0x9c>)
 8000524:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000528:	461d      	mov	r5, r3
 800052a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000536:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f004 ffd1 	bl	80054e4 <osThreadCreate>
 8000542:	4603      	mov	r3, r0
 8000544:	4a15      	ldr	r2, [pc, #84]	@ (800059c <main+0xa0>)
 8000546:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 8000548:	4b15      	ldr	r3, [pc, #84]	@ (80005a0 <main+0xa4>)
 800054a:	f107 0420 	add.w	r4, r7, #32
 800054e:	461d      	mov	r5, r3
 8000550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 800055c:	f107 0320 	add.w	r3, r7, #32
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f004 ffbe 	bl	80054e4 <osThreadCreate>
 8000568:	4603      	mov	r3, r0
 800056a:	4a0e      	ldr	r2, [pc, #56]	@ (80005a4 <main+0xa8>)
 800056c:	6013      	str	r3, [r2, #0]

  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <main+0xac>)
 8000570:	1d3c      	adds	r4, r7, #4
 8000572:	461d      	mov	r5, r3
 8000574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000578:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f004 ffad 	bl	80054e4 <osThreadCreate>
 800058a:	4603      	mov	r3, r0
 800058c:	4a07      	ldr	r2, [pc, #28]	@ (80005ac <main+0xb0>)
 800058e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000590:	f004 ffa1 	bl	80054d6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <main+0x98>
 8000598:	08006acc 	.word	0x08006acc
 800059c:	20000c54 	.word	0x20000c54
 80005a0:	08006af4 	.word	0x08006af4
 80005a4:	20000c58 	.word	0x20000c58
 80005a8:	08006b1c 	.word	0x08006b1c
 80005ac:	20000c5c 	.word	0x20000c5c

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b090      	sub	sp, #64	@ 0x40
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0318 	add.w	r3, r7, #24
 80005ba:	2228      	movs	r2, #40	@ 0x28
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f006 f99a 	bl	80068f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ee:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0318 	add.w	r3, r7, #24
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 ff05 	bl	8003408 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000604:	f000 f9a0 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f003 f972 	bl	800390c <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800062e:	f000 f98b 	bl	8000948 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3740      	adds	r7, #64	@ 0x40
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000640:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_I2C1_Init+0x50>)
 8000642:	4a13      	ldr	r2, [pc, #76]	@ (8000690 <MX_I2C1_Init+0x54>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000646:	4b11      	ldr	r3, [pc, #68]	@ (800068c <MX_I2C1_Init+0x50>)
 8000648:	4a12      	ldr	r2, [pc, #72]	@ (8000694 <MX_I2C1_Init+0x58>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000652:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <MX_I2C1_Init+0x50>)
 800065a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800065e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000660:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	@ (800068c <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000672:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	@ (800068c <MX_I2C1_Init+0x50>)
 800067a:	f001 f8a3 	bl	80017c4 <HAL_I2C_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000684:	f000 f960 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000b2c 	.word	0x20000b2c
 8000690:	40005400 	.word	0x40005400
 8000694:	00061a80 	.word	0x00061a80

08000698 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	@ 0x28
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
 80006b6:	615a      	str	r2, [r3, #20]
 80006b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ba:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <MX_TIM2_Init+0xac>)
 80006bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006c2:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <MX_TIM2_Init+0xac>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <MX_TIM2_Init+0xac>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <MX_TIM2_Init+0xac>)
 80006d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <MX_TIM2_Init+0xac>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006dc:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <MX_TIM2_Init+0xac>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80006e2:	4818      	ldr	r0, [pc, #96]	@ (8000744 <MX_TIM2_Init+0xac>)
 80006e4:	f003 fb7a 	bl	8003ddc <HAL_TIM_OC_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80006ee:	f000 f92b 	bl	8000948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	4619      	mov	r1, r3
 8000700:	4810      	ldr	r0, [pc, #64]	@ (8000744 <MX_TIM2_Init+0xac>)
 8000702:	f003 ff21 	bl	8004548 <HAL_TIMEx_MasterConfigSynchronization>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800070c:	f000 f91c 	bl	8000948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000710:	2350      	movs	r3, #80	@ 0x50
 8000712:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	4619      	mov	r1, r3
 8000726:	4807      	ldr	r0, [pc, #28]	@ (8000744 <MX_TIM2_Init+0xac>)
 8000728:	f003 fc98 	bl	800405c <HAL_TIM_OC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000732:	f000 f909 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000736:	4803      	ldr	r0, [pc, #12]	@ (8000744 <MX_TIM2_Init+0xac>)
 8000738:	f000 f9da 	bl	8000af0 <HAL_TIM_MspPostInit>

}
 800073c:	bf00      	nop
 800073e:	3728      	adds	r7, #40	@ 0x28
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000bc4 	.word	0x20000bc4

08000748 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_USART1_UART_Init+0x4c>)
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <MX_USART1_UART_Init+0x50>)
 8000750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_USART1_UART_Init+0x4c>)
 8000754:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_USART1_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_USART1_UART_Init+0x4c>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_USART1_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_USART1_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_USART1_UART_Init+0x4c>)
 8000780:	f003 ff52 	bl	8004628 <HAL_HalfDuplex_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800078a:	f000 f8dd 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000c0c 	.word	0x20000c0c
 8000798:	40013800 	.word	0x40013800

0800079c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_DMA_Init+0x38>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	4a0b      	ldr	r2, [pc, #44]	@ (80007d4 <MX_DMA_Init+0x38>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6153      	str	r3, [r2, #20]
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_DMA_Init+0x38>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2105      	movs	r1, #5
 80007be:	2011      	movs	r0, #17
 80007c0:	f000 fc17 	bl	8000ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007c4:	2011      	movs	r0, #17
 80007c6:	f000 fc30 	bl	800102a <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ec:	4b3d      	ldr	r3, [pc, #244]	@ (80008e4 <MX_GPIO_Init+0x10c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a3c      	ldr	r2, [pc, #240]	@ (80008e4 <MX_GPIO_Init+0x10c>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b3a      	ldr	r3, [pc, #232]	@ (80008e4 <MX_GPIO_Init+0x10c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0310 	and.w	r3, r3, #16
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000804:	4b37      	ldr	r3, [pc, #220]	@ (80008e4 <MX_GPIO_Init+0x10c>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a36      	ldr	r2, [pc, #216]	@ (80008e4 <MX_GPIO_Init+0x10c>)
 800080a:	f043 0320 	orr.w	r3, r3, #32
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b34      	ldr	r3, [pc, #208]	@ (80008e4 <MX_GPIO_Init+0x10c>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0320 	and.w	r3, r3, #32
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <MX_GPIO_Init+0x10c>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a30      	ldr	r2, [pc, #192]	@ (80008e4 <MX_GPIO_Init+0x10c>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b2e      	ldr	r3, [pc, #184]	@ (80008e4 <MX_GPIO_Init+0x10c>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <MX_GPIO_Init+0x10c>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a2a      	ldr	r2, [pc, #168]	@ (80008e4 <MX_GPIO_Init+0x10c>)
 800083a:	f043 0308 	orr.w	r3, r3, #8
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <MX_GPIO_Init+0x10c>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0308 	and.w	r3, r3, #8
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000852:	4825      	ldr	r0, [pc, #148]	@ (80008e8 <MX_GPIO_Init+0x110>)
 8000854:	f000 ff9e 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2106      	movs	r1, #6
 800085c:	4823      	ldr	r0, [pc, #140]	@ (80008ec <MX_GPIO_Init+0x114>)
 800085e:	f000 ff99 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2120      	movs	r1, #32
 8000866:	4822      	ldr	r0, [pc, #136]	@ (80008f0 <MX_GPIO_Init+0x118>)
 8000868:	f000 ff94 	bl	8001794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800086c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2302      	movs	r3, #2
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4619      	mov	r1, r3
 8000884:	4818      	ldr	r0, [pc, #96]	@ (80008e8 <MX_GPIO_Init+0x110>)
 8000886:	f000 fe01 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800088a:	2306      	movs	r3, #6
 800088c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2302      	movs	r3, #2
 8000898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0310 	add.w	r3, r7, #16
 800089e:	4619      	mov	r1, r3
 80008a0:	4812      	ldr	r0, [pc, #72]	@ (80008ec <MX_GPIO_Init+0x114>)
 80008a2:	f000 fdf3 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008a6:	2310      	movs	r3, #16
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <MX_GPIO_Init+0x118>)
 80008ba:	f000 fde7 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008be:	2320      	movs	r3, #32
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <MX_GPIO_Init+0x118>)
 80008d6:	f000 fdd9 	bl	800148c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40011000 	.word	0x40011000
 80008ec:	40010800 	.word	0x40010800
 80008f0:	40010c00 	.word	0x40010c00

080008f4 <StartDriverTask>:

/* USER CODE BEGIN 4 */
void StartDriverTask(void const * argument){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	for(;;){
		//DRV_ReadRegister(0x00, &driver_value);
		DRV_readgconf(&driver_value);
 80008fc:	4801      	ldr	r0, [pc, #4]	@ (8000904 <StartDriverTask+0x10>)
 80008fe:	f7ff fd13 	bl	8000328 <DRV_readgconf>
 8000902:	e7fb      	b.n	80008fc <StartDriverTask+0x8>
 8000904:	20000c60 	.word	0x20000c60

08000908 <StartEncoderTask>:
	}
}

void StartEncoderTask(void const * argument){
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	for(;;){
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <StartEncoderTask+0x8>

08000914 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f004 fe2d 	bl	800557c <osDelay>
 8000922:	e7fb      	b.n	800091c <StartDefaultTask+0x8>

08000924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a04      	ldr	r2, [pc, #16]	@ (8000944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d101      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000936:	f000 fa67 	bl	8000e08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40012c00 	.word	0x40012c00

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <Error_Handler+0x8>

08000954 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800095a:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <HAL_MspInit+0x68>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a17      	ldr	r2, [pc, #92]	@ (80009bc <HAL_MspInit+0x68>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <HAL_MspInit+0x68>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <HAL_MspInit+0x68>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a11      	ldr	r2, [pc, #68]	@ (80009bc <HAL_MspInit+0x68>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <HAL_MspInit+0x68>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	210f      	movs	r1, #15
 800098e:	f06f 0001 	mvn.w	r0, #1
 8000992:	f000 fb2e 	bl	8000ff2 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <HAL_MspInit+0x6c>)
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	4a04      	ldr	r2, [pc, #16]	@ (80009c0 <HAL_MspInit+0x6c>)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010000 	.word	0x40010000

080009c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a31      	ldr	r2, [pc, #196]	@ (8000aa4 <HAL_I2C_MspInit+0xe0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d15a      	bne.n	8000a9a <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	4b30      	ldr	r3, [pc, #192]	@ (8000aa8 <HAL_I2C_MspInit+0xe4>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a2f      	ldr	r2, [pc, #188]	@ (8000aa8 <HAL_I2C_MspInit+0xe4>)
 80009ea:	f043 0308 	orr.w	r3, r3, #8
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa8 <HAL_I2C_MspInit+0xe4>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0308 	and.w	r3, r3, #8
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009fc:	23c0      	movs	r3, #192	@ 0xc0
 80009fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a00:	2312      	movs	r3, #18
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4827      	ldr	r0, [pc, #156]	@ (8000aac <HAL_I2C_MspInit+0xe8>)
 8000a10:	f000 fd3c 	bl	800148c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a14:	4b24      	ldr	r3, [pc, #144]	@ (8000aa8 <HAL_I2C_MspInit+0xe4>)
 8000a16:	69db      	ldr	r3, [r3, #28]
 8000a18:	4a23      	ldr	r2, [pc, #140]	@ (8000aa8 <HAL_I2C_MspInit+0xe4>)
 8000a1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a1e:	61d3      	str	r3, [r2, #28]
 8000a20:	4b21      	ldr	r3, [pc, #132]	@ (8000aa8 <HAL_I2C_MspInit+0xe4>)
 8000a22:	69db      	ldr	r3, [r3, #28]
 8000a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000a2c:	4b20      	ldr	r3, [pc, #128]	@ (8000ab0 <HAL_I2C_MspInit+0xec>)
 8000a2e:	4a21      	ldr	r2, [pc, #132]	@ (8000ab4 <HAL_I2C_MspInit+0xf0>)
 8000a30:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a32:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <HAL_I2C_MspInit+0xec>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab0 <HAL_I2C_MspInit+0xec>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <HAL_I2C_MspInit+0xec>)
 8000a40:	2280      	movs	r2, #128	@ 0x80
 8000a42:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <HAL_I2C_MspInit+0xec>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <HAL_I2C_MspInit+0xec>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a50:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <HAL_I2C_MspInit+0xec>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a56:	4b16      	ldr	r3, [pc, #88]	@ (8000ab0 <HAL_I2C_MspInit+0xec>)
 8000a58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a5c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000a5e:	4814      	ldr	r0, [pc, #80]	@ (8000ab0 <HAL_I2C_MspInit+0xec>)
 8000a60:	f000 faf2 	bl	8001048 <HAL_DMA_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 8000a6a:	f7ff ff6d 	bl	8000948 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <HAL_I2C_MspInit+0xec>)
 8000a72:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a74:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <HAL_I2C_MspInit+0xec>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	201f      	movs	r0, #31
 8000a80:	f000 fab7 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a84:	201f      	movs	r0, #31
 8000a86:	f000 fad0 	bl	800102a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2105      	movs	r1, #5
 8000a8e:	2020      	movs	r0, #32
 8000a90:	f000 faaf 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a94:	2020      	movs	r0, #32
 8000a96:	f000 fac8 	bl	800102a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010c00 	.word	0x40010c00
 8000ab0:	20000b80 	.word	0x20000b80
 8000ab4:	40020080 	.word	0x40020080

08000ab8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ac8:	d10b      	bne.n	8000ae2 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <HAL_TIM_OC_MspInit+0x34>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a07      	ldr	r2, [pc, #28]	@ (8000aec <HAL_TIM_OC_MspInit+0x34>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	61d3      	str	r3, [r2, #28]
 8000ad6:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_TIM_OC_MspInit+0x34>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b0e:	d117      	bne.n	8000b40 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <HAL_TIM_MspPostInit+0x58>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a0c      	ldr	r2, [pc, #48]	@ (8000b48 <HAL_TIM_MspPostInit+0x58>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_TIM_MspPostInit+0x58>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <HAL_TIM_MspPostInit+0x5c>)
 8000b3c:	f000 fca6 	bl	800148c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	3720      	adds	r7, #32
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010800 	.word	0x40010800

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8000bd4 <HAL_UART_MspInit+0x84>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d12c      	bne.n	8000bca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b70:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a18      	ldr	r2, [pc, #96]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a12      	ldr	r2, [pc, #72]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ba4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba6:	2312      	movs	r3, #18
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4809      	ldr	r0, [pc, #36]	@ (8000bdc <HAL_UART_MspInit+0x8c>)
 8000bb6:	f000 fc69 	bl	800148c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2105      	movs	r1, #5
 8000bbe:	2025      	movs	r0, #37	@ 0x25
 8000bc0:	f000 fa17 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bc4:	2025      	movs	r0, #37	@ 0x25
 8000bc6:	f000 fa30 	bl	800102a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bca:	bf00      	nop
 8000bcc:	3720      	adds	r7, #32
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40013800 	.word	0x40013800
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010800 	.word	0x40010800

08000be0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	@ 0x30
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb0 <HAL_InitTick+0xd0>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8000cb0 <HAL_InitTick+0xd0>)
 8000bfc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb0 <HAL_InitTick+0xd0>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c0e:	f107 020c 	add.w	r2, r7, #12
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 ffe7 	bl	8003bec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c1e:	f002 ffd1 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 8000c22:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c26:	4a23      	ldr	r2, [pc, #140]	@ (8000cb4 <HAL_InitTick+0xd4>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	0c9b      	lsrs	r3, r3, #18
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c32:	4b21      	ldr	r3, [pc, #132]	@ (8000cb8 <HAL_InitTick+0xd8>)
 8000c34:	4a21      	ldr	r2, [pc, #132]	@ (8000cbc <HAL_InitTick+0xdc>)
 8000c36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <HAL_InitTick+0xd8>)
 8000c3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c3e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c40:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb8 <HAL_InitTick+0xd8>)
 8000c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c44:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c46:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb8 <HAL_InitTick+0xd8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <HAL_InitTick+0xd8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	4b19      	ldr	r3, [pc, #100]	@ (8000cb8 <HAL_InitTick+0xd8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c58:	4817      	ldr	r0, [pc, #92]	@ (8000cb8 <HAL_InitTick+0xd8>)
 8000c5a:	f003 f815 	bl	8003c88 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d11b      	bne.n	8000ca4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c6c:	4812      	ldr	r0, [pc, #72]	@ (8000cb8 <HAL_InitTick+0xd8>)
 8000c6e:	f003 f863 	bl	8003d38 <HAL_TIM_Base_Start_IT>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d111      	bne.n	8000ca4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c80:	2019      	movs	r0, #25
 8000c82:	f000 f9d2 	bl	800102a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d808      	bhi.n	8000c9e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	2019      	movs	r0, #25
 8000c92:	f000 f9ae 	bl	8000ff2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <HAL_InitTick+0xe0>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	e002      	b.n	8000ca4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3730      	adds	r7, #48	@ 0x30
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	20000c64 	.word	0x20000c64
 8000cbc:	40012c00 	.word	0x40012c00
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <NMI_Handler+0x4>

08000ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000cfc:	4802      	ldr	r0, [pc, #8]	@ (8000d08 <DMA1_Channel7_IRQHandler+0x10>)
 8000cfe:	f000 fab1 	bl	8001264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000b80 	.word	0x20000b80

08000d0c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <TIM1_UP_IRQHandler+0x10>)
 8000d12:	f003 f8b2 	bl	8003e7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000c64 	.word	0x20000c64

08000d20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <I2C1_EV_IRQHandler+0x10>)
 8000d26:	f000 fea5 	bl	8001a74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000b2c 	.word	0x20000b2c

08000d34 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <I2C1_ER_IRQHandler+0x10>)
 8000d3a:	f000 ffee 	bl	8001d1a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000b2c 	.word	0x20000b2c

08000d48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <USART1_IRQHandler+0x10>)
 8000d4e:	f003 fe43 	bl	80049d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000c0c 	.word	0x20000c0c

08000d5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <HAL_UARTEx_RxEventCallback>:
	HAL_HalfDuplex_EnableReceiver(&huart1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 8000d74:	221e      	movs	r2, #30
 8000d76:	4904      	ldr	r1, [pc, #16]	@ (8000d88 <HAL_UARTEx_RxEventCallback+0x20>)
 8000d78:	4804      	ldr	r0, [pc, #16]	@ (8000d8c <HAL_UARTEx_RxEventCallback+0x24>)
 8000d7a:	f003 fdcf 	bl	800491c <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000cac 	.word	0x20000cac
 8000d8c:	20000c0c 	.word	0x20000c0c

08000d90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d90:	f7ff ffe4 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480b      	ldr	r0, [pc, #44]	@ (8000dc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d96:	490c      	ldr	r1, [pc, #48]	@ (8000dc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d98:	4a0c      	ldr	r2, [pc, #48]	@ (8000dcc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a09      	ldr	r2, [pc, #36]	@ (8000dd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dac:	4c09      	ldr	r4, [pc, #36]	@ (8000dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dba:	f005 fdfb 	bl	80069b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dbe:	f7ff fb9d 	bl	80004fc <main>
  bx lr
 8000dc2:	4770      	bx	lr
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000dcc:	08006b74 	.word	0x08006b74
  ldr r2, =_sbss
 8000dd0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000dd4:	20001b64 	.word	0x20001b64

08000dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_2_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <HAL_Init+0x28>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <HAL_Init+0x28>)
 8000de6:	f043 0310 	orr.w	r3, r3, #16
 8000dea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f8f5 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	200f      	movs	r0, #15
 8000df4:	f7ff fef4 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f7ff fdac 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40022000 	.word	0x40022000

08000e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <HAL_IncTick+0x1c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <HAL_IncTick+0x20>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a03      	ldr	r2, [pc, #12]	@ (8000e28 <HAL_IncTick+0x20>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000ccc 	.word	0x20000ccc

08000e2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b02      	ldr	r3, [pc, #8]	@ (8000e3c <HAL_GetTick+0x10>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	20000ccc 	.word	0x20000ccc

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff fff0 	bl	8000e2c <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <HAL_Delay+0x44>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e66:	bf00      	nop
 8000e68:	f7ff ffe0 	bl	8000e2c <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4906      	ldr	r1, [pc, #24]	@ (8000f20 <__NVIC_EnableIRQ+0x34>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	@ (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	@ (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	@ 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	@ 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff4f 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff64 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ffb2 	bl	8000f78 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff81 	bl	8000f24 <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff57 	bl	8000eec <__NVIC_EnableIRQ>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e043      	b.n	80010e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <HAL_DMA_Init+0xa8>)
 8001066:	4413      	add	r3, r2
 8001068:	4a22      	ldr	r2, [pc, #136]	@ (80010f4 <HAL_DMA_Init+0xac>)
 800106a:	fba2 2303 	umull	r2, r3, r2, r3
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	009a      	lsls	r2, r3, #2
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a1f      	ldr	r2, [pc, #124]	@ (80010f8 <HAL_DMA_Init+0xb0>)
 800107a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2202      	movs	r2, #2
 8001080:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001092:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001096:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80010a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	bffdfff8 	.word	0xbffdfff8
 80010f4:	cccccccd 	.word	0xcccccccd
 80010f8:	40020000 	.word	0x40020000

080010fc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d008      	beq.n	8001126 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2204      	movs	r2, #4
 8001118:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e020      	b.n	8001168 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 020e 	bic.w	r2, r2, #14
 8001134:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0201 	bic.w	r2, r2, #1
 8001144:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f202 	lsl.w	r2, r1, r2
 8001154:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001166:	7bfb      	ldrb	r3, [r7, #15]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
	...

08001174 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d005      	beq.n	8001198 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2204      	movs	r2, #4
 8001190:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	e051      	b.n	800123c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 020e 	bic.w	r2, r2, #14
 80011a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a22      	ldr	r2, [pc, #136]	@ (8001248 <HAL_DMA_Abort_IT+0xd4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d029      	beq.n	8001216 <HAL_DMA_Abort_IT+0xa2>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a21      	ldr	r2, [pc, #132]	@ (800124c <HAL_DMA_Abort_IT+0xd8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d022      	beq.n	8001212 <HAL_DMA_Abort_IT+0x9e>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001250 <HAL_DMA_Abort_IT+0xdc>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d01a      	beq.n	800120c <HAL_DMA_Abort_IT+0x98>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1e      	ldr	r2, [pc, #120]	@ (8001254 <HAL_DMA_Abort_IT+0xe0>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d012      	beq.n	8001206 <HAL_DMA_Abort_IT+0x92>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001258 <HAL_DMA_Abort_IT+0xe4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00a      	beq.n	8001200 <HAL_DMA_Abort_IT+0x8c>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1b      	ldr	r2, [pc, #108]	@ (800125c <HAL_DMA_Abort_IT+0xe8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d102      	bne.n	80011fa <HAL_DMA_Abort_IT+0x86>
 80011f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011f8:	e00e      	b.n	8001218 <HAL_DMA_Abort_IT+0xa4>
 80011fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011fe:	e00b      	b.n	8001218 <HAL_DMA_Abort_IT+0xa4>
 8001200:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001204:	e008      	b.n	8001218 <HAL_DMA_Abort_IT+0xa4>
 8001206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120a:	e005      	b.n	8001218 <HAL_DMA_Abort_IT+0xa4>
 800120c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001210:	e002      	b.n	8001218 <HAL_DMA_Abort_IT+0xa4>
 8001212:	2310      	movs	r3, #16
 8001214:	e000      	b.n	8001218 <HAL_DMA_Abort_IT+0xa4>
 8001216:	2301      	movs	r3, #1
 8001218:	4a11      	ldr	r2, [pc, #68]	@ (8001260 <HAL_DMA_Abort_IT+0xec>)
 800121a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	4798      	blx	r3
    } 
  }
  return status;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020008 	.word	0x40020008
 800124c:	4002001c 	.word	0x4002001c
 8001250:	40020030 	.word	0x40020030
 8001254:	40020044 	.word	0x40020044
 8001258:	40020058 	.word	0x40020058
 800125c:	4002006c 	.word	0x4002006c
 8001260:	40020000 	.word	0x40020000

08001264 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	2204      	movs	r2, #4
 8001282:	409a      	lsls	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4013      	ands	r3, r2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d04f      	beq.n	800132c <HAL_DMA_IRQHandler+0xc8>
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b00      	cmp	r3, #0
 8001294:	d04a      	beq.n	800132c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0320 	and.w	r3, r3, #32
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d107      	bne.n	80012b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0204 	bic.w	r2, r2, #4
 80012b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a66      	ldr	r2, [pc, #408]	@ (8001454 <HAL_DMA_IRQHandler+0x1f0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d029      	beq.n	8001312 <HAL_DMA_IRQHandler+0xae>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a65      	ldr	r2, [pc, #404]	@ (8001458 <HAL_DMA_IRQHandler+0x1f4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d022      	beq.n	800130e <HAL_DMA_IRQHandler+0xaa>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a63      	ldr	r2, [pc, #396]	@ (800145c <HAL_DMA_IRQHandler+0x1f8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01a      	beq.n	8001308 <HAL_DMA_IRQHandler+0xa4>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a62      	ldr	r2, [pc, #392]	@ (8001460 <HAL_DMA_IRQHandler+0x1fc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d012      	beq.n	8001302 <HAL_DMA_IRQHandler+0x9e>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a60      	ldr	r2, [pc, #384]	@ (8001464 <HAL_DMA_IRQHandler+0x200>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00a      	beq.n	80012fc <HAL_DMA_IRQHandler+0x98>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a5f      	ldr	r2, [pc, #380]	@ (8001468 <HAL_DMA_IRQHandler+0x204>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d102      	bne.n	80012f6 <HAL_DMA_IRQHandler+0x92>
 80012f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012f4:	e00e      	b.n	8001314 <HAL_DMA_IRQHandler+0xb0>
 80012f6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012fa:	e00b      	b.n	8001314 <HAL_DMA_IRQHandler+0xb0>
 80012fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001300:	e008      	b.n	8001314 <HAL_DMA_IRQHandler+0xb0>
 8001302:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001306:	e005      	b.n	8001314 <HAL_DMA_IRQHandler+0xb0>
 8001308:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800130c:	e002      	b.n	8001314 <HAL_DMA_IRQHandler+0xb0>
 800130e:	2340      	movs	r3, #64	@ 0x40
 8001310:	e000      	b.n	8001314 <HAL_DMA_IRQHandler+0xb0>
 8001312:	2304      	movs	r3, #4
 8001314:	4a55      	ldr	r2, [pc, #340]	@ (800146c <HAL_DMA_IRQHandler+0x208>)
 8001316:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 8094 	beq.w	800144a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800132a:	e08e      	b.n	800144a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001330:	2202      	movs	r2, #2
 8001332:	409a      	lsls	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4013      	ands	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d056      	beq.n	80013ea <HAL_DMA_IRQHandler+0x186>
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d051      	beq.n	80013ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0320 	and.w	r3, r3, #32
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10b      	bne.n	800136c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 020a 	bic.w	r2, r2, #10
 8001362:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a38      	ldr	r2, [pc, #224]	@ (8001454 <HAL_DMA_IRQHandler+0x1f0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d029      	beq.n	80013ca <HAL_DMA_IRQHandler+0x166>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a37      	ldr	r2, [pc, #220]	@ (8001458 <HAL_DMA_IRQHandler+0x1f4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d022      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x162>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a35      	ldr	r2, [pc, #212]	@ (800145c <HAL_DMA_IRQHandler+0x1f8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01a      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x15c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a34      	ldr	r2, [pc, #208]	@ (8001460 <HAL_DMA_IRQHandler+0x1fc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d012      	beq.n	80013ba <HAL_DMA_IRQHandler+0x156>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a32      	ldr	r2, [pc, #200]	@ (8001464 <HAL_DMA_IRQHandler+0x200>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00a      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x150>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a31      	ldr	r2, [pc, #196]	@ (8001468 <HAL_DMA_IRQHandler+0x204>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d102      	bne.n	80013ae <HAL_DMA_IRQHandler+0x14a>
 80013a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80013ac:	e00e      	b.n	80013cc <HAL_DMA_IRQHandler+0x168>
 80013ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013b2:	e00b      	b.n	80013cc <HAL_DMA_IRQHandler+0x168>
 80013b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013b8:	e008      	b.n	80013cc <HAL_DMA_IRQHandler+0x168>
 80013ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013be:	e005      	b.n	80013cc <HAL_DMA_IRQHandler+0x168>
 80013c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013c4:	e002      	b.n	80013cc <HAL_DMA_IRQHandler+0x168>
 80013c6:	2320      	movs	r3, #32
 80013c8:	e000      	b.n	80013cc <HAL_DMA_IRQHandler+0x168>
 80013ca:	2302      	movs	r3, #2
 80013cc:	4a27      	ldr	r2, [pc, #156]	@ (800146c <HAL_DMA_IRQHandler+0x208>)
 80013ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d034      	beq.n	800144a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013e8:	e02f      	b.n	800144a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	2208      	movs	r2, #8
 80013f0:	409a      	lsls	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d028      	beq.n	800144c <HAL_DMA_IRQHandler+0x1e8>
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d023      	beq.n	800144c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 020e 	bic.w	r2, r2, #14
 8001412:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800141c:	2101      	movs	r1, #1
 800141e:	fa01 f202 	lsl.w	r2, r1, r2
 8001422:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	2b00      	cmp	r3, #0
 8001440:	d004      	beq.n	800144c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	4798      	blx	r3
    }
  }
  return;
 800144a:	bf00      	nop
 800144c:	bf00      	nop
}
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40020008 	.word	0x40020008
 8001458:	4002001c 	.word	0x4002001c
 800145c:	40020030 	.word	0x40020030
 8001460:	40020044 	.word	0x40020044
 8001464:	40020058 	.word	0x40020058
 8001468:	4002006c 	.word	0x4002006c
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800147e:	b2db      	uxtb	r3, r3
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
	...

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b08b      	sub	sp, #44	@ 0x2c
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800149e:	e169      	b.n	8001774 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014a0:	2201      	movs	r2, #1
 80014a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	f040 8158 	bne.w	800176e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a9a      	ldr	r2, [pc, #616]	@ (800172c <HAL_GPIO_Init+0x2a0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d05e      	beq.n	8001586 <HAL_GPIO_Init+0xfa>
 80014c8:	4a98      	ldr	r2, [pc, #608]	@ (800172c <HAL_GPIO_Init+0x2a0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d875      	bhi.n	80015ba <HAL_GPIO_Init+0x12e>
 80014ce:	4a98      	ldr	r2, [pc, #608]	@ (8001730 <HAL_GPIO_Init+0x2a4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d058      	beq.n	8001586 <HAL_GPIO_Init+0xfa>
 80014d4:	4a96      	ldr	r2, [pc, #600]	@ (8001730 <HAL_GPIO_Init+0x2a4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d86f      	bhi.n	80015ba <HAL_GPIO_Init+0x12e>
 80014da:	4a96      	ldr	r2, [pc, #600]	@ (8001734 <HAL_GPIO_Init+0x2a8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d052      	beq.n	8001586 <HAL_GPIO_Init+0xfa>
 80014e0:	4a94      	ldr	r2, [pc, #592]	@ (8001734 <HAL_GPIO_Init+0x2a8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d869      	bhi.n	80015ba <HAL_GPIO_Init+0x12e>
 80014e6:	4a94      	ldr	r2, [pc, #592]	@ (8001738 <HAL_GPIO_Init+0x2ac>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d04c      	beq.n	8001586 <HAL_GPIO_Init+0xfa>
 80014ec:	4a92      	ldr	r2, [pc, #584]	@ (8001738 <HAL_GPIO_Init+0x2ac>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d863      	bhi.n	80015ba <HAL_GPIO_Init+0x12e>
 80014f2:	4a92      	ldr	r2, [pc, #584]	@ (800173c <HAL_GPIO_Init+0x2b0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d046      	beq.n	8001586 <HAL_GPIO_Init+0xfa>
 80014f8:	4a90      	ldr	r2, [pc, #576]	@ (800173c <HAL_GPIO_Init+0x2b0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d85d      	bhi.n	80015ba <HAL_GPIO_Init+0x12e>
 80014fe:	2b12      	cmp	r3, #18
 8001500:	d82a      	bhi.n	8001558 <HAL_GPIO_Init+0xcc>
 8001502:	2b12      	cmp	r3, #18
 8001504:	d859      	bhi.n	80015ba <HAL_GPIO_Init+0x12e>
 8001506:	a201      	add	r2, pc, #4	@ (adr r2, 800150c <HAL_GPIO_Init+0x80>)
 8001508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150c:	08001587 	.word	0x08001587
 8001510:	08001561 	.word	0x08001561
 8001514:	08001573 	.word	0x08001573
 8001518:	080015b5 	.word	0x080015b5
 800151c:	080015bb 	.word	0x080015bb
 8001520:	080015bb 	.word	0x080015bb
 8001524:	080015bb 	.word	0x080015bb
 8001528:	080015bb 	.word	0x080015bb
 800152c:	080015bb 	.word	0x080015bb
 8001530:	080015bb 	.word	0x080015bb
 8001534:	080015bb 	.word	0x080015bb
 8001538:	080015bb 	.word	0x080015bb
 800153c:	080015bb 	.word	0x080015bb
 8001540:	080015bb 	.word	0x080015bb
 8001544:	080015bb 	.word	0x080015bb
 8001548:	080015bb 	.word	0x080015bb
 800154c:	080015bb 	.word	0x080015bb
 8001550:	08001569 	.word	0x08001569
 8001554:	0800157d 	.word	0x0800157d
 8001558:	4a79      	ldr	r2, [pc, #484]	@ (8001740 <HAL_GPIO_Init+0x2b4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d013      	beq.n	8001586 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800155e:	e02c      	b.n	80015ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	623b      	str	r3, [r7, #32]
          break;
 8001566:	e029      	b.n	80015bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	3304      	adds	r3, #4
 800156e:	623b      	str	r3, [r7, #32]
          break;
 8001570:	e024      	b.n	80015bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	3308      	adds	r3, #8
 8001578:	623b      	str	r3, [r7, #32]
          break;
 800157a:	e01f      	b.n	80015bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	330c      	adds	r3, #12
 8001582:	623b      	str	r3, [r7, #32]
          break;
 8001584:	e01a      	b.n	80015bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800158e:	2304      	movs	r3, #4
 8001590:	623b      	str	r3, [r7, #32]
          break;
 8001592:	e013      	b.n	80015bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d105      	bne.n	80015a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800159c:	2308      	movs	r3, #8
 800159e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	611a      	str	r2, [r3, #16]
          break;
 80015a6:	e009      	b.n	80015bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a8:	2308      	movs	r3, #8
 80015aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	615a      	str	r2, [r3, #20]
          break;
 80015b2:	e003      	b.n	80015bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
          break;
 80015b8:	e000      	b.n	80015bc <HAL_GPIO_Init+0x130>
          break;
 80015ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2bff      	cmp	r3, #255	@ 0xff
 80015c0:	d801      	bhi.n	80015c6 <HAL_GPIO_Init+0x13a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	e001      	b.n	80015ca <HAL_GPIO_Init+0x13e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3304      	adds	r3, #4
 80015ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	2bff      	cmp	r3, #255	@ 0xff
 80015d0:	d802      	bhi.n	80015d8 <HAL_GPIO_Init+0x14c>
 80015d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	e002      	b.n	80015de <HAL_GPIO_Init+0x152>
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	3b08      	subs	r3, #8
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	210f      	movs	r1, #15
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	401a      	ands	r2, r3
 80015f0:	6a39      	ldr	r1, [r7, #32]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	431a      	orrs	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 80b1 	beq.w	800176e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800160c:	4b4d      	ldr	r3, [pc, #308]	@ (8001744 <HAL_GPIO_Init+0x2b8>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a4c      	ldr	r2, [pc, #304]	@ (8001744 <HAL_GPIO_Init+0x2b8>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b4a      	ldr	r3, [pc, #296]	@ (8001744 <HAL_GPIO_Init+0x2b8>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001624:	4a48      	ldr	r2, [pc, #288]	@ (8001748 <HAL_GPIO_Init+0x2bc>)
 8001626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001628:	089b      	lsrs	r3, r3, #2
 800162a:	3302      	adds	r3, #2
 800162c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001630:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a40      	ldr	r2, [pc, #256]	@ (800174c <HAL_GPIO_Init+0x2c0>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d013      	beq.n	8001678 <HAL_GPIO_Init+0x1ec>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a3f      	ldr	r2, [pc, #252]	@ (8001750 <HAL_GPIO_Init+0x2c4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d00d      	beq.n	8001674 <HAL_GPIO_Init+0x1e8>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a3e      	ldr	r2, [pc, #248]	@ (8001754 <HAL_GPIO_Init+0x2c8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d007      	beq.n	8001670 <HAL_GPIO_Init+0x1e4>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a3d      	ldr	r2, [pc, #244]	@ (8001758 <HAL_GPIO_Init+0x2cc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d101      	bne.n	800166c <HAL_GPIO_Init+0x1e0>
 8001668:	2303      	movs	r3, #3
 800166a:	e006      	b.n	800167a <HAL_GPIO_Init+0x1ee>
 800166c:	2304      	movs	r3, #4
 800166e:	e004      	b.n	800167a <HAL_GPIO_Init+0x1ee>
 8001670:	2302      	movs	r3, #2
 8001672:	e002      	b.n	800167a <HAL_GPIO_Init+0x1ee>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <HAL_GPIO_Init+0x1ee>
 8001678:	2300      	movs	r3, #0
 800167a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800167c:	f002 0203 	and.w	r2, r2, #3
 8001680:	0092      	lsls	r2, r2, #2
 8001682:	4093      	lsls	r3, r2
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800168a:	492f      	ldr	r1, [pc, #188]	@ (8001748 <HAL_GPIO_Init+0x2bc>)
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016a4:	4b2d      	ldr	r3, [pc, #180]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	492c      	ldr	r1, [pc, #176]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016b2:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4928      	ldr	r1, [pc, #160]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 80016bc:	4013      	ands	r3, r2
 80016be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016cc:	4b23      	ldr	r3, [pc, #140]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	4922      	ldr	r1, [pc, #136]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	60cb      	str	r3, [r1, #12]
 80016d8:	e006      	b.n	80016e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016da:	4b20      	ldr	r3, [pc, #128]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	491e      	ldr	r1, [pc, #120]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016f4:	4b19      	ldr	r3, [pc, #100]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4918      	ldr	r1, [pc, #96]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001702:	4b16      	ldr	r3, [pc, #88]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	43db      	mvns	r3, r3
 800170a:	4914      	ldr	r1, [pc, #80]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 800170c:	4013      	ands	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d021      	beq.n	8001760 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800171c:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	490e      	ldr	r1, [pc, #56]	@ (800175c <HAL_GPIO_Init+0x2d0>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
 8001728:	e021      	b.n	800176e <HAL_GPIO_Init+0x2e2>
 800172a:	bf00      	nop
 800172c:	10320000 	.word	0x10320000
 8001730:	10310000 	.word	0x10310000
 8001734:	10220000 	.word	0x10220000
 8001738:	10210000 	.word	0x10210000
 800173c:	10120000 	.word	0x10120000
 8001740:	10110000 	.word	0x10110000
 8001744:	40021000 	.word	0x40021000
 8001748:	40010000 	.word	0x40010000
 800174c:	40010800 	.word	0x40010800
 8001750:	40010c00 	.word	0x40010c00
 8001754:	40011000 	.word	0x40011000
 8001758:	40011400 	.word	0x40011400
 800175c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001760:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <HAL_GPIO_Init+0x304>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	43db      	mvns	r3, r3
 8001768:	4909      	ldr	r1, [pc, #36]	@ (8001790 <HAL_GPIO_Init+0x304>)
 800176a:	4013      	ands	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	3301      	adds	r3, #1
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	f47f ae8e 	bne.w	80014a0 <HAL_GPIO_Init+0x14>
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	372c      	adds	r7, #44	@ 0x2c
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	807b      	strh	r3, [r7, #2]
 80017a0:	4613      	mov	r3, r2
 80017a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a4:	787b      	ldrb	r3, [r7, #1]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017aa:	887a      	ldrh	r2, [r7, #2]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017b0:	e003      	b.n	80017ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	041a      	lsls	r2, r3, #16
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	611a      	str	r2, [r3, #16]
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e12b      	b.n	8001a2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff f8ea 	bl	80009c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2224      	movs	r2, #36	@ 0x24
 80017f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001816:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001826:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001828:	f002 f9b8 	bl	8003b9c <HAL_RCC_GetPCLK1Freq>
 800182c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	4a81      	ldr	r2, [pc, #516]	@ (8001a38 <HAL_I2C_Init+0x274>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d807      	bhi.n	8001848 <HAL_I2C_Init+0x84>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a80      	ldr	r2, [pc, #512]	@ (8001a3c <HAL_I2C_Init+0x278>)
 800183c:	4293      	cmp	r3, r2
 800183e:	bf94      	ite	ls
 8001840:	2301      	movls	r3, #1
 8001842:	2300      	movhi	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e006      	b.n	8001856 <HAL_I2C_Init+0x92>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a40 <HAL_I2C_Init+0x27c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	bf94      	ite	ls
 8001850:	2301      	movls	r3, #1
 8001852:	2300      	movhi	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0e7      	b.n	8001a2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a78      	ldr	r2, [pc, #480]	@ (8001a44 <HAL_I2C_Init+0x280>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0c9b      	lsrs	r3, r3, #18
 8001868:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	430a      	orrs	r2, r1
 800187c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4a6a      	ldr	r2, [pc, #424]	@ (8001a38 <HAL_I2C_Init+0x274>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d802      	bhi.n	8001898 <HAL_I2C_Init+0xd4>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	3301      	adds	r3, #1
 8001896:	e009      	b.n	80018ac <HAL_I2C_Init+0xe8>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	4a69      	ldr	r2, [pc, #420]	@ (8001a48 <HAL_I2C_Init+0x284>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	099b      	lsrs	r3, r3, #6
 80018aa:	3301      	adds	r3, #1
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	495c      	ldr	r1, [pc, #368]	@ (8001a38 <HAL_I2C_Init+0x274>)
 80018c8:	428b      	cmp	r3, r1
 80018ca:	d819      	bhi.n	8001900 <HAL_I2C_Init+0x13c>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1e59      	subs	r1, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018da:	1c59      	adds	r1, r3, #1
 80018dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018e0:	400b      	ands	r3, r1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00a      	beq.n	80018fc <HAL_I2C_Init+0x138>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1e59      	subs	r1, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fa:	e051      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 80018fc:	2304      	movs	r3, #4
 80018fe:	e04f      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d111      	bne.n	800192c <HAL_I2C_Init+0x168>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1e58      	subs	r0, r3, #1
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	440b      	add	r3, r1
 8001916:	fbb0 f3f3 	udiv	r3, r0, r3
 800191a:	3301      	adds	r3, #1
 800191c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	e012      	b.n	8001952 <HAL_I2C_Init+0x18e>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1e58      	subs	r0, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	0099      	lsls	r1, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001942:	3301      	adds	r3, #1
 8001944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_I2C_Init+0x196>
 8001956:	2301      	movs	r3, #1
 8001958:	e022      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10e      	bne.n	8001980 <HAL_I2C_Init+0x1bc>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1e58      	subs	r0, r3, #1
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6859      	ldr	r1, [r3, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	440b      	add	r3, r1
 8001970:	fbb0 f3f3 	udiv	r3, r0, r3
 8001974:	3301      	adds	r3, #1
 8001976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800197e:	e00f      	b.n	80019a0 <HAL_I2C_Init+0x1dc>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1e58      	subs	r0, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	0099      	lsls	r1, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	fbb0 f3f3 	udiv	r3, r0, r3
 8001996:	3301      	adds	r3, #1
 8001998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800199c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	6809      	ldr	r1, [r1, #0]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6911      	ldr	r1, [r2, #16]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68d2      	ldr	r2, [r2, #12]
 80019da:	4311      	orrs	r1, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	430b      	orrs	r3, r1
 80019e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	000186a0 	.word	0x000186a0
 8001a3c:	001e847f 	.word	0x001e847f
 8001a40:	003d08ff 	.word	0x003d08ff
 8001a44:	431bde83 	.word	0x431bde83
 8001a48:	10624dd3 	.word	0x10624dd3

08001a4c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a5e:	2b80      	cmp	r3, #128	@ 0x80
 8001a60:	d103      	bne.n	8001a6a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a9c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	2b10      	cmp	r3, #16
 8001aa2:	d003      	beq.n	8001aac <HAL_I2C_EV_IRQHandler+0x38>
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b40      	cmp	r3, #64	@ 0x40
 8001aa8:	f040 80b1 	bne.w	8001c0e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10d      	bne.n	8001ae2 <HAL_I2C_EV_IRQHandler+0x6e>
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001acc:	d003      	beq.n	8001ad6 <HAL_I2C_EV_IRQHandler+0x62>
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001ad4:	d101      	bne.n	8001ada <HAL_I2C_EV_IRQHandler+0x66>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_I2C_EV_IRQHandler+0x68>
 8001ada:	2300      	movs	r3, #0
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	f000 8114 	beq.w	8001d0a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00b      	beq.n	8001b04 <HAL_I2C_EV_IRQHandler+0x90>
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d006      	beq.n	8001b04 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f001 fc6c 	bl	80033d4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fd6b 	bl	80025d8 <I2C_Master_SB>
 8001b02:	e083      	b.n	8001c0c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d008      	beq.n	8001b20 <HAL_I2C_EV_IRQHandler+0xac>
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 fde2 	bl	80026e2 <I2C_Master_ADD10>
 8001b1e:	e075      	b.n	8001c0c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d008      	beq.n	8001b3c <HAL_I2C_EV_IRQHandler+0xc8>
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 fdfd 	bl	8002734 <I2C_Master_ADDR>
 8001b3a:	e067      	b.n	8001c0c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d036      	beq.n	8001bb4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b54:	f000 80db 	beq.w	8001d0e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00d      	beq.n	8001b7e <HAL_I2C_EV_IRQHandler+0x10a>
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_I2C_EV_IRQHandler+0x10a>
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d103      	bne.n	8001b7e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f9cb 	bl	8001f12 <I2C_MasterTransmit_TXE>
 8001b7c:	e046      	b.n	8001c0c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 80c2 	beq.w	8001d0e <HAL_I2C_EV_IRQHandler+0x29a>
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80bc 	beq.w	8001d0e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001b96:	7bbb      	ldrb	r3, [r7, #14]
 8001b98:	2b21      	cmp	r3, #33	@ 0x21
 8001b9a:	d103      	bne.n	8001ba4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 fa54 	bl	800204a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ba2:	e0b4      	b.n	8001d0e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	2b40      	cmp	r3, #64	@ 0x40
 8001ba8:	f040 80b1 	bne.w	8001d0e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fac2 	bl	8002136 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bb2:	e0ac      	b.n	8001d0e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001bc2:	f000 80a4 	beq.w	8001d0e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00d      	beq.n	8001bec <HAL_I2C_EV_IRQHandler+0x178>
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d008      	beq.n	8001bec <HAL_I2C_EV_IRQHandler+0x178>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d103      	bne.n	8001bec <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fb3e 	bl	8002266 <I2C_MasterReceive_RXNE>
 8001bea:	e00f      	b.n	8001c0c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 808b 	beq.w	8001d0e <HAL_I2C_EV_IRQHandler+0x29a>
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8085 	beq.w	8001d0e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 fbf6 	bl	80023f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c0a:	e080      	b.n	8001d0e <HAL_I2C_EV_IRQHandler+0x29a>
 8001c0c:	e07f      	b.n	8001d0e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	e007      	b.n	8001c30 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d011      	beq.n	8001c5e <HAL_I2C_EV_IRQHandler+0x1ea>
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00c      	beq.n	8001c5e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001c54:	69b9      	ldr	r1, [r7, #24]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 ffc3 	bl	8002be2 <I2C_Slave_ADDR>
 8001c5c:	e05a      	b.n	8001d14 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_I2C_EV_IRQHandler+0x206>
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fffe 	bl	8002c74 <I2C_Slave_STOPF>
 8001c78:	e04c      	b.n	8001d14 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c7a:	7bbb      	ldrb	r3, [r7, #14]
 8001c7c:	2b21      	cmp	r3, #33	@ 0x21
 8001c7e:	d002      	beq.n	8001c86 <HAL_I2C_EV_IRQHandler+0x212>
 8001c80:	7bbb      	ldrb	r3, [r7, #14]
 8001c82:	2b29      	cmp	r3, #41	@ 0x29
 8001c84:	d120      	bne.n	8001cc8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00d      	beq.n	8001cac <HAL_I2C_EV_IRQHandler+0x238>
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_I2C_EV_IRQHandler+0x238>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d103      	bne.n	8001cac <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 fee0 	bl	8002a6a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001caa:	e032      	b.n	8001d12 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d02d      	beq.n	8001d12 <HAL_I2C_EV_IRQHandler+0x29e>
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d028      	beq.n	8001d12 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 ff0f 	bl	8002ae4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cc6:	e024      	b.n	8001d12 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00d      	beq.n	8001cee <HAL_I2C_EV_IRQHandler+0x27a>
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_I2C_EV_IRQHandler+0x27a>
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d103      	bne.n	8001cee <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 ff1c 	bl	8002b24 <I2C_SlaveReceive_RXNE>
 8001cec:	e012      	b.n	8001d14 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00d      	beq.n	8001d14 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 ff4c 	bl	8002ba0 <I2C_SlaveReceive_BTF>
 8001d08:	e004      	b.n	8001d14 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001d0a:	bf00      	nop
 8001d0c:	e002      	b.n	8001d14 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d0e:	bf00      	nop
 8001d10:	e000      	b.n	8001d14 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d12:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001d14:	3720      	adds	r7, #32
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b08a      	sub	sp, #40	@ 0x28
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d3c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d015      	beq.n	8001d74 <HAL_I2C_ER_IRQHandler+0x5a>
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d010      	beq.n	8001d74 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001d62:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d72:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00d      	beq.n	8001d9a <HAL_I2C_ER_IRQHandler+0x80>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001d98:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d03e      	beq.n	8001e22 <HAL_I2C_ER_IRQHandler+0x108>
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d039      	beq.n	8001e22 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8001dae:	7efb      	ldrb	r3, [r7, #27]
 8001db0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001dc8:	7ebb      	ldrb	r3, [r7, #26]
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d112      	bne.n	8001df4 <HAL_I2C_ER_IRQHandler+0xda>
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10f      	bne.n	8001df4 <HAL_I2C_ER_IRQHandler+0xda>
 8001dd4:	7cfb      	ldrb	r3, [r7, #19]
 8001dd6:	2b21      	cmp	r3, #33	@ 0x21
 8001dd8:	d008      	beq.n	8001dec <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001dda:	7cfb      	ldrb	r3, [r7, #19]
 8001ddc:	2b29      	cmp	r3, #41	@ 0x29
 8001dde:	d005      	beq.n	8001dec <HAL_I2C_ER_IRQHandler+0xd2>
 8001de0:	7cfb      	ldrb	r3, [r7, #19]
 8001de2:	2b28      	cmp	r3, #40	@ 0x28
 8001de4:	d106      	bne.n	8001df4 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b21      	cmp	r3, #33	@ 0x21
 8001dea:	d103      	bne.n	8001df4 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f001 f871 	bl	8002ed4 <I2C_Slave_AF>
 8001df2:	e016      	b.n	8001e22 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001dfc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e06:	7efb      	ldrb	r3, [r7, #27]
 8001e08:	2b10      	cmp	r3, #16
 8001e0a:	d002      	beq.n	8001e12 <HAL_I2C_ER_IRQHandler+0xf8>
 8001e0c:	7efb      	ldrb	r3, [r7, #27]
 8001e0e:	2b40      	cmp	r3, #64	@ 0x40
 8001e10:	d107      	bne.n	8001e22 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e20:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00d      	beq.n	8001e48 <HAL_I2C_ER_IRQHandler+0x12e>
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d008      	beq.n	8001e48 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001e46:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f001 f8ae 	bl	8002fbc <I2C_ITError>
  }
}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	@ 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr

08001e9e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr

08001f12 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f20:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f28:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d150      	bne.n	8001fda <I2C_MasterTransmit_TXE+0xc8>
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	2b21      	cmp	r3, #33	@ 0x21
 8001f3c:	d14d      	bne.n	8001fda <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d01d      	beq.n	8001f80 <I2C_MasterTransmit_TXE+0x6e>
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d01a      	beq.n	8001f80 <I2C_MasterTransmit_TXE+0x6e>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f50:	d016      	beq.n	8001f80 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f60:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2211      	movs	r2, #17
 8001f66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff75 	bl	8001e68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f7e:	e060      	b.n	8002042 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f8e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f9e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b40      	cmp	r3, #64	@ 0x40
 8001fb8:	d107      	bne.n	8001fca <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ff8a 	bl	8001edc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001fc8:	e03b      	b.n	8002042 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ff48 	bl	8001e68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001fd8:	e033      	b.n	8002042 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	2b21      	cmp	r3, #33	@ 0x21
 8001fde:	d005      	beq.n	8001fec <I2C_MasterTransmit_TXE+0xda>
 8001fe0:	7bbb      	ldrb	r3, [r7, #14]
 8001fe2:	2b40      	cmp	r3, #64	@ 0x40
 8001fe4:	d12d      	bne.n	8002042 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	2b22      	cmp	r3, #34	@ 0x22
 8001fea:	d12a      	bne.n	8002042 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d108      	bne.n	8002008 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002004:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002006:	e01c      	b.n	8002042 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b40      	cmp	r3, #64	@ 0x40
 8002012:	d103      	bne.n	800201c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f88e 	bl	8002136 <I2C_MemoryTransmit_TXE_BTF>
}
 800201a:	e012      	b.n	8002042 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002020:	781a      	ldrb	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002040:	e7ff      	b.n	8002042 <I2C_MasterTransmit_TXE+0x130>
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002056:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b21      	cmp	r3, #33	@ 0x21
 8002062:	d164      	bne.n	800212e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d012      	beq.n	8002094 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b01      	subs	r3, #1
 800208c:	b29a      	uxth	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002092:	e04c      	b.n	800212e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b08      	cmp	r3, #8
 8002098:	d01d      	beq.n	80020d6 <I2C_MasterTransmit_BTF+0x8c>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b20      	cmp	r3, #32
 800209e:	d01a      	beq.n	80020d6 <I2C_MasterTransmit_BTF+0x8c>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020a6:	d016      	beq.n	80020d6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80020b6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2211      	movs	r2, #17
 80020bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff feca 	bl	8001e68 <HAL_I2C_MasterTxCpltCallback>
}
 80020d4:	e02b      	b.n	800212e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80020e4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020f4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b40      	cmp	r3, #64	@ 0x40
 800210e:	d107      	bne.n	8002120 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff fedf 	bl	8001edc <HAL_I2C_MemTxCpltCallback>
}
 800211e:	e006      	b.n	800212e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fe9d 	bl	8001e68 <HAL_I2C_MasterTxCpltCallback>
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002144:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11d      	bne.n	800218a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10b      	bne.n	800216e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215a:	b2da      	uxtb	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002166:	1c9a      	adds	r2, r3, #2
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800216c:	e077      	b.n	800225e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002172:	b29b      	uxth	r3, r3
 8002174:	121b      	asrs	r3, r3, #8
 8002176:	b2da      	uxtb	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002188:	e069      	b.n	800225e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800218e:	2b01      	cmp	r3, #1
 8002190:	d10b      	bne.n	80021aa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002196:	b2da      	uxtb	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80021a8:	e059      	b.n	800225e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d152      	bne.n	8002258 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b22      	cmp	r3, #34	@ 0x22
 80021b6:	d10d      	bne.n	80021d4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021c6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80021d2:	e044      	b.n	800225e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d015      	beq.n	800220a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	2b21      	cmp	r3, #33	@ 0x21
 80021e2:	d112      	bne.n	800220a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	781a      	ldrb	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002208:	e029      	b.n	800225e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d124      	bne.n	800225e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b21      	cmp	r3, #33	@ 0x21
 8002218:	d121      	bne.n	800225e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002228:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002238:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff fe43 	bl	8001edc <HAL_I2C_MemTxCpltCallback>
}
 8002256:	e002      	b.n	800225e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff fbf7 	bl	8001a4c <I2C_Flush_DR>
}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b084      	sub	sp, #16
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b22      	cmp	r3, #34	@ 0x22
 8002278:	f040 80b9 	bne.w	80023ee <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d921      	bls.n	80022d4 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2b03      	cmp	r3, #3
 80022be:	f040 8096 	bne.w	80023ee <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022d0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80022d2:	e08c      	b.n	80023ee <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d07f      	beq.n	80023dc <I2C_MasterReceive_RXNE+0x176>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d002      	beq.n	80022e8 <I2C_MasterReceive_RXNE+0x82>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d179      	bne.n	80023dc <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f001 f841 	bl	8003370 <I2C_WaitOnSTOPRequestThroughIT>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d14c      	bne.n	800238e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002302:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002312:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b40      	cmp	r3, #64	@ 0x40
 800234c:	d10a      	bne.n	8002364 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7fe f843 	bl	80003e8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002362:	e044      	b.n	80023ee <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b08      	cmp	r3, #8
 8002370:	d002      	beq.n	8002378 <I2C_MasterReceive_RXNE+0x112>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b20      	cmp	r3, #32
 8002376:	d103      	bne.n	8002380 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	631a      	str	r2, [r3, #48]	@ 0x30
 800237e:	e002      	b.n	8002386 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2212      	movs	r2, #18
 8002384:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fd77 	bl	8001e7a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800238c:	e02f      	b.n	80023ee <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800239c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff fd8a 	bl	8001eee <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80023da:	e008      	b.n	80023ee <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ea:	605a      	str	r2, [r3, #4]
}
 80023ec:	e7ff      	b.n	80023ee <I2C_MasterReceive_RXNE+0x188>
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b04      	cmp	r3, #4
 800240c:	d11b      	bne.n	8002446 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800241c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002444:	e0c4      	b.n	80025d0 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b03      	cmp	r3, #3
 800244e:	d129      	bne.n	80024a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800245e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b04      	cmp	r3, #4
 8002464:	d00a      	beq.n	800247c <I2C_MasterReceive_BTF+0x86>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d007      	beq.n	800247c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800247a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80024a2:	e095      	b.n	80025d0 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d17d      	bne.n	80025aa <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d002      	beq.n	80024ba <I2C_MasterReceive_BTF+0xc4>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d108      	bne.n	80024cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e016      	b.n	80024fa <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d002      	beq.n	80024d8 <I2C_MasterReceive_BTF+0xe2>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d108      	bne.n	80024ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e007      	b.n	80024fa <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002554:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b40      	cmp	r3, #64	@ 0x40
 8002568:	d10a      	bne.n	8002580 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7fd ff35 	bl	80003e8 <HAL_I2C_MemRxCpltCallback>
}
 800257e:	e027      	b.n	80025d0 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b08      	cmp	r3, #8
 800258c:	d002      	beq.n	8002594 <I2C_MasterReceive_BTF+0x19e>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b20      	cmp	r3, #32
 8002592:	d103      	bne.n	800259c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	631a      	str	r2, [r3, #48]	@ 0x30
 800259a:	e002      	b.n	80025a2 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2212      	movs	r2, #18
 80025a0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fc69 	bl	8001e7a <HAL_I2C_MasterRxCpltCallback>
}
 80025a8:	e012      	b.n	80025d0 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b40      	cmp	r3, #64	@ 0x40
 80025ea:	d117      	bne.n	800261c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002604:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002606:	e067      	b.n	80026d8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	b2da      	uxtb	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	611a      	str	r2, [r3, #16]
}
 800261a:	e05d      	b.n	80026d8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002624:	d133      	bne.n	800268e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b21      	cmp	r3, #33	@ 0x21
 8002630:	d109      	bne.n	8002646 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	b2db      	uxtb	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002642:	611a      	str	r2, [r3, #16]
 8002644:	e008      	b.n	8002658 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	b2da      	uxtb	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <I2C_Master_SB+0x92>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002666:	2b00      	cmp	r3, #0
 8002668:	d108      	bne.n	800267c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266e:	2b00      	cmp	r3, #0
 8002670:	d032      	beq.n	80026d8 <I2C_Master_SB+0x100>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02d      	beq.n	80026d8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800268a:	605a      	str	r2, [r3, #4]
}
 800268c:	e024      	b.n	80026d8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10e      	bne.n	80026b4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	b29b      	uxth	r3, r3
 800269c:	11db      	asrs	r3, r3, #7
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f003 0306 	and.w	r3, r3, #6
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f063 030f 	orn	r3, r3, #15
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	611a      	str	r2, [r3, #16]
}
 80026b2:	e011      	b.n	80026d8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d10d      	bne.n	80026d8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	11db      	asrs	r3, r3, #7
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f003 0306 	and.w	r3, r3, #6
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f063 030e 	orn	r3, r3, #14
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	611a      	str	r2, [r3, #16]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d004      	beq.n	8002708 <I2C_Master_ADD10+0x26>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d108      	bne.n	800271a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00c      	beq.n	800272a <I2C_Master_ADD10+0x48>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002728:	605a      	str	r2, [r3, #4]
  }
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002734:	b480      	push	{r7}
 8002736:	b091      	sub	sp, #68	@ 0x44
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002742:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002750:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b22      	cmp	r3, #34	@ 0x22
 800275c:	f040 8174 	bne.w	8002a48 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10f      	bne.n	8002788 <I2C_Master_ADDR+0x54>
 8002768:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800276c:	2b40      	cmp	r3, #64	@ 0x40
 800276e:	d10b      	bne.n	8002788 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002770:	2300      	movs	r3, #0
 8002772:	633b      	str	r3, [r7, #48]	@ 0x30
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	633b      	str	r3, [r7, #48]	@ 0x30
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	633b      	str	r3, [r7, #48]	@ 0x30
 8002784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002786:	e16b      	b.n	8002a60 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800278c:	2b00      	cmp	r3, #0
 800278e:	d11d      	bne.n	80027cc <I2C_Master_ADDR+0x98>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002798:	d118      	bne.n	80027cc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279a:	2300      	movs	r3, #0
 800279c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027be:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80027ca:	e149      	b.n	8002a60 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d113      	bne.n	80027fe <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d6:	2300      	movs	r3, #0
 80027d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e120      	b.n	8002a40 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b01      	cmp	r3, #1
 8002806:	f040 808a 	bne.w	800291e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800280a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800280c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002810:	d137      	bne.n	8002882 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002820:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800282c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002830:	d113      	bne.n	800285a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002840:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	e0f2      	b.n	8002a40 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	623b      	str	r3, [r7, #32]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	623b      	str	r3, [r7, #32]
 800286e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	e0de      	b.n	8002a40 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002884:	2b08      	cmp	r3, #8
 8002886:	d02e      	beq.n	80028e6 <I2C_Master_ADDR+0x1b2>
 8002888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800288a:	2b20      	cmp	r3, #32
 800288c:	d02b      	beq.n	80028e6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800288e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002890:	2b12      	cmp	r3, #18
 8002892:	d102      	bne.n	800289a <I2C_Master_ADDR+0x166>
 8002894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002896:	2b01      	cmp	r3, #1
 8002898:	d125      	bne.n	80028e6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800289a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800289c:	2b04      	cmp	r3, #4
 800289e:	d00e      	beq.n	80028be <I2C_Master_ADDR+0x18a>
 80028a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d00b      	beq.n	80028be <I2C_Master_ADDR+0x18a>
 80028a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a8:	2b10      	cmp	r3, #16
 80028aa:	d008      	beq.n	80028be <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e007      	b.n	80028ce <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	e0ac      	b.n	8002a40 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028f4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	61bb      	str	r3, [r7, #24]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e090      	b.n	8002a40 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d158      	bne.n	80029da <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292a:	2b04      	cmp	r3, #4
 800292c:	d021      	beq.n	8002972 <I2C_Master_ADDR+0x23e>
 800292e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002930:	2b02      	cmp	r3, #2
 8002932:	d01e      	beq.n	8002972 <I2C_Master_ADDR+0x23e>
 8002934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002936:	2b10      	cmp	r3, #16
 8002938:	d01b      	beq.n	8002972 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002948:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e012      	b.n	8002998 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002980:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029a6:	d14b      	bne.n	8002a40 <I2C_Master_ADDR+0x30c>
 80029a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029ae:	d00b      	beq.n	80029c8 <I2C_Master_ADDR+0x294>
 80029b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d008      	beq.n	80029c8 <I2C_Master_ADDR+0x294>
 80029b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d005      	beq.n	80029c8 <I2C_Master_ADDR+0x294>
 80029bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d002      	beq.n	80029c8 <I2C_Master_ADDR+0x294>
 80029c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	d13b      	bne.n	8002a40 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	e032      	b.n	8002a40 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029e8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029f8:	d117      	bne.n	8002a2a <I2C_Master_ADDR+0x2f6>
 80029fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a00:	d00b      	beq.n	8002a1a <I2C_Master_ADDR+0x2e6>
 8002a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d008      	beq.n	8002a1a <I2C_Master_ADDR+0x2e6>
 8002a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d005      	beq.n	8002a1a <I2C_Master_ADDR+0x2e6>
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d002      	beq.n	8002a1a <I2C_Master_ADDR+0x2e6>
 8002a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a16:	2b20      	cmp	r3, #32
 8002a18:	d107      	bne.n	8002a2a <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a28:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002a46:	e00b      	b.n	8002a60 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
}
 8002a5e:	e7ff      	b.n	8002a60 <I2C_Master_ADDR+0x32c>
 8002a60:	bf00      	nop
 8002a62:	3744      	adds	r7, #68	@ 0x44
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a78:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d02b      	beq.n	8002adc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d114      	bne.n	8002adc <I2C_SlaveTransmit_TXE+0x72>
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	2b29      	cmp	r3, #41	@ 0x29
 8002ab6:	d111      	bne.n	8002adc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ac6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2221      	movs	r2, #33	@ 0x21
 8002acc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2228      	movs	r2, #40	@ 0x28
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff f9d8 	bl	8001e8c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d011      	beq.n	8002b1a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b32:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d02c      	beq.n	8002b98 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d114      	bne.n	8002b98 <I2C_SlaveReceive_RXNE+0x74>
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b72:	d111      	bne.n	8002b98 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b82:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2222      	movs	r2, #34	@ 0x22
 8002b88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2228      	movs	r2, #40	@ 0x28
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff f983 	bl	8001e9e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d012      	beq.n	8002bd8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002bfc:	2b28      	cmp	r3, #40	@ 0x28
 8002bfe:	d125      	bne.n	8002c4c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c0e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d103      	bne.n	8002c30 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	81bb      	strh	r3, [r7, #12]
 8002c2e:	e002      	b.n	8002c36 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002c3e:	89ba      	ldrh	r2, [r7, #12]
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	4619      	mov	r1, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff f933 	bl	8001eb0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002c4a:	e00e      	b.n	8002c6a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c82:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c92:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cc0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ccc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cd0:	d172      	bne.n	8002db8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	2b22      	cmp	r3, #34	@ 0x22
 8002cd6:	d002      	beq.n	8002cde <I2C_Slave_STOPF+0x6a>
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cdc:	d135      	bne.n	8002d4a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe fbaa 	bl	8001470 <HAL_DMA_GetState>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d049      	beq.n	8002db6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d26:	4a69      	ldr	r2, [pc, #420]	@ (8002ecc <I2C_Slave_STOPF+0x258>)
 8002d28:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fa20 	bl	8001174 <HAL_DMA_Abort_IT>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d03d      	beq.n	8002db6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d44:	4610      	mov	r0, r2
 8002d46:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d48:	e035      	b.n	8002db6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	f043 0204 	orr.w	r2, r3, #4
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe fb74 	bl	8001470 <HAL_DMA_GetState>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d014      	beq.n	8002db8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d92:	4a4e      	ldr	r2, [pc, #312]	@ (8002ecc <I2C_Slave_STOPF+0x258>)
 8002d94:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe f9ea 	bl	8001174 <HAL_DMA_Abort_IT>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002db0:	4610      	mov	r0, r2
 8002db2:	4798      	blx	r3
 8002db4:	e000      	b.n	8002db8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002db6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d03e      	beq.n	8002e40 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d112      	bne.n	8002df6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e00:	2b40      	cmp	r3, #64	@ 0x40
 8002e02:	d112      	bne.n	8002e2a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	f043 0204 	orr.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f8b7 	bl	8002fbc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002e4e:	e039      	b.n	8002ec4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e54:	d109      	bne.n	8002e6a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2228      	movs	r2, #40	@ 0x28
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff f81a 	bl	8001e9e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b28      	cmp	r3, #40	@ 0x28
 8002e74:	d111      	bne.n	8002e9a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a15      	ldr	r2, [pc, #84]	@ (8002ed0 <I2C_Slave_STOPF+0x25c>)
 8002e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff f819 	bl	8001eca <HAL_I2C_ListenCpltCallback>
}
 8002e98:	e014      	b.n	8002ec4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	2b22      	cmp	r3, #34	@ 0x22
 8002ea0:	d002      	beq.n	8002ea8 <I2C_Slave_STOPF+0x234>
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
 8002ea4:	2b22      	cmp	r3, #34	@ 0x22
 8002ea6:	d10d      	bne.n	8002ec4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fe ffed 	bl	8001e9e <HAL_I2C_SlaveRxCpltCallback>
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	08003221 	.word	0x08003221
 8002ed0:	ffff0000 	.word	0xffff0000

08002ed4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d002      	beq.n	8002ef6 <I2C_Slave_AF+0x22>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d129      	bne.n	8002f4a <I2C_Slave_AF+0x76>
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	2b28      	cmp	r3, #40	@ 0x28
 8002efa:	d126      	bne.n	8002f4a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb8 <I2C_Slave_AF+0xe4>)
 8002f00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f10:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f1a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f2a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe ffc1 	bl	8001eca <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002f48:	e031      	b.n	8002fae <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	2b21      	cmp	r3, #33	@ 0x21
 8002f4e:	d129      	bne.n	8002fa4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a19      	ldr	r2, [pc, #100]	@ (8002fb8 <I2C_Slave_AF+0xe4>)
 8002f54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2221      	movs	r2, #33	@ 0x21
 8002f5a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f7a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f84:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f94:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fe fd58 	bl	8001a4c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7fe ff75 	bl	8001e8c <HAL_I2C_SlaveTxCpltCallback>
}
 8002fa2:	e004      	b.n	8002fae <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fac:	615a      	str	r2, [r3, #20]
}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	ffff0000 	.word	0xffff0000

08002fbc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fd2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fd4:	7bbb      	ldrb	r3, [r7, #14]
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d002      	beq.n	8002fe0 <I2C_ITError+0x24>
 8002fda:	7bbb      	ldrb	r3, [r7, #14]
 8002fdc:	2b40      	cmp	r3, #64	@ 0x40
 8002fde:	d10a      	bne.n	8002ff6 <I2C_ITError+0x3a>
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b22      	cmp	r3, #34	@ 0x22
 8002fe4:	d107      	bne.n	8002ff6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ffc:	2b28      	cmp	r3, #40	@ 0x28
 8002ffe:	d107      	bne.n	8003010 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2228      	movs	r2, #40	@ 0x28
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800300e:	e015      	b.n	800303c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800301a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800301e:	d00a      	beq.n	8003036 <I2C_ITError+0x7a>
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	2b60      	cmp	r3, #96	@ 0x60
 8003024:	d007      	beq.n	8003036 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003046:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800304a:	d162      	bne.n	8003112 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800305a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003060:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d020      	beq.n	80030ac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800306e:	4a6a      	ldr	r2, [pc, #424]	@ (8003218 <I2C_ITError+0x25c>)
 8003070:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe f87c 	bl	8001174 <HAL_DMA_Abort_IT>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8089 	beq.w	8003196 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030a6:	4610      	mov	r0, r2
 80030a8:	4798      	blx	r3
 80030aa:	e074      	b.n	8003196 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b0:	4a59      	ldr	r2, [pc, #356]	@ (8003218 <I2C_ITError+0x25c>)
 80030b2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fe f85b 	bl	8001174 <HAL_DMA_Abort_IT>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d068      	beq.n	8003196 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ce:	2b40      	cmp	r3, #64	@ 0x40
 80030d0:	d10b      	bne.n	80030ea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800310c:	4610      	mov	r0, r2
 800310e:	4798      	blx	r3
 8003110:	e041      	b.n	8003196 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b60      	cmp	r3, #96	@ 0x60
 800311c:	d125      	bne.n	800316a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003136:	2b40      	cmp	r3, #64	@ 0x40
 8003138:	d10b      	bne.n	8003152 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0201 	bic.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe fecc 	bl	8001f00 <HAL_I2C_AbortCpltCallback>
 8003168:	e015      	b.n	8003196 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003174:	2b40      	cmp	r3, #64	@ 0x40
 8003176:	d10b      	bne.n	8003190 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7fe feac 	bl	8001eee <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10e      	bne.n	80031c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d109      	bne.n	80031c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d104      	bne.n	80031c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031d2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031da:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d113      	bne.n	8003210 <I2C_ITError+0x254>
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2b28      	cmp	r3, #40	@ 0x28
 80031ec:	d110      	bne.n	8003210 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a0a      	ldr	r2, [pc, #40]	@ (800321c <I2C_ITError+0x260>)
 80031f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe fe5d 	bl	8001eca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	08003221 	.word	0x08003221
 800321c:	ffff0000 	.word	0xffff0000

08003220 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003238:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800323a:	4b4b      	ldr	r3, [pc, #300]	@ (8003368 <I2C_DMAAbort+0x148>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	08db      	lsrs	r3, r3, #3
 8003240:	4a4a      	ldr	r2, [pc, #296]	@ (800336c <I2C_DMAAbort+0x14c>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	0a1a      	lsrs	r2, r3, #8
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00da      	lsls	r2, r3, #3
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003266:	e00a      	b.n	800327e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3b01      	subs	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800327c:	d0ea      	beq.n	8003254 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800328a:	2200      	movs	r2, #0
 800328c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329a:	2200      	movs	r2, #0
 800329c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032c0:	2200      	movs	r2, #0
 80032c2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d0:	2200      	movs	r2, #0
 80032d2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b60      	cmp	r3, #96	@ 0x60
 80032ee:	d10e      	bne.n	800330e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2200      	movs	r2, #0
 8003304:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f7fe fdfa 	bl	8001f00 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800330c:	e027      	b.n	800335e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003314:	2b28      	cmp	r3, #40	@ 0x28
 8003316:	d117      	bne.n	8003348 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003336:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2228      	movs	r2, #40	@ 0x28
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003346:	e007      	b.n	8003358 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003358:	6978      	ldr	r0, [r7, #20]
 800335a:	f7fe fdc8 	bl	8001eee <HAL_I2C_ErrorCallback>
}
 800335e:	bf00      	nop
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000000 	.word	0x20000000
 800336c:	14f8b589 	.word	0x14f8b589

08003370 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800337c:	4b13      	ldr	r3, [pc, #76]	@ (80033cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	08db      	lsrs	r3, r3, #3
 8003382:	4a13      	ldr	r2, [pc, #76]	@ (80033d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	0a1a      	lsrs	r2, r3, #8
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	3b01      	subs	r3, #1
 8003396:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d107      	bne.n	80033ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	f043 0220 	orr.w	r2, r3, #32
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e008      	b.n	80033c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033bc:	d0e9      	beq.n	8003392 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000000 	.word	0x20000000
 80033d0:	14f8b589 	.word	0x14f8b589

080033d4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80033e4:	d103      	bne.n	80033ee <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80033ec:	e007      	b.n	80033fe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80033f6:	d102      	bne.n	80033fe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2208      	movs	r2, #8
 80033fc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e272      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8087 	beq.w	8003536 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003428:	4b92      	ldr	r3, [pc, #584]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b04      	cmp	r3, #4
 8003432:	d00c      	beq.n	800344e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003434:	4b8f      	ldr	r3, [pc, #572]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d112      	bne.n	8003466 <HAL_RCC_OscConfig+0x5e>
 8003440:	4b8c      	ldr	r3, [pc, #560]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800344c:	d10b      	bne.n	8003466 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344e:	4b89      	ldr	r3, [pc, #548]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d06c      	beq.n	8003534 <HAL_RCC_OscConfig+0x12c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d168      	bne.n	8003534 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e24c      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800346e:	d106      	bne.n	800347e <HAL_RCC_OscConfig+0x76>
 8003470:	4b80      	ldr	r3, [pc, #512]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a7f      	ldr	r2, [pc, #508]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	e02e      	b.n	80034dc <HAL_RCC_OscConfig+0xd4>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x98>
 8003486:	4b7b      	ldr	r3, [pc, #492]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a7a      	ldr	r2, [pc, #488]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 800348c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	4b78      	ldr	r3, [pc, #480]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a77      	ldr	r2, [pc, #476]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003498:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e01d      	b.n	80034dc <HAL_RCC_OscConfig+0xd4>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0xbc>
 80034aa:	4b72      	ldr	r3, [pc, #456]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a71      	ldr	r2, [pc, #452]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e00b      	b.n	80034dc <HAL_RCC_OscConfig+0xd4>
 80034c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b68      	ldr	r3, [pc, #416]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a67      	ldr	r2, [pc, #412]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fd fca2 	bl	8000e2c <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fd fc9e 	bl	8000e2c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	@ 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e200      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0xe4>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fd fc8e 	bl	8000e2c <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003514:	f7fd fc8a 	bl	8000e2c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	@ 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e1ec      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003526:	4b53      	ldr	r3, [pc, #332]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x10c>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d063      	beq.n	800360a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003542:	4b4c      	ldr	r3, [pc, #304]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800354e:	4b49      	ldr	r3, [pc, #292]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b08      	cmp	r3, #8
 8003558:	d11c      	bne.n	8003594 <HAL_RCC_OscConfig+0x18c>
 800355a:	4b46      	ldr	r3, [pc, #280]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d116      	bne.n	8003594 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	4b43      	ldr	r3, [pc, #268]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_RCC_OscConfig+0x176>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e1c0      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357e:	4b3d      	ldr	r3, [pc, #244]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4939      	ldr	r1, [pc, #228]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003592:	e03a      	b.n	800360a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800359c:	4b36      	ldr	r3, [pc, #216]	@ (8003678 <HAL_RCC_OscConfig+0x270>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7fd fc43 	bl	8000e2c <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035aa:	f7fd fc3f 	bl	8000e2c <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e1a1      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4927      	ldr	r1, [pc, #156]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
 80035dc:	e015      	b.n	800360a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035de:	4b26      	ldr	r3, [pc, #152]	@ (8003678 <HAL_RCC_OscConfig+0x270>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fd fc22 	bl	8000e2c <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ec:	f7fd fc1e 	bl	8000e2c <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e180      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d03a      	beq.n	800368c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d019      	beq.n	8003652 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361e:	4b17      	ldr	r3, [pc, #92]	@ (800367c <HAL_RCC_OscConfig+0x274>)
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003624:	f7fd fc02 	bl	8000e2c <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800362c:	f7fd fbfe 	bl	8000e2c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e160      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800363e:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <HAL_RCC_OscConfig+0x26c>)
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800364a:	2001      	movs	r0, #1
 800364c:	f000 fafe 	bl	8003c4c <RCC_Delay>
 8003650:	e01c      	b.n	800368c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003652:	4b0a      	ldr	r3, [pc, #40]	@ (800367c <HAL_RCC_OscConfig+0x274>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003658:	f7fd fbe8 	bl	8000e2c <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365e:	e00f      	b.n	8003680 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003660:	f7fd fbe4 	bl	8000e2c <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d908      	bls.n	8003680 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e146      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
 8003672:	bf00      	nop
 8003674:	40021000 	.word	0x40021000
 8003678:	42420000 	.word	0x42420000
 800367c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003680:	4b92      	ldr	r3, [pc, #584]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e9      	bne.n	8003660 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80a6 	beq.w	80037e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800369a:	2300      	movs	r3, #0
 800369c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369e:	4b8b      	ldr	r3, [pc, #556]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10d      	bne.n	80036c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036aa:	4b88      	ldr	r3, [pc, #544]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	4a87      	ldr	r2, [pc, #540]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	61d3      	str	r3, [r2, #28]
 80036b6:	4b85      	ldr	r3, [pc, #532]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c6:	4b82      	ldr	r3, [pc, #520]	@ (80038d0 <HAL_RCC_OscConfig+0x4c8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d118      	bne.n	8003704 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d2:	4b7f      	ldr	r3, [pc, #508]	@ (80038d0 <HAL_RCC_OscConfig+0x4c8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a7e      	ldr	r2, [pc, #504]	@ (80038d0 <HAL_RCC_OscConfig+0x4c8>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036de:	f7fd fba5 	bl	8000e2c <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e6:	f7fd fba1 	bl	8000e2c <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b64      	cmp	r3, #100	@ 0x64
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e103      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	4b75      	ldr	r3, [pc, #468]	@ (80038d0 <HAL_RCC_OscConfig+0x4c8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d106      	bne.n	800371a <HAL_RCC_OscConfig+0x312>
 800370c:	4b6f      	ldr	r3, [pc, #444]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4a6e      	ldr	r2, [pc, #440]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6213      	str	r3, [r2, #32]
 8003718:	e02d      	b.n	8003776 <HAL_RCC_OscConfig+0x36e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x334>
 8003722:	4b6a      	ldr	r3, [pc, #424]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	4a69      	ldr	r2, [pc, #420]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	6213      	str	r3, [r2, #32]
 800372e:	4b67      	ldr	r3, [pc, #412]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	4a66      	ldr	r2, [pc, #408]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003734:	f023 0304 	bic.w	r3, r3, #4
 8003738:	6213      	str	r3, [r2, #32]
 800373a:	e01c      	b.n	8003776 <HAL_RCC_OscConfig+0x36e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	2b05      	cmp	r3, #5
 8003742:	d10c      	bne.n	800375e <HAL_RCC_OscConfig+0x356>
 8003744:	4b61      	ldr	r3, [pc, #388]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	4a60      	ldr	r2, [pc, #384]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800374a:	f043 0304 	orr.w	r3, r3, #4
 800374e:	6213      	str	r3, [r2, #32]
 8003750:	4b5e      	ldr	r3, [pc, #376]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	4a5d      	ldr	r2, [pc, #372]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	6213      	str	r3, [r2, #32]
 800375c:	e00b      	b.n	8003776 <HAL_RCC_OscConfig+0x36e>
 800375e:	4b5b      	ldr	r3, [pc, #364]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4a5a      	ldr	r2, [pc, #360]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003764:	f023 0301 	bic.w	r3, r3, #1
 8003768:	6213      	str	r3, [r2, #32]
 800376a:	4b58      	ldr	r3, [pc, #352]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	4a57      	ldr	r2, [pc, #348]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003770:	f023 0304 	bic.w	r3, r3, #4
 8003774:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d015      	beq.n	80037aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377e:	f7fd fb55 	bl	8000e2c <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003784:	e00a      	b.n	800379c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7fd fb51 	bl	8000e2c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0b1      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379c:	4b4b      	ldr	r3, [pc, #300]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ee      	beq.n	8003786 <HAL_RCC_OscConfig+0x37e>
 80037a8:	e014      	b.n	80037d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037aa:	f7fd fb3f 	bl	8000e2c <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b0:	e00a      	b.n	80037c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b2:	f7fd fb3b 	bl	8000e2c <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e09b      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c8:	4b40      	ldr	r3, [pc, #256]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ee      	bne.n	80037b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d105      	bne.n	80037e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037da:	4b3c      	ldr	r3, [pc, #240]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	4a3b      	ldr	r2, [pc, #236]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8087 	beq.w	80038fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f0:	4b36      	ldr	r3, [pc, #216]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d061      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d146      	bne.n	8003892 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003804:	4b33      	ldr	r3, [pc, #204]	@ (80038d4 <HAL_RCC_OscConfig+0x4cc>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380a:	f7fd fb0f 	bl	8000e2c <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003812:	f7fd fb0b 	bl	8000e2c <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e06d      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003824:	4b29      	ldr	r3, [pc, #164]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f0      	bne.n	8003812 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003838:	d108      	bne.n	800384c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800383a:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	4921      	ldr	r1, [pc, #132]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800384c:	4b1f      	ldr	r3, [pc, #124]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a19      	ldr	r1, [r3, #32]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	430b      	orrs	r3, r1
 800385e:	491b      	ldr	r1, [pc, #108]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003864:	4b1b      	ldr	r3, [pc, #108]	@ (80038d4 <HAL_RCC_OscConfig+0x4cc>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386a:	f7fd fadf 	bl	8000e2c <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003872:	f7fd fadb 	bl	8000e2c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e03d      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003884:	4b11      	ldr	r3, [pc, #68]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x46a>
 8003890:	e035      	b.n	80038fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003892:	4b10      	ldr	r3, [pc, #64]	@ (80038d4 <HAL_RCC_OscConfig+0x4cc>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fd fac8 	bl	8000e2c <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fd fac4 	bl	8000e2c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e026      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b2:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x498>
 80038be:	e01e      	b.n	80038fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d107      	bne.n	80038d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e019      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40007000 	.word	0x40007000
 80038d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <HAL_RCC_OscConfig+0x500>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d001      	beq.n	80038fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	40021000 	.word	0x40021000

0800390c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0d0      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003920:	4b6a      	ldr	r3, [pc, #424]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d910      	bls.n	8003950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b67      	ldr	r3, [pc, #412]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 0207 	bic.w	r2, r3, #7
 8003936:	4965      	ldr	r1, [pc, #404]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b63      	ldr	r3, [pc, #396]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0b8      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d020      	beq.n	800399e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003968:	4b59      	ldr	r3, [pc, #356]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4a58      	ldr	r2, [pc, #352]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003972:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003980:	4b53      	ldr	r3, [pc, #332]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a52      	ldr	r2, [pc, #328]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800398a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398c:	4b50      	ldr	r3, [pc, #320]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	494d      	ldr	r1, [pc, #308]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d040      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b47      	ldr	r3, [pc, #284]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d115      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e07f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d107      	bne.n	80039da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ca:	4b41      	ldr	r3, [pc, #260]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e073      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039da:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e06b      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ea:	4b39      	ldr	r3, [pc, #228]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4936      	ldr	r1, [pc, #216]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039fc:	f7fd fa16 	bl	8000e2c <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a04:	f7fd fa12 	bl	8000e2c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e053      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 020c 	and.w	r2, r3, #12
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d1eb      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b27      	ldr	r3, [pc, #156]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d210      	bcs.n	8003a5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b24      	ldr	r3, [pc, #144]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 0207 	bic.w	r2, r3, #7
 8003a42:	4922      	ldr	r1, [pc, #136]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b20      	ldr	r3, [pc, #128]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e032      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a68:	4b19      	ldr	r3, [pc, #100]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4916      	ldr	r1, [pc, #88]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a86:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	490e      	ldr	r1, [pc, #56]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a9a:	f000 f821 	bl	8003ae0 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	490a      	ldr	r1, [pc, #40]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003aac:	5ccb      	ldrb	r3, [r1, r3]
 8003aae:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab2:	4a09      	ldr	r2, [pc, #36]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ab6:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <HAL_RCC_ClockConfig+0x1d0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fd f890 	bl	8000be0 <HAL_InitTick>

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40022000 	.word	0x40022000
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	08006b40 	.word	0x08006b40
 8003ad8:	20000000 	.word	0x20000000
 8003adc:	20000004 	.word	0x20000004

08003ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	2300      	movs	r3, #0
 8003af4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003afa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d002      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0x30>
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d003      	beq.n	8003b16 <HAL_RCC_GetSysClockFreq+0x36>
 8003b0e:	e027      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b10:	4b19      	ldr	r3, [pc, #100]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b12:	613b      	str	r3, [r7, #16]
      break;
 8003b14:	e027      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	0c9b      	lsrs	r3, r3, #18
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	4a17      	ldr	r2, [pc, #92]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b20:	5cd3      	ldrb	r3, [r2, r3]
 8003b22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d010      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b2e:	4b11      	ldr	r3, [pc, #68]	@ (8003b74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	0c5b      	lsrs	r3, r3, #17
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	4a11      	ldr	r2, [pc, #68]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b3a:	5cd3      	ldrb	r3, [r2, r3]
 8003b3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a0d      	ldr	r2, [pc, #52]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b42:	fb03 f202 	mul.w	r2, r3, r2
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	e004      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a0c      	ldr	r2, [pc, #48]	@ (8003b84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b54:	fb02 f303 	mul.w	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	613b      	str	r3, [r7, #16]
      break;
 8003b5e:	e002      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b62:	613b      	str	r3, [r7, #16]
      break;
 8003b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b66:	693b      	ldr	r3, [r7, #16]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	371c      	adds	r7, #28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000
 8003b78:	007a1200 	.word	0x007a1200
 8003b7c:	08006b58 	.word	0x08006b58
 8003b80:	08006b68 	.word	0x08006b68
 8003b84:	003d0900 	.word	0x003d0900

08003b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b8c:	4b02      	ldr	r3, [pc, #8]	@ (8003b98 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	20000000 	.word	0x20000000

08003b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ba0:	f7ff fff2 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	0a1b      	lsrs	r3, r3, #8
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	4903      	ldr	r1, [pc, #12]	@ (8003bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb2:	5ccb      	ldrb	r3, [r1, r3]
 8003bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	08006b50 	.word	0x08006b50

08003bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bc8:	f7ff ffde 	bl	8003b88 <HAL_RCC_GetHCLKFreq>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	0adb      	lsrs	r3, r3, #11
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	4903      	ldr	r1, [pc, #12]	@ (8003be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bda:	5ccb      	ldrb	r3, [r1, r3]
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021000 	.word	0x40021000
 8003be8:	08006b50 	.word	0x08006b50

08003bec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	220f      	movs	r2, #15
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bfc:	4b11      	ldr	r3, [pc, #68]	@ (8003c44 <HAL_RCC_GetClockConfig+0x58>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0203 	and.w	r2, r3, #3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c08:	4b0e      	ldr	r3, [pc, #56]	@ (8003c44 <HAL_RCC_GetClockConfig+0x58>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c14:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <HAL_RCC_GetClockConfig+0x58>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c20:	4b08      	ldr	r3, [pc, #32]	@ (8003c44 <HAL_RCC_GetClockConfig+0x58>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	08db      	lsrs	r3, r3, #3
 8003c26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c2e:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <HAL_RCC_GetClockConfig+0x5c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0207 	and.w	r2, r3, #7
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40022000 	.word	0x40022000

08003c4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c54:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <RCC_Delay+0x34>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a0a      	ldr	r2, [pc, #40]	@ (8003c84 <RCC_Delay+0x38>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	0a5b      	lsrs	r3, r3, #9
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c68:	bf00      	nop
  }
  while (Delay --);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1e5a      	subs	r2, r3, #1
 8003c6e:	60fa      	str	r2, [r7, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f9      	bne.n	8003c68 <RCC_Delay+0x1c>
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	20000000 	.word	0x20000000
 8003c84:	10624dd3 	.word	0x10624dd3

08003c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e041      	b.n	8003d1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f839 	bl	8003d26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f000 fa48 	bl	800415c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d001      	beq.n	8003d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e03a      	b.n	8003dc6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a18      	ldr	r2, [pc, #96]	@ (8003dd0 <HAL_TIM_Base_Start_IT+0x98>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00e      	beq.n	8003d90 <HAL_TIM_Base_Start_IT+0x58>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d7a:	d009      	beq.n	8003d90 <HAL_TIM_Base_Start_IT+0x58>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a14      	ldr	r2, [pc, #80]	@ (8003dd4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d004      	beq.n	8003d90 <HAL_TIM_Base_Start_IT+0x58>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a13      	ldr	r2, [pc, #76]	@ (8003dd8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d111      	bne.n	8003db4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b06      	cmp	r3, #6
 8003da0:	d010      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f042 0201 	orr.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db2:	e007      	b.n	8003dc4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	40000400 	.word	0x40000400
 8003dd8:	40000800 	.word	0x40000800

08003ddc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e041      	b.n	8003e72 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fc fe58 	bl	8000ab8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f000 f99e 	bl	800415c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d020      	beq.n	8003ede <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d01b      	beq.n	8003ede <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f06f 0202 	mvn.w	r2, #2
 8003eae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f92e 	bl	8004126 <HAL_TIM_IC_CaptureCallback>
 8003eca:	e005      	b.n	8003ed8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f921 	bl	8004114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f930 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d020      	beq.n	8003f2a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01b      	beq.n	8003f2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f06f 0204 	mvn.w	r2, #4
 8003efa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f908 	bl	8004126 <HAL_TIM_IC_CaptureCallback>
 8003f16:	e005      	b.n	8003f24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f8fb 	bl	8004114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f90a 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d020      	beq.n	8003f76 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01b      	beq.n	8003f76 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f06f 0208 	mvn.w	r2, #8
 8003f46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f8e2 	bl	8004126 <HAL_TIM_IC_CaptureCallback>
 8003f62:	e005      	b.n	8003f70 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f8d5 	bl	8004114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8e4 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d020      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d01b      	beq.n	8003fc2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f06f 0210 	mvn.w	r2, #16
 8003f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2208      	movs	r2, #8
 8003f98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f8bc 	bl	8004126 <HAL_TIM_IC_CaptureCallback>
 8003fae:	e005      	b.n	8003fbc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f8af 	bl	8004114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8be 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00c      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f06f 0201 	mvn.w	r2, #1
 8003fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7fc fc9f 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00c      	beq.n	800400a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d007      	beq.n	800400a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fb06 	bl	8004616 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00c      	beq.n	800402e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f88e 	bl	800414a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00c      	beq.n	8004052 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b00      	cmp	r3, #0
 8004040:	d007      	beq.n	8004052 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f06f 0220 	mvn.w	r2, #32
 800404a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fad9 	bl	8004604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004076:	2302      	movs	r3, #2
 8004078:	e048      	b.n	800410c <HAL_TIM_OC_ConfigChannel+0xb0>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b0c      	cmp	r3, #12
 8004086:	d839      	bhi.n	80040fc <HAL_TIM_OC_ConfigChannel+0xa0>
 8004088:	a201      	add	r2, pc, #4	@ (adr r2, 8004090 <HAL_TIM_OC_ConfigChannel+0x34>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040c5 	.word	0x080040c5
 8004094:	080040fd 	.word	0x080040fd
 8004098:	080040fd 	.word	0x080040fd
 800409c:	080040fd 	.word	0x080040fd
 80040a0:	080040d3 	.word	0x080040d3
 80040a4:	080040fd 	.word	0x080040fd
 80040a8:	080040fd 	.word	0x080040fd
 80040ac:	080040fd 	.word	0x080040fd
 80040b0:	080040e1 	.word	0x080040e1
 80040b4:	080040fd 	.word	0x080040fd
 80040b8:	080040fd 	.word	0x080040fd
 80040bc:	080040fd 	.word	0x080040fd
 80040c0:	080040ef 	.word	0x080040ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f8b4 	bl	8004238 <TIM_OC1_SetConfig>
      break;
 80040d0:	e017      	b.n	8004102 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 f913 	bl	8004304 <TIM_OC2_SetConfig>
      break;
 80040de:	e010      	b.n	8004102 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f976 	bl	80043d8 <TIM_OC3_SetConfig>
      break;
 80040ec:	e009      	b.n	8004102 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 f9d9 	bl	80044ac <TIM_OC4_SetConfig>
      break;
 80040fa:	e002      	b.n	8004102 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004100:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800410a:	7dfb      	ldrb	r3, [r7, #23]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr

08004126 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr

0800414a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a2f      	ldr	r2, [pc, #188]	@ (800422c <TIM_Base_SetConfig+0xd0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d00b      	beq.n	800418c <TIM_Base_SetConfig+0x30>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800417a:	d007      	beq.n	800418c <TIM_Base_SetConfig+0x30>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a2c      	ldr	r2, [pc, #176]	@ (8004230 <TIM_Base_SetConfig+0xd4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_Base_SetConfig+0x30>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a2b      	ldr	r2, [pc, #172]	@ (8004234 <TIM_Base_SetConfig+0xd8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d108      	bne.n	800419e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a22      	ldr	r2, [pc, #136]	@ (800422c <TIM_Base_SetConfig+0xd0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00b      	beq.n	80041be <TIM_Base_SetConfig+0x62>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ac:	d007      	beq.n	80041be <TIM_Base_SetConfig+0x62>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004230 <TIM_Base_SetConfig+0xd4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_Base_SetConfig+0x62>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004234 <TIM_Base_SetConfig+0xd8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d108      	bne.n	80041d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a0d      	ldr	r2, [pc, #52]	@ (800422c <TIM_Base_SetConfig+0xd0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d103      	bne.n	8004204 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f023 0201 	bic.w	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	611a      	str	r2, [r3, #16]
  }
}
 8004222:	bf00      	nop
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr
 800422c:	40012c00 	.word	0x40012c00
 8004230:	40000400 	.word	0x40000400
 8004234:	40000800 	.word	0x40000800

08004238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f023 0201 	bic.w	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0303 	bic.w	r3, r3, #3
 800426e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f023 0302 	bic.w	r3, r3, #2
 8004280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a1c      	ldr	r2, [pc, #112]	@ (8004300 <TIM_OC1_SetConfig+0xc8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d10c      	bne.n	80042ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f023 0308 	bic.w	r3, r3, #8
 800429a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f023 0304 	bic.w	r3, r3, #4
 80042ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a13      	ldr	r2, [pc, #76]	@ (8004300 <TIM_OC1_SetConfig+0xc8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d111      	bne.n	80042da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	621a      	str	r2, [r3, #32]
}
 80042f4:	bf00      	nop
 80042f6:	371c      	adds	r7, #28
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40012c00 	.word	0x40012c00

08004304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	f023 0210 	bic.w	r2, r3, #16
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800433a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	021b      	lsls	r3, r3, #8
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0320 	bic.w	r3, r3, #32
 800434e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a1d      	ldr	r2, [pc, #116]	@ (80043d4 <TIM_OC2_SetConfig+0xd0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d10d      	bne.n	8004380 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800436a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800437e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a14      	ldr	r2, [pc, #80]	@ (80043d4 <TIM_OC2_SetConfig+0xd0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d113      	bne.n	80043b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800438e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004396:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	621a      	str	r2, [r3, #32]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	40012c00 	.word	0x40012c00

080043d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0303 	bic.w	r3, r3, #3
 800440e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1d      	ldr	r2, [pc, #116]	@ (80044a8 <TIM_OC3_SetConfig+0xd0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d10d      	bne.n	8004452 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800443c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a14      	ldr	r2, [pc, #80]	@ (80044a8 <TIM_OC3_SetConfig+0xd0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d113      	bne.n	8004482 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	621a      	str	r2, [r3, #32]
}
 800449c:	bf00      	nop
 800449e:	371c      	adds	r7, #28
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40012c00 	.word	0x40012c00

080044ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	031b      	lsls	r3, r3, #12
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a0f      	ldr	r2, [pc, #60]	@ (8004544 <TIM_OC4_SetConfig+0x98>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d109      	bne.n	8004520 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	019b      	lsls	r3, r3, #6
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	621a      	str	r2, [r3, #32]
}
 800453a:	bf00      	nop
 800453c:	371c      	adds	r7, #28
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr
 8004544:	40012c00 	.word	0x40012c00

08004548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800455c:	2302      	movs	r3, #2
 800455e:	e046      	b.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a16      	ldr	r2, [pc, #88]	@ (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00e      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ac:	d009      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a12      	ldr	r2, [pc, #72]	@ (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d004      	beq.n	80045c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a10      	ldr	r2, [pc, #64]	@ (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d10c      	bne.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800

08004604 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr

08004616 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e04a      	b.n	80046d0 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fc fa7e 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2224      	movs	r2, #36	@ 0x24
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800466a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 fe8d 	bl	800538c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695a      	ldr	r2, [r3, #20]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004690:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695a      	ldr	r2, [r3, #20]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0208 	orr.w	r2, r2, #8
 80046a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08a      	sub	sp, #40	@ 0x28
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	4613      	mov	r3, r2
 80046e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d175      	bne.n	80047e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_UART_Transmit+0x2c>
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e06e      	b.n	80047e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2221      	movs	r2, #33	@ 0x21
 8004712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004716:	f7fc fb89 	bl	8000e2c <HAL_GetTick>
 800471a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	88fa      	ldrh	r2, [r7, #6]
 8004720:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	88fa      	ldrh	r2, [r7, #6]
 8004726:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004730:	d108      	bne.n	8004744 <HAL_UART_Transmit+0x6c>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d104      	bne.n	8004744 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800473a:	2300      	movs	r3, #0
 800473c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	e003      	b.n	800474c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800474c:	e02e      	b.n	80047ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2200      	movs	r2, #0
 8004756:	2180      	movs	r1, #128	@ 0x80
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fbea 	bl	8004f32 <UART_WaitOnFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e03a      	b.n	80047e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10b      	bne.n	800478e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004784:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	3302      	adds	r3, #2
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	e007      	b.n	800479e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	781a      	ldrb	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	3301      	adds	r3, #1
 800479c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1cb      	bne.n	800474e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2200      	movs	r2, #0
 80047be:	2140      	movs	r1, #64	@ 0x40
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 fbb6 	bl	8004f32 <UART_WaitOnFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e006      	b.n	80047e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e000      	b.n	80047e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
  }
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3720      	adds	r7, #32
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b08a      	sub	sp, #40	@ 0x28
 80047f2:	af02      	add	r7, sp, #8
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	603b      	str	r3, [r7, #0]
 80047fa:	4613      	mov	r3, r2
 80047fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b20      	cmp	r3, #32
 800480c:	f040 8081 	bne.w	8004912 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_UART_Receive+0x2e>
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e079      	b.n	8004914 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2222      	movs	r2, #34	@ 0x22
 800482a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004834:	f7fc fafa 	bl	8000e2c <HAL_GetTick>
 8004838:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	88fa      	ldrh	r2, [r7, #6]
 800483e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	88fa      	ldrh	r2, [r7, #6]
 8004844:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800484e:	d108      	bne.n	8004862 <HAL_UART_Receive+0x74>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d104      	bne.n	8004862 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004858:	2300      	movs	r3, #0
 800485a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	61bb      	str	r3, [r7, #24]
 8004860:	e003      	b.n	800486a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800486a:	e047      	b.n	80048fc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2200      	movs	r2, #0
 8004874:	2120      	movs	r1, #32
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 fb5b 	bl	8004f32 <UART_WaitOnFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d005      	beq.n	800488e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e042      	b.n	8004914 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10c      	bne.n	80048ae <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	b29b      	uxth	r3, r3
 800489c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	3302      	adds	r3, #2
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	e01f      	b.n	80048ee <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b6:	d007      	beq.n	80048c8 <HAL_UART_Receive+0xda>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <HAL_UART_Receive+0xe8>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	701a      	strb	r2, [r3, #0]
 80048d4:	e008      	b.n	80048e8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	3301      	adds	r3, #1
 80048ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1b2      	bne.n	800486c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004912:	2302      	movs	r3, #2
  }
}
 8004914:	4618      	mov	r0, r3
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08c      	sub	sp, #48	@ 0x30
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	4613      	mov	r3, r2
 8004928:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b20      	cmp	r3, #32
 8004934:	d14a      	bne.n	80049cc <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e043      	b.n	80049ce <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	461a      	mov	r2, r3
 8004956:	68b9      	ldr	r1, [r7, #8]
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 fb43 	bl	8004fe4 <UART_Start_Receive_IT>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004964:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004968:	2b00      	cmp	r3, #0
 800496a:	d12c      	bne.n	80049c6 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004970:	2b01      	cmp	r3, #1
 8004972:	d125      	bne.n	80049c0 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004974:	2300      	movs	r3, #0
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	617b      	str	r3, [r7, #20]
   return(result);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f043 0310 	orr.w	r3, r3, #16
 80049a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80049ac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	6a39      	ldr	r1, [r7, #32]
 80049b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e5      	bne.n	800498a <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80049be:	e002      	b.n	80049c6 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80049c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80049ca:	e000      	b.n	80049ce <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3730      	adds	r7, #48	@ 0x30
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b0ba      	sub	sp, #232	@ 0xe8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d009      	beq.n	8004a3e <HAL_UART_IRQHandler+0x66>
 8004a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fbea 	bl	8005210 <UART_Receive_IT>
      return;
 8004a3c:	e25b      	b.n	8004ef6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80de 	beq.w	8004c04 <HAL_UART_IRQHandler+0x22c>
 8004a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d106      	bne.n	8004a62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80d1 	beq.w	8004c04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00b      	beq.n	8004a86 <HAL_UART_IRQHandler+0xae>
 8004a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7e:	f043 0201 	orr.w	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <HAL_UART_IRQHandler+0xd2>
 8004a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d005      	beq.n	8004aaa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa2:	f043 0202 	orr.w	r2, r3, #2
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00b      	beq.n	8004ace <HAL_UART_IRQHandler+0xf6>
 8004ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac6:	f043 0204 	orr.w	r2, r3, #4
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d011      	beq.n	8004afe <HAL_UART_IRQHandler+0x126>
 8004ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d105      	bne.n	8004af2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af6:	f043 0208 	orr.w	r2, r3, #8
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 81f2 	beq.w	8004eec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_UART_IRQHandler+0x14e>
 8004b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fb75 	bl	8005210 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bf14      	ite	ne
 8004b34:	2301      	movne	r3, #1
 8004b36:	2300      	moveq	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d103      	bne.n	8004b52 <HAL_UART_IRQHandler+0x17a>
 8004b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d04f      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fa7f 	bl	8005056 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d041      	beq.n	8004bea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3314      	adds	r3, #20
 8004b6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3314      	adds	r3, #20
 8004b8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004baa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1d9      	bne.n	8004b66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d013      	beq.n	8004be2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bbe:	4a7e      	ldr	r2, [pc, #504]	@ (8004db8 <HAL_UART_IRQHandler+0x3e0>)
 8004bc0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fc fad4 	bl	8001174 <HAL_DMA_Abort_IT>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d016      	beq.n	8004c00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bdc:	4610      	mov	r0, r2
 8004bde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be0:	e00e      	b.n	8004c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f99c 	bl	8004f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be8:	e00a      	b.n	8004c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f998 	bl	8004f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf0:	e006      	b.n	8004c00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f994 	bl	8004f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004bfe:	e175      	b.n	8004eec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c00:	bf00      	nop
    return;
 8004c02:	e173      	b.n	8004eec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	f040 814f 	bne.w	8004eac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 8148 	beq.w	8004eac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8141 	beq.w	8004eac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 80b6 	beq.w	8004dbc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8145 	beq.w	8004ef0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	f080 813e 	bcs.w	8004ef0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	f000 8088 	beq.w	8004d98 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c96:	e853 3f00 	ldrex	r3, [r3]
 8004c9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ca2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ca6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	330c      	adds	r3, #12
 8004cb0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004cb4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004cc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ccc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1d9      	bne.n	8004c88 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3314      	adds	r3, #20
 8004cda:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ce4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3314      	adds	r3, #20
 8004cf4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004cf8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004cfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d00:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e1      	bne.n	8004cd4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3314      	adds	r3, #20
 8004d16:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3314      	adds	r3, #20
 8004d30:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d34:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d36:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d3a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e3      	bne.n	8004d10 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d68:	f023 0310 	bic.w	r3, r3, #16
 8004d6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	330c      	adds	r3, #12
 8004d76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d7a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d7c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d82:	e841 2300 	strex	r3, r2, [r1]
 8004d86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1e3      	bne.n	8004d56 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fc f9b2 	bl	80010fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	4619      	mov	r1, r3
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fb ffda 	bl	8000d68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004db4:	e09c      	b.n	8004ef0 <HAL_UART_IRQHandler+0x518>
 8004db6:	bf00      	nop
 8004db8:	0800511b 	.word	0x0800511b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 808e 	beq.w	8004ef4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004dd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8089 	beq.w	8004ef4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004df8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	330c      	adds	r3, #12
 8004e02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e06:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e3      	bne.n	8004de2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3314      	adds	r3, #20
 8004e20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	623b      	str	r3, [r7, #32]
   return(result);
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	f023 0301 	bic.w	r3, r3, #1
 8004e30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3314      	adds	r3, #20
 8004e3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e3      	bne.n	8004e1a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	330c      	adds	r3, #12
 8004e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0310 	bic.w	r3, r3, #16
 8004e76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e84:	61fa      	str	r2, [r7, #28]
 8004e86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	69b9      	ldr	r1, [r7, #24]
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	617b      	str	r3, [r7, #20]
   return(result);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e3      	bne.n	8004e60 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7fb ff5f 	bl	8000d68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004eaa:	e023      	b.n	8004ef4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d009      	beq.n	8004ecc <HAL_UART_IRQHandler+0x4f4>
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f93c 	bl	8005142 <UART_Transmit_IT>
    return;
 8004eca:	e014      	b.n	8004ef6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00e      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x51e>
 8004ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f97b 	bl	80051e0 <UART_EndTransmit_IT>
    return;
 8004eea:	e004      	b.n	8004ef6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004eec:	bf00      	nop
 8004eee:	e002      	b.n	8004ef6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ef0:	bf00      	nop
 8004ef2:	e000      	b.n	8004ef6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ef4:	bf00      	nop
  }
}
 8004ef6:	37e8      	adds	r7, #232	@ 0xe8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr

08004f0e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr

08004f32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b086      	sub	sp, #24
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f42:	e03b      	b.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d037      	beq.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4c:	f7fb ff6e 	bl	8000e2c <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	6a3a      	ldr	r2, [r7, #32]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d302      	bcc.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e03a      	b.n	8004fdc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d023      	beq.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2b80      	cmp	r3, #128	@ 0x80
 8004f78:	d020      	beq.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b40      	cmp	r3, #64	@ 0x40
 8004f7e:	d01d      	beq.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d116      	bne.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 f856 	bl	8005056 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2208      	movs	r2, #8
 8004fae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e00f      	b.n	8004fdc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	bf0c      	ite	eq
 8004fcc:	2301      	moveq	r3, #1
 8004fce:	2300      	movne	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d0b4      	beq.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	88fa      	ldrh	r2, [r7, #6]
 8005002:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2222      	movs	r2, #34	@ 0x22
 800500e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005028:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0201 	orr.w	r2, r2, #1
 8005038:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0220 	orr.w	r2, r2, #32
 8005048:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr

08005056 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005056:	b480      	push	{r7}
 8005058:	b095      	sub	sp, #84	@ 0x54
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	330c      	adds	r3, #12
 8005064:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800506e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005070:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	330c      	adds	r3, #12
 800507c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800507e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005080:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005084:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800508c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e5      	bne.n	800505e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3314      	adds	r3, #20
 8005098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3314      	adds	r3, #20
 80050b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e5      	bne.n	8005092 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d119      	bne.n	8005102 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	330c      	adds	r3, #12
 80050d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f023 0310 	bic.w	r3, r3, #16
 80050e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	330c      	adds	r3, #12
 80050ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050ee:	61ba      	str	r2, [r7, #24]
 80050f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	6979      	ldr	r1, [r7, #20]
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	613b      	str	r3, [r7, #16]
   return(result);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e5      	bne.n	80050ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005110:	bf00      	nop
 8005112:	3754      	adds	r7, #84	@ 0x54
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr

0800511a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005126:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff fef3 	bl	8004f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800513a:	bf00      	nop
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b21      	cmp	r3, #33	@ 0x21
 8005154:	d13e      	bne.n	80051d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800515e:	d114      	bne.n	800518a <UART_Transmit_IT+0x48>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d110      	bne.n	800518a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800517c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	1c9a      	adds	r2, r3, #2
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	621a      	str	r2, [r3, #32]
 8005188:	e008      	b.n	800519c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	1c59      	adds	r1, r3, #1
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6211      	str	r1, [r2, #32]
 8005194:	781a      	ldrb	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	4619      	mov	r1, r3
 80051aa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10f      	bne.n	80051d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e000      	b.n	80051d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051d4:	2302      	movs	r3, #2
  }
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff fe7b 	bl	8004efc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08c      	sub	sp, #48	@ 0x30
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b22      	cmp	r3, #34	@ 0x22
 8005222:	f040 80ae 	bne.w	8005382 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800522e:	d117      	bne.n	8005260 <UART_Receive_IT+0x50>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d113      	bne.n	8005260 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005238:	2300      	movs	r3, #0
 800523a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005240:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	b29b      	uxth	r3, r3
 800524a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524e:	b29a      	uxth	r2, r3
 8005250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005252:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	1c9a      	adds	r2, r3, #2
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	629a      	str	r2, [r3, #40]	@ 0x28
 800525e:	e026      	b.n	80052ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005264:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005266:	2300      	movs	r3, #0
 8005268:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005272:	d007      	beq.n	8005284 <UART_Receive_IT+0x74>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <UART_Receive_IT+0x82>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	b2da      	uxtb	r2, r3
 800528c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528e:	701a      	strb	r2, [r3, #0]
 8005290:	e008      	b.n	80052a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	4619      	mov	r1, r3
 80052bc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d15d      	bne.n	800537e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0220 	bic.w	r2, r2, #32
 80052d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0201 	bic.w	r2, r2, #1
 80052f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005304:	2b01      	cmp	r3, #1
 8005306:	d135      	bne.n	8005374 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	613b      	str	r3, [r7, #16]
   return(result);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	627b      	str	r3, [r7, #36]	@ 0x24
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800532e:	623a      	str	r2, [r7, #32]
 8005330:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	69f9      	ldr	r1, [r7, #28]
 8005334:	6a3a      	ldr	r2, [r7, #32]
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	61bb      	str	r3, [r7, #24]
   return(result);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e5      	bne.n	800530e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b10      	cmp	r3, #16
 800534e:	d10a      	bne.n	8005366 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7fb fcfb 	bl	8000d68 <HAL_UARTEx_RxEventCallback>
 8005372:	e002      	b.n	800537a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff fdca 	bl	8004f0e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e002      	b.n	8005384 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	e000      	b.n	8005384 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005382:	2302      	movs	r3, #2
  }
}
 8005384:	4618      	mov	r0, r3
 8005386:	3730      	adds	r7, #48	@ 0x30
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80053c6:	f023 030c 	bic.w	r3, r3, #12
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	430b      	orrs	r3, r1
 80053d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2c      	ldr	r2, [pc, #176]	@ (80054a0 <UART_SetConfig+0x114>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d103      	bne.n	80053fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053f4:	f7fe fbe6 	bl	8003bc4 <HAL_RCC_GetPCLK2Freq>
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	e002      	b.n	8005402 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053fc:	f7fe fbce 	bl	8003b9c <HAL_RCC_GetPCLK1Freq>
 8005400:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009a      	lsls	r2, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	fbb2 f3f3 	udiv	r3, r2, r3
 8005418:	4a22      	ldr	r2, [pc, #136]	@ (80054a4 <UART_SetConfig+0x118>)
 800541a:	fba2 2303 	umull	r2, r3, r2, r3
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	0119      	lsls	r1, r3, #4
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009a      	lsls	r2, r3, #2
 800542c:	441a      	add	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	fbb2 f2f3 	udiv	r2, r2, r3
 8005438:	4b1a      	ldr	r3, [pc, #104]	@ (80054a4 <UART_SetConfig+0x118>)
 800543a:	fba3 0302 	umull	r0, r3, r3, r2
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	2064      	movs	r0, #100	@ 0x64
 8005442:	fb00 f303 	mul.w	r3, r0, r3
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	3332      	adds	r3, #50	@ 0x32
 800544c:	4a15      	ldr	r2, [pc, #84]	@ (80054a4 <UART_SetConfig+0x118>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005458:	4419      	add	r1, r3
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009a      	lsls	r2, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005470:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <UART_SetConfig+0x118>)
 8005472:	fba3 0302 	umull	r0, r3, r3, r2
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2064      	movs	r0, #100	@ 0x64
 800547a:	fb00 f303 	mul.w	r3, r0, r3
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	3332      	adds	r3, #50	@ 0x32
 8005484:	4a07      	ldr	r2, [pc, #28]	@ (80054a4 <UART_SetConfig+0x118>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	f003 020f 	and.w	r2, r3, #15
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	440a      	add	r2, r1
 8005496:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005498:	bf00      	nop
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40013800 	.word	0x40013800
 80054a4:	51eb851f 	.word	0x51eb851f

080054a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80054b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ba:	2b84      	cmp	r3, #132	@ 0x84
 80054bc:	d005      	beq.n	80054ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80054be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4413      	add	r3, r2
 80054c6:	3303      	adds	r3, #3
 80054c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80054ca:	68fb      	ldr	r3, [r7, #12]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80054da:	f000 faf7 	bl	8005acc <vTaskStartScheduler>
  
  return osOK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80054e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e6:	b089      	sub	sp, #36	@ 0x24
 80054e8:	af04      	add	r7, sp, #16
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d020      	beq.n	8005538 <osThreadCreate+0x54>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01c      	beq.n	8005538 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685c      	ldr	r4, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691e      	ldr	r6, [r3, #16]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff ffc9 	bl	80054a8 <makeFreeRtosPriority>
 8005516:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005520:	9202      	str	r2, [sp, #8]
 8005522:	9301      	str	r3, [sp, #4]
 8005524:	9100      	str	r1, [sp, #0]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	4632      	mov	r2, r6
 800552a:	4629      	mov	r1, r5
 800552c:	4620      	mov	r0, r4
 800552e:	f000 f8e8 	bl	8005702 <xTaskCreateStatic>
 8005532:	4603      	mov	r3, r0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e01c      	b.n	8005572 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685c      	ldr	r4, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005544:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff ffab 	bl	80054a8 <makeFreeRtosPriority>
 8005552:	4602      	mov	r2, r0
 8005554:	f107 030c 	add.w	r3, r7, #12
 8005558:	9301      	str	r3, [sp, #4]
 800555a:	9200      	str	r2, [sp, #0]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	4632      	mov	r2, r6
 8005560:	4629      	mov	r1, r5
 8005562:	4620      	mov	r0, r4
 8005564:	f000 f92d 	bl	80057c2 <xTaskCreate>
 8005568:	4603      	mov	r3, r0
 800556a:	2b01      	cmp	r3, #1
 800556c:	d001      	beq.n	8005572 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	e000      	b.n	8005574 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005572:	68fb      	ldr	r3, [r7, #12]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800557c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <osDelay+0x16>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	e000      	b.n	8005594 <osDelay+0x18>
 8005592:	2301      	movs	r3, #1
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fa63 	bl	8005a60 <vTaskDelay>
  
  return osOK;
 800559a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f103 0208 	add.w	r2, r3, #8
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f04f 32ff 	mov.w	r2, #4294967295
 80055bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f103 0208 	add.w	r2, r3, #8
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f103 0208 	add.w	r2, r3, #8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr

080055e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc80      	pop	{r7}
 80055f8:	4770      	bx	lr

080055fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	601a      	str	r2, [r3, #0]
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005656:	d103      	bne.n	8005660 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e00c      	b.n	800567a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3308      	adds	r3, #8
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	e002      	b.n	800566e <vListInsert+0x2e>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	429a      	cmp	r2, r3
 8005678:	d2f6      	bcs.n	8005668 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	601a      	str	r2, [r3, #0]
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr

080056b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6892      	ldr	r2, [r2, #8]
 80056c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6852      	ldr	r2, [r2, #4]
 80056d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d103      	bne.n	80056e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	1e5a      	subs	r2, r3, #1
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr

08005702 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005702:	b580      	push	{r7, lr}
 8005704:	b08e      	sub	sp, #56	@ 0x38
 8005706:	af04      	add	r7, sp, #16
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10b      	bne.n	800572e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005728:	bf00      	nop
 800572a:	bf00      	nop
 800572c:	e7fd      	b.n	800572a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800572e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10b      	bne.n	800574c <xTaskCreateStatic+0x4a>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	61fb      	str	r3, [r7, #28]
}
 8005746:	bf00      	nop
 8005748:	bf00      	nop
 800574a:	e7fd      	b.n	8005748 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800574c:	23a0      	movs	r3, #160	@ 0xa0
 800574e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2ba0      	cmp	r3, #160	@ 0xa0
 8005754:	d00b      	beq.n	800576e <xTaskCreateStatic+0x6c>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	61bb      	str	r3, [r7, #24]
}
 8005768:	bf00      	nop
 800576a:	bf00      	nop
 800576c:	e7fd      	b.n	800576a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800576e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005772:	2b00      	cmp	r3, #0
 8005774:	d01e      	beq.n	80057b4 <xTaskCreateStatic+0xb2>
 8005776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01b      	beq.n	80057b4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800577c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005784:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	2202      	movs	r2, #2
 800578a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800578e:	2300      	movs	r3, #0
 8005790:	9303      	str	r3, [sp, #12]
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	9302      	str	r3, [sp, #8]
 8005796:	f107 0314 	add.w	r3, r7, #20
 800579a:	9301      	str	r3, [sp, #4]
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f850 	bl	800584c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057ae:	f000 f8ed 	bl	800598c <prvAddNewTaskToReadyList>
 80057b2:	e001      	b.n	80057b8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80057b4:	2300      	movs	r3, #0
 80057b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057b8:	697b      	ldr	r3, [r7, #20]
	}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3728      	adds	r7, #40	@ 0x28
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b08c      	sub	sp, #48	@ 0x30
 80057c6:	af04      	add	r7, sp, #16
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	603b      	str	r3, [r7, #0]
 80057ce:	4613      	mov	r3, r2
 80057d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fea2 	bl	8006520 <pvPortMalloc>
 80057dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00e      	beq.n	8005802 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057e4:	20a0      	movs	r0, #160	@ 0xa0
 80057e6:	f000 fe9b 	bl	8006520 <pvPortMalloc>
 80057ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80057f8:	e005      	b.n	8005806 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057fa:	6978      	ldr	r0, [r7, #20]
 80057fc:	f000 ff5e 	bl	80066bc <vPortFree>
 8005800:	e001      	b.n	8005806 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d017      	beq.n	800583c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005814:	88fa      	ldrh	r2, [r7, #6]
 8005816:	2300      	movs	r3, #0
 8005818:	9303      	str	r3, [sp, #12]
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	9302      	str	r3, [sp, #8]
 800581e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005820:	9301      	str	r3, [sp, #4]
 8005822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005824:	9300      	str	r3, [sp, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68b9      	ldr	r1, [r7, #8]
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 f80e 	bl	800584c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005830:	69f8      	ldr	r0, [r7, #28]
 8005832:	f000 f8ab 	bl	800598c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005836:	2301      	movs	r3, #1
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e002      	b.n	8005842 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800583c:	f04f 33ff 	mov.w	r3, #4294967295
 8005840:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005842:	69bb      	ldr	r3, [r7, #24]
	}
 8005844:	4618      	mov	r0, r3
 8005846:	3720      	adds	r7, #32
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005864:	3b01      	subs	r3, #1
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f023 0307 	bic.w	r3, r3, #7
 8005872:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	617b      	str	r3, [r7, #20]
}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	e7fd      	b.n	8005892 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01f      	beq.n	80058dc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800589c:	2300      	movs	r3, #0
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	e012      	b.n	80058c8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	7819      	ldrb	r1, [r3, #0]
 80058aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	4413      	add	r3, r2
 80058b0:	3334      	adds	r3, #52	@ 0x34
 80058b2:	460a      	mov	r2, r1
 80058b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	4413      	add	r3, r2
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d006      	beq.n	80058d0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3301      	adds	r3, #1
 80058c6:	61fb      	str	r3, [r7, #28]
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b0f      	cmp	r3, #15
 80058cc:	d9e9      	bls.n	80058a2 <prvInitialiseNewTask+0x56>
 80058ce:	e000      	b.n	80058d2 <prvInitialiseNewTask+0x86>
			{
				break;
 80058d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058da:	e003      	b.n	80058e4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	2b06      	cmp	r3, #6
 80058e8:	d901      	bls.n	80058ee <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058ea:	2306      	movs	r3, #6
 80058ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058f8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	2200      	movs	r2, #0
 80058fe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005902:	3304      	adds	r3, #4
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff fe6c 	bl	80055e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800590a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590c:	3318      	adds	r3, #24
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fe67 	bl	80055e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005918:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800591a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591c:	f1c3 0207 	rsb	r2, r3, #7
 8005920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005922:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005928:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	2200      	movs	r2, #0
 800592e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005934:	2200      	movs	r2, #0
 8005936:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800593a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593c:	334c      	adds	r3, #76	@ 0x4c
 800593e:	224c      	movs	r2, #76	@ 0x4c
 8005940:	2100      	movs	r1, #0
 8005942:	4618      	mov	r0, r3
 8005944:	f000 ffd8 	bl	80068f8 <memset>
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	4a0d      	ldr	r2, [pc, #52]	@ (8005980 <prvInitialiseNewTask+0x134>)
 800594c:	651a      	str	r2, [r3, #80]	@ 0x50
 800594e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005950:	4a0c      	ldr	r2, [pc, #48]	@ (8005984 <prvInitialiseNewTask+0x138>)
 8005952:	655a      	str	r2, [r3, #84]	@ 0x54
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	4a0c      	ldr	r2, [pc, #48]	@ (8005988 <prvInitialiseNewTask+0x13c>)
 8005958:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	68f9      	ldr	r1, [r7, #12]
 800595e:	69b8      	ldr	r0, [r7, #24]
 8005960:	f000 fc28 	bl	80061b4 <pxPortInitialiseStack>
 8005964:	4602      	mov	r2, r0
 8005966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005968:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800596a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005976:	bf00      	nop
 8005978:	3720      	adds	r7, #32
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20001a24 	.word	0x20001a24
 8005984:	20001a8c 	.word	0x20001a8c
 8005988:	20001af4 	.word	0x20001af4

0800598c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005994:	f000 fd02 	bl	800639c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005998:	4b2a      	ldr	r3, [pc, #168]	@ (8005a44 <prvAddNewTaskToReadyList+0xb8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3301      	adds	r3, #1
 800599e:	4a29      	ldr	r2, [pc, #164]	@ (8005a44 <prvAddNewTaskToReadyList+0xb8>)
 80059a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059a2:	4b29      	ldr	r3, [pc, #164]	@ (8005a48 <prvAddNewTaskToReadyList+0xbc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d109      	bne.n	80059be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059aa:	4a27      	ldr	r2, [pc, #156]	@ (8005a48 <prvAddNewTaskToReadyList+0xbc>)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059b0:	4b24      	ldr	r3, [pc, #144]	@ (8005a44 <prvAddNewTaskToReadyList+0xb8>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d110      	bne.n	80059da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059b8:	f000 fad2 	bl	8005f60 <prvInitialiseTaskLists>
 80059bc:	e00d      	b.n	80059da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059be:	4b23      	ldr	r3, [pc, #140]	@ (8005a4c <prvAddNewTaskToReadyList+0xc0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d109      	bne.n	80059da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059c6:	4b20      	ldr	r3, [pc, #128]	@ (8005a48 <prvAddNewTaskToReadyList+0xbc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d802      	bhi.n	80059da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a48 <prvAddNewTaskToReadyList+0xbc>)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059da:	4b1d      	ldr	r3, [pc, #116]	@ (8005a50 <prvAddNewTaskToReadyList+0xc4>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3301      	adds	r3, #1
 80059e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a50 <prvAddNewTaskToReadyList+0xc4>)
 80059e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e8:	2201      	movs	r2, #1
 80059ea:	409a      	lsls	r2, r3
 80059ec:	4b19      	ldr	r3, [pc, #100]	@ (8005a54 <prvAddNewTaskToReadyList+0xc8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	4a18      	ldr	r2, [pc, #96]	@ (8005a54 <prvAddNewTaskToReadyList+0xc8>)
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4a15      	ldr	r2, [pc, #84]	@ (8005a58 <prvAddNewTaskToReadyList+0xcc>)
 8005a04:	441a      	add	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	f7ff fdf4 	bl	80055fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a12:	f000 fcf3 	bl	80063fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a16:	4b0d      	ldr	r3, [pc, #52]	@ (8005a4c <prvAddNewTaskToReadyList+0xc0>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00e      	beq.n	8005a3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a48 <prvAddNewTaskToReadyList+0xbc>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d207      	bcs.n	8005a3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a5c <prvAddNewTaskToReadyList+0xd0>)
 8005a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a3c:	bf00      	nop
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	20000dd0 	.word	0x20000dd0
 8005a48:	20000cd0 	.word	0x20000cd0
 8005a4c:	20000ddc 	.word	0x20000ddc
 8005a50:	20000dec 	.word	0x20000dec
 8005a54:	20000dd8 	.word	0x20000dd8
 8005a58:	20000cd4 	.word	0x20000cd4
 8005a5c:	e000ed04 	.word	0xe000ed04

08005a60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d018      	beq.n	8005aa4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a72:	4b14      	ldr	r3, [pc, #80]	@ (8005ac4 <vTaskDelay+0x64>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00b      	beq.n	8005a92 <vTaskDelay+0x32>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	60bb      	str	r3, [r7, #8]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a92:	f000 f885 	bl	8005ba0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a96:	2100      	movs	r1, #0
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fb25 	bl	80060e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a9e:	f000 f88d 	bl	8005bbc <xTaskResumeAll>
 8005aa2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d107      	bne.n	8005aba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005aaa:	4b07      	ldr	r3, [pc, #28]	@ (8005ac8 <vTaskDelay+0x68>)
 8005aac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005aba:	bf00      	nop
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000df8 	.word	0x20000df8
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08a      	sub	sp, #40	@ 0x28
 8005ad0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ada:	463a      	mov	r2, r7
 8005adc:	1d39      	adds	r1, r7, #4
 8005ade:	f107 0308 	add.w	r3, r7, #8
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fa fcf2 	bl	80004cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	9202      	str	r2, [sp, #8]
 8005af0:	9301      	str	r3, [sp, #4]
 8005af2:	2300      	movs	r3, #0
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	2300      	movs	r3, #0
 8005af8:	460a      	mov	r2, r1
 8005afa:	4921      	ldr	r1, [pc, #132]	@ (8005b80 <vTaskStartScheduler+0xb4>)
 8005afc:	4821      	ldr	r0, [pc, #132]	@ (8005b84 <vTaskStartScheduler+0xb8>)
 8005afe:	f7ff fe00 	bl	8005702 <xTaskCreateStatic>
 8005b02:	4603      	mov	r3, r0
 8005b04:	4a20      	ldr	r2, [pc, #128]	@ (8005b88 <vTaskStartScheduler+0xbc>)
 8005b06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b08:	4b1f      	ldr	r3, [pc, #124]	@ (8005b88 <vTaskStartScheduler+0xbc>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b10:	2301      	movs	r3, #1
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	e001      	b.n	8005b1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d11b      	bne.n	8005b58 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	613b      	str	r3, [r7, #16]
}
 8005b32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b34:	4b15      	ldr	r3, [pc, #84]	@ (8005b8c <vTaskStartScheduler+0xc0>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	334c      	adds	r3, #76	@ 0x4c
 8005b3a:	4a15      	ldr	r2, [pc, #84]	@ (8005b90 <vTaskStartScheduler+0xc4>)
 8005b3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b3e:	4b15      	ldr	r3, [pc, #84]	@ (8005b94 <vTaskStartScheduler+0xc8>)
 8005b40:	f04f 32ff 	mov.w	r2, #4294967295
 8005b44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b46:	4b14      	ldr	r3, [pc, #80]	@ (8005b98 <vTaskStartScheduler+0xcc>)
 8005b48:	2201      	movs	r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b4c:	4b13      	ldr	r3, [pc, #76]	@ (8005b9c <vTaskStartScheduler+0xd0>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b52:	f000 fbb1 	bl	80062b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b56:	e00f      	b.n	8005b78 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d10b      	bne.n	8005b78 <vTaskStartScheduler+0xac>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	60fb      	str	r3, [r7, #12]
}
 8005b72:	bf00      	nop
 8005b74:	bf00      	nop
 8005b76:	e7fd      	b.n	8005b74 <vTaskStartScheduler+0xa8>
}
 8005b78:	bf00      	nop
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	08006b38 	.word	0x08006b38
 8005b84:	08005f31 	.word	0x08005f31
 8005b88:	20000df4 	.word	0x20000df4
 8005b8c:	20000cd0 	.word	0x20000cd0
 8005b90:	20000010 	.word	0x20000010
 8005b94:	20000df0 	.word	0x20000df0
 8005b98:	20000ddc 	.word	0x20000ddc
 8005b9c:	20000dd4 	.word	0x20000dd4

08005ba0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ba4:	4b04      	ldr	r3, [pc, #16]	@ (8005bb8 <vTaskSuspendAll+0x18>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	4a03      	ldr	r2, [pc, #12]	@ (8005bb8 <vTaskSuspendAll+0x18>)
 8005bac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bae:	bf00      	nop
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	20000df8 	.word	0x20000df8

08005bbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bca:	4b42      	ldr	r3, [pc, #264]	@ (8005cd4 <xTaskResumeAll+0x118>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10b      	bne.n	8005bea <xTaskResumeAll+0x2e>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	603b      	str	r3, [r7, #0]
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	e7fd      	b.n	8005be6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bea:	f000 fbd7 	bl	800639c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bee:	4b39      	ldr	r3, [pc, #228]	@ (8005cd4 <xTaskResumeAll+0x118>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	4a37      	ldr	r2, [pc, #220]	@ (8005cd4 <xTaskResumeAll+0x118>)
 8005bf6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bf8:	4b36      	ldr	r3, [pc, #216]	@ (8005cd4 <xTaskResumeAll+0x118>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d161      	bne.n	8005cc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c00:	4b35      	ldr	r3, [pc, #212]	@ (8005cd8 <xTaskResumeAll+0x11c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d05d      	beq.n	8005cc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c08:	e02e      	b.n	8005c68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c0a:	4b34      	ldr	r3, [pc, #208]	@ (8005cdc <xTaskResumeAll+0x120>)
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3318      	adds	r3, #24
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff fd4a 	bl	80056b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff fd45 	bl	80056b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce0 <xTaskResumeAll+0x124>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	4a2a      	ldr	r2, [pc, #168]	@ (8005ce0 <xTaskResumeAll+0x124>)
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4a27      	ldr	r2, [pc, #156]	@ (8005ce4 <xTaskResumeAll+0x128>)
 8005c46:	441a      	add	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f7ff fcd3 	bl	80055fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c58:	4b23      	ldr	r3, [pc, #140]	@ (8005ce8 <xTaskResumeAll+0x12c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d302      	bcc.n	8005c68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c62:	4b22      	ldr	r3, [pc, #136]	@ (8005cec <xTaskResumeAll+0x130>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c68:	4b1c      	ldr	r3, [pc, #112]	@ (8005cdc <xTaskResumeAll+0x120>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1cc      	bne.n	8005c0a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c76:	f000 fa17 	bl	80060a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8005cf0 <xTaskResumeAll+0x134>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d010      	beq.n	8005ca8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c86:	f000 f837 	bl	8005cf8 <xTaskIncrementTick>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c90:	4b16      	ldr	r3, [pc, #88]	@ (8005cec <xTaskResumeAll+0x130>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f1      	bne.n	8005c86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005ca2:	4b13      	ldr	r3, [pc, #76]	@ (8005cf0 <xTaskResumeAll+0x134>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ca8:	4b10      	ldr	r3, [pc, #64]	@ (8005cec <xTaskResumeAll+0x130>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d009      	beq.n	8005cc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8005cf4 <xTaskResumeAll+0x138>)
 8005cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cc4:	f000 fb9a 	bl	80063fc <vPortExitCritical>

	return xAlreadyYielded;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000df8 	.word	0x20000df8
 8005cd8:	20000dd0 	.word	0x20000dd0
 8005cdc:	20000d90 	.word	0x20000d90
 8005ce0:	20000dd8 	.word	0x20000dd8
 8005ce4:	20000cd4 	.word	0x20000cd4
 8005ce8:	20000cd0 	.word	0x20000cd0
 8005cec:	20000de4 	.word	0x20000de4
 8005cf0:	20000de0 	.word	0x20000de0
 8005cf4:	e000ed04 	.word	0xe000ed04

08005cf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d02:	4b4f      	ldr	r3, [pc, #316]	@ (8005e40 <xTaskIncrementTick+0x148>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f040 808f 	bne.w	8005e2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8005e44 <xTaskIncrementTick+0x14c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3301      	adds	r3, #1
 8005d12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d14:	4a4b      	ldr	r2, [pc, #300]	@ (8005e44 <xTaskIncrementTick+0x14c>)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d121      	bne.n	8005d64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d20:	4b49      	ldr	r3, [pc, #292]	@ (8005e48 <xTaskIncrementTick+0x150>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00b      	beq.n	8005d42 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	603b      	str	r3, [r7, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	e7fd      	b.n	8005d3e <xTaskIncrementTick+0x46>
 8005d42:	4b41      	ldr	r3, [pc, #260]	@ (8005e48 <xTaskIncrementTick+0x150>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	4b40      	ldr	r3, [pc, #256]	@ (8005e4c <xTaskIncrementTick+0x154>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e48 <xTaskIncrementTick+0x150>)
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	4a3e      	ldr	r2, [pc, #248]	@ (8005e4c <xTaskIncrementTick+0x154>)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	4b3e      	ldr	r3, [pc, #248]	@ (8005e50 <xTaskIncrementTick+0x158>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e50 <xTaskIncrementTick+0x158>)
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	f000 f9a2 	bl	80060a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d64:	4b3b      	ldr	r3, [pc, #236]	@ (8005e54 <xTaskIncrementTick+0x15c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d348      	bcc.n	8005e00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d6e:	4b36      	ldr	r3, [pc, #216]	@ (8005e48 <xTaskIncrementTick+0x150>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d104      	bne.n	8005d82 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d78:	4b36      	ldr	r3, [pc, #216]	@ (8005e54 <xTaskIncrementTick+0x15c>)
 8005d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7e:	601a      	str	r2, [r3, #0]
					break;
 8005d80:	e03e      	b.n	8005e00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d82:	4b31      	ldr	r3, [pc, #196]	@ (8005e48 <xTaskIncrementTick+0x150>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d203      	bcs.n	8005da2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d9a:	4a2e      	ldr	r2, [pc, #184]	@ (8005e54 <xTaskIncrementTick+0x15c>)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005da0:	e02e      	b.n	8005e00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	3304      	adds	r3, #4
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff fc82 	bl	80056b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	3318      	adds	r3, #24
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff fc79 	bl	80056b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	409a      	lsls	r2, r3
 8005dc6:	4b24      	ldr	r3, [pc, #144]	@ (8005e58 <xTaskIncrementTick+0x160>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	4a22      	ldr	r2, [pc, #136]	@ (8005e58 <xTaskIncrementTick+0x160>)
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8005e5c <xTaskIncrementTick+0x164>)
 8005dde:	441a      	add	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f7ff fc07 	bl	80055fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e60 <xTaskIncrementTick+0x168>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d3b9      	bcc.n	8005d6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dfe:	e7b6      	b.n	8005d6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e00:	4b17      	ldr	r3, [pc, #92]	@ (8005e60 <xTaskIncrementTick+0x168>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e06:	4915      	ldr	r1, [pc, #84]	@ (8005e5c <xTaskIncrementTick+0x164>)
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d901      	bls.n	8005e1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e1c:	4b11      	ldr	r3, [pc, #68]	@ (8005e64 <xTaskIncrementTick+0x16c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e24:	2301      	movs	r3, #1
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	e004      	b.n	8005e34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e68 <xTaskIncrementTick+0x170>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	4a0d      	ldr	r2, [pc, #52]	@ (8005e68 <xTaskIncrementTick+0x170>)
 8005e32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e34:	697b      	ldr	r3, [r7, #20]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000df8 	.word	0x20000df8
 8005e44:	20000dd4 	.word	0x20000dd4
 8005e48:	20000d88 	.word	0x20000d88
 8005e4c:	20000d8c 	.word	0x20000d8c
 8005e50:	20000de8 	.word	0x20000de8
 8005e54:	20000df0 	.word	0x20000df0
 8005e58:	20000dd8 	.word	0x20000dd8
 8005e5c:	20000cd4 	.word	0x20000cd4
 8005e60:	20000cd0 	.word	0x20000cd0
 8005e64:	20000de4 	.word	0x20000de4
 8005e68:	20000de0 	.word	0x20000de0

08005e6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e72:	4b29      	ldr	r3, [pc, #164]	@ (8005f18 <vTaskSwitchContext+0xac>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e7a:	4b28      	ldr	r3, [pc, #160]	@ (8005f1c <vTaskSwitchContext+0xb0>)
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e80:	e045      	b.n	8005f0e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005e82:	4b26      	ldr	r3, [pc, #152]	@ (8005f1c <vTaskSwitchContext+0xb0>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e88:	4b25      	ldr	r3, [pc, #148]	@ (8005f20 <vTaskSwitchContext+0xb4>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	fab3 f383 	clz	r3, r3
 8005e94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e96:	7afb      	ldrb	r3, [r7, #11]
 8005e98:	f1c3 031f 	rsb	r3, r3, #31
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	4921      	ldr	r1, [pc, #132]	@ (8005f24 <vTaskSwitchContext+0xb8>)
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	440b      	add	r3, r1
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10b      	bne.n	8005eca <vTaskSwitchContext+0x5e>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	607b      	str	r3, [r7, #4]
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	e7fd      	b.n	8005ec6 <vTaskSwitchContext+0x5a>
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4a13      	ldr	r2, [pc, #76]	@ (8005f24 <vTaskSwitchContext+0xb8>)
 8005ed6:	4413      	add	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	605a      	str	r2, [r3, #4]
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	3308      	adds	r3, #8
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d104      	bne.n	8005efa <vTaskSwitchContext+0x8e>
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	605a      	str	r2, [r3, #4]
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	4a09      	ldr	r2, [pc, #36]	@ (8005f28 <vTaskSwitchContext+0xbc>)
 8005f02:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f04:	4b08      	ldr	r3, [pc, #32]	@ (8005f28 <vTaskSwitchContext+0xbc>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	334c      	adds	r3, #76	@ 0x4c
 8005f0a:	4a08      	ldr	r2, [pc, #32]	@ (8005f2c <vTaskSwitchContext+0xc0>)
 8005f0c:	6013      	str	r3, [r2, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bc80      	pop	{r7}
 8005f16:	4770      	bx	lr
 8005f18:	20000df8 	.word	0x20000df8
 8005f1c:	20000de4 	.word	0x20000de4
 8005f20:	20000dd8 	.word	0x20000dd8
 8005f24:	20000cd4 	.word	0x20000cd4
 8005f28:	20000cd0 	.word	0x20000cd0
 8005f2c:	20000010 	.word	0x20000010

08005f30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f38:	f000 f852 	bl	8005fe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f3c:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <prvIdleTask+0x28>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d9f9      	bls.n	8005f38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f44:	4b05      	ldr	r3, [pc, #20]	@ (8005f5c <prvIdleTask+0x2c>)
 8005f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f54:	e7f0      	b.n	8005f38 <prvIdleTask+0x8>
 8005f56:	bf00      	nop
 8005f58:	20000cd4 	.word	0x20000cd4
 8005f5c:	e000ed04 	.word	0xe000ed04

08005f60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f66:	2300      	movs	r3, #0
 8005f68:	607b      	str	r3, [r7, #4]
 8005f6a:	e00c      	b.n	8005f86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4a12      	ldr	r2, [pc, #72]	@ (8005fc0 <prvInitialiseTaskLists+0x60>)
 8005f78:	4413      	add	r3, r2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff fb12 	bl	80055a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3301      	adds	r3, #1
 8005f84:	607b      	str	r3, [r7, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b06      	cmp	r3, #6
 8005f8a:	d9ef      	bls.n	8005f6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f8c:	480d      	ldr	r0, [pc, #52]	@ (8005fc4 <prvInitialiseTaskLists+0x64>)
 8005f8e:	f7ff fb09 	bl	80055a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f92:	480d      	ldr	r0, [pc, #52]	@ (8005fc8 <prvInitialiseTaskLists+0x68>)
 8005f94:	f7ff fb06 	bl	80055a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f98:	480c      	ldr	r0, [pc, #48]	@ (8005fcc <prvInitialiseTaskLists+0x6c>)
 8005f9a:	f7ff fb03 	bl	80055a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f9e:	480c      	ldr	r0, [pc, #48]	@ (8005fd0 <prvInitialiseTaskLists+0x70>)
 8005fa0:	f7ff fb00 	bl	80055a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005fa4:	480b      	ldr	r0, [pc, #44]	@ (8005fd4 <prvInitialiseTaskLists+0x74>)
 8005fa6:	f7ff fafd 	bl	80055a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005faa:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd8 <prvInitialiseTaskLists+0x78>)
 8005fac:	4a05      	ldr	r2, [pc, #20]	@ (8005fc4 <prvInitialiseTaskLists+0x64>)
 8005fae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fdc <prvInitialiseTaskLists+0x7c>)
 8005fb2:	4a05      	ldr	r2, [pc, #20]	@ (8005fc8 <prvInitialiseTaskLists+0x68>)
 8005fb4:	601a      	str	r2, [r3, #0]
}
 8005fb6:	bf00      	nop
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000cd4 	.word	0x20000cd4
 8005fc4:	20000d60 	.word	0x20000d60
 8005fc8:	20000d74 	.word	0x20000d74
 8005fcc:	20000d90 	.word	0x20000d90
 8005fd0:	20000da4 	.word	0x20000da4
 8005fd4:	20000dbc 	.word	0x20000dbc
 8005fd8:	20000d88 	.word	0x20000d88
 8005fdc:	20000d8c 	.word	0x20000d8c

08005fe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fe6:	e019      	b.n	800601c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fe8:	f000 f9d8 	bl	800639c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fec:	4b10      	ldr	r3, [pc, #64]	@ (8006030 <prvCheckTasksWaitingTermination+0x50>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff fb59 	bl	80056b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8006034 <prvCheckTasksWaitingTermination+0x54>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3b01      	subs	r3, #1
 8006004:	4a0b      	ldr	r2, [pc, #44]	@ (8006034 <prvCheckTasksWaitingTermination+0x54>)
 8006006:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006008:	4b0b      	ldr	r3, [pc, #44]	@ (8006038 <prvCheckTasksWaitingTermination+0x58>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3b01      	subs	r3, #1
 800600e:	4a0a      	ldr	r2, [pc, #40]	@ (8006038 <prvCheckTasksWaitingTermination+0x58>)
 8006010:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006012:	f000 f9f3 	bl	80063fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f810 	bl	800603c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800601c:	4b06      	ldr	r3, [pc, #24]	@ (8006038 <prvCheckTasksWaitingTermination+0x58>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e1      	bne.n	8005fe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20000da4 	.word	0x20000da4
 8006034:	20000dd0 	.word	0x20000dd0
 8006038:	20000db8 	.word	0x20000db8

0800603c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	334c      	adds	r3, #76	@ 0x4c
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fc5d 	bl	8006908 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006054:	2b00      	cmp	r3, #0
 8006056:	d108      	bne.n	800606a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fb2d 	bl	80066bc <vPortFree>
				vPortFree( pxTCB );
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fb2a 	bl	80066bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006068:	e019      	b.n	800609e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006070:	2b01      	cmp	r3, #1
 8006072:	d103      	bne.n	800607c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fb21 	bl	80066bc <vPortFree>
	}
 800607a:	e010      	b.n	800609e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006082:	2b02      	cmp	r3, #2
 8006084:	d00b      	beq.n	800609e <prvDeleteTCB+0x62>
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	60fb      	str	r3, [r7, #12]
}
 8006098:	bf00      	nop
 800609a:	bf00      	nop
 800609c:	e7fd      	b.n	800609a <prvDeleteTCB+0x5e>
	}
 800609e:	bf00      	nop
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ae:	4b0c      	ldr	r3, [pc, #48]	@ (80060e0 <prvResetNextTaskUnblockTime+0x38>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d104      	bne.n	80060c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80060b8:	4b0a      	ldr	r3, [pc, #40]	@ (80060e4 <prvResetNextTaskUnblockTime+0x3c>)
 80060ba:	f04f 32ff 	mov.w	r2, #4294967295
 80060be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80060c0:	e008      	b.n	80060d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c2:	4b07      	ldr	r3, [pc, #28]	@ (80060e0 <prvResetNextTaskUnblockTime+0x38>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	4a04      	ldr	r2, [pc, #16]	@ (80060e4 <prvResetNextTaskUnblockTime+0x3c>)
 80060d2:	6013      	str	r3, [r2, #0]
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	bc80      	pop	{r7}
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	20000d88 	.word	0x20000d88
 80060e4:	20000df0 	.word	0x20000df0

080060e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060f2:	4b29      	ldr	r3, [pc, #164]	@ (8006198 <prvAddCurrentTaskToDelayedList+0xb0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060f8:	4b28      	ldr	r3, [pc, #160]	@ (800619c <prvAddCurrentTaskToDelayedList+0xb4>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	3304      	adds	r3, #4
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff fad6 	bl	80056b0 <uxListRemove>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10b      	bne.n	8006122 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800610a:	4b24      	ldr	r3, [pc, #144]	@ (800619c <prvAddCurrentTaskToDelayedList+0xb4>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006110:	2201      	movs	r2, #1
 8006112:	fa02 f303 	lsl.w	r3, r2, r3
 8006116:	43da      	mvns	r2, r3
 8006118:	4b21      	ldr	r3, [pc, #132]	@ (80061a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4013      	ands	r3, r2
 800611e:	4a20      	ldr	r2, [pc, #128]	@ (80061a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006120:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d10a      	bne.n	8006140 <prvAddCurrentTaskToDelayedList+0x58>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d007      	beq.n	8006140 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006130:	4b1a      	ldr	r3, [pc, #104]	@ (800619c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3304      	adds	r3, #4
 8006136:	4619      	mov	r1, r3
 8006138:	481a      	ldr	r0, [pc, #104]	@ (80061a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800613a:	f7ff fa5e 	bl	80055fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800613e:	e026      	b.n	800618e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4413      	add	r3, r2
 8006146:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006148:	4b14      	ldr	r3, [pc, #80]	@ (800619c <prvAddCurrentTaskToDelayedList+0xb4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	429a      	cmp	r2, r3
 8006156:	d209      	bcs.n	800616c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006158:	4b13      	ldr	r3, [pc, #76]	@ (80061a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	4b0f      	ldr	r3, [pc, #60]	@ (800619c <prvAddCurrentTaskToDelayedList+0xb4>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3304      	adds	r3, #4
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f7ff fa6b 	bl	8005640 <vListInsert>
}
 800616a:	e010      	b.n	800618e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800616c:	4b0f      	ldr	r3, [pc, #60]	@ (80061ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b0a      	ldr	r3, [pc, #40]	@ (800619c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3304      	adds	r3, #4
 8006176:	4619      	mov	r1, r3
 8006178:	4610      	mov	r0, r2
 800617a:	f7ff fa61 	bl	8005640 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800617e:	4b0c      	ldr	r3, [pc, #48]	@ (80061b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	429a      	cmp	r2, r3
 8006186:	d202      	bcs.n	800618e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006188:	4a09      	ldr	r2, [pc, #36]	@ (80061b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6013      	str	r3, [r2, #0]
}
 800618e:	bf00      	nop
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20000dd4 	.word	0x20000dd4
 800619c:	20000cd0 	.word	0x20000cd0
 80061a0:	20000dd8 	.word	0x20000dd8
 80061a4:	20000dbc 	.word	0x20000dbc
 80061a8:	20000d8c 	.word	0x20000d8c
 80061ac:	20000d88 	.word	0x20000d88
 80061b0:	20000df0 	.word	0x20000df0

080061b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3b04      	subs	r3, #4
 80061c4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80061cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3b04      	subs	r3, #4
 80061d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f023 0201 	bic.w	r2, r3, #1
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3b04      	subs	r3, #4
 80061e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061e4:	4a08      	ldr	r2, [pc, #32]	@ (8006208 <pxPortInitialiseStack+0x54>)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3b14      	subs	r3, #20
 80061ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3b20      	subs	r3, #32
 80061fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061fc:	68fb      	ldr	r3, [r7, #12]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	bc80      	pop	{r7}
 8006206:	4770      	bx	lr
 8006208:	0800620d 	.word	0x0800620d

0800620c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006212:	2300      	movs	r3, #0
 8006214:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006216:	4b12      	ldr	r3, [pc, #72]	@ (8006260 <prvTaskExitError+0x54>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621e:	d00b      	beq.n	8006238 <prvTaskExitError+0x2c>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	60fb      	str	r3, [r7, #12]
}
 8006232:	bf00      	nop
 8006234:	bf00      	nop
 8006236:	e7fd      	b.n	8006234 <prvTaskExitError+0x28>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	60bb      	str	r3, [r7, #8]
}
 800624a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800624c:	bf00      	nop
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0fc      	beq.n	800624e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr
 8006260:	2000000c 	.word	0x2000000c
	...

08006270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006270:	4b07      	ldr	r3, [pc, #28]	@ (8006290 <pxCurrentTCBConst2>)
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	6808      	ldr	r0, [r1, #0]
 8006276:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800627a:	f380 8809 	msr	PSP, r0
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8811 	msr	BASEPRI, r0
 800628a:	f04e 0e0d 	orr.w	lr, lr, #13
 800628e:	4770      	bx	lr

08006290 <pxCurrentTCBConst2>:
 8006290:	20000cd0 	.word	0x20000cd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006298:	4806      	ldr	r0, [pc, #24]	@ (80062b4 <prvPortStartFirstTask+0x1c>)
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	6800      	ldr	r0, [r0, #0]
 800629e:	f380 8808 	msr	MSP, r0
 80062a2:	b662      	cpsie	i
 80062a4:	b661      	cpsie	f
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	df00      	svc	0
 80062b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062b2:	bf00      	nop
 80062b4:	e000ed08 	.word	0xe000ed08

080062b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062be:	4b32      	ldr	r3, [pc, #200]	@ (8006388 <xPortStartScheduler+0xd0>)
 80062c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	22ff      	movs	r2, #255	@ 0xff
 80062ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	4b2a      	ldr	r3, [pc, #168]	@ (800638c <xPortStartScheduler+0xd4>)
 80062e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006390 <xPortStartScheduler+0xd8>)
 80062e8:	2207      	movs	r2, #7
 80062ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062ec:	e009      	b.n	8006302 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80062ee:	4b28      	ldr	r3, [pc, #160]	@ (8006390 <xPortStartScheduler+0xd8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	4a26      	ldr	r2, [pc, #152]	@ (8006390 <xPortStartScheduler+0xd8>)
 80062f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062f8:	78fb      	ldrb	r3, [r7, #3]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006302:	78fb      	ldrb	r3, [r7, #3]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800630a:	2b80      	cmp	r3, #128	@ 0x80
 800630c:	d0ef      	beq.n	80062ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800630e:	4b20      	ldr	r3, [pc, #128]	@ (8006390 <xPortStartScheduler+0xd8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f1c3 0307 	rsb	r3, r3, #7
 8006316:	2b04      	cmp	r3, #4
 8006318:	d00b      	beq.n	8006332 <xPortStartScheduler+0x7a>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	60bb      	str	r3, [r7, #8]
}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	e7fd      	b.n	800632e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006332:	4b17      	ldr	r3, [pc, #92]	@ (8006390 <xPortStartScheduler+0xd8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	4a15      	ldr	r2, [pc, #84]	@ (8006390 <xPortStartScheduler+0xd8>)
 800633a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800633c:	4b14      	ldr	r3, [pc, #80]	@ (8006390 <xPortStartScheduler+0xd8>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006344:	4a12      	ldr	r2, [pc, #72]	@ (8006390 <xPortStartScheduler+0xd8>)
 8006346:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	b2da      	uxtb	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006350:	4b10      	ldr	r3, [pc, #64]	@ (8006394 <xPortStartScheduler+0xdc>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a0f      	ldr	r2, [pc, #60]	@ (8006394 <xPortStartScheduler+0xdc>)
 8006356:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800635a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800635c:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <xPortStartScheduler+0xdc>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a0c      	ldr	r2, [pc, #48]	@ (8006394 <xPortStartScheduler+0xdc>)
 8006362:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006366:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006368:	f000 f8b8 	bl	80064dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800636c:	4b0a      	ldr	r3, [pc, #40]	@ (8006398 <xPortStartScheduler+0xe0>)
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006372:	f7ff ff91 	bl	8006298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006376:	f7ff fd79 	bl	8005e6c <vTaskSwitchContext>
	prvTaskExitError();
 800637a:	f7ff ff47 	bl	800620c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	e000e400 	.word	0xe000e400
 800638c:	20000dfc 	.word	0x20000dfc
 8006390:	20000e00 	.word	0x20000e00
 8006394:	e000ed20 	.word	0xe000ed20
 8006398:	2000000c 	.word	0x2000000c

0800639c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	607b      	str	r3, [r7, #4]
}
 80063b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063b6:	4b0f      	ldr	r3, [pc, #60]	@ (80063f4 <vPortEnterCritical+0x58>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3301      	adds	r3, #1
 80063bc:	4a0d      	ldr	r2, [pc, #52]	@ (80063f4 <vPortEnterCritical+0x58>)
 80063be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063c0:	4b0c      	ldr	r3, [pc, #48]	@ (80063f4 <vPortEnterCritical+0x58>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d110      	bne.n	80063ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063c8:	4b0b      	ldr	r3, [pc, #44]	@ (80063f8 <vPortEnterCritical+0x5c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00b      	beq.n	80063ea <vPortEnterCritical+0x4e>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	603b      	str	r3, [r7, #0]
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop
 80063e8:	e7fd      	b.n	80063e6 <vPortEnterCritical+0x4a>
	}
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bc80      	pop	{r7}
 80063f2:	4770      	bx	lr
 80063f4:	2000000c 	.word	0x2000000c
 80063f8:	e000ed04 	.word	0xe000ed04

080063fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006402:	4b12      	ldr	r3, [pc, #72]	@ (800644c <vPortExitCritical+0x50>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10b      	bne.n	8006422 <vPortExitCritical+0x26>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	607b      	str	r3, [r7, #4]
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	e7fd      	b.n	800641e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006422:	4b0a      	ldr	r3, [pc, #40]	@ (800644c <vPortExitCritical+0x50>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3b01      	subs	r3, #1
 8006428:	4a08      	ldr	r2, [pc, #32]	@ (800644c <vPortExitCritical+0x50>)
 800642a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800642c:	4b07      	ldr	r3, [pc, #28]	@ (800644c <vPortExitCritical+0x50>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d105      	bne.n	8006440 <vPortExitCritical+0x44>
 8006434:	2300      	movs	r3, #0
 8006436:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800643e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	2000000c 	.word	0x2000000c

08006450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006450:	f3ef 8009 	mrs	r0, PSP
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	4b0d      	ldr	r3, [pc, #52]	@ (8006490 <pxCurrentTCBConst>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006460:	6010      	str	r0, [r2, #0]
 8006462:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006466:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800646a:	f380 8811 	msr	BASEPRI, r0
 800646e:	f7ff fcfd 	bl	8005e6c <vTaskSwitchContext>
 8006472:	f04f 0000 	mov.w	r0, #0
 8006476:	f380 8811 	msr	BASEPRI, r0
 800647a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800647e:	6819      	ldr	r1, [r3, #0]
 8006480:	6808      	ldr	r0, [r1, #0]
 8006482:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006486:	f380 8809 	msr	PSP, r0
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	4770      	bx	lr

08006490 <pxCurrentTCBConst>:
 8006490:	20000cd0 	.word	0x20000cd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop

08006498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	607b      	str	r3, [r7, #4]
}
 80064b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064b2:	f7ff fc21 	bl	8005cf8 <xTaskIncrementTick>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064bc:	4b06      	ldr	r3, [pc, #24]	@ (80064d8 <SysTick_Handler+0x40>)
 80064be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	2300      	movs	r3, #0
 80064c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	f383 8811 	msr	BASEPRI, r3
}
 80064ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	e000ed04 	.word	0xe000ed04

080064dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064e0:	4b0a      	ldr	r3, [pc, #40]	@ (800650c <vPortSetupTimerInterrupt+0x30>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006510 <vPortSetupTimerInterrupt+0x34>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064ec:	4b09      	ldr	r3, [pc, #36]	@ (8006514 <vPortSetupTimerInterrupt+0x38>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a09      	ldr	r2, [pc, #36]	@ (8006518 <vPortSetupTimerInterrupt+0x3c>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	099b      	lsrs	r3, r3, #6
 80064f8:	4a08      	ldr	r2, [pc, #32]	@ (800651c <vPortSetupTimerInterrupt+0x40>)
 80064fa:	3b01      	subs	r3, #1
 80064fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064fe:	4b03      	ldr	r3, [pc, #12]	@ (800650c <vPortSetupTimerInterrupt+0x30>)
 8006500:	2207      	movs	r2, #7
 8006502:	601a      	str	r2, [r3, #0]
}
 8006504:	bf00      	nop
 8006506:	46bd      	mov	sp, r7
 8006508:	bc80      	pop	{r7}
 800650a:	4770      	bx	lr
 800650c:	e000e010 	.word	0xe000e010
 8006510:	e000e018 	.word	0xe000e018
 8006514:	20000000 	.word	0x20000000
 8006518:	10624dd3 	.word	0x10624dd3
 800651c:	e000e014 	.word	0xe000e014

08006520 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08a      	sub	sp, #40	@ 0x28
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006528:	2300      	movs	r3, #0
 800652a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800652c:	f7ff fb38 	bl	8005ba0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006530:	4b5c      	ldr	r3, [pc, #368]	@ (80066a4 <pvPortMalloc+0x184>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006538:	f000 f924 	bl	8006784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800653c:	4b5a      	ldr	r3, [pc, #360]	@ (80066a8 <pvPortMalloc+0x188>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4013      	ands	r3, r2
 8006544:	2b00      	cmp	r3, #0
 8006546:	f040 8095 	bne.w	8006674 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01e      	beq.n	800658e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006550:	2208      	movs	r2, #8
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4413      	add	r3, r2
 8006556:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	2b00      	cmp	r3, #0
 8006560:	d015      	beq.n	800658e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f023 0307 	bic.w	r3, r3, #7
 8006568:	3308      	adds	r3, #8
 800656a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00b      	beq.n	800658e <pvPortMalloc+0x6e>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	617b      	str	r3, [r7, #20]
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	e7fd      	b.n	800658a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d06f      	beq.n	8006674 <pvPortMalloc+0x154>
 8006594:	4b45      	ldr	r3, [pc, #276]	@ (80066ac <pvPortMalloc+0x18c>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	429a      	cmp	r2, r3
 800659c:	d86a      	bhi.n	8006674 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800659e:	4b44      	ldr	r3, [pc, #272]	@ (80066b0 <pvPortMalloc+0x190>)
 80065a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065a2:	4b43      	ldr	r3, [pc, #268]	@ (80066b0 <pvPortMalloc+0x190>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065a8:	e004      	b.n	80065b4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d903      	bls.n	80065c6 <pvPortMalloc+0xa6>
 80065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1f1      	bne.n	80065aa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065c6:	4b37      	ldr	r3, [pc, #220]	@ (80066a4 <pvPortMalloc+0x184>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d051      	beq.n	8006674 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2208      	movs	r2, #8
 80065d6:	4413      	add	r3, r2
 80065d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	1ad2      	subs	r2, r2, r3
 80065ea:	2308      	movs	r3, #8
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d920      	bls.n	8006634 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4413      	add	r3, r2
 80065f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <pvPortMalloc+0xfc>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	613b      	str	r3, [r7, #16]
}
 8006616:	bf00      	nop
 8006618:	bf00      	nop
 800661a:	e7fd      	b.n	8006618 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	1ad2      	subs	r2, r2, r3
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800662e:	69b8      	ldr	r0, [r7, #24]
 8006630:	f000 f90a 	bl	8006848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006634:	4b1d      	ldr	r3, [pc, #116]	@ (80066ac <pvPortMalloc+0x18c>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	4a1b      	ldr	r2, [pc, #108]	@ (80066ac <pvPortMalloc+0x18c>)
 8006640:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006642:	4b1a      	ldr	r3, [pc, #104]	@ (80066ac <pvPortMalloc+0x18c>)
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4b1b      	ldr	r3, [pc, #108]	@ (80066b4 <pvPortMalloc+0x194>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d203      	bcs.n	8006656 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800664e:	4b17      	ldr	r3, [pc, #92]	@ (80066ac <pvPortMalloc+0x18c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a18      	ldr	r2, [pc, #96]	@ (80066b4 <pvPortMalloc+0x194>)
 8006654:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	4b13      	ldr	r3, [pc, #76]	@ (80066a8 <pvPortMalloc+0x188>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	431a      	orrs	r2, r3
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800666a:	4b13      	ldr	r3, [pc, #76]	@ (80066b8 <pvPortMalloc+0x198>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3301      	adds	r3, #1
 8006670:	4a11      	ldr	r2, [pc, #68]	@ (80066b8 <pvPortMalloc+0x198>)
 8006672:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006674:	f7ff faa2 	bl	8005bbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <pvPortMalloc+0x17a>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	60fb      	str	r3, [r7, #12]
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	e7fd      	b.n	8006696 <pvPortMalloc+0x176>
	return pvReturn;
 800669a:	69fb      	ldr	r3, [r7, #28]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3728      	adds	r7, #40	@ 0x28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	20001a0c 	.word	0x20001a0c
 80066a8:	20001a20 	.word	0x20001a20
 80066ac:	20001a10 	.word	0x20001a10
 80066b0:	20001a04 	.word	0x20001a04
 80066b4:	20001a14 	.word	0x20001a14
 80066b8:	20001a18 	.word	0x20001a18

080066bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d04f      	beq.n	800676e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066ce:	2308      	movs	r3, #8
 80066d0:	425b      	negs	r3, r3
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4413      	add	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	4b25      	ldr	r3, [pc, #148]	@ (8006778 <vPortFree+0xbc>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4013      	ands	r3, r2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10b      	bne.n	8006702 <vPortFree+0x46>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	60fb      	str	r3, [r7, #12]
}
 80066fc:	bf00      	nop
 80066fe:	bf00      	nop
 8006700:	e7fd      	b.n	80066fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00b      	beq.n	8006722 <vPortFree+0x66>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	60bb      	str	r3, [r7, #8]
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	e7fd      	b.n	800671e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	4b14      	ldr	r3, [pc, #80]	@ (8006778 <vPortFree+0xbc>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4013      	ands	r3, r2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d01e      	beq.n	800676e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d11a      	bne.n	800676e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	4b0e      	ldr	r3, [pc, #56]	@ (8006778 <vPortFree+0xbc>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	43db      	mvns	r3, r3
 8006742:	401a      	ands	r2, r3
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006748:	f7ff fa2a 	bl	8005ba0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	4b0a      	ldr	r3, [pc, #40]	@ (800677c <vPortFree+0xc0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4413      	add	r3, r2
 8006756:	4a09      	ldr	r2, [pc, #36]	@ (800677c <vPortFree+0xc0>)
 8006758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800675a:	6938      	ldr	r0, [r7, #16]
 800675c:	f000 f874 	bl	8006848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006760:	4b07      	ldr	r3, [pc, #28]	@ (8006780 <vPortFree+0xc4>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3301      	adds	r3, #1
 8006766:	4a06      	ldr	r2, [pc, #24]	@ (8006780 <vPortFree+0xc4>)
 8006768:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800676a:	f7ff fa27 	bl	8005bbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800676e:	bf00      	nop
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20001a20 	.word	0x20001a20
 800677c:	20001a10 	.word	0x20001a10
 8006780:	20001a1c 	.word	0x20001a1c

08006784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800678a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800678e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006790:	4b27      	ldr	r3, [pc, #156]	@ (8006830 <prvHeapInit+0xac>)
 8006792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00c      	beq.n	80067b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3307      	adds	r3, #7
 80067a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0307 	bic.w	r3, r3, #7
 80067aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006830 <prvHeapInit+0xac>)
 80067b4:	4413      	add	r3, r2
 80067b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006834 <prvHeapInit+0xb0>)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006834 <prvHeapInit+0xb0>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	4413      	add	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067d0:	2208      	movs	r2, #8
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1a9b      	subs	r3, r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0307 	bic.w	r3, r3, #7
 80067de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4a15      	ldr	r2, [pc, #84]	@ (8006838 <prvHeapInit+0xb4>)
 80067e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067e6:	4b14      	ldr	r3, [pc, #80]	@ (8006838 <prvHeapInit+0xb4>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2200      	movs	r2, #0
 80067ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067ee:	4b12      	ldr	r3, [pc, #72]	@ (8006838 <prvHeapInit+0xb4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	1ad2      	subs	r2, r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006804:	4b0c      	ldr	r3, [pc, #48]	@ (8006838 <prvHeapInit+0xb4>)
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	4a0a      	ldr	r2, [pc, #40]	@ (800683c <prvHeapInit+0xb8>)
 8006812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	4a09      	ldr	r2, [pc, #36]	@ (8006840 <prvHeapInit+0xbc>)
 800681a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800681c:	4b09      	ldr	r3, [pc, #36]	@ (8006844 <prvHeapInit+0xc0>)
 800681e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006822:	601a      	str	r2, [r3, #0]
}
 8006824:	bf00      	nop
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20000e04 	.word	0x20000e04
 8006834:	20001a04 	.word	0x20001a04
 8006838:	20001a0c 	.word	0x20001a0c
 800683c:	20001a14 	.word	0x20001a14
 8006840:	20001a10 	.word	0x20001a10
 8006844:	20001a20 	.word	0x20001a20

08006848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006850:	4b27      	ldr	r3, [pc, #156]	@ (80068f0 <prvInsertBlockIntoFreeList+0xa8>)
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e002      	b.n	800685c <prvInsertBlockIntoFreeList+0x14>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	429a      	cmp	r2, r3
 8006864:	d8f7      	bhi.n	8006856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	4413      	add	r3, r2
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	429a      	cmp	r2, r3
 8006876:	d108      	bne.n	800688a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	441a      	add	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	441a      	add	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d118      	bne.n	80068d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4b14      	ldr	r3, [pc, #80]	@ (80068f4 <prvInsertBlockIntoFreeList+0xac>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d00d      	beq.n	80068c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	441a      	add	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	e008      	b.n	80068d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068c6:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <prvInsertBlockIntoFreeList+0xac>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	e003      	b.n	80068d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d002      	beq.n	80068e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bc80      	pop	{r7}
 80068ee:	4770      	bx	lr
 80068f0:	20001a04 	.word	0x20001a04
 80068f4:	20001a0c 	.word	0x20001a0c

080068f8 <memset>:
 80068f8:	4603      	mov	r3, r0
 80068fa:	4402      	add	r2, r0
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d100      	bne.n	8006902 <memset+0xa>
 8006900:	4770      	bx	lr
 8006902:	f803 1b01 	strb.w	r1, [r3], #1
 8006906:	e7f9      	b.n	80068fc <memset+0x4>

08006908 <_reclaim_reent>:
 8006908:	4b29      	ldr	r3, [pc, #164]	@ (80069b0 <_reclaim_reent+0xa8>)
 800690a:	b570      	push	{r4, r5, r6, lr}
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4604      	mov	r4, r0
 8006910:	4283      	cmp	r3, r0
 8006912:	d04b      	beq.n	80069ac <_reclaim_reent+0xa4>
 8006914:	69c3      	ldr	r3, [r0, #28]
 8006916:	b1ab      	cbz	r3, 8006944 <_reclaim_reent+0x3c>
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	b16b      	cbz	r3, 8006938 <_reclaim_reent+0x30>
 800691c:	2500      	movs	r5, #0
 800691e:	69e3      	ldr	r3, [r4, #28]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	5959      	ldr	r1, [r3, r5]
 8006924:	2900      	cmp	r1, #0
 8006926:	d13b      	bne.n	80069a0 <_reclaim_reent+0x98>
 8006928:	3504      	adds	r5, #4
 800692a:	2d80      	cmp	r5, #128	@ 0x80
 800692c:	d1f7      	bne.n	800691e <_reclaim_reent+0x16>
 800692e:	69e3      	ldr	r3, [r4, #28]
 8006930:	4620      	mov	r0, r4
 8006932:	68d9      	ldr	r1, [r3, #12]
 8006934:	f000 f864 	bl	8006a00 <_free_r>
 8006938:	69e3      	ldr	r3, [r4, #28]
 800693a:	6819      	ldr	r1, [r3, #0]
 800693c:	b111      	cbz	r1, 8006944 <_reclaim_reent+0x3c>
 800693e:	4620      	mov	r0, r4
 8006940:	f000 f85e 	bl	8006a00 <_free_r>
 8006944:	6961      	ldr	r1, [r4, #20]
 8006946:	b111      	cbz	r1, 800694e <_reclaim_reent+0x46>
 8006948:	4620      	mov	r0, r4
 800694a:	f000 f859 	bl	8006a00 <_free_r>
 800694e:	69e1      	ldr	r1, [r4, #28]
 8006950:	b111      	cbz	r1, 8006958 <_reclaim_reent+0x50>
 8006952:	4620      	mov	r0, r4
 8006954:	f000 f854 	bl	8006a00 <_free_r>
 8006958:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800695a:	b111      	cbz	r1, 8006962 <_reclaim_reent+0x5a>
 800695c:	4620      	mov	r0, r4
 800695e:	f000 f84f 	bl	8006a00 <_free_r>
 8006962:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006964:	b111      	cbz	r1, 800696c <_reclaim_reent+0x64>
 8006966:	4620      	mov	r0, r4
 8006968:	f000 f84a 	bl	8006a00 <_free_r>
 800696c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800696e:	b111      	cbz	r1, 8006976 <_reclaim_reent+0x6e>
 8006970:	4620      	mov	r0, r4
 8006972:	f000 f845 	bl	8006a00 <_free_r>
 8006976:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006978:	b111      	cbz	r1, 8006980 <_reclaim_reent+0x78>
 800697a:	4620      	mov	r0, r4
 800697c:	f000 f840 	bl	8006a00 <_free_r>
 8006980:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006982:	b111      	cbz	r1, 800698a <_reclaim_reent+0x82>
 8006984:	4620      	mov	r0, r4
 8006986:	f000 f83b 	bl	8006a00 <_free_r>
 800698a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800698c:	b111      	cbz	r1, 8006994 <_reclaim_reent+0x8c>
 800698e:	4620      	mov	r0, r4
 8006990:	f000 f836 	bl	8006a00 <_free_r>
 8006994:	6a23      	ldr	r3, [r4, #32]
 8006996:	b14b      	cbz	r3, 80069ac <_reclaim_reent+0xa4>
 8006998:	4620      	mov	r0, r4
 800699a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800699e:	4718      	bx	r3
 80069a0:	680e      	ldr	r6, [r1, #0]
 80069a2:	4620      	mov	r0, r4
 80069a4:	f000 f82c 	bl	8006a00 <_free_r>
 80069a8:	4631      	mov	r1, r6
 80069aa:	e7bb      	b.n	8006924 <_reclaim_reent+0x1c>
 80069ac:	bd70      	pop	{r4, r5, r6, pc}
 80069ae:	bf00      	nop
 80069b0:	20000010 	.word	0x20000010

080069b4 <__libc_init_array>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	2600      	movs	r6, #0
 80069b8:	4d0c      	ldr	r5, [pc, #48]	@ (80069ec <__libc_init_array+0x38>)
 80069ba:	4c0d      	ldr	r4, [pc, #52]	@ (80069f0 <__libc_init_array+0x3c>)
 80069bc:	1b64      	subs	r4, r4, r5
 80069be:	10a4      	asrs	r4, r4, #2
 80069c0:	42a6      	cmp	r6, r4
 80069c2:	d109      	bne.n	80069d8 <__libc_init_array+0x24>
 80069c4:	f000 f870 	bl	8006aa8 <_init>
 80069c8:	2600      	movs	r6, #0
 80069ca:	4d0a      	ldr	r5, [pc, #40]	@ (80069f4 <__libc_init_array+0x40>)
 80069cc:	4c0a      	ldr	r4, [pc, #40]	@ (80069f8 <__libc_init_array+0x44>)
 80069ce:	1b64      	subs	r4, r4, r5
 80069d0:	10a4      	asrs	r4, r4, #2
 80069d2:	42a6      	cmp	r6, r4
 80069d4:	d105      	bne.n	80069e2 <__libc_init_array+0x2e>
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069dc:	4798      	blx	r3
 80069de:	3601      	adds	r6, #1
 80069e0:	e7ee      	b.n	80069c0 <__libc_init_array+0xc>
 80069e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e6:	4798      	blx	r3
 80069e8:	3601      	adds	r6, #1
 80069ea:	e7f2      	b.n	80069d2 <__libc_init_array+0x1e>
 80069ec:	08006b6c 	.word	0x08006b6c
 80069f0:	08006b6c 	.word	0x08006b6c
 80069f4:	08006b6c 	.word	0x08006b6c
 80069f8:	08006b70 	.word	0x08006b70

080069fc <__retarget_lock_acquire_recursive>:
 80069fc:	4770      	bx	lr

080069fe <__retarget_lock_release_recursive>:
 80069fe:	4770      	bx	lr

08006a00 <_free_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	4605      	mov	r5, r0
 8006a04:	2900      	cmp	r1, #0
 8006a06:	d040      	beq.n	8006a8a <_free_r+0x8a>
 8006a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a0c:	1f0c      	subs	r4, r1, #4
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	bfb8      	it	lt
 8006a12:	18e4      	addlt	r4, r4, r3
 8006a14:	f000 f83c 	bl	8006a90 <__malloc_lock>
 8006a18:	4a1c      	ldr	r2, [pc, #112]	@ (8006a8c <_free_r+0x8c>)
 8006a1a:	6813      	ldr	r3, [r2, #0]
 8006a1c:	b933      	cbnz	r3, 8006a2c <_free_r+0x2c>
 8006a1e:	6063      	str	r3, [r4, #4]
 8006a20:	6014      	str	r4, [r2, #0]
 8006a22:	4628      	mov	r0, r5
 8006a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a28:	f000 b838 	b.w	8006a9c <__malloc_unlock>
 8006a2c:	42a3      	cmp	r3, r4
 8006a2e:	d908      	bls.n	8006a42 <_free_r+0x42>
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	1821      	adds	r1, r4, r0
 8006a34:	428b      	cmp	r3, r1
 8006a36:	bf01      	itttt	eq
 8006a38:	6819      	ldreq	r1, [r3, #0]
 8006a3a:	685b      	ldreq	r3, [r3, #4]
 8006a3c:	1809      	addeq	r1, r1, r0
 8006a3e:	6021      	streq	r1, [r4, #0]
 8006a40:	e7ed      	b.n	8006a1e <_free_r+0x1e>
 8006a42:	461a      	mov	r2, r3
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	b10b      	cbz	r3, 8006a4c <_free_r+0x4c>
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d9fa      	bls.n	8006a42 <_free_r+0x42>
 8006a4c:	6811      	ldr	r1, [r2, #0]
 8006a4e:	1850      	adds	r0, r2, r1
 8006a50:	42a0      	cmp	r0, r4
 8006a52:	d10b      	bne.n	8006a6c <_free_r+0x6c>
 8006a54:	6820      	ldr	r0, [r4, #0]
 8006a56:	4401      	add	r1, r0
 8006a58:	1850      	adds	r0, r2, r1
 8006a5a:	4283      	cmp	r3, r0
 8006a5c:	6011      	str	r1, [r2, #0]
 8006a5e:	d1e0      	bne.n	8006a22 <_free_r+0x22>
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	4408      	add	r0, r1
 8006a66:	6010      	str	r0, [r2, #0]
 8006a68:	6053      	str	r3, [r2, #4]
 8006a6a:	e7da      	b.n	8006a22 <_free_r+0x22>
 8006a6c:	d902      	bls.n	8006a74 <_free_r+0x74>
 8006a6e:	230c      	movs	r3, #12
 8006a70:	602b      	str	r3, [r5, #0]
 8006a72:	e7d6      	b.n	8006a22 <_free_r+0x22>
 8006a74:	6820      	ldr	r0, [r4, #0]
 8006a76:	1821      	adds	r1, r4, r0
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	bf01      	itttt	eq
 8006a7c:	6819      	ldreq	r1, [r3, #0]
 8006a7e:	685b      	ldreq	r3, [r3, #4]
 8006a80:	1809      	addeq	r1, r1, r0
 8006a82:	6021      	streq	r1, [r4, #0]
 8006a84:	6063      	str	r3, [r4, #4]
 8006a86:	6054      	str	r4, [r2, #4]
 8006a88:	e7cb      	b.n	8006a22 <_free_r+0x22>
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	20001b60 	.word	0x20001b60

08006a90 <__malloc_lock>:
 8006a90:	4801      	ldr	r0, [pc, #4]	@ (8006a98 <__malloc_lock+0x8>)
 8006a92:	f7ff bfb3 	b.w	80069fc <__retarget_lock_acquire_recursive>
 8006a96:	bf00      	nop
 8006a98:	20001b5c 	.word	0x20001b5c

08006a9c <__malloc_unlock>:
 8006a9c:	4801      	ldr	r0, [pc, #4]	@ (8006aa4 <__malloc_unlock+0x8>)
 8006a9e:	f7ff bfae 	b.w	80069fe <__retarget_lock_release_recursive>
 8006aa2:	bf00      	nop
 8006aa4:	20001b5c 	.word	0x20001b5c

08006aa8 <_init>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	bf00      	nop
 8006aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aae:	bc08      	pop	{r3}
 8006ab0:	469e      	mov	lr, r3
 8006ab2:	4770      	bx	lr

08006ab4 <_fini>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	bf00      	nop
 8006ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aba:	bc08      	pop	{r3}
 8006abc:	469e      	mov	lr, r3
 8006abe:	4770      	bx	lr
