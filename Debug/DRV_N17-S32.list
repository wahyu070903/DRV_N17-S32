
DRV_N17-S32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006950  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006a60  08006a60  00007a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b0c  08006b0c  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  08006b0c  08006b0c  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b0c  08006b0c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b0c  08006b0c  00007b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b10  08006b10  00007b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006b14  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b04  20000060  08006b74  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b64  08006b74  00008b64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017040  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003578  00000000  00000000  0001f0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  00022648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff8  00000000  00000000  00023aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f92  00000000  00000000  00024aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001837b  00000000  00000000  0003ea32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009559d  00000000  00000000  00056dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec34a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057dc  00000000  00000000  000ec390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f1b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a48 	.word	0x08006a48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006a48 	.word	0x08006a48

08000150 <calcCRC>:

extern UART_HandleTypeDef huart1;

// this calc_crc code provided by datasheet
static void calcCRC (uint8_t *datagram, uint8_t datagramLength)
{
 8000150:	b480      	push	{r7}
 8000152:	b087      	sub	sp, #28
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	460b      	mov	r3, r1
 800015a:	70fb      	strb	r3, [r7, #3]
    int i,j;
    uint8_t *crc = datagram + (datagramLength - 1); // CRC located in last byte of message
 800015c:	78fb      	ldrb	r3, [r7, #3]
 800015e:	3b01      	subs	r3, #1
 8000160:	687a      	ldr	r2, [r7, #4]
 8000162:	4413      	add	r3, r2
 8000164:	60bb      	str	r3, [r7, #8]
    uint8_t currentByte;
    *crc = 0;
 8000166:	68bb      	ldr	r3, [r7, #8]
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (datagramLength - 1); i++) {    // Execute for all bytes of a message
 800016c:	2300      	movs	r3, #0
 800016e:	617b      	str	r3, [r7, #20]
 8000170:	e02e      	b.n	80001d0 <calcCRC+0x80>
        currentByte = datagram[i];                  // Retrieve a byte to be sent from Array
 8000172:	697b      	ldr	r3, [r7, #20]
 8000174:	687a      	ldr	r2, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	73fb      	strb	r3, [r7, #15]
        for (j = 0; j < 8; j++) {
 800017c:	2300      	movs	r3, #0
 800017e:	613b      	str	r3, [r7, #16]
 8000180:	e020      	b.n	80001c4 <calcCRC+0x74>
            if ((*crc >> 7) ^ (currentByte & 0x01)) // update CRC based result of XOR operation
 8000182:	68bb      	ldr	r3, [r7, #8]
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	09db      	lsrs	r3, r3, #7
 8000188:	b2db      	uxtb	r3, r3
 800018a:	461a      	mov	r2, r3
 800018c:	7bfb      	ldrb	r3, [r7, #15]
 800018e:	f003 0301 	and.w	r3, r3, #1
 8000192:	429a      	cmp	r2, r3
 8000194:	d00a      	beq.n	80001ac <calcCRC+0x5c>
                *crc = (*crc << 1) ^ 0x07;
 8000196:	68bb      	ldr	r3, [r7, #8]
 8000198:	781b      	ldrb	r3, [r3, #0]
 800019a:	005b      	lsls	r3, r3, #1
 800019c:	b25b      	sxtb	r3, r3
 800019e:	f083 0307 	eor.w	r3, r3, #7
 80001a2:	b25b      	sxtb	r3, r3
 80001a4:	b2da      	uxtb	r2, r3
 80001a6:	68bb      	ldr	r3, [r7, #8]
 80001a8:	701a      	strb	r2, [r3, #0]
 80001aa:	e005      	b.n	80001b8 <calcCRC+0x68>
            else
                *crc = (*crc << 1);
 80001ac:	68bb      	ldr	r3, [r7, #8]
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	005b      	lsls	r3, r3, #1
 80001b2:	b2da      	uxtb	r2, r3
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	701a      	strb	r2, [r3, #0]
            currentByte = currentByte >> 1;
 80001b8:	7bfb      	ldrb	r3, [r7, #15]
 80001ba:	085b      	lsrs	r3, r3, #1
 80001bc:	73fb      	strb	r3, [r7, #15]
        for (j = 0; j < 8; j++) {
 80001be:	693b      	ldr	r3, [r7, #16]
 80001c0:	3301      	adds	r3, #1
 80001c2:	613b      	str	r3, [r7, #16]
 80001c4:	693b      	ldr	r3, [r7, #16]
 80001c6:	2b07      	cmp	r3, #7
 80001c8:	dddb      	ble.n	8000182 <calcCRC+0x32>
    for (i = 0; i < (datagramLength - 1); i++) {    // Execute for all bytes of a message
 80001ca:	697b      	ldr	r3, [r7, #20]
 80001cc:	3301      	adds	r3, #1
 80001ce:	617b      	str	r3, [r7, #20]
 80001d0:	78fb      	ldrb	r3, [r7, #3]
 80001d2:	3b01      	subs	r3, #1
 80001d4:	697a      	ldr	r2, [r7, #20]
 80001d6:	429a      	cmp	r2, r3
 80001d8:	dbcb      	blt.n	8000172 <calcCRC+0x22>
        } // for CRC bit
    }
}
 80001da:	bf00      	nop
 80001dc:	bf00      	nop
 80001de:	371c      	adds	r7, #28
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
	...

080001e8 <DRV_ReadRegister>:
	temp = data[1];
	data[1] = data[2];
	data[2] = temp;
}

HAL_StatusTypeDef DRV_ReadRegister(uint8_t reg, uint32_t* value){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
	uint8_t request[4];
	request[0] = 0x05;  // Slave Address (Default 0x05)
 80001f4:	2305      	movs	r3, #5
 80001f6:	743b      	strb	r3, [r7, #16]
	request[1] = 0x00;
 80001f8:	2300      	movs	r3, #0
 80001fa:	747b      	strb	r3, [r7, #17]
	request[2] = reg & 0x7F;  // Read command
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000202:	b2db      	uxtb	r3, r3
 8000204:	74bb      	strb	r3, [r7, #18]
	calcCRC(request, 4);
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	2104      	movs	r1, #4
 800020c:	4618      	mov	r0, r3
 800020e:	f7ff ff9f 	bl	8000150 <calcCRC>

	//HAL_HalfDuplex_EnableTransmitter(&huart1);
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, request, 4, 500);
 8000212:	f107 0110 	add.w	r1, r7, #16
 8000216:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800021a:	2204      	movs	r2, #4
 800021c:	4816      	ldr	r0, [pc, #88]	@ (8000278 <DRV_ReadRegister+0x90>)
 800021e:	f004 fa2f 	bl	8004680 <HAL_UART_Transmit>
 8000222:	4603      	mov	r3, r0
 8000224:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8000226:	7dfb      	ldrb	r3, [r7, #23]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <DRV_ReadRegister+0x48>
 800022c:	7dfb      	ldrb	r3, [r7, #23]
 800022e:	e01f      	b.n	8000270 <DRV_ReadRegister+0x88>

	HAL_Delay(2);
 8000230:	2002      	movs	r0, #2
 8000232:	f000 fdd9 	bl	8000de8 <HAL_Delay>

	//HAL_HalfDuplex_EnableReceiver(&huart1);
	uint8_t response[8];
	status = HAL_UART_Receive(&huart1, response, 8, 500);
 8000236:	f107 0108 	add.w	r1, r7, #8
 800023a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800023e:	2208      	movs	r2, #8
 8000240:	480d      	ldr	r0, [pc, #52]	@ (8000278 <DRV_ReadRegister+0x90>)
 8000242:	f004 faa8 	bl	8004796 <HAL_UART_Receive>
 8000246:	4603      	mov	r3, r0
 8000248:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 800024a:	7dfb      	ldrb	r3, [r7, #23]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <DRV_ReadRegister+0x6c>
 8000250:	7dfb      	ldrb	r3, [r7, #23]
 8000252:	e00d      	b.n	8000270 <DRV_ReadRegister+0x88>

	*value = (response[4] << 24) | (response[5] << 16) | (response[6] << 8) | response[7];
 8000254:	7b3b      	ldrb	r3, [r7, #12]
 8000256:	061a      	lsls	r2, r3, #24
 8000258:	7b7b      	ldrb	r3, [r7, #13]
 800025a:	041b      	lsls	r3, r3, #16
 800025c:	431a      	orrs	r2, r3
 800025e:	7bbb      	ldrb	r3, [r7, #14]
 8000260:	021b      	lsls	r3, r3, #8
 8000262:	4313      	orrs	r3, r2
 8000264:	7bfa      	ldrb	r2, [r7, #15]
 8000266:	4313      	orrs	r3, r2
 8000268:	461a      	mov	r2, r3
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	601a      	str	r2, [r3, #0]
	return HAL_OK;
 800026e:	2300      	movs	r3, #0
}
 8000270:	4618      	mov	r0, r3
 8000272:	3718      	adds	r7, #24
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000c0c 	.word	0x20000c0c

0800027c <DRV_WriteRegister>:

HAL_StatusTypeDef DRV_WriteRegister(uint8_t reg, uint32_t value) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	6039      	str	r1, [r7, #0]
 8000286:	71fb      	strb	r3, [r7, #7]
    uint8_t data[8];
    data[0] = 0x05;  // Slave Address
 8000288:	2305      	movs	r3, #5
 800028a:	733b      	strb	r3, [r7, #12]
    data[1] = 0x00;  // Write Command
 800028c:	2300      	movs	r3, #0
 800028e:	737b      	strb	r3, [r7, #13]
    data[2] = reg | 0x80;
 8000290:	79fb      	ldrb	r3, [r7, #7]
 8000292:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000296:	b2db      	uxtb	r3, r3
 8000298:	73bb      	strb	r3, [r7, #14]
    data[3] = (value >> 24) & 0xFF;
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	0e1b      	lsrs	r3, r3, #24
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	73fb      	strb	r3, [r7, #15]
    data[4] = (value >> 16) & 0xFF;
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	0c1b      	lsrs	r3, r3, #16
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	743b      	strb	r3, [r7, #16]
    data[5] = (value >> 8) & 0xFF;
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	0a1b      	lsrs	r3, r3, #8
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	747b      	strb	r3, [r7, #17]
    data[6] = value & 0xFF;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	74bb      	strb	r3, [r7, #18]
    calcCRC(data, 8);
 80002b8:	f107 030c 	add.w	r3, r7, #12
 80002bc:	2108      	movs	r1, #8
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ff46 	bl	8000150 <calcCRC>

    HAL_StatusTypeDef status;
    status =  HAL_UART_Transmit(&huart1, data, 8, 100);
 80002c4:	f107 010c 	add.w	r1, r7, #12
 80002c8:	2364      	movs	r3, #100	@ 0x64
 80002ca:	2208      	movs	r2, #8
 80002cc:	4804      	ldr	r0, [pc, #16]	@ (80002e0 <DRV_WriteRegister+0x64>)
 80002ce:	f004 f9d7 	bl	8004680 <HAL_UART_Transmit>
 80002d2:	4603      	mov	r3, r0
 80002d4:	75fb      	strb	r3, [r7, #23]
    return status;
 80002d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80002d8:	4618      	mov	r0, r3
 80002da:	3718      	adds	r7, #24
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000c0c 	.word	0x20000c0c

080002e4 <tmc2209_init>:

void tmc2209_init() {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	status = DRV_WriteRegister(0x00, 0x00000004);  // Set PDN_DISABLE in GCONF
 80002ea:	2104      	movs	r1, #4
 80002ec:	2000      	movs	r0, #0
 80002ee:	f7ff ffc5 	bl	800027c <DRV_WriteRegister>
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(100);
 80002f6:	2064      	movs	r0, #100	@ 0x64
 80002f8:	f000 fd76 	bl	8000de8 <HAL_Delay>
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <lowPassFilter>:

int32_t getCounter(){
	return accumulate_counter;
}

uint16_t lowPassFilter(uint16_t newData){
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	80fb      	strh	r3, [r7, #6]
	encoderReadings[filterIndex] = newData;
 800030e:	4b1c      	ldr	r3, [pc, #112]	@ (8000380 <lowPassFilter+0x7c>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	4619      	mov	r1, r3
 8000314:	4a1b      	ldr	r2, [pc, #108]	@ (8000384 <lowPassFilter+0x80>)
 8000316:	88fb      	ldrh	r3, [r7, #6]
 8000318:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	filterIndex = (filterIndex + 1) % FILTER_SIZE;
 800031c:	4b18      	ldr	r3, [pc, #96]	@ (8000380 <lowPassFilter+0x7c>)
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	3301      	adds	r3, #1
 8000322:	425a      	negs	r2, r3
 8000324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000328:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800032c:	bf58      	it	pl
 800032e:	4253      	negpl	r3, r2
 8000330:	b29a      	uxth	r2, r3
 8000332:	4b13      	ldr	r3, [pc, #76]	@ (8000380 <lowPassFilter+0x7c>)
 8000334:	801a      	strh	r2, [r3, #0]

	int sum = 0;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTER_SIZE; i++) {
 800033a:	2300      	movs	r3, #0
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	e00a      	b.n	8000356 <lowPassFilter+0x52>
		sum += encoderReadings[i];
 8000340:	4a10      	ldr	r2, [pc, #64]	@ (8000384 <lowPassFilter+0x80>)
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000348:	461a      	mov	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4413      	add	r3, r2
 800034e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTER_SIZE; i++) {
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	3301      	adds	r3, #1
 8000354:	60bb      	str	r3, [r7, #8]
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800035c:	dbf0      	blt.n	8000340 <lowPassFilter+0x3c>
	}

	filteredValue = sum / FILTER_SIZE;
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	2b00      	cmp	r3, #0
 8000362:	da01      	bge.n	8000368 <lowPassFilter+0x64>
 8000364:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8000368:	129b      	asrs	r3, r3, #10
 800036a:	b29a      	uxth	r2, r3
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <lowPassFilter+0x84>)
 800036e:	801a      	strh	r2, [r3, #0]

	return filteredValue;
 8000370:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <lowPassFilter+0x84>)
 8000372:	881b      	ldrh	r3, [r3, #0]
}
 8000374:	4618      	mov	r0, r3
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	20000888 	.word	0x20000888
 8000384:	20000088 	.word	0x20000088
 8000388:	2000088a 	.word	0x2000088a

0800038c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a2d      	ldr	r2, [pc, #180]	@ (8000450 <HAL_I2C_MemRxCpltCallback+0xc4>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d154      	bne.n	8000448 <HAL_I2C_MemRxCpltCallback+0xbc>
        uint16_t position_now = (raw_buffer[0] << 8) | raw_buffer[1];
 800039e:	4b2d      	ldr	r3, [pc, #180]	@ (8000454 <HAL_I2C_MemRxCpltCallback+0xc8>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	021b      	lsls	r3, r3, #8
 80003a4:	b21a      	sxth	r2, r3
 80003a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000454 <HAL_I2C_MemRxCpltCallback+0xc8>)
 80003a8:	785b      	ldrb	r3, [r3, #1]
 80003aa:	b21b      	sxth	r3, r3
 80003ac:	4313      	orrs	r3, r2
 80003ae:	b21b      	sxth	r3, r3
 80003b0:	817b      	strh	r3, [r7, #10]
        position_now = lowPassFilter(position_now);
 80003b2:	897b      	ldrh	r3, [r7, #10]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff ffa5 	bl	8000304 <lowPassFilter>
 80003ba:	4603      	mov	r3, r0
 80003bc:	817b      	strh	r3, [r7, #10]
        int32_t delta = (int32_t)(position_now - position_prev);
 80003be:	897b      	ldrh	r3, [r7, #10]
 80003c0:	4a25      	ldr	r2, [pc, #148]	@ (8000458 <HAL_I2C_MemRxCpltCallback+0xcc>)
 80003c2:	8812      	ldrh	r2, [r2, #0]
 80003c4:	1a9b      	subs	r3, r3, r2
 80003c6:	60fb      	str	r3, [r7, #12]

        if(rotation_direction){
 80003c8:	4b24      	ldr	r3, [pc, #144]	@ (800045c <HAL_I2C_MemRxCpltCallback+0xd0>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d00d      	beq.n	80003ec <HAL_I2C_MemRxCpltCallback+0x60>
        	if(delta > ENC_PPR/2){
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80003d6:	dd03      	ble.n	80003e0 <HAL_I2C_MemRxCpltCallback+0x54>
        		delta -= ENC_PPR;
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80003de:	60fb      	str	r3, [r7, #12]
        	}
        	delta = abs(delta);
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	bfb8      	it	lt
 80003e6:	425b      	neglt	r3, r3
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	e00d      	b.n	8000408 <HAL_I2C_MemRxCpltCallback+0x7c>
        }else{
        	if(delta < -(ENC_PPR/2)){
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 80003f2:	da03      	bge.n	80003fc <HAL_I2C_MemRxCpltCallback+0x70>
        		delta += ENC_PPR;
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80003fa:	60fb      	str	r3, [r7, #12]
        	}
        	delta = -abs(delta);
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	bfb8      	it	lt
 8000402:	425b      	neglt	r3, r3
 8000404:	425b      	negs	r3, r3
 8000406:	60fb      	str	r3, [r7, #12]
        }

        accumulate_counter += delta;
 8000408:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <HAL_I2C_MemRxCpltCallback+0xd4>)
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	4413      	add	r3, r2
 8000410:	4a13      	ldr	r2, [pc, #76]	@ (8000460 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000412:	6013      	str	r3, [r2, #0]

        if(accumulate_counter >= ENC_MAX_COUNT){
 8000414:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a12      	ldr	r2, [pc, #72]	@ (8000464 <HAL_I2C_MemRxCpltCallback+0xd8>)
 800041a:	4293      	cmp	r3, r2
 800041c:	dd06      	ble.n	800042c <HAL_I2C_MemRxCpltCallback+0xa0>
			accumulate_counter -= ENC_MAX_COUNT;
 800041e:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8000424:	4413      	add	r3, r2
 8000426:	4a0e      	ldr	r2, [pc, #56]	@ (8000460 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000428:	6013      	str	r3, [r2, #0]
 800042a:	e00a      	b.n	8000442 <HAL_I2C_MemRxCpltCallback+0xb6>
		}else if(accumulate_counter < ENC_MIN_COUNT){
 800042c:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <HAL_I2C_MemRxCpltCallback+0xd4>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a0d      	ldr	r2, [pc, #52]	@ (8000468 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8000432:	4293      	cmp	r3, r2
 8000434:	da05      	bge.n	8000442 <HAL_I2C_MemRxCpltCallback+0xb6>
			accumulate_counter += ENC_MAX_COUNT;
 8000436:	4b0a      	ldr	r3, [pc, #40]	@ (8000460 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <HAL_I2C_MemRxCpltCallback+0xe0>)
 800043c:	4413      	add	r3, r2
 800043e:	4a08      	ldr	r2, [pc, #32]	@ (8000460 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000440:	6013      	str	r3, [r2, #0]
		}

        position_prev = position_now;
 8000442:	4a05      	ldr	r2, [pc, #20]	@ (8000458 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8000444:	897b      	ldrh	r3, [r7, #10]
 8000446:	8013      	strh	r3, [r2, #0]
    }
}
 8000448:	bf00      	nop
 800044a:	3710      	adds	r7, #16
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40005400 	.word	0x40005400
 8000454:	20000084 	.word	0x20000084
 8000458:	2000007e 	.word	0x2000007e
 800045c:	2000007c 	.word	0x2000007c
 8000460:	20000080 	.word	0x20000080
 8000464:	0098967e 	.word	0x0098967e
 8000468:	ff676981 	.word	0xff676981
 800046c:	0098967f 	.word	0x0098967f

08000470 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	4a06      	ldr	r2, [pc, #24]	@ (8000498 <vApplicationGetIdleTaskMemory+0x28>)
 8000480:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	4a05      	ldr	r2, [pc, #20]	@ (800049c <vApplicationGetIdleTaskMemory+0x2c>)
 8000486:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2280      	movs	r2, #128	@ 0x80
 800048c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	2000088c 	.word	0x2000088c
 800049c:	2000092c 	.word	0x2000092c

080004a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a0:	b5b0      	push	{r4, r5, r7, lr}
 80004a2:	b096      	sub	sp, #88	@ 0x58
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a6:	f000 fc6d 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004aa:	f000 f853 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ae:	f000 f965 	bl	800077c <MX_GPIO_Init>
  MX_DMA_Init();
 80004b2:	f000 f945 	bl	8000740 <MX_DMA_Init>
  MX_I2C1_Init();
 80004b6:	f000 f893 	bl	80005e0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80004ba:	f000 f8bf 	bl	800063c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004be:	f000 f915 	bl	80006ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //i2c_scanbus(&hi2c1, i2c_available);
  tmc2209_init();
 80004c2:	f7ff ff0f 	bl	80002e4 <tmc2209_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80004c6:	4b1d      	ldr	r3, [pc, #116]	@ (800053c <main+0x9c>)
 80004c8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80004cc:	461d      	mov	r5, r3
 80004ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80004de:	2100      	movs	r1, #0
 80004e0:	4618      	mov	r0, r3
 80004e2:	f004 ffd3 	bl	800548c <osThreadCreate>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a15      	ldr	r2, [pc, #84]	@ (8000540 <main+0xa0>)
 80004ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 80004ec:	4b15      	ldr	r3, [pc, #84]	@ (8000544 <main+0xa4>)
 80004ee:	f107 0420 	add.w	r4, r7, #32
 80004f2:	461d      	mov	r5, r3
 80004f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 8000500:	f107 0320 	add.w	r3, r7, #32
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f004 ffc0 	bl	800548c <osThreadCreate>
 800050c:	4603      	mov	r3, r0
 800050e:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <main+0xa8>)
 8000510:	6013      	str	r3, [r2, #0]

  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 8000512:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <main+0xac>)
 8000514:	1d3c      	adds	r4, r7, #4
 8000516:	461d      	mov	r5, r3
 8000518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800051c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f004 ffaf 	bl	800548c <osThreadCreate>
 800052e:	4603      	mov	r3, r0
 8000530:	4a07      	ldr	r2, [pc, #28]	@ (8000550 <main+0xb0>)
 8000532:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000534:	f004 ffa3 	bl	800547e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <main+0x98>
 800053c:	08006a6c 	.word	0x08006a6c
 8000540:	20000c54 	.word	0x20000c54
 8000544:	08006a94 	.word	0x08006a94
 8000548:	20000c58 	.word	0x20000c58
 800054c:	08006abc 	.word	0x08006abc
 8000550:	20000c5c 	.word	0x20000c5c

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b090      	sub	sp, #64	@ 0x40
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	2228      	movs	r2, #40	@ 0x28
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f006 f998 	bl	8006898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000576:	2301      	movs	r3, #1
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800057e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000590:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000592:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0318 	add.w	r3, r7, #24
 800059c:	4618      	mov	r0, r3
 800059e:	f002 ff07 	bl	80033b0 <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005a8:	f000 f9a2 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2102      	movs	r1, #2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 f974 	bl	80038b4 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005d2:	f000 f98d 	bl	80008f0 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3740      	adds	r7, #64	@ 0x40
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e4:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <MX_I2C1_Init+0x50>)
 80005e6:	4a13      	ldr	r2, [pc, #76]	@ (8000634 <MX_I2C1_Init+0x54>)
 80005e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005ea:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <MX_I2C1_Init+0x50>)
 80005ec:	4a12      	ldr	r2, [pc, #72]	@ (8000638 <MX_I2C1_Init+0x58>)
 80005ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <MX_I2C1_Init+0x50>)
 80005fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	@ (8000630 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060a:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	@ (8000630 <MX_I2C1_Init+0x50>)
 800061e:	f001 f8a5 	bl	800176c <HAL_I2C_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000628:	f000 f962 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000b2c 	.word	0x20000b2c
 8000634:	40005400 	.word	0x40005400
 8000638:	00061a80 	.word	0x00061a80

0800063c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	@ 0x28
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800065e:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <MX_TIM2_Init+0xac>)
 8000660:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000664:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000666:	4b20      	ldr	r3, [pc, #128]	@ (80006e8 <MX_TIM2_Init+0xac>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066c:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <MX_TIM2_Init+0xac>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000672:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <MX_TIM2_Init+0xac>)
 8000674:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000678:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067a:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <MX_TIM2_Init+0xac>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000680:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <MX_TIM2_Init+0xac>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000686:	4818      	ldr	r0, [pc, #96]	@ (80006e8 <MX_TIM2_Init+0xac>)
 8000688:	f003 fb7c 	bl	8003d84 <HAL_TIM_OC_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000692:	f000 f92d 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000696:	2300      	movs	r3, #0
 8000698:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4619      	mov	r1, r3
 80006a4:	4810      	ldr	r0, [pc, #64]	@ (80006e8 <MX_TIM2_Init+0xac>)
 80006a6:	f003 ff23 	bl	80044f0 <HAL_TIMEx_MasterConfigSynchronization>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80006b0:	f000 f91e 	bl	80008f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 80006b4:	2350      	movs	r3, #80	@ 0x50
 80006b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	4619      	mov	r1, r3
 80006ca:	4807      	ldr	r0, [pc, #28]	@ (80006e8 <MX_TIM2_Init+0xac>)
 80006cc:	f003 fc9a 	bl	8004004 <HAL_TIM_OC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80006d6:	f000 f90b 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006da:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <MX_TIM2_Init+0xac>)
 80006dc:	f000 f9dc 	bl	8000a98 <HAL_TIM_MspPostInit>

}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	@ 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000bc4 	.word	0x20000bc4

080006ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	@ (800073c <MX_USART1_UART_Init+0x50>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 80006f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	@ (8000738 <MX_USART1_UART_Init+0x4c>)
 8000724:	f003 ff54 	bl	80045d0 <HAL_HalfDuplex_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800072e:	f000 f8df 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000c0c 	.word	0x20000c0c
 800073c:	40013800 	.word	0x40013800

08000740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_DMA_Init+0x38>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a0b      	ldr	r2, [pc, #44]	@ (8000778 <MX_DMA_Init+0x38>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6153      	str	r3, [r2, #20]
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_DMA_Init+0x38>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2105      	movs	r1, #5
 8000762:	2011      	movs	r0, #17
 8000764:	f000 fc19 	bl	8000f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000768:	2011      	movs	r0, #17
 800076a:	f000 fc32 	bl	8000fd2 <HAL_NVIC_EnableIRQ>

}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000790:	4b3d      	ldr	r3, [pc, #244]	@ (8000888 <MX_GPIO_Init+0x10c>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a3c      	ldr	r2, [pc, #240]	@ (8000888 <MX_GPIO_Init+0x10c>)
 8000796:	f043 0310 	orr.w	r3, r3, #16
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b3a      	ldr	r3, [pc, #232]	@ (8000888 <MX_GPIO_Init+0x10c>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0310 	and.w	r3, r3, #16
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a8:	4b37      	ldr	r3, [pc, #220]	@ (8000888 <MX_GPIO_Init+0x10c>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a36      	ldr	r2, [pc, #216]	@ (8000888 <MX_GPIO_Init+0x10c>)
 80007ae:	f043 0320 	orr.w	r3, r3, #32
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <MX_GPIO_Init+0x10c>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0320 	and.w	r3, r3, #32
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c0:	4b31      	ldr	r3, [pc, #196]	@ (8000888 <MX_GPIO_Init+0x10c>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a30      	ldr	r2, [pc, #192]	@ (8000888 <MX_GPIO_Init+0x10c>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <MX_GPIO_Init+0x10c>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_GPIO_Init+0x10c>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a2a      	ldr	r2, [pc, #168]	@ (8000888 <MX_GPIO_Init+0x10c>)
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <MX_GPIO_Init+0x10c>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f003 0308 	and.w	r3, r3, #8
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f6:	4825      	ldr	r0, [pc, #148]	@ (800088c <MX_GPIO_Init+0x110>)
 80007f8:	f000 ffa0 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2106      	movs	r1, #6
 8000800:	4823      	ldr	r0, [pc, #140]	@ (8000890 <MX_GPIO_Init+0x114>)
 8000802:	f000 ff9b 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2120      	movs	r1, #32
 800080a:	4822      	ldr	r0, [pc, #136]	@ (8000894 <MX_GPIO_Init+0x118>)
 800080c:	f000 ff96 	bl	800173c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000810:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2302      	movs	r3, #2
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	4619      	mov	r1, r3
 8000828:	4818      	ldr	r0, [pc, #96]	@ (800088c <MX_GPIO_Init+0x110>)
 800082a:	f000 fe03 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800082e:	2306      	movs	r3, #6
 8000830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2302      	movs	r3, #2
 800083c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	4619      	mov	r1, r3
 8000844:	4812      	ldr	r0, [pc, #72]	@ (8000890 <MX_GPIO_Init+0x114>)
 8000846:	f000 fdf5 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800084a:	2310      	movs	r3, #16
 800084c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	4619      	mov	r1, r3
 800085c:	480d      	ldr	r0, [pc, #52]	@ (8000894 <MX_GPIO_Init+0x118>)
 800085e:	f000 fde9 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000862:	2320      	movs	r3, #32
 8000864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2302      	movs	r3, #2
 8000870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	4619      	mov	r1, r3
 8000878:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_GPIO_Init+0x118>)
 800087a:	f000 fddb 	bl	8001434 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000
 800088c:	40011000 	.word	0x40011000
 8000890:	40010800 	.word	0x40010800
 8000894:	40010c00 	.word	0x40010c00

08000898 <StartDriverTask>:

/* USER CODE BEGIN 4 */
void StartDriverTask(void const * argument){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	for(;;){
		DRV_ReadRegister(0x00, &driver_value);
 80008a0:	4902      	ldr	r1, [pc, #8]	@ (80008ac <StartDriverTask+0x14>)
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fca0 	bl	80001e8 <DRV_ReadRegister>
 80008a8:	e7fa      	b.n	80008a0 <StartDriverTask+0x8>
 80008aa:	bf00      	nop
 80008ac:	20000c60 	.word	0x20000c60

080008b0 <StartEncoderTask>:
	}
}

void StartEncoderTask(void const * argument){
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	for(;;){
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <StartEncoderTask+0x8>

080008bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f004 fe2d 	bl	8005524 <osDelay>
 80008ca:	e7fb      	b.n	80008c4 <StartDefaultTask+0x8>

080008cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a04      	ldr	r2, [pc, #16]	@ (80008ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d101      	bne.n	80008e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008de:	f000 fa67 	bl	8000db0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40012c00 	.word	0x40012c00

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <HAL_MspInit+0x68>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	4a17      	ldr	r2, [pc, #92]	@ (8000964 <HAL_MspInit+0x68>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6193      	str	r3, [r2, #24]
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <HAL_MspInit+0x68>)
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_MspInit+0x68>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a11      	ldr	r2, [pc, #68]	@ (8000964 <HAL_MspInit+0x68>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_MspInit+0x68>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	210f      	movs	r1, #15
 8000936:	f06f 0001 	mvn.w	r0, #1
 800093a:	f000 fb2e 	bl	8000f9a <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800093e:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <HAL_MspInit+0x6c>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4a04      	ldr	r2, [pc, #16]	@ (8000968 <HAL_MspInit+0x6c>)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	40010000 	.word	0x40010000

0800096c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a31      	ldr	r2, [pc, #196]	@ (8000a4c <HAL_I2C_MspInit+0xe0>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d15a      	bne.n	8000a42 <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098c:	4b30      	ldr	r3, [pc, #192]	@ (8000a50 <HAL_I2C_MspInit+0xe4>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a2f      	ldr	r2, [pc, #188]	@ (8000a50 <HAL_I2C_MspInit+0xe4>)
 8000992:	f043 0308 	orr.w	r3, r3, #8
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b2d      	ldr	r3, [pc, #180]	@ (8000a50 <HAL_I2C_MspInit+0xe4>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0308 	and.w	r3, r3, #8
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009a4:	23c0      	movs	r3, #192	@ 0xc0
 80009a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a8:	2312      	movs	r3, #18
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	4619      	mov	r1, r3
 80009b6:	4827      	ldr	r0, [pc, #156]	@ (8000a54 <HAL_I2C_MspInit+0xe8>)
 80009b8:	f000 fd3c 	bl	8001434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009bc:	4b24      	ldr	r3, [pc, #144]	@ (8000a50 <HAL_I2C_MspInit+0xe4>)
 80009be:	69db      	ldr	r3, [r3, #28]
 80009c0:	4a23      	ldr	r2, [pc, #140]	@ (8000a50 <HAL_I2C_MspInit+0xe4>)
 80009c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009c6:	61d3      	str	r3, [r2, #28]
 80009c8:	4b21      	ldr	r3, [pc, #132]	@ (8000a50 <HAL_I2C_MspInit+0xe4>)
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80009d4:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <HAL_I2C_MspInit+0xec>)
 80009d6:	4a21      	ldr	r2, [pc, #132]	@ (8000a5c <HAL_I2C_MspInit+0xf0>)
 80009d8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009da:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <HAL_I2C_MspInit+0xec>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <HAL_I2C_MspInit+0xec>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <HAL_I2C_MspInit+0xec>)
 80009e8:	2280      	movs	r2, #128	@ 0x80
 80009ea:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <HAL_I2C_MspInit+0xec>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <HAL_I2C_MspInit+0xec>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80009f8:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <HAL_I2C_MspInit+0xec>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <HAL_I2C_MspInit+0xec>)
 8000a00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a04:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000a06:	4814      	ldr	r0, [pc, #80]	@ (8000a58 <HAL_I2C_MspInit+0xec>)
 8000a08:	f000 faf2 	bl	8000ff0 <HAL_DMA_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 8000a12:	f7ff ff6d 	bl	80008f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a0f      	ldr	r2, [pc, #60]	@ (8000a58 <HAL_I2C_MspInit+0xec>)
 8000a1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a58 <HAL_I2C_MspInit+0xec>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2105      	movs	r1, #5
 8000a26:	201f      	movs	r0, #31
 8000a28:	f000 fab7 	bl	8000f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a2c:	201f      	movs	r0, #31
 8000a2e:	f000 fad0 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2105      	movs	r1, #5
 8000a36:	2020      	movs	r0, #32
 8000a38:	f000 faaf 	bl	8000f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	f000 fac8 	bl	8000fd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a42:	bf00      	nop
 8000a44:	3720      	adds	r7, #32
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010c00 	.word	0x40010c00
 8000a58:	20000b80 	.word	0x20000b80
 8000a5c:	40020080 	.word	0x40020080

08000a60 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a70:	d10b      	bne.n	8000a8a <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <HAL_TIM_OC_MspInit+0x34>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	4a07      	ldr	r2, [pc, #28]	@ (8000a94 <HAL_TIM_OC_MspInit+0x34>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	61d3      	str	r3, [r2, #28]
 8000a7e:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <HAL_TIM_OC_MspInit+0x34>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ab6:	d117      	bne.n	8000ae8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <HAL_TIM_MspPostInit+0x58>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a0c      	ldr	r2, [pc, #48]	@ (8000af0 <HAL_TIM_MspPostInit+0x58>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <HAL_TIM_MspPostInit+0x58>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4804      	ldr	r0, [pc, #16]	@ (8000af4 <HAL_TIM_MspPostInit+0x5c>)
 8000ae4:	f000 fca6 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40010800 	.word	0x40010800

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a1a      	ldr	r2, [pc, #104]	@ (8000b7c <HAL_UART_MspInit+0x84>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d12c      	bne.n	8000b72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a18      	ldr	r2, [pc, #96]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4e:	2312      	movs	r3, #18
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0310 	add.w	r3, r7, #16
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4809      	ldr	r0, [pc, #36]	@ (8000b84 <HAL_UART_MspInit+0x8c>)
 8000b5e:	f000 fc69 	bl	8001434 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2105      	movs	r1, #5
 8000b66:	2025      	movs	r0, #37	@ 0x25
 8000b68:	f000 fa17 	bl	8000f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b6c:	2025      	movs	r0, #37	@ 0x25
 8000b6e:	f000 fa30 	bl	8000fd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b72:	bf00      	nop
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40013800 	.word	0x40013800
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010800 	.word	0x40010800

08000b88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	@ 0x30
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c58 <HAL_InitTick+0xd0>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8000c58 <HAL_InitTick+0xd0>)
 8000ba4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ba8:	6193      	str	r3, [r2, #24]
 8000baa:	4b2b      	ldr	r3, [pc, #172]	@ (8000c58 <HAL_InitTick+0xd0>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb6:	f107 020c 	add.w	r2, r7, #12
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f002 ffe7 	bl	8003b94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bc6:	f002 ffd1 	bl	8003b6c <HAL_RCC_GetPCLK2Freq>
 8000bca:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bce:	4a23      	ldr	r2, [pc, #140]	@ (8000c5c <HAL_InitTick+0xd4>)
 8000bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd4:	0c9b      	lsrs	r3, r3, #18
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bda:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <HAL_InitTick+0xd8>)
 8000bdc:	4a21      	ldr	r2, [pc, #132]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000bde:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000be0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <HAL_InitTick+0xd8>)
 8000be2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000be6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000be8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c60 <HAL_InitTick+0xd8>)
 8000bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bec:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	@ (8000c60 <HAL_InitTick+0xd8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <HAL_InitTick+0xd8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <HAL_InitTick+0xd8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c00:	4817      	ldr	r0, [pc, #92]	@ (8000c60 <HAL_InitTick+0xd8>)
 8000c02:	f003 f815 	bl	8003c30 <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d11b      	bne.n	8000c4c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c14:	4812      	ldr	r0, [pc, #72]	@ (8000c60 <HAL_InitTick+0xd8>)
 8000c16:	f003 f863 	bl	8003ce0 <HAL_TIM_Base_Start_IT>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d111      	bne.n	8000c4c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c28:	2019      	movs	r0, #25
 8000c2a:	f000 f9d2 	bl	8000fd2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d808      	bhi.n	8000c46 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	2019      	movs	r0, #25
 8000c3a:	f000 f9ae 	bl	8000f9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <HAL_InitTick+0xe0>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	e002      	b.n	8000c4c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3730      	adds	r7, #48	@ 0x30
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	431bde83 	.word	0x431bde83
 8000c60:	20000c64 	.word	0x20000c64
 8000c64:	40012c00 	.word	0x40012c00
 8000c68:	20000004 	.word	0x20000004

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <NMI_Handler+0x4>

08000c74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <MemManage_Handler+0x4>

08000c84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000ca4:	4802      	ldr	r0, [pc, #8]	@ (8000cb0 <DMA1_Channel7_IRQHandler+0x10>)
 8000ca6:	f000 fab1 	bl	800120c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000b80 	.word	0x20000b80

08000cb4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cb8:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <TIM1_UP_IRQHandler+0x10>)
 8000cba:	f003 f8b2 	bl	8003e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000c64 	.word	0x20000c64

08000cc8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <I2C1_EV_IRQHandler+0x10>)
 8000cce:	f000 fea5 	bl	8001a1c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000b2c 	.word	0x20000b2c

08000cdc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <I2C1_ER_IRQHandler+0x10>)
 8000ce2:	f000 ffee 	bl	8001cc2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000b2c 	.word	0x20000b2c

08000cf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cf4:	4802      	ldr	r0, [pc, #8]	@ (8000d00 <USART1_IRQHandler+0x10>)
 8000cf6:	f003 fe43 	bl	8004980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000c0c 	.word	0x20000c0c

08000d04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <HAL_UARTEx_RxEventCallback>:
	HAL_HalfDuplex_EnableReceiver(&huart1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 8000d1c:	221e      	movs	r2, #30
 8000d1e:	4904      	ldr	r1, [pc, #16]	@ (8000d30 <HAL_UARTEx_RxEventCallback+0x20>)
 8000d20:	4804      	ldr	r0, [pc, #16]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0x24>)
 8000d22:	f003 fdcf 	bl	80048c4 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000cac 	.word	0x20000cac
 8000d34:	20000c0c 	.word	0x20000c0c

08000d38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d38:	f7ff ffe4 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d3c:	480b      	ldr	r0, [pc, #44]	@ (8000d6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d3e:	490c      	ldr	r1, [pc, #48]	@ (8000d70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d40:	4a0c      	ldr	r2, [pc, #48]	@ (8000d74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a09      	ldr	r2, [pc, #36]	@ (8000d78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d54:	4c09      	ldr	r4, [pc, #36]	@ (8000d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d62:	f005 fdf7 	bl	8006954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d66:	f7ff fb9b 	bl	80004a0 <main>
  bx lr
 8000d6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d74:	08006b14 	.word	0x08006b14
  ldr r2, =_sbss
 8000d78:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d7c:	20001b64 	.word	0x20001b64

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <HAL_Init+0x28>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	@ (8000dac <HAL_Init+0x28>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f8f5 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f7ff fef4 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff fdac 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40022000 	.word	0x40022000

08000db0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <HAL_IncTick+0x1c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <HAL_IncTick+0x20>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a03      	ldr	r2, [pc, #12]	@ (8000dd0 <HAL_IncTick+0x20>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000ccc 	.word	0x20000ccc

08000dd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b02      	ldr	r3, [pc, #8]	@ (8000de4 <HAL_GetTick+0x10>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	20000ccc 	.word	0x20000ccc

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff fff0 	bl	8000dd4 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffe0 	bl	8000dd4 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4906      	ldr	r1, [pc, #24]	@ (8000ec8 <__NVIC_EnableIRQ+0x34>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	@ (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	@ (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	@ 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff4f 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff64 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ffb2 	bl	8000f20 <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff81 	bl	8000ecc <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff57 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e043      	b.n	800108e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <HAL_DMA_Init+0xa8>)
 800100e:	4413      	add	r3, r2
 8001010:	4a22      	ldr	r2, [pc, #136]	@ (800109c <HAL_DMA_Init+0xac>)
 8001012:	fba2 2303 	umull	r2, r3, r2, r3
 8001016:	091b      	lsrs	r3, r3, #4
 8001018:	009a      	lsls	r2, r3, #2
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a1f      	ldr	r2, [pc, #124]	@ (80010a0 <HAL_DMA_Init+0xb0>)
 8001022:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2202      	movs	r2, #2
 8001028:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800103a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800103e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4313      	orrs	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr
 8001098:	bffdfff8 	.word	0xbffdfff8
 800109c:	cccccccd 	.word	0xcccccccd
 80010a0:	40020000 	.word	0x40020000

080010a4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d008      	beq.n	80010ce <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2204      	movs	r2, #4
 80010c0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e020      	b.n	8001110 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 020e 	bic.w	r2, r2, #14
 80010dc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0201 	bic.w	r2, r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010f6:	2101      	movs	r1, #1
 80010f8:	fa01 f202 	lsl.w	r2, r1, r2
 80010fc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2201      	movs	r2, #1
 8001102:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
	...

0800111c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d005      	beq.n	8001140 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2204      	movs	r2, #4
 8001138:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e051      	b.n	80011e4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 020e 	bic.w	r2, r2, #14
 800114e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0201 	bic.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a22      	ldr	r2, [pc, #136]	@ (80011f0 <HAL_DMA_Abort_IT+0xd4>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d029      	beq.n	80011be <HAL_DMA_Abort_IT+0xa2>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a21      	ldr	r2, [pc, #132]	@ (80011f4 <HAL_DMA_Abort_IT+0xd8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d022      	beq.n	80011ba <HAL_DMA_Abort_IT+0x9e>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a1f      	ldr	r2, [pc, #124]	@ (80011f8 <HAL_DMA_Abort_IT+0xdc>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d01a      	beq.n	80011b4 <HAL_DMA_Abort_IT+0x98>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1e      	ldr	r2, [pc, #120]	@ (80011fc <HAL_DMA_Abort_IT+0xe0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d012      	beq.n	80011ae <HAL_DMA_Abort_IT+0x92>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a1c      	ldr	r2, [pc, #112]	@ (8001200 <HAL_DMA_Abort_IT+0xe4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00a      	beq.n	80011a8 <HAL_DMA_Abort_IT+0x8c>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <HAL_DMA_Abort_IT+0xe8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d102      	bne.n	80011a2 <HAL_DMA_Abort_IT+0x86>
 800119c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011a0:	e00e      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011a6:	e00b      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ac:	e008      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011b2:	e005      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b8:	e002      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011ba:	2310      	movs	r3, #16
 80011bc:	e000      	b.n	80011c0 <HAL_DMA_Abort_IT+0xa4>
 80011be:	2301      	movs	r3, #1
 80011c0:	4a11      	ldr	r2, [pc, #68]	@ (8001208 <HAL_DMA_Abort_IT+0xec>)
 80011c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	4798      	blx	r3
    } 
  }
  return status;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40020008 	.word	0x40020008
 80011f4:	4002001c 	.word	0x4002001c
 80011f8:	40020030 	.word	0x40020030
 80011fc:	40020044 	.word	0x40020044
 8001200:	40020058 	.word	0x40020058
 8001204:	4002006c 	.word	0x4002006c
 8001208:	40020000 	.word	0x40020000

0800120c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001228:	2204      	movs	r2, #4
 800122a:	409a      	lsls	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d04f      	beq.n	80012d4 <HAL_DMA_IRQHandler+0xc8>
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	2b00      	cmp	r3, #0
 800123c:	d04a      	beq.n	80012d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0320 	and.w	r3, r3, #32
 8001248:	2b00      	cmp	r3, #0
 800124a:	d107      	bne.n	800125c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0204 	bic.w	r2, r2, #4
 800125a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a66      	ldr	r2, [pc, #408]	@ (80013fc <HAL_DMA_IRQHandler+0x1f0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d029      	beq.n	80012ba <HAL_DMA_IRQHandler+0xae>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a65      	ldr	r2, [pc, #404]	@ (8001400 <HAL_DMA_IRQHandler+0x1f4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d022      	beq.n	80012b6 <HAL_DMA_IRQHandler+0xaa>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a63      	ldr	r2, [pc, #396]	@ (8001404 <HAL_DMA_IRQHandler+0x1f8>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d01a      	beq.n	80012b0 <HAL_DMA_IRQHandler+0xa4>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a62      	ldr	r2, [pc, #392]	@ (8001408 <HAL_DMA_IRQHandler+0x1fc>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d012      	beq.n	80012aa <HAL_DMA_IRQHandler+0x9e>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a60      	ldr	r2, [pc, #384]	@ (800140c <HAL_DMA_IRQHandler+0x200>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00a      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x98>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a5f      	ldr	r2, [pc, #380]	@ (8001410 <HAL_DMA_IRQHandler+0x204>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d102      	bne.n	800129e <HAL_DMA_IRQHandler+0x92>
 8001298:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800129c:	e00e      	b.n	80012bc <HAL_DMA_IRQHandler+0xb0>
 800129e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012a2:	e00b      	b.n	80012bc <HAL_DMA_IRQHandler+0xb0>
 80012a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80012a8:	e008      	b.n	80012bc <HAL_DMA_IRQHandler+0xb0>
 80012aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012ae:	e005      	b.n	80012bc <HAL_DMA_IRQHandler+0xb0>
 80012b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012b4:	e002      	b.n	80012bc <HAL_DMA_IRQHandler+0xb0>
 80012b6:	2340      	movs	r3, #64	@ 0x40
 80012b8:	e000      	b.n	80012bc <HAL_DMA_IRQHandler+0xb0>
 80012ba:	2304      	movs	r3, #4
 80012bc:	4a55      	ldr	r2, [pc, #340]	@ (8001414 <HAL_DMA_IRQHandler+0x208>)
 80012be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 8094 	beq.w	80013f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012d2:	e08e      	b.n	80013f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	2202      	movs	r2, #2
 80012da:	409a      	lsls	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4013      	ands	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d056      	beq.n	8001392 <HAL_DMA_IRQHandler+0x186>
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d051      	beq.n	8001392 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0320 	and.w	r3, r3, #32
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10b      	bne.n	8001314 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 020a 	bic.w	r2, r2, #10
 800130a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a38      	ldr	r2, [pc, #224]	@ (80013fc <HAL_DMA_IRQHandler+0x1f0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d029      	beq.n	8001372 <HAL_DMA_IRQHandler+0x166>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a37      	ldr	r2, [pc, #220]	@ (8001400 <HAL_DMA_IRQHandler+0x1f4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d022      	beq.n	800136e <HAL_DMA_IRQHandler+0x162>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a35      	ldr	r2, [pc, #212]	@ (8001404 <HAL_DMA_IRQHandler+0x1f8>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d01a      	beq.n	8001368 <HAL_DMA_IRQHandler+0x15c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a34      	ldr	r2, [pc, #208]	@ (8001408 <HAL_DMA_IRQHandler+0x1fc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d012      	beq.n	8001362 <HAL_DMA_IRQHandler+0x156>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a32      	ldr	r2, [pc, #200]	@ (800140c <HAL_DMA_IRQHandler+0x200>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00a      	beq.n	800135c <HAL_DMA_IRQHandler+0x150>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a31      	ldr	r2, [pc, #196]	@ (8001410 <HAL_DMA_IRQHandler+0x204>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d102      	bne.n	8001356 <HAL_DMA_IRQHandler+0x14a>
 8001350:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001354:	e00e      	b.n	8001374 <HAL_DMA_IRQHandler+0x168>
 8001356:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800135a:	e00b      	b.n	8001374 <HAL_DMA_IRQHandler+0x168>
 800135c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001360:	e008      	b.n	8001374 <HAL_DMA_IRQHandler+0x168>
 8001362:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001366:	e005      	b.n	8001374 <HAL_DMA_IRQHandler+0x168>
 8001368:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800136c:	e002      	b.n	8001374 <HAL_DMA_IRQHandler+0x168>
 800136e:	2320      	movs	r3, #32
 8001370:	e000      	b.n	8001374 <HAL_DMA_IRQHandler+0x168>
 8001372:	2302      	movs	r3, #2
 8001374:	4a27      	ldr	r2, [pc, #156]	@ (8001414 <HAL_DMA_IRQHandler+0x208>)
 8001376:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001384:	2b00      	cmp	r3, #0
 8001386:	d034      	beq.n	80013f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001390:	e02f      	b.n	80013f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	2208      	movs	r2, #8
 8001398:	409a      	lsls	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4013      	ands	r3, r2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d028      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x1e8>
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d023      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 020e 	bic.w	r2, r2, #14
 80013ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d004      	beq.n	80013f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	4798      	blx	r3
    }
  }
  return;
 80013f2:	bf00      	nop
 80013f4:	bf00      	nop
}
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40020008 	.word	0x40020008
 8001400:	4002001c 	.word	0x4002001c
 8001404:	40020030 	.word	0x40020030
 8001408:	40020044 	.word	0x40020044
 800140c:	40020058 	.word	0x40020058
 8001410:	4002006c 	.word	0x4002006c
 8001414:	40020000 	.word	0x40020000

08001418 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001426:	b2db      	uxtb	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b08b      	sub	sp, #44	@ 0x2c
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001446:	e169      	b.n	800171c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001448:	2201      	movs	r2, #1
 800144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	429a      	cmp	r2, r3
 8001462:	f040 8158 	bne.w	8001716 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4a9a      	ldr	r2, [pc, #616]	@ (80016d4 <HAL_GPIO_Init+0x2a0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d05e      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001470:	4a98      	ldr	r2, [pc, #608]	@ (80016d4 <HAL_GPIO_Init+0x2a0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d875      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 8001476:	4a98      	ldr	r2, [pc, #608]	@ (80016d8 <HAL_GPIO_Init+0x2a4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d058      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 800147c:	4a96      	ldr	r2, [pc, #600]	@ (80016d8 <HAL_GPIO_Init+0x2a4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d86f      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 8001482:	4a96      	ldr	r2, [pc, #600]	@ (80016dc <HAL_GPIO_Init+0x2a8>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d052      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001488:	4a94      	ldr	r2, [pc, #592]	@ (80016dc <HAL_GPIO_Init+0x2a8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d869      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 800148e:	4a94      	ldr	r2, [pc, #592]	@ (80016e0 <HAL_GPIO_Init+0x2ac>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d04c      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 8001494:	4a92      	ldr	r2, [pc, #584]	@ (80016e0 <HAL_GPIO_Init+0x2ac>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d863      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 800149a:	4a92      	ldr	r2, [pc, #584]	@ (80016e4 <HAL_GPIO_Init+0x2b0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d046      	beq.n	800152e <HAL_GPIO_Init+0xfa>
 80014a0:	4a90      	ldr	r2, [pc, #576]	@ (80016e4 <HAL_GPIO_Init+0x2b0>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d85d      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	d82a      	bhi.n	8001500 <HAL_GPIO_Init+0xcc>
 80014aa:	2b12      	cmp	r3, #18
 80014ac:	d859      	bhi.n	8001562 <HAL_GPIO_Init+0x12e>
 80014ae:	a201      	add	r2, pc, #4	@ (adr r2, 80014b4 <HAL_GPIO_Init+0x80>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	0800152f 	.word	0x0800152f
 80014b8:	08001509 	.word	0x08001509
 80014bc:	0800151b 	.word	0x0800151b
 80014c0:	0800155d 	.word	0x0800155d
 80014c4:	08001563 	.word	0x08001563
 80014c8:	08001563 	.word	0x08001563
 80014cc:	08001563 	.word	0x08001563
 80014d0:	08001563 	.word	0x08001563
 80014d4:	08001563 	.word	0x08001563
 80014d8:	08001563 	.word	0x08001563
 80014dc:	08001563 	.word	0x08001563
 80014e0:	08001563 	.word	0x08001563
 80014e4:	08001563 	.word	0x08001563
 80014e8:	08001563 	.word	0x08001563
 80014ec:	08001563 	.word	0x08001563
 80014f0:	08001563 	.word	0x08001563
 80014f4:	08001563 	.word	0x08001563
 80014f8:	08001511 	.word	0x08001511
 80014fc:	08001525 	.word	0x08001525
 8001500:	4a79      	ldr	r2, [pc, #484]	@ (80016e8 <HAL_GPIO_Init+0x2b4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001506:	e02c      	b.n	8001562 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e029      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	3304      	adds	r3, #4
 8001516:	623b      	str	r3, [r7, #32]
          break;
 8001518:	e024      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	3308      	adds	r3, #8
 8001520:	623b      	str	r3, [r7, #32]
          break;
 8001522:	e01f      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	330c      	adds	r3, #12
 800152a:	623b      	str	r3, [r7, #32]
          break;
 800152c:	e01a      	b.n	8001564 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001536:	2304      	movs	r3, #4
 8001538:	623b      	str	r3, [r7, #32]
          break;
 800153a:	e013      	b.n	8001564 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d105      	bne.n	8001550 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001544:	2308      	movs	r3, #8
 8001546:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	611a      	str	r2, [r3, #16]
          break;
 800154e:	e009      	b.n	8001564 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001550:	2308      	movs	r3, #8
 8001552:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	615a      	str	r2, [r3, #20]
          break;
 800155a:	e003      	b.n	8001564 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e000      	b.n	8001564 <HAL_GPIO_Init+0x130>
          break;
 8001562:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2bff      	cmp	r3, #255	@ 0xff
 8001568:	d801      	bhi.n	800156e <HAL_GPIO_Init+0x13a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	e001      	b.n	8001572 <HAL_GPIO_Init+0x13e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3304      	adds	r3, #4
 8001572:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2bff      	cmp	r3, #255	@ 0xff
 8001578:	d802      	bhi.n	8001580 <HAL_GPIO_Init+0x14c>
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	e002      	b.n	8001586 <HAL_GPIO_Init+0x152>
 8001580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001582:	3b08      	subs	r3, #8
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	210f      	movs	r1, #15
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	401a      	ands	r2, r3
 8001598:	6a39      	ldr	r1, [r7, #32]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	431a      	orrs	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80b1 	beq.w	8001716 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015b4:	4b4d      	ldr	r3, [pc, #308]	@ (80016ec <HAL_GPIO_Init+0x2b8>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a4c      	ldr	r2, [pc, #304]	@ (80016ec <HAL_GPIO_Init+0x2b8>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b4a      	ldr	r3, [pc, #296]	@ (80016ec <HAL_GPIO_Init+0x2b8>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015cc:	4a48      	ldr	r2, [pc, #288]	@ (80016f0 <HAL_GPIO_Init+0x2bc>)
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a40      	ldr	r2, [pc, #256]	@ (80016f4 <HAL_GPIO_Init+0x2c0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d013      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a3f      	ldr	r2, [pc, #252]	@ (80016f8 <HAL_GPIO_Init+0x2c4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d00d      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3e      	ldr	r2, [pc, #248]	@ (80016fc <HAL_GPIO_Init+0x2c8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d007      	beq.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a3d      	ldr	r2, [pc, #244]	@ (8001700 <HAL_GPIO_Init+0x2cc>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d101      	bne.n	8001614 <HAL_GPIO_Init+0x1e0>
 8001610:	2303      	movs	r3, #3
 8001612:	e006      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001614:	2304      	movs	r3, #4
 8001616:	e004      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001618:	2302      	movs	r3, #2
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_GPIO_Init+0x1ee>
 8001620:	2300      	movs	r3, #0
 8001622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001624:	f002 0203 	and.w	r2, r2, #3
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	4093      	lsls	r3, r2
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001632:	492f      	ldr	r1, [pc, #188]	@ (80016f0 <HAL_GPIO_Init+0x2bc>)
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800164c:	4b2d      	ldr	r3, [pc, #180]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	492c      	ldr	r1, [pc, #176]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	608b      	str	r3, [r1, #8]
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800165a:	4b2a      	ldr	r3, [pc, #168]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	43db      	mvns	r3, r3
 8001662:	4928      	ldr	r1, [pc, #160]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 8001664:	4013      	ands	r3, r2
 8001666:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d006      	beq.n	8001682 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001674:	4b23      	ldr	r3, [pc, #140]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	4922      	ldr	r1, [pc, #136]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	43db      	mvns	r3, r3
 800168a:	491e      	ldr	r1, [pc, #120]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 800168c:	4013      	ands	r3, r2
 800168e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4918      	ldr	r1, [pc, #96]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016aa:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4914      	ldr	r1, [pc, #80]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d021      	beq.n	8001708 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	490e      	ldr	r1, [pc, #56]	@ (8001704 <HAL_GPIO_Init+0x2d0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
 80016d0:	e021      	b.n	8001716 <HAL_GPIO_Init+0x2e2>
 80016d2:	bf00      	nop
 80016d4:	10320000 	.word	0x10320000
 80016d8:	10310000 	.word	0x10310000
 80016dc:	10220000 	.word	0x10220000
 80016e0:	10210000 	.word	0x10210000
 80016e4:	10120000 	.word	0x10120000
 80016e8:	10110000 	.word	0x10110000
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40010800 	.word	0x40010800
 80016f8:	40010c00 	.word	0x40010c00
 80016fc:	40011000 	.word	0x40011000
 8001700:	40011400 	.word	0x40011400
 8001704:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001708:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <HAL_GPIO_Init+0x304>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	43db      	mvns	r3, r3
 8001710:	4909      	ldr	r1, [pc, #36]	@ (8001738 <HAL_GPIO_Init+0x304>)
 8001712:	4013      	ands	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	3301      	adds	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	f47f ae8e 	bne.w	8001448 <HAL_GPIO_Init+0x14>
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	372c      	adds	r7, #44	@ 0x2c
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	40010400 	.word	0x40010400

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001758:	e003      	b.n	8001762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	041a      	lsls	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	611a      	str	r2, [r3, #16]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e12b      	b.n	80019d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d106      	bne.n	8001798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff f8ea 	bl	800096c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2224      	movs	r2, #36	@ 0x24
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0201 	bic.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017d0:	f002 f9b8 	bl	8003b44 <HAL_RCC_GetPCLK1Freq>
 80017d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	4a81      	ldr	r2, [pc, #516]	@ (80019e0 <HAL_I2C_Init+0x274>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d807      	bhi.n	80017f0 <HAL_I2C_Init+0x84>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4a80      	ldr	r2, [pc, #512]	@ (80019e4 <HAL_I2C_Init+0x278>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	bf94      	ite	ls
 80017e8:	2301      	movls	r3, #1
 80017ea:	2300      	movhi	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	e006      	b.n	80017fe <HAL_I2C_Init+0x92>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4a7d      	ldr	r2, [pc, #500]	@ (80019e8 <HAL_I2C_Init+0x27c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	bf94      	ite	ls
 80017f8:	2301      	movls	r3, #1
 80017fa:	2300      	movhi	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e0e7      	b.n	80019d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4a78      	ldr	r2, [pc, #480]	@ (80019ec <HAL_I2C_Init+0x280>)
 800180a:	fba2 2303 	umull	r2, r3, r2, r3
 800180e:	0c9b      	lsrs	r3, r3, #18
 8001810:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a6a      	ldr	r2, [pc, #424]	@ (80019e0 <HAL_I2C_Init+0x274>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d802      	bhi.n	8001840 <HAL_I2C_Init+0xd4>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3301      	adds	r3, #1
 800183e:	e009      	b.n	8001854 <HAL_I2C_Init+0xe8>
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	4a69      	ldr	r2, [pc, #420]	@ (80019f0 <HAL_I2C_Init+0x284>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	099b      	lsrs	r3, r3, #6
 8001852:	3301      	adds	r3, #1
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	430b      	orrs	r3, r1
 800185a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001866:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	495c      	ldr	r1, [pc, #368]	@ (80019e0 <HAL_I2C_Init+0x274>)
 8001870:	428b      	cmp	r3, r1
 8001872:	d819      	bhi.n	80018a8 <HAL_I2C_Init+0x13c>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1e59      	subs	r1, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001882:	1c59      	adds	r1, r3, #1
 8001884:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001888:	400b      	ands	r3, r1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00a      	beq.n	80018a4 <HAL_I2C_Init+0x138>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1e59      	subs	r1, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fbb1 f3f3 	udiv	r3, r1, r3
 800189c:	3301      	adds	r3, #1
 800189e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a2:	e051      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 80018a4:	2304      	movs	r3, #4
 80018a6:	e04f      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d111      	bne.n	80018d4 <HAL_I2C_Init+0x168>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1e58      	subs	r0, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	440b      	add	r3, r1
 80018be:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf0c      	ite	eq
 80018cc:	2301      	moveq	r3, #1
 80018ce:	2300      	movne	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	e012      	b.n	80018fa <HAL_I2C_Init+0x18e>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1e58      	subs	r0, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	0099      	lsls	r1, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ea:	3301      	adds	r3, #1
 80018ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf0c      	ite	eq
 80018f4:	2301      	moveq	r3, #1
 80018f6:	2300      	movne	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_Init+0x196>
 80018fe:	2301      	movs	r3, #1
 8001900:	e022      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10e      	bne.n	8001928 <HAL_I2C_Init+0x1bc>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1e58      	subs	r0, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6859      	ldr	r1, [r3, #4]
 8001912:	460b      	mov	r3, r1
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	440b      	add	r3, r1
 8001918:	fbb0 f3f3 	udiv	r3, r0, r3
 800191c:	3301      	adds	r3, #1
 800191e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001922:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001926:	e00f      	b.n	8001948 <HAL_I2C_Init+0x1dc>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1e58      	subs	r0, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	0099      	lsls	r1, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	fbb0 f3f3 	udiv	r3, r0, r3
 800193e:	3301      	adds	r3, #1
 8001940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001944:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	6809      	ldr	r1, [r1, #0]
 800194c:	4313      	orrs	r3, r2
 800194e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001976:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6911      	ldr	r1, [r2, #16]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68d2      	ldr	r2, [r2, #12]
 8001982:	4311      	orrs	r1, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	430b      	orrs	r3, r1
 800198a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	000186a0 	.word	0x000186a0
 80019e4:	001e847f 	.word	0x001e847f
 80019e8:	003d08ff 	.word	0x003d08ff
 80019ec:	431bde83 	.word	0x431bde83
 80019f0:	10624dd3 	.word	0x10624dd3

080019f4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a06:	2b80      	cmp	r3, #128	@ 0x80
 8001a08:	d103      	bne.n	8001a12 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  }
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a34:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a3c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a44:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b10      	cmp	r3, #16
 8001a4a:	d003      	beq.n	8001a54 <HAL_I2C_EV_IRQHandler+0x38>
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2b40      	cmp	r3, #64	@ 0x40
 8001a50:	f040 80b1 	bne.w	8001bb6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10d      	bne.n	8001a8a <HAL_I2C_EV_IRQHandler+0x6e>
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001a74:	d003      	beq.n	8001a7e <HAL_I2C_EV_IRQHandler+0x62>
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001a7c:	d101      	bne.n	8001a82 <HAL_I2C_EV_IRQHandler+0x66>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_I2C_EV_IRQHandler+0x68>
 8001a82:	2300      	movs	r3, #0
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	f000 8114 	beq.w	8001cb2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00b      	beq.n	8001aac <HAL_I2C_EV_IRQHandler+0x90>
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f001 fc6c 	bl	800337c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 fd6b 	bl	8002580 <I2C_Master_SB>
 8001aaa:	e083      	b.n	8001bb4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <HAL_I2C_EV_IRQHandler+0xac>
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 fde2 	bl	800268a <I2C_Master_ADD10>
 8001ac6:	e075      	b.n	8001bb4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d008      	beq.n	8001ae4 <HAL_I2C_EV_IRQHandler+0xc8>
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fdfd 	bl	80026dc <I2C_Master_ADDR>
 8001ae2:	e067      	b.n	8001bb4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d036      	beq.n	8001b5c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001afc:	f000 80db 	beq.w	8001cb6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00d      	beq.n	8001b26 <HAL_I2C_EV_IRQHandler+0x10a>
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_I2C_EV_IRQHandler+0x10a>
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d103      	bne.n	8001b26 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f9cb 	bl	8001eba <I2C_MasterTransmit_TXE>
 8001b24:	e046      	b.n	8001bb4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80c2 	beq.w	8001cb6 <HAL_I2C_EV_IRQHandler+0x29a>
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80bc 	beq.w	8001cb6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001b3e:	7bbb      	ldrb	r3, [r7, #14]
 8001b40:	2b21      	cmp	r3, #33	@ 0x21
 8001b42:	d103      	bne.n	8001b4c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fa54 	bl	8001ff2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b4a:	e0b4      	b.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b40      	cmp	r3, #64	@ 0x40
 8001b50:	f040 80b1 	bne.w	8001cb6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 fac2 	bl	80020de <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b5a:	e0ac      	b.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b6a:	f000 80a4 	beq.w	8001cb6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00d      	beq.n	8001b94 <HAL_I2C_EV_IRQHandler+0x178>
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d008      	beq.n	8001b94 <HAL_I2C_EV_IRQHandler+0x178>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d103      	bne.n	8001b94 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fb3e 	bl	800220e <I2C_MasterReceive_RXNE>
 8001b92:	e00f      	b.n	8001bb4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 808b 	beq.w	8001cb6 <HAL_I2C_EV_IRQHandler+0x29a>
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8085 	beq.w	8001cb6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fbf6 	bl	800239e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bb2:	e080      	b.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x29a>
 8001bb4:	e07f      	b.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d004      	beq.n	8001bc8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	e007      	b.n	8001bd8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d011      	beq.n	8001c06 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00c      	beq.n	8001c06 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001bfc:	69b9      	ldr	r1, [r7, #24]
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 ffc3 	bl	8002b8a <I2C_Slave_ADDR>
 8001c04:	e05a      	b.n	8001cbc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_I2C_EV_IRQHandler+0x206>
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fffe 	bl	8002c1c <I2C_Slave_STOPF>
 8001c20:	e04c      	b.n	8001cbc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c22:	7bbb      	ldrb	r3, [r7, #14]
 8001c24:	2b21      	cmp	r3, #33	@ 0x21
 8001c26:	d002      	beq.n	8001c2e <HAL_I2C_EV_IRQHandler+0x212>
 8001c28:	7bbb      	ldrb	r3, [r7, #14]
 8001c2a:	2b29      	cmp	r3, #41	@ 0x29
 8001c2c:	d120      	bne.n	8001c70 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00d      	beq.n	8001c54 <HAL_I2C_EV_IRQHandler+0x238>
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d008      	beq.n	8001c54 <HAL_I2C_EV_IRQHandler+0x238>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d103      	bne.n	8001c54 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 fee0 	bl	8002a12 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c52:	e032      	b.n	8001cba <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d02d      	beq.n	8001cba <HAL_I2C_EV_IRQHandler+0x29e>
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d028      	beq.n	8001cba <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 ff0f 	bl	8002a8c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c6e:	e024      	b.n	8001cba <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00d      	beq.n	8001c96 <HAL_I2C_EV_IRQHandler+0x27a>
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_I2C_EV_IRQHandler+0x27a>
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d103      	bne.n	8001c96 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 ff1c 	bl	8002acc <I2C_SlaveReceive_RXNE>
 8001c94:	e012      	b.n	8001cbc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00d      	beq.n	8001cbc <HAL_I2C_EV_IRQHandler+0x2a0>
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d008      	beq.n	8001cbc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 ff4c 	bl	8002b48 <I2C_SlaveReceive_BTF>
 8001cb0:	e004      	b.n	8001cbc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001cb2:	bf00      	nop
 8001cb4:	e002      	b.n	8001cbc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cb6:	bf00      	nop
 8001cb8:	e000      	b.n	8001cbc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001cbc:	3720      	adds	r7, #32
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b08a      	sub	sp, #40	@ 0x28
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ce4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d015      	beq.n	8001d1c <HAL_I2C_ER_IRQHandler+0x5a>
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d010      	beq.n	8001d1c <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001d0a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d1a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <HAL_I2C_ER_IRQHandler+0x80>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001d40:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d03e      	beq.n	8001dca <HAL_I2C_ER_IRQHandler+0x108>
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d039      	beq.n	8001dca <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8001d56:	7efb      	ldrb	r3, [r7, #27]
 8001d58:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d68:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001d70:	7ebb      	ldrb	r3, [r7, #26]
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d112      	bne.n	8001d9c <HAL_I2C_ER_IRQHandler+0xda>
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10f      	bne.n	8001d9c <HAL_I2C_ER_IRQHandler+0xda>
 8001d7c:	7cfb      	ldrb	r3, [r7, #19]
 8001d7e:	2b21      	cmp	r3, #33	@ 0x21
 8001d80:	d008      	beq.n	8001d94 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001d82:	7cfb      	ldrb	r3, [r7, #19]
 8001d84:	2b29      	cmp	r3, #41	@ 0x29
 8001d86:	d005      	beq.n	8001d94 <HAL_I2C_ER_IRQHandler+0xd2>
 8001d88:	7cfb      	ldrb	r3, [r7, #19]
 8001d8a:	2b28      	cmp	r3, #40	@ 0x28
 8001d8c:	d106      	bne.n	8001d9c <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b21      	cmp	r3, #33	@ 0x21
 8001d92:	d103      	bne.n	8001d9c <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f001 f871 	bl	8002e7c <I2C_Slave_AF>
 8001d9a:	e016      	b.n	8001dca <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001da4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001dae:	7efb      	ldrb	r3, [r7, #27]
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d002      	beq.n	8001dba <HAL_I2C_ER_IRQHandler+0xf8>
 8001db4:	7efb      	ldrb	r3, [r7, #27]
 8001db6:	2b40      	cmp	r3, #64	@ 0x40
 8001db8:	d107      	bne.n	8001dca <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dc8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00d      	beq.n	8001df0 <HAL_I2C_ER_IRQHandler+0x12e>
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d008      	beq.n	8001df0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001dee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d008      	beq.n	8001e08 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f001 f8ae 	bl	8002f64 <I2C_ITError>
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3728      	adds	r7, #40	@ 0x28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
 8001e64:	4613      	mov	r3, r2
 8001e66:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ed0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d150      	bne.n	8001f82 <I2C_MasterTransmit_TXE+0xc8>
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	2b21      	cmp	r3, #33	@ 0x21
 8001ee4:	d14d      	bne.n	8001f82 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d01d      	beq.n	8001f28 <I2C_MasterTransmit_TXE+0x6e>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	d01a      	beq.n	8001f28 <I2C_MasterTransmit_TXE+0x6e>
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ef8:	d016      	beq.n	8001f28 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f08:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2211      	movs	r2, #17
 8001f0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff75 	bl	8001e10 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f26:	e060      	b.n	8001fea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f36:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f46:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2220      	movs	r2, #32
 8001f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b40      	cmp	r3, #64	@ 0x40
 8001f60:	d107      	bne.n	8001f72 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ff8a 	bl	8001e84 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f70:	e03b      	b.n	8001fea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ff48 	bl	8001e10 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f80:	e033      	b.n	8001fea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	2b21      	cmp	r3, #33	@ 0x21
 8001f86:	d005      	beq.n	8001f94 <I2C_MasterTransmit_TXE+0xda>
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	2b40      	cmp	r3, #64	@ 0x40
 8001f8c:	d12d      	bne.n	8001fea <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	2b22      	cmp	r3, #34	@ 0x22
 8001f92:	d12a      	bne.n	8001fea <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d108      	bne.n	8001fb0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fac:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001fae:	e01c      	b.n	8001fea <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b40      	cmp	r3, #64	@ 0x40
 8001fba:	d103      	bne.n	8001fc4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f88e 	bl	80020de <I2C_MemoryTransmit_TXE_BTF>
}
 8001fc2:	e012      	b.n	8001fea <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc8:	781a      	ldrb	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001fe8:	e7ff      	b.n	8001fea <I2C_MasterTransmit_TXE+0x130>
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffe:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b21      	cmp	r3, #33	@ 0x21
 800200a:	d164      	bne.n	80020d6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d012      	beq.n	800203c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800203a:	e04c      	b.n	80020d6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b08      	cmp	r3, #8
 8002040:	d01d      	beq.n	800207e <I2C_MasterTransmit_BTF+0x8c>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b20      	cmp	r3, #32
 8002046:	d01a      	beq.n	800207e <I2C_MasterTransmit_BTF+0x8c>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800204e:	d016      	beq.n	800207e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800205e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2211      	movs	r2, #17
 8002064:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff feca 	bl	8001e10 <HAL_I2C_MasterTxCpltCallback>
}
 800207c:	e02b      	b.n	80020d6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800208c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800209c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b40      	cmp	r3, #64	@ 0x40
 80020b6:	d107      	bne.n	80020c8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff fedf 	bl	8001e84 <HAL_I2C_MemTxCpltCallback>
}
 80020c6:	e006      	b.n	80020d6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fe9d 	bl	8001e10 <HAL_I2C_MasterTxCpltCallback>
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d11d      	bne.n	8002132 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d10b      	bne.n	8002116 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002102:	b2da      	uxtb	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800210e:	1c9a      	adds	r2, r3, #2
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002114:	e077      	b.n	8002206 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800211a:	b29b      	uxth	r3, r3
 800211c:	121b      	asrs	r3, r3, #8
 800211e:	b2da      	uxtb	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002130:	e069      	b.n	8002206 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002136:	2b01      	cmp	r3, #1
 8002138:	d10b      	bne.n	8002152 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800213e:	b2da      	uxtb	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002150:	e059      	b.n	8002206 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002156:	2b02      	cmp	r3, #2
 8002158:	d152      	bne.n	8002200 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	2b22      	cmp	r3, #34	@ 0x22
 800215e:	d10d      	bne.n	800217c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800216e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800217a:	e044      	b.n	8002206 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d015      	beq.n	80021b2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	2b21      	cmp	r3, #33	@ 0x21
 800218a:	d112      	bne.n	80021b2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002190:	781a      	ldrb	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80021b0:	e029      	b.n	8002206 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d124      	bne.n	8002206 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	2b21      	cmp	r3, #33	@ 0x21
 80021c0:	d121      	bne.n	8002206 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80021d0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021e0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff fe43 	bl	8001e84 <HAL_I2C_MemTxCpltCallback>
}
 80021fe:	e002      	b.n	8002206 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff fbf7 	bl	80019f4 <I2C_Flush_DR>
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b22      	cmp	r3, #34	@ 0x22
 8002220:	f040 80b9 	bne.w	8002396 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002228:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222e:	b29b      	uxth	r3, r3
 8002230:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b03      	cmp	r3, #3
 8002236:	d921      	bls.n	800227c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b03      	cmp	r3, #3
 8002266:	f040 8096 	bne.w	8002396 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002278:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800227a:	e08c      	b.n	8002396 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	2b02      	cmp	r3, #2
 8002282:	d07f      	beq.n	8002384 <I2C_MasterReceive_RXNE+0x176>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d002      	beq.n	8002290 <I2C_MasterReceive_RXNE+0x82>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d179      	bne.n	8002384 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f001 f841 	bl	8003318 <I2C_WaitOnSTOPRequestThroughIT>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d14c      	bne.n	8002336 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80022ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b40      	cmp	r3, #64	@ 0x40
 80022f4:	d10a      	bne.n	800230c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7fe f841 	bl	800038c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800230a:	e044      	b.n	8002396 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b08      	cmp	r3, #8
 8002318:	d002      	beq.n	8002320 <I2C_MasterReceive_RXNE+0x112>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b20      	cmp	r3, #32
 800231e:	d103      	bne.n	8002328 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	@ 0x30
 8002326:	e002      	b.n	800232e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2212      	movs	r2, #18
 800232c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fd77 	bl	8001e22 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002334:	e02f      	b.n	8002396 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002344:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff fd8a 	bl	8001e96 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002382:	e008      	b.n	8002396 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002392:	605a      	str	r2, [r3, #4]
}
 8002394:	e7ff      	b.n	8002396 <I2C_MasterReceive_RXNE+0x188>
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023aa:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d11b      	bne.n	80023ee <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023c4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80023ec:	e0c4      	b.n	8002578 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d129      	bne.n	800244c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002406:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b04      	cmp	r3, #4
 800240c:	d00a      	beq.n	8002424 <I2C_MasterReceive_BTF+0x86>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d007      	beq.n	8002424 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002422:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800244a:	e095      	b.n	8002578 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d17d      	bne.n	8002552 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d002      	beq.n	8002462 <I2C_MasterReceive_BTF+0xc4>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b10      	cmp	r3, #16
 8002460:	d108      	bne.n	8002474 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	e016      	b.n	80024a2 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b04      	cmp	r3, #4
 8002478:	d002      	beq.n	8002480 <I2C_MasterReceive_BTF+0xe2>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d108      	bne.n	8002492 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e007      	b.n	80024a2 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024be:	b29b      	uxth	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80024fc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b40      	cmp	r3, #64	@ 0x40
 8002510:	d10a      	bne.n	8002528 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7fd ff33 	bl	800038c <HAL_I2C_MemRxCpltCallback>
}
 8002526:	e027      	b.n	8002578 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b08      	cmp	r3, #8
 8002534:	d002      	beq.n	800253c <I2C_MasterReceive_BTF+0x19e>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b20      	cmp	r3, #32
 800253a:	d103      	bne.n	8002544 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	631a      	str	r2, [r3, #48]	@ 0x30
 8002542:	e002      	b.n	800254a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2212      	movs	r2, #18
 8002548:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff fc69 	bl	8001e22 <HAL_I2C_MasterRxCpltCallback>
}
 8002550:	e012      	b.n	8002578 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b40      	cmp	r3, #64	@ 0x40
 8002592:	d117      	bne.n	80025c4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002598:	2b00      	cmp	r3, #0
 800259a:	d109      	bne.n	80025b0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025ac:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80025ae:	e067      	b.n	8002680 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	611a      	str	r2, [r3, #16]
}
 80025c2:	e05d      	b.n	8002680 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025cc:	d133      	bne.n	8002636 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b21      	cmp	r3, #33	@ 0x21
 80025d8:	d109      	bne.n	80025ee <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025ea:	611a      	str	r2, [r3, #16]
 80025ec:	e008      	b.n	8002600 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <I2C_Master_SB+0x92>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d108      	bne.n	8002624 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002616:	2b00      	cmp	r3, #0
 8002618:	d032      	beq.n	8002680 <I2C_Master_SB+0x100>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800261e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002620:	2b00      	cmp	r3, #0
 8002622:	d02d      	beq.n	8002680 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002632:	605a      	str	r2, [r3, #4]
}
 8002634:	e024      	b.n	8002680 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10e      	bne.n	800265c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	b29b      	uxth	r3, r3
 8002644:	11db      	asrs	r3, r3, #7
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f003 0306 	and.w	r3, r3, #6
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f063 030f 	orn	r3, r3, #15
 8002652:	b2da      	uxtb	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	611a      	str	r2, [r3, #16]
}
 800265a:	e011      	b.n	8002680 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002660:	2b01      	cmp	r3, #1
 8002662:	d10d      	bne.n	8002680 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002668:	b29b      	uxth	r3, r3
 800266a:	11db      	asrs	r3, r3, #7
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f003 0306 	and.w	r3, r3, #6
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f063 030e 	orn	r3, r3, #14
 8002678:	b2da      	uxtb	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	611a      	str	r2, [r3, #16]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	b2da      	uxtb	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d004      	beq.n	80026b0 <I2C_Master_ADD10+0x26>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d108      	bne.n	80026c2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00c      	beq.n	80026d2 <I2C_Master_ADD10+0x48>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026d0:	605a      	str	r2, [r3, #4]
  }
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80026dc:	b480      	push	{r7}
 80026de:	b091      	sub	sp, #68	@ 0x44
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b22      	cmp	r3, #34	@ 0x22
 8002704:	f040 8174 	bne.w	80029f0 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10f      	bne.n	8002730 <I2C_Master_ADDR+0x54>
 8002710:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002714:	2b40      	cmp	r3, #64	@ 0x40
 8002716:	d10b      	bne.n	8002730 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002718:	2300      	movs	r3, #0
 800271a:	633b      	str	r3, [r7, #48]	@ 0x30
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	633b      	str	r3, [r7, #48]	@ 0x30
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	633b      	str	r3, [r7, #48]	@ 0x30
 800272c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272e:	e16b      	b.n	8002a08 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002734:	2b00      	cmp	r3, #0
 8002736:	d11d      	bne.n	8002774 <I2C_Master_ADDR+0x98>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002740:	d118      	bne.n	8002774 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002742:	2300      	movs	r3, #0
 8002744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002766:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	651a      	str	r2, [r3, #80]	@ 0x50
 8002772:	e149      	b.n	8002a08 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d113      	bne.n	80027a6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277e:	2300      	movs	r3, #0
 8002780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	62bb      	str	r3, [r7, #40]	@ 0x28
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002792:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e120      	b.n	80029e8 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	f040 808a 	bne.w	80028c6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80027b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027b8:	d137      	bne.n	800282a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027c8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027d8:	d113      	bne.n	8002802 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027e8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	e0f2      	b.n	80029e8 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	623b      	str	r3, [r7, #32]
 8002816:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e0de      	b.n	80029e8 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800282a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800282c:	2b08      	cmp	r3, #8
 800282e:	d02e      	beq.n	800288e <I2C_Master_ADDR+0x1b2>
 8002830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002832:	2b20      	cmp	r3, #32
 8002834:	d02b      	beq.n	800288e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002838:	2b12      	cmp	r3, #18
 800283a:	d102      	bne.n	8002842 <I2C_Master_ADDR+0x166>
 800283c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283e:	2b01      	cmp	r3, #1
 8002840:	d125      	bne.n	800288e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002844:	2b04      	cmp	r3, #4
 8002846:	d00e      	beq.n	8002866 <I2C_Master_ADDR+0x18a>
 8002848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800284a:	2b02      	cmp	r3, #2
 800284c:	d00b      	beq.n	8002866 <I2C_Master_ADDR+0x18a>
 800284e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002850:	2b10      	cmp	r3, #16
 8002852:	d008      	beq.n	8002866 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e007      	b.n	8002876 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002874:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	e0ac      	b.n	80029e8 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800289c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e090      	b.n	80029e8 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d158      	bne.n	8002982 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80028d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d021      	beq.n	800291a <I2C_Master_ADDR+0x23e>
 80028d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d01e      	beq.n	800291a <I2C_Master_ADDR+0x23e>
 80028dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d01b      	beq.n	800291a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028f0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e012      	b.n	8002940 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002928:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800294a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800294e:	d14b      	bne.n	80029e8 <I2C_Master_ADDR+0x30c>
 8002950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002952:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002956:	d00b      	beq.n	8002970 <I2C_Master_ADDR+0x294>
 8002958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800295a:	2b01      	cmp	r3, #1
 800295c:	d008      	beq.n	8002970 <I2C_Master_ADDR+0x294>
 800295e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002960:	2b08      	cmp	r3, #8
 8002962:	d005      	beq.n	8002970 <I2C_Master_ADDR+0x294>
 8002964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002966:	2b10      	cmp	r3, #16
 8002968:	d002      	beq.n	8002970 <I2C_Master_ADDR+0x294>
 800296a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800296c:	2b20      	cmp	r3, #32
 800296e:	d13b      	bne.n	80029e8 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	e032      	b.n	80029e8 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002990:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800299c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029a0:	d117      	bne.n	80029d2 <I2C_Master_ADDR+0x2f6>
 80029a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029a8:	d00b      	beq.n	80029c2 <I2C_Master_ADDR+0x2e6>
 80029aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d008      	beq.n	80029c2 <I2C_Master_ADDR+0x2e6>
 80029b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d005      	beq.n	80029c2 <I2C_Master_ADDR+0x2e6>
 80029b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	d002      	beq.n	80029c2 <I2C_Master_ADDR+0x2e6>
 80029bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d107      	bne.n	80029d2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80029d0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80029ee:	e00b      	b.n	8002a08 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
}
 8002a06:	e7ff      	b.n	8002a08 <I2C_Master_ADDR+0x32c>
 8002a08:	bf00      	nop
 8002a0a:	3744      	adds	r7, #68	@ 0x44
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a20:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d02b      	beq.n	8002a84 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d114      	bne.n	8002a84 <I2C_SlaveTransmit_TXE+0x72>
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	2b29      	cmp	r3, #41	@ 0x29
 8002a5e:	d111      	bne.n	8002a84 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a6e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2221      	movs	r2, #33	@ 0x21
 8002a74:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2228      	movs	r2, #40	@ 0x28
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff f9d8 	bl	8001e34 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d011      	beq.n	8002ac2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa2:	781a      	ldrb	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ada:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d02c      	beq.n	8002b40 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d114      	bne.n	8002b40 <I2C_SlaveReceive_RXNE+0x74>
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b1a:	d111      	bne.n	8002b40 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b2a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2222      	movs	r2, #34	@ 0x22
 8002b30:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2228      	movs	r2, #40	@ 0x28
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff f983 	bl	8001e46 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d012      	beq.n	8002b80 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ba4:	2b28      	cmp	r3, #40	@ 0x28
 8002ba6:	d125      	bne.n	8002bf4 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bb6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d103      	bne.n	8002bd8 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	81bb      	strh	r3, [r7, #12]
 8002bd6:	e002      	b.n	8002bde <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002be6:	89ba      	ldrh	r2, [r7, #12]
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	4619      	mov	r1, r3
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff f933 	bl	8001e58 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002bf2:	e00e      	b.n	8002c12 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c2a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c3a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c68:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c78:	d172      	bne.n	8002d60 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	2b22      	cmp	r3, #34	@ 0x22
 8002c7e:	d002      	beq.n	8002c86 <I2C_Slave_STOPF+0x6a>
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c84:	d135      	bne.n	8002cf2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	f043 0204 	orr.w	r2, r3, #4
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe fbaa 	bl	8001418 <HAL_DMA_GetState>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d049      	beq.n	8002d5e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cce:	4a69      	ldr	r2, [pc, #420]	@ (8002e74 <I2C_Slave_STOPF+0x258>)
 8002cd0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe fa20 	bl	800111c <HAL_DMA_Abort_IT>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d03d      	beq.n	8002d5e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cec:	4610      	mov	r0, r2
 8002cee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002cf0:	e035      	b.n	8002d5e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	f043 0204 	orr.w	r2, r3, #4
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe fb74 	bl	8001418 <HAL_DMA_GetState>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d014      	beq.n	8002d60 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3a:	4a4e      	ldr	r2, [pc, #312]	@ (8002e74 <I2C_Slave_STOPF+0x258>)
 8002d3c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fe f9ea 	bl	800111c <HAL_DMA_Abort_IT>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4798      	blx	r3
 8002d5c:	e000      	b.n	8002d60 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d5e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d03e      	beq.n	8002de8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d112      	bne.n	8002d9e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da8:	2b40      	cmp	r3, #64	@ 0x40
 8002daa:	d112      	bne.n	8002dd2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	f043 0204 	orr.w	r2, r3, #4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f8b7 	bl	8002f64 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002df6:	e039      	b.n	8002e6c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dfc:	d109      	bne.n	8002e12 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2228      	movs	r2, #40	@ 0x28
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff f81a 	bl	8001e46 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b28      	cmp	r3, #40	@ 0x28
 8002e1c:	d111      	bne.n	8002e42 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a15      	ldr	r2, [pc, #84]	@ (8002e78 <I2C_Slave_STOPF+0x25c>)
 8002e22:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff f819 	bl	8001e72 <HAL_I2C_ListenCpltCallback>
}
 8002e40:	e014      	b.n	8002e6c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	2b22      	cmp	r3, #34	@ 0x22
 8002e48:	d002      	beq.n	8002e50 <I2C_Slave_STOPF+0x234>
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b22      	cmp	r3, #34	@ 0x22
 8002e4e:	d10d      	bne.n	8002e6c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe ffed 	bl	8001e46 <HAL_I2C_SlaveRxCpltCallback>
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	080031c9 	.word	0x080031c9
 8002e78:	ffff0000 	.word	0xffff0000

08002e7c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e90:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d002      	beq.n	8002e9e <I2C_Slave_AF+0x22>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d129      	bne.n	8002ef2 <I2C_Slave_AF+0x76>
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	2b28      	cmp	r3, #40	@ 0x28
 8002ea2:	d126      	bne.n	8002ef2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a2e      	ldr	r2, [pc, #184]	@ (8002f60 <I2C_Slave_AF+0xe4>)
 8002ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002eb8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ec2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ed2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fe ffc1 	bl	8001e72 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002ef0:	e031      	b.n	8002f56 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b21      	cmp	r3, #33	@ 0x21
 8002ef6:	d129      	bne.n	8002f4c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a19      	ldr	r2, [pc, #100]	@ (8002f60 <I2C_Slave_AF+0xe4>)
 8002efc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2221      	movs	r2, #33	@ 0x21
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f22:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f2c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f3c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fe fd58 	bl	80019f4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7fe ff75 	bl	8001e34 <HAL_I2C_SlaveTxCpltCallback>
}
 8002f4a:	e004      	b.n	8002f56 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f54:	615a      	str	r2, [r3, #20]
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	ffff0000 	.word	0xffff0000

08002f64 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f72:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f7a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002f7c:	7bbb      	ldrb	r3, [r7, #14]
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d002      	beq.n	8002f88 <I2C_ITError+0x24>
 8002f82:	7bbb      	ldrb	r3, [r7, #14]
 8002f84:	2b40      	cmp	r3, #64	@ 0x40
 8002f86:	d10a      	bne.n	8002f9e <I2C_ITError+0x3a>
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	2b22      	cmp	r3, #34	@ 0x22
 8002f8c:	d107      	bne.n	8002f9e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f9c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002fa4:	2b28      	cmp	r3, #40	@ 0x28
 8002fa6:	d107      	bne.n	8002fb8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2228      	movs	r2, #40	@ 0x28
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002fb6:	e015      	b.n	8002fe4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fc6:	d00a      	beq.n	8002fde <I2C_ITError+0x7a>
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	2b60      	cmp	r3, #96	@ 0x60
 8002fcc:	d007      	beq.n	8002fde <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ff2:	d162      	bne.n	80030ba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003002:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003008:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d020      	beq.n	8003054 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003016:	4a6a      	ldr	r2, [pc, #424]	@ (80031c0 <I2C_ITError+0x25c>)
 8003018:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe f87c 	bl	800111c <HAL_DMA_Abort_IT>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8089 	beq.w	800313e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800304e:	4610      	mov	r0, r2
 8003050:	4798      	blx	r3
 8003052:	e074      	b.n	800313e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003058:	4a59      	ldr	r2, [pc, #356]	@ (80031c0 <I2C_ITError+0x25c>)
 800305a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe f85b 	bl	800111c <HAL_DMA_Abort_IT>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d068      	beq.n	800313e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003076:	2b40      	cmp	r3, #64	@ 0x40
 8003078:	d10b      	bne.n	8003092 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030b4:	4610      	mov	r0, r2
 80030b6:	4798      	blx	r3
 80030b8:	e041      	b.n	800313e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b60      	cmp	r3, #96	@ 0x60
 80030c4:	d125      	bne.n	8003112 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030de:	2b40      	cmp	r3, #64	@ 0x40
 80030e0:	d10b      	bne.n	80030fa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe fecc 	bl	8001ea8 <HAL_I2C_AbortCpltCallback>
 8003110:	e015      	b.n	800313e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311c:	2b40      	cmp	r3, #64	@ 0x40
 800311e:	d10b      	bne.n	8003138 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7fe feac 	bl	8001e96 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10e      	bne.n	800316c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003154:	2b00      	cmp	r3, #0
 8003156:	d109      	bne.n	800316c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800315e:	2b00      	cmp	r3, #0
 8003160:	d104      	bne.n	800316c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800317a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003182:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b04      	cmp	r3, #4
 800318e:	d113      	bne.n	80031b8 <I2C_ITError+0x254>
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b28      	cmp	r3, #40	@ 0x28
 8003194:	d110      	bne.n	80031b8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a0a      	ldr	r2, [pc, #40]	@ (80031c4 <I2C_ITError+0x260>)
 800319a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe fe5d 	bl	8001e72 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	080031c9 	.word	0x080031c9
 80031c4:	ffff0000 	.word	0xffff0000

080031c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80031e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003310 <I2C_DMAAbort+0x148>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	08db      	lsrs	r3, r3, #3
 80031e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003314 <I2C_DMAAbort+0x14c>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	0a1a      	lsrs	r2, r3, #8
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	00da      	lsls	r2, r3, #3
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	f043 0220 	orr.w	r2, r3, #32
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800320e:	e00a      	b.n	8003226 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3b01      	subs	r3, #1
 8003214:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003224:	d0ea      	beq.n	80031fc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003232:	2200      	movs	r2, #0
 8003234:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003242:	2200      	movs	r2, #0
 8003244:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003254:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003268:	2200      	movs	r2, #0
 800326a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003278:	2200      	movs	r2, #0
 800327a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b60      	cmp	r3, #96	@ 0x60
 8003296:	d10e      	bne.n	80032b6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2200      	movs	r2, #0
 80032ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80032ae:	6978      	ldr	r0, [r7, #20]
 80032b0:	f7fe fdfa 	bl	8001ea8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032b4:	e027      	b.n	8003306 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032b6:	7cfb      	ldrb	r3, [r7, #19]
 80032b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032bc:	2b28      	cmp	r3, #40	@ 0x28
 80032be:	d117      	bne.n	80032f0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2228      	movs	r2, #40	@ 0x28
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80032ee:	e007      	b.n	8003300 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003300:	6978      	ldr	r0, [r7, #20]
 8003302:	f7fe fdc8 	bl	8001e96 <HAL_I2C_ErrorCallback>
}
 8003306:	bf00      	nop
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000000 	.word	0x20000000
 8003314:	14f8b589 	.word	0x14f8b589

08003318 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003324:	4b13      	ldr	r3, [pc, #76]	@ (8003374 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	08db      	lsrs	r3, r3, #3
 800332a:	4a13      	ldr	r2, [pc, #76]	@ (8003378 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	0a1a      	lsrs	r2, r3, #8
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3b01      	subs	r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d107      	bne.n	8003356 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	f043 0220 	orr.w	r2, r3, #32
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e008      	b.n	8003368 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003364:	d0e9      	beq.n	800333a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000
 8003378:	14f8b589 	.word	0x14f8b589

0800337c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003388:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800338c:	d103      	bne.n	8003396 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003394:	e007      	b.n	80033a6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800339e:	d102      	bne.n	80033a6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2208      	movs	r2, #8
 80033a4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e272      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8087 	beq.w	80034de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d0:	4b92      	ldr	r3, [pc, #584]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d00c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033dc:	4b8f      	ldr	r3, [pc, #572]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d112      	bne.n	800340e <HAL_RCC_OscConfig+0x5e>
 80033e8:	4b8c      	ldr	r3, [pc, #560]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f4:	d10b      	bne.n	800340e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f6:	4b89      	ldr	r3, [pc, #548]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d06c      	beq.n	80034dc <HAL_RCC_OscConfig+0x12c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d168      	bne.n	80034dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e24c      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003416:	d106      	bne.n	8003426 <HAL_RCC_OscConfig+0x76>
 8003418:	4b80      	ldr	r3, [pc, #512]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a7f      	ldr	r2, [pc, #508]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 800341e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	e02e      	b.n	8003484 <HAL_RCC_OscConfig+0xd4>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0x98>
 800342e:	4b7b      	ldr	r3, [pc, #492]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a7a      	ldr	r2, [pc, #488]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b78      	ldr	r3, [pc, #480]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a77      	ldr	r2, [pc, #476]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003440:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e01d      	b.n	8003484 <HAL_RCC_OscConfig+0xd4>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0xbc>
 8003452:	4b72      	ldr	r3, [pc, #456]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a71      	ldr	r2, [pc, #452]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b6f      	ldr	r3, [pc, #444]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6e      	ldr	r2, [pc, #440]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0xd4>
 800346c:	4b6b      	ldr	r3, [pc, #428]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a6a      	ldr	r2, [pc, #424]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	4b68      	ldr	r3, [pc, #416]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a67      	ldr	r2, [pc, #412]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 800347e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003482:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fd fca2 	bl	8000dd4 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fd fc9e 	bl	8000dd4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	@ 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e200      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b5d      	ldr	r3, [pc, #372]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0xe4>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fd fc8e 	bl	8000dd4 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034bc:	f7fd fc8a 	bl	8000dd4 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	@ 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e1ec      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ce:	4b53      	ldr	r3, [pc, #332]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x10c>
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d063      	beq.n	80035b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ea:	4b4c      	ldr	r3, [pc, #304]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034f6:	4b49      	ldr	r3, [pc, #292]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d11c      	bne.n	800353c <HAL_RCC_OscConfig+0x18c>
 8003502:	4b46      	ldr	r3, [pc, #280]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d116      	bne.n	800353c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	4b43      	ldr	r3, [pc, #268]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_RCC_OscConfig+0x176>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d001      	beq.n	8003526 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e1c0      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003526:	4b3d      	ldr	r3, [pc, #244]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4939      	ldr	r1, [pc, #228]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	e03a      	b.n	80035b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003544:	4b36      	ldr	r3, [pc, #216]	@ (8003620 <HAL_RCC_OscConfig+0x270>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354a:	f7fd fc43 	bl	8000dd4 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003552:	f7fd fc3f 	bl	8000dd4 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e1a1      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	4b2d      	ldr	r3, [pc, #180]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003570:	4b2a      	ldr	r3, [pc, #168]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4927      	ldr	r1, [pc, #156]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003580:	4313      	orrs	r3, r2
 8003582:	600b      	str	r3, [r1, #0]
 8003584:	e015      	b.n	80035b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003586:	4b26      	ldr	r3, [pc, #152]	@ (8003620 <HAL_RCC_OscConfig+0x270>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fd fc22 	bl	8000dd4 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003594:	f7fd fc1e 	bl	8000dd4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e180      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a6:	4b1d      	ldr	r3, [pc, #116]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d03a      	beq.n	8003634 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d019      	beq.n	80035fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c6:	4b17      	ldr	r3, [pc, #92]	@ (8003624 <HAL_RCC_OscConfig+0x274>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035cc:	f7fd fc02 	bl	8000dd4 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d4:	f7fd fbfe 	bl	8000dd4 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e160      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035f2:	2001      	movs	r0, #1
 80035f4:	f000 fafe 	bl	8003bf4 <RCC_Delay>
 80035f8:	e01c      	b.n	8003634 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003624 <HAL_RCC_OscConfig+0x274>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003600:	f7fd fbe8 	bl	8000dd4 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003606:	e00f      	b.n	8003628 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003608:	f7fd fbe4 	bl	8000dd4 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d908      	bls.n	8003628 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e146      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	42420000 	.word	0x42420000
 8003624:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003628:	4b92      	ldr	r3, [pc, #584]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e9      	bne.n	8003608 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80a6 	beq.w	800378e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003642:	2300      	movs	r3, #0
 8003644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003646:	4b8b      	ldr	r3, [pc, #556]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10d      	bne.n	800366e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003652:	4b88      	ldr	r3, [pc, #544]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	4a87      	ldr	r2, [pc, #540]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800365c:	61d3      	str	r3, [r2, #28]
 800365e:	4b85      	ldr	r3, [pc, #532]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366a:	2301      	movs	r3, #1
 800366c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366e:	4b82      	ldr	r3, [pc, #520]	@ (8003878 <HAL_RCC_OscConfig+0x4c8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d118      	bne.n	80036ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800367a:	4b7f      	ldr	r3, [pc, #508]	@ (8003878 <HAL_RCC_OscConfig+0x4c8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a7e      	ldr	r2, [pc, #504]	@ (8003878 <HAL_RCC_OscConfig+0x4c8>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003686:	f7fd fba5 	bl	8000dd4 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368e:	f7fd fba1 	bl	8000dd4 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b64      	cmp	r3, #100	@ 0x64
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e103      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a0:	4b75      	ldr	r3, [pc, #468]	@ (8003878 <HAL_RCC_OscConfig+0x4c8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x312>
 80036b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	4a6e      	ldr	r2, [pc, #440]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	6213      	str	r3, [r2, #32]
 80036c0:	e02d      	b.n	800371e <HAL_RCC_OscConfig+0x36e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x334>
 80036ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	4a69      	ldr	r2, [pc, #420]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	6213      	str	r3, [r2, #32]
 80036d6:	4b67      	ldr	r3, [pc, #412]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	4a66      	ldr	r2, [pc, #408]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	6213      	str	r3, [r2, #32]
 80036e2:	e01c      	b.n	800371e <HAL_RCC_OscConfig+0x36e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b05      	cmp	r3, #5
 80036ea:	d10c      	bne.n	8003706 <HAL_RCC_OscConfig+0x356>
 80036ec:	4b61      	ldr	r3, [pc, #388]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	4a60      	ldr	r2, [pc, #384]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	f043 0304 	orr.w	r3, r3, #4
 80036f6:	6213      	str	r3, [r2, #32]
 80036f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	4a5d      	ldr	r2, [pc, #372]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	6213      	str	r3, [r2, #32]
 8003704:	e00b      	b.n	800371e <HAL_RCC_OscConfig+0x36e>
 8003706:	4b5b      	ldr	r3, [pc, #364]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	4a5a      	ldr	r2, [pc, #360]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	6213      	str	r3, [r2, #32]
 8003712:	4b58      	ldr	r3, [pc, #352]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	4a57      	ldr	r2, [pc, #348]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	f023 0304 	bic.w	r3, r3, #4
 800371c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d015      	beq.n	8003752 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003726:	f7fd fb55 	bl	8000dd4 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372c:	e00a      	b.n	8003744 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7fd fb51 	bl	8000dd4 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e0b1      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003744:	4b4b      	ldr	r3, [pc, #300]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0ee      	beq.n	800372e <HAL_RCC_OscConfig+0x37e>
 8003750:	e014      	b.n	800377c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003752:	f7fd fb3f 	bl	8000dd4 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fd fb3b 	bl	8000dd4 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e09b      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003770:	4b40      	ldr	r3, [pc, #256]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ee      	bne.n	800375a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d105      	bne.n	800378e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003782:	4b3c      	ldr	r3, [pc, #240]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	4a3b      	ldr	r2, [pc, #236]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800378c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8087 	beq.w	80038a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003798:	4b36      	ldr	r3, [pc, #216]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d061      	beq.n	8003868 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d146      	bne.n	800383a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ac:	4b33      	ldr	r3, [pc, #204]	@ (800387c <HAL_RCC_OscConfig+0x4cc>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7fd fb0f 	bl	8000dd4 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fd fb0b 	bl	8000dd4 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e06d      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037cc:	4b29      	ldr	r3, [pc, #164]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e0:	d108      	bne.n	80037f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037e2:	4b24      	ldr	r3, [pc, #144]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	4921      	ldr	r1, [pc, #132]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a19      	ldr	r1, [r3, #32]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	430b      	orrs	r3, r1
 8003806:	491b      	ldr	r1, [pc, #108]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800380c:	4b1b      	ldr	r3, [pc, #108]	@ (800387c <HAL_RCC_OscConfig+0x4cc>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fd fadf 	bl	8000dd4 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381a:	f7fd fadb 	bl	8000dd4 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e03d      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800382c:	4b11      	ldr	r3, [pc, #68]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x46a>
 8003838:	e035      	b.n	80038a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383a:	4b10      	ldr	r3, [pc, #64]	@ (800387c <HAL_RCC_OscConfig+0x4cc>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fd fac8 	bl	8000dd4 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003848:	f7fd fac4 	bl	8000dd4 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e026      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800385a:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x498>
 8003866:	e01e      	b.n	80038a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d107      	bne.n	8003880 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e019      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
 800387c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003880:	4b0b      	ldr	r3, [pc, #44]	@ (80038b0 <HAL_RCC_OscConfig+0x500>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	429a      	cmp	r2, r3
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389e:	429a      	cmp	r2, r3
 80038a0:	d001      	beq.n	80038a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021000 	.word	0x40021000

080038b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0d0      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d910      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b67      	ldr	r3, [pc, #412]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 0207 	bic.w	r2, r3, #7
 80038de:	4965      	ldr	r1, [pc, #404]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b63      	ldr	r3, [pc, #396]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0b8      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003910:	4b59      	ldr	r3, [pc, #356]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a58      	ldr	r2, [pc, #352]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800391a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003928:	4b53      	ldr	r3, [pc, #332]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a52      	ldr	r2, [pc, #328]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003932:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b50      	ldr	r3, [pc, #320]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	494d      	ldr	r1, [pc, #308]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d040      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b47      	ldr	r3, [pc, #284]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d115      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	4b41      	ldr	r3, [pc, #260]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e073      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	4b3d      	ldr	r3, [pc, #244]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06b      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003992:	4b39      	ldr	r3, [pc, #228]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f023 0203 	bic.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4936      	ldr	r1, [pc, #216]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a4:	f7fd fa16 	bl	8000dd4 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7fd fa12 	bl	8000dd4 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e053      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 020c 	and.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1eb      	bne.n	80039ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039d4:	4b27      	ldr	r3, [pc, #156]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d210      	bcs.n	8003a04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b24      	ldr	r3, [pc, #144]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 0207 	bic.w	r2, r3, #7
 80039ea:	4922      	ldr	r1, [pc, #136]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b20      	ldr	r3, [pc, #128]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e032      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a10:	4b19      	ldr	r3, [pc, #100]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4916      	ldr	r1, [pc, #88]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a2e:	4b12      	ldr	r3, [pc, #72]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	490e      	ldr	r1, [pc, #56]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a42:	f000 f821 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003a46:	4602      	mov	r2, r0
 8003a48:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	490a      	ldr	r1, [pc, #40]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c8>)
 8003a54:	5ccb      	ldrb	r3, [r1, r3]
 8003a56:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5a:	4a09      	ldr	r2, [pc, #36]	@ (8003a80 <HAL_RCC_ClockConfig+0x1cc>)
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a5e:	4b09      	ldr	r3, [pc, #36]	@ (8003a84 <HAL_RCC_ClockConfig+0x1d0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd f890 	bl	8000b88 <HAL_InitTick>

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40022000 	.word	0x40022000
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	08006ae0 	.word	0x08006ae0
 8003a80:	20000000 	.word	0x20000000
 8003a84:	20000004 	.word	0x20000004

08003a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d002      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d003      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0x36>
 8003ab6:	e027      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ab8:	4b19      	ldr	r3, [pc, #100]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aba:	613b      	str	r3, [r7, #16]
      break;
 8003abc:	e027      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	0c9b      	lsrs	r3, r3, #18
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	4a17      	ldr	r2, [pc, #92]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ac8:	5cd3      	ldrb	r3, [r2, r3]
 8003aca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d010      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ad6:	4b11      	ldr	r3, [pc, #68]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	0c5b      	lsrs	r3, r3, #17
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	4a11      	ldr	r2, [pc, #68]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ae2:	5cd3      	ldrb	r3, [r2, r3]
 8003ae4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aea:	fb03 f202 	mul.w	r2, r3, r2
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	e004      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a0c      	ldr	r2, [pc, #48]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003afc:	fb02 f303 	mul.w	r3, r2, r3
 8003b00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	613b      	str	r3, [r7, #16]
      break;
 8003b06:	e002      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b08:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b0a:	613b      	str	r3, [r7, #16]
      break;
 8003b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b0e:	693b      	ldr	r3, [r7, #16]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	007a1200 	.word	0x007a1200
 8003b24:	08006af8 	.word	0x08006af8
 8003b28:	08006b08 	.word	0x08006b08
 8003b2c:	003d0900 	.word	0x003d0900

08003b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b34:	4b02      	ldr	r3, [pc, #8]	@ (8003b40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b36:	681b      	ldr	r3, [r3, #0]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	20000000 	.word	0x20000000

08003b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b48:	f7ff fff2 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4b05      	ldr	r3, [pc, #20]	@ (8003b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	4903      	ldr	r1, [pc, #12]	@ (8003b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	08006af0 	.word	0x08006af0

08003b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b70:	f7ff ffde 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	0adb      	lsrs	r3, r3, #11
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	4903      	ldr	r1, [pc, #12]	@ (8003b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b82:	5ccb      	ldrb	r3, [r1, r3]
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	08006af0 	.word	0x08006af0

08003b94 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ba4:	4b11      	ldr	r3, [pc, #68]	@ (8003bec <HAL_RCC_GetClockConfig+0x58>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0203 	and.w	r2, r3, #3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bec <HAL_RCC_GetClockConfig+0x58>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <HAL_RCC_GetClockConfig+0x58>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003bc8:	4b08      	ldr	r3, [pc, #32]	@ (8003bec <HAL_RCC_GetClockConfig+0x58>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	08db      	lsrs	r3, r3, #3
 8003bce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bd6:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0207 	and.w	r2, r3, #7
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40022000 	.word	0x40022000

08003bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <RCC_Delay+0x34>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0a      	ldr	r2, [pc, #40]	@ (8003c2c <RCC_Delay+0x38>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0a5b      	lsrs	r3, r3, #9
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	fb02 f303 	mul.w	r3, r2, r3
 8003c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c10:	bf00      	nop
  }
  while (Delay --);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1e5a      	subs	r2, r3, #1
 8003c16:	60fa      	str	r2, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1f9      	bne.n	8003c10 <RCC_Delay+0x1c>
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	10624dd3 	.word	0x10624dd3

08003c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e041      	b.n	8003cc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f839 	bl	8003cce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4610      	mov	r0, r2
 8003c70:	f000 fa48 	bl	8004104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d001      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e03a      	b.n	8003d6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a18      	ldr	r2, [pc, #96]	@ (8003d78 <HAL_TIM_Base_Start_IT+0x98>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00e      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x58>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d22:	d009      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x58>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a14      	ldr	r2, [pc, #80]	@ (8003d7c <HAL_TIM_Base_Start_IT+0x9c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d004      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x58>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a13      	ldr	r2, [pc, #76]	@ (8003d80 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d111      	bne.n	8003d5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b06      	cmp	r3, #6
 8003d48:	d010      	beq.n	8003d6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5a:	e007      	b.n	8003d6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	40012c00 	.word	0x40012c00
 8003d7c:	40000400 	.word	0x40000400
 8003d80:	40000800 	.word	0x40000800

08003d84 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e041      	b.n	8003e1a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fc fe58 	bl	8000a60 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f000 f99e 	bl	8004104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01b      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f06f 0202 	mvn.w	r2, #2
 8003e56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f92e 	bl	80040ce <HAL_TIM_IC_CaptureCallback>
 8003e72:	e005      	b.n	8003e80 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f921 	bl	80040bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f930 	bl	80040e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d020      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01b      	beq.n	8003ed2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f06f 0204 	mvn.w	r2, #4
 8003ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f908 	bl	80040ce <HAL_TIM_IC_CaptureCallback>
 8003ebe:	e005      	b.n	8003ecc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f8fb 	bl	80040bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f90a 	bl	80040e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d020      	beq.n	8003f1e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01b      	beq.n	8003f1e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f06f 0208 	mvn.w	r2, #8
 8003eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f8e2 	bl	80040ce <HAL_TIM_IC_CaptureCallback>
 8003f0a:	e005      	b.n	8003f18 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f8d5 	bl	80040bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f8e4 	bl	80040e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d020      	beq.n	8003f6a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01b      	beq.n	8003f6a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f06f 0210 	mvn.w	r2, #16
 8003f3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2208      	movs	r2, #8
 8003f40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f8bc 	bl	80040ce <HAL_TIM_IC_CaptureCallback>
 8003f56:	e005      	b.n	8003f64 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f8af 	bl	80040bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f8be 	bl	80040e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00c      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f06f 0201 	mvn.w	r2, #1
 8003f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7fc fc9f 	bl	80008cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00c      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fb06 	bl	80045be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00c      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f88e 	bl	80040f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f003 0320 	and.w	r3, r3, #32
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00c      	beq.n	8003ffa <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f06f 0220 	mvn.w	r2, #32
 8003ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fad9 	bl	80045ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_TIM_OC_ConfigChannel+0x1e>
 800401e:	2302      	movs	r3, #2
 8004020:	e048      	b.n	80040b4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	d839      	bhi.n	80040a4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004030:	a201      	add	r2, pc, #4	@ (adr r2, 8004038 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	0800406d 	.word	0x0800406d
 800403c:	080040a5 	.word	0x080040a5
 8004040:	080040a5 	.word	0x080040a5
 8004044:	080040a5 	.word	0x080040a5
 8004048:	0800407b 	.word	0x0800407b
 800404c:	080040a5 	.word	0x080040a5
 8004050:	080040a5 	.word	0x080040a5
 8004054:	080040a5 	.word	0x080040a5
 8004058:	08004089 	.word	0x08004089
 800405c:	080040a5 	.word	0x080040a5
 8004060:	080040a5 	.word	0x080040a5
 8004064:	080040a5 	.word	0x080040a5
 8004068:	08004097 	.word	0x08004097
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f8b4 	bl	80041e0 <TIM_OC1_SetConfig>
      break;
 8004078:	e017      	b.n	80040aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	4618      	mov	r0, r3
 8004082:	f000 f913 	bl	80042ac <TIM_OC2_SetConfig>
      break;
 8004086:	e010      	b.n	80040aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 f976 	bl	8004380 <TIM_OC3_SetConfig>
      break;
 8004094:	e009      	b.n	80040aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f9d9 	bl	8004454 <TIM_OC4_SetConfig>
      break;
 80040a2:	e002      	b.n	80040aa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	75fb      	strb	r3, [r7, #23]
      break;
 80040a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr

080040ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr

080040e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr

080040f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr

08004104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a2f      	ldr	r2, [pc, #188]	@ (80041d4 <TIM_Base_SetConfig+0xd0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00b      	beq.n	8004134 <TIM_Base_SetConfig+0x30>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004122:	d007      	beq.n	8004134 <TIM_Base_SetConfig+0x30>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a2c      	ldr	r2, [pc, #176]	@ (80041d8 <TIM_Base_SetConfig+0xd4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <TIM_Base_SetConfig+0x30>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a2b      	ldr	r2, [pc, #172]	@ (80041dc <TIM_Base_SetConfig+0xd8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d108      	bne.n	8004146 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800413a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a22      	ldr	r2, [pc, #136]	@ (80041d4 <TIM_Base_SetConfig+0xd0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00b      	beq.n	8004166 <TIM_Base_SetConfig+0x62>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004154:	d007      	beq.n	8004166 <TIM_Base_SetConfig+0x62>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a1f      	ldr	r2, [pc, #124]	@ (80041d8 <TIM_Base_SetConfig+0xd4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_Base_SetConfig+0x62>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a1e      	ldr	r2, [pc, #120]	@ (80041dc <TIM_Base_SetConfig+0xd8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d108      	bne.n	8004178 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800416c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a0d      	ldr	r2, [pc, #52]	@ (80041d4 <TIM_Base_SetConfig+0xd0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d103      	bne.n	80041ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f023 0201 	bic.w	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	611a      	str	r2, [r3, #16]
  }
}
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr
 80041d4:	40012c00 	.word	0x40012c00
 80041d8:	40000400 	.word	0x40000400
 80041dc:	40000800 	.word	0x40000800

080041e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f023 0201 	bic.w	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0303 	bic.w	r3, r3, #3
 8004216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f023 0302 	bic.w	r3, r3, #2
 8004228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a1c      	ldr	r2, [pc, #112]	@ (80042a8 <TIM_OC1_SetConfig+0xc8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d10c      	bne.n	8004256 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0308 	bic.w	r3, r3, #8
 8004242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 0304 	bic.w	r3, r3, #4
 8004254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a13      	ldr	r2, [pc, #76]	@ (80042a8 <TIM_OC1_SetConfig+0xc8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d111      	bne.n	8004282 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800426c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	621a      	str	r2, [r3, #32]
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bc80      	pop	{r7}
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40012c00 	.word	0x40012c00

080042ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f023 0210 	bic.w	r2, r3, #16
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f023 0320 	bic.w	r3, r3, #32
 80042f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a1d      	ldr	r2, [pc, #116]	@ (800437c <TIM_OC2_SetConfig+0xd0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d10d      	bne.n	8004328 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004326:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a14      	ldr	r2, [pc, #80]	@ (800437c <TIM_OC2_SetConfig+0xd0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d113      	bne.n	8004358 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800433e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	621a      	str	r2, [r3, #32]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr
 800437c:	40012c00 	.word	0x40012c00

08004380 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0303 	bic.w	r3, r3, #3
 80043b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004450 <TIM_OC3_SetConfig+0xd0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d10d      	bne.n	80043fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a14      	ldr	r2, [pc, #80]	@ (8004450 <TIM_OC3_SetConfig+0xd0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d113      	bne.n	800442a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	621a      	str	r2, [r3, #32]
}
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40012c00 	.word	0x40012c00

08004454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800448a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800449e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	031b      	lsls	r3, r3, #12
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a0f      	ldr	r2, [pc, #60]	@ (80044ec <TIM_OC4_SetConfig+0x98>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d109      	bne.n	80044c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	019b      	lsls	r3, r3, #6
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	621a      	str	r2, [r3, #32]
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	40012c00 	.word	0x40012c00

080044f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004504:	2302      	movs	r3, #2
 8004506:	e046      	b.n	8004596 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a16      	ldr	r2, [pc, #88]	@ (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00e      	beq.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004554:	d009      	beq.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a12      	ldr	r2, [pc, #72]	@ (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d004      	beq.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a10      	ldr	r2, [pc, #64]	@ (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d10c      	bne.n	8004584 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	4313      	orrs	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr
 80045a0:	40012c00 	.word	0x40012c00
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800

080045ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e04a      	b.n	8004678 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fc fa7e 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2224      	movs	r2, #36	@ 0x24
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004612:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fe8d 	bl	8005334 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695a      	ldr	r2, [r3, #20]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004638:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0208 	orr.w	r2, r2, #8
 8004648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08a      	sub	sp, #40	@ 0x28
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	603b      	str	r3, [r7, #0]
 800468c:	4613      	mov	r3, r2
 800468e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b20      	cmp	r3, #32
 800469e:	d175      	bne.n	800478c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_UART_Transmit+0x2c>
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e06e      	b.n	800478e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2221      	movs	r2, #33	@ 0x21
 80046ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046be:	f7fc fb89 	bl	8000dd4 <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	88fa      	ldrh	r2, [r7, #6]
 80046c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046d8:	d108      	bne.n	80046ec <HAL_UART_Transmit+0x6c>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d104      	bne.n	80046ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	e003      	b.n	80046f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046f4:	e02e      	b.n	8004754 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2200      	movs	r2, #0
 80046fe:	2180      	movs	r1, #128	@ 0x80
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 fbea 	bl	8004eda <UART_WaitOnFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e03a      	b.n	800478e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800472c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	3302      	adds	r3, #2
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	e007      	b.n	8004746 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	781a      	ldrb	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	3301      	adds	r3, #1
 8004744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1cb      	bne.n	80046f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2200      	movs	r2, #0
 8004766:	2140      	movs	r1, #64	@ 0x40
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 fbb6 	bl	8004eda <UART_WaitOnFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e006      	b.n	800478e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	e000      	b.n	800478e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800478c:	2302      	movs	r3, #2
  }
}
 800478e:	4618      	mov	r0, r3
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b08a      	sub	sp, #40	@ 0x28
 800479a:	af02      	add	r7, sp, #8
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	4613      	mov	r3, r2
 80047a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	f040 8081 	bne.w	80048ba <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_UART_Receive+0x2e>
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e079      	b.n	80048bc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2222      	movs	r2, #34	@ 0x22
 80047d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047dc:	f7fc fafa 	bl	8000dd4 <HAL_GetTick>
 80047e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	88fa      	ldrh	r2, [r7, #6]
 80047ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f6:	d108      	bne.n	800480a <HAL_UART_Receive+0x74>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	61bb      	str	r3, [r7, #24]
 8004808:	e003      	b.n	8004812 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004812:	e047      	b.n	80048a4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2200      	movs	r2, #0
 800481c:	2120      	movs	r1, #32
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fb5b 	bl	8004eda <UART_WaitOnFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e042      	b.n	80048bc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10c      	bne.n	8004856 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004848:	b29a      	uxth	r2, r3
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	3302      	adds	r3, #2
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	e01f      	b.n	8004896 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800485e:	d007      	beq.n	8004870 <HAL_UART_Receive+0xda>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <HAL_UART_Receive+0xe8>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d106      	bne.n	800487e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	b2da      	uxtb	r2, r3
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	701a      	strb	r2, [r3, #0]
 800487c:	e008      	b.n	8004890 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800488a:	b2da      	uxtb	r2, r3
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	3301      	adds	r3, #1
 8004894:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1b2      	bne.n	8004814 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	e000      	b.n	80048bc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80048ba:	2302      	movs	r3, #2
  }
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3720      	adds	r7, #32
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08c      	sub	sp, #48	@ 0x30
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	4613      	mov	r3, r2
 80048d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d14a      	bne.n	8004974 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80048e4:	88fb      	ldrh	r3, [r7, #6]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e043      	b.n	8004976 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2201      	movs	r2, #1
 80048f2:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	461a      	mov	r2, r3
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 fb43 	bl	8004f8c <UART_Start_Receive_IT>
 8004906:	4603      	mov	r3, r0
 8004908:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800490c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004910:	2b00      	cmp	r3, #0
 8004912:	d12c      	bne.n	800496e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004918:	2b01      	cmp	r3, #1
 800491a:	d125      	bne.n	8004968 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	613b      	str	r3, [r7, #16]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	617b      	str	r3, [r7, #20]
   return(result);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f043 0310 	orr.w	r3, r3, #16
 8004948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004952:	627a      	str	r2, [r7, #36]	@ 0x24
 8004954:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6a39      	ldr	r1, [r7, #32]
 8004958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e5      	bne.n	8004932 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8004966:	e002      	b.n	800496e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800496e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004972:	e000      	b.n	8004976 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004974:	2302      	movs	r3, #2
  }
}
 8004976:	4618      	mov	r0, r3
 8004978:	3730      	adds	r7, #48	@ 0x30
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b0ba      	sub	sp, #232	@ 0xe8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80049be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10f      	bne.n	80049e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_UART_IRQHandler+0x66>
 80049d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fbea 	bl	80051b8 <UART_Receive_IT>
      return;
 80049e4:	e25b      	b.n	8004e9e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 80de 	beq.w	8004bac <HAL_UART_IRQHandler+0x22c>
 80049f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d106      	bne.n	8004a0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a00:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80d1 	beq.w	8004bac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00b      	beq.n	8004a2e <HAL_UART_IRQHandler+0xae>
 8004a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a26:	f043 0201 	orr.w	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_UART_IRQHandler+0xd2>
 8004a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d005      	beq.n	8004a52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4a:	f043 0202 	orr.w	r2, r3, #2
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_UART_IRQHandler+0xf6>
 8004a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6e:	f043 0204 	orr.w	r2, r3, #4
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d011      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x126>
 8004a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d105      	bne.n	8004a9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9e:	f043 0208 	orr.w	r2, r3, #8
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 81f2 	beq.w	8004e94 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_UART_IRQHandler+0x14e>
 8004abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fb75 	bl	80051b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf14      	ite	ne
 8004adc:	2301      	movne	r3, #1
 8004ade:	2300      	moveq	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d103      	bne.n	8004afa <HAL_UART_IRQHandler+0x17a>
 8004af2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d04f      	beq.n	8004b9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa7f 	bl	8004ffe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d041      	beq.n	8004b92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3314      	adds	r3, #20
 8004b14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3314      	adds	r3, #20
 8004b36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b4a:	e841 2300 	strex	r3, r2, [r1]
 8004b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1d9      	bne.n	8004b0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d013      	beq.n	8004b8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b66:	4a7e      	ldr	r2, [pc, #504]	@ (8004d60 <HAL_UART_IRQHandler+0x3e0>)
 8004b68:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fc fad4 	bl	800111c <HAL_DMA_Abort_IT>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d016      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b84:	4610      	mov	r0, r2
 8004b86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b88:	e00e      	b.n	8004ba8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f99c 	bl	8004ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b90:	e00a      	b.n	8004ba8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f998 	bl	8004ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b98:	e006      	b.n	8004ba8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f994 	bl	8004ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004ba6:	e175      	b.n	8004e94 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba8:	bf00      	nop
    return;
 8004baa:	e173      	b.n	8004e94 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	f040 814f 	bne.w	8004e54 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 8148 	beq.w	8004e54 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8141 	beq.w	8004e54 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 80b6 	beq.w	8004d64 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8145 	beq.w	8004e98 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c16:	429a      	cmp	r2, r3
 8004c18:	f080 813e 	bcs.w	8004e98 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c22:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	f000 8088 	beq.w	8004d40 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	330c      	adds	r3, #12
 8004c58:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c5c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c68:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1d9      	bne.n	8004c30 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3314      	adds	r3, #20
 8004c82:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3314      	adds	r3, #20
 8004c9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ca0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ca4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ca8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004cb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e1      	bne.n	8004c7c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3314      	adds	r3, #20
 8004cbe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3314      	adds	r3, #20
 8004cd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cdc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cde:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ce2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e3      	bne.n	8004cb8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	330c      	adds	r3, #12
 8004d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d10:	f023 0310 	bic.w	r3, r3, #16
 8004d14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d22:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d24:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e3      	bne.n	8004cfe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fc f9b2 	bl	80010a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fb ffda 	bl	8000d10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d5c:	e09c      	b.n	8004e98 <HAL_UART_IRQHandler+0x518>
 8004d5e:	bf00      	nop
 8004d60:	080050c3 	.word	0x080050c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 808e 	beq.w	8004e9c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 8089 	beq.w	8004e9c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	330c      	adds	r3, #12
 8004d90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d94:	e853 3f00 	ldrex	r3, [r3]
 8004d98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004da0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004dae:	647a      	str	r2, [r7, #68]	@ 0x44
 8004db0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004db4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004db6:	e841 2300 	strex	r3, r2, [r1]
 8004dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1e3      	bne.n	8004d8a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3314      	adds	r3, #20
 8004dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	f023 0301 	bic.w	r3, r3, #1
 8004dd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3314      	adds	r3, #20
 8004de2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004de6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e3      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0310 	bic.w	r3, r3, #16
 8004e1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	330c      	adds	r3, #12
 8004e28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e2c:	61fa      	str	r2, [r7, #28]
 8004e2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	69b9      	ldr	r1, [r7, #24]
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	617b      	str	r3, [r7, #20]
   return(result);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e3      	bne.n	8004e08 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7fb ff5f 	bl	8000d10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e52:	e023      	b.n	8004e9c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d009      	beq.n	8004e74 <HAL_UART_IRQHandler+0x4f4>
 8004e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f93c 	bl	80050ea <UART_Transmit_IT>
    return;
 8004e72:	e014      	b.n	8004e9e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00e      	beq.n	8004e9e <HAL_UART_IRQHandler+0x51e>
 8004e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f97b 	bl	8005188 <UART_EndTransmit_IT>
    return;
 8004e92:	e004      	b.n	8004e9e <HAL_UART_IRQHandler+0x51e>
    return;
 8004e94:	bf00      	nop
 8004e96:	e002      	b.n	8004e9e <HAL_UART_IRQHandler+0x51e>
      return;
 8004e98:	bf00      	nop
 8004e9a:	e000      	b.n	8004e9e <HAL_UART_IRQHandler+0x51e>
      return;
 8004e9c:	bf00      	nop
  }
}
 8004e9e:	37e8      	adds	r7, #232	@ 0xe8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr

08004eb6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	4770      	bx	lr

08004eda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b086      	sub	sp, #24
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	603b      	str	r3, [r7, #0]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eea:	e03b      	b.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d037      	beq.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef4:	f7fb ff6e 	bl	8000dd4 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	6a3a      	ldr	r2, [r7, #32]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d302      	bcc.n	8004f0a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e03a      	b.n	8004f84 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d023      	beq.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b80      	cmp	r3, #128	@ 0x80
 8004f20:	d020      	beq.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b40      	cmp	r3, #64	@ 0x40
 8004f26:	d01d      	beq.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d116      	bne.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f856 	bl	8004ffe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2208      	movs	r2, #8
 8004f56:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e00f      	b.n	8004f84 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	bf0c      	ite	eq
 8004f74:	2301      	moveq	r3, #1
 8004f76:	2300      	movne	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d0b4      	beq.n	8004eec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	4613      	mov	r3, r2
 8004f98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	88fa      	ldrh	r2, [r7, #6]
 8004fa4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	88fa      	ldrh	r2, [r7, #6]
 8004faa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2222      	movs	r2, #34	@ 0x22
 8004fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d007      	beq.n	8004fd2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fd0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695a      	ldr	r2, [r3, #20]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0201 	orr.w	r2, r2, #1
 8004fe0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0220 	orr.w	r2, r2, #32
 8004ff0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr

08004ffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b095      	sub	sp, #84	@ 0x54
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005018:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800501c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005026:	643a      	str	r2, [r7, #64]	@ 0x40
 8005028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800502c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e5      	bne.n	8005006 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3314      	adds	r3, #20
 8005040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	61fb      	str	r3, [r7, #28]
   return(result);
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f023 0301 	bic.w	r3, r3, #1
 8005050:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3314      	adds	r3, #20
 8005058:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800505a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800505c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e5      	bne.n	800503a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005072:	2b01      	cmp	r3, #1
 8005074:	d119      	bne.n	80050aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	330c      	adds	r3, #12
 800507c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	60bb      	str	r3, [r7, #8]
   return(result);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f023 0310 	bic.w	r3, r3, #16
 800508c:	647b      	str	r3, [r7, #68]	@ 0x44
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005096:	61ba      	str	r2, [r7, #24]
 8005098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6979      	ldr	r1, [r7, #20]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	613b      	str	r3, [r7, #16]
   return(result);
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e5      	bne.n	8005076 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050b8:	bf00      	nop
 80050ba:	3754      	adds	r7, #84	@ 0x54
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr

080050c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7ff fef3 	bl	8004ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b21      	cmp	r3, #33	@ 0x21
 80050fc:	d13e      	bne.n	800517c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005106:	d114      	bne.n	8005132 <UART_Transmit_IT+0x48>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d110      	bne.n	8005132 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005124:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	1c9a      	adds	r2, r3, #2
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	621a      	str	r2, [r3, #32]
 8005130:	e008      	b.n	8005144 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	1c59      	adds	r1, r3, #1
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6211      	str	r1, [r2, #32]
 800513c:	781a      	ldrb	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29b      	uxth	r3, r3
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	4619      	mov	r1, r3
 8005152:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10f      	bne.n	8005178 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005166:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005176:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005178:	2300      	movs	r3, #0
 800517a:	e000      	b.n	800517e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800517c:	2302      	movs	r3, #2
  }
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr

08005188 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800519e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff fe7b 	bl	8004ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08c      	sub	sp, #48	@ 0x30
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b22      	cmp	r3, #34	@ 0x22
 80051ca:	f040 80ae 	bne.w	800532a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d6:	d117      	bne.n	8005208 <UART_Receive_IT+0x50>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d113      	bne.n	8005208 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005200:	1c9a      	adds	r2, r3, #2
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	629a      	str	r2, [r3, #40]	@ 0x28
 8005206:	e026      	b.n	8005256 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800521a:	d007      	beq.n	800522c <UART_Receive_IT+0x74>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <UART_Receive_IT+0x82>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d106      	bne.n	800523a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	b2da      	uxtb	r2, r3
 8005234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	e008      	b.n	800524c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	b2db      	uxtb	r3, r3
 8005242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005246:	b2da      	uxtb	r2, r3
 8005248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29b      	uxth	r3, r3
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	4619      	mov	r1, r3
 8005264:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005266:	2b00      	cmp	r3, #0
 8005268:	d15d      	bne.n	8005326 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0220 	bic.w	r2, r2, #32
 8005278:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005288:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695a      	ldr	r2, [r3, #20]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0201 	bic.w	r2, r2, #1
 8005298:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d135      	bne.n	800531c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	330c      	adds	r3, #12
 80052bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	613b      	str	r3, [r7, #16]
   return(result);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f023 0310 	bic.w	r3, r3, #16
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	330c      	adds	r3, #12
 80052d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d6:	623a      	str	r2, [r7, #32]
 80052d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	69f9      	ldr	r1, [r7, #28]
 80052dc:	6a3a      	ldr	r2, [r7, #32]
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1e5      	bne.n	80052b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d10a      	bne.n	800530e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005312:	4619      	mov	r1, r3
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7fb fcfb 	bl	8000d10 <HAL_UARTEx_RxEventCallback>
 800531a:	e002      	b.n	8005322 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff fdca 	bl	8004eb6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	e002      	b.n	800532c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	e000      	b.n	800532c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800532a:	2302      	movs	r3, #2
  }
}
 800532c:	4618      	mov	r0, r3
 800532e:	3730      	adds	r7, #48	@ 0x30
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800536e:	f023 030c 	bic.w	r3, r3, #12
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	430b      	orrs	r3, r1
 800537a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a2c      	ldr	r2, [pc, #176]	@ (8005448 <UART_SetConfig+0x114>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d103      	bne.n	80053a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800539c:	f7fe fbe6 	bl	8003b6c <HAL_RCC_GetPCLK2Freq>
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	e002      	b.n	80053aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053a4:	f7fe fbce 	bl	8003b44 <HAL_RCC_GetPCLK1Freq>
 80053a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009a      	lsls	r2, r3, #2
 80053b4:	441a      	add	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c0:	4a22      	ldr	r2, [pc, #136]	@ (800544c <UART_SetConfig+0x118>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	0119      	lsls	r1, r3, #4
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	009a      	lsls	r2, r3, #2
 80053d4:	441a      	add	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80053e0:	4b1a      	ldr	r3, [pc, #104]	@ (800544c <UART_SetConfig+0x118>)
 80053e2:	fba3 0302 	umull	r0, r3, r3, r2
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	2064      	movs	r0, #100	@ 0x64
 80053ea:	fb00 f303 	mul.w	r3, r0, r3
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	3332      	adds	r3, #50	@ 0x32
 80053f4:	4a15      	ldr	r2, [pc, #84]	@ (800544c <UART_SetConfig+0x118>)
 80053f6:	fba2 2303 	umull	r2, r3, r2, r3
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005400:	4419      	add	r1, r3
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009a      	lsls	r2, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	fbb2 f2f3 	udiv	r2, r2, r3
 8005418:	4b0c      	ldr	r3, [pc, #48]	@ (800544c <UART_SetConfig+0x118>)
 800541a:	fba3 0302 	umull	r0, r3, r3, r2
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	2064      	movs	r0, #100	@ 0x64
 8005422:	fb00 f303 	mul.w	r3, r0, r3
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	3332      	adds	r3, #50	@ 0x32
 800542c:	4a07      	ldr	r2, [pc, #28]	@ (800544c <UART_SetConfig+0x118>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	f003 020f 	and.w	r2, r3, #15
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	440a      	add	r2, r1
 800543e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40013800 	.word	0x40013800
 800544c:	51eb851f 	.word	0x51eb851f

08005450 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800545e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005462:	2b84      	cmp	r3, #132	@ 0x84
 8005464:	d005      	beq.n	8005472 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005466:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	3303      	adds	r3, #3
 8005470:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005472:	68fb      	ldr	r3, [r7, #12]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr

0800547e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005482:	f000 faf7 	bl	8005a74 <vTaskStartScheduler>
  
  return osOK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}

0800548c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800548c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800548e:	b089      	sub	sp, #36	@ 0x24
 8005490:	af04      	add	r7, sp, #16
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d020      	beq.n	80054e0 <osThreadCreate+0x54>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01c      	beq.n	80054e0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685c      	ldr	r4, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691e      	ldr	r6, [r3, #16]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff ffc9 	bl	8005450 <makeFreeRtosPriority>
 80054be:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054c8:	9202      	str	r2, [sp, #8]
 80054ca:	9301      	str	r3, [sp, #4]
 80054cc:	9100      	str	r1, [sp, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	4632      	mov	r2, r6
 80054d2:	4629      	mov	r1, r5
 80054d4:	4620      	mov	r0, r4
 80054d6:	f000 f8e8 	bl	80056aa <xTaskCreateStatic>
 80054da:	4603      	mov	r3, r0
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	e01c      	b.n	800551a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685c      	ldr	r4, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054ec:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff ffab 	bl	8005450 <makeFreeRtosPriority>
 80054fa:	4602      	mov	r2, r0
 80054fc:	f107 030c 	add.w	r3, r7, #12
 8005500:	9301      	str	r3, [sp, #4]
 8005502:	9200      	str	r2, [sp, #0]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	4632      	mov	r2, r6
 8005508:	4629      	mov	r1, r5
 800550a:	4620      	mov	r0, r4
 800550c:	f000 f92d 	bl	800576a <xTaskCreate>
 8005510:	4603      	mov	r3, r0
 8005512:	2b01      	cmp	r3, #1
 8005514:	d001      	beq.n	800551a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005516:	2300      	movs	r3, #0
 8005518:	e000      	b.n	800551c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800551a:	68fb      	ldr	r3, [r7, #12]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005524 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <osDelay+0x16>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	e000      	b.n	800553c <osDelay+0x18>
 800553a:	2301      	movs	r3, #1
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fa63 	bl	8005a08 <vTaskDelay>
  
  return osOK;
 8005542:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f103 0208 	add.w	r2, r3, #8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f04f 32ff 	mov.w	r2, #4294967295
 8005564:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f103 0208 	add.w	r2, r3, #8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f103 0208 	add.w	r2, r3, #8
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr

0800558a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	bc80      	pop	{r7}
 80055a0:	4770      	bx	lr

080055a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	601a      	str	r2, [r3, #0]
}
 80055de:	bf00      	nop
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr

080055e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fe:	d103      	bne.n	8005608 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	e00c      	b.n	8005622 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3308      	adds	r3, #8
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e002      	b.n	8005616 <vListInsert+0x2e>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	d2f6      	bcs.n	8005610 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]
}
 800564e:	bf00      	nop
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6892      	ldr	r2, [r2, #8]
 800566e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6852      	ldr	r2, [r2, #4]
 8005678:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	429a      	cmp	r2, r3
 8005682:	d103      	bne.n	800568c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	1e5a      	subs	r2, r3, #1
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr

080056aa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b08e      	sub	sp, #56	@ 0x38
 80056ae:	af04      	add	r7, sp, #16
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10b      	bne.n	80056d6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	e7fd      	b.n	80056d2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10b      	bne.n	80056f4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	61fb      	str	r3, [r7, #28]
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	e7fd      	b.n	80056f0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056f4:	23a0      	movs	r3, #160	@ 0xa0
 80056f6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80056fc:	d00b      	beq.n	8005716 <xTaskCreateStatic+0x6c>
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	61bb      	str	r3, [r7, #24]
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	e7fd      	b.n	8005712 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005716:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571a:	2b00      	cmp	r3, #0
 800571c:	d01e      	beq.n	800575c <xTaskCreateStatic+0xb2>
 800571e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01b      	beq.n	800575c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005726:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800572c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005730:	2202      	movs	r2, #2
 8005732:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005736:	2300      	movs	r3, #0
 8005738:	9303      	str	r3, [sp, #12]
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	9302      	str	r3, [sp, #8]
 800573e:	f107 0314 	add.w	r3, r7, #20
 8005742:	9301      	str	r3, [sp, #4]
 8005744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f850 	bl	80057f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005754:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005756:	f000 f8ed 	bl	8005934 <prvAddNewTaskToReadyList>
 800575a:	e001      	b.n	8005760 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800575c:	2300      	movs	r3, #0
 800575e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005760:	697b      	ldr	r3, [r7, #20]
	}
 8005762:	4618      	mov	r0, r3
 8005764:	3728      	adds	r7, #40	@ 0x28
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800576a:	b580      	push	{r7, lr}
 800576c:	b08c      	sub	sp, #48	@ 0x30
 800576e:	af04      	add	r7, sp, #16
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800577a:	88fb      	ldrh	r3, [r7, #6]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fe9e 	bl	80064c0 <pvPortMalloc>
 8005784:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00e      	beq.n	80057aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800578c:	20a0      	movs	r0, #160	@ 0xa0
 800578e:	f000 fe97 	bl	80064c0 <pvPortMalloc>
 8005792:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	631a      	str	r2, [r3, #48]	@ 0x30
 80057a0:	e005      	b.n	80057ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057a2:	6978      	ldr	r0, [r7, #20]
 80057a4:	f000 ff5a 	bl	800665c <vPortFree>
 80057a8:	e001      	b.n	80057ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d017      	beq.n	80057e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057bc:	88fa      	ldrh	r2, [r7, #6]
 80057be:	2300      	movs	r3, #0
 80057c0:	9303      	str	r3, [sp, #12]
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	9302      	str	r3, [sp, #8]
 80057c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f80e 	bl	80057f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057d8:	69f8      	ldr	r0, [r7, #28]
 80057da:	f000 f8ab 	bl	8005934 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057de:	2301      	movs	r3, #1
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	e002      	b.n	80057ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057e4:	f04f 33ff 	mov.w	r3, #4294967295
 80057e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057ea:	69bb      	ldr	r3, [r7, #24]
	}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800580c:	3b01      	subs	r3, #1
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	f023 0307 	bic.w	r3, r3, #7
 800581a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	617b      	str	r3, [r7, #20]
}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	e7fd      	b.n	800583a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01f      	beq.n	8005884 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005844:	2300      	movs	r3, #0
 8005846:	61fb      	str	r3, [r7, #28]
 8005848:	e012      	b.n	8005870 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4413      	add	r3, r2
 8005850:	7819      	ldrb	r1, [r3, #0]
 8005852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	4413      	add	r3, r2
 8005858:	3334      	adds	r3, #52	@ 0x34
 800585a:	460a      	mov	r2, r1
 800585c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	4413      	add	r3, r2
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d006      	beq.n	8005878 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3301      	adds	r3, #1
 800586e:	61fb      	str	r3, [r7, #28]
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b0f      	cmp	r3, #15
 8005874:	d9e9      	bls.n	800584a <prvInitialiseNewTask+0x56>
 8005876:	e000      	b.n	800587a <prvInitialiseNewTask+0x86>
			{
				break;
 8005878:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800587a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005882:	e003      	b.n	800588c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800588c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588e:	2b06      	cmp	r3, #6
 8005890:	d901      	bls.n	8005896 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005892:	2306      	movs	r3, #6
 8005894:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005898:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800589a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058a0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	2200      	movs	r2, #0
 80058a6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	3304      	adds	r3, #4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff fe6c 	bl	800558a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	3318      	adds	r3, #24
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff fe67 	bl	800558a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c4:	f1c3 0207 	rsb	r2, r3, #7
 80058c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	2200      	movs	r2, #0
 80058d6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80058e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e4:	334c      	adds	r3, #76	@ 0x4c
 80058e6:	224c      	movs	r2, #76	@ 0x4c
 80058e8:	2100      	movs	r1, #0
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 ffd4 	bl	8006898 <memset>
 80058f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005928 <prvInitialiseNewTask+0x134>)
 80058f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80058f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f8:	4a0c      	ldr	r2, [pc, #48]	@ (800592c <prvInitialiseNewTask+0x138>)
 80058fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80058fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005930 <prvInitialiseNewTask+0x13c>)
 8005900:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	68f9      	ldr	r1, [r7, #12]
 8005906:	69b8      	ldr	r0, [r7, #24]
 8005908:	f000 fc28 	bl	800615c <pxPortInitialiseStack>
 800590c:	4602      	mov	r2, r0
 800590e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005910:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800591c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800591e:	bf00      	nop
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20001a24 	.word	0x20001a24
 800592c:	20001a8c 	.word	0x20001a8c
 8005930:	20001af4 	.word	0x20001af4

08005934 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800593c:	f000 fcfe 	bl	800633c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005940:	4b2a      	ldr	r3, [pc, #168]	@ (80059ec <prvAddNewTaskToReadyList+0xb8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3301      	adds	r3, #1
 8005946:	4a29      	ldr	r2, [pc, #164]	@ (80059ec <prvAddNewTaskToReadyList+0xb8>)
 8005948:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800594a:	4b29      	ldr	r3, [pc, #164]	@ (80059f0 <prvAddNewTaskToReadyList+0xbc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d109      	bne.n	8005966 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005952:	4a27      	ldr	r2, [pc, #156]	@ (80059f0 <prvAddNewTaskToReadyList+0xbc>)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005958:	4b24      	ldr	r3, [pc, #144]	@ (80059ec <prvAddNewTaskToReadyList+0xb8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d110      	bne.n	8005982 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005960:	f000 fad2 	bl	8005f08 <prvInitialiseTaskLists>
 8005964:	e00d      	b.n	8005982 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005966:	4b23      	ldr	r3, [pc, #140]	@ (80059f4 <prvAddNewTaskToReadyList+0xc0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d109      	bne.n	8005982 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800596e:	4b20      	ldr	r3, [pc, #128]	@ (80059f0 <prvAddNewTaskToReadyList+0xbc>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005978:	429a      	cmp	r2, r3
 800597a:	d802      	bhi.n	8005982 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800597c:	4a1c      	ldr	r2, [pc, #112]	@ (80059f0 <prvAddNewTaskToReadyList+0xbc>)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005982:	4b1d      	ldr	r3, [pc, #116]	@ (80059f8 <prvAddNewTaskToReadyList+0xc4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3301      	adds	r3, #1
 8005988:	4a1b      	ldr	r2, [pc, #108]	@ (80059f8 <prvAddNewTaskToReadyList+0xc4>)
 800598a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005990:	2201      	movs	r2, #1
 8005992:	409a      	lsls	r2, r3
 8005994:	4b19      	ldr	r3, [pc, #100]	@ (80059fc <prvAddNewTaskToReadyList+0xc8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4313      	orrs	r3, r2
 800599a:	4a18      	ldr	r2, [pc, #96]	@ (80059fc <prvAddNewTaskToReadyList+0xc8>)
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4a15      	ldr	r2, [pc, #84]	@ (8005a00 <prvAddNewTaskToReadyList+0xcc>)
 80059ac:	441a      	add	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4619      	mov	r1, r3
 80059b4:	4610      	mov	r0, r2
 80059b6:	f7ff fdf4 	bl	80055a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059ba:	f000 fcef 	bl	800639c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059be:	4b0d      	ldr	r3, [pc, #52]	@ (80059f4 <prvAddNewTaskToReadyList+0xc0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00e      	beq.n	80059e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059c6:	4b0a      	ldr	r3, [pc, #40]	@ (80059f0 <prvAddNewTaskToReadyList+0xbc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d207      	bcs.n	80059e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <prvAddNewTaskToReadyList+0xd0>)
 80059d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059e4:	bf00      	nop
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20000dd0 	.word	0x20000dd0
 80059f0:	20000cd0 	.word	0x20000cd0
 80059f4:	20000ddc 	.word	0x20000ddc
 80059f8:	20000dec 	.word	0x20000dec
 80059fc:	20000dd8 	.word	0x20000dd8
 8005a00:	20000cd4 	.word	0x20000cd4
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d018      	beq.n	8005a4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a1a:	4b14      	ldr	r3, [pc, #80]	@ (8005a6c <vTaskDelay+0x64>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00b      	beq.n	8005a3a <vTaskDelay+0x32>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	60bb      	str	r3, [r7, #8]
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop
 8005a38:	e7fd      	b.n	8005a36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a3a:	f000 f885 	bl	8005b48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a3e:	2100      	movs	r1, #0
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fb25 	bl	8006090 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a46:	f000 f88d 	bl	8005b64 <xTaskResumeAll>
 8005a4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d107      	bne.n	8005a62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005a52:	4b07      	ldr	r3, [pc, #28]	@ (8005a70 <vTaskDelay+0x68>)
 8005a54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000df8 	.word	0x20000df8
 8005a70:	e000ed04 	.word	0xe000ed04

08005a74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	@ 0x28
 8005a78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a82:	463a      	mov	r2, r7
 8005a84:	1d39      	adds	r1, r7, #4
 8005a86:	f107 0308 	add.w	r3, r7, #8
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fa fcf0 	bl	8000470 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	9202      	str	r2, [sp, #8]
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	460a      	mov	r2, r1
 8005aa2:	4921      	ldr	r1, [pc, #132]	@ (8005b28 <vTaskStartScheduler+0xb4>)
 8005aa4:	4821      	ldr	r0, [pc, #132]	@ (8005b2c <vTaskStartScheduler+0xb8>)
 8005aa6:	f7ff fe00 	bl	80056aa <xTaskCreateStatic>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4a20      	ldr	r2, [pc, #128]	@ (8005b30 <vTaskStartScheduler+0xbc>)
 8005aae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8005b30 <vTaskStartScheduler+0xbc>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e001      	b.n	8005ac2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d11b      	bne.n	8005b00 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	613b      	str	r3, [r7, #16]
}
 8005ada:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005adc:	4b15      	ldr	r3, [pc, #84]	@ (8005b34 <vTaskStartScheduler+0xc0>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	334c      	adds	r3, #76	@ 0x4c
 8005ae2:	4a15      	ldr	r2, [pc, #84]	@ (8005b38 <vTaskStartScheduler+0xc4>)
 8005ae4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ae6:	4b15      	ldr	r3, [pc, #84]	@ (8005b3c <vTaskStartScheduler+0xc8>)
 8005ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005aee:	4b14      	ldr	r3, [pc, #80]	@ (8005b40 <vTaskStartScheduler+0xcc>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005af4:	4b13      	ldr	r3, [pc, #76]	@ (8005b44 <vTaskStartScheduler+0xd0>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005afa:	f000 fbad 	bl	8006258 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005afe:	e00f      	b.n	8005b20 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b06:	d10b      	bne.n	8005b20 <vTaskStartScheduler+0xac>
	__asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	60fb      	str	r3, [r7, #12]
}
 8005b1a:	bf00      	nop
 8005b1c:	bf00      	nop
 8005b1e:	e7fd      	b.n	8005b1c <vTaskStartScheduler+0xa8>
}
 8005b20:	bf00      	nop
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	08006ad8 	.word	0x08006ad8
 8005b2c:	08005ed9 	.word	0x08005ed9
 8005b30:	20000df4 	.word	0x20000df4
 8005b34:	20000cd0 	.word	0x20000cd0
 8005b38:	20000010 	.word	0x20000010
 8005b3c:	20000df0 	.word	0x20000df0
 8005b40:	20000ddc 	.word	0x20000ddc
 8005b44:	20000dd4 	.word	0x20000dd4

08005b48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b4c:	4b04      	ldr	r3, [pc, #16]	@ (8005b60 <vTaskSuspendAll+0x18>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3301      	adds	r3, #1
 8005b52:	4a03      	ldr	r2, [pc, #12]	@ (8005b60 <vTaskSuspendAll+0x18>)
 8005b54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b56:	bf00      	nop
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	20000df8 	.word	0x20000df8

08005b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b72:	4b42      	ldr	r3, [pc, #264]	@ (8005c7c <xTaskResumeAll+0x118>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10b      	bne.n	8005b92 <xTaskResumeAll+0x2e>
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	603b      	str	r3, [r7, #0]
}
 8005b8c:	bf00      	nop
 8005b8e:	bf00      	nop
 8005b90:	e7fd      	b.n	8005b8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b92:	f000 fbd3 	bl	800633c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b96:	4b39      	ldr	r3, [pc, #228]	@ (8005c7c <xTaskResumeAll+0x118>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	4a37      	ldr	r2, [pc, #220]	@ (8005c7c <xTaskResumeAll+0x118>)
 8005b9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ba0:	4b36      	ldr	r3, [pc, #216]	@ (8005c7c <xTaskResumeAll+0x118>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d161      	bne.n	8005c6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ba8:	4b35      	ldr	r3, [pc, #212]	@ (8005c80 <xTaskResumeAll+0x11c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d05d      	beq.n	8005c6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bb0:	e02e      	b.n	8005c10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bb2:	4b34      	ldr	r3, [pc, #208]	@ (8005c84 <xTaskResumeAll+0x120>)
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3318      	adds	r3, #24
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff fd4a 	bl	8005658 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff fd45 	bl	8005658 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	409a      	lsls	r2, r3
 8005bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8005c88 <xTaskResumeAll+0x124>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8005c88 <xTaskResumeAll+0x124>)
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005be4:	4613      	mov	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4a27      	ldr	r2, [pc, #156]	@ (8005c8c <xTaskResumeAll+0x128>)
 8005bee:	441a      	add	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	f7ff fcd3 	bl	80055a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c00:	4b23      	ldr	r3, [pc, #140]	@ (8005c90 <xTaskResumeAll+0x12c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d302      	bcc.n	8005c10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c0a:	4b22      	ldr	r3, [pc, #136]	@ (8005c94 <xTaskResumeAll+0x130>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c10:	4b1c      	ldr	r3, [pc, #112]	@ (8005c84 <xTaskResumeAll+0x120>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1cc      	bne.n	8005bb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c1e:	f000 fa17 	bl	8006050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c22:	4b1d      	ldr	r3, [pc, #116]	@ (8005c98 <xTaskResumeAll+0x134>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d010      	beq.n	8005c50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c2e:	f000 f837 	bl	8005ca0 <xTaskIncrementTick>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c38:	4b16      	ldr	r3, [pc, #88]	@ (8005c94 <xTaskResumeAll+0x130>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f1      	bne.n	8005c2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c4a:	4b13      	ldr	r3, [pc, #76]	@ (8005c98 <xTaskResumeAll+0x134>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c50:	4b10      	ldr	r3, [pc, #64]	@ (8005c94 <xTaskResumeAll+0x130>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d009      	beq.n	8005c6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c9c <xTaskResumeAll+0x138>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c6c:	f000 fb96 	bl	800639c <vPortExitCritical>

	return xAlreadyYielded;
 8005c70:	68bb      	ldr	r3, [r7, #8]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000df8 	.word	0x20000df8
 8005c80:	20000dd0 	.word	0x20000dd0
 8005c84:	20000d90 	.word	0x20000d90
 8005c88:	20000dd8 	.word	0x20000dd8
 8005c8c:	20000cd4 	.word	0x20000cd4
 8005c90:	20000cd0 	.word	0x20000cd0
 8005c94:	20000de4 	.word	0x20000de4
 8005c98:	20000de0 	.word	0x20000de0
 8005c9c:	e000ed04 	.word	0xe000ed04

08005ca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005caa:	4b4f      	ldr	r3, [pc, #316]	@ (8005de8 <xTaskIncrementTick+0x148>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f040 808f 	bne.w	8005dd2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8005dec <xTaskIncrementTick+0x14c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cbc:	4a4b      	ldr	r2, [pc, #300]	@ (8005dec <xTaskIncrementTick+0x14c>)
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d121      	bne.n	8005d0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cc8:	4b49      	ldr	r3, [pc, #292]	@ (8005df0 <xTaskIncrementTick+0x150>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00b      	beq.n	8005cea <xTaskIncrementTick+0x4a>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	603b      	str	r3, [r7, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	e7fd      	b.n	8005ce6 <xTaskIncrementTick+0x46>
 8005cea:	4b41      	ldr	r3, [pc, #260]	@ (8005df0 <xTaskIncrementTick+0x150>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	4b40      	ldr	r3, [pc, #256]	@ (8005df4 <xTaskIncrementTick+0x154>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a3e      	ldr	r2, [pc, #248]	@ (8005df0 <xTaskIncrementTick+0x150>)
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	4a3e      	ldr	r2, [pc, #248]	@ (8005df4 <xTaskIncrementTick+0x154>)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8005df8 <xTaskIncrementTick+0x158>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3301      	adds	r3, #1
 8005d04:	4a3c      	ldr	r2, [pc, #240]	@ (8005df8 <xTaskIncrementTick+0x158>)
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	f000 f9a2 	bl	8006050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8005dfc <xTaskIncrementTick+0x15c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d348      	bcc.n	8005da8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d16:	4b36      	ldr	r3, [pc, #216]	@ (8005df0 <xTaskIncrementTick+0x150>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d104      	bne.n	8005d2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d20:	4b36      	ldr	r3, [pc, #216]	@ (8005dfc <xTaskIncrementTick+0x15c>)
 8005d22:	f04f 32ff 	mov.w	r2, #4294967295
 8005d26:	601a      	str	r2, [r3, #0]
					break;
 8005d28:	e03e      	b.n	8005da8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d2a:	4b31      	ldr	r3, [pc, #196]	@ (8005df0 <xTaskIncrementTick+0x150>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d203      	bcs.n	8005d4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d42:	4a2e      	ldr	r2, [pc, #184]	@ (8005dfc <xTaskIncrementTick+0x15c>)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d48:	e02e      	b.n	8005da8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff fc82 	bl	8005658 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d004      	beq.n	8005d66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	3318      	adds	r3, #24
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fc79 	bl	8005658 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	409a      	lsls	r2, r3
 8005d6e:	4b24      	ldr	r3, [pc, #144]	@ (8005e00 <xTaskIncrementTick+0x160>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	4a22      	ldr	r2, [pc, #136]	@ (8005e00 <xTaskIncrementTick+0x160>)
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4a1f      	ldr	r2, [pc, #124]	@ (8005e04 <xTaskIncrementTick+0x164>)
 8005d86:	441a      	add	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	f7ff fc07 	bl	80055a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d98:	4b1b      	ldr	r3, [pc, #108]	@ (8005e08 <xTaskIncrementTick+0x168>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d3b9      	bcc.n	8005d16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005da2:	2301      	movs	r3, #1
 8005da4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da6:	e7b6      	b.n	8005d16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005da8:	4b17      	ldr	r3, [pc, #92]	@ (8005e08 <xTaskIncrementTick+0x168>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dae:	4915      	ldr	r1, [pc, #84]	@ (8005e04 <xTaskIncrementTick+0x164>)
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d901      	bls.n	8005dc4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005dc4:	4b11      	ldr	r3, [pc, #68]	@ (8005e0c <xTaskIncrementTick+0x16c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	e004      	b.n	8005ddc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8005e10 <xTaskIncrementTick+0x170>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8005e10 <xTaskIncrementTick+0x170>)
 8005dda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ddc:	697b      	ldr	r3, [r7, #20]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20000df8 	.word	0x20000df8
 8005dec:	20000dd4 	.word	0x20000dd4
 8005df0:	20000d88 	.word	0x20000d88
 8005df4:	20000d8c 	.word	0x20000d8c
 8005df8:	20000de8 	.word	0x20000de8
 8005dfc:	20000df0 	.word	0x20000df0
 8005e00:	20000dd8 	.word	0x20000dd8
 8005e04:	20000cd4 	.word	0x20000cd4
 8005e08:	20000cd0 	.word	0x20000cd0
 8005e0c:	20000de4 	.word	0x20000de4
 8005e10:	20000de0 	.word	0x20000de0

08005e14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e1a:	4b29      	ldr	r3, [pc, #164]	@ (8005ec0 <vTaskSwitchContext+0xac>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e22:	4b28      	ldr	r3, [pc, #160]	@ (8005ec4 <vTaskSwitchContext+0xb0>)
 8005e24:	2201      	movs	r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e28:	e045      	b.n	8005eb6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005e2a:	4b26      	ldr	r3, [pc, #152]	@ (8005ec4 <vTaskSwitchContext+0xb0>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e30:	4b25      	ldr	r3, [pc, #148]	@ (8005ec8 <vTaskSwitchContext+0xb4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	fab3 f383 	clz	r3, r3
 8005e3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e3e:	7afb      	ldrb	r3, [r7, #11]
 8005e40:	f1c3 031f 	rsb	r3, r3, #31
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	4921      	ldr	r1, [pc, #132]	@ (8005ecc <vTaskSwitchContext+0xb8>)
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10b      	bne.n	8005e72 <vTaskSwitchContext+0x5e>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	607b      	str	r3, [r7, #4]
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	e7fd      	b.n	8005e6e <vTaskSwitchContext+0x5a>
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4a13      	ldr	r2, [pc, #76]	@ (8005ecc <vTaskSwitchContext+0xb8>)
 8005e7e:	4413      	add	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	605a      	str	r2, [r3, #4]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	3308      	adds	r3, #8
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d104      	bne.n	8005ea2 <vTaskSwitchContext+0x8e>
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	605a      	str	r2, [r3, #4]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4a09      	ldr	r2, [pc, #36]	@ (8005ed0 <vTaskSwitchContext+0xbc>)
 8005eaa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005eac:	4b08      	ldr	r3, [pc, #32]	@ (8005ed0 <vTaskSwitchContext+0xbc>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	334c      	adds	r3, #76	@ 0x4c
 8005eb2:	4a08      	ldr	r2, [pc, #32]	@ (8005ed4 <vTaskSwitchContext+0xc0>)
 8005eb4:	6013      	str	r3, [r2, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	371c      	adds	r7, #28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr
 8005ec0:	20000df8 	.word	0x20000df8
 8005ec4:	20000de4 	.word	0x20000de4
 8005ec8:	20000dd8 	.word	0x20000dd8
 8005ecc:	20000cd4 	.word	0x20000cd4
 8005ed0:	20000cd0 	.word	0x20000cd0
 8005ed4:	20000010 	.word	0x20000010

08005ed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ee0:	f000 f852 	bl	8005f88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ee4:	4b06      	ldr	r3, [pc, #24]	@ (8005f00 <prvIdleTask+0x28>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d9f9      	bls.n	8005ee0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005eec:	4b05      	ldr	r3, [pc, #20]	@ (8005f04 <prvIdleTask+0x2c>)
 8005eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005efc:	e7f0      	b.n	8005ee0 <prvIdleTask+0x8>
 8005efe:	bf00      	nop
 8005f00:	20000cd4 	.word	0x20000cd4
 8005f04:	e000ed04 	.word	0xe000ed04

08005f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f0e:	2300      	movs	r3, #0
 8005f10:	607b      	str	r3, [r7, #4]
 8005f12:	e00c      	b.n	8005f2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4a12      	ldr	r2, [pc, #72]	@ (8005f68 <prvInitialiseTaskLists+0x60>)
 8005f20:	4413      	add	r3, r2
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff fb12 	bl	800554c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	607b      	str	r3, [r7, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b06      	cmp	r3, #6
 8005f32:	d9ef      	bls.n	8005f14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f34:	480d      	ldr	r0, [pc, #52]	@ (8005f6c <prvInitialiseTaskLists+0x64>)
 8005f36:	f7ff fb09 	bl	800554c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f3a:	480d      	ldr	r0, [pc, #52]	@ (8005f70 <prvInitialiseTaskLists+0x68>)
 8005f3c:	f7ff fb06 	bl	800554c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f40:	480c      	ldr	r0, [pc, #48]	@ (8005f74 <prvInitialiseTaskLists+0x6c>)
 8005f42:	f7ff fb03 	bl	800554c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f46:	480c      	ldr	r0, [pc, #48]	@ (8005f78 <prvInitialiseTaskLists+0x70>)
 8005f48:	f7ff fb00 	bl	800554c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f4c:	480b      	ldr	r0, [pc, #44]	@ (8005f7c <prvInitialiseTaskLists+0x74>)
 8005f4e:	f7ff fafd 	bl	800554c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f52:	4b0b      	ldr	r3, [pc, #44]	@ (8005f80 <prvInitialiseTaskLists+0x78>)
 8005f54:	4a05      	ldr	r2, [pc, #20]	@ (8005f6c <prvInitialiseTaskLists+0x64>)
 8005f56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f58:	4b0a      	ldr	r3, [pc, #40]	@ (8005f84 <prvInitialiseTaskLists+0x7c>)
 8005f5a:	4a05      	ldr	r2, [pc, #20]	@ (8005f70 <prvInitialiseTaskLists+0x68>)
 8005f5c:	601a      	str	r2, [r3, #0]
}
 8005f5e:	bf00      	nop
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000cd4 	.word	0x20000cd4
 8005f6c:	20000d60 	.word	0x20000d60
 8005f70:	20000d74 	.word	0x20000d74
 8005f74:	20000d90 	.word	0x20000d90
 8005f78:	20000da4 	.word	0x20000da4
 8005f7c:	20000dbc 	.word	0x20000dbc
 8005f80:	20000d88 	.word	0x20000d88
 8005f84:	20000d8c 	.word	0x20000d8c

08005f88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f8e:	e019      	b.n	8005fc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f90:	f000 f9d4 	bl	800633c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f94:	4b10      	ldr	r3, [pc, #64]	@ (8005fd8 <prvCheckTasksWaitingTermination+0x50>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7ff fb59 	bl	8005658 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fdc <prvCheckTasksWaitingTermination+0x54>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	4a0b      	ldr	r2, [pc, #44]	@ (8005fdc <prvCheckTasksWaitingTermination+0x54>)
 8005fae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <prvCheckTasksWaitingTermination+0x58>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe0 <prvCheckTasksWaitingTermination+0x58>)
 8005fb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fba:	f000 f9ef 	bl	800639c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f810 	bl	8005fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fc4:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <prvCheckTasksWaitingTermination+0x58>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1e1      	bne.n	8005f90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fcc:	bf00      	nop
 8005fce:	bf00      	nop
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000da4 	.word	0x20000da4
 8005fdc:	20000dd0 	.word	0x20000dd0
 8005fe0:	20000db8 	.word	0x20000db8

08005fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	334c      	adds	r3, #76	@ 0x4c
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fc59 	bl	80068a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d108      	bne.n	8006012 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fb29 	bl	800665c <vPortFree>
				vPortFree( pxTCB );
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fb26 	bl	800665c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006010:	e019      	b.n	8006046 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006018:	2b01      	cmp	r3, #1
 800601a:	d103      	bne.n	8006024 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fb1d 	bl	800665c <vPortFree>
	}
 8006022:	e010      	b.n	8006046 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800602a:	2b02      	cmp	r3, #2
 800602c:	d00b      	beq.n	8006046 <prvDeleteTCB+0x62>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60fb      	str	r3, [r7, #12]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <prvDeleteTCB+0x5e>
	}
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006056:	4b0c      	ldr	r3, [pc, #48]	@ (8006088 <prvResetNextTaskUnblockTime+0x38>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d104      	bne.n	800606a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006060:	4b0a      	ldr	r3, [pc, #40]	@ (800608c <prvResetNextTaskUnblockTime+0x3c>)
 8006062:	f04f 32ff 	mov.w	r2, #4294967295
 8006066:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006068:	e008      	b.n	800607c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800606a:	4b07      	ldr	r3, [pc, #28]	@ (8006088 <prvResetNextTaskUnblockTime+0x38>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4a04      	ldr	r2, [pc, #16]	@ (800608c <prvResetNextTaskUnblockTime+0x3c>)
 800607a:	6013      	str	r3, [r2, #0]
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	bc80      	pop	{r7}
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	20000d88 	.word	0x20000d88
 800608c:	20000df0 	.word	0x20000df0

08006090 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800609a:	4b29      	ldr	r3, [pc, #164]	@ (8006140 <prvAddCurrentTaskToDelayedList+0xb0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060a0:	4b28      	ldr	r3, [pc, #160]	@ (8006144 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff fad6 	bl	8005658 <uxListRemove>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10b      	bne.n	80060ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80060b2:	4b24      	ldr	r3, [pc, #144]	@ (8006144 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b8:	2201      	movs	r2, #1
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	43da      	mvns	r2, r3
 80060c0:	4b21      	ldr	r3, [pc, #132]	@ (8006148 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4013      	ands	r3, r2
 80060c6:	4a20      	ldr	r2, [pc, #128]	@ (8006148 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d10a      	bne.n	80060e8 <prvAddCurrentTaskToDelayedList+0x58>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d007      	beq.n	80060e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006144 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3304      	adds	r3, #4
 80060de:	4619      	mov	r1, r3
 80060e0:	481a      	ldr	r0, [pc, #104]	@ (800614c <prvAddCurrentTaskToDelayedList+0xbc>)
 80060e2:	f7ff fa5e 	bl	80055a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060e6:	e026      	b.n	8006136 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4413      	add	r3, r2
 80060ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060f0:	4b14      	ldr	r3, [pc, #80]	@ (8006144 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d209      	bcs.n	8006114 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006100:	4b13      	ldr	r3, [pc, #76]	@ (8006150 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	4b0f      	ldr	r3, [pc, #60]	@ (8006144 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3304      	adds	r3, #4
 800610a:	4619      	mov	r1, r3
 800610c:	4610      	mov	r0, r2
 800610e:	f7ff fa6b 	bl	80055e8 <vListInsert>
}
 8006112:	e010      	b.n	8006136 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006114:	4b0f      	ldr	r3, [pc, #60]	@ (8006154 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	4b0a      	ldr	r3, [pc, #40]	@ (8006144 <prvAddCurrentTaskToDelayedList+0xb4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3304      	adds	r3, #4
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f7ff fa61 	bl	80055e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006126:	4b0c      	ldr	r3, [pc, #48]	@ (8006158 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	429a      	cmp	r2, r3
 800612e:	d202      	bcs.n	8006136 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006130:	4a09      	ldr	r2, [pc, #36]	@ (8006158 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	6013      	str	r3, [r2, #0]
}
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000dd4 	.word	0x20000dd4
 8006144:	20000cd0 	.word	0x20000cd0
 8006148:	20000dd8 	.word	0x20000dd8
 800614c:	20000dbc 	.word	0x20000dbc
 8006150:	20000d8c 	.word	0x20000d8c
 8006154:	20000d88 	.word	0x20000d88
 8006158:	20000df0 	.word	0x20000df0

0800615c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3b04      	subs	r3, #4
 800616c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3b04      	subs	r3, #4
 800617a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f023 0201 	bic.w	r2, r3, #1
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3b04      	subs	r3, #4
 800618a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800618c:	4a08      	ldr	r2, [pc, #32]	@ (80061b0 <pxPortInitialiseStack+0x54>)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3b14      	subs	r3, #20
 8006196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3b20      	subs	r3, #32
 80061a2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061a4:	68fb      	ldr	r3, [r7, #12]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr
 80061b0:	080061b5 	.word	0x080061b5

080061b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061be:	4b12      	ldr	r3, [pc, #72]	@ (8006208 <prvTaskExitError+0x54>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c6:	d00b      	beq.n	80061e0 <prvTaskExitError+0x2c>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	60fb      	str	r3, [r7, #12]
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	e7fd      	b.n	80061dc <prvTaskExitError+0x28>
	__asm volatile
 80061e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	60bb      	str	r3, [r7, #8]
}
 80061f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061f4:	bf00      	nop
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0fc      	beq.n	80061f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	bc80      	pop	{r7}
 8006206:	4770      	bx	lr
 8006208:	2000000c 	.word	0x2000000c
 800620c:	00000000 	.word	0x00000000

08006210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006210:	4b07      	ldr	r3, [pc, #28]	@ (8006230 <pxCurrentTCBConst2>)
 8006212:	6819      	ldr	r1, [r3, #0]
 8006214:	6808      	ldr	r0, [r1, #0]
 8006216:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800621a:	f380 8809 	msr	PSP, r0
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f04f 0000 	mov.w	r0, #0
 8006226:	f380 8811 	msr	BASEPRI, r0
 800622a:	f04e 0e0d 	orr.w	lr, lr, #13
 800622e:	4770      	bx	lr

08006230 <pxCurrentTCBConst2>:
 8006230:	20000cd0 	.word	0x20000cd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop

08006238 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006238:	4806      	ldr	r0, [pc, #24]	@ (8006254 <prvPortStartFirstTask+0x1c>)
 800623a:	6800      	ldr	r0, [r0, #0]
 800623c:	6800      	ldr	r0, [r0, #0]
 800623e:	f380 8808 	msr	MSP, r0
 8006242:	b662      	cpsie	i
 8006244:	b661      	cpsie	f
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	df00      	svc	0
 8006250:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006252:	bf00      	nop
 8006254:	e000ed08 	.word	0xe000ed08

08006258 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800625e:	4b32      	ldr	r3, [pc, #200]	@ (8006328 <xPortStartScheduler+0xd0>)
 8006260:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	22ff      	movs	r2, #255	@ 0xff
 800626e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006280:	b2da      	uxtb	r2, r3
 8006282:	4b2a      	ldr	r3, [pc, #168]	@ (800632c <xPortStartScheduler+0xd4>)
 8006284:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006286:	4b2a      	ldr	r3, [pc, #168]	@ (8006330 <xPortStartScheduler+0xd8>)
 8006288:	2207      	movs	r2, #7
 800628a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800628c:	e009      	b.n	80062a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800628e:	4b28      	ldr	r3, [pc, #160]	@ (8006330 <xPortStartScheduler+0xd8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3b01      	subs	r3, #1
 8006294:	4a26      	ldr	r2, [pc, #152]	@ (8006330 <xPortStartScheduler+0xd8>)
 8006296:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062a2:	78fb      	ldrb	r3, [r7, #3]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062aa:	2b80      	cmp	r3, #128	@ 0x80
 80062ac:	d0ef      	beq.n	800628e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062ae:	4b20      	ldr	r3, [pc, #128]	@ (8006330 <xPortStartScheduler+0xd8>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f1c3 0307 	rsb	r3, r3, #7
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d00b      	beq.n	80062d2 <xPortStartScheduler+0x7a>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	60bb      	str	r3, [r7, #8]
}
 80062cc:	bf00      	nop
 80062ce:	bf00      	nop
 80062d0:	e7fd      	b.n	80062ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062d2:	4b17      	ldr	r3, [pc, #92]	@ (8006330 <xPortStartScheduler+0xd8>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	021b      	lsls	r3, r3, #8
 80062d8:	4a15      	ldr	r2, [pc, #84]	@ (8006330 <xPortStartScheduler+0xd8>)
 80062da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062dc:	4b14      	ldr	r3, [pc, #80]	@ (8006330 <xPortStartScheduler+0xd8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062e4:	4a12      	ldr	r2, [pc, #72]	@ (8006330 <xPortStartScheduler+0xd8>)
 80062e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062f0:	4b10      	ldr	r3, [pc, #64]	@ (8006334 <xPortStartScheduler+0xdc>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a0f      	ldr	r2, [pc, #60]	@ (8006334 <xPortStartScheduler+0xdc>)
 80062f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80062fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006334 <xPortStartScheduler+0xdc>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a0c      	ldr	r2, [pc, #48]	@ (8006334 <xPortStartScheduler+0xdc>)
 8006302:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006306:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006308:	f000 f8b8 	bl	800647c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800630c:	4b0a      	ldr	r3, [pc, #40]	@ (8006338 <xPortStartScheduler+0xe0>)
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006312:	f7ff ff91 	bl	8006238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006316:	f7ff fd7d 	bl	8005e14 <vTaskSwitchContext>
	prvTaskExitError();
 800631a:	f7ff ff4b 	bl	80061b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	e000e400 	.word	0xe000e400
 800632c:	20000dfc 	.word	0x20000dfc
 8006330:	20000e00 	.word	0x20000e00
 8006334:	e000ed20 	.word	0xe000ed20
 8006338:	2000000c 	.word	0x2000000c

0800633c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	607b      	str	r3, [r7, #4]
}
 8006354:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006356:	4b0f      	ldr	r3, [pc, #60]	@ (8006394 <vPortEnterCritical+0x58>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3301      	adds	r3, #1
 800635c:	4a0d      	ldr	r2, [pc, #52]	@ (8006394 <vPortEnterCritical+0x58>)
 800635e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006360:	4b0c      	ldr	r3, [pc, #48]	@ (8006394 <vPortEnterCritical+0x58>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d110      	bne.n	800638a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006368:	4b0b      	ldr	r3, [pc, #44]	@ (8006398 <vPortEnterCritical+0x5c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <vPortEnterCritical+0x4e>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	603b      	str	r3, [r7, #0]
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	e7fd      	b.n	8006386 <vPortEnterCritical+0x4a>
	}
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr
 8006394:	2000000c 	.word	0x2000000c
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063a2:	4b12      	ldr	r3, [pc, #72]	@ (80063ec <vPortExitCritical+0x50>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10b      	bne.n	80063c2 <vPortExitCritical+0x26>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	607b      	str	r3, [r7, #4]
}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	e7fd      	b.n	80063be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063c2:	4b0a      	ldr	r3, [pc, #40]	@ (80063ec <vPortExitCritical+0x50>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	4a08      	ldr	r2, [pc, #32]	@ (80063ec <vPortExitCritical+0x50>)
 80063ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063cc:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <vPortExitCritical+0x50>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d105      	bne.n	80063e0 <vPortExitCritical+0x44>
 80063d4:	2300      	movs	r3, #0
 80063d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bc80      	pop	{r7}
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	2000000c 	.word	0x2000000c

080063f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063f0:	f3ef 8009 	mrs	r0, PSP
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006430 <pxCurrentTCBConst>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006400:	6010      	str	r0, [r2, #0]
 8006402:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006406:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800640a:	f380 8811 	msr	BASEPRI, r0
 800640e:	f7ff fd01 	bl	8005e14 <vTaskSwitchContext>
 8006412:	f04f 0000 	mov.w	r0, #0
 8006416:	f380 8811 	msr	BASEPRI, r0
 800641a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800641e:	6819      	ldr	r1, [r3, #0]
 8006420:	6808      	ldr	r0, [r1, #0]
 8006422:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006426:	f380 8809 	msr	PSP, r0
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	4770      	bx	lr

08006430 <pxCurrentTCBConst>:
 8006430:	20000cd0 	.word	0x20000cd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop

08006438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	607b      	str	r3, [r7, #4]
}
 8006450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006452:	f7ff fc25 	bl	8005ca0 <xTaskIncrementTick>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800645c:	4b06      	ldr	r3, [pc, #24]	@ (8006478 <SysTick_Handler+0x40>)
 800645e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	2300      	movs	r3, #0
 8006466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	f383 8811 	msr	BASEPRI, r3
}
 800646e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006480:	4b0a      	ldr	r3, [pc, #40]	@ (80064ac <vPortSetupTimerInterrupt+0x30>)
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006486:	4b0a      	ldr	r3, [pc, #40]	@ (80064b0 <vPortSetupTimerInterrupt+0x34>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800648c:	4b09      	ldr	r3, [pc, #36]	@ (80064b4 <vPortSetupTimerInterrupt+0x38>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a09      	ldr	r2, [pc, #36]	@ (80064b8 <vPortSetupTimerInterrupt+0x3c>)
 8006492:	fba2 2303 	umull	r2, r3, r2, r3
 8006496:	099b      	lsrs	r3, r3, #6
 8006498:	4a08      	ldr	r2, [pc, #32]	@ (80064bc <vPortSetupTimerInterrupt+0x40>)
 800649a:	3b01      	subs	r3, #1
 800649c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800649e:	4b03      	ldr	r3, [pc, #12]	@ (80064ac <vPortSetupTimerInterrupt+0x30>)
 80064a0:	2207      	movs	r2, #7
 80064a2:	601a      	str	r2, [r3, #0]
}
 80064a4:	bf00      	nop
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr
 80064ac:	e000e010 	.word	0xe000e010
 80064b0:	e000e018 	.word	0xe000e018
 80064b4:	20000000 	.word	0x20000000
 80064b8:	10624dd3 	.word	0x10624dd3
 80064bc:	e000e014 	.word	0xe000e014

080064c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08a      	sub	sp, #40	@ 0x28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064c8:	2300      	movs	r3, #0
 80064ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064cc:	f7ff fb3c 	bl	8005b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064d0:	4b5c      	ldr	r3, [pc, #368]	@ (8006644 <pvPortMalloc+0x184>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064d8:	f000 f924 	bl	8006724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064dc:	4b5a      	ldr	r3, [pc, #360]	@ (8006648 <pvPortMalloc+0x188>)
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4013      	ands	r3, r2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f040 8095 	bne.w	8006614 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01e      	beq.n	800652e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80064f0:	2208      	movs	r2, #8
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4413      	add	r3, r2
 80064f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d015      	beq.n	800652e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f023 0307 	bic.w	r3, r3, #7
 8006508:	3308      	adds	r3, #8
 800650a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00b      	beq.n	800652e <pvPortMalloc+0x6e>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	617b      	str	r3, [r7, #20]
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	e7fd      	b.n	800652a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d06f      	beq.n	8006614 <pvPortMalloc+0x154>
 8006534:	4b45      	ldr	r3, [pc, #276]	@ (800664c <pvPortMalloc+0x18c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	429a      	cmp	r2, r3
 800653c:	d86a      	bhi.n	8006614 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800653e:	4b44      	ldr	r3, [pc, #272]	@ (8006650 <pvPortMalloc+0x190>)
 8006540:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006542:	4b43      	ldr	r3, [pc, #268]	@ (8006650 <pvPortMalloc+0x190>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006548:	e004      	b.n	8006554 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	429a      	cmp	r2, r3
 800655c:	d903      	bls.n	8006566 <pvPortMalloc+0xa6>
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f1      	bne.n	800654a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006566:	4b37      	ldr	r3, [pc, #220]	@ (8006644 <pvPortMalloc+0x184>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800656c:	429a      	cmp	r2, r3
 800656e:	d051      	beq.n	8006614 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2208      	movs	r2, #8
 8006576:	4413      	add	r3, r2
 8006578:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	1ad2      	subs	r2, r2, r3
 800658a:	2308      	movs	r3, #8
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	429a      	cmp	r2, r3
 8006590:	d920      	bls.n	80065d4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4413      	add	r3, r2
 8006598:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00b      	beq.n	80065bc <pvPortMalloc+0xfc>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	613b      	str	r3, [r7, #16]
}
 80065b6:	bf00      	nop
 80065b8:	bf00      	nop
 80065ba:	e7fd      	b.n	80065b8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	1ad2      	subs	r2, r2, r3
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065ce:	69b8      	ldr	r0, [r7, #24]
 80065d0:	f000 f90a 	bl	80067e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065d4:	4b1d      	ldr	r3, [pc, #116]	@ (800664c <pvPortMalloc+0x18c>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	4a1b      	ldr	r2, [pc, #108]	@ (800664c <pvPortMalloc+0x18c>)
 80065e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065e2:	4b1a      	ldr	r3, [pc, #104]	@ (800664c <pvPortMalloc+0x18c>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006654 <pvPortMalloc+0x194>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d203      	bcs.n	80065f6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065ee:	4b17      	ldr	r3, [pc, #92]	@ (800664c <pvPortMalloc+0x18c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a18      	ldr	r2, [pc, #96]	@ (8006654 <pvPortMalloc+0x194>)
 80065f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	4b13      	ldr	r3, [pc, #76]	@ (8006648 <pvPortMalloc+0x188>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	431a      	orrs	r2, r3
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800660a:	4b13      	ldr	r3, [pc, #76]	@ (8006658 <pvPortMalloc+0x198>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3301      	adds	r3, #1
 8006610:	4a11      	ldr	r2, [pc, #68]	@ (8006658 <pvPortMalloc+0x198>)
 8006612:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006614:	f7ff faa6 	bl	8005b64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00b      	beq.n	800663a <pvPortMalloc+0x17a>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	60fb      	str	r3, [r7, #12]
}
 8006634:	bf00      	nop
 8006636:	bf00      	nop
 8006638:	e7fd      	b.n	8006636 <pvPortMalloc+0x176>
	return pvReturn;
 800663a:	69fb      	ldr	r3, [r7, #28]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3728      	adds	r7, #40	@ 0x28
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	20001a0c 	.word	0x20001a0c
 8006648:	20001a20 	.word	0x20001a20
 800664c:	20001a10 	.word	0x20001a10
 8006650:	20001a04 	.word	0x20001a04
 8006654:	20001a14 	.word	0x20001a14
 8006658:	20001a18 	.word	0x20001a18

0800665c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d04f      	beq.n	800670e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800666e:	2308      	movs	r3, #8
 8006670:	425b      	negs	r3, r3
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4413      	add	r3, r2
 8006676:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	4b25      	ldr	r3, [pc, #148]	@ (8006718 <vPortFree+0xbc>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4013      	ands	r3, r2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <vPortFree+0x46>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	60fb      	str	r3, [r7, #12]
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	e7fd      	b.n	800669e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00b      	beq.n	80066c2 <vPortFree+0x66>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	60bb      	str	r3, [r7, #8]
}
 80066bc:	bf00      	nop
 80066be:	bf00      	nop
 80066c0:	e7fd      	b.n	80066be <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	4b14      	ldr	r3, [pc, #80]	@ (8006718 <vPortFree+0xbc>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4013      	ands	r3, r2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01e      	beq.n	800670e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d11a      	bne.n	800670e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006718 <vPortFree+0xbc>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	43db      	mvns	r3, r3
 80066e2:	401a      	ands	r2, r3
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066e8:	f7ff fa2e 	bl	8005b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	4b0a      	ldr	r3, [pc, #40]	@ (800671c <vPortFree+0xc0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4413      	add	r3, r2
 80066f6:	4a09      	ldr	r2, [pc, #36]	@ (800671c <vPortFree+0xc0>)
 80066f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066fa:	6938      	ldr	r0, [r7, #16]
 80066fc:	f000 f874 	bl	80067e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006700:	4b07      	ldr	r3, [pc, #28]	@ (8006720 <vPortFree+0xc4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3301      	adds	r3, #1
 8006706:	4a06      	ldr	r2, [pc, #24]	@ (8006720 <vPortFree+0xc4>)
 8006708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800670a:	f7ff fa2b 	bl	8005b64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800670e:	bf00      	nop
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20001a20 	.word	0x20001a20
 800671c:	20001a10 	.word	0x20001a10
 8006720:	20001a1c 	.word	0x20001a1c

08006724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800672a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800672e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006730:	4b27      	ldr	r3, [pc, #156]	@ (80067d0 <prvHeapInit+0xac>)
 8006732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00c      	beq.n	8006758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3307      	adds	r3, #7
 8006742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0307 	bic.w	r3, r3, #7
 800674a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	4a1f      	ldr	r2, [pc, #124]	@ (80067d0 <prvHeapInit+0xac>)
 8006754:	4413      	add	r3, r2
 8006756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800675c:	4a1d      	ldr	r2, [pc, #116]	@ (80067d4 <prvHeapInit+0xb0>)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006762:	4b1c      	ldr	r3, [pc, #112]	@ (80067d4 <prvHeapInit+0xb0>)
 8006764:	2200      	movs	r2, #0
 8006766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	4413      	add	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006770:	2208      	movs	r2, #8
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	1a9b      	subs	r3, r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0307 	bic.w	r3, r3, #7
 800677e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4a15      	ldr	r2, [pc, #84]	@ (80067d8 <prvHeapInit+0xb4>)
 8006784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006786:	4b14      	ldr	r3, [pc, #80]	@ (80067d8 <prvHeapInit+0xb4>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2200      	movs	r2, #0
 800678c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800678e:	4b12      	ldr	r3, [pc, #72]	@ (80067d8 <prvHeapInit+0xb4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	1ad2      	subs	r2, r2, r3
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067a4:	4b0c      	ldr	r3, [pc, #48]	@ (80067d8 <prvHeapInit+0xb4>)
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	4a0a      	ldr	r2, [pc, #40]	@ (80067dc <prvHeapInit+0xb8>)
 80067b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4a09      	ldr	r2, [pc, #36]	@ (80067e0 <prvHeapInit+0xbc>)
 80067ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067bc:	4b09      	ldr	r3, [pc, #36]	@ (80067e4 <prvHeapInit+0xc0>)
 80067be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80067c2:	601a      	str	r2, [r3, #0]
}
 80067c4:	bf00      	nop
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	20000e04 	.word	0x20000e04
 80067d4:	20001a04 	.word	0x20001a04
 80067d8:	20001a0c 	.word	0x20001a0c
 80067dc:	20001a14 	.word	0x20001a14
 80067e0:	20001a10 	.word	0x20001a10
 80067e4:	20001a20 	.word	0x20001a20

080067e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067f0:	4b27      	ldr	r3, [pc, #156]	@ (8006890 <prvInsertBlockIntoFreeList+0xa8>)
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	e002      	b.n	80067fc <prvInsertBlockIntoFreeList+0x14>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	429a      	cmp	r2, r3
 8006804:	d8f7      	bhi.n	80067f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	4413      	add	r3, r2
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	429a      	cmp	r2, r3
 8006816:	d108      	bne.n	800682a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	441a      	add	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	441a      	add	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d118      	bne.n	8006870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	4b14      	ldr	r3, [pc, #80]	@ (8006894 <prvInsertBlockIntoFreeList+0xac>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d00d      	beq.n	8006866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	441a      	add	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	e008      	b.n	8006878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006866:	4b0b      	ldr	r3, [pc, #44]	@ (8006894 <prvInsertBlockIntoFreeList+0xac>)
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	e003      	b.n	8006878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	429a      	cmp	r2, r3
 800687e:	d002      	beq.n	8006886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006886:	bf00      	nop
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	bc80      	pop	{r7}
 800688e:	4770      	bx	lr
 8006890:	20001a04 	.word	0x20001a04
 8006894:	20001a0c 	.word	0x20001a0c

08006898 <memset>:
 8006898:	4603      	mov	r3, r0
 800689a:	4402      	add	r2, r0
 800689c:	4293      	cmp	r3, r2
 800689e:	d100      	bne.n	80068a2 <memset+0xa>
 80068a0:	4770      	bx	lr
 80068a2:	f803 1b01 	strb.w	r1, [r3], #1
 80068a6:	e7f9      	b.n	800689c <memset+0x4>

080068a8 <_reclaim_reent>:
 80068a8:	4b29      	ldr	r3, [pc, #164]	@ (8006950 <_reclaim_reent+0xa8>)
 80068aa:	b570      	push	{r4, r5, r6, lr}
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4604      	mov	r4, r0
 80068b0:	4283      	cmp	r3, r0
 80068b2:	d04b      	beq.n	800694c <_reclaim_reent+0xa4>
 80068b4:	69c3      	ldr	r3, [r0, #28]
 80068b6:	b1ab      	cbz	r3, 80068e4 <_reclaim_reent+0x3c>
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	b16b      	cbz	r3, 80068d8 <_reclaim_reent+0x30>
 80068bc:	2500      	movs	r5, #0
 80068be:	69e3      	ldr	r3, [r4, #28]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	5959      	ldr	r1, [r3, r5]
 80068c4:	2900      	cmp	r1, #0
 80068c6:	d13b      	bne.n	8006940 <_reclaim_reent+0x98>
 80068c8:	3504      	adds	r5, #4
 80068ca:	2d80      	cmp	r5, #128	@ 0x80
 80068cc:	d1f7      	bne.n	80068be <_reclaim_reent+0x16>
 80068ce:	69e3      	ldr	r3, [r4, #28]
 80068d0:	4620      	mov	r0, r4
 80068d2:	68d9      	ldr	r1, [r3, #12]
 80068d4:	f000 f864 	bl	80069a0 <_free_r>
 80068d8:	69e3      	ldr	r3, [r4, #28]
 80068da:	6819      	ldr	r1, [r3, #0]
 80068dc:	b111      	cbz	r1, 80068e4 <_reclaim_reent+0x3c>
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 f85e 	bl	80069a0 <_free_r>
 80068e4:	6961      	ldr	r1, [r4, #20]
 80068e6:	b111      	cbz	r1, 80068ee <_reclaim_reent+0x46>
 80068e8:	4620      	mov	r0, r4
 80068ea:	f000 f859 	bl	80069a0 <_free_r>
 80068ee:	69e1      	ldr	r1, [r4, #28]
 80068f0:	b111      	cbz	r1, 80068f8 <_reclaim_reent+0x50>
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 f854 	bl	80069a0 <_free_r>
 80068f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80068fa:	b111      	cbz	r1, 8006902 <_reclaim_reent+0x5a>
 80068fc:	4620      	mov	r0, r4
 80068fe:	f000 f84f 	bl	80069a0 <_free_r>
 8006902:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006904:	b111      	cbz	r1, 800690c <_reclaim_reent+0x64>
 8006906:	4620      	mov	r0, r4
 8006908:	f000 f84a 	bl	80069a0 <_free_r>
 800690c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800690e:	b111      	cbz	r1, 8006916 <_reclaim_reent+0x6e>
 8006910:	4620      	mov	r0, r4
 8006912:	f000 f845 	bl	80069a0 <_free_r>
 8006916:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006918:	b111      	cbz	r1, 8006920 <_reclaim_reent+0x78>
 800691a:	4620      	mov	r0, r4
 800691c:	f000 f840 	bl	80069a0 <_free_r>
 8006920:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006922:	b111      	cbz	r1, 800692a <_reclaim_reent+0x82>
 8006924:	4620      	mov	r0, r4
 8006926:	f000 f83b 	bl	80069a0 <_free_r>
 800692a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800692c:	b111      	cbz	r1, 8006934 <_reclaim_reent+0x8c>
 800692e:	4620      	mov	r0, r4
 8006930:	f000 f836 	bl	80069a0 <_free_r>
 8006934:	6a23      	ldr	r3, [r4, #32]
 8006936:	b14b      	cbz	r3, 800694c <_reclaim_reent+0xa4>
 8006938:	4620      	mov	r0, r4
 800693a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800693e:	4718      	bx	r3
 8006940:	680e      	ldr	r6, [r1, #0]
 8006942:	4620      	mov	r0, r4
 8006944:	f000 f82c 	bl	80069a0 <_free_r>
 8006948:	4631      	mov	r1, r6
 800694a:	e7bb      	b.n	80068c4 <_reclaim_reent+0x1c>
 800694c:	bd70      	pop	{r4, r5, r6, pc}
 800694e:	bf00      	nop
 8006950:	20000010 	.word	0x20000010

08006954 <__libc_init_array>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	2600      	movs	r6, #0
 8006958:	4d0c      	ldr	r5, [pc, #48]	@ (800698c <__libc_init_array+0x38>)
 800695a:	4c0d      	ldr	r4, [pc, #52]	@ (8006990 <__libc_init_array+0x3c>)
 800695c:	1b64      	subs	r4, r4, r5
 800695e:	10a4      	asrs	r4, r4, #2
 8006960:	42a6      	cmp	r6, r4
 8006962:	d109      	bne.n	8006978 <__libc_init_array+0x24>
 8006964:	f000 f870 	bl	8006a48 <_init>
 8006968:	2600      	movs	r6, #0
 800696a:	4d0a      	ldr	r5, [pc, #40]	@ (8006994 <__libc_init_array+0x40>)
 800696c:	4c0a      	ldr	r4, [pc, #40]	@ (8006998 <__libc_init_array+0x44>)
 800696e:	1b64      	subs	r4, r4, r5
 8006970:	10a4      	asrs	r4, r4, #2
 8006972:	42a6      	cmp	r6, r4
 8006974:	d105      	bne.n	8006982 <__libc_init_array+0x2e>
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	f855 3b04 	ldr.w	r3, [r5], #4
 800697c:	4798      	blx	r3
 800697e:	3601      	adds	r6, #1
 8006980:	e7ee      	b.n	8006960 <__libc_init_array+0xc>
 8006982:	f855 3b04 	ldr.w	r3, [r5], #4
 8006986:	4798      	blx	r3
 8006988:	3601      	adds	r6, #1
 800698a:	e7f2      	b.n	8006972 <__libc_init_array+0x1e>
 800698c:	08006b0c 	.word	0x08006b0c
 8006990:	08006b0c 	.word	0x08006b0c
 8006994:	08006b0c 	.word	0x08006b0c
 8006998:	08006b10 	.word	0x08006b10

0800699c <__retarget_lock_acquire_recursive>:
 800699c:	4770      	bx	lr

0800699e <__retarget_lock_release_recursive>:
 800699e:	4770      	bx	lr

080069a0 <_free_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4605      	mov	r5, r0
 80069a4:	2900      	cmp	r1, #0
 80069a6:	d040      	beq.n	8006a2a <_free_r+0x8a>
 80069a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ac:	1f0c      	subs	r4, r1, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bfb8      	it	lt
 80069b2:	18e4      	addlt	r4, r4, r3
 80069b4:	f000 f83c 	bl	8006a30 <__malloc_lock>
 80069b8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a2c <_free_r+0x8c>)
 80069ba:	6813      	ldr	r3, [r2, #0]
 80069bc:	b933      	cbnz	r3, 80069cc <_free_r+0x2c>
 80069be:	6063      	str	r3, [r4, #4]
 80069c0:	6014      	str	r4, [r2, #0]
 80069c2:	4628      	mov	r0, r5
 80069c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069c8:	f000 b838 	b.w	8006a3c <__malloc_unlock>
 80069cc:	42a3      	cmp	r3, r4
 80069ce:	d908      	bls.n	80069e2 <_free_r+0x42>
 80069d0:	6820      	ldr	r0, [r4, #0]
 80069d2:	1821      	adds	r1, r4, r0
 80069d4:	428b      	cmp	r3, r1
 80069d6:	bf01      	itttt	eq
 80069d8:	6819      	ldreq	r1, [r3, #0]
 80069da:	685b      	ldreq	r3, [r3, #4]
 80069dc:	1809      	addeq	r1, r1, r0
 80069de:	6021      	streq	r1, [r4, #0]
 80069e0:	e7ed      	b.n	80069be <_free_r+0x1e>
 80069e2:	461a      	mov	r2, r3
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	b10b      	cbz	r3, 80069ec <_free_r+0x4c>
 80069e8:	42a3      	cmp	r3, r4
 80069ea:	d9fa      	bls.n	80069e2 <_free_r+0x42>
 80069ec:	6811      	ldr	r1, [r2, #0]
 80069ee:	1850      	adds	r0, r2, r1
 80069f0:	42a0      	cmp	r0, r4
 80069f2:	d10b      	bne.n	8006a0c <_free_r+0x6c>
 80069f4:	6820      	ldr	r0, [r4, #0]
 80069f6:	4401      	add	r1, r0
 80069f8:	1850      	adds	r0, r2, r1
 80069fa:	4283      	cmp	r3, r0
 80069fc:	6011      	str	r1, [r2, #0]
 80069fe:	d1e0      	bne.n	80069c2 <_free_r+0x22>
 8006a00:	6818      	ldr	r0, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	4408      	add	r0, r1
 8006a06:	6010      	str	r0, [r2, #0]
 8006a08:	6053      	str	r3, [r2, #4]
 8006a0a:	e7da      	b.n	80069c2 <_free_r+0x22>
 8006a0c:	d902      	bls.n	8006a14 <_free_r+0x74>
 8006a0e:	230c      	movs	r3, #12
 8006a10:	602b      	str	r3, [r5, #0]
 8006a12:	e7d6      	b.n	80069c2 <_free_r+0x22>
 8006a14:	6820      	ldr	r0, [r4, #0]
 8006a16:	1821      	adds	r1, r4, r0
 8006a18:	428b      	cmp	r3, r1
 8006a1a:	bf01      	itttt	eq
 8006a1c:	6819      	ldreq	r1, [r3, #0]
 8006a1e:	685b      	ldreq	r3, [r3, #4]
 8006a20:	1809      	addeq	r1, r1, r0
 8006a22:	6021      	streq	r1, [r4, #0]
 8006a24:	6063      	str	r3, [r4, #4]
 8006a26:	6054      	str	r4, [r2, #4]
 8006a28:	e7cb      	b.n	80069c2 <_free_r+0x22>
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	20001b60 	.word	0x20001b60

08006a30 <__malloc_lock>:
 8006a30:	4801      	ldr	r0, [pc, #4]	@ (8006a38 <__malloc_lock+0x8>)
 8006a32:	f7ff bfb3 	b.w	800699c <__retarget_lock_acquire_recursive>
 8006a36:	bf00      	nop
 8006a38:	20001b5c 	.word	0x20001b5c

08006a3c <__malloc_unlock>:
 8006a3c:	4801      	ldr	r0, [pc, #4]	@ (8006a44 <__malloc_unlock+0x8>)
 8006a3e:	f7ff bfae 	b.w	800699e <__retarget_lock_release_recursive>
 8006a42:	bf00      	nop
 8006a44:	20001b5c 	.word	0x20001b5c

08006a48 <_init>:
 8006a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4a:	bf00      	nop
 8006a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4e:	bc08      	pop	{r3}
 8006a50:	469e      	mov	lr, r3
 8006a52:	4770      	bx	lr

08006a54 <_fini>:
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a56:	bf00      	nop
 8006a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5a:	bc08      	pop	{r3}
 8006a5c:	469e      	mov	lr, r3
 8006a5e:	4770      	bx	lr
