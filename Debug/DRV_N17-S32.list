
DRV_N17-S32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009848  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08009958  08009958  0000a958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a58  08009a58  0000b080  2**0
                  CONTENTS
  4 .ARM          00000000  08009a58  08009a58  0000b080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a58  08009a58  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a58  08009a58  0000aa58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a5c  08009a5c  0000aa5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009a60  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a0  20000080  08009ae0  0000b080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001420  08009ae0  0000b420  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189f0  00000000  00000000  0000b0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a5f  00000000  00000000  00023a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  000274f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001094  00000000  00000000  00028a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6f3  00000000  00000000  00029ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000199e5  00000000  00000000  000441b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000964fc  00000000  00000000  0005db9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f4098  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006158  00000000  00000000  000f40dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fa234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08009940 	.word	0x08009940

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08009940 	.word	0x08009940

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d76:	2afd      	cmp	r2, #253	@ 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	@ 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	@ 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	@ 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <encRead>:
	float angle_deg = (angle * 360.0) / 4096.0;

	*result = angle_deg;
}

void encRead(){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(&hi2c1, (ENC_ADDR << 1), AS5600_RAW_ANGLE_MSB_REG, I2C_MEMADD_SIZE_8BIT, raw_buffer, 2);
 80010b6:	2302      	movs	r3, #2
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <encRead+0x20>)
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	220c      	movs	r2, #12
 80010c2:	216c      	movs	r1, #108	@ 0x6c
 80010c4:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <encRead+0x24>)
 80010c6:	f001 fca5 	bl	8002a14 <HAL_I2C_Mem_Read_IT>
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200000a4 	.word	0x200000a4
 80010d4:	2000034c 	.word	0x2000034c

080010d8 <getCounter>:

int32_t getCounter(){
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	return accumulate_counter;
 80010dc:	4b02      	ldr	r3, [pc, #8]	@ (80010e8 <getCounter+0x10>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	200000a0 	.word	0x200000a0

080010ec <encGetBuffer>:

void encGetBuffer(uint8_t* result){
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	result[0] = raw_buffer[0];
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <encGetBuffer+0x24>)
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	701a      	strb	r2, [r3, #0]
	result[1] = raw_buffer[1];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3301      	adds	r3, #1
 8001100:	4a03      	ldr	r2, [pc, #12]	@ (8001110 <encGetBuffer+0x24>)
 8001102:	7852      	ldrb	r2, [r2, #1]
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	200000a4 	.word	0x200000a4

08001114 <HAL_I2C_MemRxCpltCallback>:
	filteredValue = sum / FILTER_SIZE;

	return filteredValue;
}

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a44      	ldr	r2, [pc, #272]	@ (8001234 <HAL_I2C_MemRxCpltCallback+0x120>)
 8001122:	4293      	cmp	r3, r2
 8001124:	f040 8081 	bne.w	800122a <HAL_I2C_MemRxCpltCallback+0x116>
    	uint16_t position_now = (raw_buffer[0] << 8) | raw_buffer[1];
 8001128:	4b43      	ldr	r3, [pc, #268]	@ (8001238 <HAL_I2C_MemRxCpltCallback+0x124>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b41      	ldr	r3, [pc, #260]	@ (8001238 <HAL_I2C_MemRxCpltCallback+0x124>)
 8001132:	785b      	ldrb	r3, [r3, #1]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21b      	sxth	r3, r3
 800113a:	817b      	strh	r3, [r7, #10]
//      filter make it worse disable it
//    	position_now = lowPassFilter(position_now);
		active_quadrant = -1;
 800113c:	4b3f      	ldr	r3, [pc, #252]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 800113e:	22ff      	movs	r2, #255	@ 0xff
 8001140:	701a      	strb	r2, [r3, #0]

		if(position_now >= 0 && position_now <= 1024) active_quadrant = 1;
 8001142:	897b      	ldrh	r3, [r7, #10]
 8001144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001148:	d802      	bhi.n	8001150 <HAL_I2C_MemRxCpltCallback+0x3c>
 800114a:	4b3c      	ldr	r3, [pc, #240]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
		if(position_now >= 1025 && position_now <= 2048) active_quadrant = 2;
 8001150:	897b      	ldrh	r3, [r7, #10]
 8001152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001156:	d906      	bls.n	8001166 <HAL_I2C_MemRxCpltCallback+0x52>
 8001158:	897b      	ldrh	r3, [r7, #10]
 800115a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800115e:	d802      	bhi.n	8001166 <HAL_I2C_MemRxCpltCallback+0x52>
 8001160:	4b36      	ldr	r3, [pc, #216]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 8001162:	2202      	movs	r2, #2
 8001164:	701a      	strb	r2, [r3, #0]
		if(position_now >= 2049 && position_now <= 3072) active_quadrant = 3;
 8001166:	897b      	ldrh	r3, [r7, #10]
 8001168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800116c:	d906      	bls.n	800117c <HAL_I2C_MemRxCpltCallback+0x68>
 800116e:	897b      	ldrh	r3, [r7, #10]
 8001170:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001174:	d802      	bhi.n	800117c <HAL_I2C_MemRxCpltCallback+0x68>
 8001176:	4b31      	ldr	r3, [pc, #196]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 8001178:	2203      	movs	r2, #3
 800117a:	701a      	strb	r2, [r3, #0]
		if(position_now >= 3073 && position_now <= 4095) active_quadrant = 4;
 800117c:	897b      	ldrh	r3, [r7, #10]
 800117e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001182:	d906      	bls.n	8001192 <HAL_I2C_MemRxCpltCallback+0x7e>
 8001184:	897b      	ldrh	r3, [r7, #10]
 8001186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800118a:	d202      	bcs.n	8001192 <HAL_I2C_MemRxCpltCallback+0x7e>
 800118c:	4b2b      	ldr	r3, [pc, #172]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 800118e:	2204      	movs	r2, #4
 8001190:	701a      	strb	r2, [r3, #0]

		if(last_quadrant == -1) last_quadrant = active_quadrant;
 8001192:	4b2b      	ldr	r3, [pc, #172]	@ (8001240 <HAL_I2C_MemRxCpltCallback+0x12c>)
 8001194:	f993 3000 	ldrsb.w	r3, [r3]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d104      	bne.n	80011a8 <HAL_I2C_MemRxCpltCallback+0x94>
 800119e:	4b27      	ldr	r3, [pc, #156]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 80011a0:	f993 2000 	ldrsb.w	r2, [r3]
 80011a4:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <HAL_I2C_MemRxCpltCallback+0x12c>)
 80011a6:	701a      	strb	r2, [r3, #0]
		int32_t delta = (int32_t)(position_now - position_prev);
 80011a8:	897b      	ldrh	r3, [r7, #10]
 80011aa:	4a26      	ldr	r2, [pc, #152]	@ (8001244 <HAL_I2C_MemRxCpltCallback+0x130>)
 80011ac:	8812      	ldrh	r2, [r2, #0]
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]

		if(last_quadrant == 4 && active_quadrant == 1){
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <HAL_I2C_MemRxCpltCallback+0x12c>)
 80011b4:	f993 3000 	ldrsb.w	r3, [r3]
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d110      	bne.n	80011de <HAL_I2C_MemRxCpltCallback+0xca>
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 80011be:	f993 3000 	ldrsb.w	r3, [r3]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d10b      	bne.n	80011de <HAL_I2C_MemRxCpltCallback+0xca>
			elapsed_fall_f = TRUE;
 80011c6:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <HAL_I2C_MemRxCpltCallback+0x134>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
			delta = ((ENC_PPR - 1) - abs(delta));
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bfb8      	it	lt
 80011d2:	425b      	neglt	r3, r3
 80011d4:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 80011d8:	330f      	adds	r3, #15
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	e011      	b.n	8001202 <HAL_I2C_MemRxCpltCallback+0xee>
		}else if(last_quadrant == 1 && active_quadrant == 4){
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <HAL_I2C_MemRxCpltCallback+0x12c>)
 80011e0:	f993 3000 	ldrsb.w	r3, [r3]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d10c      	bne.n	8001202 <HAL_I2C_MemRxCpltCallback+0xee>
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 80011ea:	f993 3000 	ldrsb.w	r3, [r3]
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d107      	bne.n	8001202 <HAL_I2C_MemRxCpltCallback+0xee>
			elapsed_rise_f = TRUE;
 80011f2:	4b16      	ldr	r3, [pc, #88]	@ (800124c <HAL_I2C_MemRxCpltCallback+0x138>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
			delta = ((ENC_PPR - 1) - delta);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 80011fe:	330f      	adds	r3, #15
 8001200:	60fb      	str	r3, [r7, #12]
		}

		accumulate_counter += delta;
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_I2C_MemRxCpltCallback+0x13c>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4413      	add	r3, r2
 800120a:	4a11      	ldr	r2, [pc, #68]	@ (8001250 <HAL_I2C_MemRxCpltCallback+0x13c>)
 800120c:	6013      	str	r3, [r2, #0]

		elapsed_fall_f = FALSE;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <HAL_I2C_MemRxCpltCallback+0x134>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
		elapsed_rise_f = FALSE;
 8001214:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <HAL_I2C_MemRxCpltCallback+0x138>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
		position_prev = position_now;
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <HAL_I2C_MemRxCpltCallback+0x130>)
 800121c:	897b      	ldrh	r3, [r7, #10]
 800121e:	8013      	strh	r3, [r2, #0]
		last_quadrant = active_quadrant;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 8001222:	f993 2000 	ldrsb.w	r2, [r3]
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_I2C_MemRxCpltCallback+0x12c>)
 8001228:	701a      	strb	r2, [r3, #0]

    }
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40005400 	.word	0x40005400
 8001238:	200000a4 	.word	0x200000a4
 800123c:	20000000 	.word	0x20000000
 8001240:	20000001 	.word	0x20000001
 8001244:	2000009c 	.word	0x2000009c
 8001248:	200000a6 	.word	0x200000a6
 800124c:	200000a7 	.word	0x200000a7
 8001250:	200000a0 	.word	0x200000a0

08001254 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4a06      	ldr	r2, [pc, #24]	@ (800127c <vApplicationGetIdleTaskMemory+0x28>)
 8001264:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <vApplicationGetIdleTaskMemory+0x2c>)
 800126a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2280      	movs	r2, #128	@ 0x80
 8001270:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	200000a8 	.word	0x200000a8
 8001280:	20000148 	.word	0x20000148

08001284 <i2c_scanbus>:


#include "i2c_bus.h"

/* Blocking function */
void i2c_scanbus(I2C_HandleTypeDef* channel, uint8_t* found_addr){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result;
	static uint8_t counter = 0;
	for(uint8_t i = 0 ; i <= I2C_MAX_NODE ; i++){
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e020      	b.n	80012d6 <i2c_scanbus+0x52>
		result = HAL_I2C_IsDeviceReady(channel, (i << 1), 1, 100);
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	b29b      	uxth	r3, r3
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	b299      	uxth	r1, r3
 800129c:	2364      	movs	r3, #100	@ 0x64
 800129e:	2201      	movs	r2, #1
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f001 fc6f 	bl	8002b84 <HAL_I2C_IsDeviceReady>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73bb      	strb	r3, [r7, #14]
		if(result == HAL_OK){
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10c      	bne.n	80012ca <i2c_scanbus+0x46>
			found_addr[counter] = i;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <i2c_scanbus+0x64>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	4413      	add	r3, r2
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	701a      	strb	r2, [r3, #0]
			counter++;
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <i2c_scanbus+0x64>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <i2c_scanbus+0x64>)
 80012c8:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(10);
 80012ca:	200a      	movs	r0, #10
 80012cc:	f000 fd88 	bl	8001de0 <HAL_Delay>
	for(uint8_t i = 0 ; i <= I2C_MAX_NODE ; i++){
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	3301      	adds	r3, #1
 80012d4:	73fb      	strb	r3, [r7, #15]
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	dada      	bge.n	8001294 <i2c_scanbus+0x10>
	}
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000348 	.word	0x20000348

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b09c      	sub	sp, #112	@ 0x70
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f2:	f000 fd43 	bl	8001d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f6:	f000 f877 	bl	80013e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fa:	f000 f9b7 	bl	800166c <MX_GPIO_Init>
  MX_DMA_Init();
 80012fe:	f000 f997 	bl	8001630 <MX_DMA_Init>
  MX_I2C1_Init();
 8001302:	f000 f8b7 	bl	8001474 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001306:	f000 f911 	bl	800152c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800130a:	f000 f967 	bl	80015dc <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800130e:	f000 f8df 	bl	80014d0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  i2c_scanbus(&hi2c1, i2c_available);
 8001312:	492b      	ldr	r1, [pc, #172]	@ (80013c0 <main+0xd4>)
 8001314:	482b      	ldr	r0, [pc, #172]	@ (80013c4 <main+0xd8>)
 8001316:	f7ff ffb5 	bl	8001284 <i2c_scanbus>
  TMC2209_setup();
 800131a:	f006 fef7 	bl	800810c <TMC2209_setup>
  TMC2209_setMicrostep(TMC2209_Microsteps_1);
 800131e:	2008      	movs	r0, #8
 8001320:	f006 ff76 	bl	8008210 <TMC2209_setMicrostep>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001324:	4b28      	ldr	r3, [pc, #160]	@ (80013c8 <main+0xdc>)
 8001326:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800132a:	461d      	mov	r5, r3
 800132c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001330:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001338:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f005 fcc0 	bl	8006cc4 <osThreadCreate>
 8001344:	4603      	mov	r3, r0
 8001346:	4a21      	ldr	r2, [pc, #132]	@ (80013cc <main+0xe0>)
 8001348:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 800134a:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <main+0xe4>)
 800134c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001350:	461d      	mov	r5, r3
 8001352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001356:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800135a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 800135e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f005 fcad 	bl	8006cc4 <osThreadCreate>
 800136a:	4603      	mov	r3, r0
 800136c:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <main+0xe8>)
 800136e:	6013      	str	r3, [r2, #0]

  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 8001370:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <main+0xec>)
 8001372:	f107 041c 	add.w	r4, r7, #28
 8001376:	461d      	mov	r5, r3
 8001378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001380:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f005 fc9a 	bl	8006cc4 <osThreadCreate>
 8001390:	4603      	mov	r3, r0
 8001392:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <main+0xf0>)
 8001394:	6013      	str	r3, [r2, #0]

  osThreadDef(imuTask, StartImuTask, osPriorityNormal, 0, 128);
 8001396:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <main+0xf4>)
 8001398:	463c      	mov	r4, r7
 800139a:	461d      	mov	r5, r3
 800139c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imuTaskHandler = osThreadCreate(osThread(imuTask), NULL);
 80013a8:	463b      	mov	r3, r7
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f005 fc89 	bl	8006cc4 <osThreadCreate>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a0b      	ldr	r2, [pc, #44]	@ (80013e4 <main+0xf8>)
 80013b6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80013b8:	f005 fc7d 	bl	8006cb6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <main+0xd0>
 80013c0:	200004d8 	.word	0x200004d8
 80013c4:	2000034c 	.word	0x2000034c
 80013c8:	08009964 	.word	0x08009964
 80013cc:	200004c8 	.word	0x200004c8
 80013d0:	0800998c 	.word	0x0800998c
 80013d4:	200004cc 	.word	0x200004cc
 80013d8:	080099b4 	.word	0x080099b4
 80013dc:	200004d0 	.word	0x200004d0
 80013e0:	080099d8 	.word	0x080099d8
 80013e4:	200004d4 	.word	0x200004d4

080013e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b090      	sub	sp, #64	@ 0x40
 80013ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ee:	f107 0318 	add.w	r3, r7, #24
 80013f2:	2228      	movs	r2, #40	@ 0x28
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f007 fa36 	bl	8008868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800140a:	2301      	movs	r3, #1
 800140c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800140e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001412:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001418:	2301      	movs	r3, #1
 800141a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141c:	2302      	movs	r3, #2
 800141e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001420:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001424:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001426:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800142a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142c:	f107 0318 	add.w	r3, r7, #24
 8001430:	4618      	mov	r0, r3
 8001432:	f003 fa19 	bl	8004868 <HAL_RCC_OscConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800143c:	f000 f9f2 	bl	8001824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001440:	230f      	movs	r3, #15
 8001442:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001444:	2302      	movs	r3, #2
 8001446:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800144c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001450:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2102      	movs	r1, #2
 800145a:	4618      	mov	r0, r3
 800145c:	f003 fc86 	bl	8004d6c <HAL_RCC_ClockConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001466:	f000 f9dd 	bl	8001824 <Error_Handler>
  }
}
 800146a:	bf00      	nop
 800146c:	3740      	adds	r7, #64	@ 0x40
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800147a:	4a13      	ldr	r2, [pc, #76]	@ (80014c8 <MX_I2C1_Init+0x54>)
 800147c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001480:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <MX_I2C1_Init+0x58>)
 8001482:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_I2C1_Init+0x50>)
 8001492:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001496:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001498:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <MX_I2C1_Init+0x50>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a4:	4b07      	ldr	r3, [pc, #28]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <MX_I2C1_Init+0x50>)
 80014b2:	f001 f957 	bl	8002764 <HAL_I2C_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014bc:	f000 f9b2 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000034c 	.word	0x2000034c
 80014c8:	40005400 	.word	0x40005400
 80014cc:	00061a80 	.word	0x00061a80

080014d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014d4:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <MX_I2C2_Init+0x50>)
 80014d6:	4a13      	ldr	r2, [pc, #76]	@ (8001524 <MX_I2C2_Init+0x54>)
 80014d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <MX_I2C2_Init+0x50>)
 80014dc:	4a12      	ldr	r2, [pc, #72]	@ (8001528 <MX_I2C2_Init+0x58>)
 80014de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <MX_I2C2_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <MX_I2C2_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <MX_I2C2_Init+0x50>)
 80014ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <MX_I2C2_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <MX_I2C2_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001500:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <MX_I2C2_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <MX_I2C2_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	@ (8001520 <MX_I2C2_Init+0x50>)
 800150e:	f001 f929 	bl	8002764 <HAL_I2C_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001518:	f000 f984 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200003a0 	.word	0x200003a0
 8001524:	40005800 	.word	0x40005800
 8001528:	00061a80 	.word	0x00061a80

0800152c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
 800154a:	615a      	str	r2, [r3, #20]
 800154c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800154e:	4b22      	ldr	r3, [pc, #136]	@ (80015d8 <MX_TIM2_Init+0xac>)
 8001550:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001554:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <MX_TIM2_Init+0xac>)
 8001558:	2247      	movs	r2, #71	@ 0x47
 800155a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155c:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <MX_TIM2_Init+0xac>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4 - 1;
 8001562:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <MX_TIM2_Init+0xac>)
 8001564:	2203      	movs	r2, #3
 8001566:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <MX_TIM2_Init+0xac>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156e:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <MX_TIM2_Init+0xac>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001574:	4818      	ldr	r0, [pc, #96]	@ (80015d8 <MX_TIM2_Init+0xac>)
 8001576:	f003 fe61 	bl	800523c <HAL_TIM_PWM_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001580:	f000 f950 	bl	8001824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	4619      	mov	r1, r3
 8001592:	4811      	ldr	r0, [pc, #68]	@ (80015d8 <MX_TIM2_Init+0xac>)
 8001594:	f004 fc2c 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800159e:	f000 f941 	bl	8001824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a2:	2360      	movs	r3, #96	@ 0x60
 80015a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80015a6:	2332      	movs	r3, #50	@ 0x32
 80015a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	4619      	mov	r1, r3
 80015b8:	4807      	ldr	r0, [pc, #28]	@ (80015d8 <MX_TIM2_Init+0xac>)
 80015ba:	f004 f921 	bl	8005800 <HAL_TIM_PWM_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80015c4:	f000 f92e 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015c8:	4803      	ldr	r0, [pc, #12]	@ (80015d8 <MX_TIM2_Init+0xac>)
 80015ca:	f000 fa43 	bl	8001a54 <HAL_TIM_MspPostInit>

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	@ 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000438 	.word	0x20000438

080015dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_USART1_UART_Init+0x4c>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <MX_USART1_UART_Init+0x50>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <MX_USART1_UART_Init+0x4c>)
 80015e8:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80015ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_USART1_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_USART1_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_USART1_UART_Init+0x4c>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <MX_USART1_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_USART1_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	@ (8001628 <MX_USART1_UART_Init+0x4c>)
 8001614:	f004 fc5c 	bl	8005ed0 <HAL_HalfDuplex_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800161e:	f000 f901 	bl	8001824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000480 	.word	0x20000480
 800162c:	40013800 	.word	0x40013800

08001630 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001636:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <MX_DMA_Init+0x38>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	4a0b      	ldr	r2, [pc, #44]	@ (8001668 <MX_DMA_Init+0x38>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6153      	str	r3, [r2, #20]
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_DMA_Init+0x38>)
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2105      	movs	r1, #5
 8001652:	2011      	movs	r0, #17
 8001654:	f000 fc9d 	bl	8001f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001658:	2011      	movs	r0, #17
 800165a:	f000 fcb6 	bl	8001fca <HAL_NVIC_EnableIRQ>

}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001680:	4b3d      	ldr	r3, [pc, #244]	@ (8001778 <MX_GPIO_Init+0x10c>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a3c      	ldr	r2, [pc, #240]	@ (8001778 <MX_GPIO_Init+0x10c>)
 8001686:	f043 0310 	orr.w	r3, r3, #16
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b3a      	ldr	r3, [pc, #232]	@ (8001778 <MX_GPIO_Init+0x10c>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001698:	4b37      	ldr	r3, [pc, #220]	@ (8001778 <MX_GPIO_Init+0x10c>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a36      	ldr	r2, [pc, #216]	@ (8001778 <MX_GPIO_Init+0x10c>)
 800169e:	f043 0320 	orr.w	r3, r3, #32
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b34      	ldr	r3, [pc, #208]	@ (8001778 <MX_GPIO_Init+0x10c>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0320 	and.w	r3, r3, #32
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <MX_GPIO_Init+0x10c>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a30      	ldr	r2, [pc, #192]	@ (8001778 <MX_GPIO_Init+0x10c>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001778 <MX_GPIO_Init+0x10c>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001778 <MX_GPIO_Init+0x10c>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001778 <MX_GPIO_Init+0x10c>)
 80016ce:	f043 0308 	orr.w	r3, r3, #8
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b28      	ldr	r3, [pc, #160]	@ (8001778 <MX_GPIO_Init+0x10c>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016e6:	4825      	ldr	r0, [pc, #148]	@ (800177c <MX_GPIO_Init+0x110>)
 80016e8:	f001 f824 	bl	8002734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2106      	movs	r1, #6
 80016f0:	4823      	ldr	r0, [pc, #140]	@ (8001780 <MX_GPIO_Init+0x114>)
 80016f2:	f001 f81f 	bl	8002734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2120      	movs	r1, #32
 80016fa:	4822      	ldr	r0, [pc, #136]	@ (8001784 <MX_GPIO_Init+0x118>)
 80016fc:	f001 f81a 	bl	8002734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001700:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2302      	movs	r3, #2
 8001710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	4619      	mov	r1, r3
 8001718:	4818      	ldr	r0, [pc, #96]	@ (800177c <MX_GPIO_Init+0x110>)
 800171a:	f000 fe87 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800171e:	2306      	movs	r3, #6
 8001720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	2301      	movs	r3, #1
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172a:	2302      	movs	r3, #2
 800172c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172e:	f107 0310 	add.w	r3, r7, #16
 8001732:	4619      	mov	r1, r3
 8001734:	4812      	ldr	r0, [pc, #72]	@ (8001780 <MX_GPIO_Init+0x114>)
 8001736:	f000 fe79 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800173a:	2310      	movs	r3, #16
 800173c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	f107 0310 	add.w	r3, r7, #16
 800174a:	4619      	mov	r1, r3
 800174c:	480d      	ldr	r0, [pc, #52]	@ (8001784 <MX_GPIO_Init+0x118>)
 800174e:	f000 fe6d 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001752:	2320      	movs	r3, #32
 8001754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2302      	movs	r3, #2
 8001760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	4619      	mov	r1, r3
 8001768:	4806      	ldr	r0, [pc, #24]	@ (8001784 <MX_GPIO_Init+0x118>)
 800176a:	f000 fe5f 	bl	800242c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800176e:	bf00      	nop
 8001770:	3720      	adds	r7, #32
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	40011000 	.word	0x40011000
 8001780:	40010800 	.word	0x40010800
 8001784:	40010c00 	.word	0x40010c00

08001788 <StartDriverTask>:

/* USER CODE BEGIN 4 */
void StartDriverTask(void const * argument){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	for(;;){
		TMC2209_enable();
 8001790:	f006 fcf4 	bl	800817c <TMC2209_enable>
		TMC2209_velocity(motor_speed);
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <StartDriverTask+0x28>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f006 fd6f 	bl	800827c <TMC2209_velocity>
		TMC2209_move();
 800179e:	f006 fe01 	bl	80083a4 <TMC2209_move>
		TMC2209_watchPosition(&motor_target, &encoder_counter, &motor_speed);
 80017a2:	4a03      	ldr	r2, [pc, #12]	@ (80017b0 <StartDriverTask+0x28>)
 80017a4:	4903      	ldr	r1, [pc, #12]	@ (80017b4 <StartDriverTask+0x2c>)
 80017a6:	4804      	ldr	r0, [pc, #16]	@ (80017b8 <StartDriverTask+0x30>)
 80017a8:	f006 ff48 	bl	800863c <TMC2209_watchPosition>
		TMC2209_enable();
 80017ac:	bf00      	nop
 80017ae:	e7ef      	b.n	8001790 <StartDriverTask+0x8>
 80017b0:	20000004 	.word	0x20000004
 80017b4:	200004dc 	.word	0x200004dc
 80017b8:	200004e0 	.word	0x200004e0

080017bc <StartEncoderTask>:

//		osDelay(5000);
	}
}

void StartEncoderTask(void const * argument){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	for(;;){
//		encChangeDir(motor_rotation);
		encRead();
 80017c4:	f7ff fc74 	bl	80010b0 <encRead>
		encoder_counter = getCounter();
 80017c8:	f7ff fc86 	bl	80010d8 <getCounter>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a03      	ldr	r2, [pc, #12]	@ (80017dc <StartEncoderTask+0x20>)
 80017d0:	6013      	str	r3, [r2, #0]
		encGetBuffer(raw_buffer_container);
 80017d2:	4803      	ldr	r0, [pc, #12]	@ (80017e0 <StartEncoderTask+0x24>)
 80017d4:	f7ff fc8a 	bl	80010ec <encGetBuffer>
		encRead();
 80017d8:	bf00      	nop
 80017da:	e7f3      	b.n	80017c4 <StartEncoderTask+0x8>
 80017dc:	200004dc 	.word	0x200004dc
 80017e0:	200004e4 	.word	0x200004e4

080017e4 <StartImuTask>:
	}
}

void StartImuTask(void const * argument){
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	for(;;){
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <StartImuTask+0x8>

080017f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f005 faaf 	bl	8006d5c <osDelay>
 80017fe:	e7fb      	b.n	80017f8 <StartDefaultTask+0x8>

08001800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d101      	bne.n	8001816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001812:	f000 fac9 	bl	8001da8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40012c00 	.word	0x40012c00

08001824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <Error_Handler+0x8>

08001830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001836:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <HAL_MspInit+0x68>)
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	4a17      	ldr	r2, [pc, #92]	@ (8001898 <HAL_MspInit+0x68>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6193      	str	r3, [r2, #24]
 8001842:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <HAL_MspInit+0x68>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HAL_MspInit+0x68>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a11      	ldr	r2, [pc, #68]	@ (8001898 <HAL_MspInit+0x68>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <HAL_MspInit+0x68>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	210f      	movs	r1, #15
 800186a:	f06f 0001 	mvn.w	r0, #1
 800186e:	f000 fb90 	bl	8001f92 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <HAL_MspInit+0x6c>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_MspInit+0x6c>)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	40010000 	.word	0x40010000

080018a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0318 	add.w	r3, r7, #24
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a4e      	ldr	r2, [pc, #312]	@ (80019f4 <HAL_I2C_MspInit+0x154>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d15b      	bne.n	8001978 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c0:	4b4d      	ldr	r3, [pc, #308]	@ (80019f8 <HAL_I2C_MspInit+0x158>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	@ (80019f8 <HAL_I2C_MspInit+0x158>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b4a      	ldr	r3, [pc, #296]	@ (80019f8 <HAL_I2C_MspInit+0x158>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018d8:	23c0      	movs	r3, #192	@ 0xc0
 80018da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018dc:	2312      	movs	r3, #18
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	f107 0318 	add.w	r3, r7, #24
 80018e8:	4619      	mov	r1, r3
 80018ea:	4844      	ldr	r0, [pc, #272]	@ (80019fc <HAL_I2C_MspInit+0x15c>)
 80018ec:	f000 fd9e 	bl	800242c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018f0:	4b41      	ldr	r3, [pc, #260]	@ (80019f8 <HAL_I2C_MspInit+0x158>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	4a40      	ldr	r2, [pc, #256]	@ (80019f8 <HAL_I2C_MspInit+0x158>)
 80018f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018fa:	61d3      	str	r3, [r2, #28]
 80018fc:	4b3e      	ldr	r3, [pc, #248]	@ (80019f8 <HAL_I2C_MspInit+0x158>)
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001908:	4b3d      	ldr	r3, [pc, #244]	@ (8001a00 <HAL_I2C_MspInit+0x160>)
 800190a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a04 <HAL_I2C_MspInit+0x164>)
 800190c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800190e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a00 <HAL_I2C_MspInit+0x160>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001914:	4b3a      	ldr	r3, [pc, #232]	@ (8001a00 <HAL_I2C_MspInit+0x160>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800191a:	4b39      	ldr	r3, [pc, #228]	@ (8001a00 <HAL_I2C_MspInit+0x160>)
 800191c:	2280      	movs	r2, #128	@ 0x80
 800191e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001920:	4b37      	ldr	r3, [pc, #220]	@ (8001a00 <HAL_I2C_MspInit+0x160>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001926:	4b36      	ldr	r3, [pc, #216]	@ (8001a00 <HAL_I2C_MspInit+0x160>)
 8001928:	2200      	movs	r2, #0
 800192a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800192c:	4b34      	ldr	r3, [pc, #208]	@ (8001a00 <HAL_I2C_MspInit+0x160>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001932:	4b33      	ldr	r3, [pc, #204]	@ (8001a00 <HAL_I2C_MspInit+0x160>)
 8001934:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001938:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800193a:	4831      	ldr	r0, [pc, #196]	@ (8001a00 <HAL_I2C_MspInit+0x160>)
 800193c:	f000 fb54 	bl	8001fe8 <HAL_DMA_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 8001946:	f7ff ff6d 	bl	8001824 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a00 <HAL_I2C_MspInit+0x160>)
 800194e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001950:	4a2b      	ldr	r2, [pc, #172]	@ (8001a00 <HAL_I2C_MspInit+0x160>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2105      	movs	r1, #5
 800195a:	201f      	movs	r0, #31
 800195c:	f000 fb19 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001960:	201f      	movs	r0, #31
 8001962:	f000 fb32 	bl	8001fca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2105      	movs	r1, #5
 800196a:	2020      	movs	r0, #32
 800196c:	f000 fb11 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001970:	2020      	movs	r0, #32
 8001972:	f000 fb2a 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001976:	e039      	b.n	80019ec <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a22      	ldr	r2, [pc, #136]	@ (8001a08 <HAL_I2C_MspInit+0x168>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d134      	bne.n	80019ec <HAL_I2C_MspInit+0x14c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	4b1d      	ldr	r3, [pc, #116]	@ (80019f8 <HAL_I2C_MspInit+0x158>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	4a1c      	ldr	r2, [pc, #112]	@ (80019f8 <HAL_I2C_MspInit+0x158>)
 8001988:	f043 0308 	orr.w	r3, r3, #8
 800198c:	6193      	str	r3, [r2, #24]
 800198e:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <HAL_I2C_MspInit+0x158>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800199a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a0:	2312      	movs	r3, #18
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	f107 0318 	add.w	r3, r7, #24
 80019ac:	4619      	mov	r1, r3
 80019ae:	4813      	ldr	r0, [pc, #76]	@ (80019fc <HAL_I2C_MspInit+0x15c>)
 80019b0:	f000 fd3c 	bl	800242c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019b4:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <HAL_I2C_MspInit+0x158>)
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	4a0f      	ldr	r2, [pc, #60]	@ (80019f8 <HAL_I2C_MspInit+0x158>)
 80019ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019be:	61d3      	str	r3, [r2, #28]
 80019c0:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <HAL_I2C_MspInit+0x158>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2105      	movs	r1, #5
 80019d0:	2021      	movs	r0, #33	@ 0x21
 80019d2:	f000 fade 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80019d6:	2021      	movs	r0, #33	@ 0x21
 80019d8:	f000 faf7 	bl	8001fca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2105      	movs	r1, #5
 80019e0:	2022      	movs	r0, #34	@ 0x22
 80019e2:	f000 fad6 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80019e6:	2022      	movs	r0, #34	@ 0x22
 80019e8:	f000 faef 	bl	8001fca <HAL_NVIC_EnableIRQ>
}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	@ 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40005400 	.word	0x40005400
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010c00 	.word	0x40010c00
 8001a00:	200003f4 	.word	0x200003f4
 8001a04:	40020080 	.word	0x40020080
 8001a08:	40005800 	.word	0x40005800

08001a0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a1c:	d113      	bne.n	8001a46 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <HAL_TIM_PWM_MspInit+0x44>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a0b      	ldr	r2, [pc, #44]	@ (8001a50 <HAL_TIM_PWM_MspInit+0x44>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	61d3      	str	r3, [r2, #28]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_TIM_PWM_MspInit+0x44>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2105      	movs	r1, #5
 8001a3a:	201c      	movs	r0, #28
 8001a3c:	f000 faa9 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a40:	201c      	movs	r0, #28
 8001a42:	f000 fac2 	bl	8001fca <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000

08001a54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a72:	d117      	bne.n	8001aa4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a74:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <HAL_TIM_MspPostInit+0x58>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a0c      	ldr	r2, [pc, #48]	@ (8001aac <HAL_TIM_MspPostInit+0x58>)
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <HAL_TIM_MspPostInit+0x58>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2302      	movs	r3, #2
 8001a96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4804      	ldr	r0, [pc, #16]	@ (8001ab0 <HAL_TIM_MspPostInit+0x5c>)
 8001aa0:	f000 fcc4 	bl	800242c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001aa4:	bf00      	nop
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010800 	.word	0x40010800

08001ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1a      	ldr	r2, [pc, #104]	@ (8001b38 <HAL_UART_MspInit+0x84>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d12c      	bne.n	8001b2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ad4:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <HAL_UART_MspInit+0x88>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a18      	ldr	r2, [pc, #96]	@ (8001b3c <HAL_UART_MspInit+0x88>)
 8001ada:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <HAL_UART_MspInit+0x88>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <HAL_UART_MspInit+0x88>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a12      	ldr	r2, [pc, #72]	@ (8001b3c <HAL_UART_MspInit+0x88>)
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <HAL_UART_MspInit+0x88>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0a:	2312      	movs	r3, #18
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4619      	mov	r1, r3
 8001b18:	4809      	ldr	r0, [pc, #36]	@ (8001b40 <HAL_UART_MspInit+0x8c>)
 8001b1a:	f000 fc87 	bl	800242c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2105      	movs	r1, #5
 8001b22:	2025      	movs	r0, #37	@ 0x25
 8001b24:	f000 fa35 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b28:	2025      	movs	r0, #37	@ 0x25
 8001b2a:	f000 fa4e 	bl	8001fca <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b2e:	bf00      	nop
 8001b30:	3720      	adds	r7, #32
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40013800 	.word	0x40013800
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010800 	.word	0x40010800

08001b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	@ 0x30
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c14 <HAL_InitTick+0xd0>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c14 <HAL_InitTick+0xd0>)
 8001b60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b64:	6193      	str	r3, [r2, #24]
 8001b66:	4b2b      	ldr	r3, [pc, #172]	@ (8001c14 <HAL_InitTick+0xd0>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b72:	f107 020c 	add.w	r2, r7, #12
 8001b76:	f107 0310 	add.w	r3, r7, #16
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 fa65 	bl	800504c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b82:	f003 fa4f 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 8001b86:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b8a:	4a23      	ldr	r2, [pc, #140]	@ (8001c18 <HAL_InitTick+0xd4>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	0c9b      	lsrs	r3, r3, #18
 8001b92:	3b01      	subs	r3, #1
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b96:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <HAL_InitTick+0xd8>)
 8001b98:	4a21      	ldr	r2, [pc, #132]	@ (8001c20 <HAL_InitTick+0xdc>)
 8001b9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c1c <HAL_InitTick+0xd8>)
 8001b9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ba2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c1c <HAL_InitTick+0xd8>)
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001baa:	4b1c      	ldr	r3, [pc, #112]	@ (8001c1c <HAL_InitTick+0xd8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <HAL_InitTick+0xd8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <HAL_InitTick+0xd8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001bbc:	4817      	ldr	r0, [pc, #92]	@ (8001c1c <HAL_InitTick+0xd8>)
 8001bbe:	f003 fa93 	bl	80050e8 <HAL_TIM_Base_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d11b      	bne.n	8001c08 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001bd0:	4812      	ldr	r0, [pc, #72]	@ (8001c1c <HAL_InitTick+0xd8>)
 8001bd2:	f003 fae1 	bl	8005198 <HAL_TIM_Base_Start_IT>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001bdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d111      	bne.n	8001c08 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001be4:	2019      	movs	r0, #25
 8001be6:	f000 f9f0 	bl	8001fca <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d808      	bhi.n	8001c02 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	2019      	movs	r0, #25
 8001bf6:	f000 f9cc 	bl	8001f92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <HAL_InitTick+0xe0>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	e002      	b.n	8001c08 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3730      	adds	r7, #48	@ 0x30
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	431bde83 	.word	0x431bde83
 8001c1c:	200004e8 	.word	0x200004e8
 8001c20:	40012c00 	.word	0x40012c00
 8001c24:	2000000c 	.word	0x2000000c

08001c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <NMI_Handler+0x4>

08001c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <MemManage_Handler+0x4>

08001c40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001c60:	4802      	ldr	r0, [pc, #8]	@ (8001c6c <DMA1_Channel7_IRQHandler+0x10>)
 8001c62:	f000 facf 	bl	8002204 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200003f4 	.word	0x200003f4

08001c70 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c74:	4802      	ldr	r0, [pc, #8]	@ (8001c80 <TIM1_UP_IRQHandler+0x10>)
 8001c76:	f003 fcd3 	bl	8005620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200004e8 	.word	0x200004e8

08001c84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c88:	4802      	ldr	r0, [pc, #8]	@ (8001c94 <TIM2_IRQHandler+0x10>)
 8001c8a:	f003 fcc9 	bl	8005620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000438 	.word	0x20000438

08001c98 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c9c:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <I2C1_EV_IRQHandler+0x10>)
 8001c9e:	f001 f89f 	bl	8002de0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000034c 	.word	0x2000034c

08001cac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	@ (8001cbc <I2C1_ER_IRQHandler+0x10>)
 8001cb2:	f001 f9e8 	bl	8003086 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000034c 	.word	0x2000034c

08001cc0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001cc4:	4802      	ldr	r0, [pc, #8]	@ (8001cd0 <I2C2_EV_IRQHandler+0x10>)
 8001cc6:	f001 f88b 	bl	8002de0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200003a0 	.word	0x200003a0

08001cd4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001cd8:	4802      	ldr	r0, [pc, #8]	@ (8001ce4 <I2C2_ER_IRQHandler+0x10>)
 8001cda:	f001 f9d4 	bl	8003086 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200003a0 	.word	0x200003a0

08001ce8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cec:	4802      	ldr	r0, [pc, #8]	@ (8001cf8 <USART1_IRQHandler+0x10>)
 8001cee:	f004 fa2f 	bl	8006150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000480 	.word	0x20000480

08001cfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_UARTEx_RxEventCallback>:
	HAL_HalfDuplex_EnableReceiver(&huart1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 8001d14:	221e      	movs	r2, #30
 8001d16:	4904      	ldr	r1, [pc, #16]	@ (8001d28 <HAL_UARTEx_RxEventCallback+0x20>)
 8001d18:	4804      	ldr	r0, [pc, #16]	@ (8001d2c <HAL_UARTEx_RxEventCallback+0x24>)
 8001d1a:	f004 f9bc 	bl	8006096 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000530 	.word	0x20000530
 8001d2c:	20000480 	.word	0x20000480

08001d30 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8001d30:	f7ff ffe4 	bl	8001cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d34:	480b      	ldr	r0, [pc, #44]	@ (8001d64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d36:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d38:	4a0c      	ldr	r2, [pc, #48]	@ (8001d6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a09      	ldr	r2, [pc, #36]	@ (8001d70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d4c:	4c09      	ldr	r4, [pc, #36]	@ (8001d74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f006 fde9 	bl	8008930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d5e:	f7ff fac5 	bl	80012ec <main>
  bx lr
 8001d62:	4770      	bx	lr
  ldr r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d68:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001d6c:	08009a60 	.word	0x08009a60
  ldr r2, =_sbss
 8001d70:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001d74:	20001420 	.word	0x20001420

08001d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC1_2_IRQHandler>
	...

08001d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <HAL_Init+0x28>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a07      	ldr	r2, [pc, #28]	@ (8001da4 <HAL_Init+0x28>)
 8001d86:	f043 0310 	orr.w	r3, r3, #16
 8001d8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8c:	2003      	movs	r0, #3
 8001d8e:	f000 f8f5 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d92:	200f      	movs	r0, #15
 8001d94:	f7ff fed6 	bl	8001b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d98:	f7ff fd4a 	bl	8001830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40022000 	.word	0x40022000

08001da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_IncTick+0x1c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_IncTick+0x20>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a03      	ldr	r2, [pc, #12]	@ (8001dc8 <HAL_IncTick+0x20>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000010 	.word	0x20000010
 8001dc8:	20000550 	.word	0x20000550

08001dcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	@ (8001ddc <HAL_GetTick+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	20000550 	.word	0x20000550

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff fff0 	bl	8001dcc <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffe0 	bl	8001dcc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000010 	.word	0x20000010

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4906      	ldr	r1, [pc, #24]	@ (8001ec0 <__NVIC_EnableIRQ+0x34>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100

08001ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	@ (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	@ (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	@ 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
         );
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	@ 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff4f 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff64 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ffb2 	bl	8001f18 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff81 	bl	8001ec4 <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff57 	bl	8001e8c <__NVIC_EnableIRQ>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e043      	b.n	8002086 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	4b22      	ldr	r3, [pc, #136]	@ (8002090 <HAL_DMA_Init+0xa8>)
 8002006:	4413      	add	r3, r2
 8002008:	4a22      	ldr	r2, [pc, #136]	@ (8002094 <HAL_DMA_Init+0xac>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	009a      	lsls	r2, r3, #2
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a1f      	ldr	r2, [pc, #124]	@ (8002098 <HAL_DMA_Init+0xb0>)
 800201a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002032:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002036:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800204c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	bffdfff8 	.word	0xbffdfff8
 8002094:	cccccccd 	.word	0xcccccccd
 8002098:	40020000 	.word	0x40020000

0800209c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d008      	beq.n	80020c6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2204      	movs	r2, #4
 80020b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e020      	b.n	8002108 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 020e 	bic.w	r2, r2, #14
 80020d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0201 	bic.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f202 	lsl.w	r2, r1, r2
 80020f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002106:	7bfb      	ldrb	r3, [r7, #15]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
	...

08002114 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d005      	beq.n	8002138 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2204      	movs	r2, #4
 8002130:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
 8002136:	e051      	b.n	80021dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 020e 	bic.w	r2, r2, #14
 8002146:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a22      	ldr	r2, [pc, #136]	@ (80021e8 <HAL_DMA_Abort_IT+0xd4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d029      	beq.n	80021b6 <HAL_DMA_Abort_IT+0xa2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a21      	ldr	r2, [pc, #132]	@ (80021ec <HAL_DMA_Abort_IT+0xd8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d022      	beq.n	80021b2 <HAL_DMA_Abort_IT+0x9e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1f      	ldr	r2, [pc, #124]	@ (80021f0 <HAL_DMA_Abort_IT+0xdc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01a      	beq.n	80021ac <HAL_DMA_Abort_IT+0x98>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1e      	ldr	r2, [pc, #120]	@ (80021f4 <HAL_DMA_Abort_IT+0xe0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d012      	beq.n	80021a6 <HAL_DMA_Abort_IT+0x92>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <HAL_DMA_Abort_IT+0xe4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00a      	beq.n	80021a0 <HAL_DMA_Abort_IT+0x8c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1b      	ldr	r2, [pc, #108]	@ (80021fc <HAL_DMA_Abort_IT+0xe8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d102      	bne.n	800219a <HAL_DMA_Abort_IT+0x86>
 8002194:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002198:	e00e      	b.n	80021b8 <HAL_DMA_Abort_IT+0xa4>
 800219a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800219e:	e00b      	b.n	80021b8 <HAL_DMA_Abort_IT+0xa4>
 80021a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021a4:	e008      	b.n	80021b8 <HAL_DMA_Abort_IT+0xa4>
 80021a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021aa:	e005      	b.n	80021b8 <HAL_DMA_Abort_IT+0xa4>
 80021ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021b0:	e002      	b.n	80021b8 <HAL_DMA_Abort_IT+0xa4>
 80021b2:	2310      	movs	r3, #16
 80021b4:	e000      	b.n	80021b8 <HAL_DMA_Abort_IT+0xa4>
 80021b6:	2301      	movs	r3, #1
 80021b8:	4a11      	ldr	r2, [pc, #68]	@ (8002200 <HAL_DMA_Abort_IT+0xec>)
 80021ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
    } 
  }
  return status;
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40020008 	.word	0x40020008
 80021ec:	4002001c 	.word	0x4002001c
 80021f0:	40020030 	.word	0x40020030
 80021f4:	40020044 	.word	0x40020044
 80021f8:	40020058 	.word	0x40020058
 80021fc:	4002006c 	.word	0x4002006c
 8002200:	40020000 	.word	0x40020000

08002204 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	2204      	movs	r2, #4
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d04f      	beq.n	80022cc <HAL_DMA_IRQHandler+0xc8>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d04a      	beq.n	80022cc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d107      	bne.n	8002254 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0204 	bic.w	r2, r2, #4
 8002252:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a66      	ldr	r2, [pc, #408]	@ (80023f4 <HAL_DMA_IRQHandler+0x1f0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d029      	beq.n	80022b2 <HAL_DMA_IRQHandler+0xae>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a65      	ldr	r2, [pc, #404]	@ (80023f8 <HAL_DMA_IRQHandler+0x1f4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d022      	beq.n	80022ae <HAL_DMA_IRQHandler+0xaa>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a63      	ldr	r2, [pc, #396]	@ (80023fc <HAL_DMA_IRQHandler+0x1f8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01a      	beq.n	80022a8 <HAL_DMA_IRQHandler+0xa4>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a62      	ldr	r2, [pc, #392]	@ (8002400 <HAL_DMA_IRQHandler+0x1fc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d012      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x9e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a60      	ldr	r2, [pc, #384]	@ (8002404 <HAL_DMA_IRQHandler+0x200>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00a      	beq.n	800229c <HAL_DMA_IRQHandler+0x98>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a5f      	ldr	r2, [pc, #380]	@ (8002408 <HAL_DMA_IRQHandler+0x204>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d102      	bne.n	8002296 <HAL_DMA_IRQHandler+0x92>
 8002290:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002294:	e00e      	b.n	80022b4 <HAL_DMA_IRQHandler+0xb0>
 8002296:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800229a:	e00b      	b.n	80022b4 <HAL_DMA_IRQHandler+0xb0>
 800229c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80022a0:	e008      	b.n	80022b4 <HAL_DMA_IRQHandler+0xb0>
 80022a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022a6:	e005      	b.n	80022b4 <HAL_DMA_IRQHandler+0xb0>
 80022a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022ac:	e002      	b.n	80022b4 <HAL_DMA_IRQHandler+0xb0>
 80022ae:	2340      	movs	r3, #64	@ 0x40
 80022b0:	e000      	b.n	80022b4 <HAL_DMA_IRQHandler+0xb0>
 80022b2:	2304      	movs	r3, #4
 80022b4:	4a55      	ldr	r2, [pc, #340]	@ (800240c <HAL_DMA_IRQHandler+0x208>)
 80022b6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8094 	beq.w	80023ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022ca:	e08e      	b.n	80023ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d0:	2202      	movs	r2, #2
 80022d2:	409a      	lsls	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d056      	beq.n	800238a <HAL_DMA_IRQHandler+0x186>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d051      	beq.n	800238a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10b      	bne.n	800230c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 020a 	bic.w	r2, r2, #10
 8002302:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a38      	ldr	r2, [pc, #224]	@ (80023f4 <HAL_DMA_IRQHandler+0x1f0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d029      	beq.n	800236a <HAL_DMA_IRQHandler+0x166>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a37      	ldr	r2, [pc, #220]	@ (80023f8 <HAL_DMA_IRQHandler+0x1f4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d022      	beq.n	8002366 <HAL_DMA_IRQHandler+0x162>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a35      	ldr	r2, [pc, #212]	@ (80023fc <HAL_DMA_IRQHandler+0x1f8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d01a      	beq.n	8002360 <HAL_DMA_IRQHandler+0x15c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a34      	ldr	r2, [pc, #208]	@ (8002400 <HAL_DMA_IRQHandler+0x1fc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d012      	beq.n	800235a <HAL_DMA_IRQHandler+0x156>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a32      	ldr	r2, [pc, #200]	@ (8002404 <HAL_DMA_IRQHandler+0x200>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00a      	beq.n	8002354 <HAL_DMA_IRQHandler+0x150>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a31      	ldr	r2, [pc, #196]	@ (8002408 <HAL_DMA_IRQHandler+0x204>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d102      	bne.n	800234e <HAL_DMA_IRQHandler+0x14a>
 8002348:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800234c:	e00e      	b.n	800236c <HAL_DMA_IRQHandler+0x168>
 800234e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002352:	e00b      	b.n	800236c <HAL_DMA_IRQHandler+0x168>
 8002354:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002358:	e008      	b.n	800236c <HAL_DMA_IRQHandler+0x168>
 800235a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800235e:	e005      	b.n	800236c <HAL_DMA_IRQHandler+0x168>
 8002360:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002364:	e002      	b.n	800236c <HAL_DMA_IRQHandler+0x168>
 8002366:	2320      	movs	r3, #32
 8002368:	e000      	b.n	800236c <HAL_DMA_IRQHandler+0x168>
 800236a:	2302      	movs	r3, #2
 800236c:	4a27      	ldr	r2, [pc, #156]	@ (800240c <HAL_DMA_IRQHandler+0x208>)
 800236e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237c:	2b00      	cmp	r3, #0
 800237e:	d034      	beq.n	80023ea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002388:	e02f      	b.n	80023ea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	2208      	movs	r2, #8
 8002390:	409a      	lsls	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d028      	beq.n	80023ec <HAL_DMA_IRQHandler+0x1e8>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d023      	beq.n	80023ec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 020e 	bic.w	r2, r2, #14
 80023b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023bc:	2101      	movs	r1, #1
 80023be:	fa01 f202 	lsl.w	r2, r1, r2
 80023c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d004      	beq.n	80023ec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
    }
  }
  return;
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
}
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40020008 	.word	0x40020008
 80023f8:	4002001c 	.word	0x4002001c
 80023fc:	40020030 	.word	0x40020030
 8002400:	40020044 	.word	0x40020044
 8002404:	40020058 	.word	0x40020058
 8002408:	4002006c 	.word	0x4002006c
 800240c:	40020000 	.word	0x40020000

08002410 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800241e:	b2db      	uxtb	r3, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
	...

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b08b      	sub	sp, #44	@ 0x2c
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002436:	2300      	movs	r3, #0
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800243a:	2300      	movs	r3, #0
 800243c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243e:	e169      	b.n	8002714 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002440:	2201      	movs	r2, #1
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	429a      	cmp	r2, r3
 800245a:	f040 8158 	bne.w	800270e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4a9a      	ldr	r2, [pc, #616]	@ (80026cc <HAL_GPIO_Init+0x2a0>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d05e      	beq.n	8002526 <HAL_GPIO_Init+0xfa>
 8002468:	4a98      	ldr	r2, [pc, #608]	@ (80026cc <HAL_GPIO_Init+0x2a0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d875      	bhi.n	800255a <HAL_GPIO_Init+0x12e>
 800246e:	4a98      	ldr	r2, [pc, #608]	@ (80026d0 <HAL_GPIO_Init+0x2a4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d058      	beq.n	8002526 <HAL_GPIO_Init+0xfa>
 8002474:	4a96      	ldr	r2, [pc, #600]	@ (80026d0 <HAL_GPIO_Init+0x2a4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d86f      	bhi.n	800255a <HAL_GPIO_Init+0x12e>
 800247a:	4a96      	ldr	r2, [pc, #600]	@ (80026d4 <HAL_GPIO_Init+0x2a8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d052      	beq.n	8002526 <HAL_GPIO_Init+0xfa>
 8002480:	4a94      	ldr	r2, [pc, #592]	@ (80026d4 <HAL_GPIO_Init+0x2a8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d869      	bhi.n	800255a <HAL_GPIO_Init+0x12e>
 8002486:	4a94      	ldr	r2, [pc, #592]	@ (80026d8 <HAL_GPIO_Init+0x2ac>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d04c      	beq.n	8002526 <HAL_GPIO_Init+0xfa>
 800248c:	4a92      	ldr	r2, [pc, #584]	@ (80026d8 <HAL_GPIO_Init+0x2ac>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d863      	bhi.n	800255a <HAL_GPIO_Init+0x12e>
 8002492:	4a92      	ldr	r2, [pc, #584]	@ (80026dc <HAL_GPIO_Init+0x2b0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d046      	beq.n	8002526 <HAL_GPIO_Init+0xfa>
 8002498:	4a90      	ldr	r2, [pc, #576]	@ (80026dc <HAL_GPIO_Init+0x2b0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d85d      	bhi.n	800255a <HAL_GPIO_Init+0x12e>
 800249e:	2b12      	cmp	r3, #18
 80024a0:	d82a      	bhi.n	80024f8 <HAL_GPIO_Init+0xcc>
 80024a2:	2b12      	cmp	r3, #18
 80024a4:	d859      	bhi.n	800255a <HAL_GPIO_Init+0x12e>
 80024a6:	a201      	add	r2, pc, #4	@ (adr r2, 80024ac <HAL_GPIO_Init+0x80>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	08002527 	.word	0x08002527
 80024b0:	08002501 	.word	0x08002501
 80024b4:	08002513 	.word	0x08002513
 80024b8:	08002555 	.word	0x08002555
 80024bc:	0800255b 	.word	0x0800255b
 80024c0:	0800255b 	.word	0x0800255b
 80024c4:	0800255b 	.word	0x0800255b
 80024c8:	0800255b 	.word	0x0800255b
 80024cc:	0800255b 	.word	0x0800255b
 80024d0:	0800255b 	.word	0x0800255b
 80024d4:	0800255b 	.word	0x0800255b
 80024d8:	0800255b 	.word	0x0800255b
 80024dc:	0800255b 	.word	0x0800255b
 80024e0:	0800255b 	.word	0x0800255b
 80024e4:	0800255b 	.word	0x0800255b
 80024e8:	0800255b 	.word	0x0800255b
 80024ec:	0800255b 	.word	0x0800255b
 80024f0:	08002509 	.word	0x08002509
 80024f4:	0800251d 	.word	0x0800251d
 80024f8:	4a79      	ldr	r2, [pc, #484]	@ (80026e0 <HAL_GPIO_Init+0x2b4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d013      	beq.n	8002526 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024fe:	e02c      	b.n	800255a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	623b      	str	r3, [r7, #32]
          break;
 8002506:	e029      	b.n	800255c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	3304      	adds	r3, #4
 800250e:	623b      	str	r3, [r7, #32]
          break;
 8002510:	e024      	b.n	800255c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	3308      	adds	r3, #8
 8002518:	623b      	str	r3, [r7, #32]
          break;
 800251a:	e01f      	b.n	800255c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	330c      	adds	r3, #12
 8002522:	623b      	str	r3, [r7, #32]
          break;
 8002524:	e01a      	b.n	800255c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800252e:	2304      	movs	r3, #4
 8002530:	623b      	str	r3, [r7, #32]
          break;
 8002532:	e013      	b.n	800255c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d105      	bne.n	8002548 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800253c:	2308      	movs	r3, #8
 800253e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69fa      	ldr	r2, [r7, #28]
 8002544:	611a      	str	r2, [r3, #16]
          break;
 8002546:	e009      	b.n	800255c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002548:	2308      	movs	r3, #8
 800254a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	615a      	str	r2, [r3, #20]
          break;
 8002552:	e003      	b.n	800255c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002554:	2300      	movs	r3, #0
 8002556:	623b      	str	r3, [r7, #32]
          break;
 8002558:	e000      	b.n	800255c <HAL_GPIO_Init+0x130>
          break;
 800255a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2bff      	cmp	r3, #255	@ 0xff
 8002560:	d801      	bhi.n	8002566 <HAL_GPIO_Init+0x13a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	e001      	b.n	800256a <HAL_GPIO_Init+0x13e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3304      	adds	r3, #4
 800256a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2bff      	cmp	r3, #255	@ 0xff
 8002570:	d802      	bhi.n	8002578 <HAL_GPIO_Init+0x14c>
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	e002      	b.n	800257e <HAL_GPIO_Init+0x152>
 8002578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257a:	3b08      	subs	r3, #8
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	210f      	movs	r1, #15
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	401a      	ands	r2, r3
 8002590:	6a39      	ldr	r1, [r7, #32]
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	431a      	orrs	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 80b1 	beq.w	800270e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025ac:	4b4d      	ldr	r3, [pc, #308]	@ (80026e4 <HAL_GPIO_Init+0x2b8>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	4a4c      	ldr	r2, [pc, #304]	@ (80026e4 <HAL_GPIO_Init+0x2b8>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6193      	str	r3, [r2, #24]
 80025b8:	4b4a      	ldr	r3, [pc, #296]	@ (80026e4 <HAL_GPIO_Init+0x2b8>)
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025c4:	4a48      	ldr	r2, [pc, #288]	@ (80026e8 <HAL_GPIO_Init+0x2bc>)
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	3302      	adds	r3, #2
 80025cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4013      	ands	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a40      	ldr	r2, [pc, #256]	@ (80026ec <HAL_GPIO_Init+0x2c0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d013      	beq.n	8002618 <HAL_GPIO_Init+0x1ec>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a3f      	ldr	r2, [pc, #252]	@ (80026f0 <HAL_GPIO_Init+0x2c4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00d      	beq.n	8002614 <HAL_GPIO_Init+0x1e8>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a3e      	ldr	r2, [pc, #248]	@ (80026f4 <HAL_GPIO_Init+0x2c8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d007      	beq.n	8002610 <HAL_GPIO_Init+0x1e4>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a3d      	ldr	r2, [pc, #244]	@ (80026f8 <HAL_GPIO_Init+0x2cc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d101      	bne.n	800260c <HAL_GPIO_Init+0x1e0>
 8002608:	2303      	movs	r3, #3
 800260a:	e006      	b.n	800261a <HAL_GPIO_Init+0x1ee>
 800260c:	2304      	movs	r3, #4
 800260e:	e004      	b.n	800261a <HAL_GPIO_Init+0x1ee>
 8002610:	2302      	movs	r3, #2
 8002612:	e002      	b.n	800261a <HAL_GPIO_Init+0x1ee>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_GPIO_Init+0x1ee>
 8002618:	2300      	movs	r3, #0
 800261a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261c:	f002 0203 	and.w	r2, r2, #3
 8002620:	0092      	lsls	r2, r2, #2
 8002622:	4093      	lsls	r3, r2
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800262a:	492f      	ldr	r1, [pc, #188]	@ (80026e8 <HAL_GPIO_Init+0x2bc>)
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	089b      	lsrs	r3, r3, #2
 8002630:	3302      	adds	r3, #2
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d006      	beq.n	8002652 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002644:	4b2d      	ldr	r3, [pc, #180]	@ (80026fc <HAL_GPIO_Init+0x2d0>)
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	492c      	ldr	r1, [pc, #176]	@ (80026fc <HAL_GPIO_Init+0x2d0>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]
 8002650:	e006      	b.n	8002660 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002652:	4b2a      	ldr	r3, [pc, #168]	@ (80026fc <HAL_GPIO_Init+0x2d0>)
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	43db      	mvns	r3, r3
 800265a:	4928      	ldr	r1, [pc, #160]	@ (80026fc <HAL_GPIO_Init+0x2d0>)
 800265c:	4013      	ands	r3, r2
 800265e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d006      	beq.n	800267a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800266c:	4b23      	ldr	r3, [pc, #140]	@ (80026fc <HAL_GPIO_Init+0x2d0>)
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	4922      	ldr	r1, [pc, #136]	@ (80026fc <HAL_GPIO_Init+0x2d0>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	60cb      	str	r3, [r1, #12]
 8002678:	e006      	b.n	8002688 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800267a:	4b20      	ldr	r3, [pc, #128]	@ (80026fc <HAL_GPIO_Init+0x2d0>)
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	43db      	mvns	r3, r3
 8002682:	491e      	ldr	r1, [pc, #120]	@ (80026fc <HAL_GPIO_Init+0x2d0>)
 8002684:	4013      	ands	r3, r2
 8002686:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d006      	beq.n	80026a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002694:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <HAL_GPIO_Init+0x2d0>)
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	4918      	ldr	r1, [pc, #96]	@ (80026fc <HAL_GPIO_Init+0x2d0>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
 80026a0:	e006      	b.n	80026b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026a2:	4b16      	ldr	r3, [pc, #88]	@ (80026fc <HAL_GPIO_Init+0x2d0>)
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	4914      	ldr	r1, [pc, #80]	@ (80026fc <HAL_GPIO_Init+0x2d0>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d021      	beq.n	8002700 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026bc:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <HAL_GPIO_Init+0x2d0>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	490e      	ldr	r1, [pc, #56]	@ (80026fc <HAL_GPIO_Init+0x2d0>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]
 80026c8:	e021      	b.n	800270e <HAL_GPIO_Init+0x2e2>
 80026ca:	bf00      	nop
 80026cc:	10320000 	.word	0x10320000
 80026d0:	10310000 	.word	0x10310000
 80026d4:	10220000 	.word	0x10220000
 80026d8:	10210000 	.word	0x10210000
 80026dc:	10120000 	.word	0x10120000
 80026e0:	10110000 	.word	0x10110000
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40010000 	.word	0x40010000
 80026ec:	40010800 	.word	0x40010800
 80026f0:	40010c00 	.word	0x40010c00
 80026f4:	40011000 	.word	0x40011000
 80026f8:	40011400 	.word	0x40011400
 80026fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002700:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <HAL_GPIO_Init+0x304>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	43db      	mvns	r3, r3
 8002708:	4909      	ldr	r1, [pc, #36]	@ (8002730 <HAL_GPIO_Init+0x304>)
 800270a:	4013      	ands	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	3301      	adds	r3, #1
 8002712:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	fa22 f303 	lsr.w	r3, r2, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	f47f ae8e 	bne.w	8002440 <HAL_GPIO_Init+0x14>
  }
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	372c      	adds	r7, #44	@ 0x2c
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	40010400 	.word	0x40010400

08002734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	807b      	strh	r3, [r7, #2]
 8002740:	4613      	mov	r3, r2
 8002742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002744:	787b      	ldrb	r3, [r7, #1]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800274a:	887a      	ldrh	r2, [r7, #2]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002750:	e003      	b.n	800275a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	041a      	lsls	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	611a      	str	r2, [r3, #16]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e12b      	b.n	80029ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff f888 	bl	80018a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2224      	movs	r2, #36	@ 0x24
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027c8:	f002 fc18 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 80027cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4a81      	ldr	r2, [pc, #516]	@ (80029d8 <HAL_I2C_Init+0x274>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d807      	bhi.n	80027e8 <HAL_I2C_Init+0x84>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4a80      	ldr	r2, [pc, #512]	@ (80029dc <HAL_I2C_Init+0x278>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	bf94      	ite	ls
 80027e0:	2301      	movls	r3, #1
 80027e2:	2300      	movhi	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e006      	b.n	80027f6 <HAL_I2C_Init+0x92>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4a7d      	ldr	r2, [pc, #500]	@ (80029e0 <HAL_I2C_Init+0x27c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	bf94      	ite	ls
 80027f0:	2301      	movls	r3, #1
 80027f2:	2300      	movhi	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0e7      	b.n	80029ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a78      	ldr	r2, [pc, #480]	@ (80029e4 <HAL_I2C_Init+0x280>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	0c9b      	lsrs	r3, r3, #18
 8002808:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a6a      	ldr	r2, [pc, #424]	@ (80029d8 <HAL_I2C_Init+0x274>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d802      	bhi.n	8002838 <HAL_I2C_Init+0xd4>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3301      	adds	r3, #1
 8002836:	e009      	b.n	800284c <HAL_I2C_Init+0xe8>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800283e:	fb02 f303 	mul.w	r3, r2, r3
 8002842:	4a69      	ldr	r2, [pc, #420]	@ (80029e8 <HAL_I2C_Init+0x284>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	3301      	adds	r3, #1
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	430b      	orrs	r3, r1
 8002852:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800285e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	495c      	ldr	r1, [pc, #368]	@ (80029d8 <HAL_I2C_Init+0x274>)
 8002868:	428b      	cmp	r3, r1
 800286a:	d819      	bhi.n	80028a0 <HAL_I2C_Init+0x13c>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1e59      	subs	r1, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fbb1 f3f3 	udiv	r3, r1, r3
 800287a:	1c59      	adds	r1, r3, #1
 800287c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002880:	400b      	ands	r3, r1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_I2C_Init+0x138>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1e59      	subs	r1, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fbb1 f3f3 	udiv	r3, r1, r3
 8002894:	3301      	adds	r3, #1
 8002896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289a:	e051      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 800289c:	2304      	movs	r3, #4
 800289e:	e04f      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d111      	bne.n	80028cc <HAL_I2C_Init+0x168>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	440b      	add	r3, r1
 80028b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	e012      	b.n	80028f2 <HAL_I2C_Init+0x18e>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1e58      	subs	r0, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	0099      	lsls	r1, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Init+0x196>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e022      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10e      	bne.n	8002920 <HAL_I2C_Init+0x1bc>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1e58      	subs	r0, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	440b      	add	r3, r1
 8002910:	fbb0 f3f3 	udiv	r3, r0, r3
 8002914:	3301      	adds	r3, #1
 8002916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800291e:	e00f      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	0099      	lsls	r1, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	6809      	ldr	r1, [r1, #0]
 8002944:	4313      	orrs	r3, r2
 8002946:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800296e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6911      	ldr	r1, [r2, #16]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68d2      	ldr	r2, [r2, #12]
 800297a:	4311      	orrs	r1, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	000186a0 	.word	0x000186a0
 80029dc:	001e847f 	.word	0x001e847f
 80029e0:	003d08ff 	.word	0x003d08ff
 80029e4:	431bde83 	.word	0x431bde83
 80029e8:	10624dd3 	.word	0x10624dd3

080029ec <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029fe:	2b80      	cmp	r3, #128	@ 0x80
 8002a00:	d103      	bne.n	8002a0a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2200      	movs	r2, #0
 8002a08:	611a      	str	r2, [r3, #16]
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	4608      	mov	r0, r1
 8002a1e:	4611      	mov	r1, r2
 8002a20:	461a      	mov	r2, r3
 8002a22:	4603      	mov	r3, r0
 8002a24:	817b      	strh	r3, [r7, #10]
 8002a26:	460b      	mov	r3, r1
 8002a28:	813b      	strh	r3, [r7, #8]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	f040 8096 	bne.w	8002b6c <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a40:	4b4d      	ldr	r3, [pc, #308]	@ (8002b78 <HAL_I2C_Mem_Read_IT+0x164>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	08db      	lsrs	r3, r3, #3
 8002a46:	4a4d      	ldr	r2, [pc, #308]	@ (8002b7c <HAL_I2C_Mem_Read_IT+0x168>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	0a1a      	lsrs	r2, r3, #8
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	009a      	lsls	r2, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d112      	bne.n	8002a8c <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e070      	b.n	8002b6e <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d0df      	beq.n	8002a5a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_I2C_Mem_Read_IT+0x94>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e062      	b.n	8002b6e <HAL_I2C_Mem_Read_IT+0x15a>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d007      	beq.n	8002ace <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002adc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2222      	movs	r2, #34	@ 0x22
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2240      	movs	r2, #64	@ 0x40
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a3a      	ldr	r2, [r7, #32]
 8002af8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b80 <HAL_I2C_Mem_Read_IT+0x16c>)
 8002b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002b10:	897a      	ldrh	r2, [r7, #10]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8002b16:	893a      	ldrh	r2, [r7, #8]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002b1c:	88fa      	ldrh	r2, [r7, #6]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b36:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b46:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002b66:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	e000      	b.n	8002b6e <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8002b6c:	2302      	movs	r3, #2
  }
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	20000008 	.word	0x20000008
 8002b7c:	14f8b589 	.word	0x14f8b589
 8002b80:	ffff0000 	.word	0xffff0000

08002b84 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	@ 0x28
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	607a      	str	r2, [r7, #4]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	460b      	mov	r3, r1
 8002b92:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b94:	f7ff f91a 	bl	8001dcc <HAL_GetTick>
 8002b98:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	f040 8111 	bne.w	8002dce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2319      	movs	r3, #25
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4988      	ldr	r1, [pc, #544]	@ (8002dd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f001 fd90 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e104      	b.n	8002dd0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_I2C_IsDeviceReady+0x50>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e0fd      	b.n	8002dd0 <HAL_I2C_IsDeviceReady+0x24c>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d007      	beq.n	8002bfa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2224      	movs	r2, #36	@ 0x24
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4a70      	ldr	r2, [pc, #448]	@ (8002ddc <HAL_I2C_IsDeviceReady+0x258>)
 8002c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c2c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f001 fd4e 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00d      	beq.n	8002c62 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c54:	d103      	bne.n	8002c5e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c5c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e0b6      	b.n	8002dd0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c62:	897b      	ldrh	r3, [r7, #10]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c70:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c72:	f7ff f8ab 	bl	8001dcc <HAL_GetTick>
 8002c76:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	bf0c      	ite	eq
 8002c86:	2301      	moveq	r3, #1
 8002c88:	2300      	movne	r3, #0
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c9c:	bf0c      	ite	eq
 8002c9e:	2301      	moveq	r3, #1
 8002ca0:	2300      	movne	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ca6:	e025      	b.n	8002cf4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ca8:	f7ff f890 	bl	8001dcc <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d302      	bcc.n	8002cbe <HAL_I2C_IsDeviceReady+0x13a>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d103      	bne.n	8002cc6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	22a0      	movs	r2, #160	@ 0xa0
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2ba0      	cmp	r3, #160	@ 0xa0
 8002cfe:	d005      	beq.n	8002d0c <HAL_I2C_IsDeviceReady+0x188>
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <HAL_I2C_IsDeviceReady+0x188>
 8002d06:	7dbb      	ldrb	r3, [r7, #22]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0cd      	beq.n	8002ca8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d129      	bne.n	8002d76 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d30:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2319      	movs	r3, #25
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4921      	ldr	r1, [pc, #132]	@ (8002dd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f001 fcc2 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e036      	b.n	8002dd0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e02c      	b.n	8002dd0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d84:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d8e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2319      	movs	r3, #25
 8002d96:	2201      	movs	r2, #1
 8002d98:	490f      	ldr	r1, [pc, #60]	@ (8002dd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f001 fc9e 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e012      	b.n	8002dd0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	3301      	adds	r3, #1
 8002dae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	f4ff af32 	bcc.w	8002c1e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002dce:	2302      	movs	r3, #2
  }
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3720      	adds	r7, #32
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	00100002 	.word	0x00100002
 8002ddc:	ffff0000 	.word	0xffff0000

08002de0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e00:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e08:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d003      	beq.n	8002e18 <HAL_I2C_EV_IRQHandler+0x38>
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b40      	cmp	r3, #64	@ 0x40
 8002e14:	f040 80b1 	bne.w	8002f7a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10d      	bne.n	8002e4e <HAL_I2C_EV_IRQHandler+0x6e>
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002e38:	d003      	beq.n	8002e42 <HAL_I2C_EV_IRQHandler+0x62>
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002e40:	d101      	bne.n	8002e46 <HAL_I2C_EV_IRQHandler+0x66>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_I2C_EV_IRQHandler+0x68>
 8002e46:	2300      	movs	r3, #0
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	f000 8114 	beq.w	8003076 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00b      	beq.n	8002e70 <HAL_I2C_EV_IRQHandler+0x90>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d006      	beq.n	8002e70 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f001 fce6 	bl	8004834 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fd6b 	bl	8003944 <I2C_Master_SB>
 8002e6e:	e083      	b.n	8002f78 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d008      	beq.n	8002e8c <HAL_I2C_EV_IRQHandler+0xac>
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fde2 	bl	8003a4e <I2C_Master_ADD10>
 8002e8a:	e075      	b.n	8002f78 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <HAL_I2C_EV_IRQHandler+0xc8>
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fdfd 	bl	8003aa0 <I2C_Master_ADDR>
 8002ea6:	e067      	b.n	8002f78 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d036      	beq.n	8002f20 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ec0:	f000 80db 	beq.w	800307a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00d      	beq.n	8002eea <HAL_I2C_EV_IRQHandler+0x10a>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_I2C_EV_IRQHandler+0x10a>
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f9cb 	bl	800327e <I2C_MasterTransmit_TXE>
 8002ee8:	e046      	b.n	8002f78 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80c2 	beq.w	800307a <HAL_I2C_EV_IRQHandler+0x29a>
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80bc 	beq.w	800307a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f02:	7bbb      	ldrb	r3, [r7, #14]
 8002f04:	2b21      	cmp	r3, #33	@ 0x21
 8002f06:	d103      	bne.n	8002f10 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fa54 	bl	80033b6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f0e:	e0b4      	b.n	800307a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b40      	cmp	r3, #64	@ 0x40
 8002f14:	f040 80b1 	bne.w	800307a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fac2 	bl	80034a2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f1e:	e0ac      	b.n	800307a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f2e:	f000 80a4 	beq.w	800307a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00d      	beq.n	8002f58 <HAL_I2C_EV_IRQHandler+0x178>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_I2C_EV_IRQHandler+0x178>
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d103      	bne.n	8002f58 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fb3e 	bl	80035d2 <I2C_MasterReceive_RXNE>
 8002f56:	e00f      	b.n	8002f78 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 808b 	beq.w	800307a <HAL_I2C_EV_IRQHandler+0x29a>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8085 	beq.w	800307a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fbf6 	bl	8003762 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f76:	e080      	b.n	800307a <HAL_I2C_EV_IRQHandler+0x29a>
 8002f78:	e07f      	b.n	800307a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d004      	beq.n	8002f8c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	e007      	b.n	8002f9c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d011      	beq.n	8002fca <HAL_I2C_EV_IRQHandler+0x1ea>
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00c      	beq.n	8002fca <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002fc0:	69b9      	ldr	r1, [r7, #24]
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 ffc3 	bl	8003f4e <I2C_Slave_ADDR>
 8002fc8:	e05a      	b.n	8003080 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_I2C_EV_IRQHandler+0x206>
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fffe 	bl	8003fe0 <I2C_Slave_STOPF>
 8002fe4:	e04c      	b.n	8003080 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fe6:	7bbb      	ldrb	r3, [r7, #14]
 8002fe8:	2b21      	cmp	r3, #33	@ 0x21
 8002fea:	d002      	beq.n	8002ff2 <HAL_I2C_EV_IRQHandler+0x212>
 8002fec:	7bbb      	ldrb	r3, [r7, #14]
 8002fee:	2b29      	cmp	r3, #41	@ 0x29
 8002ff0:	d120      	bne.n	8003034 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00d      	beq.n	8003018 <HAL_I2C_EV_IRQHandler+0x238>
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_I2C_EV_IRQHandler+0x238>
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d103      	bne.n	8003018 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fee0 	bl	8003dd6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003016:	e032      	b.n	800307e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d02d      	beq.n	800307e <HAL_I2C_EV_IRQHandler+0x29e>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003028:	2b00      	cmp	r3, #0
 800302a:	d028      	beq.n	800307e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 ff0f 	bl	8003e50 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003032:	e024      	b.n	800307e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00d      	beq.n	800305a <HAL_I2C_EV_IRQHandler+0x27a>
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_I2C_EV_IRQHandler+0x27a>
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d103      	bne.n	800305a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 ff1c 	bl	8003e90 <I2C_SlaveReceive_RXNE>
 8003058:	e012      	b.n	8003080 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800306a:	2b00      	cmp	r3, #0
 800306c:	d008      	beq.n	8003080 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 ff4c 	bl	8003f0c <I2C_SlaveReceive_BTF>
 8003074:	e004      	b.n	8003080 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003076:	bf00      	nop
 8003078:	e002      	b.n	8003080 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800307a:	bf00      	nop
 800307c:	e000      	b.n	8003080 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800307e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b08a      	sub	sp, #40	@ 0x28
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030a8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d015      	beq.n	80030e0 <HAL_I2C_ER_IRQHandler+0x5a>
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d010      	beq.n	80030e0 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80030ce:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030de:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00d      	beq.n	8003106 <HAL_I2C_ER_IRQHandler+0x80>
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	f043 0302 	orr.w	r3, r3, #2
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003104:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310c:	2b00      	cmp	r3, #0
 800310e:	d03e      	beq.n	800318e <HAL_I2C_ER_IRQHandler+0x108>
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d039      	beq.n	800318e <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 800311a:	7efb      	ldrb	r3, [r7, #27]
 800311c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800312c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003134:	7ebb      	ldrb	r3, [r7, #26]
 8003136:	2b20      	cmp	r3, #32
 8003138:	d112      	bne.n	8003160 <HAL_I2C_ER_IRQHandler+0xda>
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10f      	bne.n	8003160 <HAL_I2C_ER_IRQHandler+0xda>
 8003140:	7cfb      	ldrb	r3, [r7, #19]
 8003142:	2b21      	cmp	r3, #33	@ 0x21
 8003144:	d008      	beq.n	8003158 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003146:	7cfb      	ldrb	r3, [r7, #19]
 8003148:	2b29      	cmp	r3, #41	@ 0x29
 800314a:	d005      	beq.n	8003158 <HAL_I2C_ER_IRQHandler+0xd2>
 800314c:	7cfb      	ldrb	r3, [r7, #19]
 800314e:	2b28      	cmp	r3, #40	@ 0x28
 8003150:	d106      	bne.n	8003160 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b21      	cmp	r3, #33	@ 0x21
 8003156:	d103      	bne.n	8003160 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f001 f871 	bl	8004240 <I2C_Slave_AF>
 800315e:	e016      	b.n	800318e <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003168:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	f043 0304 	orr.w	r3, r3, #4
 8003170:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003172:	7efb      	ldrb	r3, [r7, #27]
 8003174:	2b10      	cmp	r3, #16
 8003176:	d002      	beq.n	800317e <HAL_I2C_ER_IRQHandler+0xf8>
 8003178:	7efb      	ldrb	r3, [r7, #27]
 800317a:	2b40      	cmp	r3, #64	@ 0x40
 800317c:	d107      	bne.n	800318e <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800318c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00d      	beq.n	80031b4 <HAL_I2C_ER_IRQHandler+0x12e>
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	f043 0308 	orr.w	r3, r3, #8
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80031b2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80031b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f001 f8ae 	bl	8004328 <I2C_ITError>
  }
}
 80031cc:	bf00      	nop
 80031ce:	3728      	adds	r7, #40	@ 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	70fb      	strb	r3, [r7, #3]
 8003228:	4613      	mov	r3, r2
 800322a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr

0800325a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800328c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003294:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d150      	bne.n	8003346 <I2C_MasterTransmit_TXE+0xc8>
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	2b21      	cmp	r3, #33	@ 0x21
 80032a8:	d14d      	bne.n	8003346 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d01d      	beq.n	80032ec <I2C_MasterTransmit_TXE+0x6e>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d01a      	beq.n	80032ec <I2C_MasterTransmit_TXE+0x6e>
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032bc:	d016      	beq.n	80032ec <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032cc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2211      	movs	r2, #17
 80032d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff75 	bl	80031d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032ea:	e060      	b.n	80033ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032fa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800330a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b40      	cmp	r3, #64	@ 0x40
 8003324:	d107      	bne.n	8003336 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ff8a 	bl	8003248 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003334:	e03b      	b.n	80033ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ff48 	bl	80031d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003344:	e033      	b.n	80033ae <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b21      	cmp	r3, #33	@ 0x21
 800334a:	d005      	beq.n	8003358 <I2C_MasterTransmit_TXE+0xda>
 800334c:	7bbb      	ldrb	r3, [r7, #14]
 800334e:	2b40      	cmp	r3, #64	@ 0x40
 8003350:	d12d      	bne.n	80033ae <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	2b22      	cmp	r3, #34	@ 0x22
 8003356:	d12a      	bne.n	80033ae <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d108      	bne.n	8003374 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003370:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003372:	e01c      	b.n	80033ae <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b40      	cmp	r3, #64	@ 0x40
 800337e:	d103      	bne.n	8003388 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f88e 	bl	80034a2 <I2C_MemoryTransmit_TXE_BTF>
}
 8003386:	e012      	b.n	80033ae <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	781a      	ldrb	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80033ac:	e7ff      	b.n	80033ae <I2C_MasterTransmit_TXE+0x130>
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b21      	cmp	r3, #33	@ 0x21
 80033ce:	d164      	bne.n	800349a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d012      	beq.n	8003400 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	781a      	ldrb	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80033fe:	e04c      	b.n	800349a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2b08      	cmp	r3, #8
 8003404:	d01d      	beq.n	8003442 <I2C_MasterTransmit_BTF+0x8c>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2b20      	cmp	r3, #32
 800340a:	d01a      	beq.n	8003442 <I2C_MasterTransmit_BTF+0x8c>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003412:	d016      	beq.n	8003442 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003422:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2211      	movs	r2, #17
 8003428:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff feca 	bl	80031d4 <HAL_I2C_MasterTxCpltCallback>
}
 8003440:	e02b      	b.n	800349a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003450:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003460:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b40      	cmp	r3, #64	@ 0x40
 800347a:	d107      	bne.n	800348c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff fedf 	bl	8003248 <HAL_I2C_MemTxCpltCallback>
}
 800348a:	e006      	b.n	800349a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff fe9d 	bl	80031d4 <HAL_I2C_MasterTxCpltCallback>
}
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d11d      	bne.n	80034f6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d10b      	bne.n	80034da <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d2:	1c9a      	adds	r2, r3, #2
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80034d8:	e077      	b.n	80035ca <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034de:	b29b      	uxth	r3, r3
 80034e0:	121b      	asrs	r3, r3, #8
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80034f4:	e069      	b.n	80035ca <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d10b      	bne.n	8003516 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003502:	b2da      	uxtb	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003514:	e059      	b.n	80035ca <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351a:	2b02      	cmp	r3, #2
 800351c:	d152      	bne.n	80035c4 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	2b22      	cmp	r3, #34	@ 0x22
 8003522:	d10d      	bne.n	8003540 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003532:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800353e:	e044      	b.n	80035ca <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d015      	beq.n	8003576 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	2b21      	cmp	r3, #33	@ 0x21
 800354e:	d112      	bne.n	8003576 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	781a      	ldrb	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003574:	e029      	b.n	80035ca <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d124      	bne.n	80035ca <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	2b21      	cmp	r3, #33	@ 0x21
 8003584:	d121      	bne.n	80035ca <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003594:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035a4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff fe43 	bl	8003248 <HAL_I2C_MemTxCpltCallback>
}
 80035c2:	e002      	b.n	80035ca <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fa11 	bl	80029ec <I2C_Flush_DR>
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b22      	cmp	r3, #34	@ 0x22
 80035e4:	f040 80b9 	bne.w	800375a <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d921      	bls.n	8003640 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b03      	cmp	r3, #3
 800362a:	f040 8096 	bne.w	800375a <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800363c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800363e:	e08c      	b.n	800375a <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	2b02      	cmp	r3, #2
 8003646:	d07f      	beq.n	8003748 <I2C_MasterReceive_RXNE+0x176>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d002      	beq.n	8003654 <I2C_MasterReceive_RXNE+0x82>
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d179      	bne.n	8003748 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f001 f8bb 	bl	80047d0 <I2C_WaitOnSTOPRequestThroughIT>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d14c      	bne.n	80036fa <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800366e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800367e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b40      	cmp	r3, #64	@ 0x40
 80036b8:	d10a      	bne.n	80036d0 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7fd fd23 	bl	8001114 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036ce:	e044      	b.n	800375a <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d002      	beq.n	80036e4 <I2C_MasterReceive_RXNE+0x112>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d103      	bne.n	80036ec <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80036ea:	e002      	b.n	80036f2 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2212      	movs	r2, #18
 80036f0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff fd77 	bl	80031e6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036f8:	e02f      	b.n	800375a <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003708:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff fd8a 	bl	800325a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003746:	e008      	b.n	800375a <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003756:	605a      	str	r2, [r3, #4]
}
 8003758:	e7ff      	b.n	800375a <I2C_MasterReceive_RXNE+0x188>
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b04      	cmp	r3, #4
 8003778:	d11b      	bne.n	80037b2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003788:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80037b0:	e0c4      	b.n	800393c <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d129      	bne.n	8003810 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ca:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d00a      	beq.n	80037e8 <I2C_MasterReceive_BTF+0x86>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d007      	beq.n	80037e8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800380e:	e095      	b.n	800393c <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d17d      	bne.n	8003916 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d002      	beq.n	8003826 <I2C_MasterReceive_BTF+0xc4>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b10      	cmp	r3, #16
 8003824:	d108      	bne.n	8003838 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e016      	b.n	8003866 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b04      	cmp	r3, #4
 800383c:	d002      	beq.n	8003844 <I2C_MasterReceive_BTF+0xe2>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d108      	bne.n	8003856 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e007      	b.n	8003866 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003864:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80038c0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b40      	cmp	r3, #64	@ 0x40
 80038d4:	d10a      	bne.n	80038ec <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7fd fc15 	bl	8001114 <HAL_I2C_MemRxCpltCallback>
}
 80038ea:	e027      	b.n	800393c <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d002      	beq.n	8003900 <I2C_MasterReceive_BTF+0x19e>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d103      	bne.n	8003908 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	@ 0x30
 8003906:	e002      	b.n	800390e <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2212      	movs	r2, #18
 800390c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fc69 	bl	80031e6 <HAL_I2C_MasterRxCpltCallback>
}
 8003914:	e012      	b.n	800393c <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b40      	cmp	r3, #64	@ 0x40
 8003956:	d117      	bne.n	8003988 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800395c:	2b00      	cmp	r3, #0
 800395e:	d109      	bne.n	8003974 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003970:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003972:	e067      	b.n	8003a44 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	b2da      	uxtb	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	611a      	str	r2, [r3, #16]
}
 8003986:	e05d      	b.n	8003a44 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003990:	d133      	bne.n	80039fa <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b21      	cmp	r3, #33	@ 0x21
 800399c:	d109      	bne.n	80039b2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039ae:	611a      	str	r2, [r3, #16]
 80039b0:	e008      	b.n	80039c4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <I2C_Master_SB+0x92>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d108      	bne.n	80039e8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d032      	beq.n	8003a44 <I2C_Master_SB+0x100>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d02d      	beq.n	8003a44 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039f6:	605a      	str	r2, [r3, #4]
}
 80039f8:	e024      	b.n	8003a44 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10e      	bne.n	8003a20 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	11db      	asrs	r3, r3, #7
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	f003 0306 	and.w	r3, r3, #6
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f063 030f 	orn	r3, r3, #15
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	611a      	str	r2, [r3, #16]
}
 8003a1e:	e011      	b.n	8003a44 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d10d      	bne.n	8003a44 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	11db      	asrs	r3, r3, #7
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f003 0306 	and.w	r3, r3, #6
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	f063 030e 	orn	r3, r3, #14
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	611a      	str	r2, [r3, #16]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <I2C_Master_ADD10+0x26>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d108      	bne.n	8003a86 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00c      	beq.n	8003a96 <I2C_Master_ADD10+0x48>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a94:	605a      	str	r2, [r3, #4]
  }
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b091      	sub	sp, #68	@ 0x44
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abc:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b22      	cmp	r3, #34	@ 0x22
 8003ac8:	f040 8174 	bne.w	8003db4 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10f      	bne.n	8003af4 <I2C_Master_ADDR+0x54>
 8003ad4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003ad8:	2b40      	cmp	r3, #64	@ 0x40
 8003ada:	d10b      	bne.n	8003af4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003adc:	2300      	movs	r3, #0
 8003ade:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8003af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af2:	e16b      	b.n	8003dcc <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d11d      	bne.n	8003b38 <I2C_Master_ADDR+0x98>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b04:	d118      	bne.n	8003b38 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b06:	2300      	movs	r3, #0
 8003b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b2a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	651a      	str	r2, [r3, #80]	@ 0x50
 8003b36:	e149      	b.n	8003dcc <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d113      	bne.n	8003b6a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b42:	2300      	movs	r3, #0
 8003b44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	e120      	b.n	8003dac <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	f040 808a 	bne.w	8003c8a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b7c:	d137      	bne.n	8003bee <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b8c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b9c:	d113      	bne.n	8003bc6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bac:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	e0f2      	b.n	8003dac <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	623b      	str	r3, [r7, #32]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	623b      	str	r3, [r7, #32]
 8003bda:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e0de      	b.n	8003dac <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d02e      	beq.n	8003c52 <I2C_Master_ADDR+0x1b2>
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d02b      	beq.n	8003c52 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bfc:	2b12      	cmp	r3, #18
 8003bfe:	d102      	bne.n	8003c06 <I2C_Master_ADDR+0x166>
 8003c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d125      	bne.n	8003c52 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d00e      	beq.n	8003c2a <I2C_Master_ADDR+0x18a>
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d00b      	beq.n	8003c2a <I2C_Master_ADDR+0x18a>
 8003c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d008      	beq.n	8003c2a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e007      	b.n	8003c3a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c38:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	61fb      	str	r3, [r7, #28]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	e0ac      	b.n	8003dac <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c60:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	61bb      	str	r3, [r7, #24]
 8003c76:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e090      	b.n	8003dac <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d158      	bne.n	8003d46 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d021      	beq.n	8003cde <I2C_Master_ADDR+0x23e>
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d01e      	beq.n	8003cde <I2C_Master_ADDR+0x23e>
 8003ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca2:	2b10      	cmp	r3, #16
 8003ca4:	d01b      	beq.n	8003cde <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	617b      	str	r3, [r7, #20]
 8003cca:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	e012      	b.n	8003d04 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cec:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d12:	d14b      	bne.n	8003dac <I2C_Master_ADDR+0x30c>
 8003d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d16:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d1a:	d00b      	beq.n	8003d34 <I2C_Master_ADDR+0x294>
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d008      	beq.n	8003d34 <I2C_Master_ADDR+0x294>
 8003d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d005      	beq.n	8003d34 <I2C_Master_ADDR+0x294>
 8003d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d002      	beq.n	8003d34 <I2C_Master_ADDR+0x294>
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d13b      	bne.n	8003dac <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	e032      	b.n	8003dac <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d54:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d64:	d117      	bne.n	8003d96 <I2C_Master_ADDR+0x2f6>
 8003d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d6c:	d00b      	beq.n	8003d86 <I2C_Master_ADDR+0x2e6>
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d008      	beq.n	8003d86 <I2C_Master_ADDR+0x2e6>
 8003d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d005      	beq.n	8003d86 <I2C_Master_ADDR+0x2e6>
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d002      	beq.n	8003d86 <I2C_Master_ADDR+0x2e6>
 8003d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d107      	bne.n	8003d96 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003db2:	e00b      	b.n	8003dcc <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db4:	2300      	movs	r3, #0
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	60bb      	str	r3, [r7, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
}
 8003dca:	e7ff      	b.n	8003dcc <I2C_Master_ADDR+0x32c>
 8003dcc:	bf00      	nop
 8003dce:	3744      	adds	r7, #68	@ 0x44
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr

08003dd6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d02b      	beq.n	8003e48 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	781a      	ldrb	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d114      	bne.n	8003e48 <I2C_SlaveTransmit_TXE+0x72>
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b29      	cmp	r3, #41	@ 0x29
 8003e22:	d111      	bne.n	8003e48 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e32:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2221      	movs	r2, #33	@ 0x21
 8003e38:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2228      	movs	r2, #40	@ 0x28
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff f9d8 	bl	80031f8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d011      	beq.n	8003e86 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e66:	781a      	ldrb	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d02c      	beq.n	8003f04 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d114      	bne.n	8003f04 <I2C_SlaveReceive_RXNE+0x74>
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ede:	d111      	bne.n	8003f04 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2222      	movs	r2, #34	@ 0x22
 8003ef4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2228      	movs	r2, #40	@ 0x28
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff f983 	bl	800320a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d012      	beq.n	8003f44 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
 8003f56:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f68:	2b28      	cmp	r3, #40	@ 0x28
 8003f6a:	d125      	bne.n	8003fb8 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f7a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003f86:	2301      	movs	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d103      	bne.n	8003f9c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	81bb      	strh	r3, [r7, #12]
 8003f9a:	e002      	b.n	8003fa2 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003faa:	89ba      	ldrh	r2, [r7, #12]
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff f933 	bl	800321c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003fb6:	e00e      	b.n	8003fd6 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ffe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004000:	2300      	movs	r3, #0
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800402c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004038:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800403c:	d172      	bne.n	8004124 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	2b22      	cmp	r3, #34	@ 0x22
 8004042:	d002      	beq.n	800404a <I2C_Slave_STOPF+0x6a>
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b2a      	cmp	r3, #42	@ 0x2a
 8004048:	d135      	bne.n	80040b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	b29a      	uxth	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d005      	beq.n	800406e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	f043 0204 	orr.w	r2, r3, #4
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800407c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe f9c4 	bl	8002410 <HAL_DMA_GetState>
 8004088:	4603      	mov	r3, r0
 800408a:	2b01      	cmp	r3, #1
 800408c:	d049      	beq.n	8004122 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004092:	4a69      	ldr	r2, [pc, #420]	@ (8004238 <I2C_Slave_STOPF+0x258>)
 8004094:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe f83a 	bl	8002114 <HAL_DMA_Abort_IT>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d03d      	beq.n	8004122 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040b0:	4610      	mov	r0, r2
 80040b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040b4:	e035      	b.n	8004122 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	b29a      	uxth	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d2:	f043 0204 	orr.w	r2, r3, #4
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe f98e 	bl	8002410 <HAL_DMA_GetState>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d014      	beq.n	8004124 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004238 <I2C_Slave_STOPF+0x258>)
 8004100:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe f804 	bl	8002114 <HAL_DMA_Abort_IT>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800411c:	4610      	mov	r0, r2
 800411e:	4798      	blx	r3
 8004120:	e000      	b.n	8004124 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004122:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d03e      	beq.n	80041ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b04      	cmp	r3, #4
 800413a:	d112      	bne.n	8004162 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416c:	2b40      	cmp	r3, #64	@ 0x40
 800416e:	d112      	bne.n	8004196 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a4:	f043 0204 	orr.w	r2, r3, #4
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f8b7 	bl	8004328 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80041ba:	e039      	b.n	8004230 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	2b2a      	cmp	r3, #42	@ 0x2a
 80041c0:	d109      	bne.n	80041d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2228      	movs	r2, #40	@ 0x28
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff f81a 	bl	800320a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b28      	cmp	r3, #40	@ 0x28
 80041e0:	d111      	bne.n	8004206 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a15      	ldr	r2, [pc, #84]	@ (800423c <I2C_Slave_STOPF+0x25c>)
 80041e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff f819 	bl	8003236 <HAL_I2C_ListenCpltCallback>
}
 8004204:	e014      	b.n	8004230 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420a:	2b22      	cmp	r3, #34	@ 0x22
 800420c:	d002      	beq.n	8004214 <I2C_Slave_STOPF+0x234>
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2b22      	cmp	r3, #34	@ 0x22
 8004212:	d10d      	bne.n	8004230 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fe ffed 	bl	800320a <HAL_I2C_SlaveRxCpltCallback>
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	0800458d 	.word	0x0800458d
 800423c:	ffff0000 	.word	0xffff0000

08004240 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800424e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d002      	beq.n	8004262 <I2C_Slave_AF+0x22>
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b20      	cmp	r3, #32
 8004260:	d129      	bne.n	80042b6 <I2C_Slave_AF+0x76>
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	2b28      	cmp	r3, #40	@ 0x28
 8004266:	d126      	bne.n	80042b6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a2e      	ldr	r2, [pc, #184]	@ (8004324 <I2C_Slave_AF+0xe4>)
 800426c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800427c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004286:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004296:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7fe ffc1 	bl	8003236 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80042b4:	e031      	b.n	800431a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	2b21      	cmp	r3, #33	@ 0x21
 80042ba:	d129      	bne.n	8004310 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a19      	ldr	r2, [pc, #100]	@ (8004324 <I2C_Slave_AF+0xe4>)
 80042c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2221      	movs	r2, #33	@ 0x21
 80042c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042e6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042f0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004300:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fe fb72 	bl	80029ec <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7fe ff75 	bl	80031f8 <HAL_I2C_SlaveTxCpltCallback>
}
 800430e:	e004      	b.n	800431a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004318:	615a      	str	r2, [r3, #20]
}
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	ffff0000 	.word	0xffff0000

08004328 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004336:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800433e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004340:	7bbb      	ldrb	r3, [r7, #14]
 8004342:	2b10      	cmp	r3, #16
 8004344:	d002      	beq.n	800434c <I2C_ITError+0x24>
 8004346:	7bbb      	ldrb	r3, [r7, #14]
 8004348:	2b40      	cmp	r3, #64	@ 0x40
 800434a:	d10a      	bne.n	8004362 <I2C_ITError+0x3a>
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b22      	cmp	r3, #34	@ 0x22
 8004350:	d107      	bne.n	8004362 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004360:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004368:	2b28      	cmp	r3, #40	@ 0x28
 800436a:	d107      	bne.n	800437c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2228      	movs	r2, #40	@ 0x28
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800437a:	e015      	b.n	80043a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004386:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800438a:	d00a      	beq.n	80043a2 <I2C_ITError+0x7a>
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b60      	cmp	r3, #96	@ 0x60
 8004390:	d007      	beq.n	80043a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043b6:	d162      	bne.n	800447e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d020      	beq.n	8004418 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043da:	4a6a      	ldr	r2, [pc, #424]	@ (8004584 <I2C_ITError+0x25c>)
 80043dc:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fd fe96 	bl	8002114 <HAL_DMA_Abort_IT>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 8089 	beq.w	8004502 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0201 	bic.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004412:	4610      	mov	r0, r2
 8004414:	4798      	blx	r3
 8004416:	e074      	b.n	8004502 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441c:	4a59      	ldr	r2, [pc, #356]	@ (8004584 <I2C_ITError+0x25c>)
 800441e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004424:	4618      	mov	r0, r3
 8004426:	f7fd fe75 	bl	8002114 <HAL_DMA_Abort_IT>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d068      	beq.n	8004502 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443a:	2b40      	cmp	r3, #64	@ 0x40
 800443c:	d10b      	bne.n	8004456 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004478:	4610      	mov	r0, r2
 800447a:	4798      	blx	r3
 800447c:	e041      	b.n	8004502 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b60      	cmp	r3, #96	@ 0x60
 8004488:	d125      	bne.n	80044d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a2:	2b40      	cmp	r3, #64	@ 0x40
 80044a4:	d10b      	bne.n	80044be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0201 	bic.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fe fecc 	bl	800326c <HAL_I2C_AbortCpltCallback>
 80044d4:	e015      	b.n	8004502 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e0:	2b40      	cmp	r3, #64	@ 0x40
 80044e2:	d10b      	bne.n	80044fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7fe feac 	bl	800325a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10e      	bne.n	8004530 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800453e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004546:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b04      	cmp	r3, #4
 8004552:	d113      	bne.n	800457c <I2C_ITError+0x254>
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b28      	cmp	r3, #40	@ 0x28
 8004558:	d110      	bne.n	800457c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a0a      	ldr	r2, [pc, #40]	@ (8004588 <I2C_ITError+0x260>)
 800455e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fe fe5d 	bl	8003236 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	0800458d 	.word	0x0800458d
 8004588:	ffff0000 	.word	0xffff0000

0800458c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045a6:	4b4b      	ldr	r3, [pc, #300]	@ (80046d4 <I2C_DMAAbort+0x148>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	08db      	lsrs	r3, r3, #3
 80045ac:	4a4a      	ldr	r2, [pc, #296]	@ (80046d8 <I2C_DMAAbort+0x14c>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	0a1a      	lsrs	r2, r3, #8
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	00da      	lsls	r2, r3, #3
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ca:	f043 0220 	orr.w	r2, r3, #32
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80045d2:	e00a      	b.n	80045ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e8:	d0ea      	beq.n	80045c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f6:	2200      	movs	r2, #0
 80045f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004606:	2200      	movs	r2, #0
 8004608:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004618:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2200      	movs	r2, #0
 800461e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462c:	2200      	movs	r2, #0
 800462e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463c:	2200      	movs	r2, #0
 800463e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0201 	bic.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b60      	cmp	r3, #96	@ 0x60
 800465a:	d10e      	bne.n	800467a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2200      	movs	r2, #0
 8004670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004672:	6978      	ldr	r0, [r7, #20]
 8004674:	f7fe fdfa 	bl	800326c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004678:	e027      	b.n	80046ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004680:	2b28      	cmp	r3, #40	@ 0x28
 8004682:	d117      	bne.n	80046b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2200      	movs	r2, #0
 80046a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2228      	movs	r2, #40	@ 0x28
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80046b2:	e007      	b.n	80046c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80046c4:	6978      	ldr	r0, [r7, #20]
 80046c6:	f7fe fdc8 	bl	800325a <HAL_I2C_ErrorCallback>
}
 80046ca:	bf00      	nop
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000008 	.word	0x20000008
 80046d8:	14f8b589 	.word	0x14f8b589

080046dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	4613      	mov	r3, r2
 80046ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ec:	e048      	b.n	8004780 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d044      	beq.n	8004780 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7fd fb69 	bl	8001dcc <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d139      	bne.n	8004780 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	0c1b      	lsrs	r3, r3, #16
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b01      	cmp	r3, #1
 8004714:	d10d      	bne.n	8004732 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	43da      	mvns	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	4013      	ands	r3, r2
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	461a      	mov	r2, r3
 8004730:	e00c      	b.n	800474c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	43da      	mvns	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4013      	ands	r3, r2
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf0c      	ite	eq
 8004744:	2301      	moveq	r3, #1
 8004746:	2300      	movne	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	429a      	cmp	r2, r3
 8004750:	d116      	bne.n	8004780 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	f043 0220 	orr.w	r2, r3, #32
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e023      	b.n	80047c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	0c1b      	lsrs	r3, r3, #16
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	d10d      	bne.n	80047a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	43da      	mvns	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4013      	ands	r3, r2
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	e00c      	b.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	43da      	mvns	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4013      	ands	r3, r2
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	79fb      	ldrb	r3, [r7, #7]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d093      	beq.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80047dc:	4b13      	ldr	r3, [pc, #76]	@ (800482c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	08db      	lsrs	r3, r3, #3
 80047e2:	4a13      	ldr	r2, [pc, #76]	@ (8004830 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	0a1a      	lsrs	r2, r3, #8
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d107      	bne.n	800480e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e008      	b.n	8004820 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800481c:	d0e9      	beq.n	80047f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000008 	.word	0x20000008
 8004830:	14f8b589 	.word	0x14f8b589

08004834 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004844:	d103      	bne.n	800484e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800484c:	e007      	b.n	800485e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004852:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004856:	d102      	bne.n	800485e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2208      	movs	r2, #8
 800485c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e272      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8087 	beq.w	8004996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004888:	4b92      	ldr	r3, [pc, #584]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 030c 	and.w	r3, r3, #12
 8004890:	2b04      	cmp	r3, #4
 8004892:	d00c      	beq.n	80048ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004894:	4b8f      	ldr	r3, [pc, #572]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b08      	cmp	r3, #8
 800489e:	d112      	bne.n	80048c6 <HAL_RCC_OscConfig+0x5e>
 80048a0:	4b8c      	ldr	r3, [pc, #560]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ac:	d10b      	bne.n	80048c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ae:	4b89      	ldr	r3, [pc, #548]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d06c      	beq.n	8004994 <HAL_RCC_OscConfig+0x12c>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d168      	bne.n	8004994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e24c      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ce:	d106      	bne.n	80048de <HAL_RCC_OscConfig+0x76>
 80048d0:	4b80      	ldr	r3, [pc, #512]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a7f      	ldr	r2, [pc, #508]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80048d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	e02e      	b.n	800493c <HAL_RCC_OscConfig+0xd4>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10c      	bne.n	8004900 <HAL_RCC_OscConfig+0x98>
 80048e6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a7a      	ldr	r2, [pc, #488]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80048ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	4b78      	ldr	r3, [pc, #480]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a77      	ldr	r2, [pc, #476]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80048f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e01d      	b.n	800493c <HAL_RCC_OscConfig+0xd4>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0xbc>
 800490a:	4b72      	ldr	r3, [pc, #456]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a71      	ldr	r2, [pc, #452]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 8004910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b6f      	ldr	r3, [pc, #444]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a6e      	ldr	r2, [pc, #440]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e00b      	b.n	800493c <HAL_RCC_OscConfig+0xd4>
 8004924:	4b6b      	ldr	r3, [pc, #428]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a6a      	ldr	r2, [pc, #424]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 800492a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	4b68      	ldr	r3, [pc, #416]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a67      	ldr	r2, [pc, #412]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 8004936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800493a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d013      	beq.n	800496c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004944:	f7fd fa42 	bl	8001dcc <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800494c:	f7fd fa3e 	bl	8001dcc <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	@ 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e200      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0xe4>
 800496a:	e014      	b.n	8004996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fd fa2e 	bl	8001dcc <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004974:	f7fd fa2a 	bl	8001dcc <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	@ 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e1ec      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004986:	4b53      	ldr	r3, [pc, #332]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x10c>
 8004992:	e000      	b.n	8004996 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d063      	beq.n	8004a6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049a2:	4b4c      	ldr	r3, [pc, #304]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049ae:	4b49      	ldr	r3, [pc, #292]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d11c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x18c>
 80049ba:	4b46      	ldr	r3, [pc, #280]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d116      	bne.n	80049f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c6:	4b43      	ldr	r3, [pc, #268]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_RCC_OscConfig+0x176>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d001      	beq.n	80049de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e1c0      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049de:	4b3d      	ldr	r3, [pc, #244]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4939      	ldr	r1, [pc, #228]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f2:	e03a      	b.n	8004a6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d020      	beq.n	8004a3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049fc:	4b36      	ldr	r3, [pc, #216]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a02:	f7fd f9e3 	bl	8001dcc <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a0a:	f7fd f9df 	bl	8001dcc <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e1a1      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4927      	ldr	r1, [pc, #156]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	600b      	str	r3, [r1, #0]
 8004a3c:	e015      	b.n	8004a6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a3e:	4b26      	ldr	r3, [pc, #152]	@ (8004ad8 <HAL_RCC_OscConfig+0x270>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a44:	f7fd f9c2 	bl	8001dcc <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a4c:	f7fd f9be 	bl	8001dcc <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e180      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d03a      	beq.n	8004aec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d019      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a7e:	4b17      	ldr	r3, [pc, #92]	@ (8004adc <HAL_RCC_OscConfig+0x274>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a84:	f7fd f9a2 	bl	8001dcc <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a8c:	f7fd f99e 	bl	8001dcc <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e160      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad4 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004aaa:	2001      	movs	r0, #1
 8004aac:	f000 fafe 	bl	80050ac <RCC_Delay>
 8004ab0:	e01c      	b.n	8004aec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8004adc <HAL_RCC_OscConfig+0x274>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab8:	f7fd f988 	bl	8001dcc <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004abe:	e00f      	b.n	8004ae0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac0:	f7fd f984 	bl	8001dcc <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d908      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e146      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	42420000 	.word	0x42420000
 8004adc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae0:	4b92      	ldr	r3, [pc, #584]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e9      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 80a6 	beq.w	8004c46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004afa:	2300      	movs	r3, #0
 8004afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004afe:	4b8b      	ldr	r3, [pc, #556]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10d      	bne.n	8004b26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0a:	4b88      	ldr	r3, [pc, #544]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	4a87      	ldr	r2, [pc, #540]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b14:	61d3      	str	r3, [r2, #28]
 8004b16:	4b85      	ldr	r3, [pc, #532]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1e:	60bb      	str	r3, [r7, #8]
 8004b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b22:	2301      	movs	r3, #1
 8004b24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b26:	4b82      	ldr	r3, [pc, #520]	@ (8004d30 <HAL_RCC_OscConfig+0x4c8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d118      	bne.n	8004b64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b32:	4b7f      	ldr	r3, [pc, #508]	@ (8004d30 <HAL_RCC_OscConfig+0x4c8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a7e      	ldr	r2, [pc, #504]	@ (8004d30 <HAL_RCC_OscConfig+0x4c8>)
 8004b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b3e:	f7fd f945 	bl	8001dcc <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b46:	f7fd f941 	bl	8001dcc <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b64      	cmp	r3, #100	@ 0x64
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e103      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b58:	4b75      	ldr	r3, [pc, #468]	@ (8004d30 <HAL_RCC_OscConfig+0x4c8>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0f0      	beq.n	8004b46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d106      	bne.n	8004b7a <HAL_RCC_OscConfig+0x312>
 8004b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	4a6e      	ldr	r2, [pc, #440]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	6213      	str	r3, [r2, #32]
 8004b78:	e02d      	b.n	8004bd6 <HAL_RCC_OscConfig+0x36e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCC_OscConfig+0x334>
 8004b82:	4b6a      	ldr	r3, [pc, #424]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	4a69      	ldr	r2, [pc, #420]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	6213      	str	r3, [r2, #32]
 8004b8e:	4b67      	ldr	r3, [pc, #412]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	4a66      	ldr	r2, [pc, #408]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004b94:	f023 0304 	bic.w	r3, r3, #4
 8004b98:	6213      	str	r3, [r2, #32]
 8004b9a:	e01c      	b.n	8004bd6 <HAL_RCC_OscConfig+0x36e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b05      	cmp	r3, #5
 8004ba2:	d10c      	bne.n	8004bbe <HAL_RCC_OscConfig+0x356>
 8004ba4:	4b61      	ldr	r3, [pc, #388]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	4a60      	ldr	r2, [pc, #384]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004baa:	f043 0304 	orr.w	r3, r3, #4
 8004bae:	6213      	str	r3, [r2, #32]
 8004bb0:	4b5e      	ldr	r3, [pc, #376]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	4a5d      	ldr	r2, [pc, #372]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	6213      	str	r3, [r2, #32]
 8004bbc:	e00b      	b.n	8004bd6 <HAL_RCC_OscConfig+0x36e>
 8004bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	4a5a      	ldr	r2, [pc, #360]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	6213      	str	r3, [r2, #32]
 8004bca:	4b58      	ldr	r3, [pc, #352]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	4a57      	ldr	r2, [pc, #348]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004bd0:	f023 0304 	bic.w	r3, r3, #4
 8004bd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d015      	beq.n	8004c0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bde:	f7fd f8f5 	bl	8001dcc <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be4:	e00a      	b.n	8004bfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be6:	f7fd f8f1 	bl	8001dcc <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e0b1      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0ee      	beq.n	8004be6 <HAL_RCC_OscConfig+0x37e>
 8004c08:	e014      	b.n	8004c34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0a:	f7fd f8df 	bl	8001dcc <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c10:	e00a      	b.n	8004c28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c12:	f7fd f8db 	bl	8001dcc <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e09b      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c28:	4b40      	ldr	r3, [pc, #256]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1ee      	bne.n	8004c12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d105      	bne.n	8004c46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	4a3b      	ldr	r2, [pc, #236]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8087 	beq.w	8004d5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c50:	4b36      	ldr	r3, [pc, #216]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d061      	beq.n	8004d20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d146      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c64:	4b33      	ldr	r3, [pc, #204]	@ (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6a:	f7fd f8af 	bl	8001dcc <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c72:	f7fd f8ab 	bl	8001dcc <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e06d      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c84:	4b29      	ldr	r3, [pc, #164]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f0      	bne.n	8004c72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c98:	d108      	bne.n	8004cac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c9a:	4b24      	ldr	r3, [pc, #144]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	4921      	ldr	r1, [pc, #132]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cac:	4b1f      	ldr	r3, [pc, #124]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a19      	ldr	r1, [r3, #32]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	430b      	orrs	r3, r1
 8004cbe:	491b      	ldr	r1, [pc, #108]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cca:	f7fd f87f 	bl	8001dcc <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd2:	f7fd f87b 	bl	8001dcc <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e03d      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ce4:	4b11      	ldr	r3, [pc, #68]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0f0      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x46a>
 8004cf0:	e035      	b.n	8004d5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf2:	4b10      	ldr	r3, [pc, #64]	@ (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf8:	f7fd f868 	bl	8001dcc <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d00:	f7fd f864 	bl	8001dcc <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e026      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d12:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <HAL_RCC_OscConfig+0x4c4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x498>
 8004d1e:	e01e      	b.n	8004d5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d107      	bne.n	8004d38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e019      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	40007000 	.word	0x40007000
 8004d34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d38:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <HAL_RCC_OscConfig+0x500>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d106      	bne.n	8004d5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d001      	beq.n	8004d5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40021000 	.word	0x40021000

08004d6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0d0      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d80:	4b6a      	ldr	r3, [pc, #424]	@ (8004f2c <HAL_RCC_ClockConfig+0x1c0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d910      	bls.n	8004db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b67      	ldr	r3, [pc, #412]	@ (8004f2c <HAL_RCC_ClockConfig+0x1c0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 0207 	bic.w	r2, r3, #7
 8004d96:	4965      	ldr	r1, [pc, #404]	@ (8004f2c <HAL_RCC_ClockConfig+0x1c0>)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b63      	ldr	r3, [pc, #396]	@ (8004f2c <HAL_RCC_ClockConfig+0x1c0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0b8      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d020      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dc8:	4b59      	ldr	r3, [pc, #356]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	4a58      	ldr	r2, [pc, #352]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004dce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004dd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004de0:	4b53      	ldr	r3, [pc, #332]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	4a52      	ldr	r2, [pc, #328]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004de6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004dea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dec:	4b50      	ldr	r3, [pc, #320]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	494d      	ldr	r1, [pc, #308]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d040      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d107      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e12:	4b47      	ldr	r3, [pc, #284]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d115      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e07f      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d107      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2a:	4b41      	ldr	r3, [pc, #260]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e073      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e06b      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e4a:	4b39      	ldr	r3, [pc, #228]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f023 0203 	bic.w	r2, r3, #3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4936      	ldr	r1, [pc, #216]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e5c:	f7fc ffb6 	bl	8001dcc <HAL_GetTick>
 8004e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e62:	e00a      	b.n	8004e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e64:	f7fc ffb2 	bl	8001dcc <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e053      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f003 020c 	and.w	r2, r3, #12
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d1eb      	bne.n	8004e64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e8c:	4b27      	ldr	r3, [pc, #156]	@ (8004f2c <HAL_RCC_ClockConfig+0x1c0>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d210      	bcs.n	8004ebc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9a:	4b24      	ldr	r3, [pc, #144]	@ (8004f2c <HAL_RCC_ClockConfig+0x1c0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f023 0207 	bic.w	r2, r3, #7
 8004ea2:	4922      	ldr	r1, [pc, #136]	@ (8004f2c <HAL_RCC_ClockConfig+0x1c0>)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eaa:	4b20      	ldr	r3, [pc, #128]	@ (8004f2c <HAL_RCC_ClockConfig+0x1c0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e032      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec8:	4b19      	ldr	r3, [pc, #100]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4916      	ldr	r1, [pc, #88]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ee6:	4b12      	ldr	r3, [pc, #72]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	490e      	ldr	r1, [pc, #56]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004efa:	f000 f821 	bl	8004f40 <HAL_RCC_GetSysClockFreq>
 8004efe:	4602      	mov	r2, r0
 8004f00:	4b0b      	ldr	r3, [pc, #44]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	490a      	ldr	r1, [pc, #40]	@ (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004f0c:	5ccb      	ldrb	r3, [r1, r3]
 8004f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f12:	4a09      	ldr	r2, [pc, #36]	@ (8004f38 <HAL_RCC_ClockConfig+0x1cc>)
 8004f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f16:	4b09      	ldr	r3, [pc, #36]	@ (8004f3c <HAL_RCC_ClockConfig+0x1d0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fc fe12 	bl	8001b44 <HAL_InitTick>

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40022000 	.word	0x40022000
 8004f30:	40021000 	.word	0x40021000
 8004f34:	080099fc 	.word	0x080099fc
 8004f38:	20000008 	.word	0x20000008
 8004f3c:	2000000c 	.word	0x2000000c

08004f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d002      	beq.n	8004f70 <HAL_RCC_GetSysClockFreq+0x30>
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d003      	beq.n	8004f76 <HAL_RCC_GetSysClockFreq+0x36>
 8004f6e:	e027      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f70:	4b19      	ldr	r3, [pc, #100]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f72:	613b      	str	r3, [r7, #16]
      break;
 8004f74:	e027      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	0c9b      	lsrs	r3, r3, #18
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	4a17      	ldr	r2, [pc, #92]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f80:	5cd3      	ldrb	r3, [r2, r3]
 8004f82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d010      	beq.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f8e:	4b11      	ldr	r3, [pc, #68]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	0c5b      	lsrs	r3, r3, #17
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	4a11      	ldr	r2, [pc, #68]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f9a:	5cd3      	ldrb	r3, [r2, r3]
 8004f9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fa2:	fb03 f202 	mul.w	r2, r3, r2
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	e004      	b.n	8004fba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fb4:	fb02 f303 	mul.w	r3, r2, r3
 8004fb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	613b      	str	r3, [r7, #16]
      break;
 8004fbe:	e002      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fc0:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fc2:	613b      	str	r3, [r7, #16]
      break;
 8004fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc6:	693b      	ldr	r3, [r7, #16]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	007a1200 	.word	0x007a1200
 8004fdc:	08009a14 	.word	0x08009a14
 8004fe0:	08009a24 	.word	0x08009a24
 8004fe4:	003d0900 	.word	0x003d0900

08004fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fec:	4b02      	ldr	r3, [pc, #8]	@ (8004ff8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004fee:	681b      	ldr	r3, [r3, #0]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr
 8004ff8:	20000008 	.word	0x20000008

08004ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005000:	f7ff fff2 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b05      	ldr	r3, [pc, #20]	@ (800501c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	0a1b      	lsrs	r3, r3, #8
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4903      	ldr	r1, [pc, #12]	@ (8005020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40021000 	.word	0x40021000
 8005020:	08009a0c 	.word	0x08009a0c

08005024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005028:	f7ff ffde 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	0adb      	lsrs	r3, r3, #11
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4903      	ldr	r1, [pc, #12]	@ (8005048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40021000 	.word	0x40021000
 8005048:	08009a0c 	.word	0x08009a0c

0800504c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	220f      	movs	r2, #15
 800505a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800505c:	4b11      	ldr	r3, [pc, #68]	@ (80050a4 <HAL_RCC_GetClockConfig+0x58>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 0203 	and.w	r2, r3, #3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005068:	4b0e      	ldr	r3, [pc, #56]	@ (80050a4 <HAL_RCC_GetClockConfig+0x58>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005074:	4b0b      	ldr	r3, [pc, #44]	@ (80050a4 <HAL_RCC_GetClockConfig+0x58>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005080:	4b08      	ldr	r3, [pc, #32]	@ (80050a4 <HAL_RCC_GetClockConfig+0x58>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	08db      	lsrs	r3, r3, #3
 8005086:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800508e:	4b06      	ldr	r3, [pc, #24]	@ (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0207 	and.w	r2, r3, #7
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr
 80050a4:	40021000 	.word	0x40021000
 80050a8:	40022000 	.word	0x40022000

080050ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050b4:	4b0a      	ldr	r3, [pc, #40]	@ (80050e0 <RCC_Delay+0x34>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a0a      	ldr	r2, [pc, #40]	@ (80050e4 <RCC_Delay+0x38>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	0a5b      	lsrs	r3, r3, #9
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050c8:	bf00      	nop
  }
  while (Delay --);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1e5a      	subs	r2, r3, #1
 80050ce:	60fa      	str	r2, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f9      	bne.n	80050c8 <RCC_Delay+0x1c>
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	20000008 	.word	0x20000008
 80050e4:	10624dd3 	.word	0x10624dd3

080050e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e041      	b.n	800517e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f839 	bl	8005186 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3304      	adds	r3, #4
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f000 fc48 	bl	80059bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d001      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e03a      	b.n	8005226 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a18      	ldr	r2, [pc, #96]	@ (8005230 <HAL_TIM_Base_Start_IT+0x98>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00e      	beq.n	80051f0 <HAL_TIM_Base_Start_IT+0x58>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051da:	d009      	beq.n	80051f0 <HAL_TIM_Base_Start_IT+0x58>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a14      	ldr	r2, [pc, #80]	@ (8005234 <HAL_TIM_Base_Start_IT+0x9c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d004      	beq.n	80051f0 <HAL_TIM_Base_Start_IT+0x58>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a13      	ldr	r2, [pc, #76]	@ (8005238 <HAL_TIM_Base_Start_IT+0xa0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d111      	bne.n	8005214 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b06      	cmp	r3, #6
 8005200:	d010      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005212:	e007      	b.n	8005224 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800

0800523c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e041      	b.n	80052d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fc fbd2 	bl	8001a0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3304      	adds	r3, #4
 8005278:	4619      	mov	r1, r3
 800527a:	4610      	mov	r0, r2
 800527c:	f000 fb9e 	bl	80059bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d109      	bne.n	8005304 <HAL_TIM_PWM_Start_IT+0x28>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	bf14      	ite	ne
 80052fc:	2301      	movne	r3, #1
 80052fe:	2300      	moveq	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	e022      	b.n	800534a <HAL_TIM_PWM_Start_IT+0x6e>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b04      	cmp	r3, #4
 8005308:	d109      	bne.n	800531e <HAL_TIM_PWM_Start_IT+0x42>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b01      	cmp	r3, #1
 8005314:	bf14      	ite	ne
 8005316:	2301      	movne	r3, #1
 8005318:	2300      	moveq	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	e015      	b.n	800534a <HAL_TIM_PWM_Start_IT+0x6e>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d109      	bne.n	8005338 <HAL_TIM_PWM_Start_IT+0x5c>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	bf14      	ite	ne
 8005330:	2301      	movne	r3, #1
 8005332:	2300      	moveq	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	e008      	b.n	800534a <HAL_TIM_PWM_Start_IT+0x6e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	bf14      	ite	ne
 8005344:	2301      	movne	r3, #1
 8005346:	2300      	moveq	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e0a9      	b.n	80054a6 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <HAL_TIM_PWM_Start_IT+0x86>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005360:	e013      	b.n	800538a <HAL_TIM_PWM_Start_IT+0xae>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b04      	cmp	r3, #4
 8005366:	d104      	bne.n	8005372 <HAL_TIM_PWM_Start_IT+0x96>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005370:	e00b      	b.n	800538a <HAL_TIM_PWM_Start_IT+0xae>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d104      	bne.n	8005382 <HAL_TIM_PWM_Start_IT+0xa6>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005380:	e003      	b.n	800538a <HAL_TIM_PWM_Start_IT+0xae>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2202      	movs	r2, #2
 8005386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b0c      	cmp	r3, #12
 800538e:	d841      	bhi.n	8005414 <HAL_TIM_PWM_Start_IT+0x138>
 8005390:	a201      	add	r2, pc, #4	@ (adr r2, 8005398 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005396:	bf00      	nop
 8005398:	080053cd 	.word	0x080053cd
 800539c:	08005415 	.word	0x08005415
 80053a0:	08005415 	.word	0x08005415
 80053a4:	08005415 	.word	0x08005415
 80053a8:	080053df 	.word	0x080053df
 80053ac:	08005415 	.word	0x08005415
 80053b0:	08005415 	.word	0x08005415
 80053b4:	08005415 	.word	0x08005415
 80053b8:	080053f1 	.word	0x080053f1
 80053bc:	08005415 	.word	0x08005415
 80053c0:	08005415 	.word	0x08005415
 80053c4:	08005415 	.word	0x08005415
 80053c8:	08005403 	.word	0x08005403
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0202 	orr.w	r2, r2, #2
 80053da:	60da      	str	r2, [r3, #12]
      break;
 80053dc:	e01d      	b.n	800541a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0204 	orr.w	r2, r2, #4
 80053ec:	60da      	str	r2, [r3, #12]
      break;
 80053ee:	e014      	b.n	800541a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0208 	orr.w	r2, r2, #8
 80053fe:	60da      	str	r2, [r3, #12]
      break;
 8005400:	e00b      	b.n	800541a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0210 	orr.w	r2, r2, #16
 8005410:	60da      	str	r2, [r3, #12]
      break;
 8005412:	e002      	b.n	800541a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	73fb      	strb	r3, [r7, #15]
      break;
 8005418:	bf00      	nop
  }

  if (status == HAL_OK)
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d141      	bne.n	80054a4 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2201      	movs	r2, #1
 8005426:	6839      	ldr	r1, [r7, #0]
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fcbd 	bl	8005da8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1f      	ldr	r2, [pc, #124]	@ (80054b0 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d107      	bne.n	8005448 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005446:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a18      	ldr	r2, [pc, #96]	@ (80054b0 <HAL_TIM_PWM_Start_IT+0x1d4>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00e      	beq.n	8005470 <HAL_TIM_PWM_Start_IT+0x194>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800545a:	d009      	beq.n	8005470 <HAL_TIM_PWM_Start_IT+0x194>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a14      	ldr	r2, [pc, #80]	@ (80054b4 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d004      	beq.n	8005470 <HAL_TIM_PWM_Start_IT+0x194>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a13      	ldr	r2, [pc, #76]	@ (80054b8 <HAL_TIM_PWM_Start_IT+0x1dc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d111      	bne.n	8005494 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b06      	cmp	r3, #6
 8005480:	d010      	beq.n	80054a4 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0201 	orr.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005492:	e007      	b.n	80054a4 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40012c00 	.word	0x40012c00
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800

080054bc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b0c      	cmp	r3, #12
 80054ce:	d841      	bhi.n	8005554 <HAL_TIM_PWM_Stop_IT+0x98>
 80054d0:	a201      	add	r2, pc, #4	@ (adr r2, 80054d8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	0800550d 	.word	0x0800550d
 80054dc:	08005555 	.word	0x08005555
 80054e0:	08005555 	.word	0x08005555
 80054e4:	08005555 	.word	0x08005555
 80054e8:	0800551f 	.word	0x0800551f
 80054ec:	08005555 	.word	0x08005555
 80054f0:	08005555 	.word	0x08005555
 80054f4:	08005555 	.word	0x08005555
 80054f8:	08005531 	.word	0x08005531
 80054fc:	08005555 	.word	0x08005555
 8005500:	08005555 	.word	0x08005555
 8005504:	08005555 	.word	0x08005555
 8005508:	08005543 	.word	0x08005543
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0202 	bic.w	r2, r2, #2
 800551a:	60da      	str	r2, [r3, #12]
      break;
 800551c:	e01d      	b.n	800555a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0204 	bic.w	r2, r2, #4
 800552c:	60da      	str	r2, [r3, #12]
      break;
 800552e:	e014      	b.n	800555a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0208 	bic.w	r2, r2, #8
 800553e:	60da      	str	r2, [r3, #12]
      break;
 8005540:	e00b      	b.n	800555a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0210 	bic.w	r2, r2, #16
 8005550:	60da      	str	r2, [r3, #12]
      break;
 8005552:	e002      	b.n	800555a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
      break;
 8005558:	bf00      	nop
  }

  if (status == HAL_OK)
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d157      	bne.n	8005610 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2200      	movs	r2, #0
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fc1d 	bl	8005da8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2a      	ldr	r2, [pc, #168]	@ (800561c <HAL_TIM_PWM_Stop_IT+0x160>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d117      	bne.n	80055a8 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6a1a      	ldr	r2, [r3, #32]
 800557e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005582:	4013      	ands	r3, r2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10f      	bne.n	80055a8 <HAL_TIM_PWM_Stop_IT+0xec>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6a1a      	ldr	r2, [r3, #32]
 800558e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005592:	4013      	ands	r3, r2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d107      	bne.n	80055a8 <HAL_TIM_PWM_Stop_IT+0xec>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6a1a      	ldr	r2, [r3, #32]
 80055ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10f      	bne.n	80055d8 <HAL_TIM_PWM_Stop_IT+0x11c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6a1a      	ldr	r2, [r3, #32]
 80055be:	f240 4344 	movw	r3, #1092	@ 0x444
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d107      	bne.n	80055d8 <HAL_TIM_PWM_Stop_IT+0x11c>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0201 	bic.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d104      	bne.n	80055e8 <HAL_TIM_PWM_Stop_IT+0x12c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055e6:	e013      	b.n	8005610 <HAL_TIM_PWM_Stop_IT+0x154>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d104      	bne.n	80055f8 <HAL_TIM_PWM_Stop_IT+0x13c>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055f6:	e00b      	b.n	8005610 <HAL_TIM_PWM_Stop_IT+0x154>
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d104      	bne.n	8005608 <HAL_TIM_PWM_Stop_IT+0x14c>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005606:	e003      	b.n	8005610 <HAL_TIM_PWM_Stop_IT+0x154>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8005610:	7bfb      	ldrb	r3, [r7, #15]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40012c00 	.word	0x40012c00

08005620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d020      	beq.n	8005684 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01b      	beq.n	8005684 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0202 	mvn.w	r2, #2
 8005654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f993 	bl	8005996 <HAL_TIM_IC_CaptureCallback>
 8005670:	e005      	b.n	800567e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f986 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f003 f829 	bl	80086d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d020      	beq.n	80056d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01b      	beq.n	80056d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0204 	mvn.w	r2, #4
 80056a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2202      	movs	r2, #2
 80056a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f96d 	bl	8005996 <HAL_TIM_IC_CaptureCallback>
 80056bc:	e005      	b.n	80056ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f960 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f003 f803 	bl	80086d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d020      	beq.n	800571c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01b      	beq.n	800571c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0208 	mvn.w	r2, #8
 80056ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2204      	movs	r2, #4
 80056f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f947 	bl	8005996 <HAL_TIM_IC_CaptureCallback>
 8005708:	e005      	b.n	8005716 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f93a 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f002 ffdd 	bl	80086d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	2b00      	cmp	r3, #0
 8005724:	d020      	beq.n	8005768 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01b      	beq.n	8005768 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0210 	mvn.w	r2, #16
 8005738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2208      	movs	r2, #8
 800573e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f921 	bl	8005996 <HAL_TIM_IC_CaptureCallback>
 8005754:	e005      	b.n	8005762 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f914 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f002 ffb7 	bl	80086d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00c      	beq.n	800578c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d007      	beq.n	800578c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0201 	mvn.w	r2, #1
 8005784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fc f83a 	bl	8001800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00c      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579c:	2b00      	cmp	r3, #0
 800579e:	d007      	beq.n	80057b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80057a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fb87 	bl	8005ebe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00c      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d007      	beq.n	80057d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f8ea 	bl	80059a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00c      	beq.n	80057f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0220 	mvn.w	r2, #32
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fb5a 	bl	8005eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800581a:	2302      	movs	r3, #2
 800581c:	e0ae      	b.n	800597c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b0c      	cmp	r3, #12
 800582a:	f200 809f 	bhi.w	800596c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800582e:	a201      	add	r2, pc, #4	@ (adr r2, 8005834 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	08005869 	.word	0x08005869
 8005838:	0800596d 	.word	0x0800596d
 800583c:	0800596d 	.word	0x0800596d
 8005840:	0800596d 	.word	0x0800596d
 8005844:	080058a9 	.word	0x080058a9
 8005848:	0800596d 	.word	0x0800596d
 800584c:	0800596d 	.word	0x0800596d
 8005850:	0800596d 	.word	0x0800596d
 8005854:	080058eb 	.word	0x080058eb
 8005858:	0800596d 	.word	0x0800596d
 800585c:	0800596d 	.word	0x0800596d
 8005860:	0800596d 	.word	0x0800596d
 8005864:	0800592b 	.word	0x0800592b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	4618      	mov	r0, r3
 8005870:	f000 f912 	bl	8005a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0208 	orr.w	r2, r2, #8
 8005882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0204 	bic.w	r2, r2, #4
 8005892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6999      	ldr	r1, [r3, #24]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	619a      	str	r2, [r3, #24]
      break;
 80058a6:	e064      	b.n	8005972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 f958 	bl	8005b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6999      	ldr	r1, [r3, #24]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	021a      	lsls	r2, r3, #8
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	619a      	str	r2, [r3, #24]
      break;
 80058e8:	e043      	b.n	8005972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68b9      	ldr	r1, [r7, #8]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 f9a1 	bl	8005c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f042 0208 	orr.w	r2, r2, #8
 8005904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69da      	ldr	r2, [r3, #28]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0204 	bic.w	r2, r2, #4
 8005914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69d9      	ldr	r1, [r3, #28]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	61da      	str	r2, [r3, #28]
      break;
 8005928:	e023      	b.n	8005972 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	4618      	mov	r0, r3
 8005932:	f000 f9eb 	bl	8005d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69da      	ldr	r2, [r3, #28]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69d9      	ldr	r1, [r3, #28]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	021a      	lsls	r2, r3, #8
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	61da      	str	r2, [r3, #28]
      break;
 800596a:	e002      	b.n	8005972 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	75fb      	strb	r3, [r7, #23]
      break;
 8005970:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800597a:	7dfb      	ldrb	r3, [r7, #23]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr

08005996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bc80      	pop	{r7}
 80059b8:	4770      	bx	lr
	...

080059bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a2f      	ldr	r2, [pc, #188]	@ (8005a8c <TIM_Base_SetConfig+0xd0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00b      	beq.n	80059ec <TIM_Base_SetConfig+0x30>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059da:	d007      	beq.n	80059ec <TIM_Base_SetConfig+0x30>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a2c      	ldr	r2, [pc, #176]	@ (8005a90 <TIM_Base_SetConfig+0xd4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d003      	beq.n	80059ec <TIM_Base_SetConfig+0x30>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005a94 <TIM_Base_SetConfig+0xd8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d108      	bne.n	80059fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a22      	ldr	r2, [pc, #136]	@ (8005a8c <TIM_Base_SetConfig+0xd0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00b      	beq.n	8005a1e <TIM_Base_SetConfig+0x62>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a0c:	d007      	beq.n	8005a1e <TIM_Base_SetConfig+0x62>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a1f      	ldr	r2, [pc, #124]	@ (8005a90 <TIM_Base_SetConfig+0xd4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_Base_SetConfig+0x62>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a1e      	ldr	r2, [pc, #120]	@ (8005a94 <TIM_Base_SetConfig+0xd8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d108      	bne.n	8005a30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a0d      	ldr	r2, [pc, #52]	@ (8005a8c <TIM_Base_SetConfig+0xd0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d103      	bne.n	8005a64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d005      	beq.n	8005a82 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f023 0201 	bic.w	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	611a      	str	r2, [r3, #16]
  }
}
 8005a82:	bf00      	nop
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr
 8005a8c:	40012c00 	.word	0x40012c00
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800

08005a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f023 0201 	bic.w	r2, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f023 0302 	bic.w	r3, r3, #2
 8005ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a1c      	ldr	r2, [pc, #112]	@ (8005b60 <TIM_OC1_SetConfig+0xc8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d10c      	bne.n	8005b0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0308 	bic.w	r3, r3, #8
 8005afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f023 0304 	bic.w	r3, r3, #4
 8005b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a13      	ldr	r2, [pc, #76]	@ (8005b60 <TIM_OC1_SetConfig+0xc8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d111      	bne.n	8005b3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	621a      	str	r2, [r3, #32]
}
 8005b54:	bf00      	nop
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40012c00 	.word	0x40012c00

08005b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	f023 0210 	bic.w	r2, r3, #16
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f023 0320 	bic.w	r3, r3, #32
 8005bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8005c34 <TIM_OC2_SetConfig+0xd0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d10d      	bne.n	8005be0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a14      	ldr	r2, [pc, #80]	@ (8005c34 <TIM_OC2_SetConfig+0xd0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d113      	bne.n	8005c10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr
 8005c34:	40012c00 	.word	0x40012c00

08005c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 0303 	bic.w	r3, r3, #3
 8005c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a1d      	ldr	r2, [pc, #116]	@ (8005d08 <TIM_OC3_SetConfig+0xd0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d10d      	bne.n	8005cb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	021b      	lsls	r3, r3, #8
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a14      	ldr	r2, [pc, #80]	@ (8005d08 <TIM_OC3_SetConfig+0xd0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d113      	bne.n	8005ce2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	621a      	str	r2, [r3, #32]
}
 8005cfc:	bf00      	nop
 8005cfe:	371c      	adds	r7, #28
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40012c00 	.word	0x40012c00

08005d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	021b      	lsls	r3, r3, #8
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	031b      	lsls	r3, r3, #12
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a0f      	ldr	r2, [pc, #60]	@ (8005da4 <TIM_OC4_SetConfig+0x98>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d109      	bne.n	8005d80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	019b      	lsls	r3, r3, #6
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	621a      	str	r2, [r3, #32]
}
 8005d9a:	bf00      	nop
 8005d9c:	371c      	adds	r7, #28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bc80      	pop	{r7}
 8005da2:	4770      	bx	lr
 8005da4:	40012c00 	.word	0x40012c00

08005da8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f003 031f 	and.w	r3, r3, #31
 8005dba:	2201      	movs	r2, #1
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6a1a      	ldr	r2, [r3, #32]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	401a      	ands	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1a      	ldr	r2, [r3, #32]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8005de0:	431a      	orrs	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bc80      	pop	{r7}
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e046      	b.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a16      	ldr	r2, [pc, #88]	@ (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00e      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e54:	d009      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a12      	ldr	r2, [pc, #72]	@ (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d004      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a10      	ldr	r2, [pc, #64]	@ (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d10c      	bne.n	8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bc80      	pop	{r7}
 8005e9e:	4770      	bx	lr
 8005ea0:	40012c00 	.word	0x40012c00
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800

08005eac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bc80      	pop	{r7}
 8005ebc:	4770      	bx	lr

08005ebe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr

08005ed0 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e04a      	b.n	8005f78 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fb fddc 	bl	8001ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2224      	movs	r2, #36	@ 0x24
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fe29 	bl	8006b6c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	695a      	ldr	r2, [r3, #20]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8005f38:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	695a      	ldr	r2, [r3, #20]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0208 	orr.w	r2, r2, #8
 8005f48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	@ 0x28
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d175      	bne.n	800608c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <HAL_UART_Transmit+0x2c>
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e06e      	b.n	800608e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2221      	movs	r2, #33	@ 0x21
 8005fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fbe:	f7fb ff05 	bl	8001dcc <HAL_GetTick>
 8005fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	88fa      	ldrh	r2, [r7, #6]
 8005fc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	88fa      	ldrh	r2, [r7, #6]
 8005fce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd8:	d108      	bne.n	8005fec <HAL_UART_Transmit+0x6c>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d104      	bne.n	8005fec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	e003      	b.n	8005ff4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ff4:	e02e      	b.n	8006054 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2180      	movs	r1, #128	@ 0x80
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fb85 	bl	8006710 <UART_WaitOnFlagUntilTimeout>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e03a      	b.n	800608e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10b      	bne.n	8006036 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800602c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	3302      	adds	r3, #2
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	e007      	b.n	8006046 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	781a      	ldrb	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	3301      	adds	r3, #1
 8006044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1cb      	bne.n	8005ff6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2200      	movs	r2, #0
 8006066:	2140      	movs	r1, #64	@ 0x40
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 fb51 	bl	8006710 <UART_WaitOnFlagUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e006      	b.n	800608e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	e000      	b.n	800608e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800608c:	2302      	movs	r3, #2
  }
}
 800608e:	4618      	mov	r0, r3
 8006090:	3720      	adds	r7, #32
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b08c      	sub	sp, #48	@ 0x30
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	4613      	mov	r3, r2
 80060a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d14a      	bne.n	8006146 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80060b6:	88fb      	ldrh	r3, [r7, #6]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e043      	b.n	8006148 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80060cc:	88fb      	ldrh	r3, [r7, #6]
 80060ce:	461a      	mov	r2, r3
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fb75 	bl	80067c2 <UART_Start_Receive_IT>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80060de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d12c      	bne.n	8006140 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d125      	bne.n	800613a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ee:	2300      	movs	r3, #0
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	330c      	adds	r3, #12
 800610a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	617b      	str	r3, [r7, #20]
   return(result);
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f043 0310 	orr.w	r3, r3, #16
 800611a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	330c      	adds	r3, #12
 8006122:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006124:	627a      	str	r2, [r7, #36]	@ 0x24
 8006126:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6a39      	ldr	r1, [r7, #32]
 800612a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	61fb      	str	r3, [r7, #28]
   return(result);
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e5      	bne.n	8006104 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8006138:	e002      	b.n	8006140 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006140:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006144:	e000      	b.n	8006148 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006146:	2302      	movs	r3, #2
  }
}
 8006148:	4618      	mov	r0, r3
 800614a:	3730      	adds	r7, #48	@ 0x30
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b0ba      	sub	sp, #232	@ 0xe8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006176:	2300      	movs	r3, #0
 8006178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800617c:	2300      	movs	r3, #0
 800617e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800618e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10f      	bne.n	80061b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <HAL_UART_IRQHandler+0x66>
 80061a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fc1d 	bl	80069ee <UART_Receive_IT>
      return;
 80061b4:	e25b      	b.n	800666e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 80de 	beq.w	800637c <HAL_UART_IRQHandler+0x22c>
 80061c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 80d1 	beq.w	800637c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <HAL_UART_IRQHandler+0xae>
 80061e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f6:	f043 0201 	orr.w	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00b      	beq.n	8006222 <HAL_UART_IRQHandler+0xd2>
 800620a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800621a:	f043 0202 	orr.w	r2, r3, #2
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <HAL_UART_IRQHandler+0xf6>
 800622e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623e:	f043 0204 	orr.w	r2, r3, #4
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b00      	cmp	r3, #0
 8006250:	d011      	beq.n	8006276 <HAL_UART_IRQHandler+0x126>
 8006252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d105      	bne.n	800626a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800625e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800626e:	f043 0208 	orr.w	r2, r3, #8
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 81f2 	beq.w	8006664 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d008      	beq.n	800629e <HAL_UART_IRQHandler+0x14e>
 800628c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fba8 	bl	80069ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	bf14      	ite	ne
 80062ac:	2301      	movne	r3, #1
 80062ae:	2300      	moveq	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d103      	bne.n	80062ca <HAL_UART_IRQHandler+0x17a>
 80062c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d04f      	beq.n	800636a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fab2 	bl	8006834 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d041      	beq.n	8006362 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3314      	adds	r3, #20
 80062e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062ec:	e853 3f00 	ldrex	r3, [r3]
 80062f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80062f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3314      	adds	r3, #20
 8006306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800630a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800630e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1d9      	bne.n	80062de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d013      	beq.n	800635a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006336:	4a7e      	ldr	r2, [pc, #504]	@ (8006530 <HAL_UART_IRQHandler+0x3e0>)
 8006338:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800633e:	4618      	mov	r0, r3
 8006340:	f7fb fee8 	bl	8002114 <HAL_DMA_Abort_IT>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800634e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006354:	4610      	mov	r0, r2
 8006356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006358:	e00e      	b.n	8006378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f99c 	bl	8006698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006360:	e00a      	b.n	8006378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f998 	bl	8006698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006368:	e006      	b.n	8006378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f994 	bl	8006698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006376:	e175      	b.n	8006664 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006378:	bf00      	nop
    return;
 800637a:	e173      	b.n	8006664 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006380:	2b01      	cmp	r3, #1
 8006382:	f040 814f 	bne.w	8006624 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 8148 	beq.w	8006624 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 8141 	beq.w	8006624 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063a2:	2300      	movs	r3, #0
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	60bb      	str	r3, [r7, #8]
 80063b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 80b6 	beq.w	8006534 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8145 	beq.w	8006668 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063e6:	429a      	cmp	r2, r3
 80063e8:	f080 813e 	bcs.w	8006668 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	f000 8088 	beq.w	8006510 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	330c      	adds	r3, #12
 8006406:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800641a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800641e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	330c      	adds	r3, #12
 8006428:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800642c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006430:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006438:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800643c:	e841 2300 	strex	r3, r2, [r1]
 8006440:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006444:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1d9      	bne.n	8006400 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3314      	adds	r3, #20
 8006452:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800645c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800645e:	f023 0301 	bic.w	r3, r3, #1
 8006462:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3314      	adds	r3, #20
 800646c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006470:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006474:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006476:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006478:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006482:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e1      	bne.n	800644c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3314      	adds	r3, #20
 800648e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006492:	e853 3f00 	ldrex	r3, [r3]
 8006496:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800649a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800649e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3314      	adds	r3, #20
 80064a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80064ac:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e3      	bne.n	8006488 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	330c      	adds	r3, #12
 80064d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064e0:	f023 0310 	bic.w	r3, r3, #16
 80064e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	330c      	adds	r3, #12
 80064ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80064f2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80064f4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006500:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e3      	bne.n	80064ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800650a:	4618      	mov	r0, r3
 800650c:	f7fb fdc6 	bl	800209c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800651e:	b29b      	uxth	r3, r3
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	b29b      	uxth	r3, r3
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7fb fbee 	bl	8001d08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800652c:	e09c      	b.n	8006668 <HAL_UART_IRQHandler+0x518>
 800652e:	bf00      	nop
 8006530:	080068f9 	.word	0x080068f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800653c:	b29b      	uxth	r3, r3
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 808e 	beq.w	800666c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8089 	beq.w	800666c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	330c      	adds	r3, #12
 8006560:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800656a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800656c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006570:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	330c      	adds	r3, #12
 800657a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800657e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006580:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006582:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006586:	e841 2300 	strex	r3, r2, [r1]
 800658a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800658c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1e3      	bne.n	800655a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3314      	adds	r3, #20
 8006598:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	e853 3f00 	ldrex	r3, [r3]
 80065a0:	623b      	str	r3, [r7, #32]
   return(result);
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	f023 0301 	bic.w	r3, r3, #1
 80065a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3314      	adds	r3, #20
 80065b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80065b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80065b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e3      	bne.n	8006592 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0310 	bic.w	r3, r3, #16
 80065ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80065fc:	61fa      	str	r2, [r7, #28]
 80065fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	69b9      	ldr	r1, [r7, #24]
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	617b      	str	r3, [r7, #20]
   return(result);
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e3      	bne.n	80065d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006616:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7fb fb73 	bl	8001d08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006622:	e023      	b.n	800666c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800662c:	2b00      	cmp	r3, #0
 800662e:	d009      	beq.n	8006644 <HAL_UART_IRQHandler+0x4f4>
 8006630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f96f 	bl	8006920 <UART_Transmit_IT>
    return;
 8006642:	e014      	b.n	800666e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00e      	beq.n	800666e <HAL_UART_IRQHandler+0x51e>
 8006650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d008      	beq.n	800666e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f9ae 	bl	80069be <UART_EndTransmit_IT>
    return;
 8006662:	e004      	b.n	800666e <HAL_UART_IRQHandler+0x51e>
    return;
 8006664:	bf00      	nop
 8006666:	e002      	b.n	800666e <HAL_UART_IRQHandler+0x51e>
      return;
 8006668:	bf00      	nop
 800666a:	e000      	b.n	800666e <HAL_UART_IRQHandler+0x51e>
      return;
 800666c:	bf00      	nop
  }
}
 800666e:	37e8      	adds	r7, #232	@ 0xe8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	bc80      	pop	{r7}
 8006684:	4770      	bx	lr

08006686 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr

08006698 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr

080066aa <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80066c0:	2302      	movs	r3, #2
 80066c2:	e020      	b.n	8006706 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2224      	movs	r2, #36	@ 0x24
 80066d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 030c 	bic.w	r3, r3, #12
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f043 0308 	orr.w	r3, r3, #8
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr

08006710 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	4613      	mov	r3, r2
 800671e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006720:	e03b      	b.n	800679a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006728:	d037      	beq.n	800679a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800672a:	f7fb fb4f 	bl	8001dcc <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	6a3a      	ldr	r2, [r7, #32]
 8006736:	429a      	cmp	r2, r3
 8006738:	d302      	bcc.n	8006740 <UART_WaitOnFlagUntilTimeout+0x30>
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e03a      	b.n	80067ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f003 0304 	and.w	r3, r3, #4
 800674e:	2b00      	cmp	r3, #0
 8006750:	d023      	beq.n	800679a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b80      	cmp	r3, #128	@ 0x80
 8006756:	d020      	beq.n	800679a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b40      	cmp	r3, #64	@ 0x40
 800675c:	d01d      	beq.n	800679a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0308 	and.w	r3, r3, #8
 8006768:	2b08      	cmp	r3, #8
 800676a:	d116      	bne.n	800679a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800676c:	2300      	movs	r3, #0
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 f856 	bl	8006834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2208      	movs	r2, #8
 800678c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e00f      	b.n	80067ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4013      	ands	r3, r2
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	bf0c      	ite	eq
 80067aa:	2301      	moveq	r3, #1
 80067ac:	2300      	movne	r3, #0
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	461a      	mov	r2, r3
 80067b2:	79fb      	ldrb	r3, [r7, #7]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d0b4      	beq.n	8006722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b085      	sub	sp, #20
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	4613      	mov	r3, r2
 80067ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	88fa      	ldrh	r2, [r7, #6]
 80067da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	88fa      	ldrh	r2, [r7, #6]
 80067e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2222      	movs	r2, #34	@ 0x22
 80067ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006806:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695a      	ldr	r2, [r3, #20]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0220 	orr.w	r2, r2, #32
 8006826:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr

08006834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006834:	b480      	push	{r7}
 8006836:	b095      	sub	sp, #84	@ 0x54
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	330c      	adds	r3, #12
 8006842:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006846:	e853 3f00 	ldrex	r3, [r3]
 800684a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	330c      	adds	r3, #12
 800685a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800685c:	643a      	str	r2, [r7, #64]	@ 0x40
 800685e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006860:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006862:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006864:	e841 2300 	strex	r3, r2, [r1]
 8006868:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800686a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e5      	bne.n	800683c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3314      	adds	r3, #20
 8006876:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f023 0301 	bic.w	r3, r3, #1
 8006886:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3314      	adds	r3, #20
 800688e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006890:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006892:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e5      	bne.n	8006870 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d119      	bne.n	80068e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f023 0310 	bic.w	r3, r3, #16
 80068c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	330c      	adds	r3, #12
 80068ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068cc:	61ba      	str	r2, [r7, #24]
 80068ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	6979      	ldr	r1, [r7, #20]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	613b      	str	r3, [r7, #16]
   return(result);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e5      	bne.n	80068ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80068ee:	bf00      	nop
 80068f0:	3754      	adds	r7, #84	@ 0x54
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr

080068f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006904:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff fec0 	bl	8006698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b21      	cmp	r3, #33	@ 0x21
 8006932:	d13e      	bne.n	80069b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800693c:	d114      	bne.n	8006968 <UART_Transmit_IT+0x48>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d110      	bne.n	8006968 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800695a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	1c9a      	adds	r2, r3, #2
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	621a      	str	r2, [r3, #32]
 8006966:	e008      	b.n	800697a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	1c59      	adds	r1, r3, #1
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	6211      	str	r1, [r2, #32]
 8006972:	781a      	ldrb	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800697e:	b29b      	uxth	r3, r3
 8006980:	3b01      	subs	r3, #1
 8006982:	b29b      	uxth	r3, r3
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	4619      	mov	r1, r3
 8006988:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10f      	bne.n	80069ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800699c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	e000      	b.n	80069b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069b2:	2302      	movs	r3, #2
  }
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr

080069be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7ff fe48 	bl	8006674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b08c      	sub	sp, #48	@ 0x30
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b22      	cmp	r3, #34	@ 0x22
 8006a00:	f040 80ae 	bne.w	8006b60 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a0c:	d117      	bne.n	8006a3e <UART_Receive_IT+0x50>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d113      	bne.n	8006a3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a36:	1c9a      	adds	r2, r3, #2
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a3c:	e026      	b.n	8006a8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a50:	d007      	beq.n	8006a62 <UART_Receive_IT+0x74>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10a      	bne.n	8006a70 <UART_Receive_IT+0x82>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d106      	bne.n	8006a70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	e008      	b.n	8006a82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	3b01      	subs	r3, #1
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d15d      	bne.n	8006b5c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0220 	bic.w	r2, r2, #32
 8006aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006abe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695a      	ldr	r2, [r3, #20]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0201 	bic.w	r2, r2, #1
 8006ace:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d135      	bne.n	8006b52 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	330c      	adds	r3, #12
 8006af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	613b      	str	r3, [r7, #16]
   return(result);
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f023 0310 	bic.w	r3, r3, #16
 8006b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b0c:	623a      	str	r2, [r7, #32]
 8006b0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	69f9      	ldr	r1, [r7, #28]
 8006b12:	6a3a      	ldr	r2, [r7, #32]
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e5      	bne.n	8006aec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0310 	and.w	r3, r3, #16
 8006b2a:	2b10      	cmp	r3, #16
 8006b2c:	d10a      	bne.n	8006b44 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fb f8dc 	bl	8001d08 <HAL_UARTEx_RxEventCallback>
 8006b50:	e002      	b.n	8006b58 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff fd97 	bl	8006686 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e002      	b.n	8006b62 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e000      	b.n	8006b62 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006b60:	2302      	movs	r3, #2
  }
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3730      	adds	r7, #48	@ 0x30
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006ba6:	f023 030c 	bic.w	r3, r3, #12
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6812      	ldr	r2, [r2, #0]
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a2c      	ldr	r2, [pc, #176]	@ (8006c80 <UART_SetConfig+0x114>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d103      	bne.n	8006bdc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006bd4:	f7fe fa26 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	e002      	b.n	8006be2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006bdc:	f7fe fa0e 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8006be0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009a      	lsls	r2, r3, #2
 8006bec:	441a      	add	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf8:	4a22      	ldr	r2, [pc, #136]	@ (8006c84 <UART_SetConfig+0x118>)
 8006bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	0119      	lsls	r1, r3, #4
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	009a      	lsls	r2, r3, #2
 8006c0c:	441a      	add	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c18:	4b1a      	ldr	r3, [pc, #104]	@ (8006c84 <UART_SetConfig+0x118>)
 8006c1a:	fba3 0302 	umull	r0, r3, r3, r2
 8006c1e:	095b      	lsrs	r3, r3, #5
 8006c20:	2064      	movs	r0, #100	@ 0x64
 8006c22:	fb00 f303 	mul.w	r3, r0, r3
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	3332      	adds	r3, #50	@ 0x32
 8006c2c:	4a15      	ldr	r2, [pc, #84]	@ (8006c84 <UART_SetConfig+0x118>)
 8006c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c38:	4419      	add	r1, r3
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	009a      	lsls	r2, r3, #2
 8006c44:	441a      	add	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c50:	4b0c      	ldr	r3, [pc, #48]	@ (8006c84 <UART_SetConfig+0x118>)
 8006c52:	fba3 0302 	umull	r0, r3, r3, r2
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	2064      	movs	r0, #100	@ 0x64
 8006c5a:	fb00 f303 	mul.w	r3, r0, r3
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	3332      	adds	r3, #50	@ 0x32
 8006c64:	4a07      	ldr	r2, [pc, #28]	@ (8006c84 <UART_SetConfig+0x118>)
 8006c66:	fba2 2303 	umull	r2, r3, r2, r3
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	f003 020f 	and.w	r2, r3, #15
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	440a      	add	r2, r1
 8006c76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c78:	bf00      	nop
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40013800 	.word	0x40013800
 8006c84:	51eb851f 	.word	0x51eb851f

08006c88 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c9a:	2b84      	cmp	r3, #132	@ 0x84
 8006c9c:	d005      	beq.n	8006caa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006c9e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	3303      	adds	r3, #3
 8006ca8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006caa:	68fb      	ldr	r3, [r7, #12]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr

08006cb6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006cba:	f000 faf7 	bl	80072ac <vTaskStartScheduler>
  
  return osOK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc6:	b089      	sub	sp, #36	@ 0x24
 8006cc8:	af04      	add	r7, sp, #16
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d020      	beq.n	8006d18 <osThreadCreate+0x54>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d01c      	beq.n	8006d18 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685c      	ldr	r4, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691e      	ldr	r6, [r3, #16]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff ffc9 	bl	8006c88 <makeFreeRtosPriority>
 8006cf6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d00:	9202      	str	r2, [sp, #8]
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	9100      	str	r1, [sp, #0]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	4632      	mov	r2, r6
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 f8e8 	bl	8006ee2 <xTaskCreateStatic>
 8006d12:	4603      	mov	r3, r0
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	e01c      	b.n	8006d52 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685c      	ldr	r4, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d24:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff ffab 	bl	8006c88 <makeFreeRtosPriority>
 8006d32:	4602      	mov	r2, r0
 8006d34:	f107 030c 	add.w	r3, r7, #12
 8006d38:	9301      	str	r3, [sp, #4]
 8006d3a:	9200      	str	r2, [sp, #0]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	4632      	mov	r2, r6
 8006d40:	4629      	mov	r1, r5
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 f92d 	bl	8006fa2 <xTaskCreate>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d001      	beq.n	8006d52 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e000      	b.n	8006d54 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006d52:	68fb      	ldr	r3, [r7, #12]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d5c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <osDelay+0x16>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	e000      	b.n	8006d74 <osDelay+0x18>
 8006d72:	2301      	movs	r3, #1
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fa63 	bl	8007240 <vTaskDelay>
  
  return osOK;
 8006d7a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f103 0208 	add.w	r2, r3, #8
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f103 0208 	add.w	r2, r3, #8
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f103 0208 	add.w	r2, r3, #8
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bc80      	pop	{r7}
 8006dc0:	4770      	bx	lr

08006dc2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr

08006dda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b085      	sub	sp, #20
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	601a      	str	r2, [r3, #0]
}
 8006e16:	bf00      	nop
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr

08006e20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e36:	d103      	bne.n	8006e40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	60fb      	str	r3, [r7, #12]
 8006e3e:	e00c      	b.n	8006e5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3308      	adds	r3, #8
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	e002      	b.n	8006e4e <vListInsert+0x2e>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d2f6      	bcs.n	8006e48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	601a      	str	r2, [r3, #0]
}
 8006e86:	bf00      	nop
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bc80      	pop	{r7}
 8006e8e:	4770      	bx	lr

08006e90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6892      	ldr	r2, [r2, #8]
 8006ea6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6852      	ldr	r2, [r2, #4]
 8006eb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d103      	bne.n	8006ec4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	1e5a      	subs	r2, r3, #1
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr

08006ee2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b08e      	sub	sp, #56	@ 0x38
 8006ee6:	af04      	add	r7, sp, #16
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	607a      	str	r2, [r7, #4]
 8006eee:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10b      	bne.n	8006f0e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	e7fd      	b.n	8006f0a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10b      	bne.n	8006f2c <xTaskCreateStatic+0x4a>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	61fb      	str	r3, [r7, #28]
}
 8006f26:	bf00      	nop
 8006f28:	bf00      	nop
 8006f2a:	e7fd      	b.n	8006f28 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f2c:	23a0      	movs	r3, #160	@ 0xa0
 8006f2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	2ba0      	cmp	r3, #160	@ 0xa0
 8006f34:	d00b      	beq.n	8006f4e <xTaskCreateStatic+0x6c>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	61bb      	str	r3, [r7, #24]
}
 8006f48:	bf00      	nop
 8006f4a:	bf00      	nop
 8006f4c:	e7fd      	b.n	8006f4a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01e      	beq.n	8006f94 <xTaskCreateStatic+0xb2>
 8006f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01b      	beq.n	8006f94 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f64:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	2202      	movs	r2, #2
 8006f6a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f6e:	2300      	movs	r3, #0
 8006f70:	9303      	str	r3, [sp, #12]
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	9302      	str	r3, [sp, #8]
 8006f76:	f107 0314 	add.w	r3, r7, #20
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	68b9      	ldr	r1, [r7, #8]
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 f850 	bl	800702c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f8e:	f000 f8ed 	bl	800716c <prvAddNewTaskToReadyList>
 8006f92:	e001      	b.n	8006f98 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f98:	697b      	ldr	r3, [r7, #20]
	}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3728      	adds	r7, #40	@ 0x28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b08c      	sub	sp, #48	@ 0x30
 8006fa6:	af04      	add	r7, sp, #16
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	603b      	str	r3, [r7, #0]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fea2 	bl	8007d00 <pvPortMalloc>
 8006fbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00e      	beq.n	8006fe2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006fc4:	20a0      	movs	r0, #160	@ 0xa0
 8006fc6:	f000 fe9b 	bl	8007d00 <pvPortMalloc>
 8006fca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fd8:	e005      	b.n	8006fe6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006fda:	6978      	ldr	r0, [r7, #20]
 8006fdc:	f000 ff5e 	bl	8007e9c <vPortFree>
 8006fe0:	e001      	b.n	8006fe6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d017      	beq.n	800701c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ff4:	88fa      	ldrh	r2, [r7, #6]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	9303      	str	r3, [sp, #12]
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	9302      	str	r3, [sp, #8]
 8006ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	68b9      	ldr	r1, [r7, #8]
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 f80e 	bl	800702c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007010:	69f8      	ldr	r0, [r7, #28]
 8007012:	f000 f8ab 	bl	800716c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007016:	2301      	movs	r3, #1
 8007018:	61bb      	str	r3, [r7, #24]
 800701a:	e002      	b.n	8007022 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800701c:	f04f 33ff 	mov.w	r3, #4294967295
 8007020:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007022:	69bb      	ldr	r3, [r7, #24]
	}
 8007024:	4618      	mov	r0, r3
 8007026:	3720      	adds	r7, #32
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007044:	3b01      	subs	r3, #1
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	f023 0307 	bic.w	r3, r3, #7
 8007052:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00b      	beq.n	8007076 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	617b      	str	r3, [r7, #20]
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	e7fd      	b.n	8007072 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01f      	beq.n	80070bc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800707c:	2300      	movs	r3, #0
 800707e:	61fb      	str	r3, [r7, #28]
 8007080:	e012      	b.n	80070a8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	4413      	add	r3, r2
 8007088:	7819      	ldrb	r1, [r3, #0]
 800708a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	4413      	add	r3, r2
 8007090:	3334      	adds	r3, #52	@ 0x34
 8007092:	460a      	mov	r2, r1
 8007094:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	4413      	add	r3, r2
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d006      	beq.n	80070b0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	3301      	adds	r3, #1
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	2b0f      	cmp	r3, #15
 80070ac:	d9e9      	bls.n	8007082 <prvInitialiseNewTask+0x56>
 80070ae:	e000      	b.n	80070b2 <prvInitialiseNewTask+0x86>
			{
				break;
 80070b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070ba:	e003      	b.n	80070c4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80070bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c6:	2b06      	cmp	r3, #6
 80070c8:	d901      	bls.n	80070ce <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070ca:	2306      	movs	r3, #6
 80070cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070d8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	2200      	movs	r2, #0
 80070de:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e2:	3304      	adds	r3, #4
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff fe6c 	bl	8006dc2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ec:	3318      	adds	r3, #24
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7ff fe67 	bl	8006dc2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fc:	f1c3 0207 	rsb	r2, r3, #7
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007106:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007108:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800710a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710c:	2200      	movs	r2, #0
 800710e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	2200      	movs	r2, #0
 8007116:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800711a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711c:	334c      	adds	r3, #76	@ 0x4c
 800711e:	224c      	movs	r2, #76	@ 0x4c
 8007120:	2100      	movs	r1, #0
 8007122:	4618      	mov	r0, r3
 8007124:	f001 fba0 	bl	8008868 <memset>
 8007128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712a:	4a0d      	ldr	r2, [pc, #52]	@ (8007160 <prvInitialiseNewTask+0x134>)
 800712c:	651a      	str	r2, [r3, #80]	@ 0x50
 800712e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007130:	4a0c      	ldr	r2, [pc, #48]	@ (8007164 <prvInitialiseNewTask+0x138>)
 8007132:	655a      	str	r2, [r3, #84]	@ 0x54
 8007134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007136:	4a0c      	ldr	r2, [pc, #48]	@ (8007168 <prvInitialiseNewTask+0x13c>)
 8007138:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	68f9      	ldr	r1, [r7, #12]
 800713e:	69b8      	ldr	r0, [r7, #24]
 8007140:	f000 fc28 	bl	8007994 <pxPortInitialiseStack>
 8007144:	4602      	mov	r2, r0
 8007146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007148:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800714a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007156:	bf00      	nop
 8007158:	3720      	adds	r7, #32
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	200012e4 	.word	0x200012e4
 8007164:	2000134c 	.word	0x2000134c
 8007168:	200013b4 	.word	0x200013b4

0800716c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007174:	f000 fd02 	bl	8007b7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007178:	4b2a      	ldr	r3, [pc, #168]	@ (8007224 <prvAddNewTaskToReadyList+0xb8>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3301      	adds	r3, #1
 800717e:	4a29      	ldr	r2, [pc, #164]	@ (8007224 <prvAddNewTaskToReadyList+0xb8>)
 8007180:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007182:	4b29      	ldr	r3, [pc, #164]	@ (8007228 <prvAddNewTaskToReadyList+0xbc>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d109      	bne.n	800719e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800718a:	4a27      	ldr	r2, [pc, #156]	@ (8007228 <prvAddNewTaskToReadyList+0xbc>)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007190:	4b24      	ldr	r3, [pc, #144]	@ (8007224 <prvAddNewTaskToReadyList+0xb8>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d110      	bne.n	80071ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007198:	f000 fad2 	bl	8007740 <prvInitialiseTaskLists>
 800719c:	e00d      	b.n	80071ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800719e:	4b23      	ldr	r3, [pc, #140]	@ (800722c <prvAddNewTaskToReadyList+0xc0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d109      	bne.n	80071ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071a6:	4b20      	ldr	r3, [pc, #128]	@ (8007228 <prvAddNewTaskToReadyList+0xbc>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d802      	bhi.n	80071ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007228 <prvAddNewTaskToReadyList+0xbc>)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007230 <prvAddNewTaskToReadyList+0xc4>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3301      	adds	r3, #1
 80071c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007230 <prvAddNewTaskToReadyList+0xc4>)
 80071c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c8:	2201      	movs	r2, #1
 80071ca:	409a      	lsls	r2, r3
 80071cc:	4b19      	ldr	r3, [pc, #100]	@ (8007234 <prvAddNewTaskToReadyList+0xc8>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	4a18      	ldr	r2, [pc, #96]	@ (8007234 <prvAddNewTaskToReadyList+0xc8>)
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071da:	4613      	mov	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4a15      	ldr	r2, [pc, #84]	@ (8007238 <prvAddNewTaskToReadyList+0xcc>)
 80071e4:	441a      	add	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3304      	adds	r3, #4
 80071ea:	4619      	mov	r1, r3
 80071ec:	4610      	mov	r0, r2
 80071ee:	f7ff fdf4 	bl	8006dda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071f2:	f000 fcf3 	bl	8007bdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071f6:	4b0d      	ldr	r3, [pc, #52]	@ (800722c <prvAddNewTaskToReadyList+0xc0>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00e      	beq.n	800721c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007228 <prvAddNewTaskToReadyList+0xbc>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	429a      	cmp	r2, r3
 800720a:	d207      	bcs.n	800721c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800720c:	4b0b      	ldr	r3, [pc, #44]	@ (800723c <prvAddNewTaskToReadyList+0xd0>)
 800720e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	20000654 	.word	0x20000654
 8007228:	20000554 	.word	0x20000554
 800722c:	20000660 	.word	0x20000660
 8007230:	20000670 	.word	0x20000670
 8007234:	2000065c 	.word	0x2000065c
 8007238:	20000558 	.word	0x20000558
 800723c:	e000ed04 	.word	0xe000ed04

08007240 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d018      	beq.n	8007284 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007252:	4b14      	ldr	r3, [pc, #80]	@ (80072a4 <vTaskDelay+0x64>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00b      	beq.n	8007272 <vTaskDelay+0x32>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	60bb      	str	r3, [r7, #8]
}
 800726c:	bf00      	nop
 800726e:	bf00      	nop
 8007270:	e7fd      	b.n	800726e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007272:	f000 f885 	bl	8007380 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007276:	2100      	movs	r1, #0
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fb25 	bl	80078c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800727e:	f000 f88d 	bl	800739c <xTaskResumeAll>
 8007282:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d107      	bne.n	800729a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800728a:	4b07      	ldr	r3, [pc, #28]	@ (80072a8 <vTaskDelay+0x68>)
 800728c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800729a:	bf00      	nop
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	2000067c 	.word	0x2000067c
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08a      	sub	sp, #40	@ 0x28
 80072b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072ba:	463a      	mov	r2, r7
 80072bc:	1d39      	adds	r1, r7, #4
 80072be:	f107 0308 	add.w	r3, r7, #8
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7f9 ffc6 	bl	8001254 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	9202      	str	r2, [sp, #8]
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	2300      	movs	r3, #0
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	2300      	movs	r3, #0
 80072d8:	460a      	mov	r2, r1
 80072da:	4921      	ldr	r1, [pc, #132]	@ (8007360 <vTaskStartScheduler+0xb4>)
 80072dc:	4821      	ldr	r0, [pc, #132]	@ (8007364 <vTaskStartScheduler+0xb8>)
 80072de:	f7ff fe00 	bl	8006ee2 <xTaskCreateStatic>
 80072e2:	4603      	mov	r3, r0
 80072e4:	4a20      	ldr	r2, [pc, #128]	@ (8007368 <vTaskStartScheduler+0xbc>)
 80072e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072e8:	4b1f      	ldr	r3, [pc, #124]	@ (8007368 <vTaskStartScheduler+0xbc>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072f0:	2301      	movs	r3, #1
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	e001      	b.n	80072fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d11b      	bne.n	8007338 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	613b      	str	r3, [r7, #16]
}
 8007312:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007314:	4b15      	ldr	r3, [pc, #84]	@ (800736c <vTaskStartScheduler+0xc0>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	334c      	adds	r3, #76	@ 0x4c
 800731a:	4a15      	ldr	r2, [pc, #84]	@ (8007370 <vTaskStartScheduler+0xc4>)
 800731c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800731e:	4b15      	ldr	r3, [pc, #84]	@ (8007374 <vTaskStartScheduler+0xc8>)
 8007320:	f04f 32ff 	mov.w	r2, #4294967295
 8007324:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007326:	4b14      	ldr	r3, [pc, #80]	@ (8007378 <vTaskStartScheduler+0xcc>)
 8007328:	2201      	movs	r2, #1
 800732a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800732c:	4b13      	ldr	r3, [pc, #76]	@ (800737c <vTaskStartScheduler+0xd0>)
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007332:	f000 fbb1 	bl	8007a98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007336:	e00f      	b.n	8007358 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733e:	d10b      	bne.n	8007358 <vTaskStartScheduler+0xac>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	60fb      	str	r3, [r7, #12]
}
 8007352:	bf00      	nop
 8007354:	bf00      	nop
 8007356:	e7fd      	b.n	8007354 <vTaskStartScheduler+0xa8>
}
 8007358:	bf00      	nop
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	080099f4 	.word	0x080099f4
 8007364:	08007711 	.word	0x08007711
 8007368:	20000678 	.word	0x20000678
 800736c:	20000554 	.word	0x20000554
 8007370:	2000001c 	.word	0x2000001c
 8007374:	20000674 	.word	0x20000674
 8007378:	20000660 	.word	0x20000660
 800737c:	20000658 	.word	0x20000658

08007380 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007380:	b480      	push	{r7}
 8007382:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007384:	4b04      	ldr	r3, [pc, #16]	@ (8007398 <vTaskSuspendAll+0x18>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3301      	adds	r3, #1
 800738a:	4a03      	ldr	r2, [pc, #12]	@ (8007398 <vTaskSuspendAll+0x18>)
 800738c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800738e:	bf00      	nop
 8007390:	46bd      	mov	sp, r7
 8007392:	bc80      	pop	{r7}
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	2000067c 	.word	0x2000067c

0800739c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073aa:	4b42      	ldr	r3, [pc, #264]	@ (80074b4 <xTaskResumeAll+0x118>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10b      	bne.n	80073ca <xTaskResumeAll+0x2e>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	603b      	str	r3, [r7, #0]
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
 80073c8:	e7fd      	b.n	80073c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073ca:	f000 fbd7 	bl	8007b7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073ce:	4b39      	ldr	r3, [pc, #228]	@ (80074b4 <xTaskResumeAll+0x118>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	4a37      	ldr	r2, [pc, #220]	@ (80074b4 <xTaskResumeAll+0x118>)
 80073d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073d8:	4b36      	ldr	r3, [pc, #216]	@ (80074b4 <xTaskResumeAll+0x118>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d161      	bne.n	80074a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073e0:	4b35      	ldr	r3, [pc, #212]	@ (80074b8 <xTaskResumeAll+0x11c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d05d      	beq.n	80074a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073e8:	e02e      	b.n	8007448 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ea:	4b34      	ldr	r3, [pc, #208]	@ (80074bc <xTaskResumeAll+0x120>)
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3318      	adds	r3, #24
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff fd4a 	bl	8006e90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	3304      	adds	r3, #4
 8007400:	4618      	mov	r0, r3
 8007402:	f7ff fd45 	bl	8006e90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740a:	2201      	movs	r2, #1
 800740c:	409a      	lsls	r2, r3
 800740e:	4b2c      	ldr	r3, [pc, #176]	@ (80074c0 <xTaskResumeAll+0x124>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4313      	orrs	r3, r2
 8007414:	4a2a      	ldr	r2, [pc, #168]	@ (80074c0 <xTaskResumeAll+0x124>)
 8007416:	6013      	str	r3, [r2, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	4a27      	ldr	r2, [pc, #156]	@ (80074c4 <xTaskResumeAll+0x128>)
 8007426:	441a      	add	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3304      	adds	r3, #4
 800742c:	4619      	mov	r1, r3
 800742e:	4610      	mov	r0, r2
 8007430:	f7ff fcd3 	bl	8006dda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007438:	4b23      	ldr	r3, [pc, #140]	@ (80074c8 <xTaskResumeAll+0x12c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743e:	429a      	cmp	r2, r3
 8007440:	d302      	bcc.n	8007448 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007442:	4b22      	ldr	r3, [pc, #136]	@ (80074cc <xTaskResumeAll+0x130>)
 8007444:	2201      	movs	r2, #1
 8007446:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007448:	4b1c      	ldr	r3, [pc, #112]	@ (80074bc <xTaskResumeAll+0x120>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1cc      	bne.n	80073ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007456:	f000 fa17 	bl	8007888 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800745a:	4b1d      	ldr	r3, [pc, #116]	@ (80074d0 <xTaskResumeAll+0x134>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d010      	beq.n	8007488 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007466:	f000 f837 	bl	80074d8 <xTaskIncrementTick>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007470:	4b16      	ldr	r3, [pc, #88]	@ (80074cc <xTaskResumeAll+0x130>)
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3b01      	subs	r3, #1
 800747a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1f1      	bne.n	8007466 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007482:	4b13      	ldr	r3, [pc, #76]	@ (80074d0 <xTaskResumeAll+0x134>)
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007488:	4b10      	ldr	r3, [pc, #64]	@ (80074cc <xTaskResumeAll+0x130>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d009      	beq.n	80074a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007490:	2301      	movs	r3, #1
 8007492:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007494:	4b0f      	ldr	r3, [pc, #60]	@ (80074d4 <xTaskResumeAll+0x138>)
 8007496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074a4:	f000 fb9a 	bl	8007bdc <vPortExitCritical>

	return xAlreadyYielded;
 80074a8:	68bb      	ldr	r3, [r7, #8]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	2000067c 	.word	0x2000067c
 80074b8:	20000654 	.word	0x20000654
 80074bc:	20000614 	.word	0x20000614
 80074c0:	2000065c 	.word	0x2000065c
 80074c4:	20000558 	.word	0x20000558
 80074c8:	20000554 	.word	0x20000554
 80074cc:	20000668 	.word	0x20000668
 80074d0:	20000664 	.word	0x20000664
 80074d4:	e000ed04 	.word	0xe000ed04

080074d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074e2:	4b4f      	ldr	r3, [pc, #316]	@ (8007620 <xTaskIncrementTick+0x148>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f040 808f 	bne.w	800760a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074ec:	4b4d      	ldr	r3, [pc, #308]	@ (8007624 <xTaskIncrementTick+0x14c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	3301      	adds	r3, #1
 80074f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074f4:	4a4b      	ldr	r2, [pc, #300]	@ (8007624 <xTaskIncrementTick+0x14c>)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d121      	bne.n	8007544 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007500:	4b49      	ldr	r3, [pc, #292]	@ (8007628 <xTaskIncrementTick+0x150>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00b      	beq.n	8007522 <xTaskIncrementTick+0x4a>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	603b      	str	r3, [r7, #0]
}
 800751c:	bf00      	nop
 800751e:	bf00      	nop
 8007520:	e7fd      	b.n	800751e <xTaskIncrementTick+0x46>
 8007522:	4b41      	ldr	r3, [pc, #260]	@ (8007628 <xTaskIncrementTick+0x150>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	4b40      	ldr	r3, [pc, #256]	@ (800762c <xTaskIncrementTick+0x154>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a3e      	ldr	r2, [pc, #248]	@ (8007628 <xTaskIncrementTick+0x150>)
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	4a3e      	ldr	r2, [pc, #248]	@ (800762c <xTaskIncrementTick+0x154>)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	4b3e      	ldr	r3, [pc, #248]	@ (8007630 <xTaskIncrementTick+0x158>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3301      	adds	r3, #1
 800753c:	4a3c      	ldr	r2, [pc, #240]	@ (8007630 <xTaskIncrementTick+0x158>)
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	f000 f9a2 	bl	8007888 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007544:	4b3b      	ldr	r3, [pc, #236]	@ (8007634 <xTaskIncrementTick+0x15c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	429a      	cmp	r2, r3
 800754c:	d348      	bcc.n	80075e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800754e:	4b36      	ldr	r3, [pc, #216]	@ (8007628 <xTaskIncrementTick+0x150>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d104      	bne.n	8007562 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007558:	4b36      	ldr	r3, [pc, #216]	@ (8007634 <xTaskIncrementTick+0x15c>)
 800755a:	f04f 32ff 	mov.w	r2, #4294967295
 800755e:	601a      	str	r2, [r3, #0]
					break;
 8007560:	e03e      	b.n	80075e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007562:	4b31      	ldr	r3, [pc, #196]	@ (8007628 <xTaskIncrementTick+0x150>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	429a      	cmp	r2, r3
 8007578:	d203      	bcs.n	8007582 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800757a:	4a2e      	ldr	r2, [pc, #184]	@ (8007634 <xTaskIncrementTick+0x15c>)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007580:	e02e      	b.n	80075e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	3304      	adds	r3, #4
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff fc82 	bl	8006e90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007590:	2b00      	cmp	r3, #0
 8007592:	d004      	beq.n	800759e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	3318      	adds	r3, #24
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff fc79 	bl	8006e90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a2:	2201      	movs	r2, #1
 80075a4:	409a      	lsls	r2, r3
 80075a6:	4b24      	ldr	r3, [pc, #144]	@ (8007638 <xTaskIncrementTick+0x160>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	4a22      	ldr	r2, [pc, #136]	@ (8007638 <xTaskIncrementTick+0x160>)
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b4:	4613      	mov	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4a1f      	ldr	r2, [pc, #124]	@ (800763c <xTaskIncrementTick+0x164>)
 80075be:	441a      	add	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	f7ff fc07 	bl	8006dda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007640 <xTaskIncrementTick+0x168>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d3b9      	bcc.n	800754e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80075da:	2301      	movs	r3, #1
 80075dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075de:	e7b6      	b.n	800754e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075e0:	4b17      	ldr	r3, [pc, #92]	@ (8007640 <xTaskIncrementTick+0x168>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e6:	4915      	ldr	r1, [pc, #84]	@ (800763c <xTaskIncrementTick+0x164>)
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d901      	bls.n	80075fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80075f8:	2301      	movs	r3, #1
 80075fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80075fc:	4b11      	ldr	r3, [pc, #68]	@ (8007644 <xTaskIncrementTick+0x16c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d007      	beq.n	8007614 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007604:	2301      	movs	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	e004      	b.n	8007614 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800760a:	4b0f      	ldr	r3, [pc, #60]	@ (8007648 <xTaskIncrementTick+0x170>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3301      	adds	r3, #1
 8007610:	4a0d      	ldr	r2, [pc, #52]	@ (8007648 <xTaskIncrementTick+0x170>)
 8007612:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007614:	697b      	ldr	r3, [r7, #20]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	2000067c 	.word	0x2000067c
 8007624:	20000658 	.word	0x20000658
 8007628:	2000060c 	.word	0x2000060c
 800762c:	20000610 	.word	0x20000610
 8007630:	2000066c 	.word	0x2000066c
 8007634:	20000674 	.word	0x20000674
 8007638:	2000065c 	.word	0x2000065c
 800763c:	20000558 	.word	0x20000558
 8007640:	20000554 	.word	0x20000554
 8007644:	20000668 	.word	0x20000668
 8007648:	20000664 	.word	0x20000664

0800764c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007652:	4b29      	ldr	r3, [pc, #164]	@ (80076f8 <vTaskSwitchContext+0xac>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800765a:	4b28      	ldr	r3, [pc, #160]	@ (80076fc <vTaskSwitchContext+0xb0>)
 800765c:	2201      	movs	r2, #1
 800765e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007660:	e045      	b.n	80076ee <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007662:	4b26      	ldr	r3, [pc, #152]	@ (80076fc <vTaskSwitchContext+0xb0>)
 8007664:	2200      	movs	r2, #0
 8007666:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007668:	4b25      	ldr	r3, [pc, #148]	@ (8007700 <vTaskSwitchContext+0xb4>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	fab3 f383 	clz	r3, r3
 8007674:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007676:	7afb      	ldrb	r3, [r7, #11]
 8007678:	f1c3 031f 	rsb	r3, r3, #31
 800767c:	617b      	str	r3, [r7, #20]
 800767e:	4921      	ldr	r1, [pc, #132]	@ (8007704 <vTaskSwitchContext+0xb8>)
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	440b      	add	r3, r1
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10b      	bne.n	80076aa <vTaskSwitchContext+0x5e>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	607b      	str	r3, [r7, #4]
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	e7fd      	b.n	80076a6 <vTaskSwitchContext+0x5a>
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	4613      	mov	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4a13      	ldr	r2, [pc, #76]	@ (8007704 <vTaskSwitchContext+0xb8>)
 80076b6:	4413      	add	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	605a      	str	r2, [r3, #4]
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	3308      	adds	r3, #8
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d104      	bne.n	80076da <vTaskSwitchContext+0x8e>
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	605a      	str	r2, [r3, #4]
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	4a09      	ldr	r2, [pc, #36]	@ (8007708 <vTaskSwitchContext+0xbc>)
 80076e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076e4:	4b08      	ldr	r3, [pc, #32]	@ (8007708 <vTaskSwitchContext+0xbc>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	334c      	adds	r3, #76	@ 0x4c
 80076ea:	4a08      	ldr	r2, [pc, #32]	@ (800770c <vTaskSwitchContext+0xc0>)
 80076ec:	6013      	str	r3, [r2, #0]
}
 80076ee:	bf00      	nop
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bc80      	pop	{r7}
 80076f6:	4770      	bx	lr
 80076f8:	2000067c 	.word	0x2000067c
 80076fc:	20000668 	.word	0x20000668
 8007700:	2000065c 	.word	0x2000065c
 8007704:	20000558 	.word	0x20000558
 8007708:	20000554 	.word	0x20000554
 800770c:	2000001c 	.word	0x2000001c

08007710 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007718:	f000 f852 	bl	80077c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800771c:	4b06      	ldr	r3, [pc, #24]	@ (8007738 <prvIdleTask+0x28>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d9f9      	bls.n	8007718 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007724:	4b05      	ldr	r3, [pc, #20]	@ (800773c <prvIdleTask+0x2c>)
 8007726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007734:	e7f0      	b.n	8007718 <prvIdleTask+0x8>
 8007736:	bf00      	nop
 8007738:	20000558 	.word	0x20000558
 800773c:	e000ed04 	.word	0xe000ed04

08007740 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007746:	2300      	movs	r3, #0
 8007748:	607b      	str	r3, [r7, #4]
 800774a:	e00c      	b.n	8007766 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4a12      	ldr	r2, [pc, #72]	@ (80077a0 <prvInitialiseTaskLists+0x60>)
 8007758:	4413      	add	r3, r2
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff fb12 	bl	8006d84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3301      	adds	r3, #1
 8007764:	607b      	str	r3, [r7, #4]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b06      	cmp	r3, #6
 800776a:	d9ef      	bls.n	800774c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800776c:	480d      	ldr	r0, [pc, #52]	@ (80077a4 <prvInitialiseTaskLists+0x64>)
 800776e:	f7ff fb09 	bl	8006d84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007772:	480d      	ldr	r0, [pc, #52]	@ (80077a8 <prvInitialiseTaskLists+0x68>)
 8007774:	f7ff fb06 	bl	8006d84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007778:	480c      	ldr	r0, [pc, #48]	@ (80077ac <prvInitialiseTaskLists+0x6c>)
 800777a:	f7ff fb03 	bl	8006d84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800777e:	480c      	ldr	r0, [pc, #48]	@ (80077b0 <prvInitialiseTaskLists+0x70>)
 8007780:	f7ff fb00 	bl	8006d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007784:	480b      	ldr	r0, [pc, #44]	@ (80077b4 <prvInitialiseTaskLists+0x74>)
 8007786:	f7ff fafd 	bl	8006d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800778a:	4b0b      	ldr	r3, [pc, #44]	@ (80077b8 <prvInitialiseTaskLists+0x78>)
 800778c:	4a05      	ldr	r2, [pc, #20]	@ (80077a4 <prvInitialiseTaskLists+0x64>)
 800778e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007790:	4b0a      	ldr	r3, [pc, #40]	@ (80077bc <prvInitialiseTaskLists+0x7c>)
 8007792:	4a05      	ldr	r2, [pc, #20]	@ (80077a8 <prvInitialiseTaskLists+0x68>)
 8007794:	601a      	str	r2, [r3, #0]
}
 8007796:	bf00      	nop
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000558 	.word	0x20000558
 80077a4:	200005e4 	.word	0x200005e4
 80077a8:	200005f8 	.word	0x200005f8
 80077ac:	20000614 	.word	0x20000614
 80077b0:	20000628 	.word	0x20000628
 80077b4:	20000640 	.word	0x20000640
 80077b8:	2000060c 	.word	0x2000060c
 80077bc:	20000610 	.word	0x20000610

080077c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077c6:	e019      	b.n	80077fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077c8:	f000 f9d8 	bl	8007b7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077cc:	4b10      	ldr	r3, [pc, #64]	@ (8007810 <prvCheckTasksWaitingTermination+0x50>)
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3304      	adds	r3, #4
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff fb59 	bl	8006e90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077de:	4b0d      	ldr	r3, [pc, #52]	@ (8007814 <prvCheckTasksWaitingTermination+0x54>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	4a0b      	ldr	r2, [pc, #44]	@ (8007814 <prvCheckTasksWaitingTermination+0x54>)
 80077e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007818 <prvCheckTasksWaitingTermination+0x58>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007818 <prvCheckTasksWaitingTermination+0x58>)
 80077f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077f2:	f000 f9f3 	bl	8007bdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f810 	bl	800781c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077fc:	4b06      	ldr	r3, [pc, #24]	@ (8007818 <prvCheckTasksWaitingTermination+0x58>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e1      	bne.n	80077c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20000628 	.word	0x20000628
 8007814:	20000654 	.word	0x20000654
 8007818:	2000063c 	.word	0x2000063c

0800781c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	334c      	adds	r3, #76	@ 0x4c
 8007828:	4618      	mov	r0, r3
 800782a:	f001 f825 	bl	8008878 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007834:	2b00      	cmp	r3, #0
 8007836:	d108      	bne.n	800784a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fb2d 	bl	8007e9c <vPortFree>
				vPortFree( pxTCB );
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fb2a 	bl	8007e9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007848:	e019      	b.n	800787e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007850:	2b01      	cmp	r3, #1
 8007852:	d103      	bne.n	800785c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fb21 	bl	8007e9c <vPortFree>
	}
 800785a:	e010      	b.n	800787e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007862:	2b02      	cmp	r3, #2
 8007864:	d00b      	beq.n	800787e <prvDeleteTCB+0x62>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	60fb      	str	r3, [r7, #12]
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	e7fd      	b.n	800787a <prvDeleteTCB+0x5e>
	}
 800787e:	bf00      	nop
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800788e:	4b0c      	ldr	r3, [pc, #48]	@ (80078c0 <prvResetNextTaskUnblockTime+0x38>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d104      	bne.n	80078a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007898:	4b0a      	ldr	r3, [pc, #40]	@ (80078c4 <prvResetNextTaskUnblockTime+0x3c>)
 800789a:	f04f 32ff 	mov.w	r2, #4294967295
 800789e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078a0:	e008      	b.n	80078b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a2:	4b07      	ldr	r3, [pc, #28]	@ (80078c0 <prvResetNextTaskUnblockTime+0x38>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	4a04      	ldr	r2, [pc, #16]	@ (80078c4 <prvResetNextTaskUnblockTime+0x3c>)
 80078b2:	6013      	str	r3, [r2, #0]
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	2000060c 	.word	0x2000060c
 80078c4:	20000674 	.word	0x20000674

080078c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078d2:	4b29      	ldr	r3, [pc, #164]	@ (8007978 <prvAddCurrentTaskToDelayedList+0xb0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078d8:	4b28      	ldr	r3, [pc, #160]	@ (800797c <prvAddCurrentTaskToDelayedList+0xb4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3304      	adds	r3, #4
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff fad6 	bl	8006e90 <uxListRemove>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10b      	bne.n	8007902 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80078ea:	4b24      	ldr	r3, [pc, #144]	@ (800797c <prvAddCurrentTaskToDelayedList+0xb4>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f0:	2201      	movs	r2, #1
 80078f2:	fa02 f303 	lsl.w	r3, r2, r3
 80078f6:	43da      	mvns	r2, r3
 80078f8:	4b21      	ldr	r3, [pc, #132]	@ (8007980 <prvAddCurrentTaskToDelayedList+0xb8>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4013      	ands	r3, r2
 80078fe:	4a20      	ldr	r2, [pc, #128]	@ (8007980 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007900:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007908:	d10a      	bne.n	8007920 <prvAddCurrentTaskToDelayedList+0x58>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d007      	beq.n	8007920 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007910:	4b1a      	ldr	r3, [pc, #104]	@ (800797c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3304      	adds	r3, #4
 8007916:	4619      	mov	r1, r3
 8007918:	481a      	ldr	r0, [pc, #104]	@ (8007984 <prvAddCurrentTaskToDelayedList+0xbc>)
 800791a:	f7ff fa5e 	bl	8006dda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800791e:	e026      	b.n	800796e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4413      	add	r3, r2
 8007926:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007928:	4b14      	ldr	r3, [pc, #80]	@ (800797c <prvAddCurrentTaskToDelayedList+0xb4>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	429a      	cmp	r2, r3
 8007936:	d209      	bcs.n	800794c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007938:	4b13      	ldr	r3, [pc, #76]	@ (8007988 <prvAddCurrentTaskToDelayedList+0xc0>)
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	4b0f      	ldr	r3, [pc, #60]	@ (800797c <prvAddCurrentTaskToDelayedList+0xb4>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3304      	adds	r3, #4
 8007942:	4619      	mov	r1, r3
 8007944:	4610      	mov	r0, r2
 8007946:	f7ff fa6b 	bl	8006e20 <vListInsert>
}
 800794a:	e010      	b.n	800796e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800794c:	4b0f      	ldr	r3, [pc, #60]	@ (800798c <prvAddCurrentTaskToDelayedList+0xc4>)
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	4b0a      	ldr	r3, [pc, #40]	@ (800797c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3304      	adds	r3, #4
 8007956:	4619      	mov	r1, r3
 8007958:	4610      	mov	r0, r2
 800795a:	f7ff fa61 	bl	8006e20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800795e:	4b0c      	ldr	r3, [pc, #48]	@ (8007990 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	429a      	cmp	r2, r3
 8007966:	d202      	bcs.n	800796e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007968:	4a09      	ldr	r2, [pc, #36]	@ (8007990 <prvAddCurrentTaskToDelayedList+0xc8>)
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	6013      	str	r3, [r2, #0]
}
 800796e:	bf00      	nop
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20000658 	.word	0x20000658
 800797c:	20000554 	.word	0x20000554
 8007980:	2000065c 	.word	0x2000065c
 8007984:	20000640 	.word	0x20000640
 8007988:	20000610 	.word	0x20000610
 800798c:	2000060c 	.word	0x2000060c
 8007990:	20000674 	.word	0x20000674

08007994 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3b04      	subs	r3, #4
 80079a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80079ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3b04      	subs	r3, #4
 80079b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f023 0201 	bic.w	r2, r3, #1
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3b04      	subs	r3, #4
 80079c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079c4:	4a08      	ldr	r2, [pc, #32]	@ (80079e8 <pxPortInitialiseStack+0x54>)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3b14      	subs	r3, #20
 80079ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3b20      	subs	r3, #32
 80079da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079dc:	68fb      	ldr	r3, [r7, #12]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3714      	adds	r7, #20
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bc80      	pop	{r7}
 80079e6:	4770      	bx	lr
 80079e8:	080079ed 	.word	0x080079ed

080079ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079f6:	4b12      	ldr	r3, [pc, #72]	@ (8007a40 <prvTaskExitError+0x54>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fe:	d00b      	beq.n	8007a18 <prvTaskExitError+0x2c>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	60fb      	str	r3, [r7, #12]
}
 8007a12:	bf00      	nop
 8007a14:	bf00      	nop
 8007a16:	e7fd      	b.n	8007a14 <prvTaskExitError+0x28>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	60bb      	str	r3, [r7, #8]
}
 8007a2a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a2c:	bf00      	nop
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0fc      	beq.n	8007a2e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bc80      	pop	{r7}
 8007a3e:	4770      	bx	lr
 8007a40:	20000014 	.word	0x20000014
	...

08007a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a50:	4b07      	ldr	r3, [pc, #28]	@ (8007a70 <pxCurrentTCBConst2>)
 8007a52:	6819      	ldr	r1, [r3, #0]
 8007a54:	6808      	ldr	r0, [r1, #0]
 8007a56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a5a:	f380 8809 	msr	PSP, r0
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f04f 0000 	mov.w	r0, #0
 8007a66:	f380 8811 	msr	BASEPRI, r0
 8007a6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007a6e:	4770      	bx	lr

08007a70 <pxCurrentTCBConst2>:
 8007a70:	20000554 	.word	0x20000554
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop

08007a78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007a78:	4806      	ldr	r0, [pc, #24]	@ (8007a94 <prvPortStartFirstTask+0x1c>)
 8007a7a:	6800      	ldr	r0, [r0, #0]
 8007a7c:	6800      	ldr	r0, [r0, #0]
 8007a7e:	f380 8808 	msr	MSP, r0
 8007a82:	b662      	cpsie	i
 8007a84:	b661      	cpsie	f
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	df00      	svc	0
 8007a90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a92:	bf00      	nop
 8007a94:	e000ed08 	.word	0xe000ed08

08007a98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a9e:	4b32      	ldr	r3, [pc, #200]	@ (8007b68 <xPortStartScheduler+0xd0>)
 8007aa0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	22ff      	movs	r2, #255	@ 0xff
 8007aae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ab8:	78fb      	ldrb	r3, [r7, #3]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8007b6c <xPortStartScheduler+0xd4>)
 8007ac4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8007b70 <xPortStartScheduler+0xd8>)
 8007ac8:	2207      	movs	r2, #7
 8007aca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007acc:	e009      	b.n	8007ae2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007ace:	4b28      	ldr	r3, [pc, #160]	@ (8007b70 <xPortStartScheduler+0xd8>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	4a26      	ldr	r2, [pc, #152]	@ (8007b70 <xPortStartScheduler+0xd8>)
 8007ad6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ae2:	78fb      	ldrb	r3, [r7, #3]
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aea:	2b80      	cmp	r3, #128	@ 0x80
 8007aec:	d0ef      	beq.n	8007ace <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007aee:	4b20      	ldr	r3, [pc, #128]	@ (8007b70 <xPortStartScheduler+0xd8>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f1c3 0307 	rsb	r3, r3, #7
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d00b      	beq.n	8007b12 <xPortStartScheduler+0x7a>
	__asm volatile
 8007afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afe:	f383 8811 	msr	BASEPRI, r3
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	60bb      	str	r3, [r7, #8]
}
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
 8007b10:	e7fd      	b.n	8007b0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b12:	4b17      	ldr	r3, [pc, #92]	@ (8007b70 <xPortStartScheduler+0xd8>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	021b      	lsls	r3, r3, #8
 8007b18:	4a15      	ldr	r2, [pc, #84]	@ (8007b70 <xPortStartScheduler+0xd8>)
 8007b1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b1c:	4b14      	ldr	r3, [pc, #80]	@ (8007b70 <xPortStartScheduler+0xd8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b24:	4a12      	ldr	r2, [pc, #72]	@ (8007b70 <xPortStartScheduler+0xd8>)
 8007b26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b30:	4b10      	ldr	r3, [pc, #64]	@ (8007b74 <xPortStartScheduler+0xdc>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a0f      	ldr	r2, [pc, #60]	@ (8007b74 <xPortStartScheduler+0xdc>)
 8007b36:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b74 <xPortStartScheduler+0xdc>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a0c      	ldr	r2, [pc, #48]	@ (8007b74 <xPortStartScheduler+0xdc>)
 8007b42:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007b46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b48:	f000 f8b8 	bl	8007cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b78 <xPortStartScheduler+0xe0>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b52:	f7ff ff91 	bl	8007a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b56:	f7ff fd79 	bl	800764c <vTaskSwitchContext>
	prvTaskExitError();
 8007b5a:	f7ff ff47 	bl	80079ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	e000e400 	.word	0xe000e400
 8007b6c:	20000680 	.word	0x20000680
 8007b70:	20000684 	.word	0x20000684
 8007b74:	e000ed20 	.word	0xe000ed20
 8007b78:	20000014 	.word	0x20000014

08007b7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	607b      	str	r3, [r7, #4]
}
 8007b94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b96:	4b0f      	ldr	r3, [pc, #60]	@ (8007bd4 <vPortEnterCritical+0x58>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8007bd4 <vPortEnterCritical+0x58>)
 8007b9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd4 <vPortEnterCritical+0x58>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d110      	bne.n	8007bca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd8 <vPortEnterCritical+0x5c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00b      	beq.n	8007bca <vPortEnterCritical+0x4e>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	603b      	str	r3, [r7, #0]
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop
 8007bc8:	e7fd      	b.n	8007bc6 <vPortEnterCritical+0x4a>
	}
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bc80      	pop	{r7}
 8007bd2:	4770      	bx	lr
 8007bd4:	20000014 	.word	0x20000014
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007be2:	4b12      	ldr	r3, [pc, #72]	@ (8007c2c <vPortExitCritical+0x50>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10b      	bne.n	8007c02 <vPortExitCritical+0x26>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	607b      	str	r3, [r7, #4]
}
 8007bfc:	bf00      	nop
 8007bfe:	bf00      	nop
 8007c00:	e7fd      	b.n	8007bfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c02:	4b0a      	ldr	r3, [pc, #40]	@ (8007c2c <vPortExitCritical+0x50>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	4a08      	ldr	r2, [pc, #32]	@ (8007c2c <vPortExitCritical+0x50>)
 8007c0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c0c:	4b07      	ldr	r3, [pc, #28]	@ (8007c2c <vPortExitCritical+0x50>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d105      	bne.n	8007c20 <vPortExitCritical+0x44>
 8007c14:	2300      	movs	r3, #0
 8007c16:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bc80      	pop	{r7}
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	20000014 	.word	0x20000014

08007c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c30:	f3ef 8009 	mrs	r0, PSP
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	4b0d      	ldr	r3, [pc, #52]	@ (8007c70 <pxCurrentTCBConst>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c40:	6010      	str	r0, [r2, #0]
 8007c42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007c46:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007c4a:	f380 8811 	msr	BASEPRI, r0
 8007c4e:	f7ff fcfd 	bl	800764c <vTaskSwitchContext>
 8007c52:	f04f 0000 	mov.w	r0, #0
 8007c56:	f380 8811 	msr	BASEPRI, r0
 8007c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007c5e:	6819      	ldr	r1, [r3, #0]
 8007c60:	6808      	ldr	r0, [r1, #0]
 8007c62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c66:	f380 8809 	msr	PSP, r0
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	4770      	bx	lr

08007c70 <pxCurrentTCBConst>:
 8007c70:	20000554 	.word	0x20000554
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop

08007c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	607b      	str	r3, [r7, #4]
}
 8007c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c92:	f7ff fc21 	bl	80074d8 <xTaskIncrementTick>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c9c:	4b06      	ldr	r3, [pc, #24]	@ (8007cb8 <SysTick_Handler+0x40>)
 8007c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f383 8811 	msr	BASEPRI, r3
}
 8007cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	e000ed04 	.word	0xe000ed04

08007cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8007cec <vPortSetupTimerInterrupt+0x30>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf0 <vPortSetupTimerInterrupt+0x34>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ccc:	4b09      	ldr	r3, [pc, #36]	@ (8007cf4 <vPortSetupTimerInterrupt+0x38>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a09      	ldr	r2, [pc, #36]	@ (8007cf8 <vPortSetupTimerInterrupt+0x3c>)
 8007cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd6:	099b      	lsrs	r3, r3, #6
 8007cd8:	4a08      	ldr	r2, [pc, #32]	@ (8007cfc <vPortSetupTimerInterrupt+0x40>)
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cde:	4b03      	ldr	r3, [pc, #12]	@ (8007cec <vPortSetupTimerInterrupt+0x30>)
 8007ce0:	2207      	movs	r2, #7
 8007ce2:	601a      	str	r2, [r3, #0]
}
 8007ce4:	bf00      	nop
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bc80      	pop	{r7}
 8007cea:	4770      	bx	lr
 8007cec:	e000e010 	.word	0xe000e010
 8007cf0:	e000e018 	.word	0xe000e018
 8007cf4:	20000008 	.word	0x20000008
 8007cf8:	10624dd3 	.word	0x10624dd3
 8007cfc:	e000e014 	.word	0xe000e014

08007d00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08a      	sub	sp, #40	@ 0x28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d0c:	f7ff fb38 	bl	8007380 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d10:	4b5c      	ldr	r3, [pc, #368]	@ (8007e84 <pvPortMalloc+0x184>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d18:	f000 f924 	bl	8007f64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d1c:	4b5a      	ldr	r3, [pc, #360]	@ (8007e88 <pvPortMalloc+0x188>)
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4013      	ands	r3, r2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f040 8095 	bne.w	8007e54 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01e      	beq.n	8007d6e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007d30:	2208      	movs	r2, #8
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4413      	add	r3, r2
 8007d36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d015      	beq.n	8007d6e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f023 0307 	bic.w	r3, r3, #7
 8007d48:	3308      	adds	r3, #8
 8007d4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f003 0307 	and.w	r3, r3, #7
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00b      	beq.n	8007d6e <pvPortMalloc+0x6e>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	617b      	str	r3, [r7, #20]
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	e7fd      	b.n	8007d6a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d06f      	beq.n	8007e54 <pvPortMalloc+0x154>
 8007d74:	4b45      	ldr	r3, [pc, #276]	@ (8007e8c <pvPortMalloc+0x18c>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d86a      	bhi.n	8007e54 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d7e:	4b44      	ldr	r3, [pc, #272]	@ (8007e90 <pvPortMalloc+0x190>)
 8007d80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d82:	4b43      	ldr	r3, [pc, #268]	@ (8007e90 <pvPortMalloc+0x190>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d88:	e004      	b.n	8007d94 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d903      	bls.n	8007da6 <pvPortMalloc+0xa6>
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1f1      	bne.n	8007d8a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007da6:	4b37      	ldr	r3, [pc, #220]	@ (8007e84 <pvPortMalloc+0x184>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d051      	beq.n	8007e54 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2208      	movs	r2, #8
 8007db6:	4413      	add	r3, r2
 8007db8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	1ad2      	subs	r2, r2, r3
 8007dca:	2308      	movs	r3, #8
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d920      	bls.n	8007e14 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	f003 0307 	and.w	r3, r3, #7
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <pvPortMalloc+0xfc>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	613b      	str	r3, [r7, #16]
}
 8007df6:	bf00      	nop
 8007df8:	bf00      	nop
 8007dfa:	e7fd      	b.n	8007df8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	1ad2      	subs	r2, r2, r3
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e0e:	69b8      	ldr	r0, [r7, #24]
 8007e10:	f000 f90a 	bl	8008028 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e14:	4b1d      	ldr	r3, [pc, #116]	@ (8007e8c <pvPortMalloc+0x18c>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8007e8c <pvPortMalloc+0x18c>)
 8007e20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e22:	4b1a      	ldr	r3, [pc, #104]	@ (8007e8c <pvPortMalloc+0x18c>)
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	4b1b      	ldr	r3, [pc, #108]	@ (8007e94 <pvPortMalloc+0x194>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d203      	bcs.n	8007e36 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e2e:	4b17      	ldr	r3, [pc, #92]	@ (8007e8c <pvPortMalloc+0x18c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a18      	ldr	r2, [pc, #96]	@ (8007e94 <pvPortMalloc+0x194>)
 8007e34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	4b13      	ldr	r3, [pc, #76]	@ (8007e88 <pvPortMalloc+0x188>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e46:	2200      	movs	r2, #0
 8007e48:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e4a:	4b13      	ldr	r3, [pc, #76]	@ (8007e98 <pvPortMalloc+0x198>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	4a11      	ldr	r2, [pc, #68]	@ (8007e98 <pvPortMalloc+0x198>)
 8007e52:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e54:	f7ff faa2 	bl	800739c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	f003 0307 	and.w	r3, r3, #7
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00b      	beq.n	8007e7a <pvPortMalloc+0x17a>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	60fb      	str	r3, [r7, #12]
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop
 8007e78:	e7fd      	b.n	8007e76 <pvPortMalloc+0x176>
	return pvReturn;
 8007e7a:	69fb      	ldr	r3, [r7, #28]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3728      	adds	r7, #40	@ 0x28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	20001290 	.word	0x20001290
 8007e88:	200012a4 	.word	0x200012a4
 8007e8c:	20001294 	.word	0x20001294
 8007e90:	20001288 	.word	0x20001288
 8007e94:	20001298 	.word	0x20001298
 8007e98:	2000129c 	.word	0x2000129c

08007e9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d04f      	beq.n	8007f4e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007eae:	2308      	movs	r3, #8
 8007eb0:	425b      	negs	r3, r3
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	4b25      	ldr	r3, [pc, #148]	@ (8007f58 <vPortFree+0xbc>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <vPortFree+0x46>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	60fb      	str	r3, [r7, #12]
}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	e7fd      	b.n	8007ede <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00b      	beq.n	8007f02 <vPortFree+0x66>
	__asm volatile
 8007eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	60bb      	str	r3, [r7, #8]
}
 8007efc:	bf00      	nop
 8007efe:	bf00      	nop
 8007f00:	e7fd      	b.n	8007efe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	4b14      	ldr	r3, [pc, #80]	@ (8007f58 <vPortFree+0xbc>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01e      	beq.n	8007f4e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d11a      	bne.n	8007f4e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8007f58 <vPortFree+0xbc>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	43db      	mvns	r3, r3
 8007f22:	401a      	ands	r2, r3
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f28:	f7ff fa2a 	bl	8007380 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	4b0a      	ldr	r3, [pc, #40]	@ (8007f5c <vPortFree+0xc0>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4413      	add	r3, r2
 8007f36:	4a09      	ldr	r2, [pc, #36]	@ (8007f5c <vPortFree+0xc0>)
 8007f38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f3a:	6938      	ldr	r0, [r7, #16]
 8007f3c:	f000 f874 	bl	8008028 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f40:	4b07      	ldr	r3, [pc, #28]	@ (8007f60 <vPortFree+0xc4>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3301      	adds	r3, #1
 8007f46:	4a06      	ldr	r2, [pc, #24]	@ (8007f60 <vPortFree+0xc4>)
 8007f48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f4a:	f7ff fa27 	bl	800739c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f4e:	bf00      	nop
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	200012a4 	.word	0x200012a4
 8007f5c:	20001294 	.word	0x20001294
 8007f60:	200012a0 	.word	0x200012a0

08007f64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f6a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007f6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f70:	4b27      	ldr	r3, [pc, #156]	@ (8008010 <prvHeapInit+0xac>)
 8007f72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00c      	beq.n	8007f98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3307      	adds	r3, #7
 8007f82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0307 	bic.w	r3, r3, #7
 8007f8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	4a1f      	ldr	r2, [pc, #124]	@ (8008010 <prvHeapInit+0xac>)
 8007f94:	4413      	add	r3, r2
 8007f96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8008014 <prvHeapInit+0xb0>)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8008014 <prvHeapInit+0xb0>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	4413      	add	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fb0:	2208      	movs	r2, #8
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	1a9b      	subs	r3, r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 0307 	bic.w	r3, r3, #7
 8007fbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4a15      	ldr	r2, [pc, #84]	@ (8008018 <prvHeapInit+0xb4>)
 8007fc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fc6:	4b14      	ldr	r3, [pc, #80]	@ (8008018 <prvHeapInit+0xb4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fce:	4b12      	ldr	r3, [pc, #72]	@ (8008018 <prvHeapInit+0xb4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	1ad2      	subs	r2, r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8008018 <prvHeapInit+0xb4>)
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800801c <prvHeapInit+0xb8>)
 8007ff2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	4a09      	ldr	r2, [pc, #36]	@ (8008020 <prvHeapInit+0xbc>)
 8007ffa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ffc:	4b09      	ldr	r3, [pc, #36]	@ (8008024 <prvHeapInit+0xc0>)
 8007ffe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008002:	601a      	str	r2, [r3, #0]
}
 8008004:	bf00      	nop
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	bc80      	pop	{r7}
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	20000688 	.word	0x20000688
 8008014:	20001288 	.word	0x20001288
 8008018:	20001290 	.word	0x20001290
 800801c:	20001298 	.word	0x20001298
 8008020:	20001294 	.word	0x20001294
 8008024:	200012a4 	.word	0x200012a4

08008028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008030:	4b27      	ldr	r3, [pc, #156]	@ (80080d0 <prvInsertBlockIntoFreeList+0xa8>)
 8008032:	60fb      	str	r3, [r7, #12]
 8008034:	e002      	b.n	800803c <prvInsertBlockIntoFreeList+0x14>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	429a      	cmp	r2, r3
 8008044:	d8f7      	bhi.n	8008036 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	4413      	add	r3, r2
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	429a      	cmp	r2, r3
 8008056:	d108      	bne.n	800806a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	441a      	add	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	441a      	add	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	429a      	cmp	r2, r3
 800807c:	d118      	bne.n	80080b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	4b14      	ldr	r3, [pc, #80]	@ (80080d4 <prvInsertBlockIntoFreeList+0xac>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	429a      	cmp	r2, r3
 8008088:	d00d      	beq.n	80080a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	441a      	add	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	e008      	b.n	80080b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080a6:	4b0b      	ldr	r3, [pc, #44]	@ (80080d4 <prvInsertBlockIntoFreeList+0xac>)
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e003      	b.n	80080b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d002      	beq.n	80080c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080c6:	bf00      	nop
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bc80      	pop	{r7}
 80080ce:	4770      	bx	lr
 80080d0:	20001288 	.word	0x20001288
 80080d4:	20001290 	.word	0x20001290

080080d8 <TMC2209_setdefault>:
static float pid_output = 0;
static float pid_fraction = 0;
static uint32_t pid_last_time = 0;

void TMC2209_setdefault()
{
 80080d8:	b480      	push	{r7}
 80080da:	af00      	add	r7, sp, #0
	gconfConfig.I_scale_analog = TRUE;
 80080dc:	4a08      	ldr	r2, [pc, #32]	@ (8008100 <TMC2209_setdefault+0x28>)
 80080de:	7813      	ldrb	r3, [r2, #0]
 80080e0:	f043 0301 	orr.w	r3, r3, #1
 80080e4:	7013      	strb	r3, [r2, #0]
	gconfConfig.multistep_filt = TRUE;
 80080e6:	4a06      	ldr	r2, [pc, #24]	@ (8008100 <TMC2209_setdefault+0x28>)
 80080e8:	7853      	ldrb	r3, [r2, #1]
 80080ea:	f043 0301 	orr.w	r3, r3, #1
 80080ee:	7053      	strb	r3, [r2, #1]
	chopConfig.bytes = CHOPPER_CONFIG_DEFAULT;
 80080f0:	4a04      	ldr	r2, [pc, #16]	@ (8008104 <TMC2209_setdefault+0x2c>)
 80080f2:	4b05      	ldr	r3, [pc, #20]	@ (8008108 <TMC2209_setdefault+0x30>)
 80080f4:	601a      	str	r2, [r3, #0]
}
 80080f6:	bf00      	nop
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	200012ac 	.word	0x200012ac
 8008104:	10000053 	.word	0x10000053
 8008108:	200012a8 	.word	0x200012a8

0800810c <TMC2209_setup>:

void TMC2209_setup()
{
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
	TMC2209_setdefault();
 8008110:	f7ff ffe2 	bl	80080d8 <TMC2209_setdefault>
	gconfConfig.bytes = FALSE;
 8008114:	4b17      	ldr	r3, [pc, #92]	@ (8008174 <TMC2209_setup+0x68>)
 8008116:	2200      	movs	r2, #0
 8008118:	601a      	str	r2, [r3, #0]
	gconfConfig.I_scale_analog = TRUE;
 800811a:	4a16      	ldr	r2, [pc, #88]	@ (8008174 <TMC2209_setup+0x68>)
 800811c:	7813      	ldrb	r3, [r2, #0]
 800811e:	f043 0301 	orr.w	r3, r3, #1
 8008122:	7013      	strb	r3, [r2, #0]
	gconfConfig.pdn_disable = TRUE;
 8008124:	4a13      	ldr	r2, [pc, #76]	@ (8008174 <TMC2209_setup+0x68>)
 8008126:	7813      	ldrb	r3, [r2, #0]
 8008128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800812c:	7013      	strb	r3, [r2, #0]
	gconfConfig.multistep_filt = TRUE;
 800812e:	4a11      	ldr	r2, [pc, #68]	@ (8008174 <TMC2209_setup+0x68>)
 8008130:	7853      	ldrb	r3, [r2, #1]
 8008132:	f043 0301 	orr.w	r3, r3, #1
 8008136:	7053      	strb	r3, [r2, #1]
	gconfConfig.mstep_reg_select = TRUE;
 8008138:	4a0e      	ldr	r2, [pc, #56]	@ (8008174 <TMC2209_setup+0x68>)
 800813a:	7813      	ldrb	r3, [r2, #0]
 800813c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008140:	7013      	strb	r3, [r2, #0]

	slaveConfig.conf = 0x00;
 8008142:	4a0d      	ldr	r2, [pc, #52]	@ (8008178 <TMC2209_setup+0x6c>)
 8008144:	7853      	ldrb	r3, [r2, #1]
 8008146:	f36f 0303 	bfc	r3, #0, #4
 800814a:	7053      	strb	r3, [r2, #1]

	TMC2209_HAL_Write(TMC2209Reg_GCONF, gconfConfig.bytes);
 800814c:	4b09      	ldr	r3, [pc, #36]	@ (8008174 <TMC2209_setup+0x68>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4619      	mov	r1, r3
 8008152:	2000      	movs	r0, #0
 8008154:	f000 fb3e 	bl	80087d4 <TMC2209_HAL_Write>
	TMC2209_HAL_Write(TMC2209Reg_SLAVECONF, slaveConfig.bytes);
 8008158:	4b07      	ldr	r3, [pc, #28]	@ (8008178 <TMC2209_setup+0x6c>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4619      	mov	r1, r3
 800815e:	2003      	movs	r0, #3
 8008160:	f000 fb38 	bl	80087d4 <TMC2209_HAL_Write>
//	TMC2209_setMicrostep(TMC2209_Microsteps_1);
	TMC2209_disable();
 8008164:	f000 f832 	bl	80081cc <TMC2209_disable>
	HAL_Delay(100);
 8008168:	2064      	movs	r0, #100	@ 0x64
 800816a:	f7f9 fe39 	bl	8001de0 <HAL_Delay>
}
 800816e:	bf00      	nop
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	200012ac 	.word	0x200012ac
 8008178:	200012b0 	.word	0x200012b0

0800817c <TMC2209_enable>:

void TMC2209_enable()
{
 800817c:	b580      	push	{r7, lr}
 800817e:	af00      	add	r7, sp, #0
	if(Driver_Enable == FALSE){
 8008180:	4b0e      	ldr	r3, [pc, #56]	@ (80081bc <TMC2209_enable+0x40>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d117      	bne.n	80081b8 <TMC2209_enable+0x3c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8008188:	2200      	movs	r2, #0
 800818a:	2104      	movs	r1, #4
 800818c:	480c      	ldr	r0, [pc, #48]	@ (80081c0 <TMC2209_enable+0x44>)
 800818e:	f7fa fad1 	bl	8002734 <HAL_GPIO_WritePin>
		Driver_Enable = TRUE;
 8008192:	4b0a      	ldr	r3, [pc, #40]	@ (80081bc <TMC2209_enable+0x40>)
 8008194:	2201      	movs	r2, #1
 8008196:	701a      	strb	r2, [r3, #0]
		chopConfig.toff = toff_;
 8008198:	4b0a      	ldr	r3, [pc, #40]	@ (80081c4 <TMC2209_enable+0x48>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	f003 030f 	and.w	r3, r3, #15
 80081a0:	b2d9      	uxtb	r1, r3
 80081a2:	4a09      	ldr	r2, [pc, #36]	@ (80081c8 <TMC2209_enable+0x4c>)
 80081a4:	7813      	ldrb	r3, [r2, #0]
 80081a6:	f361 0303 	bfi	r3, r1, #0, #4
 80081aa:	7013      	strb	r3, [r2, #0]
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 80081ac:	4b06      	ldr	r3, [pc, #24]	@ (80081c8 <TMC2209_enable+0x4c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4619      	mov	r1, r3
 80081b2:	206c      	movs	r0, #108	@ 0x6c
 80081b4:	f000 fb0e 	bl	80087d4 <TMC2209_HAL_Write>
	}
}
 80081b8:	bf00      	nop
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	200012b4 	.word	0x200012b4
 80081c0:	40010800 	.word	0x40010800
 80081c4:	20000018 	.word	0x20000018
 80081c8:	200012a8 	.word	0x200012a8

080081cc <TMC2209_disable>:

void TMC2209_disable()
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	af00      	add	r7, sp, #0
	if(Driver_Enable == TRUE){
 80081d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008204 <TMC2209_disable+0x38>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d112      	bne.n	80081fe <TMC2209_disable+0x32>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80081d8:	2201      	movs	r2, #1
 80081da:	2104      	movs	r1, #4
 80081dc:	480a      	ldr	r0, [pc, #40]	@ (8008208 <TMC2209_disable+0x3c>)
 80081de:	f7fa faa9 	bl	8002734 <HAL_GPIO_WritePin>
		Driver_Enable = FALSE;
 80081e2:	4b08      	ldr	r3, [pc, #32]	@ (8008204 <TMC2209_disable+0x38>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	701a      	strb	r2, [r3, #0]
		chopConfig.toff = TOFF_DISABLE;
 80081e8:	4a08      	ldr	r2, [pc, #32]	@ (800820c <TMC2209_disable+0x40>)
 80081ea:	7813      	ldrb	r3, [r2, #0]
 80081ec:	f36f 0303 	bfc	r3, #0, #4
 80081f0:	7013      	strb	r3, [r2, #0]
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 80081f2:	4b06      	ldr	r3, [pc, #24]	@ (800820c <TMC2209_disable+0x40>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4619      	mov	r1, r3
 80081f8:	206c      	movs	r0, #108	@ 0x6c
 80081fa:	f000 faeb 	bl	80087d4 <TMC2209_HAL_Write>
	}
}
 80081fe:	bf00      	nop
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	200012b4 	.word	0x200012b4
 8008208:	40010800 	.word	0x40010800
 800820c:	200012a8 	.word	0x200012a8

08008210 <TMC2209_setMicrostep>:

void TMC2209_setMicrostep(TMC2209_Microstep Microstep)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	4603      	mov	r3, r0
 8008218:	71fb      	strb	r3, [r7, #7]
	chopConfig.mres = Microstep;
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	f003 030f 	and.w	r3, r3, #15
 8008220:	b2d9      	uxtb	r1, r3
 8008222:	4a14      	ldr	r2, [pc, #80]	@ (8008274 <TMC2209_setMicrostep+0x64>)
 8008224:	78d3      	ldrb	r3, [r2, #3]
 8008226:	f361 0303 	bfi	r3, r1, #0, #4
 800822a:	70d3      	strb	r3, [r2, #3]
	TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 800822c:	4b11      	ldr	r3, [pc, #68]	@ (8008274 <TMC2209_setMicrostep+0x64>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4619      	mov	r1, r3
 8008232:	206c      	movs	r0, #108	@ 0x6c
 8008234:	f000 face 	bl	80087d4 <TMC2209_HAL_Write>
	active_microstep = pow(2, abs(Microstep - TMC2209_Microsteps_1));
 8008238:	79fb      	ldrb	r3, [r7, #7]
 800823a:	3b08      	subs	r3, #8
 800823c:	2b00      	cmp	r3, #0
 800823e:	bfb8      	it	lt
 8008240:	425b      	neglt	r3, r3
 8008242:	4618      	mov	r0, r3
 8008244:	f7f8 f8d6 	bl	80003f4 <__aeabi_i2d>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	f04f 0000 	mov.w	r0, #0
 8008250:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008254:	f000 fbda 	bl	8008a0c <pow>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4610      	mov	r0, r2
 800825e:	4619      	mov	r1, r3
 8008260:	f7f8 fbe2 	bl	8000a28 <__aeabi_d2uiz>
 8008264:	4603      	mov	r3, r0
 8008266:	b2da      	uxtb	r2, r3
 8008268:	4b03      	ldr	r3, [pc, #12]	@ (8008278 <TMC2209_setMicrostep+0x68>)
 800826a:	701a      	strb	r2, [r3, #0]
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	200012a8 	.word	0x200012a8
 8008278:	200012b5 	.word	0x200012b5

0800827c <TMC2209_velocity>:
	TMC2209_HAL_Read(TMC2209Reg_CHOPCONF, &buffer);
	*result = buffer;
}

void TMC2209_velocity(float velocity)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
	float frequency = 0.0f;
 8008284:	f04f 0300 	mov.w	r3, #0
 8008288:	613b      	str	r3, [r7, #16]
	uint16_t desired_period = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	81fb      	strh	r3, [r7, #14]
	uint16_t prescaller = TMC2209_DEFAULT_PRESCALLER;
 800828e:	2348      	movs	r3, #72	@ 0x48
 8008290:	82fb      	strh	r3, [r7, #22]

	if(vel_now == velocity) return;
 8008292:	4b3d      	ldr	r3, [pc, #244]	@ (8008388 <TMC2209_velocity+0x10c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7f8 fed7 	bl	800104c <__aeabi_fcmpeq>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d16c      	bne.n	800837e <TMC2209_velocity+0x102>
	if(velocity <= 0) {
 80082a4:	f04f 0100 	mov.w	r1, #0
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f7f8 fee3 	bl	8001074 <__aeabi_fcmple>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d100      	bne.n	80082b6 <TMC2209_velocity+0x3a>
 80082b4:	e007      	b.n	80082c6 <TMC2209_velocity+0x4a>
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80082b6:	2100      	movs	r1, #0
 80082b8:	4834      	ldr	r0, [pc, #208]	@ (800838c <TMC2209_velocity+0x110>)
 80082ba:	f7fd f8ff 	bl	80054bc <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 80082be:	4b34      	ldr	r3, [pc, #208]	@ (8008390 <TMC2209_velocity+0x114>)
 80082c0:	2201      	movs	r2, #1
 80082c2:	701a      	strb	r2, [r3, #0]
		return;
 80082c4:	e05c      	b.n	8008380 <TMC2209_velocity+0x104>
	}

	while(TRUE){
		frequency  = (velocity * (STEP_PER_REV * active_microstep)) / 60;
 80082c6:	4b33      	ldr	r3, [pc, #204]	@ (8008394 <TMC2209_velocity+0x118>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	23c8      	movs	r3, #200	@ 0xc8
 80082ce:	fb02 f303 	mul.w	r3, r2, r3
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7f8 fcd2 	bl	8000c7c <__aeabi_i2f>
 80082d8:	4603      	mov	r3, r0
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	4618      	mov	r0, r3
 80082de:	f7f8 fd21 	bl	8000d24 <__aeabi_fmul>
 80082e2:	4603      	mov	r3, r0
 80082e4:	492c      	ldr	r1, [pc, #176]	@ (8008398 <TMC2209_velocity+0x11c>)
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7f8 fdd0 	bl	8000e8c <__aeabi_fdiv>
 80082ec:	4603      	mov	r3, r0
 80082ee:	613b      	str	r3, [r7, #16]
		if(((TMC2209_BASE_FREQ / prescaller) / frequency) > MAX_CNT_PERIOD){
 80082f0:	8afb      	ldrh	r3, [r7, #22]
 80082f2:	4a2a      	ldr	r2, [pc, #168]	@ (800839c <TMC2209_velocity+0x120>)
 80082f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7f8 fcbf 	bl	8000c7c <__aeabi_i2f>
 80082fe:	4603      	mov	r3, r0
 8008300:	6939      	ldr	r1, [r7, #16]
 8008302:	4618      	mov	r0, r3
 8008304:	f7f8 fdc2 	bl	8000e8c <__aeabi_fdiv>
 8008308:	4603      	mov	r3, r0
 800830a:	4925      	ldr	r1, [pc, #148]	@ (80083a0 <TMC2209_velocity+0x124>)
 800830c:	4618      	mov	r0, r3
 800830e:	f7f8 fec5 	bl	800109c <__aeabi_fcmpgt>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <TMC2209_velocity+0xa4>
			prescaller += TMC2209_DEFAULT_PRESCALLER;
 8008318:	8afb      	ldrh	r3, [r7, #22]
 800831a:	3348      	adds	r3, #72	@ 0x48
 800831c:	82fb      	strh	r3, [r7, #22]
			continue;
 800831e:	e02d      	b.n	800837c <TMC2209_velocity+0x100>
		}
		desired_period = (uint16_t)round((TMC2209_BASE_FREQ / prescaller) / frequency);
 8008320:	8afb      	ldrh	r3, [r7, #22]
 8008322:	4a1e      	ldr	r2, [pc, #120]	@ (800839c <TMC2209_velocity+0x120>)
 8008324:	fb92 f3f3 	sdiv	r3, r2, r3
 8008328:	4618      	mov	r0, r3
 800832a:	f7f8 fca7 	bl	8000c7c <__aeabi_i2f>
 800832e:	4603      	mov	r3, r0
 8008330:	6939      	ldr	r1, [r7, #16]
 8008332:	4618      	mov	r0, r3
 8008334:	f7f8 fdaa 	bl	8000e8c <__aeabi_fdiv>
 8008338:	4603      	mov	r3, r0
 800833a:	4618      	mov	r0, r3
 800833c:	f7f8 f86c 	bl	8000418 <__aeabi_f2d>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4610      	mov	r0, r2
 8008346:	4619      	mov	r1, r3
 8008348:	f000 fc12 	bl	8008b70 <round>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	4610      	mov	r0, r2
 8008352:	4619      	mov	r1, r3
 8008354:	f7f8 fb68 	bl	8000a28 <__aeabi_d2uiz>
 8008358:	4603      	mov	r3, r0
 800835a:	81fb      	strh	r3, [r7, #14]
		break;
 800835c:	bf00      	nop
	}

	__HAL_TIM_SET_PRESCALER(&htim2, prescaller);
 800835e:	4b0b      	ldr	r3, [pc, #44]	@ (800838c <TMC2209_velocity+0x110>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	8afa      	ldrh	r2, [r7, #22]
 8008364:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim2, desired_period);
 8008366:	4b09      	ldr	r3, [pc, #36]	@ (800838c <TMC2209_velocity+0x110>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	89fa      	ldrh	r2, [r7, #14]
 800836c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800836e:	89fb      	ldrh	r3, [r7, #14]
 8008370:	4a06      	ldr	r2, [pc, #24]	@ (800838c <TMC2209_velocity+0x110>)
 8008372:	60d3      	str	r3, [r2, #12]
	vel_now = velocity;
 8008374:	4a04      	ldr	r2, [pc, #16]	@ (8008388 <TMC2209_velocity+0x10c>)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6013      	str	r3, [r2, #0]
 800837a:	e001      	b.n	8008380 <TMC2209_velocity+0x104>
		frequency  = (velocity * (STEP_PER_REV * active_microstep)) / 60;
 800837c:	e7a3      	b.n	80082c6 <TMC2209_velocity+0x4a>
	if(vel_now == velocity) return;
 800837e:	bf00      	nop
}
 8008380:	3718      	adds	r7, #24
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	200012b8 	.word	0x200012b8
 800838c:	20000438 	.word	0x20000438
 8008390:	20000019 	.word	0x20000019
 8008394:	200012b5 	.word	0x200012b5
 8008398:	42700000 	.word	0x42700000
 800839c:	044aa200 	.word	0x044aa200
 80083a0:	477fff00 	.word	0x477fff00

080083a4 <TMC2209_move>:

void TMC2209_move(){
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
	if(PWM_Pulse_Complete == TRUE){
 80083a8:	4b06      	ldr	r3, [pc, #24]	@ (80083c4 <TMC2209_move+0x20>)
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d106      	bne.n	80083be <TMC2209_move+0x1a>
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80083b0:	2100      	movs	r1, #0
 80083b2:	4805      	ldr	r0, [pc, #20]	@ (80083c8 <TMC2209_move+0x24>)
 80083b4:	f7fc ff92 	bl	80052dc <HAL_TIM_PWM_Start_IT>
		PWM_Pulse_Complete = FALSE;
 80083b8:	4b02      	ldr	r3, [pc, #8]	@ (80083c4 <TMC2209_move+0x20>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	701a      	strb	r2, [r3, #0]
	}
}
 80083be:	bf00      	nop
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20000019 	.word	0x20000019
 80083c8:	20000438 	.word	0x20000438

080083cc <TMC2209_direction>:
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
		PWM_Pulse_Complete = TRUE;
	}
}

void TMC2209_direction(uint8_t direction){
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	71fb      	strb	r3, [r7, #7]
	if(direction == rotation_dir) return;
 80083d6:	4b10      	ldr	r3, [pc, #64]	@ (8008418 <TMC2209_direction+0x4c>)
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	79fa      	ldrb	r2, [r7, #7]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d016      	beq.n	800840e <TMC2209_direction+0x42>

	if(direction == TMC2209_ROT_FWD){
 80083e0:	79fb      	ldrb	r3, [r7, #7]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d107      	bne.n	80083f6 <TMC2209_direction+0x2a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80083e6:	2200      	movs	r2, #0
 80083e8:	2102      	movs	r1, #2
 80083ea:	480c      	ldr	r0, [pc, #48]	@ (800841c <TMC2209_direction+0x50>)
 80083ec:	f7fa f9a2 	bl	8002734 <HAL_GPIO_WritePin>
		rotation_dir = TMC2209_ROT_FWD;
 80083f0:	4b09      	ldr	r3, [pc, #36]	@ (8008418 <TMC2209_direction+0x4c>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	701a      	strb	r2, [r3, #0]
	}
	if(direction == TMC2209_ROT_REV){
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d109      	bne.n	8008410 <TMC2209_direction+0x44>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80083fc:	2201      	movs	r2, #1
 80083fe:	2102      	movs	r1, #2
 8008400:	4806      	ldr	r0, [pc, #24]	@ (800841c <TMC2209_direction+0x50>)
 8008402:	f7fa f997 	bl	8002734 <HAL_GPIO_WritePin>
		rotation_dir = TMC2209_ROT_REV;
 8008406:	4b04      	ldr	r3, [pc, #16]	@ (8008418 <TMC2209_direction+0x4c>)
 8008408:	2201      	movs	r2, #1
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	e000      	b.n	8008410 <TMC2209_direction+0x44>
	if(direction == rotation_dir) return;
 800840e:	bf00      	nop
	}
}
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	200012bc 	.word	0x200012bc
 800841c:	40010800 	.word	0x40010800

08008420 <PID_controller>:

void PID_controller(int32_t* setpoint, int32_t *current, float* result){
 8008420:	b5b0      	push	{r4, r5, r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
	uint32_t time_now = HAL_GetTick();
 800842c:	f7f9 fcce 	bl	8001dcc <HAL_GetTick>
 8008430:	6178      	str	r0, [r7, #20]
	if(time_now - pid_last_time >= PID_SAMPLING){
 8008432:	4b77      	ldr	r3, [pc, #476]	@ (8008610 <PID_controller+0x1f0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	2b09      	cmp	r3, #9
 800843c:	f240 80d8 	bls.w	80085f0 <PID_controller+0x1d0>
		pid_error = (float)(*setpoint - *current);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	4618      	mov	r0, r3
 800844c:	f7f8 fc16 	bl	8000c7c <__aeabi_i2f>
 8008450:	4603      	mov	r3, r0
 8008452:	4a70      	ldr	r2, [pc, #448]	@ (8008614 <PID_controller+0x1f4>)
 8008454:	6013      	str	r3, [r2, #0]

		if(fabs(pid_error) < PID_DEADBAND){
 8008456:	4b6f      	ldr	r3, [pc, #444]	@ (8008614 <PID_controller+0x1f4>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800845e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008462:	4618      	mov	r0, r3
 8008464:	f7f8 fdfc 	bl	8001060 <__aeabi_fcmplt>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d004      	beq.n	8008478 <PID_controller+0x58>
			*result = 0;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f04f 0200 	mov.w	r2, #0
 8008474:	601a      	str	r2, [r3, #0]
			return;
 8008476:	e0bb      	b.n	80085f0 <PID_controller+0x1d0>
		}

		if(fabs(pid_error) > PID_INTEGRAL_TRESHOLD){
 8008478:	4b66      	ldr	r3, [pc, #408]	@ (8008614 <PID_controller+0x1f4>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008480:	4965      	ldr	r1, [pc, #404]	@ (8008618 <PID_controller+0x1f8>)
 8008482:	4618      	mov	r0, r3
 8008484:	f7f8 fe0a 	bl	800109c <__aeabi_fcmpgt>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d026      	beq.n	80084dc <PID_controller+0xbc>
			pid_integral += pid_error;
 800848e:	4b63      	ldr	r3, [pc, #396]	@ (800861c <PID_controller+0x1fc>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a60      	ldr	r2, [pc, #384]	@ (8008614 <PID_controller+0x1f4>)
 8008494:	6812      	ldr	r2, [r2, #0]
 8008496:	4611      	mov	r1, r2
 8008498:	4618      	mov	r0, r3
 800849a:	f7f8 fb3b 	bl	8000b14 <__addsf3>
 800849e:	4603      	mov	r3, r0
 80084a0:	461a      	mov	r2, r3
 80084a2:	4b5e      	ldr	r3, [pc, #376]	@ (800861c <PID_controller+0x1fc>)
 80084a4:	601a      	str	r2, [r3, #0]
			if(pid_integral > PID_INTEGRAL_MAX) pid_integral = PID_INTEGRAL_MAX;
 80084a6:	4b5d      	ldr	r3, [pc, #372]	@ (800861c <PID_controller+0x1fc>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	495d      	ldr	r1, [pc, #372]	@ (8008620 <PID_controller+0x200>)
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7f8 fdf5 	bl	800109c <__aeabi_fcmpgt>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <PID_controller+0x9e>
 80084b8:	4b58      	ldr	r3, [pc, #352]	@ (800861c <PID_controller+0x1fc>)
 80084ba:	4a59      	ldr	r2, [pc, #356]	@ (8008620 <PID_controller+0x200>)
 80084bc:	601a      	str	r2, [r3, #0]
			if(pid_integral < PID_INTEGRAL_MIN) pid_integral = PID_INTEGRAL_MIN;
 80084be:	4b57      	ldr	r3, [pc, #348]	@ (800861c <PID_controller+0x1fc>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f04f 0100 	mov.w	r1, #0
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7f8 fdca 	bl	8001060 <__aeabi_fcmplt>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d008      	beq.n	80084e4 <PID_controller+0xc4>
 80084d2:	4b52      	ldr	r3, [pc, #328]	@ (800861c <PID_controller+0x1fc>)
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	e003      	b.n	80084e4 <PID_controller+0xc4>
		}else{
			pid_integral = 0;
 80084dc:	4b4f      	ldr	r3, [pc, #316]	@ (800861c <PID_controller+0x1fc>)
 80084de:	f04f 0200 	mov.w	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
		}

		float direvative = (pid_error - pid_last_error) / (time_now - pid_last_time);
 80084e4:	4b4b      	ldr	r3, [pc, #300]	@ (8008614 <PID_controller+0x1f4>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a4e      	ldr	r2, [pc, #312]	@ (8008624 <PID_controller+0x204>)
 80084ea:	6812      	ldr	r2, [r2, #0]
 80084ec:	4611      	mov	r1, r2
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7f8 fb0e 	bl	8000b10 <__aeabi_fsub>
 80084f4:	4603      	mov	r3, r0
 80084f6:	461c      	mov	r4, r3
 80084f8:	4b45      	ldr	r3, [pc, #276]	@ (8008610 <PID_controller+0x1f0>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	4618      	mov	r0, r3
 8008502:	f7f8 fbb7 	bl	8000c74 <__aeabi_ui2f>
 8008506:	4603      	mov	r3, r0
 8008508:	4619      	mov	r1, r3
 800850a:	4620      	mov	r0, r4
 800850c:	f7f8 fcbe 	bl	8000e8c <__aeabi_fdiv>
 8008510:	4603      	mov	r3, r0
 8008512:	613b      	str	r3, [r7, #16]
		pid_direvative = (pid_direvative * 0.9f) + (direvative * 0.1f);
 8008514:	4b44      	ldr	r3, [pc, #272]	@ (8008628 <PID_controller+0x208>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4944      	ldr	r1, [pc, #272]	@ (800862c <PID_controller+0x20c>)
 800851a:	4618      	mov	r0, r3
 800851c:	f7f8 fc02 	bl	8000d24 <__aeabi_fmul>
 8008520:	4603      	mov	r3, r0
 8008522:	461c      	mov	r4, r3
 8008524:	4942      	ldr	r1, [pc, #264]	@ (8008630 <PID_controller+0x210>)
 8008526:	6938      	ldr	r0, [r7, #16]
 8008528:	f7f8 fbfc 	bl	8000d24 <__aeabi_fmul>
 800852c:	4603      	mov	r3, r0
 800852e:	4619      	mov	r1, r3
 8008530:	4620      	mov	r0, r4
 8008532:	f7f8 faef 	bl	8000b14 <__addsf3>
 8008536:	4603      	mov	r3, r0
 8008538:	461a      	mov	r2, r3
 800853a:	4b3b      	ldr	r3, [pc, #236]	@ (8008628 <PID_controller+0x208>)
 800853c:	601a      	str	r2, [r3, #0]

		pid_output = (PID_KP * pid_error) + (PID_KI * pid_integral) + (PID_KD * pid_direvative);
 800853e:	4b35      	ldr	r3, [pc, #212]	@ (8008614 <PID_controller+0x1f4>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4618      	mov	r0, r3
 8008544:	f7f7 ff68 	bl	8000418 <__aeabi_f2d>
 8008548:	a32b      	add	r3, pc, #172	@ (adr r3, 80085f8 <PID_controller+0x1d8>)
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	f7f7 ffbb 	bl	80004c8 <__aeabi_dmul>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4614      	mov	r4, r2
 8008558:	461d      	mov	r5, r3
 800855a:	4b30      	ldr	r3, [pc, #192]	@ (800861c <PID_controller+0x1fc>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4618      	mov	r0, r3
 8008560:	f7f7 ff5a 	bl	8000418 <__aeabi_f2d>
 8008564:	a326      	add	r3, pc, #152	@ (adr r3, 8008600 <PID_controller+0x1e0>)
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	f7f7 ffad 	bl	80004c8 <__aeabi_dmul>
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	4620      	mov	r0, r4
 8008574:	4629      	mov	r1, r5
 8008576:	f7f7 fdf1 	bl	800015c <__adddf3>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	4614      	mov	r4, r2
 8008580:	461d      	mov	r5, r3
 8008582:	4b29      	ldr	r3, [pc, #164]	@ (8008628 <PID_controller+0x208>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4618      	mov	r0, r3
 8008588:	f7f7 ff46 	bl	8000418 <__aeabi_f2d>
 800858c:	a31e      	add	r3, pc, #120	@ (adr r3, 8008608 <PID_controller+0x1e8>)
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	f7f7 ff99 	bl	80004c8 <__aeabi_dmul>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4620      	mov	r0, r4
 800859c:	4629      	mov	r1, r5
 800859e:	f7f7 fddd 	bl	800015c <__adddf3>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4610      	mov	r0, r2
 80085a8:	4619      	mov	r1, r3
 80085aa:	f7f8 fa5d 	bl	8000a68 <__aeabi_d2f>
 80085ae:	4603      	mov	r3, r0
 80085b0:	4a20      	ldr	r2, [pc, #128]	@ (8008634 <PID_controller+0x214>)
 80085b2:	6013      	str	r3, [r2, #0]

		pid_last_error = pid_error;
 80085b4:	4b17      	ldr	r3, [pc, #92]	@ (8008614 <PID_controller+0x1f4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a1a      	ldr	r2, [pc, #104]	@ (8008624 <PID_controller+0x204>)
 80085ba:	6013      	str	r3, [r2, #0]
		pid_last_time = time_now;
 80085bc:	4a14      	ldr	r2, [pc, #80]	@ (8008610 <PID_controller+0x1f0>)
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	6013      	str	r3, [r2, #0]

		*result = fmaxf(0.0f, fminf(1.0f, fabs(pid_output / PID_MAX)));
 80085c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008634 <PID_controller+0x214>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	491c      	ldr	r1, [pc, #112]	@ (8008638 <PID_controller+0x218>)
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7f8 fc5f 	bl	8000e8c <__aeabi_fdiv>
 80085ce:	4603      	mov	r3, r0
 80085d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085d4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fa9a 	bl	8008b12 <fminf>
 80085de:	4603      	mov	r3, r0
 80085e0:	f04f 0100 	mov.w	r1, #0
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 fa7f 	bl	8008ae8 <fmaxf>
 80085ea:	4602      	mov	r2, r0
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	601a      	str	r2, [r3, #0]
	}
}
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bdb0      	pop	{r4, r5, r7, pc}
 80085f6:	bf00      	nop
 80085f8:	39405e45 	.word	0x39405e45
 80085fc:	40248aac 	.word	0x40248aac
 8008600:	7c58147b 	.word	0x7c58147b
 8008604:	403772f2 	.word	0x403772f2
 8008608:	bb11e265 	.word	0xbb11e265
 800860c:	40215068 	.word	0x40215068
 8008610:	200012dc 	.word	0x200012dc
 8008614:	200012c4 	.word	0x200012c4
 8008618:	42480000 	.word	0x42480000
 800861c:	200012cc 	.word	0x200012cc
 8008620:	49742400 	.word	0x49742400
 8008624:	200012c8 	.word	0x200012c8
 8008628:	200012d0 	.word	0x200012d0
 800862c:	3f666666 	.word	0x3f666666
 8008630:	3dcccccd 	.word	0x3dcccccd
 8008634:	200012d4 	.word	0x200012d4
 8008638:	47c35000 	.word	0x47c35000

0800863c <TMC2209_watchPosition>:
void TMC2209_watchPosition(int32_t* target, int32_t* counter, float* speed){
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]

	PID_controller(target, counter, &pid_fraction);
 8008648:	4a1e      	ldr	r2, [pc, #120]	@ (80086c4 <TMC2209_watchPosition+0x88>)
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f7ff fee7 	bl	8008420 <PID_controller>

	if(*counter > *target) TMC2209_direction(TMC2209_ROT_FWD);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	429a      	cmp	r2, r3
 800865c:	dd02      	ble.n	8008664 <TMC2209_watchPosition+0x28>
 800865e:	2000      	movs	r0, #0
 8008660:	f7ff feb4 	bl	80083cc <TMC2209_direction>
	if(*counter < *target) TMC2209_direction(TMC2209_ROT_REV);
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	429a      	cmp	r2, r3
 800866e:	da02      	bge.n	8008676 <TMC2209_watchPosition+0x3a>
 8008670:	2001      	movs	r0, #1
 8008672:	f7ff feab 	bl	80083cc <TMC2209_direction>

	if(abs(*target - *counter) > 100){
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	bfb8      	it	lt
 8008684:	425b      	neglt	r3, r3
 8008686:	2b64      	cmp	r3, #100	@ 0x64
 8008688:	dd07      	ble.n	800869a <TMC2209_watchPosition+0x5e>
		if(active_microstep != TMC2209_Microsteps_1){
 800868a:	4b0f      	ldr	r3, [pc, #60]	@ (80086c8 <TMC2209_watchPosition+0x8c>)
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	2b08      	cmp	r3, #8
 8008690:	d00a      	beq.n	80086a8 <TMC2209_watchPosition+0x6c>
			TMC2209_setMicrostep(TMC2209_Microsteps_1);
 8008692:	2008      	movs	r0, #8
 8008694:	f7ff fdbc 	bl	8008210 <TMC2209_setMicrostep>
 8008698:	e006      	b.n	80086a8 <TMC2209_watchPosition+0x6c>
		}
	}else{
		if(active_microstep != TMC2209_Microsteps_64){
 800869a:	4b0b      	ldr	r3, [pc, #44]	@ (80086c8 <TMC2209_watchPosition+0x8c>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d002      	beq.n	80086a8 <TMC2209_watchPosition+0x6c>
			TMC2209_setMicrostep(TMC2209_Microsteps_64);
 80086a2:	2002      	movs	r0, #2
 80086a4:	f7ff fdb4 	bl	8008210 <TMC2209_setMicrostep>
		}
	}
	*speed = pid_fraction * MAX_SPEED;
 80086a8:	4b06      	ldr	r3, [pc, #24]	@ (80086c4 <TMC2209_watchPosition+0x88>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4907      	ldr	r1, [pc, #28]	@ (80086cc <TMC2209_watchPosition+0x90>)
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7f8 fb38 	bl	8000d24 <__aeabi_fmul>
 80086b4:	4603      	mov	r3, r0
 80086b6:	461a      	mov	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	601a      	str	r2, [r3, #0]

}
 80086bc:	bf00      	nop
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	200012d8 	.word	0x200012d8
 80086c8:	200012b5 	.word	0x200012b5
 80086cc:	43700000 	.word	0x43700000

080086d0 <HAL_TIM_PWM_PulseFinishedCallback>:
		}
	}
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086e0:	d104      	bne.n	80086ec <HAL_TIM_PWM_PulseFinishedCallback+0x1c>
		stepCounter ++;
 80086e2:	4b05      	ldr	r3, [pc, #20]	@ (80086f8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3301      	adds	r3, #1
 80086e8:	4a03      	ldr	r2, [pc, #12]	@ (80086f8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80086ea:	6013      	str	r3, [r2, #0]
	}
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bc80      	pop	{r7}
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	200012c0 	.word	0x200012c0

080086fc <calculateCRC>:
#include "../Inc/TMC2209_HAL.h"

extern UART_HandleTypeDef huart1;

static void calculateCRC(uint8_t* datagram, uint8_t datagram_len)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	460b      	mov	r3, r1
 8008706:	70fb      	strb	r3, [r7, #3]
	int i,j;
	uint8_t *crc = datagram + (datagram_len - 1);
 8008708:	78fb      	ldrb	r3, [r7, #3]
 800870a:	3b01      	subs	r3, #1
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	4413      	add	r3, r2
 8008710:	60bb      	str	r3, [r7, #8]
	uint8_t currentByte;
	*crc = 0;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	2200      	movs	r2, #0
 8008716:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (datagram_len - 1); i++) {
 8008718:	2300      	movs	r3, #0
 800871a:	617b      	str	r3, [r7, #20]
 800871c:	e02e      	b.n	800877c <calculateCRC+0x80>
		currentByte = datagram[i];
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	4413      	add	r3, r2
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < 8; j++) {
 8008728:	2300      	movs	r3, #0
 800872a:	613b      	str	r3, [r7, #16]
 800872c:	e020      	b.n	8008770 <calculateCRC+0x74>
			if ((*crc >> 7) ^ (currentByte & 0x01))
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	09db      	lsrs	r3, r3, #7
 8008734:	b2db      	uxtb	r3, r3
 8008736:	461a      	mov	r2, r3
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	429a      	cmp	r2, r3
 8008740:	d00a      	beq.n	8008758 <calculateCRC+0x5c>
				*crc = (*crc << 1) ^ 0x07;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	005b      	lsls	r3, r3, #1
 8008748:	b25b      	sxtb	r3, r3
 800874a:	f083 0307 	eor.w	r3, r3, #7
 800874e:	b25b      	sxtb	r3, r3
 8008750:	b2da      	uxtb	r2, r3
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	701a      	strb	r2, [r3, #0]
 8008756:	e005      	b.n	8008764 <calculateCRC+0x68>
			else
				*crc = (*crc << 1);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	b2da      	uxtb	r2, r3
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	701a      	strb	r2, [r3, #0]
			currentByte = currentByte >> 1;
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	085b      	lsrs	r3, r3, #1
 8008768:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < 8; j++) {
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	3301      	adds	r3, #1
 800876e:	613b      	str	r3, [r7, #16]
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	2b07      	cmp	r3, #7
 8008774:	dddb      	ble.n	800872e <calculateCRC+0x32>
	for (i = 0; i < (datagram_len - 1); i++) {
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	3301      	adds	r3, #1
 800877a:	617b      	str	r3, [r7, #20]
 800877c:	78fb      	ldrb	r3, [r7, #3]
 800877e:	3b01      	subs	r3, #1
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	429a      	cmp	r2, r3
 8008784:	dbcb      	blt.n	800871e <calculateCRC+0x22>
		}
	}
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	371c      	adds	r7, #28
 800878c:	46bd      	mov	sp, r7
 800878e:	bc80      	pop	{r7}
 8008790:	4770      	bx	lr

08008792 <byteswap>:
static void byteswap (uint8_t data[4])
{
 8008792:	b480      	push	{r7}
 8008794:	b085      	sub	sp, #20
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
    uint8_t tmp;

    tmp = data[0];
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	73fb      	strb	r3, [r7, #15]
    data[0] = data[3];
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	78da      	ldrb	r2, [r3, #3]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	701a      	strb	r2, [r3, #0]
    data[3] = tmp;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3303      	adds	r3, #3
 80087ac:	7bfa      	ldrb	r2, [r7, #15]
 80087ae:	701a      	strb	r2, [r3, #0]
    tmp = data[1];
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	785b      	ldrb	r3, [r3, #1]
 80087b4:	73fb      	strb	r3, [r7, #15]
    data[1] = data[2];
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	3301      	adds	r3, #1
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	7892      	ldrb	r2, [r2, #2]
 80087be:	701a      	strb	r2, [r3, #0]
    data[2] = tmp;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3302      	adds	r3, #2
 80087c4:	7bfa      	ldrb	r2, [r7, #15]
 80087c6:	701a      	strb	r2, [r3, #0]
}
 80087c8:	bf00      	nop
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bc80      	pop	{r7}
 80087d0:	4770      	bx	lr
	...

080087d4 <TMC2209_HAL_Write>:

HAL_StatusTypeDef TMC2209_HAL_Write(uint8_t reg, uint32_t data)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	4603      	mov	r3, r0
 80087dc:	6039      	str	r1, [r7, #0]
 80087de:	71fb      	strb	r3, [r7, #7]
	TMC2209_Write_Datagram_t datagram;
	datagram.data = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	2300      	movs	r3, #0
 80087e6:	613b      	str	r3, [r7, #16]
	datagram.message.sync = 0x05;
 80087e8:	2305      	movs	r3, #5
 80087ea:	733b      	strb	r3, [r7, #12]
	datagram.message.slave = 0x00;
 80087ec:	2300      	movs	r3, #0
 80087ee:	737b      	strb	r3, [r7, #13]
	datagram.message.address.idx = reg;
 80087f0:	79fb      	ldrb	r3, [r7, #7]
 80087f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	f362 0306 	bfi	r3, r2, #0, #7
 80087fe:	73bb      	strb	r3, [r7, #14]
	datagram.message.address.write = REG_WRITE;
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008806:	73bb      	strb	r3, [r7, #14]
	datagram.message.payload.value = data;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	f8c7 300f 	str.w	r3, [r7, #15]
	byteswap(datagram.message.payload.data);
 800880e:	f107 030c 	add.w	r3, r7, #12
 8008812:	3303      	adds	r3, #3
 8008814:	4618      	mov	r0, r3
 8008816:	f7ff ffbc 	bl	8008792 <byteswap>

	calculateCRC(datagram.bytes, sizeof(TMC2209_Write_Datagram_t));
 800881a:	f107 030c 	add.w	r3, r7, #12
 800881e:	2108      	movs	r1, #8
 8008820:	4618      	mov	r0, r3
 8008822:	f7ff ff6b 	bl	80086fc <calculateCRC>
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8008826:	4809      	ldr	r0, [pc, #36]	@ (800884c <TMC2209_HAL_Write+0x78>)
 8008828:	f7fd ff3f 	bl	80066aa <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, datagram.bytes, sizeof(TMC2209_Write_Datagram_t), HAL_MAX_DELAY);
 800882c:	f107 010c 	add.w	r1, r7, #12
 8008830:	f04f 33ff 	mov.w	r3, #4294967295
 8008834:	2208      	movs	r2, #8
 8008836:	4805      	ldr	r0, [pc, #20]	@ (800884c <TMC2209_HAL_Write+0x78>)
 8008838:	f7fd fba2 	bl	8005f80 <HAL_UART_Transmit>
 800883c:	4603      	mov	r3, r0
 800883e:	75fb      	strb	r3, [r7, #23]

	return status;
 8008840:	7dfb      	ldrb	r3, [r7, #23]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3718      	adds	r7, #24
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20000480 	.word	0x20000480

08008850 <__malloc_lock>:
 8008850:	4801      	ldr	r0, [pc, #4]	@ (8008858 <__malloc_lock+0x8>)
 8008852:	f000 b891 	b.w	8008978 <__retarget_lock_acquire_recursive>
 8008856:	bf00      	nop
 8008858:	2000141c 	.word	0x2000141c

0800885c <__malloc_unlock>:
 800885c:	4801      	ldr	r0, [pc, #4]	@ (8008864 <__malloc_unlock+0x8>)
 800885e:	f000 b88c 	b.w	800897a <__retarget_lock_release_recursive>
 8008862:	bf00      	nop
 8008864:	2000141c 	.word	0x2000141c

08008868 <memset>:
 8008868:	4603      	mov	r3, r0
 800886a:	4402      	add	r2, r0
 800886c:	4293      	cmp	r3, r2
 800886e:	d100      	bne.n	8008872 <memset+0xa>
 8008870:	4770      	bx	lr
 8008872:	f803 1b01 	strb.w	r1, [r3], #1
 8008876:	e7f9      	b.n	800886c <memset+0x4>

08008878 <_reclaim_reent>:
 8008878:	4b29      	ldr	r3, [pc, #164]	@ (8008920 <_reclaim_reent+0xa8>)
 800887a:	b570      	push	{r4, r5, r6, lr}
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4604      	mov	r4, r0
 8008880:	4283      	cmp	r3, r0
 8008882:	d04b      	beq.n	800891c <_reclaim_reent+0xa4>
 8008884:	69c3      	ldr	r3, [r0, #28]
 8008886:	b1ab      	cbz	r3, 80088b4 <_reclaim_reent+0x3c>
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	b16b      	cbz	r3, 80088a8 <_reclaim_reent+0x30>
 800888c:	2500      	movs	r5, #0
 800888e:	69e3      	ldr	r3, [r4, #28]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	5959      	ldr	r1, [r3, r5]
 8008894:	2900      	cmp	r1, #0
 8008896:	d13b      	bne.n	8008910 <_reclaim_reent+0x98>
 8008898:	3504      	adds	r5, #4
 800889a:	2d80      	cmp	r5, #128	@ 0x80
 800889c:	d1f7      	bne.n	800888e <_reclaim_reent+0x16>
 800889e:	69e3      	ldr	r3, [r4, #28]
 80088a0:	4620      	mov	r0, r4
 80088a2:	68d9      	ldr	r1, [r3, #12]
 80088a4:	f000 f86a 	bl	800897c <_free_r>
 80088a8:	69e3      	ldr	r3, [r4, #28]
 80088aa:	6819      	ldr	r1, [r3, #0]
 80088ac:	b111      	cbz	r1, 80088b4 <_reclaim_reent+0x3c>
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 f864 	bl	800897c <_free_r>
 80088b4:	6961      	ldr	r1, [r4, #20]
 80088b6:	b111      	cbz	r1, 80088be <_reclaim_reent+0x46>
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 f85f 	bl	800897c <_free_r>
 80088be:	69e1      	ldr	r1, [r4, #28]
 80088c0:	b111      	cbz	r1, 80088c8 <_reclaim_reent+0x50>
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 f85a 	bl	800897c <_free_r>
 80088c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80088ca:	b111      	cbz	r1, 80088d2 <_reclaim_reent+0x5a>
 80088cc:	4620      	mov	r0, r4
 80088ce:	f000 f855 	bl	800897c <_free_r>
 80088d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80088d4:	b111      	cbz	r1, 80088dc <_reclaim_reent+0x64>
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 f850 	bl	800897c <_free_r>
 80088dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80088de:	b111      	cbz	r1, 80088e6 <_reclaim_reent+0x6e>
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 f84b 	bl	800897c <_free_r>
 80088e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80088e8:	b111      	cbz	r1, 80088f0 <_reclaim_reent+0x78>
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 f846 	bl	800897c <_free_r>
 80088f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80088f2:	b111      	cbz	r1, 80088fa <_reclaim_reent+0x82>
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 f841 	bl	800897c <_free_r>
 80088fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80088fc:	b111      	cbz	r1, 8008904 <_reclaim_reent+0x8c>
 80088fe:	4620      	mov	r0, r4
 8008900:	f000 f83c 	bl	800897c <_free_r>
 8008904:	6a23      	ldr	r3, [r4, #32]
 8008906:	b14b      	cbz	r3, 800891c <_reclaim_reent+0xa4>
 8008908:	4620      	mov	r0, r4
 800890a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800890e:	4718      	bx	r3
 8008910:	680e      	ldr	r6, [r1, #0]
 8008912:	4620      	mov	r0, r4
 8008914:	f000 f832 	bl	800897c <_free_r>
 8008918:	4631      	mov	r1, r6
 800891a:	e7bb      	b.n	8008894 <_reclaim_reent+0x1c>
 800891c:	bd70      	pop	{r4, r5, r6, pc}
 800891e:	bf00      	nop
 8008920:	2000001c 	.word	0x2000001c

08008924 <__errno>:
 8008924:	4b01      	ldr	r3, [pc, #4]	@ (800892c <__errno+0x8>)
 8008926:	6818      	ldr	r0, [r3, #0]
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	2000001c 	.word	0x2000001c

08008930 <__libc_init_array>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	2600      	movs	r6, #0
 8008934:	4d0c      	ldr	r5, [pc, #48]	@ (8008968 <__libc_init_array+0x38>)
 8008936:	4c0d      	ldr	r4, [pc, #52]	@ (800896c <__libc_init_array+0x3c>)
 8008938:	1b64      	subs	r4, r4, r5
 800893a:	10a4      	asrs	r4, r4, #2
 800893c:	42a6      	cmp	r6, r4
 800893e:	d109      	bne.n	8008954 <__libc_init_array+0x24>
 8008940:	f000 fffe 	bl	8009940 <_init>
 8008944:	2600      	movs	r6, #0
 8008946:	4d0a      	ldr	r5, [pc, #40]	@ (8008970 <__libc_init_array+0x40>)
 8008948:	4c0a      	ldr	r4, [pc, #40]	@ (8008974 <__libc_init_array+0x44>)
 800894a:	1b64      	subs	r4, r4, r5
 800894c:	10a4      	asrs	r4, r4, #2
 800894e:	42a6      	cmp	r6, r4
 8008950:	d105      	bne.n	800895e <__libc_init_array+0x2e>
 8008952:	bd70      	pop	{r4, r5, r6, pc}
 8008954:	f855 3b04 	ldr.w	r3, [r5], #4
 8008958:	4798      	blx	r3
 800895a:	3601      	adds	r6, #1
 800895c:	e7ee      	b.n	800893c <__libc_init_array+0xc>
 800895e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008962:	4798      	blx	r3
 8008964:	3601      	adds	r6, #1
 8008966:	e7f2      	b.n	800894e <__libc_init_array+0x1e>
 8008968:	08009a58 	.word	0x08009a58
 800896c:	08009a58 	.word	0x08009a58
 8008970:	08009a58 	.word	0x08009a58
 8008974:	08009a5c 	.word	0x08009a5c

08008978 <__retarget_lock_acquire_recursive>:
 8008978:	4770      	bx	lr

0800897a <__retarget_lock_release_recursive>:
 800897a:	4770      	bx	lr

0800897c <_free_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4605      	mov	r5, r0
 8008980:	2900      	cmp	r1, #0
 8008982:	d040      	beq.n	8008a06 <_free_r+0x8a>
 8008984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008988:	1f0c      	subs	r4, r1, #4
 800898a:	2b00      	cmp	r3, #0
 800898c:	bfb8      	it	lt
 800898e:	18e4      	addlt	r4, r4, r3
 8008990:	f7ff ff5e 	bl	8008850 <__malloc_lock>
 8008994:	4a1c      	ldr	r2, [pc, #112]	@ (8008a08 <_free_r+0x8c>)
 8008996:	6813      	ldr	r3, [r2, #0]
 8008998:	b933      	cbnz	r3, 80089a8 <_free_r+0x2c>
 800899a:	6063      	str	r3, [r4, #4]
 800899c:	6014      	str	r4, [r2, #0]
 800899e:	4628      	mov	r0, r5
 80089a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089a4:	f7ff bf5a 	b.w	800885c <__malloc_unlock>
 80089a8:	42a3      	cmp	r3, r4
 80089aa:	d908      	bls.n	80089be <_free_r+0x42>
 80089ac:	6820      	ldr	r0, [r4, #0]
 80089ae:	1821      	adds	r1, r4, r0
 80089b0:	428b      	cmp	r3, r1
 80089b2:	bf01      	itttt	eq
 80089b4:	6819      	ldreq	r1, [r3, #0]
 80089b6:	685b      	ldreq	r3, [r3, #4]
 80089b8:	1809      	addeq	r1, r1, r0
 80089ba:	6021      	streq	r1, [r4, #0]
 80089bc:	e7ed      	b.n	800899a <_free_r+0x1e>
 80089be:	461a      	mov	r2, r3
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	b10b      	cbz	r3, 80089c8 <_free_r+0x4c>
 80089c4:	42a3      	cmp	r3, r4
 80089c6:	d9fa      	bls.n	80089be <_free_r+0x42>
 80089c8:	6811      	ldr	r1, [r2, #0]
 80089ca:	1850      	adds	r0, r2, r1
 80089cc:	42a0      	cmp	r0, r4
 80089ce:	d10b      	bne.n	80089e8 <_free_r+0x6c>
 80089d0:	6820      	ldr	r0, [r4, #0]
 80089d2:	4401      	add	r1, r0
 80089d4:	1850      	adds	r0, r2, r1
 80089d6:	4283      	cmp	r3, r0
 80089d8:	6011      	str	r1, [r2, #0]
 80089da:	d1e0      	bne.n	800899e <_free_r+0x22>
 80089dc:	6818      	ldr	r0, [r3, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	4408      	add	r0, r1
 80089e2:	6010      	str	r0, [r2, #0]
 80089e4:	6053      	str	r3, [r2, #4]
 80089e6:	e7da      	b.n	800899e <_free_r+0x22>
 80089e8:	d902      	bls.n	80089f0 <_free_r+0x74>
 80089ea:	230c      	movs	r3, #12
 80089ec:	602b      	str	r3, [r5, #0]
 80089ee:	e7d6      	b.n	800899e <_free_r+0x22>
 80089f0:	6820      	ldr	r0, [r4, #0]
 80089f2:	1821      	adds	r1, r4, r0
 80089f4:	428b      	cmp	r3, r1
 80089f6:	bf01      	itttt	eq
 80089f8:	6819      	ldreq	r1, [r3, #0]
 80089fa:	685b      	ldreq	r3, [r3, #4]
 80089fc:	1809      	addeq	r1, r1, r0
 80089fe:	6021      	streq	r1, [r4, #0]
 8008a00:	6063      	str	r3, [r4, #4]
 8008a02:	6054      	str	r4, [r2, #4]
 8008a04:	e7cb      	b.n	800899e <_free_r+0x22>
 8008a06:	bd38      	pop	{r3, r4, r5, pc}
 8008a08:	200012e0 	.word	0x200012e0

08008a0c <pow>:
 8008a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a10:	4614      	mov	r4, r2
 8008a12:	461d      	mov	r5, r3
 8008a14:	4680      	mov	r8, r0
 8008a16:	4689      	mov	r9, r1
 8008a18:	f000 f8f2 	bl	8008c00 <__ieee754_pow>
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	4606      	mov	r6, r0
 8008a20:	460f      	mov	r7, r1
 8008a22:	462b      	mov	r3, r5
 8008a24:	4620      	mov	r0, r4
 8008a26:	4629      	mov	r1, r5
 8008a28:	f7f7 ffe8 	bl	80009fc <__aeabi_dcmpun>
 8008a2c:	bbc8      	cbnz	r0, 8008aa2 <pow+0x96>
 8008a2e:	2200      	movs	r2, #0
 8008a30:	2300      	movs	r3, #0
 8008a32:	4640      	mov	r0, r8
 8008a34:	4649      	mov	r1, r9
 8008a36:	f7f7 ffaf 	bl	8000998 <__aeabi_dcmpeq>
 8008a3a:	b1b8      	cbz	r0, 8008a6c <pow+0x60>
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2300      	movs	r3, #0
 8008a40:	4620      	mov	r0, r4
 8008a42:	4629      	mov	r1, r5
 8008a44:	f7f7 ffa8 	bl	8000998 <__aeabi_dcmpeq>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d141      	bne.n	8008ad0 <pow+0xc4>
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	4629      	mov	r1, r5
 8008a50:	f000 f844 	bl	8008adc <finite>
 8008a54:	b328      	cbz	r0, 8008aa2 <pow+0x96>
 8008a56:	2200      	movs	r2, #0
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f7f7 ffa5 	bl	80009ac <__aeabi_dcmplt>
 8008a62:	b1f0      	cbz	r0, 8008aa2 <pow+0x96>
 8008a64:	f7ff ff5e 	bl	8008924 <__errno>
 8008a68:	2322      	movs	r3, #34	@ 0x22
 8008a6a:	e019      	b.n	8008aa0 <pow+0x94>
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	4639      	mov	r1, r7
 8008a70:	f000 f834 	bl	8008adc <finite>
 8008a74:	b9c8      	cbnz	r0, 8008aaa <pow+0x9e>
 8008a76:	4640      	mov	r0, r8
 8008a78:	4649      	mov	r1, r9
 8008a7a:	f000 f82f 	bl	8008adc <finite>
 8008a7e:	b1a0      	cbz	r0, 8008aaa <pow+0x9e>
 8008a80:	4620      	mov	r0, r4
 8008a82:	4629      	mov	r1, r5
 8008a84:	f000 f82a 	bl	8008adc <finite>
 8008a88:	b178      	cbz	r0, 8008aaa <pow+0x9e>
 8008a8a:	4632      	mov	r2, r6
 8008a8c:	463b      	mov	r3, r7
 8008a8e:	4630      	mov	r0, r6
 8008a90:	4639      	mov	r1, r7
 8008a92:	f7f7 ffb3 	bl	80009fc <__aeabi_dcmpun>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d0e4      	beq.n	8008a64 <pow+0x58>
 8008a9a:	f7ff ff43 	bl	8008924 <__errno>
 8008a9e:	2321      	movs	r3, #33	@ 0x21
 8008aa0:	6003      	str	r3, [r0, #0]
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2300      	movs	r3, #0
 8008aae:	4630      	mov	r0, r6
 8008ab0:	4639      	mov	r1, r7
 8008ab2:	f7f7 ff71 	bl	8000998 <__aeabi_dcmpeq>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d0f3      	beq.n	8008aa2 <pow+0x96>
 8008aba:	4640      	mov	r0, r8
 8008abc:	4649      	mov	r1, r9
 8008abe:	f000 f80d 	bl	8008adc <finite>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d0ed      	beq.n	8008aa2 <pow+0x96>
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	4629      	mov	r1, r5
 8008aca:	f000 f807 	bl	8008adc <finite>
 8008ace:	e7c8      	b.n	8008a62 <pow+0x56>
 8008ad0:	2600      	movs	r6, #0
 8008ad2:	4f01      	ldr	r7, [pc, #4]	@ (8008ad8 <pow+0xcc>)
 8008ad4:	e7e5      	b.n	8008aa2 <pow+0x96>
 8008ad6:	bf00      	nop
 8008ad8:	3ff00000 	.word	0x3ff00000

08008adc <finite>:
 8008adc:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8008ae0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008ae4:	0fc0      	lsrs	r0, r0, #31
 8008ae6:	4770      	bx	lr

08008ae8 <fmaxf>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4604      	mov	r4, r0
 8008aec:	460d      	mov	r5, r1
 8008aee:	f000 f825 	bl	8008b3c <__fpclassifyf>
 8008af2:	b910      	cbnz	r0, 8008afa <fmaxf+0x12>
 8008af4:	462c      	mov	r4, r5
 8008af6:	4620      	mov	r0, r4
 8008af8:	bd38      	pop	{r3, r4, r5, pc}
 8008afa:	4628      	mov	r0, r5
 8008afc:	f000 f81e 	bl	8008b3c <__fpclassifyf>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d0f8      	beq.n	8008af6 <fmaxf+0xe>
 8008b04:	4629      	mov	r1, r5
 8008b06:	4620      	mov	r0, r4
 8008b08:	f7f8 fac8 	bl	800109c <__aeabi_fcmpgt>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d0f1      	beq.n	8008af4 <fmaxf+0xc>
 8008b10:	e7f1      	b.n	8008af6 <fmaxf+0xe>

08008b12 <fminf>:
 8008b12:	b538      	push	{r3, r4, r5, lr}
 8008b14:	4604      	mov	r4, r0
 8008b16:	460d      	mov	r5, r1
 8008b18:	f000 f810 	bl	8008b3c <__fpclassifyf>
 8008b1c:	b910      	cbnz	r0, 8008b24 <fminf+0x12>
 8008b1e:	462c      	mov	r4, r5
 8008b20:	4620      	mov	r0, r4
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
 8008b24:	4628      	mov	r0, r5
 8008b26:	f000 f809 	bl	8008b3c <__fpclassifyf>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	d0f8      	beq.n	8008b20 <fminf+0xe>
 8008b2e:	4629      	mov	r1, r5
 8008b30:	4620      	mov	r0, r4
 8008b32:	f7f8 fa95 	bl	8001060 <__aeabi_fcmplt>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d0f1      	beq.n	8008b1e <fminf+0xc>
 8008b3a:	e7f1      	b.n	8008b20 <fminf+0xe>

08008b3c <__fpclassifyf>:
 8008b3c:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8008b40:	d00d      	beq.n	8008b5e <__fpclassifyf+0x22>
 8008b42:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8008b46:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8008b4a:	d30a      	bcc.n	8008b62 <__fpclassifyf+0x26>
 8008b4c:	4b07      	ldr	r3, [pc, #28]	@ (8008b6c <__fpclassifyf+0x30>)
 8008b4e:	1e42      	subs	r2, r0, #1
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d908      	bls.n	8008b66 <__fpclassifyf+0x2a>
 8008b54:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8008b58:	4258      	negs	r0, r3
 8008b5a:	4158      	adcs	r0, r3
 8008b5c:	4770      	bx	lr
 8008b5e:	2002      	movs	r0, #2
 8008b60:	4770      	bx	lr
 8008b62:	2004      	movs	r0, #4
 8008b64:	4770      	bx	lr
 8008b66:	2003      	movs	r0, #3
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	007ffffe 	.word	0x007ffffe

08008b70 <round>:
 8008b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b72:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008b76:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8008b7a:	2a13      	cmp	r2, #19
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	460d      	mov	r5, r1
 8008b80:	460b      	mov	r3, r1
 8008b82:	dc1a      	bgt.n	8008bba <round+0x4a>
 8008b84:	2a00      	cmp	r2, #0
 8008b86:	da0b      	bge.n	8008ba0 <round+0x30>
 8008b88:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8008b8c:	3201      	adds	r2, #1
 8008b8e:	bf04      	itt	eq
 8008b90:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8008b94:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8008b98:	2200      	movs	r2, #0
 8008b9a:	461d      	mov	r5, r3
 8008b9c:	4614      	mov	r4, r2
 8008b9e:	e016      	b.n	8008bce <round+0x5e>
 8008ba0:	4815      	ldr	r0, [pc, #84]	@ (8008bf8 <round+0x88>)
 8008ba2:	4110      	asrs	r0, r2
 8008ba4:	4001      	ands	r1, r0
 8008ba6:	4321      	orrs	r1, r4
 8008ba8:	d011      	beq.n	8008bce <round+0x5e>
 8008baa:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8008bae:	fa41 f202 	asr.w	r2, r1, r2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	ea23 0300 	bic.w	r3, r3, r0
 8008bb8:	e7ee      	b.n	8008b98 <round+0x28>
 8008bba:	2a33      	cmp	r2, #51	@ 0x33
 8008bbc:	dd0a      	ble.n	8008bd4 <round+0x64>
 8008bbe:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8008bc2:	d104      	bne.n	8008bce <round+0x5e>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	f7f7 fac9 	bl	800015c <__adddf3>
 8008bca:	4604      	mov	r4, r0
 8008bcc:	460d      	mov	r5, r1
 8008bce:	4620      	mov	r0, r4
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd8:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8008bdc:	40f8      	lsrs	r0, r7
 8008bde:	4220      	tst	r0, r4
 8008be0:	d0f5      	beq.n	8008bce <round+0x5e>
 8008be2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8008be6:	2201      	movs	r2, #1
 8008be8:	408a      	lsls	r2, r1
 8008bea:	1912      	adds	r2, r2, r4
 8008bec:	bf28      	it	cs
 8008bee:	3301      	addcs	r3, #1
 8008bf0:	ea22 0200 	bic.w	r2, r2, r0
 8008bf4:	e7d1      	b.n	8008b9a <round+0x2a>
 8008bf6:	bf00      	nop
 8008bf8:	000fffff 	.word	0x000fffff
 8008bfc:	00000000 	.word	0x00000000

08008c00 <__ieee754_pow>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	b091      	sub	sp, #68	@ 0x44
 8008c06:	e9cd 2300 	strd	r2, r3, [sp]
 8008c0a:	468b      	mov	fp, r1
 8008c0c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8008c10:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8008c14:	4682      	mov	sl, r0
 8008c16:	ea57 0001 	orrs.w	r0, r7, r1
 8008c1a:	d112      	bne.n	8008c42 <__ieee754_pow+0x42>
 8008c1c:	4653      	mov	r3, sl
 8008c1e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8008c22:	18db      	adds	r3, r3, r3
 8008c24:	4152      	adcs	r2, r2
 8008c26:	4298      	cmp	r0, r3
 8008c28:	4b91      	ldr	r3, [pc, #580]	@ (8008e70 <__ieee754_pow+0x270>)
 8008c2a:	4193      	sbcs	r3, r2
 8008c2c:	f080 84ce 	bcs.w	80095cc <__ieee754_pow+0x9cc>
 8008c30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c34:	4650      	mov	r0, sl
 8008c36:	4659      	mov	r1, fp
 8008c38:	f7f7 fa90 	bl	800015c <__adddf3>
 8008c3c:	b011      	add	sp, #68	@ 0x44
 8008c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c42:	4b8c      	ldr	r3, [pc, #560]	@ (8008e74 <__ieee754_pow+0x274>)
 8008c44:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8008c48:	429e      	cmp	r6, r3
 8008c4a:	465d      	mov	r5, fp
 8008c4c:	46d1      	mov	r9, sl
 8008c4e:	d807      	bhi.n	8008c60 <__ieee754_pow+0x60>
 8008c50:	d102      	bne.n	8008c58 <__ieee754_pow+0x58>
 8008c52:	f1ba 0f00 	cmp.w	sl, #0
 8008c56:	d1eb      	bne.n	8008c30 <__ieee754_pow+0x30>
 8008c58:	429f      	cmp	r7, r3
 8008c5a:	d801      	bhi.n	8008c60 <__ieee754_pow+0x60>
 8008c5c:	d10f      	bne.n	8008c7e <__ieee754_pow+0x7e>
 8008c5e:	b171      	cbz	r1, 8008c7e <__ieee754_pow+0x7e>
 8008c60:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008c64:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008c68:	ea55 0509 	orrs.w	r5, r5, r9
 8008c6c:	d1e0      	bne.n	8008c30 <__ieee754_pow+0x30>
 8008c6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008c72:	18db      	adds	r3, r3, r3
 8008c74:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008c78:	4152      	adcs	r2, r2
 8008c7a:	429d      	cmp	r5, r3
 8008c7c:	e7d4      	b.n	8008c28 <__ieee754_pow+0x28>
 8008c7e:	2d00      	cmp	r5, #0
 8008c80:	4633      	mov	r3, r6
 8008c82:	da39      	bge.n	8008cf8 <__ieee754_pow+0xf8>
 8008c84:	4a7c      	ldr	r2, [pc, #496]	@ (8008e78 <__ieee754_pow+0x278>)
 8008c86:	4297      	cmp	r7, r2
 8008c88:	d84e      	bhi.n	8008d28 <__ieee754_pow+0x128>
 8008c8a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008c8e:	4297      	cmp	r7, r2
 8008c90:	f240 84ab 	bls.w	80095ea <__ieee754_pow+0x9ea>
 8008c94:	153a      	asrs	r2, r7, #20
 8008c96:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008c9a:	2a14      	cmp	r2, #20
 8008c9c:	dd0f      	ble.n	8008cbe <__ieee754_pow+0xbe>
 8008c9e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008ca2:	fa21 f402 	lsr.w	r4, r1, r2
 8008ca6:	fa04 f202 	lsl.w	r2, r4, r2
 8008caa:	428a      	cmp	r2, r1
 8008cac:	f040 849d 	bne.w	80095ea <__ieee754_pow+0x9ea>
 8008cb0:	f004 0401 	and.w	r4, r4, #1
 8008cb4:	f1c4 0402 	rsb	r4, r4, #2
 8008cb8:	2900      	cmp	r1, #0
 8008cba:	d15a      	bne.n	8008d72 <__ieee754_pow+0x172>
 8008cbc:	e00e      	b.n	8008cdc <__ieee754_pow+0xdc>
 8008cbe:	2900      	cmp	r1, #0
 8008cc0:	d156      	bne.n	8008d70 <__ieee754_pow+0x170>
 8008cc2:	f1c2 0214 	rsb	r2, r2, #20
 8008cc6:	fa47 f402 	asr.w	r4, r7, r2
 8008cca:	fa04 f202 	lsl.w	r2, r4, r2
 8008cce:	42ba      	cmp	r2, r7
 8008cd0:	f040 8488 	bne.w	80095e4 <__ieee754_pow+0x9e4>
 8008cd4:	f004 0401 	and.w	r4, r4, #1
 8008cd8:	f1c4 0402 	rsb	r4, r4, #2
 8008cdc:	4a67      	ldr	r2, [pc, #412]	@ (8008e7c <__ieee754_pow+0x27c>)
 8008cde:	4297      	cmp	r7, r2
 8008ce0:	d130      	bne.n	8008d44 <__ieee754_pow+0x144>
 8008ce2:	f1b8 0f00 	cmp.w	r8, #0
 8008ce6:	f280 8479 	bge.w	80095dc <__ieee754_pow+0x9dc>
 8008cea:	4652      	mov	r2, sl
 8008cec:	465b      	mov	r3, fp
 8008cee:	2000      	movs	r0, #0
 8008cf0:	4962      	ldr	r1, [pc, #392]	@ (8008e7c <__ieee754_pow+0x27c>)
 8008cf2:	f7f7 fd13 	bl	800071c <__aeabi_ddiv>
 8008cf6:	e7a1      	b.n	8008c3c <__ieee754_pow+0x3c>
 8008cf8:	2400      	movs	r4, #0
 8008cfa:	2900      	cmp	r1, #0
 8008cfc:	d139      	bne.n	8008d72 <__ieee754_pow+0x172>
 8008cfe:	4a5d      	ldr	r2, [pc, #372]	@ (8008e74 <__ieee754_pow+0x274>)
 8008d00:	4297      	cmp	r7, r2
 8008d02:	d1eb      	bne.n	8008cdc <__ieee754_pow+0xdc>
 8008d04:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8008d08:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8008d0c:	ea53 0309 	orrs.w	r3, r3, r9
 8008d10:	f000 845c 	beq.w	80095cc <__ieee754_pow+0x9cc>
 8008d14:	4b5a      	ldr	r3, [pc, #360]	@ (8008e80 <__ieee754_pow+0x280>)
 8008d16:	429e      	cmp	r6, r3
 8008d18:	d908      	bls.n	8008d2c <__ieee754_pow+0x12c>
 8008d1a:	f1b8 0f00 	cmp.w	r8, #0
 8008d1e:	f2c0 8459 	blt.w	80095d4 <__ieee754_pow+0x9d4>
 8008d22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d26:	e789      	b.n	8008c3c <__ieee754_pow+0x3c>
 8008d28:	2402      	movs	r4, #2
 8008d2a:	e7e6      	b.n	8008cfa <__ieee754_pow+0xfa>
 8008d2c:	f1b8 0f00 	cmp.w	r8, #0
 8008d30:	f04f 0000 	mov.w	r0, #0
 8008d34:	f04f 0100 	mov.w	r1, #0
 8008d38:	da80      	bge.n	8008c3c <__ieee754_pow+0x3c>
 8008d3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008d3e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008d42:	e77b      	b.n	8008c3c <__ieee754_pow+0x3c>
 8008d44:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8008d48:	d106      	bne.n	8008d58 <__ieee754_pow+0x158>
 8008d4a:	4652      	mov	r2, sl
 8008d4c:	465b      	mov	r3, fp
 8008d4e:	4650      	mov	r0, sl
 8008d50:	4659      	mov	r1, fp
 8008d52:	f7f7 fbb9 	bl	80004c8 <__aeabi_dmul>
 8008d56:	e771      	b.n	8008c3c <__ieee754_pow+0x3c>
 8008d58:	4a4a      	ldr	r2, [pc, #296]	@ (8008e84 <__ieee754_pow+0x284>)
 8008d5a:	4590      	cmp	r8, r2
 8008d5c:	d109      	bne.n	8008d72 <__ieee754_pow+0x172>
 8008d5e:	2d00      	cmp	r5, #0
 8008d60:	db07      	blt.n	8008d72 <__ieee754_pow+0x172>
 8008d62:	4650      	mov	r0, sl
 8008d64:	4659      	mov	r1, fp
 8008d66:	b011      	add	sp, #68	@ 0x44
 8008d68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	f000 bd12 	b.w	8009794 <__ieee754_sqrt>
 8008d70:	2400      	movs	r4, #0
 8008d72:	4650      	mov	r0, sl
 8008d74:	4659      	mov	r1, fp
 8008d76:	9302      	str	r3, [sp, #8]
 8008d78:	f000 fc6a 	bl	8009650 <fabs>
 8008d7c:	9b02      	ldr	r3, [sp, #8]
 8008d7e:	f1b9 0f00 	cmp.w	r9, #0
 8008d82:	d127      	bne.n	8008dd4 <__ieee754_pow+0x1d4>
 8008d84:	4a3d      	ldr	r2, [pc, #244]	@ (8008e7c <__ieee754_pow+0x27c>)
 8008d86:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8008d8a:	4594      	cmp	ip, r2
 8008d8c:	d000      	beq.n	8008d90 <__ieee754_pow+0x190>
 8008d8e:	bb0e      	cbnz	r6, 8008dd4 <__ieee754_pow+0x1d4>
 8008d90:	f1b8 0f00 	cmp.w	r8, #0
 8008d94:	da05      	bge.n	8008da2 <__ieee754_pow+0x1a2>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	4937      	ldr	r1, [pc, #220]	@ (8008e7c <__ieee754_pow+0x27c>)
 8008d9e:	f7f7 fcbd 	bl	800071c <__aeabi_ddiv>
 8008da2:	2d00      	cmp	r5, #0
 8008da4:	f6bf af4a 	bge.w	8008c3c <__ieee754_pow+0x3c>
 8008da8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8008dac:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8008db0:	4326      	orrs	r6, r4
 8008db2:	d108      	bne.n	8008dc6 <__ieee754_pow+0x1c6>
 8008db4:	4602      	mov	r2, r0
 8008db6:	460b      	mov	r3, r1
 8008db8:	4610      	mov	r0, r2
 8008dba:	4619      	mov	r1, r3
 8008dbc:	f7f7 f9cc 	bl	8000158 <__aeabi_dsub>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	e795      	b.n	8008cf2 <__ieee754_pow+0xf2>
 8008dc6:	2c01      	cmp	r4, #1
 8008dc8:	f47f af38 	bne.w	8008c3c <__ieee754_pow+0x3c>
 8008dcc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	e733      	b.n	8008c3c <__ieee754_pow+0x3c>
 8008dd4:	0fea      	lsrs	r2, r5, #31
 8008dd6:	3a01      	subs	r2, #1
 8008dd8:	ea52 0c04 	orrs.w	ip, r2, r4
 8008ddc:	d102      	bne.n	8008de4 <__ieee754_pow+0x1e4>
 8008dde:	4652      	mov	r2, sl
 8008de0:	465b      	mov	r3, fp
 8008de2:	e7e9      	b.n	8008db8 <__ieee754_pow+0x1b8>
 8008de4:	f04f 0900 	mov.w	r9, #0
 8008de8:	3c01      	subs	r4, #1
 8008dea:	4314      	orrs	r4, r2
 8008dec:	bf14      	ite	ne
 8008dee:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8008e7c <__ieee754_pow+0x27c>
 8008df2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8008e88 <__ieee754_pow+0x288>
 8008df6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8008dfa:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8008dfe:	f240 8107 	bls.w	8009010 <__ieee754_pow+0x410>
 8008e02:	4b22      	ldr	r3, [pc, #136]	@ (8008e8c <__ieee754_pow+0x28c>)
 8008e04:	429f      	cmp	r7, r3
 8008e06:	4b1e      	ldr	r3, [pc, #120]	@ (8008e80 <__ieee754_pow+0x280>)
 8008e08:	d913      	bls.n	8008e32 <__ieee754_pow+0x232>
 8008e0a:	429e      	cmp	r6, r3
 8008e0c:	d808      	bhi.n	8008e20 <__ieee754_pow+0x220>
 8008e0e:	f1b8 0f00 	cmp.w	r8, #0
 8008e12:	da08      	bge.n	8008e26 <__ieee754_pow+0x226>
 8008e14:	2000      	movs	r0, #0
 8008e16:	b011      	add	sp, #68	@ 0x44
 8008e18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1c:	f000 bcb4 	b.w	8009788 <__math_oflow>
 8008e20:	f1b8 0f00 	cmp.w	r8, #0
 8008e24:	dcf6      	bgt.n	8008e14 <__ieee754_pow+0x214>
 8008e26:	2000      	movs	r0, #0
 8008e28:	b011      	add	sp, #68	@ 0x44
 8008e2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2e:	f000 bca6 	b.w	800977e <__math_uflow>
 8008e32:	429e      	cmp	r6, r3
 8008e34:	d20c      	bcs.n	8008e50 <__ieee754_pow+0x250>
 8008e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f7f7 fdb5 	bl	80009ac <__aeabi_dcmplt>
 8008e42:	3800      	subs	r0, #0
 8008e44:	bf18      	it	ne
 8008e46:	2001      	movne	r0, #1
 8008e48:	f1b8 0f00 	cmp.w	r8, #0
 8008e4c:	daec      	bge.n	8008e28 <__ieee754_pow+0x228>
 8008e4e:	e7e2      	b.n	8008e16 <__ieee754_pow+0x216>
 8008e50:	4b0a      	ldr	r3, [pc, #40]	@ (8008e7c <__ieee754_pow+0x27c>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	429e      	cmp	r6, r3
 8008e56:	d91b      	bls.n	8008e90 <__ieee754_pow+0x290>
 8008e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f7f7 fda5 	bl	80009ac <__aeabi_dcmplt>
 8008e62:	3800      	subs	r0, #0
 8008e64:	bf18      	it	ne
 8008e66:	2001      	movne	r0, #1
 8008e68:	f1b8 0f00 	cmp.w	r8, #0
 8008e6c:	dcd3      	bgt.n	8008e16 <__ieee754_pow+0x216>
 8008e6e:	e7db      	b.n	8008e28 <__ieee754_pow+0x228>
 8008e70:	fff00000 	.word	0xfff00000
 8008e74:	7ff00000 	.word	0x7ff00000
 8008e78:	433fffff 	.word	0x433fffff
 8008e7c:	3ff00000 	.word	0x3ff00000
 8008e80:	3fefffff 	.word	0x3fefffff
 8008e84:	3fe00000 	.word	0x3fe00000
 8008e88:	bff00000 	.word	0xbff00000
 8008e8c:	43f00000 	.word	0x43f00000
 8008e90:	4b5b      	ldr	r3, [pc, #364]	@ (8009000 <__ieee754_pow+0x400>)
 8008e92:	f7f7 f961 	bl	8000158 <__aeabi_dsub>
 8008e96:	a352      	add	r3, pc, #328	@ (adr r3, 8008fe0 <__ieee754_pow+0x3e0>)
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	460d      	mov	r5, r1
 8008ea0:	f7f7 fb12 	bl	80004c8 <__aeabi_dmul>
 8008ea4:	a350      	add	r3, pc, #320	@ (adr r3, 8008fe8 <__ieee754_pow+0x3e8>)
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	4606      	mov	r6, r0
 8008eac:	460f      	mov	r7, r1
 8008eae:	4620      	mov	r0, r4
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	f7f7 fb09 	bl	80004c8 <__aeabi_dmul>
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	4682      	mov	sl, r0
 8008eba:	468b      	mov	fp, r1
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	4b50      	ldr	r3, [pc, #320]	@ (8009004 <__ieee754_pow+0x404>)
 8008ec2:	f7f7 fb01 	bl	80004c8 <__aeabi_dmul>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	a149      	add	r1, pc, #292	@ (adr r1, 8008ff0 <__ieee754_pow+0x3f0>)
 8008ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ed0:	f7f7 f942 	bl	8000158 <__aeabi_dsub>
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	462b      	mov	r3, r5
 8008ed8:	f7f7 faf6 	bl	80004c8 <__aeabi_dmul>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	4949      	ldr	r1, [pc, #292]	@ (8009008 <__ieee754_pow+0x408>)
 8008ee4:	f7f7 f938 	bl	8000158 <__aeabi_dsub>
 8008ee8:	4622      	mov	r2, r4
 8008eea:	4680      	mov	r8, r0
 8008eec:	4689      	mov	r9, r1
 8008eee:	462b      	mov	r3, r5
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	f7f7 fae8 	bl	80004c8 <__aeabi_dmul>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	4640      	mov	r0, r8
 8008efe:	4649      	mov	r1, r9
 8008f00:	f7f7 fae2 	bl	80004c8 <__aeabi_dmul>
 8008f04:	a33c      	add	r3, pc, #240	@ (adr r3, 8008ff8 <__ieee754_pow+0x3f8>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	f7f7 fadd 	bl	80004c8 <__aeabi_dmul>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4650      	mov	r0, sl
 8008f14:	4659      	mov	r1, fp
 8008f16:	f7f7 f91f 	bl	8000158 <__aeabi_dsub>
 8008f1a:	2400      	movs	r4, #0
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4680      	mov	r8, r0
 8008f22:	4689      	mov	r9, r1
 8008f24:	4630      	mov	r0, r6
 8008f26:	4639      	mov	r1, r7
 8008f28:	f7f7 f918 	bl	800015c <__adddf3>
 8008f2c:	4632      	mov	r2, r6
 8008f2e:	463b      	mov	r3, r7
 8008f30:	4620      	mov	r0, r4
 8008f32:	460d      	mov	r5, r1
 8008f34:	f7f7 f910 	bl	8000158 <__aeabi_dsub>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4640      	mov	r0, r8
 8008f3e:	4649      	mov	r1, r9
 8008f40:	f7f7 f90a 	bl	8000158 <__aeabi_dsub>
 8008f44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	9304      	str	r3, [sp, #16]
 8008f50:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008f54:	4606      	mov	r6, r0
 8008f56:	460f      	mov	r7, r1
 8008f58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f5c:	4652      	mov	r2, sl
 8008f5e:	465b      	mov	r3, fp
 8008f60:	f7f7 f8fa 	bl	8000158 <__aeabi_dsub>
 8008f64:	4622      	mov	r2, r4
 8008f66:	462b      	mov	r3, r5
 8008f68:	f7f7 faae 	bl	80004c8 <__aeabi_dmul>
 8008f6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f70:	4680      	mov	r8, r0
 8008f72:	4689      	mov	r9, r1
 8008f74:	4630      	mov	r0, r6
 8008f76:	4639      	mov	r1, r7
 8008f78:	f7f7 faa6 	bl	80004c8 <__aeabi_dmul>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4640      	mov	r0, r8
 8008f82:	4649      	mov	r1, r9
 8008f84:	f7f7 f8ea 	bl	800015c <__adddf3>
 8008f88:	4652      	mov	r2, sl
 8008f8a:	465b      	mov	r3, fp
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	460f      	mov	r7, r1
 8008f90:	4620      	mov	r0, r4
 8008f92:	4629      	mov	r1, r5
 8008f94:	f7f7 fa98 	bl	80004c8 <__aeabi_dmul>
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	4680      	mov	r8, r0
 8008f9e:	4689      	mov	r9, r1
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	f7f7 f8da 	bl	800015c <__adddf3>
 8008fa8:	4b18      	ldr	r3, [pc, #96]	@ (800900c <__ieee754_pow+0x40c>)
 8008faa:	4604      	mov	r4, r0
 8008fac:	4299      	cmp	r1, r3
 8008fae:	460d      	mov	r5, r1
 8008fb0:	468a      	mov	sl, r1
 8008fb2:	468b      	mov	fp, r1
 8008fb4:	f340 82e0 	ble.w	8009578 <__ieee754_pow+0x978>
 8008fb8:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008fbc:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008fc0:	4303      	orrs	r3, r0
 8008fc2:	f000 81df 	beq.w	8009384 <__ieee754_pow+0x784>
 8008fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f7f7 fced 	bl	80009ac <__aeabi_dcmplt>
 8008fd2:	3800      	subs	r0, #0
 8008fd4:	bf18      	it	ne
 8008fd6:	2001      	movne	r0, #1
 8008fd8:	e71d      	b.n	8008e16 <__ieee754_pow+0x216>
 8008fda:	bf00      	nop
 8008fdc:	f3af 8000 	nop.w
 8008fe0:	60000000 	.word	0x60000000
 8008fe4:	3ff71547 	.word	0x3ff71547
 8008fe8:	f85ddf44 	.word	0xf85ddf44
 8008fec:	3e54ae0b 	.word	0x3e54ae0b
 8008ff0:	55555555 	.word	0x55555555
 8008ff4:	3fd55555 	.word	0x3fd55555
 8008ff8:	652b82fe 	.word	0x652b82fe
 8008ffc:	3ff71547 	.word	0x3ff71547
 8009000:	3ff00000 	.word	0x3ff00000
 8009004:	3fd00000 	.word	0x3fd00000
 8009008:	3fe00000 	.word	0x3fe00000
 800900c:	408fffff 	.word	0x408fffff
 8009010:	4ad3      	ldr	r2, [pc, #844]	@ (8009360 <__ieee754_pow+0x760>)
 8009012:	402a      	ands	r2, r5
 8009014:	2a00      	cmp	r2, #0
 8009016:	f040 817a 	bne.w	800930e <__ieee754_pow+0x70e>
 800901a:	4bd2      	ldr	r3, [pc, #840]	@ (8009364 <__ieee754_pow+0x764>)
 800901c:	2200      	movs	r2, #0
 800901e:	f7f7 fa53 	bl	80004c8 <__aeabi_dmul>
 8009022:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8009026:	460b      	mov	r3, r1
 8009028:	151a      	asrs	r2, r3, #20
 800902a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800902e:	4422      	add	r2, r4
 8009030:	920a      	str	r2, [sp, #40]	@ 0x28
 8009032:	4acd      	ldr	r2, [pc, #820]	@ (8009368 <__ieee754_pow+0x768>)
 8009034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009038:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800903c:	4293      	cmp	r3, r2
 800903e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009042:	dd08      	ble.n	8009056 <__ieee754_pow+0x456>
 8009044:	4ac9      	ldr	r2, [pc, #804]	@ (800936c <__ieee754_pow+0x76c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	f340 8163 	ble.w	8009312 <__ieee754_pow+0x712>
 800904c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800904e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009052:	3301      	adds	r3, #1
 8009054:	930a      	str	r3, [sp, #40]	@ 0x28
 8009056:	2600      	movs	r6, #0
 8009058:	00f3      	lsls	r3, r6, #3
 800905a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800905c:	4bc4      	ldr	r3, [pc, #784]	@ (8009370 <__ieee754_pow+0x770>)
 800905e:	4629      	mov	r1, r5
 8009060:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009064:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009068:	461a      	mov	r2, r3
 800906a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800906e:	4623      	mov	r3, r4
 8009070:	4682      	mov	sl, r0
 8009072:	f7f7 f871 	bl	8000158 <__aeabi_dsub>
 8009076:	4652      	mov	r2, sl
 8009078:	462b      	mov	r3, r5
 800907a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800907e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009082:	f7f7 f86b 	bl	800015c <__adddf3>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	2000      	movs	r0, #0
 800908c:	49b9      	ldr	r1, [pc, #740]	@ (8009374 <__ieee754_pow+0x774>)
 800908e:	f7f7 fb45 	bl	800071c <__aeabi_ddiv>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800909a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800909e:	f7f7 fa13 	bl	80004c8 <__aeabi_dmul>
 80090a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090a6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80090aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80090ae:	2300      	movs	r3, #0
 80090b0:	2200      	movs	r2, #0
 80090b2:	46ab      	mov	fp, r5
 80090b4:	106d      	asrs	r5, r5, #1
 80090b6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80090c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80090c4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80090c8:	4640      	mov	r0, r8
 80090ca:	4649      	mov	r1, r9
 80090cc:	4614      	mov	r4, r2
 80090ce:	461d      	mov	r5, r3
 80090d0:	f7f7 f9fa 	bl	80004c8 <__aeabi_dmul>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090dc:	f7f7 f83c 	bl	8000158 <__aeabi_dsub>
 80090e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80090e4:	4606      	mov	r6, r0
 80090e6:	460f      	mov	r7, r1
 80090e8:	4620      	mov	r0, r4
 80090ea:	4629      	mov	r1, r5
 80090ec:	f7f7 f834 	bl	8000158 <__aeabi_dsub>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4650      	mov	r0, sl
 80090f6:	4659      	mov	r1, fp
 80090f8:	f7f7 f82e 	bl	8000158 <__aeabi_dsub>
 80090fc:	4642      	mov	r2, r8
 80090fe:	464b      	mov	r3, r9
 8009100:	f7f7 f9e2 	bl	80004c8 <__aeabi_dmul>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4630      	mov	r0, r6
 800910a:	4639      	mov	r1, r7
 800910c:	f7f7 f824 	bl	8000158 <__aeabi_dsub>
 8009110:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009114:	f7f7 f9d8 	bl	80004c8 <__aeabi_dmul>
 8009118:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800911c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009120:	4610      	mov	r0, r2
 8009122:	4619      	mov	r1, r3
 8009124:	f7f7 f9d0 	bl	80004c8 <__aeabi_dmul>
 8009128:	a37b      	add	r3, pc, #492	@ (adr r3, 8009318 <__ieee754_pow+0x718>)
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	4604      	mov	r4, r0
 8009130:	460d      	mov	r5, r1
 8009132:	f7f7 f9c9 	bl	80004c8 <__aeabi_dmul>
 8009136:	a37a      	add	r3, pc, #488	@ (adr r3, 8009320 <__ieee754_pow+0x720>)
 8009138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913c:	f7f7 f80e 	bl	800015c <__adddf3>
 8009140:	4622      	mov	r2, r4
 8009142:	462b      	mov	r3, r5
 8009144:	f7f7 f9c0 	bl	80004c8 <__aeabi_dmul>
 8009148:	a377      	add	r3, pc, #476	@ (adr r3, 8009328 <__ieee754_pow+0x728>)
 800914a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914e:	f7f7 f805 	bl	800015c <__adddf3>
 8009152:	4622      	mov	r2, r4
 8009154:	462b      	mov	r3, r5
 8009156:	f7f7 f9b7 	bl	80004c8 <__aeabi_dmul>
 800915a:	a375      	add	r3, pc, #468	@ (adr r3, 8009330 <__ieee754_pow+0x730>)
 800915c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009160:	f7f6 fffc 	bl	800015c <__adddf3>
 8009164:	4622      	mov	r2, r4
 8009166:	462b      	mov	r3, r5
 8009168:	f7f7 f9ae 	bl	80004c8 <__aeabi_dmul>
 800916c:	a372      	add	r3, pc, #456	@ (adr r3, 8009338 <__ieee754_pow+0x738>)
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	f7f6 fff3 	bl	800015c <__adddf3>
 8009176:	4622      	mov	r2, r4
 8009178:	462b      	mov	r3, r5
 800917a:	f7f7 f9a5 	bl	80004c8 <__aeabi_dmul>
 800917e:	a370      	add	r3, pc, #448	@ (adr r3, 8009340 <__ieee754_pow+0x740>)
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	f7f6 ffea 	bl	800015c <__adddf3>
 8009188:	4622      	mov	r2, r4
 800918a:	4606      	mov	r6, r0
 800918c:	460f      	mov	r7, r1
 800918e:	462b      	mov	r3, r5
 8009190:	4620      	mov	r0, r4
 8009192:	4629      	mov	r1, r5
 8009194:	f7f7 f998 	bl	80004c8 <__aeabi_dmul>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4630      	mov	r0, r6
 800919e:	4639      	mov	r1, r7
 80091a0:	f7f7 f992 	bl	80004c8 <__aeabi_dmul>
 80091a4:	4604      	mov	r4, r0
 80091a6:	460d      	mov	r5, r1
 80091a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091ac:	4642      	mov	r2, r8
 80091ae:	464b      	mov	r3, r9
 80091b0:	f7f6 ffd4 	bl	800015c <__adddf3>
 80091b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80091b8:	f7f7 f986 	bl	80004c8 <__aeabi_dmul>
 80091bc:	4622      	mov	r2, r4
 80091be:	462b      	mov	r3, r5
 80091c0:	f7f6 ffcc 	bl	800015c <__adddf3>
 80091c4:	4642      	mov	r2, r8
 80091c6:	4682      	mov	sl, r0
 80091c8:	468b      	mov	fp, r1
 80091ca:	464b      	mov	r3, r9
 80091cc:	4640      	mov	r0, r8
 80091ce:	4649      	mov	r1, r9
 80091d0:	f7f7 f97a 	bl	80004c8 <__aeabi_dmul>
 80091d4:	2200      	movs	r2, #0
 80091d6:	4b68      	ldr	r3, [pc, #416]	@ (8009378 <__ieee754_pow+0x778>)
 80091d8:	4606      	mov	r6, r0
 80091da:	460f      	mov	r7, r1
 80091dc:	f7f6 ffbe 	bl	800015c <__adddf3>
 80091e0:	4652      	mov	r2, sl
 80091e2:	465b      	mov	r3, fp
 80091e4:	f7f6 ffba 	bl	800015c <__adddf3>
 80091e8:	2400      	movs	r4, #0
 80091ea:	460d      	mov	r5, r1
 80091ec:	4622      	mov	r2, r4
 80091ee:	460b      	mov	r3, r1
 80091f0:	4640      	mov	r0, r8
 80091f2:	4649      	mov	r1, r9
 80091f4:	f7f7 f968 	bl	80004c8 <__aeabi_dmul>
 80091f8:	2200      	movs	r2, #0
 80091fa:	4680      	mov	r8, r0
 80091fc:	4689      	mov	r9, r1
 80091fe:	4620      	mov	r0, r4
 8009200:	4629      	mov	r1, r5
 8009202:	4b5d      	ldr	r3, [pc, #372]	@ (8009378 <__ieee754_pow+0x778>)
 8009204:	f7f6 ffa8 	bl	8000158 <__aeabi_dsub>
 8009208:	4632      	mov	r2, r6
 800920a:	463b      	mov	r3, r7
 800920c:	f7f6 ffa4 	bl	8000158 <__aeabi_dsub>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4650      	mov	r0, sl
 8009216:	4659      	mov	r1, fp
 8009218:	f7f6 ff9e 	bl	8000158 <__aeabi_dsub>
 800921c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009220:	f7f7 f952 	bl	80004c8 <__aeabi_dmul>
 8009224:	4622      	mov	r2, r4
 8009226:	4606      	mov	r6, r0
 8009228:	460f      	mov	r7, r1
 800922a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800922e:	462b      	mov	r3, r5
 8009230:	f7f7 f94a 	bl	80004c8 <__aeabi_dmul>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4630      	mov	r0, r6
 800923a:	4639      	mov	r1, r7
 800923c:	f7f6 ff8e 	bl	800015c <__adddf3>
 8009240:	2400      	movs	r4, #0
 8009242:	4606      	mov	r6, r0
 8009244:	460f      	mov	r7, r1
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4640      	mov	r0, r8
 800924c:	4649      	mov	r1, r9
 800924e:	f7f6 ff85 	bl	800015c <__adddf3>
 8009252:	a33d      	add	r3, pc, #244	@ (adr r3, 8009348 <__ieee754_pow+0x748>)
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	4620      	mov	r0, r4
 800925a:	460d      	mov	r5, r1
 800925c:	f7f7 f934 	bl	80004c8 <__aeabi_dmul>
 8009260:	4642      	mov	r2, r8
 8009262:	464b      	mov	r3, r9
 8009264:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009268:	4620      	mov	r0, r4
 800926a:	4629      	mov	r1, r5
 800926c:	f7f6 ff74 	bl	8000158 <__aeabi_dsub>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4630      	mov	r0, r6
 8009276:	4639      	mov	r1, r7
 8009278:	f7f6 ff6e 	bl	8000158 <__aeabi_dsub>
 800927c:	a334      	add	r3, pc, #208	@ (adr r3, 8009350 <__ieee754_pow+0x750>)
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	f7f7 f921 	bl	80004c8 <__aeabi_dmul>
 8009286:	a334      	add	r3, pc, #208	@ (adr r3, 8009358 <__ieee754_pow+0x758>)
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	4606      	mov	r6, r0
 800928e:	460f      	mov	r7, r1
 8009290:	4620      	mov	r0, r4
 8009292:	4629      	mov	r1, r5
 8009294:	f7f7 f918 	bl	80004c8 <__aeabi_dmul>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4630      	mov	r0, r6
 800929e:	4639      	mov	r1, r7
 80092a0:	f7f6 ff5c 	bl	800015c <__adddf3>
 80092a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80092a6:	4b35      	ldr	r3, [pc, #212]	@ (800937c <__ieee754_pow+0x77c>)
 80092a8:	2400      	movs	r4, #0
 80092aa:	4413      	add	r3, r2
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f7f6 ff54 	bl	800015c <__adddf3>
 80092b4:	4682      	mov	sl, r0
 80092b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80092b8:	468b      	mov	fp, r1
 80092ba:	f7f7 f89b 	bl	80003f4 <__aeabi_i2d>
 80092be:	4606      	mov	r6, r0
 80092c0:	460f      	mov	r7, r1
 80092c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80092c4:	4b2e      	ldr	r3, [pc, #184]	@ (8009380 <__ieee754_pow+0x780>)
 80092c6:	4413      	add	r3, r2
 80092c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092cc:	4652      	mov	r2, sl
 80092ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092d2:	465b      	mov	r3, fp
 80092d4:	f7f6 ff42 	bl	800015c <__adddf3>
 80092d8:	4642      	mov	r2, r8
 80092da:	464b      	mov	r3, r9
 80092dc:	f7f6 ff3e 	bl	800015c <__adddf3>
 80092e0:	4632      	mov	r2, r6
 80092e2:	463b      	mov	r3, r7
 80092e4:	f7f6 ff3a 	bl	800015c <__adddf3>
 80092e8:	4632      	mov	r2, r6
 80092ea:	463b      	mov	r3, r7
 80092ec:	4620      	mov	r0, r4
 80092ee:	460d      	mov	r5, r1
 80092f0:	f7f6 ff32 	bl	8000158 <__aeabi_dsub>
 80092f4:	4642      	mov	r2, r8
 80092f6:	464b      	mov	r3, r9
 80092f8:	f7f6 ff2e 	bl	8000158 <__aeabi_dsub>
 80092fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009300:	f7f6 ff2a 	bl	8000158 <__aeabi_dsub>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4650      	mov	r0, sl
 800930a:	4659      	mov	r1, fp
 800930c:	e618      	b.n	8008f40 <__ieee754_pow+0x340>
 800930e:	2400      	movs	r4, #0
 8009310:	e68a      	b.n	8009028 <__ieee754_pow+0x428>
 8009312:	2601      	movs	r6, #1
 8009314:	e6a0      	b.n	8009058 <__ieee754_pow+0x458>
 8009316:	bf00      	nop
 8009318:	4a454eef 	.word	0x4a454eef
 800931c:	3fca7e28 	.word	0x3fca7e28
 8009320:	93c9db65 	.word	0x93c9db65
 8009324:	3fcd864a 	.word	0x3fcd864a
 8009328:	a91d4101 	.word	0xa91d4101
 800932c:	3fd17460 	.word	0x3fd17460
 8009330:	518f264d 	.word	0x518f264d
 8009334:	3fd55555 	.word	0x3fd55555
 8009338:	db6fabff 	.word	0xdb6fabff
 800933c:	3fdb6db6 	.word	0x3fdb6db6
 8009340:	33333303 	.word	0x33333303
 8009344:	3fe33333 	.word	0x3fe33333
 8009348:	e0000000 	.word	0xe0000000
 800934c:	3feec709 	.word	0x3feec709
 8009350:	dc3a03fd 	.word	0xdc3a03fd
 8009354:	3feec709 	.word	0x3feec709
 8009358:	145b01f5 	.word	0x145b01f5
 800935c:	be3e2fe0 	.word	0xbe3e2fe0
 8009360:	7ff00000 	.word	0x7ff00000
 8009364:	43400000 	.word	0x43400000
 8009368:	0003988e 	.word	0x0003988e
 800936c:	000bb679 	.word	0x000bb679
 8009370:	08009a48 	.word	0x08009a48
 8009374:	3ff00000 	.word	0x3ff00000
 8009378:	40080000 	.word	0x40080000
 800937c:	08009a28 	.word	0x08009a28
 8009380:	08009a38 	.word	0x08009a38
 8009384:	a39a      	add	r3, pc, #616	@ (adr r3, 80095f0 <__ieee754_pow+0x9f0>)
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	4630      	mov	r0, r6
 800938c:	4639      	mov	r1, r7
 800938e:	f7f6 fee5 	bl	800015c <__adddf3>
 8009392:	4642      	mov	r2, r8
 8009394:	e9cd 0100 	strd	r0, r1, [sp]
 8009398:	464b      	mov	r3, r9
 800939a:	4620      	mov	r0, r4
 800939c:	4629      	mov	r1, r5
 800939e:	f7f6 fedb 	bl	8000158 <__aeabi_dsub>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093aa:	f7f7 fb1d 	bl	80009e8 <__aeabi_dcmpgt>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	f47f ae09 	bne.w	8008fc6 <__ieee754_pow+0x3c6>
 80093b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80093b8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80093bc:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80093c0:	fa43 fa0a 	asr.w	sl, r3, sl
 80093c4:	44da      	add	sl, fp
 80093c6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80093ca:	489b      	ldr	r0, [pc, #620]	@ (8009638 <__ieee754_pow+0xa38>)
 80093cc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80093d0:	4108      	asrs	r0, r1
 80093d2:	ea00 030a 	and.w	r3, r0, sl
 80093d6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80093da:	f1c1 0114 	rsb	r1, r1, #20
 80093de:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80093e2:	4640      	mov	r0, r8
 80093e4:	fa4a fa01 	asr.w	sl, sl, r1
 80093e8:	f1bb 0f00 	cmp.w	fp, #0
 80093ec:	4649      	mov	r1, r9
 80093ee:	f04f 0200 	mov.w	r2, #0
 80093f2:	bfb8      	it	lt
 80093f4:	f1ca 0a00 	rsblt	sl, sl, #0
 80093f8:	f7f6 feae 	bl	8000158 <__aeabi_dsub>
 80093fc:	4680      	mov	r8, r0
 80093fe:	4689      	mov	r9, r1
 8009400:	2400      	movs	r4, #0
 8009402:	4632      	mov	r2, r6
 8009404:	463b      	mov	r3, r7
 8009406:	4640      	mov	r0, r8
 8009408:	4649      	mov	r1, r9
 800940a:	f7f6 fea7 	bl	800015c <__adddf3>
 800940e:	a37a      	add	r3, pc, #488	@ (adr r3, 80095f8 <__ieee754_pow+0x9f8>)
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	4620      	mov	r0, r4
 8009416:	460d      	mov	r5, r1
 8009418:	f7f7 f856 	bl	80004c8 <__aeabi_dmul>
 800941c:	4642      	mov	r2, r8
 800941e:	464b      	mov	r3, r9
 8009420:	e9cd 0100 	strd	r0, r1, [sp]
 8009424:	4620      	mov	r0, r4
 8009426:	4629      	mov	r1, r5
 8009428:	f7f6 fe96 	bl	8000158 <__aeabi_dsub>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4630      	mov	r0, r6
 8009432:	4639      	mov	r1, r7
 8009434:	f7f6 fe90 	bl	8000158 <__aeabi_dsub>
 8009438:	a371      	add	r3, pc, #452	@ (adr r3, 8009600 <__ieee754_pow+0xa00>)
 800943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943e:	f7f7 f843 	bl	80004c8 <__aeabi_dmul>
 8009442:	a371      	add	r3, pc, #452	@ (adr r3, 8009608 <__ieee754_pow+0xa08>)
 8009444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009448:	4680      	mov	r8, r0
 800944a:	4689      	mov	r9, r1
 800944c:	4620      	mov	r0, r4
 800944e:	4629      	mov	r1, r5
 8009450:	f7f7 f83a 	bl	80004c8 <__aeabi_dmul>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	4640      	mov	r0, r8
 800945a:	4649      	mov	r1, r9
 800945c:	f7f6 fe7e 	bl	800015c <__adddf3>
 8009460:	4604      	mov	r4, r0
 8009462:	460d      	mov	r5, r1
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	e9dd 0100 	ldrd	r0, r1, [sp]
 800946c:	f7f6 fe76 	bl	800015c <__adddf3>
 8009470:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009474:	4680      	mov	r8, r0
 8009476:	4689      	mov	r9, r1
 8009478:	f7f6 fe6e 	bl	8000158 <__aeabi_dsub>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4620      	mov	r0, r4
 8009482:	4629      	mov	r1, r5
 8009484:	f7f6 fe68 	bl	8000158 <__aeabi_dsub>
 8009488:	4642      	mov	r2, r8
 800948a:	4606      	mov	r6, r0
 800948c:	460f      	mov	r7, r1
 800948e:	464b      	mov	r3, r9
 8009490:	4640      	mov	r0, r8
 8009492:	4649      	mov	r1, r9
 8009494:	f7f7 f818 	bl	80004c8 <__aeabi_dmul>
 8009498:	a35d      	add	r3, pc, #372	@ (adr r3, 8009610 <__ieee754_pow+0xa10>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	4604      	mov	r4, r0
 80094a0:	460d      	mov	r5, r1
 80094a2:	f7f7 f811 	bl	80004c8 <__aeabi_dmul>
 80094a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009618 <__ieee754_pow+0xa18>)
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	f7f6 fe54 	bl	8000158 <__aeabi_dsub>
 80094b0:	4622      	mov	r2, r4
 80094b2:	462b      	mov	r3, r5
 80094b4:	f7f7 f808 	bl	80004c8 <__aeabi_dmul>
 80094b8:	a359      	add	r3, pc, #356	@ (adr r3, 8009620 <__ieee754_pow+0xa20>)
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	f7f6 fe4d 	bl	800015c <__adddf3>
 80094c2:	4622      	mov	r2, r4
 80094c4:	462b      	mov	r3, r5
 80094c6:	f7f6 ffff 	bl	80004c8 <__aeabi_dmul>
 80094ca:	a357      	add	r3, pc, #348	@ (adr r3, 8009628 <__ieee754_pow+0xa28>)
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	f7f6 fe42 	bl	8000158 <__aeabi_dsub>
 80094d4:	4622      	mov	r2, r4
 80094d6:	462b      	mov	r3, r5
 80094d8:	f7f6 fff6 	bl	80004c8 <__aeabi_dmul>
 80094dc:	a354      	add	r3, pc, #336	@ (adr r3, 8009630 <__ieee754_pow+0xa30>)
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	f7f6 fe3b 	bl	800015c <__adddf3>
 80094e6:	4622      	mov	r2, r4
 80094e8:	462b      	mov	r3, r5
 80094ea:	f7f6 ffed 	bl	80004c8 <__aeabi_dmul>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	4640      	mov	r0, r8
 80094f4:	4649      	mov	r1, r9
 80094f6:	f7f6 fe2f 	bl	8000158 <__aeabi_dsub>
 80094fa:	4604      	mov	r4, r0
 80094fc:	460d      	mov	r5, r1
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	4640      	mov	r0, r8
 8009504:	4649      	mov	r1, r9
 8009506:	f7f6 ffdf 	bl	80004c8 <__aeabi_dmul>
 800950a:	2200      	movs	r2, #0
 800950c:	e9cd 0100 	strd	r0, r1, [sp]
 8009510:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009514:	4620      	mov	r0, r4
 8009516:	4629      	mov	r1, r5
 8009518:	f7f6 fe1e 	bl	8000158 <__aeabi_dsub>
 800951c:	4602      	mov	r2, r0
 800951e:	460b      	mov	r3, r1
 8009520:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009524:	f7f7 f8fa 	bl	800071c <__aeabi_ddiv>
 8009528:	4632      	mov	r2, r6
 800952a:	4604      	mov	r4, r0
 800952c:	460d      	mov	r5, r1
 800952e:	463b      	mov	r3, r7
 8009530:	4640      	mov	r0, r8
 8009532:	4649      	mov	r1, r9
 8009534:	f7f6 ffc8 	bl	80004c8 <__aeabi_dmul>
 8009538:	4632      	mov	r2, r6
 800953a:	463b      	mov	r3, r7
 800953c:	f7f6 fe0e 	bl	800015c <__adddf3>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	4620      	mov	r0, r4
 8009546:	4629      	mov	r1, r5
 8009548:	f7f6 fe06 	bl	8000158 <__aeabi_dsub>
 800954c:	4642      	mov	r2, r8
 800954e:	464b      	mov	r3, r9
 8009550:	f7f6 fe02 	bl	8000158 <__aeabi_dsub>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	2000      	movs	r0, #0
 800955a:	4938      	ldr	r1, [pc, #224]	@ (800963c <__ieee754_pow+0xa3c>)
 800955c:	f7f6 fdfc 	bl	8000158 <__aeabi_dsub>
 8009560:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009564:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8009568:	da2e      	bge.n	80095c8 <__ieee754_pow+0x9c8>
 800956a:	4652      	mov	r2, sl
 800956c:	f000 f874 	bl	8009658 <scalbn>
 8009570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009574:	f7ff bbed 	b.w	8008d52 <__ieee754_pow+0x152>
 8009578:	4c31      	ldr	r4, [pc, #196]	@ (8009640 <__ieee754_pow+0xa40>)
 800957a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800957e:	42a3      	cmp	r3, r4
 8009580:	d91a      	bls.n	80095b8 <__ieee754_pow+0x9b8>
 8009582:	4b30      	ldr	r3, [pc, #192]	@ (8009644 <__ieee754_pow+0xa44>)
 8009584:	440b      	add	r3, r1
 8009586:	4303      	orrs	r3, r0
 8009588:	d009      	beq.n	800959e <__ieee754_pow+0x99e>
 800958a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800958e:	2200      	movs	r2, #0
 8009590:	2300      	movs	r3, #0
 8009592:	f7f7 fa0b 	bl	80009ac <__aeabi_dcmplt>
 8009596:	3800      	subs	r0, #0
 8009598:	bf18      	it	ne
 800959a:	2001      	movne	r0, #1
 800959c:	e444      	b.n	8008e28 <__ieee754_pow+0x228>
 800959e:	4642      	mov	r2, r8
 80095a0:	464b      	mov	r3, r9
 80095a2:	f7f6 fdd9 	bl	8000158 <__aeabi_dsub>
 80095a6:	4632      	mov	r2, r6
 80095a8:	463b      	mov	r3, r7
 80095aa:	f7f7 fa13 	bl	80009d4 <__aeabi_dcmpge>
 80095ae:	2800      	cmp	r0, #0
 80095b0:	d1eb      	bne.n	800958a <__ieee754_pow+0x98a>
 80095b2:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8009648 <__ieee754_pow+0xa48>
 80095b6:	e6fd      	b.n	80093b4 <__ieee754_pow+0x7b4>
 80095b8:	469a      	mov	sl, r3
 80095ba:	4b24      	ldr	r3, [pc, #144]	@ (800964c <__ieee754_pow+0xa4c>)
 80095bc:	459a      	cmp	sl, r3
 80095be:	f63f aef9 	bhi.w	80093b4 <__ieee754_pow+0x7b4>
 80095c2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80095c6:	e71b      	b.n	8009400 <__ieee754_pow+0x800>
 80095c8:	4621      	mov	r1, r4
 80095ca:	e7d1      	b.n	8009570 <__ieee754_pow+0x970>
 80095cc:	2000      	movs	r0, #0
 80095ce:	491b      	ldr	r1, [pc, #108]	@ (800963c <__ieee754_pow+0xa3c>)
 80095d0:	f7ff bb34 	b.w	8008c3c <__ieee754_pow+0x3c>
 80095d4:	2000      	movs	r0, #0
 80095d6:	2100      	movs	r1, #0
 80095d8:	f7ff bb30 	b.w	8008c3c <__ieee754_pow+0x3c>
 80095dc:	4650      	mov	r0, sl
 80095de:	4659      	mov	r1, fp
 80095e0:	f7ff bb2c 	b.w	8008c3c <__ieee754_pow+0x3c>
 80095e4:	460c      	mov	r4, r1
 80095e6:	f7ff bb79 	b.w	8008cdc <__ieee754_pow+0xdc>
 80095ea:	2400      	movs	r4, #0
 80095ec:	f7ff bb64 	b.w	8008cb8 <__ieee754_pow+0xb8>
 80095f0:	652b82fe 	.word	0x652b82fe
 80095f4:	3c971547 	.word	0x3c971547
 80095f8:	00000000 	.word	0x00000000
 80095fc:	3fe62e43 	.word	0x3fe62e43
 8009600:	fefa39ef 	.word	0xfefa39ef
 8009604:	3fe62e42 	.word	0x3fe62e42
 8009608:	0ca86c39 	.word	0x0ca86c39
 800960c:	be205c61 	.word	0xbe205c61
 8009610:	72bea4d0 	.word	0x72bea4d0
 8009614:	3e663769 	.word	0x3e663769
 8009618:	c5d26bf1 	.word	0xc5d26bf1
 800961c:	3ebbbd41 	.word	0x3ebbbd41
 8009620:	af25de2c 	.word	0xaf25de2c
 8009624:	3f11566a 	.word	0x3f11566a
 8009628:	16bebd93 	.word	0x16bebd93
 800962c:	3f66c16c 	.word	0x3f66c16c
 8009630:	5555553e 	.word	0x5555553e
 8009634:	3fc55555 	.word	0x3fc55555
 8009638:	fff00000 	.word	0xfff00000
 800963c:	3ff00000 	.word	0x3ff00000
 8009640:	4090cbff 	.word	0x4090cbff
 8009644:	3f6f3400 	.word	0x3f6f3400
 8009648:	4090cc00 	.word	0x4090cc00
 800964c:	3fe00000 	.word	0x3fe00000

08009650 <fabs>:
 8009650:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009654:	4619      	mov	r1, r3
 8009656:	4770      	bx	lr

08009658 <scalbn>:
 8009658:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800965c:	4616      	mov	r6, r2
 800965e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009662:	4683      	mov	fp, r0
 8009664:	468c      	mov	ip, r1
 8009666:	460b      	mov	r3, r1
 8009668:	b982      	cbnz	r2, 800968c <scalbn+0x34>
 800966a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800966e:	4303      	orrs	r3, r0
 8009670:	d039      	beq.n	80096e6 <scalbn+0x8e>
 8009672:	4b2f      	ldr	r3, [pc, #188]	@ (8009730 <scalbn+0xd8>)
 8009674:	2200      	movs	r2, #0
 8009676:	f7f6 ff27 	bl	80004c8 <__aeabi_dmul>
 800967a:	4b2e      	ldr	r3, [pc, #184]	@ (8009734 <scalbn+0xdc>)
 800967c:	4683      	mov	fp, r0
 800967e:	429e      	cmp	r6, r3
 8009680:	468c      	mov	ip, r1
 8009682:	da0d      	bge.n	80096a0 <scalbn+0x48>
 8009684:	a326      	add	r3, pc, #152	@ (adr r3, 8009720 <scalbn+0xc8>)
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	e01b      	b.n	80096c4 <scalbn+0x6c>
 800968c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8009690:	42ba      	cmp	r2, r7
 8009692:	d109      	bne.n	80096a8 <scalbn+0x50>
 8009694:	4602      	mov	r2, r0
 8009696:	f7f6 fd61 	bl	800015c <__adddf3>
 800969a:	4683      	mov	fp, r0
 800969c:	468c      	mov	ip, r1
 800969e:	e022      	b.n	80096e6 <scalbn+0x8e>
 80096a0:	460b      	mov	r3, r1
 80096a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80096a6:	3a36      	subs	r2, #54	@ 0x36
 80096a8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80096ac:	428e      	cmp	r6, r1
 80096ae:	dd0c      	ble.n	80096ca <scalbn+0x72>
 80096b0:	a31d      	add	r3, pc, #116	@ (adr r3, 8009728 <scalbn+0xd0>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	461c      	mov	r4, r3
 80096b8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80096bc:	f361 74df 	bfi	r4, r1, #31, #1
 80096c0:	4621      	mov	r1, r4
 80096c2:	481d      	ldr	r0, [pc, #116]	@ (8009738 <scalbn+0xe0>)
 80096c4:	f7f6 ff00 	bl	80004c8 <__aeabi_dmul>
 80096c8:	e7e7      	b.n	800969a <scalbn+0x42>
 80096ca:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80096ce:	4432      	add	r2, r6
 80096d0:	428a      	cmp	r2, r1
 80096d2:	dced      	bgt.n	80096b0 <scalbn+0x58>
 80096d4:	2a00      	cmp	r2, #0
 80096d6:	dd0a      	ble.n	80096ee <scalbn+0x96>
 80096d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80096dc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80096e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80096e4:	46ac      	mov	ip, r5
 80096e6:	4658      	mov	r0, fp
 80096e8:	4661      	mov	r1, ip
 80096ea:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80096ee:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80096f2:	da09      	bge.n	8009708 <scalbn+0xb0>
 80096f4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80096f8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80096fc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8009700:	480e      	ldr	r0, [pc, #56]	@ (800973c <scalbn+0xe4>)
 8009702:	f041 011f 	orr.w	r1, r1, #31
 8009706:	e7bd      	b.n	8009684 <scalbn+0x2c>
 8009708:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800970c:	3236      	adds	r2, #54	@ 0x36
 800970e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009712:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009716:	4658      	mov	r0, fp
 8009718:	4629      	mov	r1, r5
 800971a:	2200      	movs	r2, #0
 800971c:	4b08      	ldr	r3, [pc, #32]	@ (8009740 <scalbn+0xe8>)
 800971e:	e7d1      	b.n	80096c4 <scalbn+0x6c>
 8009720:	c2f8f359 	.word	0xc2f8f359
 8009724:	01a56e1f 	.word	0x01a56e1f
 8009728:	8800759c 	.word	0x8800759c
 800972c:	7e37e43c 	.word	0x7e37e43c
 8009730:	43500000 	.word	0x43500000
 8009734:	ffff3cb0 	.word	0xffff3cb0
 8009738:	8800759c 	.word	0x8800759c
 800973c:	c2f8f359 	.word	0xc2f8f359
 8009740:	3c900000 	.word	0x3c900000

08009744 <with_errno>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	4604      	mov	r4, r0
 8009748:	460d      	mov	r5, r1
 800974a:	4616      	mov	r6, r2
 800974c:	f7ff f8ea 	bl	8008924 <__errno>
 8009750:	4629      	mov	r1, r5
 8009752:	6006      	str	r6, [r0, #0]
 8009754:	4620      	mov	r0, r4
 8009756:	bd70      	pop	{r4, r5, r6, pc}

08009758 <xflow>:
 8009758:	b513      	push	{r0, r1, r4, lr}
 800975a:	4604      	mov	r4, r0
 800975c:	4619      	mov	r1, r3
 800975e:	4610      	mov	r0, r2
 8009760:	b10c      	cbz	r4, 8009766 <xflow+0xe>
 8009762:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009766:	e9cd 2300 	strd	r2, r3, [sp]
 800976a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800976e:	f7f6 feab 	bl	80004c8 <__aeabi_dmul>
 8009772:	2222      	movs	r2, #34	@ 0x22
 8009774:	b002      	add	sp, #8
 8009776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800977a:	f7ff bfe3 	b.w	8009744 <with_errno>

0800977e <__math_uflow>:
 800977e:	2200      	movs	r2, #0
 8009780:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009784:	f7ff bfe8 	b.w	8009758 <xflow>

08009788 <__math_oflow>:
 8009788:	2200      	movs	r2, #0
 800978a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800978e:	f7ff bfe3 	b.w	8009758 <xflow>
	...

08009794 <__ieee754_sqrt>:
 8009794:	4a67      	ldr	r2, [pc, #412]	@ (8009934 <__ieee754_sqrt+0x1a0>)
 8009796:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979a:	438a      	bics	r2, r1
 800979c:	4606      	mov	r6, r0
 800979e:	460f      	mov	r7, r1
 80097a0:	460b      	mov	r3, r1
 80097a2:	4604      	mov	r4, r0
 80097a4:	d10e      	bne.n	80097c4 <__ieee754_sqrt+0x30>
 80097a6:	4602      	mov	r2, r0
 80097a8:	f7f6 fe8e 	bl	80004c8 <__aeabi_dmul>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	4630      	mov	r0, r6
 80097b2:	4639      	mov	r1, r7
 80097b4:	f7f6 fcd2 	bl	800015c <__adddf3>
 80097b8:	4606      	mov	r6, r0
 80097ba:	460f      	mov	r7, r1
 80097bc:	4630      	mov	r0, r6
 80097be:	4639      	mov	r1, r7
 80097c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c4:	2900      	cmp	r1, #0
 80097c6:	dc0c      	bgt.n	80097e2 <__ieee754_sqrt+0x4e>
 80097c8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80097cc:	4302      	orrs	r2, r0
 80097ce:	d0f5      	beq.n	80097bc <__ieee754_sqrt+0x28>
 80097d0:	b189      	cbz	r1, 80097f6 <__ieee754_sqrt+0x62>
 80097d2:	4602      	mov	r2, r0
 80097d4:	f7f6 fcc0 	bl	8000158 <__aeabi_dsub>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	f7f6 ff9e 	bl	800071c <__aeabi_ddiv>
 80097e0:	e7ea      	b.n	80097b8 <__ieee754_sqrt+0x24>
 80097e2:	150a      	asrs	r2, r1, #20
 80097e4:	d115      	bne.n	8009812 <__ieee754_sqrt+0x7e>
 80097e6:	2100      	movs	r1, #0
 80097e8:	e009      	b.n	80097fe <__ieee754_sqrt+0x6a>
 80097ea:	0ae3      	lsrs	r3, r4, #11
 80097ec:	3a15      	subs	r2, #21
 80097ee:	0564      	lsls	r4, r4, #21
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d0fa      	beq.n	80097ea <__ieee754_sqrt+0x56>
 80097f4:	e7f7      	b.n	80097e6 <__ieee754_sqrt+0x52>
 80097f6:	460a      	mov	r2, r1
 80097f8:	e7fa      	b.n	80097f0 <__ieee754_sqrt+0x5c>
 80097fa:	005b      	lsls	r3, r3, #1
 80097fc:	3101      	adds	r1, #1
 80097fe:	02d8      	lsls	r0, r3, #11
 8009800:	d5fb      	bpl.n	80097fa <__ieee754_sqrt+0x66>
 8009802:	1e48      	subs	r0, r1, #1
 8009804:	1a12      	subs	r2, r2, r0
 8009806:	f1c1 0020 	rsb	r0, r1, #32
 800980a:	fa24 f000 	lsr.w	r0, r4, r0
 800980e:	4303      	orrs	r3, r0
 8009810:	408c      	lsls	r4, r1
 8009812:	2600      	movs	r6, #0
 8009814:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009818:	2116      	movs	r1, #22
 800981a:	07d2      	lsls	r2, r2, #31
 800981c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009820:	4632      	mov	r2, r6
 8009822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009826:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800982a:	bf5c      	itt	pl
 800982c:	005b      	lslpl	r3, r3, #1
 800982e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009832:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009836:	bf58      	it	pl
 8009838:	0064      	lslpl	r4, r4, #1
 800983a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800983e:	107f      	asrs	r7, r7, #1
 8009840:	0064      	lsls	r4, r4, #1
 8009842:	1815      	adds	r5, r2, r0
 8009844:	429d      	cmp	r5, r3
 8009846:	bfde      	ittt	le
 8009848:	182a      	addle	r2, r5, r0
 800984a:	1b5b      	suble	r3, r3, r5
 800984c:	1836      	addle	r6, r6, r0
 800984e:	0fe5      	lsrs	r5, r4, #31
 8009850:	3901      	subs	r1, #1
 8009852:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009856:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800985a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800985e:	d1f0      	bne.n	8009842 <__ieee754_sqrt+0xae>
 8009860:	460d      	mov	r5, r1
 8009862:	f04f 0a20 	mov.w	sl, #32
 8009866:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800986a:	429a      	cmp	r2, r3
 800986c:	eb01 0c00 	add.w	ip, r1, r0
 8009870:	db02      	blt.n	8009878 <__ieee754_sqrt+0xe4>
 8009872:	d113      	bne.n	800989c <__ieee754_sqrt+0x108>
 8009874:	45a4      	cmp	ip, r4
 8009876:	d811      	bhi.n	800989c <__ieee754_sqrt+0x108>
 8009878:	f1bc 0f00 	cmp.w	ip, #0
 800987c:	eb0c 0100 	add.w	r1, ip, r0
 8009880:	da42      	bge.n	8009908 <__ieee754_sqrt+0x174>
 8009882:	2900      	cmp	r1, #0
 8009884:	db40      	blt.n	8009908 <__ieee754_sqrt+0x174>
 8009886:	f102 0e01 	add.w	lr, r2, #1
 800988a:	1a9b      	subs	r3, r3, r2
 800988c:	4672      	mov	r2, lr
 800988e:	45a4      	cmp	ip, r4
 8009890:	bf88      	it	hi
 8009892:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009896:	eba4 040c 	sub.w	r4, r4, ip
 800989a:	4405      	add	r5, r0
 800989c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80098a0:	f1ba 0a01 	subs.w	sl, sl, #1
 80098a4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80098a8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80098ac:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80098b0:	d1db      	bne.n	800986a <__ieee754_sqrt+0xd6>
 80098b2:	431c      	orrs	r4, r3
 80098b4:	d01a      	beq.n	80098ec <__ieee754_sqrt+0x158>
 80098b6:	4c20      	ldr	r4, [pc, #128]	@ (8009938 <__ieee754_sqrt+0x1a4>)
 80098b8:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800993c <__ieee754_sqrt+0x1a8>
 80098bc:	e9d4 0100 	ldrd	r0, r1, [r4]
 80098c0:	e9db 2300 	ldrd	r2, r3, [fp]
 80098c4:	f7f6 fc48 	bl	8000158 <__aeabi_dsub>
 80098c8:	e9d4 8900 	ldrd	r8, r9, [r4]
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4640      	mov	r0, r8
 80098d2:	4649      	mov	r1, r9
 80098d4:	f7f7 f874 	bl	80009c0 <__aeabi_dcmple>
 80098d8:	b140      	cbz	r0, 80098ec <__ieee754_sqrt+0x158>
 80098da:	e9d4 0100 	ldrd	r0, r1, [r4]
 80098de:	e9db 2300 	ldrd	r2, r3, [fp]
 80098e2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80098e6:	d111      	bne.n	800990c <__ieee754_sqrt+0x178>
 80098e8:	4655      	mov	r5, sl
 80098ea:	3601      	adds	r6, #1
 80098ec:	1072      	asrs	r2, r6, #1
 80098ee:	086b      	lsrs	r3, r5, #1
 80098f0:	07f1      	lsls	r1, r6, #31
 80098f2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80098f6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80098fa:	bf48      	it	mi
 80098fc:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009900:	4618      	mov	r0, r3
 8009902:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8009906:	e757      	b.n	80097b8 <__ieee754_sqrt+0x24>
 8009908:	4696      	mov	lr, r2
 800990a:	e7be      	b.n	800988a <__ieee754_sqrt+0xf6>
 800990c:	f7f6 fc26 	bl	800015c <__adddf3>
 8009910:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	4640      	mov	r0, r8
 800991a:	4649      	mov	r1, r9
 800991c:	f7f7 f846 	bl	80009ac <__aeabi_dcmplt>
 8009920:	b120      	cbz	r0, 800992c <__ieee754_sqrt+0x198>
 8009922:	1ca8      	adds	r0, r5, #2
 8009924:	bf08      	it	eq
 8009926:	3601      	addeq	r6, #1
 8009928:	3502      	adds	r5, #2
 800992a:	e7df      	b.n	80098ec <__ieee754_sqrt+0x158>
 800992c:	1c6b      	adds	r3, r5, #1
 800992e:	f023 0501 	bic.w	r5, r3, #1
 8009932:	e7db      	b.n	80098ec <__ieee754_sqrt+0x158>
 8009934:	7ff00000 	.word	0x7ff00000
 8009938:	20000078 	.word	0x20000078
 800993c:	20000070 	.word	0x20000070

08009940 <_init>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	bf00      	nop
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr

0800994c <_fini>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	bf00      	nop
 8009950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009952:	bc08      	pop	{r3}
 8009954:	469e      	mov	lr, r3
 8009956:	4770      	bx	lr
