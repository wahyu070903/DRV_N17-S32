
DRV_N17-S32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afa8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800b0b8  0800b0b8  0000c0b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1c0  0800b1c0  0000d080  2**0
                  CONTENTS
  4 .ARM          00000000  0800b1c0  0800b1c0  0000d080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b1c0  0800b1c0  0000d080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1c0  0800b1c0  0000c1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b1c4  0800b1c4  0000c1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800b1c8  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c0  20000080  0800b248  0000d080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001440  0800b248  0000d440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bf4  00000000  00000000  0000d0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e9c  00000000  00000000  00026c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0002ab40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001152  00000000  00000000  0002c178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001adec  00000000  00000000  0002d2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae56  00000000  00000000  000480b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096c25  00000000  00000000  00062f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9b31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006534  00000000  00000000  000f9b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001000a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b0a0 	.word	0x0800b0a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	0800b0a0 	.word	0x0800b0a0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d76:	2afd      	cmp	r2, #253	@ 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	@ 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	@ 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	@ 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <encRead>:
	float angle_deg = (angle * 360.0) / 4096.0;

	*result = angle_deg;
}

void encRead(){
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_IT(&hi2c1, (ENC_ADDR << 1), AS5600_RAW_ANGLE_MSB_REG, I2C_MEMADD_SIZE_8BIT, raw_buffer, 2);
 80010b6:	2302      	movs	r3, #2
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <encRead+0x20>)
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	220c      	movs	r2, #12
 80010c2:	216c      	movs	r1, #108	@ 0x6c
 80010c4:	4803      	ldr	r0, [pc, #12]	@ (80010d4 <encRead+0x24>)
 80010c6:	f002 fab7 	bl	8003638 <HAL_I2C_Mem_Read_IT>
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200000a4 	.word	0x200000a4
 80010d4:	2000034c 	.word	0x2000034c

080010d8 <getCounter>:

int32_t getCounter(){
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	return accumulate_counter;
 80010dc:	4b02      	ldr	r3, [pc, #8]	@ (80010e8 <getCounter+0x10>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	200000a0 	.word	0x200000a0

080010ec <encGetBuffer>:

void encGetBuffer(uint8_t* result){
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	result[0] = raw_buffer[0];
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <encGetBuffer+0x24>)
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	701a      	strb	r2, [r3, #0]
	result[1] = raw_buffer[1];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3301      	adds	r3, #1
 8001100:	4a03      	ldr	r2, [pc, #12]	@ (8001110 <encGetBuffer+0x24>)
 8001102:	7852      	ldrb	r2, [r2, #1]
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	200000a4 	.word	0x200000a4

08001114 <HAL_I2C_MemRxCpltCallback>:
	filteredValue = sum / FILTER_SIZE;

	return filteredValue;
}

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a44      	ldr	r2, [pc, #272]	@ (8001234 <HAL_I2C_MemRxCpltCallback+0x120>)
 8001122:	4293      	cmp	r3, r2
 8001124:	f040 8081 	bne.w	800122a <HAL_I2C_MemRxCpltCallback+0x116>
    	uint16_t position_now = (raw_buffer[0] << 8) | raw_buffer[1];
 8001128:	4b43      	ldr	r3, [pc, #268]	@ (8001238 <HAL_I2C_MemRxCpltCallback+0x124>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b41      	ldr	r3, [pc, #260]	@ (8001238 <HAL_I2C_MemRxCpltCallback+0x124>)
 8001132:	785b      	ldrb	r3, [r3, #1]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21b      	sxth	r3, r3
 800113a:	817b      	strh	r3, [r7, #10]
//      filter make it worse disable it
//    	position_now = lowPassFilter(position_now);
		active_quadrant = -1;
 800113c:	4b3f      	ldr	r3, [pc, #252]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 800113e:	22ff      	movs	r2, #255	@ 0xff
 8001140:	701a      	strb	r2, [r3, #0]

		if(position_now >= 0 && position_now <= 1024) active_quadrant = 1;
 8001142:	897b      	ldrh	r3, [r7, #10]
 8001144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001148:	d802      	bhi.n	8001150 <HAL_I2C_MemRxCpltCallback+0x3c>
 800114a:	4b3c      	ldr	r3, [pc, #240]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
		if(position_now >= 1025 && position_now <= 2048) active_quadrant = 2;
 8001150:	897b      	ldrh	r3, [r7, #10]
 8001152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001156:	d906      	bls.n	8001166 <HAL_I2C_MemRxCpltCallback+0x52>
 8001158:	897b      	ldrh	r3, [r7, #10]
 800115a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800115e:	d802      	bhi.n	8001166 <HAL_I2C_MemRxCpltCallback+0x52>
 8001160:	4b36      	ldr	r3, [pc, #216]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 8001162:	2202      	movs	r2, #2
 8001164:	701a      	strb	r2, [r3, #0]
		if(position_now >= 2049 && position_now <= 3072) active_quadrant = 3;
 8001166:	897b      	ldrh	r3, [r7, #10]
 8001168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800116c:	d906      	bls.n	800117c <HAL_I2C_MemRxCpltCallback+0x68>
 800116e:	897b      	ldrh	r3, [r7, #10]
 8001170:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001174:	d802      	bhi.n	800117c <HAL_I2C_MemRxCpltCallback+0x68>
 8001176:	4b31      	ldr	r3, [pc, #196]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 8001178:	2203      	movs	r2, #3
 800117a:	701a      	strb	r2, [r3, #0]
		if(position_now >= 3073 && position_now <= 4095) active_quadrant = 4;
 800117c:	897b      	ldrh	r3, [r7, #10]
 800117e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001182:	d906      	bls.n	8001192 <HAL_I2C_MemRxCpltCallback+0x7e>
 8001184:	897b      	ldrh	r3, [r7, #10]
 8001186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800118a:	d202      	bcs.n	8001192 <HAL_I2C_MemRxCpltCallback+0x7e>
 800118c:	4b2b      	ldr	r3, [pc, #172]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 800118e:	2204      	movs	r2, #4
 8001190:	701a      	strb	r2, [r3, #0]

		if(last_quadrant == -1) last_quadrant = active_quadrant;
 8001192:	4b2b      	ldr	r3, [pc, #172]	@ (8001240 <HAL_I2C_MemRxCpltCallback+0x12c>)
 8001194:	f993 3000 	ldrsb.w	r3, [r3]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d104      	bne.n	80011a8 <HAL_I2C_MemRxCpltCallback+0x94>
 800119e:	4b27      	ldr	r3, [pc, #156]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 80011a0:	f993 2000 	ldrsb.w	r2, [r3]
 80011a4:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <HAL_I2C_MemRxCpltCallback+0x12c>)
 80011a6:	701a      	strb	r2, [r3, #0]
		int32_t delta = (int32_t)(position_now - position_prev);
 80011a8:	897b      	ldrh	r3, [r7, #10]
 80011aa:	4a26      	ldr	r2, [pc, #152]	@ (8001244 <HAL_I2C_MemRxCpltCallback+0x130>)
 80011ac:	8812      	ldrh	r2, [r2, #0]
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]

		if(last_quadrant == 4 && active_quadrant == 1){
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <HAL_I2C_MemRxCpltCallback+0x12c>)
 80011b4:	f993 3000 	ldrsb.w	r3, [r3]
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d110      	bne.n	80011de <HAL_I2C_MemRxCpltCallback+0xca>
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 80011be:	f993 3000 	ldrsb.w	r3, [r3]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d10b      	bne.n	80011de <HAL_I2C_MemRxCpltCallback+0xca>
			elapsed_fall_f = TRUE;
 80011c6:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <HAL_I2C_MemRxCpltCallback+0x134>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
			delta = ((ENC_PPR - 1) - abs(delta));
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bfb8      	it	lt
 80011d2:	425b      	neglt	r3, r3
 80011d4:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 80011d8:	330f      	adds	r3, #15
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	e011      	b.n	8001202 <HAL_I2C_MemRxCpltCallback+0xee>
		}else if(last_quadrant == 1 && active_quadrant == 4){
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <HAL_I2C_MemRxCpltCallback+0x12c>)
 80011e0:	f993 3000 	ldrsb.w	r3, [r3]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d10c      	bne.n	8001202 <HAL_I2C_MemRxCpltCallback+0xee>
 80011e8:	4b14      	ldr	r3, [pc, #80]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 80011ea:	f993 3000 	ldrsb.w	r3, [r3]
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d107      	bne.n	8001202 <HAL_I2C_MemRxCpltCallback+0xee>
			elapsed_rise_f = TRUE;
 80011f2:	4b16      	ldr	r3, [pc, #88]	@ (800124c <HAL_I2C_MemRxCpltCallback+0x138>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
			delta = ((ENC_PPR - 1) - delta);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 80011fe:	330f      	adds	r3, #15
 8001200:	60fb      	str	r3, [r7, #12]
		}

		accumulate_counter += delta;
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_I2C_MemRxCpltCallback+0x13c>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4413      	add	r3, r2
 800120a:	4a11      	ldr	r2, [pc, #68]	@ (8001250 <HAL_I2C_MemRxCpltCallback+0x13c>)
 800120c:	6013      	str	r3, [r2, #0]

		elapsed_fall_f = FALSE;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <HAL_I2C_MemRxCpltCallback+0x134>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
		elapsed_rise_f = FALSE;
 8001214:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <HAL_I2C_MemRxCpltCallback+0x138>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
		position_prev = position_now;
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <HAL_I2C_MemRxCpltCallback+0x130>)
 800121c:	897b      	ldrh	r3, [r7, #10]
 800121e:	8013      	strh	r3, [r2, #0]
		last_quadrant = active_quadrant;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_I2C_MemRxCpltCallback+0x128>)
 8001222:	f993 2000 	ldrsb.w	r2, [r3]
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_I2C_MemRxCpltCallback+0x12c>)
 8001228:	701a      	strb	r2, [r3, #0]

    }
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40005400 	.word	0x40005400
 8001238:	200000a4 	.word	0x200000a4
 800123c:	20000000 	.word	0x20000000
 8001240:	20000001 	.word	0x20000001
 8001244:	2000009c 	.word	0x2000009c
 8001248:	200000a6 	.word	0x200000a6
 800124c:	200000a7 	.word	0x200000a7
 8001250:	200000a0 	.word	0x200000a0

08001254 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4a06      	ldr	r2, [pc, #24]	@ (800127c <vApplicationGetIdleTaskMemory+0x28>)
 8001264:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <vApplicationGetIdleTaskMemory+0x2c>)
 800126a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2280      	movs	r2, #128	@ 0x80
 8001270:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	200000a8 	.word	0x200000a8
 8001280:	20000148 	.word	0x20000148

08001284 <i2c_scanbus>:


#include "i2c_bus.h"

/* Blocking function */
void i2c_scanbus(I2C_HandleTypeDef* channel, uint8_t* found_addr){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result;
	static uint8_t counter = 0;
	for(uint8_t i = 0 ; i <= I2C_MAX_NODE ; i++){
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e020      	b.n	80012d6 <i2c_scanbus+0x52>
		result = HAL_I2C_IsDeviceReady(channel, (i << 1), 1, 1);
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	b29b      	uxth	r3, r3
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	b299      	uxth	r1, r3
 800129c:	2301      	movs	r3, #1
 800129e:	2201      	movs	r2, #1
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f002 fa81 	bl	80037a8 <HAL_I2C_IsDeviceReady>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73bb      	strb	r3, [r7, #14]
		if(result == HAL_OK){
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10c      	bne.n	80012ca <i2c_scanbus+0x46>
			found_addr[counter] = i;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <i2c_scanbus+0x64>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	4413      	add	r3, r2
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	701a      	strb	r2, [r3, #0]
			counter++;
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <i2c_scanbus+0x64>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <i2c_scanbus+0x64>)
 80012c8:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(5);
 80012ca:	2005      	movs	r0, #5
 80012cc:	f000 fe9a 	bl	8002004 <HAL_Delay>
	for(uint8_t i = 0 ; i <= I2C_MAX_NODE ; i++){
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	3301      	adds	r3, #1
 80012d4:	73fb      	strb	r3, [r7, #15]
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	dada      	bge.n	8001294 <i2c_scanbus+0x10>
	}
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000348 	.word	0x20000348

080012ec <i2c_reset>:

void i2c_reset(I2C_HandleTypeDef* hi2c) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C1_FORCE_RESET();
 80012f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <i2c_reset+0x48>)
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001334 <i2c_reset+0x48>)
 80012fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012fe:	6113      	str	r3, [r2, #16]
	HAL_Delay(10);
 8001300:	200a      	movs	r0, #10
 8001302:	f000 fe7f 	bl	8002004 <HAL_Delay>
	__HAL_RCC_I2C1_RELEASE_RESET();
 8001306:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <i2c_reset+0x48>)
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <i2c_reset+0x48>)
 800130c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001310:	6113      	str	r3, [r2, #16]
	HAL_Delay(10);
 8001312:	200a      	movs	r0, #10
 8001314:	f000 fe76 	bl	8002004 <HAL_Delay>
    HAL_I2C_DeInit(hi2c);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f001 fddb 	bl	8002ed4 <HAL_I2C_DeInit>
    HAL_Delay(10);
 800131e:	200a      	movs	r0, #10
 8001320:	f000 fe70 	bl	8002004 <HAL_Delay>
    HAL_I2C_Init(hi2c);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f001 fc91 	bl	8002c4c <HAL_I2C_Init>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <i2c_bus_recover>:

void i2c_bus_recover(I2C_HandleTypeDef* hi2c) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	@ 0x30
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]

    GPIO_TypeDef* scl_port;
    GPIO_TypeDef* sda_port;
    uint16_t scl_pin, sda_pin;

    const uint8_t max_timeout = 100;
 800134e:	2364      	movs	r3, #100	@ 0x64
 8001350:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    static uint8_t timeout_count = 0;

    if (hi2c->Instance == I2C1) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a36      	ldr	r2, [pc, #216]	@ (8001434 <i2c_bus_recover+0xfc>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d108      	bne.n	8001370 <i2c_bus_recover+0x38>
        scl_port = GPIOB;
 800135e:	4b36      	ldr	r3, [pc, #216]	@ (8001438 <i2c_bus_recover+0x100>)
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sda_port = GPIOB;
 8001362:	4b35      	ldr	r3, [pc, #212]	@ (8001438 <i2c_bus_recover+0x100>)
 8001364:	62bb      	str	r3, [r7, #40]	@ 0x28
        scl_pin = GPIO_PIN_6;
 8001366:	2340      	movs	r3, #64	@ 0x40
 8001368:	84fb      	strh	r3, [r7, #38]	@ 0x26
        sda_pin = GPIO_PIN_7;
 800136a:	2380      	movs	r3, #128	@ 0x80
 800136c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800136e:	e00e      	b.n	800138e <i2c_bus_recover+0x56>
    } else if (hi2c->Instance == I2C2) {
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a31      	ldr	r2, [pc, #196]	@ (800143c <i2c_bus_recover+0x104>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d158      	bne.n	800142c <i2c_bus_recover+0xf4>
        scl_port = GPIOB;
 800137a:	4b2f      	ldr	r3, [pc, #188]	@ (8001438 <i2c_bus_recover+0x100>)
 800137c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sda_port = GPIOB;
 800137e:	4b2e      	ldr	r3, [pc, #184]	@ (8001438 <i2c_bus_recover+0x100>)
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
        scl_pin = GPIO_PIN_10;
 8001382:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001386:	84fb      	strh	r3, [r7, #38]	@ 0x26
        sda_pin = GPIO_PIN_11;
 8001388:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800138c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    } else {
        return;
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b2c      	ldr	r3, [pc, #176]	@ (8001440 <i2c_bus_recover+0x108>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4a2b      	ldr	r2, [pc, #172]	@ (8001440 <i2c_bus_recover+0x108>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6193      	str	r3, [r2, #24]
 800139a:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <i2c_bus_recover+0x108>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = scl_pin | sda_pin;
 80013a6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80013a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013b0:	2311      	movs	r3, #17
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(scl_port, &GPIO_InitStruct);
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	4619      	mov	r1, r3
 80013c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013c4:	f001 f9d2 	bl	800276c <HAL_GPIO_Init>

    while(HAL_GPIO_ReadPin(sda_port, sda_pin) == GPIO_PIN_RESET) {
 80013c8:	e01d      	b.n	8001406 <i2c_bus_recover+0xce>
		HAL_GPIO_WritePin(scl_port, scl_pin, GPIO_PIN_SET);
 80013ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80013cc:	2201      	movs	r2, #1
 80013ce:	4619      	mov	r1, r3
 80013d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013d2:	f001 fc22 	bl	8002c1a <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80013d6:	2001      	movs	r0, #1
 80013d8:	f000 fe14 	bl	8002004 <HAL_Delay>
		HAL_GPIO_WritePin(scl_port, scl_pin, GPIO_PIN_RESET);
 80013dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80013de:	2200      	movs	r2, #0
 80013e0:	4619      	mov	r1, r3
 80013e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013e4:	f001 fc19 	bl	8002c1a <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f000 fe0b 	bl	8002004 <HAL_Delay>

		timeout_count ++;
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <i2c_bus_recover+0x10c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <i2c_bus_recover+0x10c>)
 80013f8:	701a      	strb	r2, [r3, #0]
		if(timeout_count > max_timeout) break;
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <i2c_bus_recover+0x10c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001402:	429a      	cmp	r2, r3
 8001404:	d308      	bcc.n	8001418 <i2c_bus_recover+0xe0>
    while(HAL_GPIO_ReadPin(sda_port, sda_pin) == GPIO_PIN_RESET) {
 8001406:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800140c:	f001 fbee 	bl	8002bec <HAL_GPIO_ReadPin>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0d9      	beq.n	80013ca <i2c_bus_recover+0x92>
 8001416:	e000      	b.n	800141a <i2c_bus_recover+0xe2>
		if(timeout_count > max_timeout) break;
 8001418:	bf00      	nop
    }

    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141a:	2312      	movs	r3, #18
 800141c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(scl_port, &GPIO_InitStruct);
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	4619      	mov	r1, r3
 8001424:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001426:	f001 f9a1 	bl	800276c <HAL_GPIO_Init>
 800142a:	e000      	b.n	800142e <i2c_bus_recover+0xf6>
        return;
 800142c:	bf00      	nop
}
 800142e:	3730      	adds	r7, #48	@ 0x30
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40005400 	.word	0x40005400
 8001438:	40010c00 	.word	0x40010c00
 800143c:	40005800 	.word	0x40005800
 8001440:	40021000 	.word	0x40021000
 8001444:	20000349 	.word	0x20000349

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b09c      	sub	sp, #112	@ 0x70
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144e:	f000 fda7 	bl	8001fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001452:	f000 f88d 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001456:	f000 f9cd 	bl	80017f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800145a:	f000 f9ad 	bl	80017b8 <MX_DMA_Init>
  MX_I2C1_Init();
 800145e:	f000 f8cd 	bl	80015fc <MX_I2C1_Init>
  MX_TIM2_Init();
 8001462:	f000 f927 	bl	80016b4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001466:	f000 f97d 	bl	8001764 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800146a:	f000 f8f5 	bl	8001658 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  i2c_bus_recover(&hi2c1);
 800146e:	4835      	ldr	r0, [pc, #212]	@ (8001544 <main+0xfc>)
 8001470:	f7ff ff62 	bl	8001338 <i2c_bus_recover>
  i2c_bus_recover(&hi2c2);
 8001474:	4834      	ldr	r0, [pc, #208]	@ (8001548 <main+0x100>)
 8001476:	f7ff ff5f 	bl	8001338 <i2c_bus_recover>
  i2c_reset(&hi2c1);
 800147a:	4832      	ldr	r0, [pc, #200]	@ (8001544 <main+0xfc>)
 800147c:	f7ff ff36 	bl	80012ec <i2c_reset>
  i2c_reset(&hi2c2);
 8001480:	4831      	ldr	r0, [pc, #196]	@ (8001548 <main+0x100>)
 8001482:	f7ff ff33 	bl	80012ec <i2c_reset>
  HAL_I2C_Init(&hi2c1);
 8001486:	482f      	ldr	r0, [pc, #188]	@ (8001544 <main+0xfc>)
 8001488:	f001 fbe0 	bl	8002c4c <HAL_I2C_Init>
  HAL_I2C_Init(&hi2c2);
 800148c:	482e      	ldr	r0, [pc, #184]	@ (8001548 <main+0x100>)
 800148e:	f001 fbdd 	bl	8002c4c <HAL_I2C_Init>

//  i2c_scanbus(&hi2c1, i2c1_available);
  i2c_scanbus(&hi2c2, i2c2_available);
 8001492:	492e      	ldr	r1, [pc, #184]	@ (800154c <main+0x104>)
 8001494:	482c      	ldr	r0, [pc, #176]	@ (8001548 <main+0x100>)
 8001496:	f7ff fef5 	bl	8001284 <i2c_scanbus>

  TMC2209_setup();
 800149a:	f008 f9e7 	bl	800986c <TMC2209_setup>
  IMU_Init();
 800149e:	f006 ff4d 	bl	800833c <IMU_Init>
  TMC2209_setMicrostep(TMC2209_Microsteps_1);
 80014a2:	2008      	movs	r0, #8
 80014a4:	f008 fa64 	bl	8009970 <TMC2209_setMicrostep>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80014a8:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <main+0x108>)
 80014aa:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80014ae:	461d      	mov	r5, r3
 80014b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f006 ffb0 	bl	8008428 <osThreadCreate>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a22      	ldr	r2, [pc, #136]	@ (8001554 <main+0x10c>)
 80014cc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 80014ce:	4b22      	ldr	r3, [pc, #136]	@ (8001558 <main+0x110>)
 80014d0:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80014d4:	461d      	mov	r5, r3
 80014d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 80014e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f006 ff9d 	bl	8008428 <osThreadCreate>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a1a      	ldr	r2, [pc, #104]	@ (800155c <main+0x114>)
 80014f2:	6013      	str	r3, [r2, #0]

  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <main+0x118>)
 80014f6:	f107 041c 	add.w	r4, r7, #28
 80014fa:	461d      	mov	r5, r3
 80014fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001500:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001504:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f006 ff8a 	bl	8008428 <osThreadCreate>
 8001514:	4603      	mov	r3, r0
 8001516:	4a13      	ldr	r2, [pc, #76]	@ (8001564 <main+0x11c>)
 8001518:	6013      	str	r3, [r2, #0]

  osThreadDef(imuTask, StartImuTask, osPriorityNormal, 0, 128);
 800151a:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <main+0x120>)
 800151c:	463c      	mov	r4, r7
 800151e:	461d      	mov	r5, r3
 8001520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001524:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001528:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imuTaskHandler = osThreadCreate(osThread(imuTask), NULL);
 800152c:	463b      	mov	r3, r7
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f006 ff79 	bl	8008428 <osThreadCreate>
 8001536:	4603      	mov	r3, r0
 8001538:	4a0c      	ldr	r2, [pc, #48]	@ (800156c <main+0x124>)
 800153a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800153c:	f006 ff6d 	bl	800841a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <main+0xf8>
 8001544:	2000034c 	.word	0x2000034c
 8001548:	200003a0 	.word	0x200003a0
 800154c:	200004d8 	.word	0x200004d8
 8001550:	0800b0c4 	.word	0x0800b0c4
 8001554:	200004c8 	.word	0x200004c8
 8001558:	0800b0ec 	.word	0x0800b0ec
 800155c:	200004cc 	.word	0x200004cc
 8001560:	0800b114 	.word	0x0800b114
 8001564:	200004d0 	.word	0x200004d0
 8001568:	0800b138 	.word	0x0800b138
 800156c:	200004d4 	.word	0x200004d4

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b090      	sub	sp, #64	@ 0x40
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0318 	add.w	r3, r7, #24
 800157a:	2228      	movs	r2, #40	@ 0x28
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f008 fd22 	bl	8009fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001592:	2301      	movs	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001596:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800159a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a0:	2301      	movs	r3, #1
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a4:	2302      	movs	r3, #2
 80015a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015ae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80015b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b4:	f107 0318 	add.w	r3, r7, #24
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 faa1 	bl	8005b00 <HAL_RCC_OscConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015c4:	f000 f9f6 	bl	80019b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c8:	230f      	movs	r3, #15
 80015ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015cc:	2302      	movs	r3, #2
 80015ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2102      	movs	r1, #2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fd0e 	bl	8006004 <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015ee:	f000 f9e1 	bl	80019b4 <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3740      	adds	r7, #64	@ 0x40
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <MX_I2C1_Init+0x50>)
 8001602:	4a13      	ldr	r2, [pc, #76]	@ (8001650 <MX_I2C1_Init+0x54>)
 8001604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <MX_I2C1_Init+0x50>)
 8001608:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <MX_I2C1_Init+0x58>)
 800160a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800160c:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <MX_I2C1_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_I2C1_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_I2C1_Init+0x50>)
 800161a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800161e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001620:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <MX_I2C1_Init+0x50>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_I2C1_Init+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001638:	4804      	ldr	r0, [pc, #16]	@ (800164c <MX_I2C1_Init+0x50>)
 800163a:	f001 fb07 	bl	8002c4c <HAL_I2C_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001644:	f000 f9b6 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000034c 	.word	0x2000034c
 8001650:	40005400 	.word	0x40005400
 8001654:	00061a80 	.word	0x00061a80

08001658 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <MX_I2C2_Init+0x50>)
 800165e:	4a13      	ldr	r2, [pc, #76]	@ (80016ac <MX_I2C2_Init+0x54>)
 8001660:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <MX_I2C2_Init+0x50>)
 8001664:	4a12      	ldr	r2, [pc, #72]	@ (80016b0 <MX_I2C2_Init+0x58>)
 8001666:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <MX_I2C2_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800166e:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <MX_I2C2_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <MX_I2C2_Init+0x50>)
 8001676:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800167a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800167c:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <MX_I2C2_Init+0x50>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001682:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <MX_I2C2_Init+0x50>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001688:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <MX_I2C2_Init+0x50>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <MX_I2C2_Init+0x50>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001694:	4804      	ldr	r0, [pc, #16]	@ (80016a8 <MX_I2C2_Init+0x50>)
 8001696:	f001 fad9 	bl	8002c4c <HAL_I2C_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016a0:	f000 f988 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200003a0 	.word	0x200003a0
 80016ac:	40005800 	.word	0x40005800
 80016b0:	000186a0 	.word	0x000186a0

080016b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	@ 0x28
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ba:	f107 0320 	add.w	r3, r7, #32
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
 80016d2:	615a      	str	r2, [r3, #20]
 80016d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016d6:	4b22      	ldr	r3, [pc, #136]	@ (8001760 <MX_TIM2_Init+0xac>)
 80016d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 80016de:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <MX_TIM2_Init+0xac>)
 80016e0:	2247      	movs	r2, #71	@ 0x47
 80016e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <MX_TIM2_Init+0xac>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4 - 1;
 80016ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001760 <MX_TIM2_Init+0xac>)
 80016ec:	2203      	movs	r2, #3
 80016ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <MX_TIM2_Init+0xac>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_TIM2_Init+0xac>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016fc:	4818      	ldr	r0, [pc, #96]	@ (8001760 <MX_TIM2_Init+0xac>)
 80016fe:	f004 fee9 	bl	80064d4 <HAL_TIM_PWM_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001708:	f000 f954 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001714:	f107 0320 	add.w	r3, r7, #32
 8001718:	4619      	mov	r1, r3
 800171a:	4811      	ldr	r0, [pc, #68]	@ (8001760 <MX_TIM2_Init+0xac>)
 800171c:	f005 fcb4 	bl	8007088 <HAL_TIMEx_MasterConfigSynchronization>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001726:	f000 f945 	bl	80019b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172a:	2360      	movs	r3, #96	@ 0x60
 800172c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 800172e:	2332      	movs	r3, #50	@ 0x32
 8001730:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2200      	movs	r2, #0
 800173e:	4619      	mov	r1, r3
 8001740:	4807      	ldr	r0, [pc, #28]	@ (8001760 <MX_TIM2_Init+0xac>)
 8001742:	f005 f9a9 	bl	8006a98 <HAL_TIM_PWM_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800174c:	f000 f932 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001750:	4803      	ldr	r0, [pc, #12]	@ (8001760 <MX_TIM2_Init+0xac>)
 8001752:	f000 fa91 	bl	8001c78 <HAL_TIM_MspPostInit>

}
 8001756:	bf00      	nop
 8001758:	3728      	adds	r7, #40	@ 0x28
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000438 	.word	0x20000438

08001764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 800176a:	4a12      	ldr	r2, [pc, #72]	@ (80017b4 <MX_USART1_UART_Init+0x50>)
 800176c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001770:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_USART1_UART_Init+0x4c>)
 800179c:	f005 fce4 	bl	8007168 <HAL_HalfDuplex_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017a6:	f000 f905 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000480 	.word	0x20000480
 80017b4:	40013800 	.word	0x40013800

080017b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017be:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <MX_DMA_Init+0x38>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <MX_DMA_Init+0x38>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6153      	str	r3, [r2, #20]
 80017ca:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <MX_DMA_Init+0x38>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2105      	movs	r1, #5
 80017da:	2011      	movs	r0, #17
 80017dc:	f000 fd0f 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80017e0:	2011      	movs	r0, #17
 80017e2:	f000 fd28 	bl	8002236 <HAL_NVIC_EnableIRQ>

}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 0310 	add.w	r3, r7, #16
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001808:	4b3d      	ldr	r3, [pc, #244]	@ (8001900 <MX_GPIO_Init+0x10c>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a3c      	ldr	r2, [pc, #240]	@ (8001900 <MX_GPIO_Init+0x10c>)
 800180e:	f043 0310 	orr.w	r3, r3, #16
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b3a      	ldr	r3, [pc, #232]	@ (8001900 <MX_GPIO_Init+0x10c>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001820:	4b37      	ldr	r3, [pc, #220]	@ (8001900 <MX_GPIO_Init+0x10c>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a36      	ldr	r2, [pc, #216]	@ (8001900 <MX_GPIO_Init+0x10c>)
 8001826:	f043 0320 	orr.w	r3, r3, #32
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b34      	ldr	r3, [pc, #208]	@ (8001900 <MX_GPIO_Init+0x10c>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001838:	4b31      	ldr	r3, [pc, #196]	@ (8001900 <MX_GPIO_Init+0x10c>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a30      	ldr	r2, [pc, #192]	@ (8001900 <MX_GPIO_Init+0x10c>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b2e      	ldr	r3, [pc, #184]	@ (8001900 <MX_GPIO_Init+0x10c>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <MX_GPIO_Init+0x10c>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a2a      	ldr	r2, [pc, #168]	@ (8001900 <MX_GPIO_Init+0x10c>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b28      	ldr	r3, [pc, #160]	@ (8001900 <MX_GPIO_Init+0x10c>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800186e:	4825      	ldr	r0, [pc, #148]	@ (8001904 <MX_GPIO_Init+0x110>)
 8001870:	f001 f9d3 	bl	8002c1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	2106      	movs	r1, #6
 8001878:	4823      	ldr	r0, [pc, #140]	@ (8001908 <MX_GPIO_Init+0x114>)
 800187a:	f001 f9ce 	bl	8002c1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	2120      	movs	r1, #32
 8001882:	4822      	ldr	r0, [pc, #136]	@ (800190c <MX_GPIO_Init+0x118>)
 8001884:	f001 f9c9 	bl	8002c1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800188c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2302      	movs	r3, #2
 8001898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	4619      	mov	r1, r3
 80018a0:	4818      	ldr	r0, [pc, #96]	@ (8001904 <MX_GPIO_Init+0x110>)
 80018a2:	f000 ff63 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80018a6:	2306      	movs	r3, #6
 80018a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	4619      	mov	r1, r3
 80018bc:	4812      	ldr	r0, [pc, #72]	@ (8001908 <MX_GPIO_Init+0x114>)
 80018be:	f000 ff55 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018c2:	2310      	movs	r3, #16
 80018c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	4619      	mov	r1, r3
 80018d4:	480d      	ldr	r0, [pc, #52]	@ (800190c <MX_GPIO_Init+0x118>)
 80018d6:	f000 ff49 	bl	800276c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018da:	2320      	movs	r3, #32
 80018dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	4619      	mov	r1, r3
 80018f0:	4806      	ldr	r0, [pc, #24]	@ (800190c <MX_GPIO_Init+0x118>)
 80018f2:	f000 ff3b 	bl	800276c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f6:	bf00      	nop
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	40011000 	.word	0x40011000
 8001908:	40010800 	.word	0x40010800
 800190c:	40010c00 	.word	0x40010c00

08001910 <StartDriverTask>:

/* USER CODE BEGIN 4 */
void StartDriverTask(void const * argument){
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	for(;;){
		TMC2209_enable();
 8001918:	f007 ffe0 	bl	80098dc <TMC2209_enable>
		TMC2209_velocity(motor_speed);
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <StartDriverTask+0x28>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f008 f85b 	bl	80099dc <TMC2209_velocity>
		TMC2209_move();
 8001926:	f008 f8ed 	bl	8009b04 <TMC2209_move>
		TMC2209_watchPosition(&motor_target, &encoder_counter, &motor_speed);
 800192a:	4a03      	ldr	r2, [pc, #12]	@ (8001938 <StartDriverTask+0x28>)
 800192c:	4903      	ldr	r1, [pc, #12]	@ (800193c <StartDriverTask+0x2c>)
 800192e:	4804      	ldr	r0, [pc, #16]	@ (8001940 <StartDriverTask+0x30>)
 8001930:	f008 fa34 	bl	8009d9c <TMC2209_watchPosition>
		TMC2209_enable();
 8001934:	bf00      	nop
 8001936:	e7ef      	b.n	8001918 <StartDriverTask+0x8>
 8001938:	20000004 	.word	0x20000004
 800193c:	200004dc 	.word	0x200004dc
 8001940:	200004e0 	.word	0x200004e0

08001944 <StartEncoderTask>:

//		osDelay(5000);
	}
}

void StartEncoderTask(void const * argument){
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	for(;;){
//		encChangeDir(motor_rotation);
		encRead();
 800194c:	f7ff fbb0 	bl	80010b0 <encRead>
		encoder_counter = getCounter();
 8001950:	f7ff fbc2 	bl	80010d8 <getCounter>
 8001954:	4603      	mov	r3, r0
 8001956:	4a03      	ldr	r2, [pc, #12]	@ (8001964 <StartEncoderTask+0x20>)
 8001958:	6013      	str	r3, [r2, #0]
		encGetBuffer(raw_buffer_container);
 800195a:	4803      	ldr	r0, [pc, #12]	@ (8001968 <StartEncoderTask+0x24>)
 800195c:	f7ff fbc6 	bl	80010ec <encGetBuffer>
		encRead();
 8001960:	bf00      	nop
 8001962:	e7f3      	b.n	800194c <StartEncoderTask+0x8>
 8001964:	200004dc 	.word	0x200004dc
 8001968:	200004e4 	.word	0x200004e4

0800196c <StartImuTask>:
	}
}

void StartImuTask(void const * argument){
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	for(;;){
		IMU_Compute(accel_data);
 8001974:	4801      	ldr	r0, [pc, #4]	@ (800197c <StartImuTask+0x10>)
 8001976:	f006 fd13 	bl	80083a0 <IMU_Compute>
 800197a:	e7fb      	b.n	8001974 <StartImuTask+0x8>
 800197c:	200004e8 	.word	0x200004e8

08001980 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001988:	2001      	movs	r0, #1
 800198a:	f006 fd99 	bl	80084c0 <osDelay>
 800198e:	e7fb      	b.n	8001988 <StartDefaultTask+0x8>

08001990 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d101      	bne.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019a2:	f000 fb13 	bl	8001fcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40012c00 	.word	0x40012c00

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <Error_Handler+0x8>

080019c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019c6:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <HAL_MspInit+0x68>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	4a17      	ldr	r2, [pc, #92]	@ (8001a28 <HAL_MspInit+0x68>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6193      	str	r3, [r2, #24]
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <HAL_MspInit+0x68>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_MspInit+0x68>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a11      	ldr	r2, [pc, #68]	@ (8001a28 <HAL_MspInit+0x68>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <HAL_MspInit+0x68>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	210f      	movs	r1, #15
 80019fa:	f06f 0001 	mvn.w	r0, #1
 80019fe:	f000 fbfe 	bl	80021fe <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_MspInit+0x6c>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	4a04      	ldr	r2, [pc, #16]	@ (8001a2c <HAL_MspInit+0x6c>)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010000 	.word	0x40010000

08001a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	@ 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0318 	add.w	r3, r7, #24
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a4e      	ldr	r2, [pc, #312]	@ (8001b84 <HAL_I2C_MspInit+0x154>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d15b      	bne.n	8001b08 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a50:	4b4d      	ldr	r3, [pc, #308]	@ (8001b88 <HAL_I2C_MspInit+0x158>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a4c      	ldr	r2, [pc, #304]	@ (8001b88 <HAL_I2C_MspInit+0x158>)
 8001a56:	f043 0308 	orr.w	r3, r3, #8
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b88 <HAL_I2C_MspInit+0x158>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a68:	23c0      	movs	r3, #192	@ 0xc0
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a6c:	2312      	movs	r3, #18
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f107 0318 	add.w	r3, r7, #24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4844      	ldr	r0, [pc, #272]	@ (8001b8c <HAL_I2C_MspInit+0x15c>)
 8001a7c:	f000 fe76 	bl	800276c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a80:	4b41      	ldr	r3, [pc, #260]	@ (8001b88 <HAL_I2C_MspInit+0x158>)
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	4a40      	ldr	r2, [pc, #256]	@ (8001b88 <HAL_I2C_MspInit+0x158>)
 8001a86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a8a:	61d3      	str	r3, [r2, #28]
 8001a8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b88 <HAL_I2C_MspInit+0x158>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001a98:	4b3d      	ldr	r3, [pc, #244]	@ (8001b90 <HAL_I2C_MspInit+0x160>)
 8001a9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001b94 <HAL_I2C_MspInit+0x164>)
 8001a9c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b90 <HAL_I2C_MspInit+0x160>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8001b90 <HAL_I2C_MspInit+0x160>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aaa:	4b39      	ldr	r3, [pc, #228]	@ (8001b90 <HAL_I2C_MspInit+0x160>)
 8001aac:	2280      	movs	r2, #128	@ 0x80
 8001aae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab0:	4b37      	ldr	r3, [pc, #220]	@ (8001b90 <HAL_I2C_MspInit+0x160>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ab6:	4b36      	ldr	r3, [pc, #216]	@ (8001b90 <HAL_I2C_MspInit+0x160>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001abc:	4b34      	ldr	r3, [pc, #208]	@ (8001b90 <HAL_I2C_MspInit+0x160>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001ac2:	4b33      	ldr	r3, [pc, #204]	@ (8001b90 <HAL_I2C_MspInit+0x160>)
 8001ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ac8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001aca:	4831      	ldr	r0, [pc, #196]	@ (8001b90 <HAL_I2C_MspInit+0x160>)
 8001acc:	f000 fbd0 	bl	8002270 <HAL_DMA_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 8001ad6:	f7ff ff6d 	bl	80019b4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a2c      	ldr	r2, [pc, #176]	@ (8001b90 <HAL_I2C_MspInit+0x160>)
 8001ade:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b90 <HAL_I2C_MspInit+0x160>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2105      	movs	r1, #5
 8001aea:	201f      	movs	r0, #31
 8001aec:	f000 fb87 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001af0:	201f      	movs	r0, #31
 8001af2:	f000 fba0 	bl	8002236 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2105      	movs	r1, #5
 8001afa:	2020      	movs	r0, #32
 8001afc:	f000 fb7f 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b00:	2020      	movs	r0, #32
 8001b02:	f000 fb98 	bl	8002236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b06:	e039      	b.n	8001b7c <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a22      	ldr	r2, [pc, #136]	@ (8001b98 <HAL_I2C_MspInit+0x168>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d134      	bne.n	8001b7c <HAL_I2C_MspInit+0x14c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <HAL_I2C_MspInit+0x158>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	4a1c      	ldr	r2, [pc, #112]	@ (8001b88 <HAL_I2C_MspInit+0x158>)
 8001b18:	f043 0308 	orr.w	r3, r3, #8
 8001b1c:	6193      	str	r3, [r2, #24]
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <HAL_I2C_MspInit+0x158>)
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b30:	2312      	movs	r3, #18
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b38:	f107 0318 	add.w	r3, r7, #24
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4813      	ldr	r0, [pc, #76]	@ (8001b8c <HAL_I2C_MspInit+0x15c>)
 8001b40:	f000 fe14 	bl	800276c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b44:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <HAL_I2C_MspInit+0x158>)
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	@ (8001b88 <HAL_I2C_MspInit+0x158>)
 8001b4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b4e:	61d3      	str	r3, [r2, #28]
 8001b50:	4b0d      	ldr	r3, [pc, #52]	@ (8001b88 <HAL_I2C_MspInit+0x158>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2105      	movs	r1, #5
 8001b60:	2021      	movs	r0, #33	@ 0x21
 8001b62:	f000 fb4c 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001b66:	2021      	movs	r0, #33	@ 0x21
 8001b68:	f000 fb65 	bl	8002236 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2105      	movs	r1, #5
 8001b70:	2022      	movs	r0, #34	@ 0x22
 8001b72:	f000 fb44 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001b76:	2022      	movs	r0, #34	@ 0x22
 8001b78:	f000 fb5d 	bl	8002236 <HAL_NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	3728      	adds	r7, #40	@ 0x28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40005400 	.word	0x40005400
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40010c00 	.word	0x40010c00
 8001b90:	200003f4 	.word	0x200003f4
 8001b94:	40020080 	.word	0x40020080
 8001b98:	40005800 	.word	0x40005800

08001b9c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c20 <HAL_I2C_MspDeInit+0x84>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d119      	bne.n	8001be2 <HAL_I2C_MspDeInit+0x46>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001bae:	4b1d      	ldr	r3, [pc, #116]	@ (8001c24 <HAL_I2C_MspDeInit+0x88>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <HAL_I2C_MspDeInit+0x88>)
 8001bb4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001bb8:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001bba:	2140      	movs	r1, #64	@ 0x40
 8001bbc:	481a      	ldr	r0, [pc, #104]	@ (8001c28 <HAL_I2C_MspDeInit+0x8c>)
 8001bbe:	f000 ff59 	bl	8002a74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001bc2:	2180      	movs	r1, #128	@ 0x80
 8001bc4:	4818      	ldr	r0, [pc, #96]	@ (8001c28 <HAL_I2C_MspDeInit+0x8c>)
 8001bc6:	f000 ff55 	bl	8002a74 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 fba8 	bl	8002324 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001bd4:	201f      	movs	r0, #31
 8001bd6:	f000 fb3c 	bl	8002252 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001bda:	2020      	movs	r0, #32
 8001bdc:	f000 fb39 	bl	8002252 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001be0:	e01a      	b.n	8001c18 <HAL_I2C_MspDeInit+0x7c>
  else if(hi2c->Instance==I2C2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a11      	ldr	r2, [pc, #68]	@ (8001c2c <HAL_I2C_MspDeInit+0x90>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d115      	bne.n	8001c18 <HAL_I2C_MspDeInit+0x7c>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001bec:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <HAL_I2C_MspDeInit+0x88>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8001c24 <HAL_I2C_MspDeInit+0x88>)
 8001bf2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001bf6:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001bf8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bfc:	480a      	ldr	r0, [pc, #40]	@ (8001c28 <HAL_I2C_MspDeInit+0x8c>)
 8001bfe:	f000 ff39 	bl	8002a74 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001c02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c06:	4808      	ldr	r0, [pc, #32]	@ (8001c28 <HAL_I2C_MspDeInit+0x8c>)
 8001c08:	f000 ff34 	bl	8002a74 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8001c0c:	2021      	movs	r0, #33	@ 0x21
 8001c0e:	f000 fb20 	bl	8002252 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8001c12:	2022      	movs	r0, #34	@ 0x22
 8001c14:	f000 fb1d 	bl	8002252 <HAL_NVIC_DisableIRQ>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40005400 	.word	0x40005400
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	40005800 	.word	0x40005800

08001c30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c40:	d113      	bne.n	8001c6a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c42:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <HAL_TIM_PWM_MspInit+0x44>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	4a0b      	ldr	r2, [pc, #44]	@ (8001c74 <HAL_TIM_PWM_MspInit+0x44>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	61d3      	str	r3, [r2, #28]
 8001c4e:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <HAL_TIM_PWM_MspInit+0x44>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2105      	movs	r1, #5
 8001c5e:	201c      	movs	r0, #28
 8001c60:	f000 facd 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c64:	201c      	movs	r0, #28
 8001c66:	f000 fae6 	bl	8002236 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000

08001c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c96:	d117      	bne.n	8001cc8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd0 <HAL_TIM_MspPostInit+0x58>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd0 <HAL_TIM_MspPostInit+0x58>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_TIM_MspPostInit+0x58>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4804      	ldr	r0, [pc, #16]	@ (8001cd4 <HAL_TIM_MspPostInit+0x5c>)
 8001cc4:	f000 fd52 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40010800 	.word	0x40010800

08001cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d5c <HAL_UART_MspInit+0x84>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d12c      	bne.n	8001d52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf8:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <HAL_UART_MspInit+0x88>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <HAL_UART_MspInit+0x88>)
 8001cfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d02:	6193      	str	r3, [r2, #24]
 8001d04:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <HAL_UART_MspInit+0x88>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <HAL_UART_MspInit+0x88>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <HAL_UART_MspInit+0x88>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	6193      	str	r3, [r2, #24]
 8001d1c:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <HAL_UART_MspInit+0x88>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2e:	2312      	movs	r3, #18
 8001d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 0310 	add.w	r3, r7, #16
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4809      	ldr	r0, [pc, #36]	@ (8001d64 <HAL_UART_MspInit+0x8c>)
 8001d3e:	f000 fd15 	bl	800276c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2105      	movs	r1, #5
 8001d46:	2025      	movs	r0, #37	@ 0x25
 8001d48:	f000 fa59 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d4c:	2025      	movs	r0, #37	@ 0x25
 8001d4e:	f000 fa72 	bl	8002236 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d52:	bf00      	nop
 8001d54:	3720      	adds	r7, #32
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40013800 	.word	0x40013800
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010800 	.word	0x40010800

08001d68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	@ 0x30
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e38 <HAL_InitTick+0xd0>)
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	4a2d      	ldr	r2, [pc, #180]	@ (8001e38 <HAL_InitTick+0xd0>)
 8001d84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d88:	6193      	str	r3, [r2, #24]
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e38 <HAL_InitTick+0xd0>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d96:	f107 020c 	add.w	r2, r7, #12
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f004 fa9f 	bl	80062e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001da6:	f004 fa89 	bl	80062bc <HAL_RCC_GetPCLK2Freq>
 8001daa:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dae:	4a23      	ldr	r2, [pc, #140]	@ (8001e3c <HAL_InitTick+0xd4>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	0c9b      	lsrs	r3, r3, #18
 8001db6:	3b01      	subs	r3, #1
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001dba:	4b21      	ldr	r3, [pc, #132]	@ (8001e40 <HAL_InitTick+0xd8>)
 8001dbc:	4a21      	ldr	r2, [pc, #132]	@ (8001e44 <HAL_InitTick+0xdc>)
 8001dbe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e40 <HAL_InitTick+0xd8>)
 8001dc2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dc6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e40 <HAL_InitTick+0xd8>)
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <HAL_InitTick+0xd8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <HAL_InitTick+0xd8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dda:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <HAL_InitTick+0xd8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001de0:	4817      	ldr	r0, [pc, #92]	@ (8001e40 <HAL_InitTick+0xd8>)
 8001de2:	f004 facd 	bl	8006380 <HAL_TIM_Base_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001dec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d11b      	bne.n	8001e2c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001df4:	4812      	ldr	r0, [pc, #72]	@ (8001e40 <HAL_InitTick+0xd8>)
 8001df6:	f004 fb1b 	bl	8006430 <HAL_TIM_Base_Start_IT>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001e00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d111      	bne.n	8001e2c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e08:	2019      	movs	r0, #25
 8001e0a:	f000 fa14 	bl	8002236 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b0f      	cmp	r3, #15
 8001e12:	d808      	bhi.n	8001e26 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001e14:	2200      	movs	r2, #0
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	2019      	movs	r0, #25
 8001e1a:	f000 f9f0 	bl	80021fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e48 <HAL_InitTick+0xe0>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e002      	b.n	8001e2c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3730      	adds	r7, #48	@ 0x30
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	200004f0 	.word	0x200004f0
 8001e44:	40012c00 	.word	0x40012c00
 8001e48:	2000000c 	.word	0x2000000c

08001e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <NMI_Handler+0x4>

08001e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <HardFault_Handler+0x4>

08001e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <MemManage_Handler+0x4>

08001e64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <BusFault_Handler+0x4>

08001e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <UsageFault_Handler+0x4>

08001e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e84:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <DMA1_Channel7_IRQHandler+0x10>)
 8001e86:	f000 fb5d 	bl	8002544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200003f4 	.word	0x200003f4

08001e94 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e98:	4802      	ldr	r0, [pc, #8]	@ (8001ea4 <TIM1_UP_IRQHandler+0x10>)
 8001e9a:	f004 fd0d 	bl	80068b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200004f0 	.word	0x200004f0

08001ea8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001eac:	4802      	ldr	r0, [pc, #8]	@ (8001eb8 <TIM2_IRQHandler+0x10>)
 8001eae:	f004 fd03 	bl	80068b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000438 	.word	0x20000438

08001ebc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ec0:	4802      	ldr	r0, [pc, #8]	@ (8001ecc <I2C1_EV_IRQHandler+0x10>)
 8001ec2:	f001 fd9f 	bl	8003a04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	2000034c 	.word	0x2000034c

08001ed0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ed4:	4802      	ldr	r0, [pc, #8]	@ (8001ee0 <I2C1_ER_IRQHandler+0x10>)
 8001ed6:	f001 fee8 	bl	8003caa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000034c 	.word	0x2000034c

08001ee4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001ee8:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <I2C2_EV_IRQHandler+0x10>)
 8001eea:	f001 fd8b 	bl	8003a04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200003a0 	.word	0x200003a0

08001ef8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001efc:	4802      	ldr	r0, [pc, #8]	@ (8001f08 <I2C2_ER_IRQHandler+0x10>)
 8001efe:	f001 fed4 	bl	8003caa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200003a0 	.word	0x200003a0

08001f0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f10:	4802      	ldr	r0, [pc, #8]	@ (8001f1c <USART1_IRQHandler+0x10>)
 8001f12:	f005 fa69 	bl	80073e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000480 	.word	0x20000480

08001f20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <HAL_UARTEx_RxEventCallback>:
	HAL_HalfDuplex_EnableReceiver(&huart1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 8001f38:	221e      	movs	r2, #30
 8001f3a:	4904      	ldr	r1, [pc, #16]	@ (8001f4c <HAL_UARTEx_RxEventCallback+0x20>)
 8001f3c:	4804      	ldr	r0, [pc, #16]	@ (8001f50 <HAL_UARTEx_RxEventCallback+0x24>)
 8001f3e:	f005 f9f6 	bl	800732e <HAL_UARTEx_ReceiveToIdle_IT>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000538 	.word	0x20000538
 8001f50:	20000480 	.word	0x20000480

08001f54 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8001f54:	f7ff ffe4 	bl	8001f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f58:	480b      	ldr	r0, [pc, #44]	@ (8001f88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f5a:	490c      	ldr	r1, [pc, #48]	@ (8001f8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a09      	ldr	r2, [pc, #36]	@ (8001f94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f70:	4c09      	ldr	r4, [pc, #36]	@ (8001f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f7e:	f008 f887 	bl	800a090 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f82:	f7ff fa61 	bl	8001448 <main>
  bx lr
 8001f86:	4770      	bx	lr
  ldr r0, =_sdata
 8001f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f8c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001f90:	0800b1c8 	.word	0x0800b1c8
  ldr r2, =_sbss
 8001f94:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001f98:	20001440 	.word	0x20001440

08001f9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <ADC1_2_IRQHandler>
	...

08001fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <HAL_Init+0x28>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a07      	ldr	r2, [pc, #28]	@ (8001fc8 <HAL_Init+0x28>)
 8001faa:	f043 0310 	orr.w	r3, r3, #16
 8001fae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f000 f919 	bl	80021e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb6:	200f      	movs	r0, #15
 8001fb8:	f7ff fed6 	bl	8001d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fbc:	f7ff fd00 	bl	80019c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40022000 	.word	0x40022000

08001fcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_IncTick+0x1c>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <HAL_IncTick+0x20>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a03      	ldr	r2, [pc, #12]	@ (8001fec <HAL_IncTick+0x20>)
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	20000010 	.word	0x20000010
 8001fec:	20000558 	.word	0x20000558

08001ff0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff4:	4b02      	ldr	r3, [pc, #8]	@ (8002000 <HAL_GetTick+0x10>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	20000558 	.word	0x20000558

08002004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800200c:	f7ff fff0 	bl	8001ff0 <HAL_GetTick>
 8002010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d005      	beq.n	800202a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <HAL_Delay+0x44>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800202a:	bf00      	nop
 800202c:	f7ff ffe0 	bl	8001ff0 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	429a      	cmp	r2, r3
 800203a:	d8f7      	bhi.n	800202c <HAL_Delay+0x28>
  {
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000010 	.word	0x20000010

0800204c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	@ (80020ac <__NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0307 	and.w	r3, r3, #7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db0b      	blt.n	80020da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	4906      	ldr	r1, [pc, #24]	@ (80020e4 <__NVIC_EnableIRQ+0x34>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2001      	movs	r0, #1
 80020d2:	fa00 f202 	lsl.w	r2, r0, r2
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	db12      	blt.n	8002120 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	f003 021f 	and.w	r2, r3, #31
 8002100:	490a      	ldr	r1, [pc, #40]	@ (800212c <__NVIC_DisableIRQ+0x44>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	2001      	movs	r0, #1
 800210a:	fa00 f202 	lsl.w	r2, r0, r2
 800210e:	3320      	adds	r3, #32
 8002110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002114:	f3bf 8f4f 	dsb	sy
}
 8002118:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800211a:	f3bf 8f6f 	isb	sy
}
 800211e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	@ (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	@ (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	@ 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff2b 	bl	800204c <__NVIC_SetPriorityGrouping>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002210:	f7ff ff40 	bl	8002094 <__NVIC_GetPriorityGrouping>
 8002214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff ffb2 	bl	8002184 <NVIC_EncodePriority>
 8002220:	4602      	mov	r2, r0
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff81 	bl	8002130 <__NVIC_SetPriority>
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff33 	bl	80020b0 <__NVIC_EnableIRQ>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff41 	bl	80020e8 <__NVIC_DisableIRQ>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e043      	b.n	800230e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	4b22      	ldr	r3, [pc, #136]	@ (8002318 <HAL_DMA_Init+0xa8>)
 800228e:	4413      	add	r3, r2
 8002290:	4a22      	ldr	r2, [pc, #136]	@ (800231c <HAL_DMA_Init+0xac>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	009a      	lsls	r2, r3, #2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002320 <HAL_DMA_Init+0xb0>)
 80022a2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80022be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	bffdfff8 	.word	0xbffdfff8
 800231c:	cccccccd 	.word	0xcccccccd
 8002320:	40020000 	.word	0x40020000

08002324 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e046      	b.n	80023c4 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <HAL_DMA_DeInit+0xac>)
 800236e:	4413      	add	r3, r2
 8002370:	4a18      	ldr	r2, [pc, #96]	@ (80023d4 <HAL_DMA_DeInit+0xb0>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	091b      	lsrs	r3, r3, #4
 8002378:	009a      	lsls	r2, r3, #2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a15      	ldr	r2, [pc, #84]	@ (80023d8 <HAL_DMA_DeInit+0xb4>)
 8002382:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238c:	2101      	movs	r1, #1
 800238e:	fa01 f202 	lsl.w	r2, r1, r2
 8002392:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	bffdfff8 	.word	0xbffdfff8
 80023d4:	cccccccd 	.word	0xcccccccd
 80023d8:	40020000 	.word	0x40020000

080023dc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d008      	beq.n	8002406 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2204      	movs	r2, #4
 80023f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e020      	b.n	8002448 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 020e 	bic.w	r2, r2, #14
 8002414:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0201 	bic.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f202 	lsl.w	r2, r1, r2
 8002434:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002446:	7bfb      	ldrb	r3, [r7, #15]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
	...

08002454 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d005      	beq.n	8002478 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2204      	movs	r2, #4
 8002470:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	e051      	b.n	800251c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 020e 	bic.w	r2, r2, #14
 8002486:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a22      	ldr	r2, [pc, #136]	@ (8002528 <HAL_DMA_Abort_IT+0xd4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d029      	beq.n	80024f6 <HAL_DMA_Abort_IT+0xa2>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a21      	ldr	r2, [pc, #132]	@ (800252c <HAL_DMA_Abort_IT+0xd8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d022      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x9e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002530 <HAL_DMA_Abort_IT+0xdc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d01a      	beq.n	80024ec <HAL_DMA_Abort_IT+0x98>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002534 <HAL_DMA_Abort_IT+0xe0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d012      	beq.n	80024e6 <HAL_DMA_Abort_IT+0x92>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002538 <HAL_DMA_Abort_IT+0xe4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00a      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x8c>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1b      	ldr	r2, [pc, #108]	@ (800253c <HAL_DMA_Abort_IT+0xe8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d102      	bne.n	80024da <HAL_DMA_Abort_IT+0x86>
 80024d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80024d8:	e00e      	b.n	80024f8 <HAL_DMA_Abort_IT+0xa4>
 80024da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024de:	e00b      	b.n	80024f8 <HAL_DMA_Abort_IT+0xa4>
 80024e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024e4:	e008      	b.n	80024f8 <HAL_DMA_Abort_IT+0xa4>
 80024e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ea:	e005      	b.n	80024f8 <HAL_DMA_Abort_IT+0xa4>
 80024ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024f0:	e002      	b.n	80024f8 <HAL_DMA_Abort_IT+0xa4>
 80024f2:	2310      	movs	r3, #16
 80024f4:	e000      	b.n	80024f8 <HAL_DMA_Abort_IT+0xa4>
 80024f6:	2301      	movs	r3, #1
 80024f8:	4a11      	ldr	r2, [pc, #68]	@ (8002540 <HAL_DMA_Abort_IT+0xec>)
 80024fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
    } 
  }
  return status;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40020008 	.word	0x40020008
 800252c:	4002001c 	.word	0x4002001c
 8002530:	40020030 	.word	0x40020030
 8002534:	40020044 	.word	0x40020044
 8002538:	40020058 	.word	0x40020058
 800253c:	4002006c 	.word	0x4002006c
 8002540:	40020000 	.word	0x40020000

08002544 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	2204      	movs	r2, #4
 8002562:	409a      	lsls	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d04f      	beq.n	800260c <HAL_DMA_IRQHandler+0xc8>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d04a      	beq.n	800260c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b00      	cmp	r3, #0
 8002582:	d107      	bne.n	8002594 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0204 	bic.w	r2, r2, #4
 8002592:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a66      	ldr	r2, [pc, #408]	@ (8002734 <HAL_DMA_IRQHandler+0x1f0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d029      	beq.n	80025f2 <HAL_DMA_IRQHandler+0xae>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a65      	ldr	r2, [pc, #404]	@ (8002738 <HAL_DMA_IRQHandler+0x1f4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d022      	beq.n	80025ee <HAL_DMA_IRQHandler+0xaa>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a63      	ldr	r2, [pc, #396]	@ (800273c <HAL_DMA_IRQHandler+0x1f8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01a      	beq.n	80025e8 <HAL_DMA_IRQHandler+0xa4>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a62      	ldr	r2, [pc, #392]	@ (8002740 <HAL_DMA_IRQHandler+0x1fc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d012      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x9e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a60      	ldr	r2, [pc, #384]	@ (8002744 <HAL_DMA_IRQHandler+0x200>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00a      	beq.n	80025dc <HAL_DMA_IRQHandler+0x98>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a5f      	ldr	r2, [pc, #380]	@ (8002748 <HAL_DMA_IRQHandler+0x204>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d102      	bne.n	80025d6 <HAL_DMA_IRQHandler+0x92>
 80025d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025d4:	e00e      	b.n	80025f4 <HAL_DMA_IRQHandler+0xb0>
 80025d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80025da:	e00b      	b.n	80025f4 <HAL_DMA_IRQHandler+0xb0>
 80025dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80025e0:	e008      	b.n	80025f4 <HAL_DMA_IRQHandler+0xb0>
 80025e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025e6:	e005      	b.n	80025f4 <HAL_DMA_IRQHandler+0xb0>
 80025e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025ec:	e002      	b.n	80025f4 <HAL_DMA_IRQHandler+0xb0>
 80025ee:	2340      	movs	r3, #64	@ 0x40
 80025f0:	e000      	b.n	80025f4 <HAL_DMA_IRQHandler+0xb0>
 80025f2:	2304      	movs	r3, #4
 80025f4:	4a55      	ldr	r2, [pc, #340]	@ (800274c <HAL_DMA_IRQHandler+0x208>)
 80025f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 8094 	beq.w	800272a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800260a:	e08e      	b.n	800272a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	2202      	movs	r2, #2
 8002612:	409a      	lsls	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d056      	beq.n	80026ca <HAL_DMA_IRQHandler+0x186>
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d051      	beq.n	80026ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10b      	bne.n	800264c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 020a 	bic.w	r2, r2, #10
 8002642:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a38      	ldr	r2, [pc, #224]	@ (8002734 <HAL_DMA_IRQHandler+0x1f0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d029      	beq.n	80026aa <HAL_DMA_IRQHandler+0x166>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a37      	ldr	r2, [pc, #220]	@ (8002738 <HAL_DMA_IRQHandler+0x1f4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d022      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x162>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a35      	ldr	r2, [pc, #212]	@ (800273c <HAL_DMA_IRQHandler+0x1f8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01a      	beq.n	80026a0 <HAL_DMA_IRQHandler+0x15c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a34      	ldr	r2, [pc, #208]	@ (8002740 <HAL_DMA_IRQHandler+0x1fc>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d012      	beq.n	800269a <HAL_DMA_IRQHandler+0x156>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a32      	ldr	r2, [pc, #200]	@ (8002744 <HAL_DMA_IRQHandler+0x200>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00a      	beq.n	8002694 <HAL_DMA_IRQHandler+0x150>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a31      	ldr	r2, [pc, #196]	@ (8002748 <HAL_DMA_IRQHandler+0x204>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d102      	bne.n	800268e <HAL_DMA_IRQHandler+0x14a>
 8002688:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800268c:	e00e      	b.n	80026ac <HAL_DMA_IRQHandler+0x168>
 800268e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002692:	e00b      	b.n	80026ac <HAL_DMA_IRQHandler+0x168>
 8002694:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002698:	e008      	b.n	80026ac <HAL_DMA_IRQHandler+0x168>
 800269a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800269e:	e005      	b.n	80026ac <HAL_DMA_IRQHandler+0x168>
 80026a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026a4:	e002      	b.n	80026ac <HAL_DMA_IRQHandler+0x168>
 80026a6:	2320      	movs	r3, #32
 80026a8:	e000      	b.n	80026ac <HAL_DMA_IRQHandler+0x168>
 80026aa:	2302      	movs	r3, #2
 80026ac:	4a27      	ldr	r2, [pc, #156]	@ (800274c <HAL_DMA_IRQHandler+0x208>)
 80026ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d034      	beq.n	800272a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026c8:	e02f      	b.n	800272a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	2208      	movs	r2, #8
 80026d0:	409a      	lsls	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d028      	beq.n	800272c <HAL_DMA_IRQHandler+0x1e8>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d023      	beq.n	800272c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 020e 	bic.w	r2, r2, #14
 80026f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026fc:	2101      	movs	r1, #1
 80026fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002702:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	2b00      	cmp	r3, #0
 8002720:	d004      	beq.n	800272c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
    }
  }
  return;
 800272a:	bf00      	nop
 800272c:	bf00      	nop
}
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40020008 	.word	0x40020008
 8002738:	4002001c 	.word	0x4002001c
 800273c:	40020030 	.word	0x40020030
 8002740:	40020044 	.word	0x40020044
 8002744:	40020058 	.word	0x40020058
 8002748:	4002006c 	.word	0x4002006c
 800274c:	40020000 	.word	0x40020000

08002750 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800275e:	b2db      	uxtb	r3, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr
	...

0800276c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800276c:	b480      	push	{r7}
 800276e:	b08b      	sub	sp, #44	@ 0x2c
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002776:	2300      	movs	r3, #0
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800277e:	e169      	b.n	8002a54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002780:	2201      	movs	r2, #1
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	429a      	cmp	r2, r3
 800279a:	f040 8158 	bne.w	8002a4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4a9a      	ldr	r2, [pc, #616]	@ (8002a0c <HAL_GPIO_Init+0x2a0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d05e      	beq.n	8002866 <HAL_GPIO_Init+0xfa>
 80027a8:	4a98      	ldr	r2, [pc, #608]	@ (8002a0c <HAL_GPIO_Init+0x2a0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d875      	bhi.n	800289a <HAL_GPIO_Init+0x12e>
 80027ae:	4a98      	ldr	r2, [pc, #608]	@ (8002a10 <HAL_GPIO_Init+0x2a4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d058      	beq.n	8002866 <HAL_GPIO_Init+0xfa>
 80027b4:	4a96      	ldr	r2, [pc, #600]	@ (8002a10 <HAL_GPIO_Init+0x2a4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d86f      	bhi.n	800289a <HAL_GPIO_Init+0x12e>
 80027ba:	4a96      	ldr	r2, [pc, #600]	@ (8002a14 <HAL_GPIO_Init+0x2a8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d052      	beq.n	8002866 <HAL_GPIO_Init+0xfa>
 80027c0:	4a94      	ldr	r2, [pc, #592]	@ (8002a14 <HAL_GPIO_Init+0x2a8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d869      	bhi.n	800289a <HAL_GPIO_Init+0x12e>
 80027c6:	4a94      	ldr	r2, [pc, #592]	@ (8002a18 <HAL_GPIO_Init+0x2ac>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d04c      	beq.n	8002866 <HAL_GPIO_Init+0xfa>
 80027cc:	4a92      	ldr	r2, [pc, #584]	@ (8002a18 <HAL_GPIO_Init+0x2ac>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d863      	bhi.n	800289a <HAL_GPIO_Init+0x12e>
 80027d2:	4a92      	ldr	r2, [pc, #584]	@ (8002a1c <HAL_GPIO_Init+0x2b0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d046      	beq.n	8002866 <HAL_GPIO_Init+0xfa>
 80027d8:	4a90      	ldr	r2, [pc, #576]	@ (8002a1c <HAL_GPIO_Init+0x2b0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d85d      	bhi.n	800289a <HAL_GPIO_Init+0x12e>
 80027de:	2b12      	cmp	r3, #18
 80027e0:	d82a      	bhi.n	8002838 <HAL_GPIO_Init+0xcc>
 80027e2:	2b12      	cmp	r3, #18
 80027e4:	d859      	bhi.n	800289a <HAL_GPIO_Init+0x12e>
 80027e6:	a201      	add	r2, pc, #4	@ (adr r2, 80027ec <HAL_GPIO_Init+0x80>)
 80027e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ec:	08002867 	.word	0x08002867
 80027f0:	08002841 	.word	0x08002841
 80027f4:	08002853 	.word	0x08002853
 80027f8:	08002895 	.word	0x08002895
 80027fc:	0800289b 	.word	0x0800289b
 8002800:	0800289b 	.word	0x0800289b
 8002804:	0800289b 	.word	0x0800289b
 8002808:	0800289b 	.word	0x0800289b
 800280c:	0800289b 	.word	0x0800289b
 8002810:	0800289b 	.word	0x0800289b
 8002814:	0800289b 	.word	0x0800289b
 8002818:	0800289b 	.word	0x0800289b
 800281c:	0800289b 	.word	0x0800289b
 8002820:	0800289b 	.word	0x0800289b
 8002824:	0800289b 	.word	0x0800289b
 8002828:	0800289b 	.word	0x0800289b
 800282c:	0800289b 	.word	0x0800289b
 8002830:	08002849 	.word	0x08002849
 8002834:	0800285d 	.word	0x0800285d
 8002838:	4a79      	ldr	r2, [pc, #484]	@ (8002a20 <HAL_GPIO_Init+0x2b4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800283e:	e02c      	b.n	800289a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	623b      	str	r3, [r7, #32]
          break;
 8002846:	e029      	b.n	800289c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	3304      	adds	r3, #4
 800284e:	623b      	str	r3, [r7, #32]
          break;
 8002850:	e024      	b.n	800289c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	3308      	adds	r3, #8
 8002858:	623b      	str	r3, [r7, #32]
          break;
 800285a:	e01f      	b.n	800289c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	330c      	adds	r3, #12
 8002862:	623b      	str	r3, [r7, #32]
          break;
 8002864:	e01a      	b.n	800289c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d102      	bne.n	8002874 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800286e:	2304      	movs	r3, #4
 8002870:	623b      	str	r3, [r7, #32]
          break;
 8002872:	e013      	b.n	800289c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d105      	bne.n	8002888 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800287c:	2308      	movs	r3, #8
 800287e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	611a      	str	r2, [r3, #16]
          break;
 8002886:	e009      	b.n	800289c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002888:	2308      	movs	r3, #8
 800288a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	615a      	str	r2, [r3, #20]
          break;
 8002892:	e003      	b.n	800289c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002894:	2300      	movs	r3, #0
 8002896:	623b      	str	r3, [r7, #32]
          break;
 8002898:	e000      	b.n	800289c <HAL_GPIO_Init+0x130>
          break;
 800289a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2bff      	cmp	r3, #255	@ 0xff
 80028a0:	d801      	bhi.n	80028a6 <HAL_GPIO_Init+0x13a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	e001      	b.n	80028aa <HAL_GPIO_Init+0x13e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3304      	adds	r3, #4
 80028aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2bff      	cmp	r3, #255	@ 0xff
 80028b0:	d802      	bhi.n	80028b8 <HAL_GPIO_Init+0x14c>
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	e002      	b.n	80028be <HAL_GPIO_Init+0x152>
 80028b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ba:	3b08      	subs	r3, #8
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	210f      	movs	r1, #15
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	401a      	ands	r2, r3
 80028d0:	6a39      	ldr	r1, [r7, #32]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	431a      	orrs	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 80b1 	beq.w	8002a4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002a24 <HAL_GPIO_Init+0x2b8>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002a24 <HAL_GPIO_Init+0x2b8>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6193      	str	r3, [r2, #24]
 80028f8:	4b4a      	ldr	r3, [pc, #296]	@ (8002a24 <HAL_GPIO_Init+0x2b8>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002904:	4a48      	ldr	r2, [pc, #288]	@ (8002a28 <HAL_GPIO_Init+0x2bc>)
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	3302      	adds	r3, #2
 800290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002910:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	220f      	movs	r2, #15
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4013      	ands	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a40      	ldr	r2, [pc, #256]	@ (8002a2c <HAL_GPIO_Init+0x2c0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d013      	beq.n	8002958 <HAL_GPIO_Init+0x1ec>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a3f      	ldr	r2, [pc, #252]	@ (8002a30 <HAL_GPIO_Init+0x2c4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00d      	beq.n	8002954 <HAL_GPIO_Init+0x1e8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a34 <HAL_GPIO_Init+0x2c8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d007      	beq.n	8002950 <HAL_GPIO_Init+0x1e4>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3d      	ldr	r2, [pc, #244]	@ (8002a38 <HAL_GPIO_Init+0x2cc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d101      	bne.n	800294c <HAL_GPIO_Init+0x1e0>
 8002948:	2303      	movs	r3, #3
 800294a:	e006      	b.n	800295a <HAL_GPIO_Init+0x1ee>
 800294c:	2304      	movs	r3, #4
 800294e:	e004      	b.n	800295a <HAL_GPIO_Init+0x1ee>
 8002950:	2302      	movs	r3, #2
 8002952:	e002      	b.n	800295a <HAL_GPIO_Init+0x1ee>
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <HAL_GPIO_Init+0x1ee>
 8002958:	2300      	movs	r3, #0
 800295a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800295c:	f002 0203 	and.w	r2, r2, #3
 8002960:	0092      	lsls	r2, r2, #2
 8002962:	4093      	lsls	r3, r2
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800296a:	492f      	ldr	r1, [pc, #188]	@ (8002a28 <HAL_GPIO_Init+0x2bc>)
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d006      	beq.n	8002992 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002984:	4b2d      	ldr	r3, [pc, #180]	@ (8002a3c <HAL_GPIO_Init+0x2d0>)
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	492c      	ldr	r1, [pc, #176]	@ (8002a3c <HAL_GPIO_Init+0x2d0>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]
 8002990:	e006      	b.n	80029a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002992:	4b2a      	ldr	r3, [pc, #168]	@ (8002a3c <HAL_GPIO_Init+0x2d0>)
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	43db      	mvns	r3, r3
 800299a:	4928      	ldr	r1, [pc, #160]	@ (8002a3c <HAL_GPIO_Init+0x2d0>)
 800299c:	4013      	ands	r3, r2
 800299e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d006      	beq.n	80029ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029ac:	4b23      	ldr	r3, [pc, #140]	@ (8002a3c <HAL_GPIO_Init+0x2d0>)
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	4922      	ldr	r1, [pc, #136]	@ (8002a3c <HAL_GPIO_Init+0x2d0>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60cb      	str	r3, [r1, #12]
 80029b8:	e006      	b.n	80029c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029ba:	4b20      	ldr	r3, [pc, #128]	@ (8002a3c <HAL_GPIO_Init+0x2d0>)
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	491e      	ldr	r1, [pc, #120]	@ (8002a3c <HAL_GPIO_Init+0x2d0>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d006      	beq.n	80029e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029d4:	4b19      	ldr	r3, [pc, #100]	@ (8002a3c <HAL_GPIO_Init+0x2d0>)
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	4918      	ldr	r1, [pc, #96]	@ (8002a3c <HAL_GPIO_Init+0x2d0>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029e2:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <HAL_GPIO_Init+0x2d0>)
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	4914      	ldr	r1, [pc, #80]	@ (8002a3c <HAL_GPIO_Init+0x2d0>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d021      	beq.n	8002a40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029fc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a3c <HAL_GPIO_Init+0x2d0>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	490e      	ldr	r1, [pc, #56]	@ (8002a3c <HAL_GPIO_Init+0x2d0>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	600b      	str	r3, [r1, #0]
 8002a08:	e021      	b.n	8002a4e <HAL_GPIO_Init+0x2e2>
 8002a0a:	bf00      	nop
 8002a0c:	10320000 	.word	0x10320000
 8002a10:	10310000 	.word	0x10310000
 8002a14:	10220000 	.word	0x10220000
 8002a18:	10210000 	.word	0x10210000
 8002a1c:	10120000 	.word	0x10120000
 8002a20:	10110000 	.word	0x10110000
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	40010800 	.word	0x40010800
 8002a30:	40010c00 	.word	0x40010c00
 8002a34:	40011000 	.word	0x40011000
 8002a38:	40011400 	.word	0x40011400
 8002a3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a40:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	4909      	ldr	r1, [pc, #36]	@ (8002a70 <HAL_GPIO_Init+0x304>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	3301      	adds	r3, #1
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f47f ae8e 	bne.w	8002780 <HAL_GPIO_Init+0x14>
  }
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop
 8002a68:	372c      	adds	r7, #44	@ 0x2c
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	40010400 	.word	0x40010400

08002a74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	@ 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002a82:	e09a      	b.n	8002bba <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002a84:	2201      	movs	r2, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 808d 	beq.w	8002bb4 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002a9a:	4a4e      	ldr	r2, [pc, #312]	@ (8002bd4 <HAL_GPIO_DeInit+0x160>)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a46      	ldr	r2, [pc, #280]	@ (8002bd8 <HAL_GPIO_DeInit+0x164>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d013      	beq.n	8002aec <HAL_GPIO_DeInit+0x78>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a45      	ldr	r2, [pc, #276]	@ (8002bdc <HAL_GPIO_DeInit+0x168>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00d      	beq.n	8002ae8 <HAL_GPIO_DeInit+0x74>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a44      	ldr	r2, [pc, #272]	@ (8002be0 <HAL_GPIO_DeInit+0x16c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d007      	beq.n	8002ae4 <HAL_GPIO_DeInit+0x70>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a43      	ldr	r2, [pc, #268]	@ (8002be4 <HAL_GPIO_DeInit+0x170>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d101      	bne.n	8002ae0 <HAL_GPIO_DeInit+0x6c>
 8002adc:	2303      	movs	r3, #3
 8002ade:	e006      	b.n	8002aee <HAL_GPIO_DeInit+0x7a>
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	e004      	b.n	8002aee <HAL_GPIO_DeInit+0x7a>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e002      	b.n	8002aee <HAL_GPIO_DeInit+0x7a>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <HAL_GPIO_DeInit+0x7a>
 8002aec:	2300      	movs	r3, #0
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	f002 0203 	and.w	r2, r2, #3
 8002af4:	0092      	lsls	r2, r2, #2
 8002af6:	4093      	lsls	r3, r2
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d132      	bne.n	8002b64 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002afe:	4b3a      	ldr	r3, [pc, #232]	@ (8002be8 <HAL_GPIO_DeInit+0x174>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	4938      	ldr	r1, [pc, #224]	@ (8002be8 <HAL_GPIO_DeInit+0x174>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002b0c:	4b36      	ldr	r3, [pc, #216]	@ (8002be8 <HAL_GPIO_DeInit+0x174>)
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	43db      	mvns	r3, r3
 8002b14:	4934      	ldr	r1, [pc, #208]	@ (8002be8 <HAL_GPIO_DeInit+0x174>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002b1a:	4b33      	ldr	r3, [pc, #204]	@ (8002be8 <HAL_GPIO_DeInit+0x174>)
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	4931      	ldr	r1, [pc, #196]	@ (8002be8 <HAL_GPIO_DeInit+0x174>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002b28:	4b2f      	ldr	r3, [pc, #188]	@ (8002be8 <HAL_GPIO_DeInit+0x174>)
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	492d      	ldr	r1, [pc, #180]	@ (8002be8 <HAL_GPIO_DeInit+0x174>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	220f      	movs	r2, #15
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002b46:	4a23      	ldr	r2, [pc, #140]	@ (8002bd4 <HAL_GPIO_DeInit+0x160>)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	43da      	mvns	r2, r3
 8002b56:	481f      	ldr	r0, [pc, #124]	@ (8002bd4 <HAL_GPIO_DeInit+0x160>)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	3302      	adds	r3, #2
 8002b60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2bff      	cmp	r3, #255	@ 0xff
 8002b68:	d801      	bhi.n	8002b6e <HAL_GPIO_DeInit+0xfa>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	e001      	b.n	8002b72 <HAL_GPIO_DeInit+0xfe>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3304      	adds	r3, #4
 8002b72:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2bff      	cmp	r3, #255	@ 0xff
 8002b78:	d802      	bhi.n	8002b80 <HAL_GPIO_DeInit+0x10c>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	e002      	b.n	8002b86 <HAL_GPIO_DeInit+0x112>
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	3b08      	subs	r3, #8
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	210f      	movs	r1, #15
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	401a      	ands	r2, r3
 8002b98:	2104      	movs	r1, #4
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	43db      	mvns	r3, r3
 8002bae:	401a      	ands	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f47f af5e 	bne.w	8002a84 <HAL_GPIO_DeInit+0x10>
  }
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3724      	adds	r7, #36	@ 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	40010000 	.word	0x40010000
 8002bd8:	40010800 	.word	0x40010800
 8002bdc:	40010c00 	.word	0x40010c00
 8002be0:	40011000 	.word	0x40011000
 8002be4:	40011400 	.word	0x40011400
 8002be8:	40010400 	.word	0x40010400

08002bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	887b      	ldrh	r3, [r7, #2]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	e001      	b.n	8002c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	807b      	strh	r3, [r7, #2]
 8002c26:	4613      	mov	r3, r2
 8002c28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c2a:	787b      	ldrb	r3, [r7, #1]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c30:	887a      	ldrh	r2, [r7, #2]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c36:	e003      	b.n	8002c40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c38:	887b      	ldrh	r3, [r7, #2]
 8002c3a:	041a      	lsls	r2, r3, #16
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	611a      	str	r2, [r3, #16]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
	...

08002c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e12b      	b.n	8002eb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe fedc 	bl	8001a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2224      	movs	r2, #36	@ 0x24
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cb0:	f003 faf0 	bl	8006294 <HAL_RCC_GetPCLK1Freq>
 8002cb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4a81      	ldr	r2, [pc, #516]	@ (8002ec0 <HAL_I2C_Init+0x274>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d807      	bhi.n	8002cd0 <HAL_I2C_Init+0x84>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4a80      	ldr	r2, [pc, #512]	@ (8002ec4 <HAL_I2C_Init+0x278>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	bf94      	ite	ls
 8002cc8:	2301      	movls	r3, #1
 8002cca:	2300      	movhi	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e006      	b.n	8002cde <HAL_I2C_Init+0x92>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a7d      	ldr	r2, [pc, #500]	@ (8002ec8 <HAL_I2C_Init+0x27c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	bf94      	ite	ls
 8002cd8:	2301      	movls	r3, #1
 8002cda:	2300      	movhi	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e0e7      	b.n	8002eb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4a78      	ldr	r2, [pc, #480]	@ (8002ecc <HAL_I2C_Init+0x280>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	0c9b      	lsrs	r3, r3, #18
 8002cf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a6a      	ldr	r2, [pc, #424]	@ (8002ec0 <HAL_I2C_Init+0x274>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d802      	bhi.n	8002d20 <HAL_I2C_Init+0xd4>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	e009      	b.n	8002d34 <HAL_I2C_Init+0xe8>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	4a69      	ldr	r2, [pc, #420]	@ (8002ed0 <HAL_I2C_Init+0x284>)
 8002d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d30:	099b      	lsrs	r3, r3, #6
 8002d32:	3301      	adds	r3, #1
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	495c      	ldr	r1, [pc, #368]	@ (8002ec0 <HAL_I2C_Init+0x274>)
 8002d50:	428b      	cmp	r3, r1
 8002d52:	d819      	bhi.n	8002d88 <HAL_I2C_Init+0x13c>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1e59      	subs	r1, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d62:	1c59      	adds	r1, r3, #1
 8002d64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d68:	400b      	ands	r3, r1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HAL_I2C_Init+0x138>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	1e59      	subs	r1, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d82:	e051      	b.n	8002e28 <HAL_I2C_Init+0x1dc>
 8002d84:	2304      	movs	r3, #4
 8002d86:	e04f      	b.n	8002e28 <HAL_I2C_Init+0x1dc>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d111      	bne.n	8002db4 <HAL_I2C_Init+0x168>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	1e58      	subs	r0, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	440b      	add	r3, r1
 8002d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e012      	b.n	8002dda <HAL_I2C_Init+0x18e>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1e58      	subs	r0, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	0099      	lsls	r1, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	bf0c      	ite	eq
 8002dd4:	2301      	moveq	r3, #1
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_I2C_Init+0x196>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e022      	b.n	8002e28 <HAL_I2C_Init+0x1dc>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10e      	bne.n	8002e08 <HAL_I2C_Init+0x1bc>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1e58      	subs	r0, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	440b      	add	r3, r1
 8002df8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e06:	e00f      	b.n	8002e28 <HAL_I2C_Init+0x1dc>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e58      	subs	r0, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	0099      	lsls	r1, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	6809      	ldr	r1, [r1, #0]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6911      	ldr	r1, [r2, #16]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68d2      	ldr	r2, [r2, #12]
 8002e62:	4311      	orrs	r1, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	000186a0 	.word	0x000186a0
 8002ec4:	001e847f 	.word	0x001e847f
 8002ec8:	003d08ff 	.word	0x003d08ff
 8002ecc:	431bde83 	.word	0x431bde83
 8002ed0:	10624dd3 	.word	0x10624dd3

08002ed4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e021      	b.n	8002f2a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2224      	movs	r2, #36	@ 0x24
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe fe4c 	bl	8001b9c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f44:	2b80      	cmp	r3, #128	@ 0x80
 8002f46:	d103      	bne.n	8002f50 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
  }
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
	...

08002f5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	4608      	mov	r0, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	817b      	strh	r3, [r7, #10]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	813b      	strh	r3, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f76:	f7ff f83b 	bl	8001ff0 <HAL_GetTick>
 8002f7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	f040 80d9 	bne.w	800313c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2319      	movs	r3, #25
 8002f90:	2201      	movs	r2, #1
 8002f92:	496d      	ldr	r1, [pc, #436]	@ (8003148 <HAL_I2C_Mem_Write+0x1ec>)
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f002 fb31 	bl	80055fc <I2C_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e0cc      	b.n	800313e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_I2C_Mem_Write+0x56>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e0c5      	b.n	800313e <HAL_I2C_Mem_Write+0x1e2>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d007      	beq.n	8002fd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fe6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2221      	movs	r2, #33	@ 0x21
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2240      	movs	r2, #64	@ 0x40
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a3a      	ldr	r2, [r7, #32]
 8003002:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003008:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a4d      	ldr	r2, [pc, #308]	@ (800314c <HAL_I2C_Mem_Write+0x1f0>)
 8003018:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800301a:	88f8      	ldrh	r0, [r7, #6]
 800301c:	893a      	ldrh	r2, [r7, #8]
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	4603      	mov	r3, r0
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f002 f8c0 	bl	80051b0 <I2C_RequestMemoryWrite>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d052      	beq.n	80030dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e081      	b.n	800313e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f002 fbf6 	bl	8005830 <I2C_WaitOnTXEFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	2b04      	cmp	r3, #4
 8003050:	d107      	bne.n	8003062 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003060:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e06b      	b.n	800313e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	781a      	ldrb	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d11b      	bne.n	80030dc <HAL_I2C_Mem_Write+0x180>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d017      	beq.n	80030dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1aa      	bne.n	800303a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f002 fbe9 	bl	80058c0 <I2C_WaitOnBTFFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00d      	beq.n	8003110 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d107      	bne.n	800310c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800310a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e016      	b.n	800313e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800311e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	e000      	b.n	800313e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800313c:	2302      	movs	r3, #2
  }
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	00100002 	.word	0x00100002
 800314c:	ffff0000 	.word	0xffff0000

08003150 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08c      	sub	sp, #48	@ 0x30
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	4608      	mov	r0, r1
 800315a:	4611      	mov	r1, r2
 800315c:	461a      	mov	r2, r3
 800315e:	4603      	mov	r3, r0
 8003160:	817b      	strh	r3, [r7, #10]
 8003162:	460b      	mov	r3, r1
 8003164:	813b      	strh	r3, [r7, #8]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800316e:	f7fe ff3f 	bl	8001ff0 <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b20      	cmp	r3, #32
 800317e:	f040 8250 	bne.w	8003622 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	2319      	movs	r3, #25
 8003188:	2201      	movs	r2, #1
 800318a:	4982      	ldr	r1, [pc, #520]	@ (8003394 <HAL_I2C_Mem_Read+0x244>)
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f002 fa35 	bl	80055fc <I2C_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003198:	2302      	movs	r3, #2
 800319a:	e243      	b.n	8003624 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_I2C_Mem_Read+0x5a>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e23c      	b.n	8003624 <HAL_I2C_Mem_Read+0x4d4>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d007      	beq.n	80031d0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2222      	movs	r2, #34	@ 0x22
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2240      	movs	r2, #64	@ 0x40
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003200:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4a62      	ldr	r2, [pc, #392]	@ (8003398 <HAL_I2C_Mem_Read+0x248>)
 8003210:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003212:	88f8      	ldrh	r0, [r7, #6]
 8003214:	893a      	ldrh	r2, [r7, #8]
 8003216:	8979      	ldrh	r1, [r7, #10]
 8003218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	4603      	mov	r3, r0
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f002 f85a 	bl	80052dc <I2C_RequestMemoryRead>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e1f8      	b.n	8003624 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003236:	2b00      	cmp	r3, #0
 8003238:	d113      	bne.n	8003262 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	e1cc      	b.n	80035fc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003266:	2b01      	cmp	r3, #1
 8003268:	d11e      	bne.n	80032a8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003278:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800327a:	b672      	cpsid	i
}
 800327c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032a4:	b662      	cpsie	i
}
 80032a6:	e035      	b.n	8003314 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d11e      	bne.n	80032ee <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032c0:	b672      	cpsid	i
}
 80032c2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032ea:	b662      	cpsie	i
}
 80032ec:	e012      	b.n	8003314 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032fc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003314:	e172      	b.n	80035fc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331a:	2b03      	cmp	r3, #3
 800331c:	f200 811f 	bhi.w	800355e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003324:	2b01      	cmp	r3, #1
 8003326:	d123      	bne.n	8003370 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800332a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f002 fb41 	bl	80059b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e173      	b.n	8003624 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800336e:	e145      	b.n	80035fc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003374:	2b02      	cmp	r3, #2
 8003376:	d152      	bne.n	800341e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800337e:	2200      	movs	r2, #0
 8003380:	4906      	ldr	r1, [pc, #24]	@ (800339c <HAL_I2C_Mem_Read+0x24c>)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f002 f93a 	bl	80055fc <I2C_WaitOnFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e148      	b.n	8003624 <HAL_I2C_Mem_Read+0x4d4>
 8003392:	bf00      	nop
 8003394:	00100002 	.word	0x00100002
 8003398:	ffff0000 	.word	0xffff0000
 800339c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80033a0:	b672      	cpsid	i
}
 80033a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033e6:	b662      	cpsie	i
}
 80033e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800341c:	e0ee      	b.n	80035fc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003424:	2200      	movs	r2, #0
 8003426:	4981      	ldr	r1, [pc, #516]	@ (800362c <HAL_I2C_Mem_Read+0x4dc>)
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f002 f8e7 	bl	80055fc <I2C_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0f5      	b.n	8003624 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003446:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003448:	b672      	cpsid	i
}
 800344a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800347e:	4b6c      	ldr	r3, [pc, #432]	@ (8003630 <HAL_I2C_Mem_Read+0x4e0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	08db      	lsrs	r3, r3, #3
 8003484:	4a6b      	ldr	r2, [pc, #428]	@ (8003634 <HAL_I2C_Mem_Read+0x4e4>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	0a1a      	lsrs	r2, r3, #8
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	00da      	lsls	r2, r3, #3
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	3b01      	subs	r3, #1
 800349c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d118      	bne.n	80034d6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80034c6:	b662      	cpsie	i
}
 80034c8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e0a6      	b.n	8003624 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d1d9      	bne.n	8003498 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003526:	b662      	cpsie	i
}
 8003528:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800355c:	e04e      	b.n	80035fc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800355e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003560:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f002 fa26 	bl	80059b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e058      	b.n	8003624 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d124      	bne.n	80035fc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d107      	bne.n	80035ca <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	f47f ae88 	bne.w	8003316 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003622:	2302      	movs	r3, #2
  }
}
 8003624:	4618      	mov	r0, r3
 8003626:	3728      	adds	r7, #40	@ 0x28
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	00010004 	.word	0x00010004
 8003630:	20000008 	.word	0x20000008
 8003634:	14f8b589 	.word	0x14f8b589

08003638 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	4608      	mov	r0, r1
 8003642:	4611      	mov	r1, r2
 8003644:	461a      	mov	r2, r3
 8003646:	4603      	mov	r3, r0
 8003648:	817b      	strh	r3, [r7, #10]
 800364a:	460b      	mov	r3, r1
 800364c:	813b      	strh	r3, [r7, #8]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b20      	cmp	r3, #32
 8003660:	f040 8096 	bne.w	8003790 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003664:	4b4d      	ldr	r3, [pc, #308]	@ (800379c <HAL_I2C_Mem_Read_IT+0x164>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	08db      	lsrs	r3, r3, #3
 800366a:	4a4d      	ldr	r2, [pc, #308]	@ (80037a0 <HAL_I2C_Mem_Read_IT+0x168>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	0a1a      	lsrs	r2, r3, #8
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	009a      	lsls	r2, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3b01      	subs	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d112      	bne.n	80036b0 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80036ac:	2302      	movs	r3, #2
 80036ae:	e070      	b.n	8003792 <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d0df      	beq.n	800367e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_I2C_Mem_Read_IT+0x94>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e062      	b.n	8003792 <HAL_I2C_Mem_Read_IT+0x15a>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d007      	beq.n	80036f2 <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003700:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2222      	movs	r2, #34	@ 0x22
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2240      	movs	r2, #64	@ 0x40
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a3a      	ldr	r2, [r7, #32]
 800371c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003722:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4a1c      	ldr	r2, [pc, #112]	@ (80037a4 <HAL_I2C_Mem_Read_IT+0x16c>)
 8003732:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003734:	897a      	ldrh	r2, [r7, #10]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800373a:	893a      	ldrh	r2, [r7, #8]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003740:	88fa      	ldrh	r2, [r7, #6]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800375a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800376a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800378a:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	20000008 	.word	0x20000008
 80037a0:	14f8b589 	.word	0x14f8b589
 80037a4:	ffff0000 	.word	0xffff0000

080037a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	@ 0x28
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	460b      	mov	r3, r1
 80037b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80037b8:	f7fe fc1a 	bl	8001ff0 <HAL_GetTick>
 80037bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	f040 8111 	bne.w	80039f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2319      	movs	r3, #25
 80037d6:	2201      	movs	r2, #1
 80037d8:	4988      	ldr	r1, [pc, #544]	@ (80039fc <HAL_I2C_IsDeviceReady+0x254>)
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f001 ff0e 	bl	80055fc <I2C_WaitOnFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80037e6:	2302      	movs	r3, #2
 80037e8:	e104      	b.n	80039f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_I2C_IsDeviceReady+0x50>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e0fd      	b.n	80039f4 <HAL_I2C_IsDeviceReady+0x24c>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d007      	beq.n	800381e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800382c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2224      	movs	r2, #36	@ 0x24
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4a70      	ldr	r2, [pc, #448]	@ (8003a00 <HAL_I2C_IsDeviceReady+0x258>)
 8003840:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003850:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2200      	movs	r2, #0
 800385a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f001 fecc 	bl	80055fc <I2C_WaitOnFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003874:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003878:	d103      	bne.n	8003882 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003880:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e0b6      	b.n	80039f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003886:	897b      	ldrh	r3, [r7, #10]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003894:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003896:	f7fe fbab 	bl	8001ff0 <HAL_GetTick>
 800389a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038ca:	e025      	b.n	8003918 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038cc:	f7fe fb90 	bl	8001ff0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d302      	bcc.n	80038e2 <HAL_I2C_IsDeviceReady+0x13a>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d103      	bne.n	80038ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	22a0      	movs	r2, #160	@ 0xa0
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800390a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2ba0      	cmp	r3, #160	@ 0xa0
 8003922:	d005      	beq.n	8003930 <HAL_I2C_IsDeviceReady+0x188>
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <HAL_I2C_IsDeviceReady+0x188>
 800392a:	7dbb      	ldrb	r3, [r7, #22]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0cd      	beq.n	80038cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d129      	bne.n	800399a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003954:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	2319      	movs	r3, #25
 8003972:	2201      	movs	r2, #1
 8003974:	4921      	ldr	r1, [pc, #132]	@ (80039fc <HAL_I2C_IsDeviceReady+0x254>)
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f001 fe40 	bl	80055fc <I2C_WaitOnFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e036      	b.n	80039f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	e02c      	b.n	80039f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	2319      	movs	r3, #25
 80039ba:	2201      	movs	r2, #1
 80039bc:	490f      	ldr	r1, [pc, #60]	@ (80039fc <HAL_I2C_IsDeviceReady+0x254>)
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f001 fe1c 	bl	80055fc <I2C_WaitOnFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e012      	b.n	80039f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	3301      	adds	r3, #1
 80039d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	429a      	cmp	r2, r3
 80039da:	f4ff af32 	bcc.w	8003842 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	00100002 	.word	0x00100002
 8003a00:	ffff0000 	.word	0xffff0000

08003a04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a24:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a2c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d003      	beq.n	8003a3c <HAL_I2C_EV_IRQHandler+0x38>
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	2b40      	cmp	r3, #64	@ 0x40
 8003a38:	f040 80b1 	bne.w	8003b9e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10d      	bne.n	8003a72 <HAL_I2C_EV_IRQHandler+0x6e>
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003a5c:	d003      	beq.n	8003a66 <HAL_I2C_EV_IRQHandler+0x62>
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003a64:	d101      	bne.n	8003a6a <HAL_I2C_EV_IRQHandler+0x66>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <HAL_I2C_EV_IRQHandler+0x68>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	f000 8114 	beq.w	8003c9a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00b      	beq.n	8003a94 <HAL_I2C_EV_IRQHandler+0x90>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d006      	beq.n	8003a94 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f002 f81f 	bl	8005aca <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 fd6b 	bl	8004568 <I2C_Master_SB>
 8003a92:	e083      	b.n	8003b9c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_I2C_EV_IRQHandler+0xac>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fde2 	bl	8004672 <I2C_Master_ADD10>
 8003aae:	e075      	b.n	8003b9c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_I2C_EV_IRQHandler+0xc8>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fdfd 	bl	80046c4 <I2C_Master_ADDR>
 8003aca:	e067      	b.n	8003b9c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d036      	beq.n	8003b44 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ae4:	f000 80db 	beq.w	8003c9e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00d      	beq.n	8003b0e <HAL_I2C_EV_IRQHandler+0x10a>
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_I2C_EV_IRQHandler+0x10a>
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9cb 	bl	8003ea2 <I2C_MasterTransmit_TXE>
 8003b0c:	e046      	b.n	8003b9c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80c2 	beq.w	8003c9e <HAL_I2C_EV_IRQHandler+0x29a>
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80bc 	beq.w	8003c9e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b26:	7bbb      	ldrb	r3, [r7, #14]
 8003b28:	2b21      	cmp	r3, #33	@ 0x21
 8003b2a:	d103      	bne.n	8003b34 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fa54 	bl	8003fda <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b32:	e0b4      	b.n	8003c9e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b40      	cmp	r3, #64	@ 0x40
 8003b38:	f040 80b1 	bne.w	8003c9e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fac2 	bl	80040c6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b42:	e0ac      	b.n	8003c9e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b52:	f000 80a4 	beq.w	8003c9e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00d      	beq.n	8003b7c <HAL_I2C_EV_IRQHandler+0x178>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <HAL_I2C_EV_IRQHandler+0x178>
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d103      	bne.n	8003b7c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fb3e 	bl	80041f6 <I2C_MasterReceive_RXNE>
 8003b7a:	e00f      	b.n	8003b9c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 808b 	beq.w	8003c9e <HAL_I2C_EV_IRQHandler+0x29a>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 8085 	beq.w	8003c9e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fbf6 	bl	8004386 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b9a:	e080      	b.n	8003c9e <HAL_I2C_EV_IRQHandler+0x29a>
 8003b9c:	e07f      	b.n	8003c9e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	e007      	b.n	8003bc0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d011      	beq.n	8003bee <HAL_I2C_EV_IRQHandler+0x1ea>
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00c      	beq.n	8003bee <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003be4:	69b9      	ldr	r1, [r7, #24]
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 ffc3 	bl	8004b72 <I2C_Slave_ADDR>
 8003bec:	e05a      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_I2C_EV_IRQHandler+0x206>
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fffe 	bl	8004c04 <I2C_Slave_STOPF>
 8003c08:	e04c      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c0a:	7bbb      	ldrb	r3, [r7, #14]
 8003c0c:	2b21      	cmp	r3, #33	@ 0x21
 8003c0e:	d002      	beq.n	8003c16 <HAL_I2C_EV_IRQHandler+0x212>
 8003c10:	7bbb      	ldrb	r3, [r7, #14]
 8003c12:	2b29      	cmp	r3, #41	@ 0x29
 8003c14:	d120      	bne.n	8003c58 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00d      	beq.n	8003c3c <HAL_I2C_EV_IRQHandler+0x238>
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d008      	beq.n	8003c3c <HAL_I2C_EV_IRQHandler+0x238>
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fee0 	bl	80049fa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c3a:	e032      	b.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d02d      	beq.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x29e>
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d028      	beq.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 ff0f 	bl	8004a74 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c56:	e024      	b.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00d      	beq.n	8003c7e <HAL_I2C_EV_IRQHandler+0x27a>
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_I2C_EV_IRQHandler+0x27a>
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 ff1c 	bl	8004ab4 <I2C_SlaveReceive_RXNE>
 8003c7c:	e012      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00d      	beq.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 ff4c 	bl	8004b30 <I2C_SlaveReceive_BTF>
 8003c98:	e004      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003c9a:	bf00      	nop
 8003c9c:	e002      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c9e:	bf00      	nop
 8003ca0:	e000      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ca2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ca4:	3720      	adds	r7, #32
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b08a      	sub	sp, #40	@ 0x28
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ccc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d015      	beq.n	8003d04 <HAL_I2C_ER_IRQHandler+0x5a>
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d010      	beq.n	8003d04 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003cf2:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d02:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00d      	beq.n	8003d2a <HAL_I2C_ER_IRQHandler+0x80>
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	f043 0302 	orr.w	r3, r3, #2
 8003d1e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003d28:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d03e      	beq.n	8003db2 <HAL_I2C_ER_IRQHandler+0x108>
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d039      	beq.n	8003db2 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8003d3e:	7efb      	ldrb	r3, [r7, #27]
 8003d40:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d50:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d56:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003d58:	7ebb      	ldrb	r3, [r7, #26]
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d112      	bne.n	8003d84 <HAL_I2C_ER_IRQHandler+0xda>
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10f      	bne.n	8003d84 <HAL_I2C_ER_IRQHandler+0xda>
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	2b21      	cmp	r3, #33	@ 0x21
 8003d68:	d008      	beq.n	8003d7c <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b29      	cmp	r3, #41	@ 0x29
 8003d6e:	d005      	beq.n	8003d7c <HAL_I2C_ER_IRQHandler+0xd2>
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	2b28      	cmp	r3, #40	@ 0x28
 8003d74:	d106      	bne.n	8003d84 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b21      	cmp	r3, #33	@ 0x21
 8003d7a:	d103      	bne.n	8003d84 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f001 f871 	bl	8004e64 <I2C_Slave_AF>
 8003d82:	e016      	b.n	8003db2 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d8c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d96:	7efb      	ldrb	r3, [r7, #27]
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d002      	beq.n	8003da2 <HAL_I2C_ER_IRQHandler+0xf8>
 8003d9c:	7efb      	ldrb	r3, [r7, #27]
 8003d9e:	2b40      	cmp	r3, #64	@ 0x40
 8003da0:	d107      	bne.n	8003db2 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00d      	beq.n	8003dd8 <HAL_I2C_ER_IRQHandler+0x12e>
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	f043 0308 	orr.w	r3, r3, #8
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003dd6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d008      	beq.n	8003df0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f001 f8ae 	bl	8004f4c <I2C_ITError>
  }
}
 8003df0:	bf00      	nop
 8003df2:	3728      	adds	r7, #40	@ 0x28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	70fb      	strb	r3, [r7, #3]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr

08003ea2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003eb8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d150      	bne.n	8003f6a <I2C_MasterTransmit_TXE+0xc8>
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b21      	cmp	r3, #33	@ 0x21
 8003ecc:	d14d      	bne.n	8003f6a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d01d      	beq.n	8003f10 <I2C_MasterTransmit_TXE+0x6e>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d01a      	beq.n	8003f10 <I2C_MasterTransmit_TXE+0x6e>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ee0:	d016      	beq.n	8003f10 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ef0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2211      	movs	r2, #17
 8003ef6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff ff75 	bl	8003df8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f0e:	e060      	b.n	8003fd2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f1e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f2e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b40      	cmp	r3, #64	@ 0x40
 8003f48:	d107      	bne.n	8003f5a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff ff8a 	bl	8003e6c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f58:	e03b      	b.n	8003fd2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff ff48 	bl	8003df8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f68:	e033      	b.n	8003fd2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	2b21      	cmp	r3, #33	@ 0x21
 8003f6e:	d005      	beq.n	8003f7c <I2C_MasterTransmit_TXE+0xda>
 8003f70:	7bbb      	ldrb	r3, [r7, #14]
 8003f72:	2b40      	cmp	r3, #64	@ 0x40
 8003f74:	d12d      	bne.n	8003fd2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b22      	cmp	r3, #34	@ 0x22
 8003f7a:	d12a      	bne.n	8003fd2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d108      	bne.n	8003f98 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f94:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003f96:	e01c      	b.n	8003fd2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b40      	cmp	r3, #64	@ 0x40
 8003fa2:	d103      	bne.n	8003fac <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f88e 	bl	80040c6 <I2C_MemoryTransmit_TXE_BTF>
}
 8003faa:	e012      	b.n	8003fd2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	781a      	ldrb	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003fd0:	e7ff      	b.n	8003fd2 <I2C_MasterTransmit_TXE+0x130>
 8003fd2:	bf00      	nop
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b21      	cmp	r3, #33	@ 0x21
 8003ff2:	d164      	bne.n	80040be <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d012      	beq.n	8004024 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	781a      	ldrb	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004022:	e04c      	b.n	80040be <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b08      	cmp	r3, #8
 8004028:	d01d      	beq.n	8004066 <I2C_MasterTransmit_BTF+0x8c>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b20      	cmp	r3, #32
 800402e:	d01a      	beq.n	8004066 <I2C_MasterTransmit_BTF+0x8c>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004036:	d016      	beq.n	8004066 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004046:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2211      	movs	r2, #17
 800404c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff feca 	bl	8003df8 <HAL_I2C_MasterTxCpltCallback>
}
 8004064:	e02b      	b.n	80040be <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004074:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004084:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b40      	cmp	r3, #64	@ 0x40
 800409e:	d107      	bne.n	80040b0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff fedf 	bl	8003e6c <HAL_I2C_MemTxCpltCallback>
}
 80040ae:	e006      	b.n	80040be <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff fe9d 	bl	8003df8 <HAL_I2C_MasterTxCpltCallback>
}
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040d4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d11d      	bne.n	800411a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d10b      	bne.n	80040fe <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f6:	1c9a      	adds	r2, r3, #2
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80040fc:	e077      	b.n	80041ee <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004102:	b29b      	uxth	r3, r3
 8004104:	121b      	asrs	r3, r3, #8
 8004106:	b2da      	uxtb	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004118:	e069      	b.n	80041ee <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800411e:	2b01      	cmp	r3, #1
 8004120:	d10b      	bne.n	800413a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004126:	b2da      	uxtb	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004138:	e059      	b.n	80041ee <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800413e:	2b02      	cmp	r3, #2
 8004140:	d152      	bne.n	80041e8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	2b22      	cmp	r3, #34	@ 0x22
 8004146:	d10d      	bne.n	8004164 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004156:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004162:	e044      	b.n	80041ee <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d015      	beq.n	800419a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	2b21      	cmp	r3, #33	@ 0x21
 8004172:	d112      	bne.n	800419a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	781a      	ldrb	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004198:	e029      	b.n	80041ee <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d124      	bne.n	80041ee <I2C_MemoryTransmit_TXE_BTF+0x128>
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b21      	cmp	r3, #33	@ 0x21
 80041a8:	d121      	bne.n	80041ee <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041b8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041c8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff fe43 	bl	8003e6c <HAL_I2C_MemTxCpltCallback>
}
 80041e6:	e002      	b.n	80041ee <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fe fea2 	bl	8002f32 <I2C_Flush_DR>
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b22      	cmp	r3, #34	@ 0x22
 8004208:	f040 80b9 	bne.w	800437e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004210:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004216:	b29b      	uxth	r3, r3
 8004218:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b03      	cmp	r3, #3
 800421e:	d921      	bls.n	8004264 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b03      	cmp	r3, #3
 800424e:	f040 8096 	bne.w	800437e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004260:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004262:	e08c      	b.n	800437e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004268:	2b02      	cmp	r3, #2
 800426a:	d07f      	beq.n	800436c <I2C_MasterReceive_RXNE+0x176>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d002      	beq.n	8004278 <I2C_MasterReceive_RXNE+0x82>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d179      	bne.n	800436c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f001 fb69 	bl	8005950 <I2C_WaitOnSTOPRequestThroughIT>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d14c      	bne.n	800431e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004292:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042a2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b40      	cmp	r3, #64	@ 0x40
 80042dc:	d10a      	bne.n	80042f4 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7fc ff11 	bl	8001114 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042f2:	e044      	b.n	800437e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d002      	beq.n	8004308 <I2C_MasterReceive_RXNE+0x112>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b20      	cmp	r3, #32
 8004306:	d103      	bne.n	8004310 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	@ 0x30
 800430e:	e002      	b.n	8004316 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2212      	movs	r2, #18
 8004314:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff fd77 	bl	8003e0a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800431c:	e02f      	b.n	800437e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800432c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff fd8a 	bl	8003e7e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800436a:	e008      	b.n	800437e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800437a:	605a      	str	r2, [r3, #4]
}
 800437c:	e7ff      	b.n	800437e <I2C_MasterReceive_RXNE+0x188>
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004392:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b04      	cmp	r3, #4
 800439c:	d11b      	bne.n	80043d6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043ac:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	3b01      	subs	r3, #1
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80043d4:	e0c4      	b.n	8004560 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d129      	bne.n	8004434 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043ee:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d00a      	beq.n	800440c <I2C_MasterReceive_BTF+0x86>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d007      	beq.n	800440c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800440a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004432:	e095      	b.n	8004560 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d17d      	bne.n	800453a <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d002      	beq.n	800444a <I2C_MasterReceive_BTF+0xc4>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b10      	cmp	r3, #16
 8004448:	d108      	bne.n	800445c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	e016      	b.n	800448a <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b04      	cmp	r3, #4
 8004460:	d002      	beq.n	8004468 <I2C_MasterReceive_BTF+0xe2>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d108      	bne.n	800447a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	e007      	b.n	800448a <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004488:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80044e4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b40      	cmp	r3, #64	@ 0x40
 80044f8:	d10a      	bne.n	8004510 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7fc fe03 	bl	8001114 <HAL_I2C_MemRxCpltCallback>
}
 800450e:	e027      	b.n	8004560 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b08      	cmp	r3, #8
 800451c:	d002      	beq.n	8004524 <I2C_MasterReceive_BTF+0x19e>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b20      	cmp	r3, #32
 8004522:	d103      	bne.n	800452c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	@ 0x30
 800452a:	e002      	b.n	8004532 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2212      	movs	r2, #18
 8004530:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff fc69 	bl	8003e0a <HAL_I2C_MasterRxCpltCallback>
}
 8004538:	e012      	b.n	8004560 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b40      	cmp	r3, #64	@ 0x40
 800457a:	d117      	bne.n	80045ac <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004580:	2b00      	cmp	r3, #0
 8004582:	d109      	bne.n	8004598 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004588:	b2db      	uxtb	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004594:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004596:	e067      	b.n	8004668 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	611a      	str	r2, [r3, #16]
}
 80045aa:	e05d      	b.n	8004668 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045b4:	d133      	bne.n	800461e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b21      	cmp	r3, #33	@ 0x21
 80045c0:	d109      	bne.n	80045d6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045d2:	611a      	str	r2, [r3, #16]
 80045d4:	e008      	b.n	80045e8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <I2C_Master_SB+0x92>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d108      	bne.n	800460c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d032      	beq.n	8004668 <I2C_Master_SB+0x100>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02d      	beq.n	8004668 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800461a:	605a      	str	r2, [r3, #4]
}
 800461c:	e024      	b.n	8004668 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10e      	bne.n	8004644 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462a:	b29b      	uxth	r3, r3
 800462c:	11db      	asrs	r3, r3, #7
 800462e:	b2db      	uxtb	r3, r3
 8004630:	f003 0306 	and.w	r3, r3, #6
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f063 030f 	orn	r3, r3, #15
 800463a:	b2da      	uxtb	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	611a      	str	r2, [r3, #16]
}
 8004642:	e011      	b.n	8004668 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10d      	bne.n	8004668 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004650:	b29b      	uxth	r3, r3
 8004652:	11db      	asrs	r3, r3, #7
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f003 0306 	and.w	r3, r3, #6
 800465a:	b2db      	uxtb	r3, r3
 800465c:	f063 030e 	orn	r3, r3, #14
 8004660:	b2da      	uxtb	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	611a      	str	r2, [r3, #16]
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr

08004672 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467e:	b2da      	uxtb	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800468a:	2b00      	cmp	r3, #0
 800468c:	d004      	beq.n	8004698 <I2C_Master_ADD10+0x26>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004694:	2b00      	cmp	r3, #0
 8004696:	d108      	bne.n	80046aa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00c      	beq.n	80046ba <I2C_Master_ADD10+0x48>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046b8:	605a      	str	r2, [r3, #4]
  }
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b091      	sub	sp, #68	@ 0x44
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046da:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e0:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b22      	cmp	r3, #34	@ 0x22
 80046ec:	f040 8174 	bne.w	80049d8 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10f      	bne.n	8004718 <I2C_Master_ADDR+0x54>
 80046f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80046fc:	2b40      	cmp	r3, #64	@ 0x40
 80046fe:	d10b      	bne.n	8004718 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004700:	2300      	movs	r3, #0
 8004702:	633b      	str	r3, [r7, #48]	@ 0x30
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	633b      	str	r3, [r7, #48]	@ 0x30
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	633b      	str	r3, [r7, #48]	@ 0x30
 8004714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004716:	e16b      	b.n	80049f0 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800471c:	2b00      	cmp	r3, #0
 800471e:	d11d      	bne.n	800475c <I2C_Master_ADDR+0x98>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004728:	d118      	bne.n	800475c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472a:	2300      	movs	r3, #0
 800472c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800473e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800474e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	651a      	str	r2, [r3, #80]	@ 0x50
 800475a:	e149      	b.n	80049f0 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d113      	bne.n	800478e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004766:	2300      	movs	r3, #0
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800477a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	e120      	b.n	80049d0 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	f040 808a 	bne.w	80048ae <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800479a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047a0:	d137      	bne.n	8004812 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047b0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047c0:	d113      	bne.n	80047ea <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047d0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d2:	2300      	movs	r3, #0
 80047d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	e0f2      	b.n	80049d0 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ea:	2300      	movs	r3, #0
 80047ec:	623b      	str	r3, [r7, #32]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	623b      	str	r3, [r7, #32]
 80047fe:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e0de      	b.n	80049d0 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004814:	2b08      	cmp	r3, #8
 8004816:	d02e      	beq.n	8004876 <I2C_Master_ADDR+0x1b2>
 8004818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481a:	2b20      	cmp	r3, #32
 800481c:	d02b      	beq.n	8004876 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800481e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004820:	2b12      	cmp	r3, #18
 8004822:	d102      	bne.n	800482a <I2C_Master_ADDR+0x166>
 8004824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004826:	2b01      	cmp	r3, #1
 8004828:	d125      	bne.n	8004876 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800482a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482c:	2b04      	cmp	r3, #4
 800482e:	d00e      	beq.n	800484e <I2C_Master_ADDR+0x18a>
 8004830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004832:	2b02      	cmp	r3, #2
 8004834:	d00b      	beq.n	800484e <I2C_Master_ADDR+0x18a>
 8004836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004838:	2b10      	cmp	r3, #16
 800483a:	d008      	beq.n	800484e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e007      	b.n	800485e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800485c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	e0ac      	b.n	80049d0 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004884:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e090      	b.n	80049d0 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d158      	bne.n	800496a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d021      	beq.n	8004902 <I2C_Master_ADDR+0x23e>
 80048be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d01e      	beq.n	8004902 <I2C_Master_ADDR+0x23e>
 80048c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	d01b      	beq.n	8004902 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048d8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e012      	b.n	8004928 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004910:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004912:	2300      	movs	r3, #0
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004932:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004936:	d14b      	bne.n	80049d0 <I2C_Master_ADDR+0x30c>
 8004938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800493e:	d00b      	beq.n	8004958 <I2C_Master_ADDR+0x294>
 8004940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004942:	2b01      	cmp	r3, #1
 8004944:	d008      	beq.n	8004958 <I2C_Master_ADDR+0x294>
 8004946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004948:	2b08      	cmp	r3, #8
 800494a:	d005      	beq.n	8004958 <I2C_Master_ADDR+0x294>
 800494c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800494e:	2b10      	cmp	r3, #16
 8004950:	d002      	beq.n	8004958 <I2C_Master_ADDR+0x294>
 8004952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004954:	2b20      	cmp	r3, #32
 8004956:	d13b      	bne.n	80049d0 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004966:	605a      	str	r2, [r3, #4]
 8004968:	e032      	b.n	80049d0 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004978:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004988:	d117      	bne.n	80049ba <I2C_Master_ADDR+0x2f6>
 800498a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800498c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004990:	d00b      	beq.n	80049aa <I2C_Master_ADDR+0x2e6>
 8004992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004994:	2b01      	cmp	r3, #1
 8004996:	d008      	beq.n	80049aa <I2C_Master_ADDR+0x2e6>
 8004998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499a:	2b08      	cmp	r3, #8
 800499c:	d005      	beq.n	80049aa <I2C_Master_ADDR+0x2e6>
 800499e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	d002      	beq.n	80049aa <I2C_Master_ADDR+0x2e6>
 80049a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d107      	bne.n	80049ba <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80049d6:	e00b      	b.n	80049f0 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d8:	2300      	movs	r3, #0
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	60bb      	str	r3, [r7, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	60bb      	str	r3, [r7, #8]
 80049ec:	68bb      	ldr	r3, [r7, #8]
}
 80049ee:	e7ff      	b.n	80049f0 <I2C_Master_ADDR+0x32c>
 80049f0:	bf00      	nop
 80049f2:	3744      	adds	r7, #68	@ 0x44
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr

080049fa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a08:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d02b      	beq.n	8004a6c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	781a      	ldrb	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d114      	bne.n	8004a6c <I2C_SlaveTransmit_TXE+0x72>
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	2b29      	cmp	r3, #41	@ 0x29
 8004a46:	d111      	bne.n	8004a6c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a56:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2221      	movs	r2, #33	@ 0x21
 8004a5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2228      	movs	r2, #40	@ 0x28
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff f9d8 	bl	8003e1c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d011      	beq.n	8004aaa <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	781a      	ldrb	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ac2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d02c      	beq.n	8004b28 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d114      	bne.n	8004b28 <I2C_SlaveReceive_RXNE+0x74>
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b02:	d111      	bne.n	8004b28 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b12:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2222      	movs	r2, #34	@ 0x22
 8004b18:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2228      	movs	r2, #40	@ 0x28
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff f983 	bl	8003e2e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d012      	beq.n	8004b68 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr

08004b72 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b084      	sub	sp, #16
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b8c:	2b28      	cmp	r3, #40	@ 0x28
 8004b8e:	d125      	bne.n	8004bdc <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b9e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004baa:	2301      	movs	r3, #1
 8004bac:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d103      	bne.n	8004bc0 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	81bb      	strh	r3, [r7, #12]
 8004bbe:	e002      	b.n	8004bc6 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004bce:	89ba      	ldrh	r2, [r7, #12]
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff f933 	bl	8003e40 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004bda:	e00e      	b.n	8004bfa <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	60bb      	str	r3, [r7, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	60bb      	str	r3, [r7, #8]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c12:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c22:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004c24:	2300      	movs	r3, #0
 8004c26:	60bb      	str	r3, [r7, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	60bb      	str	r3, [r7, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c50:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c60:	d172      	bne.n	8004d48 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b22      	cmp	r3, #34	@ 0x22
 8004c66:	d002      	beq.n	8004c6e <I2C_Slave_STOPF+0x6a>
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c6c:	d135      	bne.n	8004cda <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	f043 0204 	orr.w	r2, r3, #4
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ca0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fd fd52 	bl	8002750 <HAL_DMA_GetState>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d049      	beq.n	8004d46 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb6:	4a69      	ldr	r2, [pc, #420]	@ (8004e5c <I2C_Slave_STOPF+0x258>)
 8004cb8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fd fbc8 	bl	8002454 <HAL_DMA_Abort_IT>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d03d      	beq.n	8004d46 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cd8:	e035      	b.n	8004d46 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf6:	f043 0204 	orr.w	r2, r3, #4
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fd fd1c 	bl	8002750 <HAL_DMA_GetState>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d014      	beq.n	8004d48 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d22:	4a4e      	ldr	r2, [pc, #312]	@ (8004e5c <I2C_Slave_STOPF+0x258>)
 8004d24:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fd fb92 	bl	8002454 <HAL_DMA_Abort_IT>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d40:	4610      	mov	r0, r2
 8004d42:	4798      	blx	r3
 8004d44:	e000      	b.n	8004d48 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d46:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d03e      	beq.n	8004dd0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d112      	bne.n	8004d86 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d90:	2b40      	cmp	r3, #64	@ 0x40
 8004d92:	d112      	bne.n	8004dba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	f043 0204 	orr.w	r2, r3, #4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f8b7 	bl	8004f4c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004dde:	e039      	b.n	8004e54 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004de4:	d109      	bne.n	8004dfa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2228      	movs	r2, #40	@ 0x28
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff f81a 	bl	8003e2e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b28      	cmp	r3, #40	@ 0x28
 8004e04:	d111      	bne.n	8004e2a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a15      	ldr	r2, [pc, #84]	@ (8004e60 <I2C_Slave_STOPF+0x25c>)
 8004e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff f819 	bl	8003e5a <HAL_I2C_ListenCpltCallback>
}
 8004e28:	e014      	b.n	8004e54 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2e:	2b22      	cmp	r3, #34	@ 0x22
 8004e30:	d002      	beq.n	8004e38 <I2C_Slave_STOPF+0x234>
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b22      	cmp	r3, #34	@ 0x22
 8004e36:	d10d      	bne.n	8004e54 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fe ffed 	bl	8003e2e <HAL_I2C_SlaveRxCpltCallback>
}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	080054ad 	.word	0x080054ad
 8004e60:	ffff0000 	.word	0xffff0000

08004e64 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e72:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d002      	beq.n	8004e86 <I2C_Slave_AF+0x22>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d129      	bne.n	8004eda <I2C_Slave_AF+0x76>
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b28      	cmp	r3, #40	@ 0x28
 8004e8a:	d126      	bne.n	8004eda <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a2e      	ldr	r2, [pc, #184]	@ (8004f48 <I2C_Slave_AF+0xe4>)
 8004e90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ea0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004eaa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eba:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fe ffc1 	bl	8003e5a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004ed8:	e031      	b.n	8004f3e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	2b21      	cmp	r3, #33	@ 0x21
 8004ede:	d129      	bne.n	8004f34 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a19      	ldr	r2, [pc, #100]	@ (8004f48 <I2C_Slave_AF+0xe4>)
 8004ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2221      	movs	r2, #33	@ 0x21
 8004eea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f0a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f14:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f24:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fe f803 	bl	8002f32 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7fe ff75 	bl	8003e1c <HAL_I2C_SlaveTxCpltCallback>
}
 8004f32:	e004      	b.n	8004f3e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f3c:	615a      	str	r2, [r3, #20]
}
 8004f3e:	bf00      	nop
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	ffff0000 	.word	0xffff0000

08004f4c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f64:	7bbb      	ldrb	r3, [r7, #14]
 8004f66:	2b10      	cmp	r3, #16
 8004f68:	d002      	beq.n	8004f70 <I2C_ITError+0x24>
 8004f6a:	7bbb      	ldrb	r3, [r7, #14]
 8004f6c:	2b40      	cmp	r3, #64	@ 0x40
 8004f6e:	d10a      	bne.n	8004f86 <I2C_ITError+0x3a>
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	2b22      	cmp	r3, #34	@ 0x22
 8004f74:	d107      	bne.n	8004f86 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f84:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f8c:	2b28      	cmp	r3, #40	@ 0x28
 8004f8e:	d107      	bne.n	8004fa0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2228      	movs	r2, #40	@ 0x28
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f9e:	e015      	b.n	8004fcc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fae:	d00a      	beq.n	8004fc6 <I2C_ITError+0x7a>
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b60      	cmp	r3, #96	@ 0x60
 8004fb4:	d007      	beq.n	8004fc6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fda:	d162      	bne.n	80050a2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ff0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d020      	beq.n	800503c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ffe:	4a6a      	ldr	r2, [pc, #424]	@ (80051a8 <I2C_ITError+0x25c>)
 8005000:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005006:	4618      	mov	r0, r3
 8005008:	f7fd fa24 	bl	8002454 <HAL_DMA_Abort_IT>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 8089 	beq.w	8005126 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005036:	4610      	mov	r0, r2
 8005038:	4798      	blx	r3
 800503a:	e074      	b.n	8005126 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	4a59      	ldr	r2, [pc, #356]	@ (80051a8 <I2C_ITError+0x25c>)
 8005042:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	4618      	mov	r0, r3
 800504a:	f7fd fa03 	bl	8002454 <HAL_DMA_Abort_IT>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d068      	beq.n	8005126 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800505e:	2b40      	cmp	r3, #64	@ 0x40
 8005060:	d10b      	bne.n	800507a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691a      	ldr	r2, [r3, #16]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0201 	bic.w	r2, r2, #1
 8005088:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800509c:	4610      	mov	r0, r2
 800509e:	4798      	blx	r3
 80050a0:	e041      	b.n	8005126 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b60      	cmp	r3, #96	@ 0x60
 80050ac:	d125      	bne.n	80050fa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c6:	2b40      	cmp	r3, #64	@ 0x40
 80050c8:	d10b      	bne.n	80050e2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0201 	bic.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fe fecc 	bl	8003e90 <HAL_I2C_AbortCpltCallback>
 80050f8:	e015      	b.n	8005126 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005104:	2b40      	cmp	r3, #64	@ 0x40
 8005106:	d10b      	bne.n	8005120 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7fe feac 	bl	8003e7e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10e      	bne.n	8005154 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800513c:	2b00      	cmp	r3, #0
 800513e:	d109      	bne.n	8005154 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005146:	2b00      	cmp	r3, #0
 8005148:	d104      	bne.n	8005154 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005162:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800516a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b04      	cmp	r3, #4
 8005176:	d113      	bne.n	80051a0 <I2C_ITError+0x254>
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	2b28      	cmp	r3, #40	@ 0x28
 800517c:	d110      	bne.n	80051a0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a0a      	ldr	r2, [pc, #40]	@ (80051ac <I2C_ITError+0x260>)
 8005182:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fe fe5d 	bl	8003e5a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	080054ad 	.word	0x080054ad
 80051ac:	ffff0000 	.word	0xffff0000

080051b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	4608      	mov	r0, r1
 80051ba:	4611      	mov	r1, r2
 80051bc:	461a      	mov	r2, r3
 80051be:	4603      	mov	r3, r0
 80051c0:	817b      	strh	r3, [r7, #10]
 80051c2:	460b      	mov	r3, r1
 80051c4:	813b      	strh	r3, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 fa08 	bl	80055fc <I2C_WaitOnFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005200:	d103      	bne.n	800520a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005208:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e05f      	b.n	80052ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800520e:	897b      	ldrh	r3, [r7, #10]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	461a      	mov	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800521c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	6a3a      	ldr	r2, [r7, #32]
 8005222:	492d      	ldr	r1, [pc, #180]	@ (80052d8 <I2C_RequestMemoryWrite+0x128>)
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 fa63 	bl	80056f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e04c      	b.n	80052ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800524a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800524c:	6a39      	ldr	r1, [r7, #32]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 faee 	bl	8005830 <I2C_WaitOnTXEFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00d      	beq.n	8005276 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	2b04      	cmp	r3, #4
 8005260:	d107      	bne.n	8005272 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005270:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e02b      	b.n	80052ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d105      	bne.n	8005288 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800527c:	893b      	ldrh	r3, [r7, #8]
 800527e:	b2da      	uxtb	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	611a      	str	r2, [r3, #16]
 8005286:	e021      	b.n	80052cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005288:	893b      	ldrh	r3, [r7, #8]
 800528a:	0a1b      	lsrs	r3, r3, #8
 800528c:	b29b      	uxth	r3, r3
 800528e:	b2da      	uxtb	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005298:	6a39      	ldr	r1, [r7, #32]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 fac8 	bl	8005830 <I2C_WaitOnTXEFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00d      	beq.n	80052c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d107      	bne.n	80052be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e005      	b.n	80052ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052c2:	893b      	ldrh	r3, [r7, #8]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	00010002 	.word	0x00010002

080052dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	4608      	mov	r0, r1
 80052e6:	4611      	mov	r1, r2
 80052e8:	461a      	mov	r2, r3
 80052ea:	4603      	mov	r3, r0
 80052ec:	817b      	strh	r3, [r7, #10]
 80052ee:	460b      	mov	r3, r1
 80052f0:	813b      	strh	r3, [r7, #8]
 80052f2:	4613      	mov	r3, r2
 80052f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005304:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005314:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	2200      	movs	r2, #0
 800531e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f96a 	bl	80055fc <I2C_WaitOnFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00d      	beq.n	800534a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800533c:	d103      	bne.n	8005346 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005344:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e0aa      	b.n	80054a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800534a:	897b      	ldrh	r3, [r7, #10]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	461a      	mov	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005358:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	6a3a      	ldr	r2, [r7, #32]
 800535e:	4952      	ldr	r1, [pc, #328]	@ (80054a8 <I2C_RequestMemoryRead+0x1cc>)
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 f9c5 	bl	80056f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e097      	b.n	80054a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005388:	6a39      	ldr	r1, [r7, #32]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fa50 	bl	8005830 <I2C_WaitOnTXEFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00d      	beq.n	80053b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539a:	2b04      	cmp	r3, #4
 800539c:	d107      	bne.n	80053ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e076      	b.n	80054a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d105      	bne.n	80053c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053b8:	893b      	ldrh	r3, [r7, #8]
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	611a      	str	r2, [r3, #16]
 80053c2:	e021      	b.n	8005408 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053c4:	893b      	ldrh	r3, [r7, #8]
 80053c6:	0a1b      	lsrs	r3, r3, #8
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d4:	6a39      	ldr	r1, [r7, #32]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 fa2a 	bl	8005830 <I2C_WaitOnTXEFlagUntilTimeout>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00d      	beq.n	80053fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d107      	bne.n	80053fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e050      	b.n	80054a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053fe:	893b      	ldrh	r3, [r7, #8]
 8005400:	b2da      	uxtb	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800540a:	6a39      	ldr	r1, [r7, #32]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fa0f 	bl	8005830 <I2C_WaitOnTXEFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00d      	beq.n	8005434 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541c:	2b04      	cmp	r3, #4
 800541e:	d107      	bne.n	8005430 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800542e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e035      	b.n	80054a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005442:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	2200      	movs	r2, #0
 800544c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f8d3 	bl	80055fc <I2C_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00d      	beq.n	8005478 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800546a:	d103      	bne.n	8005474 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005472:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e013      	b.n	80054a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005478:	897b      	ldrh	r3, [r7, #10]
 800547a:	b2db      	uxtb	r3, r3
 800547c:	f043 0301 	orr.w	r3, r3, #1
 8005480:	b2da      	uxtb	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	6a3a      	ldr	r2, [r7, #32]
 800548c:	4906      	ldr	r1, [pc, #24]	@ (80054a8 <I2C_RequestMemoryRead+0x1cc>)
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 f92e 	bl	80056f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	00010002 	.word	0x00010002

080054ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80054c6:	4b4b      	ldr	r3, [pc, #300]	@ (80055f4 <I2C_DMAAbort+0x148>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	08db      	lsrs	r3, r3, #3
 80054cc:	4a4a      	ldr	r2, [pc, #296]	@ (80055f8 <I2C_DMAAbort+0x14c>)
 80054ce:	fba2 2303 	umull	r2, r3, r2, r3
 80054d2:	0a1a      	lsrs	r2, r3, #8
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	00da      	lsls	r2, r3, #3
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ea:	f043 0220 	orr.w	r2, r3, #32
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80054f2:	e00a      	b.n	800550a <I2C_DMAAbort+0x5e>
    }
    count--;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005508:	d0ea      	beq.n	80054e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005516:	2200      	movs	r2, #0
 8005518:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005526:	2200      	movs	r2, #0
 8005528:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005538:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2200      	movs	r2, #0
 800553e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800554c:	2200      	movs	r2, #0
 800554e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555c:	2200      	movs	r2, #0
 800555e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0201 	bic.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b60      	cmp	r3, #96	@ 0x60
 800557a:	d10e      	bne.n	800559a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2200      	movs	r2, #0
 8005590:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005592:	6978      	ldr	r0, [r7, #20]
 8005594:	f7fe fc7c 	bl	8003e90 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005598:	e027      	b.n	80055ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800559a:	7cfb      	ldrb	r3, [r7, #19]
 800559c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80055a0:	2b28      	cmp	r3, #40	@ 0x28
 80055a2:	d117      	bne.n	80055d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2200      	movs	r2, #0
 80055c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2228      	movs	r2, #40	@ 0x28
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80055d2:	e007      	b.n	80055e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80055e4:	6978      	ldr	r0, [r7, #20]
 80055e6:	f7fe fc4a 	bl	8003e7e <HAL_I2C_ErrorCallback>
}
 80055ea:	bf00      	nop
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000008 	.word	0x20000008
 80055f8:	14f8b589 	.word	0x14f8b589

080055fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	4613      	mov	r3, r2
 800560a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800560c:	e048      	b.n	80056a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d044      	beq.n	80056a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005616:	f7fc fceb 	bl	8001ff0 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d302      	bcc.n	800562c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d139      	bne.n	80056a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	0c1b      	lsrs	r3, r3, #16
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b01      	cmp	r3, #1
 8005634:	d10d      	bne.n	8005652 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	43da      	mvns	r2, r3
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4013      	ands	r3, r2
 8005642:	b29b      	uxth	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	bf0c      	ite	eq
 8005648:	2301      	moveq	r3, #1
 800564a:	2300      	movne	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	461a      	mov	r2, r3
 8005650:	e00c      	b.n	800566c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	43da      	mvns	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	4013      	ands	r3, r2
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf0c      	ite	eq
 8005664:	2301      	moveq	r3, #1
 8005666:	2300      	movne	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	461a      	mov	r2, r3
 800566c:	79fb      	ldrb	r3, [r7, #7]
 800566e:	429a      	cmp	r2, r3
 8005670:	d116      	bne.n	80056a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568c:	f043 0220 	orr.w	r2, r3, #32
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e023      	b.n	80056e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	0c1b      	lsrs	r3, r3, #16
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d10d      	bne.n	80056c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	43da      	mvns	r2, r3
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	4013      	ands	r3, r2
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bf0c      	ite	eq
 80056bc:	2301      	moveq	r3, #1
 80056be:	2300      	movne	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	e00c      	b.n	80056e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	43da      	mvns	r2, r3
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	4013      	ands	r3, r2
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	bf0c      	ite	eq
 80056d8:	2301      	moveq	r3, #1
 80056da:	2300      	movne	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d093      	beq.n	800560e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056fe:	e071      	b.n	80057e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800570a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800570e:	d123      	bne.n	8005758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800571e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005728:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005744:	f043 0204 	orr.w	r2, r3, #4
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e067      	b.n	8005828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d041      	beq.n	80057e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005760:	f7fc fc46 	bl	8001ff0 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	429a      	cmp	r2, r3
 800576e:	d302      	bcc.n	8005776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d136      	bne.n	80057e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	0c1b      	lsrs	r3, r3, #16
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d10c      	bne.n	800579a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	43da      	mvns	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4013      	ands	r3, r2
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	bf14      	ite	ne
 8005792:	2301      	movne	r3, #1
 8005794:	2300      	moveq	r3, #0
 8005796:	b2db      	uxtb	r3, r3
 8005798:	e00b      	b.n	80057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	43da      	mvns	r2, r3
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4013      	ands	r3, r2
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	bf14      	ite	ne
 80057ac:	2301      	movne	r3, #1
 80057ae:	2300      	moveq	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d016      	beq.n	80057e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	f043 0220 	orr.w	r2, r3, #32
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e021      	b.n	8005828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	0c1b      	lsrs	r3, r3, #16
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d10c      	bne.n	8005808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	43da      	mvns	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	4013      	ands	r3, r2
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bf14      	ite	ne
 8005800:	2301      	movne	r3, #1
 8005802:	2300      	moveq	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	e00b      	b.n	8005820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	43da      	mvns	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4013      	ands	r3, r2
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	bf14      	ite	ne
 800581a:	2301      	movne	r3, #1
 800581c:	2300      	moveq	r3, #0
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	f47f af6d 	bne.w	8005700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800583c:	e034      	b.n	80058a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 f915 	bl	8005a6e <I2C_IsAcknowledgeFailed>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e034      	b.n	80058b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d028      	beq.n	80058a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005856:	f7fc fbcb 	bl	8001ff0 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	429a      	cmp	r2, r3
 8005864:	d302      	bcc.n	800586c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d11d      	bne.n	80058a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005876:	2b80      	cmp	r3, #128	@ 0x80
 8005878:	d016      	beq.n	80058a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005894:	f043 0220 	orr.w	r2, r3, #32
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e007      	b.n	80058b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b2:	2b80      	cmp	r3, #128	@ 0x80
 80058b4:	d1c3      	bne.n	800583e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058cc:	e034      	b.n	8005938 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f8cd 	bl	8005a6e <I2C_IsAcknowledgeFailed>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e034      	b.n	8005948 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e4:	d028      	beq.n	8005938 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e6:	f7fc fb83 	bl	8001ff0 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d302      	bcc.n	80058fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d11d      	bne.n	8005938 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b04      	cmp	r3, #4
 8005908:	d016      	beq.n	8005938 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005924:	f043 0220 	orr.w	r2, r3, #32
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e007      	b.n	8005948 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b04      	cmp	r3, #4
 8005944:	d1c3      	bne.n	80058ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800595c:	4b13      	ldr	r3, [pc, #76]	@ (80059ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	08db      	lsrs	r3, r3, #3
 8005962:	4a13      	ldr	r2, [pc, #76]	@ (80059b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005964:	fba2 2303 	umull	r2, r3, r2, r3
 8005968:	0a1a      	lsrs	r2, r3, #8
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3b01      	subs	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d107      	bne.n	800598e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005982:	f043 0220 	orr.w	r2, r3, #32
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e008      	b.n	80059a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800599c:	d0e9      	beq.n	8005972 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20000008 	.word	0x20000008
 80059b0:	14f8b589 	.word	0x14f8b589

080059b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059c0:	e049      	b.n	8005a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d119      	bne.n	8005a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0210 	mvn.w	r2, #16
 80059d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e030      	b.n	8005a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a04:	f7fc faf4 	bl	8001ff0 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d302      	bcc.n	8005a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d11d      	bne.n	8005a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b40      	cmp	r3, #64	@ 0x40
 8005a26:	d016      	beq.n	8005a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a42:	f043 0220 	orr.w	r2, r3, #32
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e007      	b.n	8005a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a60:	2b40      	cmp	r3, #64	@ 0x40
 8005a62:	d1ae      	bne.n	80059c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a84:	d11b      	bne.n	8005abe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aaa:	f043 0204 	orr.w	r2, r3, #4
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005ada:	d103      	bne.n	8005ae4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ae2:	e007      	b.n	8005af4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005aec:	d102      	bne.n	8005af4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2208      	movs	r2, #8
 8005af2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr
	...

08005b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e272      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 8087 	beq.w	8005c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b20:	4b92      	ldr	r3, [pc, #584]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f003 030c 	and.w	r3, r3, #12
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d00c      	beq.n	8005b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005b2c:	4b8f      	ldr	r3, [pc, #572]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f003 030c 	and.w	r3, r3, #12
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d112      	bne.n	8005b5e <HAL_RCC_OscConfig+0x5e>
 8005b38:	4b8c      	ldr	r3, [pc, #560]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b44:	d10b      	bne.n	8005b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b46:	4b89      	ldr	r3, [pc, #548]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d06c      	beq.n	8005c2c <HAL_RCC_OscConfig+0x12c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d168      	bne.n	8005c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e24c      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b66:	d106      	bne.n	8005b76 <HAL_RCC_OscConfig+0x76>
 8005b68:	4b80      	ldr	r3, [pc, #512]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a7f      	ldr	r2, [pc, #508]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	e02e      	b.n	8005bd4 <HAL_RCC_OscConfig+0xd4>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10c      	bne.n	8005b98 <HAL_RCC_OscConfig+0x98>
 8005b7e:	4b7b      	ldr	r3, [pc, #492]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a7a      	ldr	r2, [pc, #488]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	4b78      	ldr	r3, [pc, #480]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a77      	ldr	r2, [pc, #476]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005b90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	e01d      	b.n	8005bd4 <HAL_RCC_OscConfig+0xd4>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ba0:	d10c      	bne.n	8005bbc <HAL_RCC_OscConfig+0xbc>
 8005ba2:	4b72      	ldr	r3, [pc, #456]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a71      	ldr	r2, [pc, #452]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	4b6f      	ldr	r3, [pc, #444]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a6e      	ldr	r2, [pc, #440]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	e00b      	b.n	8005bd4 <HAL_RCC_OscConfig+0xd4>
 8005bbc:	4b6b      	ldr	r3, [pc, #428]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a6a      	ldr	r2, [pc, #424]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	4b68      	ldr	r3, [pc, #416]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a67      	ldr	r2, [pc, #412]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d013      	beq.n	8005c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bdc:	f7fc fa08 	bl	8001ff0 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005be4:	f7fc fa04 	bl	8001ff0 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b64      	cmp	r3, #100	@ 0x64
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e200      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf6:	4b5d      	ldr	r3, [pc, #372]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0f0      	beq.n	8005be4 <HAL_RCC_OscConfig+0xe4>
 8005c02:	e014      	b.n	8005c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c04:	f7fc f9f4 	bl	8001ff0 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c0c:	f7fc f9f0 	bl	8001ff0 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b64      	cmp	r3, #100	@ 0x64
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e1ec      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c1e:	4b53      	ldr	r3, [pc, #332]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f0      	bne.n	8005c0c <HAL_RCC_OscConfig+0x10c>
 8005c2a:	e000      	b.n	8005c2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d063      	beq.n	8005d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c3a:	4b4c      	ldr	r3, [pc, #304]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f003 030c 	and.w	r3, r3, #12
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00b      	beq.n	8005c5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005c46:	4b49      	ldr	r3, [pc, #292]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f003 030c 	and.w	r3, r3, #12
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d11c      	bne.n	8005c8c <HAL_RCC_OscConfig+0x18c>
 8005c52:	4b46      	ldr	r3, [pc, #280]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d116      	bne.n	8005c8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c5e:	4b43      	ldr	r3, [pc, #268]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <HAL_RCC_OscConfig+0x176>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d001      	beq.n	8005c76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e1c0      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c76:	4b3d      	ldr	r3, [pc, #244]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	4939      	ldr	r1, [pc, #228]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c8a:	e03a      	b.n	8005d02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d020      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c94:	4b36      	ldr	r3, [pc, #216]	@ (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9a:	f7fc f9a9 	bl	8001ff0 <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca2:	f7fc f9a5 	bl	8001ff0 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e1a1      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f0      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	4927      	ldr	r1, [pc, #156]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	600b      	str	r3, [r1, #0]
 8005cd4:	e015      	b.n	8005d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cd6:	4b26      	ldr	r3, [pc, #152]	@ (8005d70 <HAL_RCC_OscConfig+0x270>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cdc:	f7fc f988 	bl	8001ff0 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce4:	f7fc f984 	bl	8001ff0 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e180      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1f0      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d03a      	beq.n	8005d84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d019      	beq.n	8005d4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d16:	4b17      	ldr	r3, [pc, #92]	@ (8005d74 <HAL_RCC_OscConfig+0x274>)
 8005d18:	2201      	movs	r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d1c:	f7fc f968 	bl	8001ff0 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d24:	f7fc f964 	bl	8001ff0 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e160      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d36:	4b0d      	ldr	r3, [pc, #52]	@ (8005d6c <HAL_RCC_OscConfig+0x26c>)
 8005d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005d42:	2001      	movs	r0, #1
 8005d44:	f000 fafe 	bl	8006344 <RCC_Delay>
 8005d48:	e01c      	b.n	8005d84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d74 <HAL_RCC_OscConfig+0x274>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d50:	f7fc f94e 	bl	8001ff0 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d56:	e00f      	b.n	8005d78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d58:	f7fc f94a 	bl	8001ff0 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d908      	bls.n	8005d78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e146      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
 8005d6a:	bf00      	nop
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	42420000 	.word	0x42420000
 8005d74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d78:	4b92      	ldr	r3, [pc, #584]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e9      	bne.n	8005d58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 80a6 	beq.w	8005ede <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d92:	2300      	movs	r3, #0
 8005d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d96:	4b8b      	ldr	r3, [pc, #556]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10d      	bne.n	8005dbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005da2:	4b88      	ldr	r3, [pc, #544]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	4a87      	ldr	r2, [pc, #540]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dac:	61d3      	str	r3, [r2, #28]
 8005dae:	4b85      	ldr	r3, [pc, #532]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005db6:	60bb      	str	r3, [r7, #8]
 8005db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dbe:	4b82      	ldr	r3, [pc, #520]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d118      	bne.n	8005dfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dca:	4b7f      	ldr	r3, [pc, #508]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a7e      	ldr	r2, [pc, #504]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c8>)
 8005dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dd6:	f7fc f90b 	bl	8001ff0 <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dde:	f7fc f907 	bl	8001ff0 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b64      	cmp	r3, #100	@ 0x64
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e103      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df0:	4b75      	ldr	r3, [pc, #468]	@ (8005fc8 <HAL_RCC_OscConfig+0x4c8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0f0      	beq.n	8005dde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d106      	bne.n	8005e12 <HAL_RCC_OscConfig+0x312>
 8005e04:	4b6f      	ldr	r3, [pc, #444]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	4a6e      	ldr	r2, [pc, #440]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e0a:	f043 0301 	orr.w	r3, r3, #1
 8005e0e:	6213      	str	r3, [r2, #32]
 8005e10:	e02d      	b.n	8005e6e <HAL_RCC_OscConfig+0x36e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10c      	bne.n	8005e34 <HAL_RCC_OscConfig+0x334>
 8005e1a:	4b6a      	ldr	r3, [pc, #424]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	4a69      	ldr	r2, [pc, #420]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e20:	f023 0301 	bic.w	r3, r3, #1
 8005e24:	6213      	str	r3, [r2, #32]
 8005e26:	4b67      	ldr	r3, [pc, #412]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	4a66      	ldr	r2, [pc, #408]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e2c:	f023 0304 	bic.w	r3, r3, #4
 8005e30:	6213      	str	r3, [r2, #32]
 8005e32:	e01c      	b.n	8005e6e <HAL_RCC_OscConfig+0x36e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	2b05      	cmp	r3, #5
 8005e3a:	d10c      	bne.n	8005e56 <HAL_RCC_OscConfig+0x356>
 8005e3c:	4b61      	ldr	r3, [pc, #388]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	4a60      	ldr	r2, [pc, #384]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e42:	f043 0304 	orr.w	r3, r3, #4
 8005e46:	6213      	str	r3, [r2, #32]
 8005e48:	4b5e      	ldr	r3, [pc, #376]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	4a5d      	ldr	r2, [pc, #372]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	6213      	str	r3, [r2, #32]
 8005e54:	e00b      	b.n	8005e6e <HAL_RCC_OscConfig+0x36e>
 8005e56:	4b5b      	ldr	r3, [pc, #364]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	4a5a      	ldr	r2, [pc, #360]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	6213      	str	r3, [r2, #32]
 8005e62:	4b58      	ldr	r3, [pc, #352]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	4a57      	ldr	r2, [pc, #348]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e68:	f023 0304 	bic.w	r3, r3, #4
 8005e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d015      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e76:	f7fc f8bb 	bl	8001ff0 <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e7c:	e00a      	b.n	8005e94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e7e:	f7fc f8b7 	bl	8001ff0 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e0b1      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e94:	4b4b      	ldr	r3, [pc, #300]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d0ee      	beq.n	8005e7e <HAL_RCC_OscConfig+0x37e>
 8005ea0:	e014      	b.n	8005ecc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ea2:	f7fc f8a5 	bl	8001ff0 <HAL_GetTick>
 8005ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea8:	e00a      	b.n	8005ec0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eaa:	f7fc f8a1 	bl	8001ff0 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e09b      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ec0:	4b40      	ldr	r3, [pc, #256]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1ee      	bne.n	8005eaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d105      	bne.n	8005ede <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	4a3b      	ldr	r2, [pc, #236]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005ed8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005edc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 8087 	beq.w	8005ff6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ee8:	4b36      	ldr	r3, [pc, #216]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 030c 	and.w	r3, r3, #12
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d061      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d146      	bne.n	8005f8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efc:	4b33      	ldr	r3, [pc, #204]	@ (8005fcc <HAL_RCC_OscConfig+0x4cc>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f02:	f7fc f875 	bl	8001ff0 <HAL_GetTick>
 8005f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f08:	e008      	b.n	8005f1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f0a:	f7fc f871 	bl	8001ff0 <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d901      	bls.n	8005f1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e06d      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f1c:	4b29      	ldr	r3, [pc, #164]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1f0      	bne.n	8005f0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f30:	d108      	bne.n	8005f44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005f32:	4b24      	ldr	r3, [pc, #144]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	4921      	ldr	r1, [pc, #132]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f44:	4b1f      	ldr	r3, [pc, #124]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a19      	ldr	r1, [r3, #32]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f54:	430b      	orrs	r3, r1
 8005f56:	491b      	ldr	r1, [pc, #108]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fcc <HAL_RCC_OscConfig+0x4cc>)
 8005f5e:	2201      	movs	r2, #1
 8005f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f62:	f7fc f845 	bl	8001ff0 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f68:	e008      	b.n	8005f7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f6a:	f7fc f841 	bl	8001ff0 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e03d      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f7c:	4b11      	ldr	r3, [pc, #68]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0f0      	beq.n	8005f6a <HAL_RCC_OscConfig+0x46a>
 8005f88:	e035      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f8a:	4b10      	ldr	r3, [pc, #64]	@ (8005fcc <HAL_RCC_OscConfig+0x4cc>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f90:	f7fc f82e 	bl	8001ff0 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f98:	f7fc f82a 	bl	8001ff0 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e026      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005faa:	4b06      	ldr	r3, [pc, #24]	@ (8005fc4 <HAL_RCC_OscConfig+0x4c4>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <HAL_RCC_OscConfig+0x498>
 8005fb6:	e01e      	b.n	8005ff6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d107      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e019      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	40007000 	.word	0x40007000
 8005fcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006000 <HAL_RCC_OscConfig+0x500>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d106      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d001      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40021000 	.word	0x40021000

08006004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0d0      	b.n	80061ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006018:	4b6a      	ldr	r3, [pc, #424]	@ (80061c4 <HAL_RCC_ClockConfig+0x1c0>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d910      	bls.n	8006048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006026:	4b67      	ldr	r3, [pc, #412]	@ (80061c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f023 0207 	bic.w	r2, r3, #7
 800602e:	4965      	ldr	r1, [pc, #404]	@ (80061c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	4313      	orrs	r3, r2
 8006034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006036:	4b63      	ldr	r3, [pc, #396]	@ (80061c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d001      	beq.n	8006048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e0b8      	b.n	80061ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d020      	beq.n	8006096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006060:	4b59      	ldr	r3, [pc, #356]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	4a58      	ldr	r2, [pc, #352]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006066:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800606a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006078:	4b53      	ldr	r3, [pc, #332]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	4a52      	ldr	r2, [pc, #328]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 800607e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006084:	4b50      	ldr	r3, [pc, #320]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	494d      	ldr	r1, [pc, #308]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006092:	4313      	orrs	r3, r2
 8006094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d040      	beq.n	8006124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d107      	bne.n	80060ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060aa:	4b47      	ldr	r3, [pc, #284]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d115      	bne.n	80060e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e07f      	b.n	80061ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d107      	bne.n	80060d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c2:	4b41      	ldr	r3, [pc, #260]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e073      	b.n	80061ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060d2:	4b3d      	ldr	r3, [pc, #244]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e06b      	b.n	80061ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060e2:	4b39      	ldr	r3, [pc, #228]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f023 0203 	bic.w	r2, r3, #3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	4936      	ldr	r1, [pc, #216]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060f4:	f7fb ff7c 	bl	8001ff0 <HAL_GetTick>
 80060f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060fa:	e00a      	b.n	8006112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060fc:	f7fb ff78 	bl	8001ff0 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800610a:	4293      	cmp	r3, r2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e053      	b.n	80061ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006112:	4b2d      	ldr	r3, [pc, #180]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f003 020c 	and.w	r2, r3, #12
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	429a      	cmp	r2, r3
 8006122:	d1eb      	bne.n	80060fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006124:	4b27      	ldr	r3, [pc, #156]	@ (80061c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	429a      	cmp	r2, r3
 8006130:	d210      	bcs.n	8006154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006132:	4b24      	ldr	r3, [pc, #144]	@ (80061c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f023 0207 	bic.w	r2, r3, #7
 800613a:	4922      	ldr	r1, [pc, #136]	@ (80061c4 <HAL_RCC_ClockConfig+0x1c0>)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	4313      	orrs	r3, r2
 8006140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006142:	4b20      	ldr	r3, [pc, #128]	@ (80061c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	d001      	beq.n	8006154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e032      	b.n	80061ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006160:	4b19      	ldr	r3, [pc, #100]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4916      	ldr	r1, [pc, #88]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 800616e:	4313      	orrs	r3, r2
 8006170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0308 	and.w	r3, r3, #8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800617e:	4b12      	ldr	r3, [pc, #72]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	490e      	ldr	r1, [pc, #56]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 800618e:	4313      	orrs	r3, r2
 8006190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006192:	f000 f821 	bl	80061d8 <HAL_RCC_GetSysClockFreq>
 8006196:	4602      	mov	r2, r0
 8006198:	4b0b      	ldr	r3, [pc, #44]	@ (80061c8 <HAL_RCC_ClockConfig+0x1c4>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	091b      	lsrs	r3, r3, #4
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	490a      	ldr	r1, [pc, #40]	@ (80061cc <HAL_RCC_ClockConfig+0x1c8>)
 80061a4:	5ccb      	ldrb	r3, [r1, r3]
 80061a6:	fa22 f303 	lsr.w	r3, r2, r3
 80061aa:	4a09      	ldr	r2, [pc, #36]	@ (80061d0 <HAL_RCC_ClockConfig+0x1cc>)
 80061ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80061ae:	4b09      	ldr	r3, [pc, #36]	@ (80061d4 <HAL_RCC_ClockConfig+0x1d0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fb fdd8 	bl	8001d68 <HAL_InitTick>

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	40022000 	.word	0x40022000
 80061c8:	40021000 	.word	0x40021000
 80061cc:	0800b164 	.word	0x0800b164
 80061d0:	20000008 	.word	0x20000008
 80061d4:	2000000c 	.word	0x2000000c

080061d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	2300      	movs	r3, #0
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	2300      	movs	r3, #0
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	2300      	movs	r3, #0
 80061ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80061f2:	4b1e      	ldr	r3, [pc, #120]	@ (800626c <HAL_RCC_GetSysClockFreq+0x94>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d002      	beq.n	8006208 <HAL_RCC_GetSysClockFreq+0x30>
 8006202:	2b08      	cmp	r3, #8
 8006204:	d003      	beq.n	800620e <HAL_RCC_GetSysClockFreq+0x36>
 8006206:	e027      	b.n	8006258 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006208:	4b19      	ldr	r3, [pc, #100]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x98>)
 800620a:	613b      	str	r3, [r7, #16]
      break;
 800620c:	e027      	b.n	800625e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	0c9b      	lsrs	r3, r3, #18
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	4a17      	ldr	r2, [pc, #92]	@ (8006274 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006218:	5cd3      	ldrb	r3, [r2, r3]
 800621a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d010      	beq.n	8006248 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006226:	4b11      	ldr	r3, [pc, #68]	@ (800626c <HAL_RCC_GetSysClockFreq+0x94>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	0c5b      	lsrs	r3, r3, #17
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	4a11      	ldr	r2, [pc, #68]	@ (8006278 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006232:	5cd3      	ldrb	r3, [r2, r3]
 8006234:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a0d      	ldr	r2, [pc, #52]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x98>)
 800623a:	fb03 f202 	mul.w	r2, r3, r2
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	fbb2 f3f3 	udiv	r3, r2, r3
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	e004      	b.n	8006252 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a0c      	ldr	r2, [pc, #48]	@ (800627c <HAL_RCC_GetSysClockFreq+0xa4>)
 800624c:	fb02 f303 	mul.w	r3, r2, r3
 8006250:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	613b      	str	r3, [r7, #16]
      break;
 8006256:	e002      	b.n	800625e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006258:	4b05      	ldr	r3, [pc, #20]	@ (8006270 <HAL_RCC_GetSysClockFreq+0x98>)
 800625a:	613b      	str	r3, [r7, #16]
      break;
 800625c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800625e:	693b      	ldr	r3, [r7, #16]
}
 8006260:	4618      	mov	r0, r3
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40021000 	.word	0x40021000
 8006270:	007a1200 	.word	0x007a1200
 8006274:	0800b17c 	.word	0x0800b17c
 8006278:	0800b18c 	.word	0x0800b18c
 800627c:	003d0900 	.word	0x003d0900

08006280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006284:	4b02      	ldr	r3, [pc, #8]	@ (8006290 <HAL_RCC_GetHCLKFreq+0x10>)
 8006286:	681b      	ldr	r3, [r3, #0]
}
 8006288:	4618      	mov	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr
 8006290:	20000008 	.word	0x20000008

08006294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006298:	f7ff fff2 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 800629c:	4602      	mov	r2, r0
 800629e:	4b05      	ldr	r3, [pc, #20]	@ (80062b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	0a1b      	lsrs	r3, r3, #8
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	4903      	ldr	r1, [pc, #12]	@ (80062b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062aa:	5ccb      	ldrb	r3, [r1, r3]
 80062ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	40021000 	.word	0x40021000
 80062b8:	0800b174 	.word	0x0800b174

080062bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062c0:	f7ff ffde 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 80062c4:	4602      	mov	r2, r0
 80062c6:	4b05      	ldr	r3, [pc, #20]	@ (80062dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	0adb      	lsrs	r3, r3, #11
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	4903      	ldr	r1, [pc, #12]	@ (80062e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062d2:	5ccb      	ldrb	r3, [r1, r3]
 80062d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062d8:	4618      	mov	r0, r3
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40021000 	.word	0x40021000
 80062e0:	0800b174 	.word	0x0800b174

080062e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	220f      	movs	r2, #15
 80062f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062f4:	4b11      	ldr	r3, [pc, #68]	@ (800633c <HAL_RCC_GetClockConfig+0x58>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f003 0203 	and.w	r2, r3, #3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006300:	4b0e      	ldr	r3, [pc, #56]	@ (800633c <HAL_RCC_GetClockConfig+0x58>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800630c:	4b0b      	ldr	r3, [pc, #44]	@ (800633c <HAL_RCC_GetClockConfig+0x58>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006318:	4b08      	ldr	r3, [pc, #32]	@ (800633c <HAL_RCC_GetClockConfig+0x58>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	08db      	lsrs	r3, r3, #3
 800631e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006326:	4b06      	ldr	r3, [pc, #24]	@ (8006340 <HAL_RCC_GetClockConfig+0x5c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0207 	and.w	r2, r3, #7
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	bc80      	pop	{r7}
 800633a:	4770      	bx	lr
 800633c:	40021000 	.word	0x40021000
 8006340:	40022000 	.word	0x40022000

08006344 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800634c:	4b0a      	ldr	r3, [pc, #40]	@ (8006378 <RCC_Delay+0x34>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a0a      	ldr	r2, [pc, #40]	@ (800637c <RCC_Delay+0x38>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	0a5b      	lsrs	r3, r3, #9
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	fb02 f303 	mul.w	r3, r2, r3
 800635e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006360:	bf00      	nop
  }
  while (Delay --);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1e5a      	subs	r2, r3, #1
 8006366:	60fa      	str	r2, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f9      	bne.n	8006360 <RCC_Delay+0x1c>
}
 800636c:	bf00      	nop
 800636e:	bf00      	nop
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr
 8006378:	20000008 	.word	0x20000008
 800637c:	10624dd3 	.word	0x10624dd3

08006380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e041      	b.n	8006416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f839 	bl	800641e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4619      	mov	r1, r3
 80063be:	4610      	mov	r0, r2
 80063c0:	f000 fc48 	bl	8006c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	bc80      	pop	{r7}
 800642e:	4770      	bx	lr

08006430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b01      	cmp	r3, #1
 8006442:	d001      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e03a      	b.n	80064be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a18      	ldr	r2, [pc, #96]	@ (80064c8 <HAL_TIM_Base_Start_IT+0x98>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00e      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x58>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006472:	d009      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x58>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a14      	ldr	r2, [pc, #80]	@ (80064cc <HAL_TIM_Base_Start_IT+0x9c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d004      	beq.n	8006488 <HAL_TIM_Base_Start_IT+0x58>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a13      	ldr	r2, [pc, #76]	@ (80064d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d111      	bne.n	80064ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b06      	cmp	r3, #6
 8006498:	d010      	beq.n	80064bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0201 	orr.w	r2, r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064aa:	e007      	b.n	80064bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0201 	orr.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr
 80064c8:	40012c00 	.word	0x40012c00
 80064cc:	40000400 	.word	0x40000400
 80064d0:	40000800 	.word	0x40000800

080064d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e041      	b.n	800656a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fb fb98 	bl	8001c30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3304      	adds	r3, #4
 8006510:	4619      	mov	r1, r3
 8006512:	4610      	mov	r0, r2
 8006514:	f000 fb9e 	bl	8006c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d109      	bne.n	800659c <HAL_TIM_PWM_Start_IT+0x28>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b01      	cmp	r3, #1
 8006592:	bf14      	ite	ne
 8006594:	2301      	movne	r3, #1
 8006596:	2300      	moveq	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	e022      	b.n	80065e2 <HAL_TIM_PWM_Start_IT+0x6e>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d109      	bne.n	80065b6 <HAL_TIM_PWM_Start_IT+0x42>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	bf14      	ite	ne
 80065ae:	2301      	movne	r3, #1
 80065b0:	2300      	moveq	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	e015      	b.n	80065e2 <HAL_TIM_PWM_Start_IT+0x6e>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d109      	bne.n	80065d0 <HAL_TIM_PWM_Start_IT+0x5c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	bf14      	ite	ne
 80065c8:	2301      	movne	r3, #1
 80065ca:	2300      	moveq	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	e008      	b.n	80065e2 <HAL_TIM_PWM_Start_IT+0x6e>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b01      	cmp	r3, #1
 80065da:	bf14      	ite	ne
 80065dc:	2301      	movne	r3, #1
 80065de:	2300      	moveq	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e0a9      	b.n	800673e <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <HAL_TIM_PWM_Start_IT+0x86>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065f8:	e013      	b.n	8006622 <HAL_TIM_PWM_Start_IT+0xae>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d104      	bne.n	800660a <HAL_TIM_PWM_Start_IT+0x96>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006608:	e00b      	b.n	8006622 <HAL_TIM_PWM_Start_IT+0xae>
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b08      	cmp	r3, #8
 800660e:	d104      	bne.n	800661a <HAL_TIM_PWM_Start_IT+0xa6>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006618:	e003      	b.n	8006622 <HAL_TIM_PWM_Start_IT+0xae>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2202      	movs	r2, #2
 800661e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b0c      	cmp	r3, #12
 8006626:	d841      	bhi.n	80066ac <HAL_TIM_PWM_Start_IT+0x138>
 8006628:	a201      	add	r2, pc, #4	@ (adr r2, 8006630 <HAL_TIM_PWM_Start_IT+0xbc>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006665 	.word	0x08006665
 8006634:	080066ad 	.word	0x080066ad
 8006638:	080066ad 	.word	0x080066ad
 800663c:	080066ad 	.word	0x080066ad
 8006640:	08006677 	.word	0x08006677
 8006644:	080066ad 	.word	0x080066ad
 8006648:	080066ad 	.word	0x080066ad
 800664c:	080066ad 	.word	0x080066ad
 8006650:	08006689 	.word	0x08006689
 8006654:	080066ad 	.word	0x080066ad
 8006658:	080066ad 	.word	0x080066ad
 800665c:	080066ad 	.word	0x080066ad
 8006660:	0800669b 	.word	0x0800669b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0202 	orr.w	r2, r2, #2
 8006672:	60da      	str	r2, [r3, #12]
      break;
 8006674:	e01d      	b.n	80066b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f042 0204 	orr.w	r2, r2, #4
 8006684:	60da      	str	r2, [r3, #12]
      break;
 8006686:	e014      	b.n	80066b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0208 	orr.w	r2, r2, #8
 8006696:	60da      	str	r2, [r3, #12]
      break;
 8006698:	e00b      	b.n	80066b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f042 0210 	orr.w	r2, r2, #16
 80066a8:	60da      	str	r2, [r3, #12]
      break;
 80066aa:	e002      	b.n	80066b2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	73fb      	strb	r3, [r7, #15]
      break;
 80066b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d141      	bne.n	800673c <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2201      	movs	r2, #1
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 fcbd 	bl	8007040 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006748 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d107      	bne.n	80066e0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a18      	ldr	r2, [pc, #96]	@ (8006748 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00e      	beq.n	8006708 <HAL_TIM_PWM_Start_IT+0x194>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066f2:	d009      	beq.n	8006708 <HAL_TIM_PWM_Start_IT+0x194>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a14      	ldr	r2, [pc, #80]	@ (800674c <HAL_TIM_PWM_Start_IT+0x1d8>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d004      	beq.n	8006708 <HAL_TIM_PWM_Start_IT+0x194>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a13      	ldr	r2, [pc, #76]	@ (8006750 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d111      	bne.n	800672c <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b06      	cmp	r3, #6
 8006718:	d010      	beq.n	800673c <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0201 	orr.w	r2, r2, #1
 8006728:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800672a:	e007      	b.n	800673c <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0201 	orr.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800673c:	7bfb      	ldrb	r3, [r7, #15]
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	40012c00 	.word	0x40012c00
 800674c:	40000400 	.word	0x40000400
 8006750:	40000800 	.word	0x40000800

08006754 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b0c      	cmp	r3, #12
 8006766:	d841      	bhi.n	80067ec <HAL_TIM_PWM_Stop_IT+0x98>
 8006768:	a201      	add	r2, pc, #4	@ (adr r2, 8006770 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800676a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676e:	bf00      	nop
 8006770:	080067a5 	.word	0x080067a5
 8006774:	080067ed 	.word	0x080067ed
 8006778:	080067ed 	.word	0x080067ed
 800677c:	080067ed 	.word	0x080067ed
 8006780:	080067b7 	.word	0x080067b7
 8006784:	080067ed 	.word	0x080067ed
 8006788:	080067ed 	.word	0x080067ed
 800678c:	080067ed 	.word	0x080067ed
 8006790:	080067c9 	.word	0x080067c9
 8006794:	080067ed 	.word	0x080067ed
 8006798:	080067ed 	.word	0x080067ed
 800679c:	080067ed 	.word	0x080067ed
 80067a0:	080067db 	.word	0x080067db
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0202 	bic.w	r2, r2, #2
 80067b2:	60da      	str	r2, [r3, #12]
      break;
 80067b4:	e01d      	b.n	80067f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0204 	bic.w	r2, r2, #4
 80067c4:	60da      	str	r2, [r3, #12]
      break;
 80067c6:	e014      	b.n	80067f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0208 	bic.w	r2, r2, #8
 80067d6:	60da      	str	r2, [r3, #12]
      break;
 80067d8:	e00b      	b.n	80067f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68da      	ldr	r2, [r3, #12]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0210 	bic.w	r2, r2, #16
 80067e8:	60da      	str	r2, [r3, #12]
      break;
 80067ea:	e002      	b.n	80067f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	73fb      	strb	r3, [r7, #15]
      break;
 80067f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d157      	bne.n	80068a8 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2200      	movs	r2, #0
 80067fe:	6839      	ldr	r1, [r7, #0]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fc1d 	bl	8007040 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a2a      	ldr	r2, [pc, #168]	@ (80068b4 <HAL_TIM_PWM_Stop_IT+0x160>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d117      	bne.n	8006840 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6a1a      	ldr	r2, [r3, #32]
 8006816:	f241 1311 	movw	r3, #4369	@ 0x1111
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10f      	bne.n	8006840 <HAL_TIM_PWM_Stop_IT+0xec>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6a1a      	ldr	r2, [r3, #32]
 8006826:	f240 4344 	movw	r3, #1092	@ 0x444
 800682a:	4013      	ands	r3, r2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d107      	bne.n	8006840 <HAL_TIM_PWM_Stop_IT+0xec>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800683e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6a1a      	ldr	r2, [r3, #32]
 8006846:	f241 1311 	movw	r3, #4369	@ 0x1111
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10f      	bne.n	8006870 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6a1a      	ldr	r2, [r3, #32]
 8006856:	f240 4344 	movw	r3, #1092	@ 0x444
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d107      	bne.n	8006870 <HAL_TIM_PWM_Stop_IT+0x11c>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d104      	bne.n	8006880 <HAL_TIM_PWM_Stop_IT+0x12c>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800687e:	e013      	b.n	80068a8 <HAL_TIM_PWM_Stop_IT+0x154>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b04      	cmp	r3, #4
 8006884:	d104      	bne.n	8006890 <HAL_TIM_PWM_Stop_IT+0x13c>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800688e:	e00b      	b.n	80068a8 <HAL_TIM_PWM_Stop_IT+0x154>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2b08      	cmp	r3, #8
 8006894:	d104      	bne.n	80068a0 <HAL_TIM_PWM_Stop_IT+0x14c>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800689e:	e003      	b.n	80068a8 <HAL_TIM_PWM_Stop_IT+0x154>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	40012c00 	.word	0x40012c00

080068b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d020      	beq.n	800691c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01b      	beq.n	800691c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f06f 0202 	mvn.w	r2, #2
 80068ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f993 	bl	8006c2e <HAL_TIM_IC_CaptureCallback>
 8006908:	e005      	b.n	8006916 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f986 	bl	8006c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f003 fa8d 	bl	8009e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f003 0304 	and.w	r3, r3, #4
 8006922:	2b00      	cmp	r3, #0
 8006924:	d020      	beq.n	8006968 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f003 0304 	and.w	r3, r3, #4
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01b      	beq.n	8006968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0204 	mvn.w	r2, #4
 8006938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2202      	movs	r2, #2
 800693e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f96d 	bl	8006c2e <HAL_TIM_IC_CaptureCallback>
 8006954:	e005      	b.n	8006962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f960 	bl	8006c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f003 fa67 	bl	8009e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d020      	beq.n	80069b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01b      	beq.n	80069b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0208 	mvn.w	r2, #8
 8006984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2204      	movs	r2, #4
 800698a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f947 	bl	8006c2e <HAL_TIM_IC_CaptureCallback>
 80069a0:	e005      	b.n	80069ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f93a 	bl	8006c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f003 fa41 	bl	8009e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d020      	beq.n	8006a00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01b      	beq.n	8006a00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f06f 0210 	mvn.w	r2, #16
 80069d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2208      	movs	r2, #8
 80069d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f921 	bl	8006c2e <HAL_TIM_IC_CaptureCallback>
 80069ec:	e005      	b.n	80069fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f914 	bl	8006c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f003 fa1b 	bl	8009e30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00c      	beq.n	8006a24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d007      	beq.n	8006a24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f06f 0201 	mvn.w	r2, #1
 8006a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fa ffb6 	bl	8001990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00c      	beq.n	8006a48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d007      	beq.n	8006a48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fb87 	bl	8007156 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00c      	beq.n	8006a6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d007      	beq.n	8006a6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f8ea 	bl	8006c40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f003 0320 	and.w	r3, r3, #32
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00c      	beq.n	8006a90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d007      	beq.n	8006a90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f06f 0220 	mvn.w	r2, #32
 8006a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fb5a 	bl	8007144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a90:	bf00      	nop
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d101      	bne.n	8006ab6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e0ae      	b.n	8006c14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b0c      	cmp	r3, #12
 8006ac2:	f200 809f 	bhi.w	8006c04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8006acc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006b01 	.word	0x08006b01
 8006ad0:	08006c05 	.word	0x08006c05
 8006ad4:	08006c05 	.word	0x08006c05
 8006ad8:	08006c05 	.word	0x08006c05
 8006adc:	08006b41 	.word	0x08006b41
 8006ae0:	08006c05 	.word	0x08006c05
 8006ae4:	08006c05 	.word	0x08006c05
 8006ae8:	08006c05 	.word	0x08006c05
 8006aec:	08006b83 	.word	0x08006b83
 8006af0:	08006c05 	.word	0x08006c05
 8006af4:	08006c05 	.word	0x08006c05
 8006af8:	08006c05 	.word	0x08006c05
 8006afc:	08006bc3 	.word	0x08006bc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 f912 	bl	8006d30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0208 	orr.w	r2, r2, #8
 8006b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0204 	bic.w	r2, r2, #4
 8006b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6999      	ldr	r1, [r3, #24]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	619a      	str	r2, [r3, #24]
      break;
 8006b3e:	e064      	b.n	8006c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f958 	bl	8006dfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	699a      	ldr	r2, [r3, #24]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6999      	ldr	r1, [r3, #24]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	021a      	lsls	r2, r3, #8
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	619a      	str	r2, [r3, #24]
      break;
 8006b80:	e043      	b.n	8006c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68b9      	ldr	r1, [r7, #8]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 f9a1 	bl	8006ed0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69da      	ldr	r2, [r3, #28]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f042 0208 	orr.w	r2, r2, #8
 8006b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	69da      	ldr	r2, [r3, #28]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0204 	bic.w	r2, r2, #4
 8006bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69d9      	ldr	r1, [r3, #28]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	61da      	str	r2, [r3, #28]
      break;
 8006bc0:	e023      	b.n	8006c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 f9eb 	bl	8006fa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	69d9      	ldr	r1, [r3, #28]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	021a      	lsls	r2, r3, #8
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	61da      	str	r2, [r3, #28]
      break;
 8006c02:	e002      	b.n	8006c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	75fb      	strb	r3, [r7, #23]
      break;
 8006c08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr

08006c2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr

08006c40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bc80      	pop	{r7}
 8006c50:	4770      	bx	lr
	...

08006c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a2f      	ldr	r2, [pc, #188]	@ (8006d24 <TIM_Base_SetConfig+0xd0>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00b      	beq.n	8006c84 <TIM_Base_SetConfig+0x30>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c72:	d007      	beq.n	8006c84 <TIM_Base_SetConfig+0x30>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a2c      	ldr	r2, [pc, #176]	@ (8006d28 <TIM_Base_SetConfig+0xd4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_Base_SetConfig+0x30>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a2b      	ldr	r2, [pc, #172]	@ (8006d2c <TIM_Base_SetConfig+0xd8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d108      	bne.n	8006c96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a22      	ldr	r2, [pc, #136]	@ (8006d24 <TIM_Base_SetConfig+0xd0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00b      	beq.n	8006cb6 <TIM_Base_SetConfig+0x62>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca4:	d007      	beq.n	8006cb6 <TIM_Base_SetConfig+0x62>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8006d28 <TIM_Base_SetConfig+0xd4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d003      	beq.n	8006cb6 <TIM_Base_SetConfig+0x62>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8006d2c <TIM_Base_SetConfig+0xd8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d108      	bne.n	8006cc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a0d      	ldr	r2, [pc, #52]	@ (8006d24 <TIM_Base_SetConfig+0xd0>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d103      	bne.n	8006cfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f023 0201 	bic.w	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	611a      	str	r2, [r3, #16]
  }
}
 8006d1a:	bf00      	nop
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40000400 	.word	0x40000400
 8006d2c:	40000800 	.word	0x40000800

08006d30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	f023 0201 	bic.w	r2, r3, #1
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0303 	bic.w	r3, r3, #3
 8006d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f023 0302 	bic.w	r3, r3, #2
 8006d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a1c      	ldr	r2, [pc, #112]	@ (8006df8 <TIM_OC1_SetConfig+0xc8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d10c      	bne.n	8006da6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 0308 	bic.w	r3, r3, #8
 8006d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f023 0304 	bic.w	r3, r3, #4
 8006da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a13      	ldr	r2, [pc, #76]	@ (8006df8 <TIM_OC1_SetConfig+0xc8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d111      	bne.n	8006dd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	621a      	str	r2, [r3, #32]
}
 8006dec:	bf00      	nop
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bc80      	pop	{r7}
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	40012c00 	.word	0x40012c00

08006dfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	f023 0210 	bic.w	r2, r3, #16
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	021b      	lsls	r3, r3, #8
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f023 0320 	bic.w	r3, r3, #32
 8006e46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	011b      	lsls	r3, r3, #4
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a1d      	ldr	r2, [pc, #116]	@ (8006ecc <TIM_OC2_SetConfig+0xd0>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d10d      	bne.n	8006e78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a14      	ldr	r2, [pc, #80]	@ (8006ecc <TIM_OC2_SetConfig+0xd0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d113      	bne.n	8006ea8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr
 8006ecc:	40012c00 	.word	0x40012c00

08006ed0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0303 	bic.w	r3, r3, #3
 8006f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	021b      	lsls	r3, r3, #8
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa0 <TIM_OC3_SetConfig+0xd0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d10d      	bne.n	8006f4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a14      	ldr	r2, [pc, #80]	@ (8006fa0 <TIM_OC3_SetConfig+0xd0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d113      	bne.n	8006f7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	621a      	str	r2, [r3, #32]
}
 8006f94:	bf00      	nop
 8006f96:	371c      	adds	r7, #28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bc80      	pop	{r7}
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40012c00 	.word	0x40012c00

08006fa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	021b      	lsls	r3, r3, #8
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	031b      	lsls	r3, r3, #12
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800703c <TIM_OC4_SetConfig+0x98>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d109      	bne.n	8007018 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800700a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	019b      	lsls	r3, r3, #6
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	621a      	str	r2, [r3, #32]
}
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	bc80      	pop	{r7}
 800703a:	4770      	bx	lr
 800703c:	40012c00 	.word	0x40012c00

08007040 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f003 031f 	and.w	r3, r3, #31
 8007052:	2201      	movs	r2, #1
 8007054:	fa02 f303 	lsl.w	r3, r2, r3
 8007058:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a1a      	ldr	r2, [r3, #32]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	43db      	mvns	r3, r3
 8007062:	401a      	ands	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a1a      	ldr	r2, [r3, #32]
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 031f 	and.w	r3, r3, #31
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	fa01 f303 	lsl.w	r3, r1, r3
 8007078:	431a      	orrs	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	621a      	str	r2, [r3, #32]
}
 800707e:	bf00      	nop
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800709c:	2302      	movs	r3, #2
 800709e:	e046      	b.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a16      	ldr	r2, [pc, #88]	@ (8007138 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00e      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ec:	d009      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a12      	ldr	r2, [pc, #72]	@ (800713c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d004      	beq.n	8007102 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a10      	ldr	r2, [pc, #64]	@ (8007140 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d10c      	bne.n	800711c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007108:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	4313      	orrs	r3, r2
 8007112:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr
 8007138:	40012c00 	.word	0x40012c00
 800713c:	40000400 	.word	0x40000400
 8007140:	40000800 	.word	0x40000800

08007144 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	bc80      	pop	{r7}
 8007154:	4770      	bx	lr

08007156 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr

08007168 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e04a      	b.n	8007210 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fa fda2 	bl	8001cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2224      	movs	r2, #36	@ 0x24
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fe29 	bl	8007e04 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	695a      	ldr	r2, [r3, #20]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80071d0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695a      	ldr	r2, [r3, #20]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0208 	orr.w	r2, r2, #8
 80071e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2220      	movs	r2, #32
 8007204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	@ 0x28
 800721c:	af02      	add	r7, sp, #8
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	4613      	mov	r3, r2
 8007226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b20      	cmp	r3, #32
 8007236:	d175      	bne.n	8007324 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <HAL_UART_Transmit+0x2c>
 800723e:	88fb      	ldrh	r3, [r7, #6]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e06e      	b.n	8007326 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2221      	movs	r2, #33	@ 0x21
 8007252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007256:	f7fa fecb 	bl	8001ff0 <HAL_GetTick>
 800725a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	88fa      	ldrh	r2, [r7, #6]
 8007260:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	88fa      	ldrh	r2, [r7, #6]
 8007266:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007270:	d108      	bne.n	8007284 <HAL_UART_Transmit+0x6c>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d104      	bne.n	8007284 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800727a:	2300      	movs	r3, #0
 800727c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	61bb      	str	r3, [r7, #24]
 8007282:	e003      	b.n	800728c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007288:	2300      	movs	r3, #0
 800728a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800728c:	e02e      	b.n	80072ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2200      	movs	r2, #0
 8007296:	2180      	movs	r1, #128	@ 0x80
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fb85 	bl	80079a8 <UART_WaitOnFlagUntilTimeout>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e03a      	b.n	8007326 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10b      	bne.n	80072ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	3302      	adds	r3, #2
 80072ca:	61bb      	str	r3, [r7, #24]
 80072cc:	e007      	b.n	80072de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	781a      	ldrb	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	3301      	adds	r3, #1
 80072dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1cb      	bne.n	800728e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2200      	movs	r2, #0
 80072fe:	2140      	movs	r1, #64	@ 0x40
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fb51 	bl	80079a8 <UART_WaitOnFlagUntilTimeout>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d005      	beq.n	8007318 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2220      	movs	r2, #32
 8007310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e006      	b.n	8007326 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2220      	movs	r2, #32
 800731c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	e000      	b.n	8007326 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007324:	2302      	movs	r3, #2
  }
}
 8007326:	4618      	mov	r0, r3
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b08c      	sub	sp, #48	@ 0x30
 8007332:	af00      	add	r7, sp, #0
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	60b9      	str	r1, [r7, #8]
 8007338:	4613      	mov	r3, r2
 800733a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b20      	cmp	r3, #32
 8007346:	d14a      	bne.n	80073de <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800734e:	88fb      	ldrh	r3, [r7, #6]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e043      	b.n	80073e0 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8007364:	88fb      	ldrh	r3, [r7, #6]
 8007366:	461a      	mov	r2, r3
 8007368:	68b9      	ldr	r1, [r7, #8]
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 fb75 	bl	8007a5a <UART_Start_Receive_IT>
 8007370:	4603      	mov	r3, r0
 8007372:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007376:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800737a:	2b00      	cmp	r3, #0
 800737c:	d12c      	bne.n	80073d8 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007382:	2b01      	cmp	r3, #1
 8007384:	d125      	bne.n	80073d2 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007386:	2300      	movs	r3, #0
 8007388:	613b      	str	r3, [r7, #16]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	613b      	str	r3, [r7, #16]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	613b      	str	r3, [r7, #16]
 800739a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	330c      	adds	r3, #12
 80073a2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	e853 3f00 	ldrex	r3, [r3]
 80073aa:	617b      	str	r3, [r7, #20]
   return(result);
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f043 0310 	orr.w	r3, r3, #16
 80073b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	330c      	adds	r3, #12
 80073ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80073be:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	6a39      	ldr	r1, [r7, #32]
 80073c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e5      	bne.n	800739c <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80073d0:	e002      	b.n	80073d8 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80073d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80073dc:	e000      	b.n	80073e0 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80073de:	2302      	movs	r3, #2
  }
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3730      	adds	r7, #48	@ 0x30
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b0ba      	sub	sp, #232	@ 0xe8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800740e:	2300      	movs	r3, #0
 8007410:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007414:	2300      	movs	r3, #0
 8007416:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800741a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10f      	bne.n	800744e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800742e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007432:	f003 0320 	and.w	r3, r3, #32
 8007436:	2b00      	cmp	r3, #0
 8007438:	d009      	beq.n	800744e <HAL_UART_IRQHandler+0x66>
 800743a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800743e:	f003 0320 	and.w	r3, r3, #32
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fc1d 	bl	8007c86 <UART_Receive_IT>
      return;
 800744c:	e25b      	b.n	8007906 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800744e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 80de 	beq.w	8007614 <HAL_UART_IRQHandler+0x22c>
 8007458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	d106      	bne.n	8007472 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007468:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 80d1 	beq.w	8007614 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00b      	beq.n	8007496 <HAL_UART_IRQHandler+0xae>
 800747e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007486:	2b00      	cmp	r3, #0
 8007488:	d005      	beq.n	8007496 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800748e:	f043 0201 	orr.w	r2, r3, #1
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800749a:	f003 0304 	and.w	r3, r3, #4
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00b      	beq.n	80074ba <HAL_UART_IRQHandler+0xd2>
 80074a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d005      	beq.n	80074ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074b2:	f043 0202 	orr.w	r2, r3, #2
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00b      	beq.n	80074de <HAL_UART_IRQHandler+0xf6>
 80074c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d6:	f043 0204 	orr.w	r2, r3, #4
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e2:	f003 0308 	and.w	r3, r3, #8
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d011      	beq.n	800750e <HAL_UART_IRQHandler+0x126>
 80074ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d105      	bne.n	8007502 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d005      	beq.n	800750e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007506:	f043 0208 	orr.w	r2, r3, #8
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 81f2 	beq.w	80078fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800751c:	f003 0320 	and.w	r3, r3, #32
 8007520:	2b00      	cmp	r3, #0
 8007522:	d008      	beq.n	8007536 <HAL_UART_IRQHandler+0x14e>
 8007524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fba8 	bl	8007c86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007540:	2b00      	cmp	r3, #0
 8007542:	bf14      	ite	ne
 8007544:	2301      	movne	r3, #1
 8007546:	2300      	moveq	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007552:	f003 0308 	and.w	r3, r3, #8
 8007556:	2b00      	cmp	r3, #0
 8007558:	d103      	bne.n	8007562 <HAL_UART_IRQHandler+0x17a>
 800755a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800755e:	2b00      	cmp	r3, #0
 8007560:	d04f      	beq.n	8007602 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fab2 	bl	8007acc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	d041      	beq.n	80075fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3314      	adds	r3, #20
 800757c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800758c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007594:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3314      	adds	r3, #20
 800759e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80075a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80075a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80075ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80075ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1d9      	bne.n	8007576 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d013      	beq.n	80075f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ce:	4a7e      	ldr	r2, [pc, #504]	@ (80077c8 <HAL_UART_IRQHandler+0x3e0>)
 80075d0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fa ff3c 	bl	8002454 <HAL_DMA_Abort_IT>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d016      	beq.n	8007610 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80075ec:	4610      	mov	r0, r2
 80075ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f0:	e00e      	b.n	8007610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f99c 	bl	8007930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f8:	e00a      	b.n	8007610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f998 	bl	8007930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007600:	e006      	b.n	8007610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f994 	bl	8007930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800760e:	e175      	b.n	80078fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007610:	bf00      	nop
    return;
 8007612:	e173      	b.n	80078fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007618:	2b01      	cmp	r3, #1
 800761a:	f040 814f 	bne.w	80078bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800761e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007622:	f003 0310 	and.w	r3, r3, #16
 8007626:	2b00      	cmp	r3, #0
 8007628:	f000 8148 	beq.w	80078bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800762c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007630:	f003 0310 	and.w	r3, r3, #16
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 8141 	beq.w	80078bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800763a:	2300      	movs	r3, #0
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	60bb      	str	r3, [r7, #8]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	60bb      	str	r3, [r7, #8]
 800764e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 80b6 	beq.w	80077cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800766c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 8145 	beq.w	8007900 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800767a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800767e:	429a      	cmp	r2, r3
 8007680:	f080 813e 	bcs.w	8007900 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800768a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	2b20      	cmp	r3, #32
 8007694:	f000 8088 	beq.w	80077a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	330c      	adds	r3, #12
 800769e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80076ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	330c      	adds	r3, #12
 80076c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80076c4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80076d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1d9      	bne.n	8007698 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3314      	adds	r3, #20
 80076ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076ee:	e853 3f00 	ldrex	r3, [r3]
 80076f2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076f6:	f023 0301 	bic.w	r3, r3, #1
 80076fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3314      	adds	r3, #20
 8007704:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007708:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800770c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007710:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007714:	e841 2300 	strex	r3, r2, [r1]
 8007718:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800771a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e1      	bne.n	80076e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3314      	adds	r3, #20
 8007726:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007728:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800772a:	e853 3f00 	ldrex	r3, [r3]
 800772e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007730:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007736:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3314      	adds	r3, #20
 8007740:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007744:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007746:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800774a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007752:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e3      	bne.n	8007720 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2220      	movs	r2, #32
 800775c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	330c      	adds	r3, #12
 800776c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007770:	e853 3f00 	ldrex	r3, [r3]
 8007774:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007778:	f023 0310 	bic.w	r3, r3, #16
 800777c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800778a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800778c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007790:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e3      	bne.n	8007766 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fa fe1a 	bl	80023dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7fa fbb4 	bl	8001f2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077c4:	e09c      	b.n	8007900 <HAL_UART_IRQHandler+0x518>
 80077c6:	bf00      	nop
 80077c8:	08007b91 	.word	0x08007b91
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 808e 	beq.w	8007904 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80077e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 8089 	beq.w	8007904 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	330c      	adds	r3, #12
 80077f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007804:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007808:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	330c      	adds	r3, #12
 8007812:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007816:	647a      	str	r2, [r7, #68]	@ 0x44
 8007818:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800781c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e3      	bne.n	80077f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3314      	adds	r3, #20
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	623b      	str	r3, [r7, #32]
   return(result);
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	f023 0301 	bic.w	r3, r3, #1
 8007840:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3314      	adds	r3, #20
 800784a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800784e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007850:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800785c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e3      	bne.n	800782a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2220      	movs	r2, #32
 8007866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	330c      	adds	r3, #12
 8007876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0310 	bic.w	r3, r3, #16
 8007886:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	330c      	adds	r3, #12
 8007890:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007894:	61fa      	str	r2, [r7, #28]
 8007896:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	69b9      	ldr	r1, [r7, #24]
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	617b      	str	r3, [r7, #20]
   return(result);
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e3      	bne.n	8007870 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7fa fb39 	bl	8001f2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078ba:	e023      	b.n	8007904 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d009      	beq.n	80078dc <HAL_UART_IRQHandler+0x4f4>
 80078c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d003      	beq.n	80078dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f96f 	bl	8007bb8 <UART_Transmit_IT>
    return;
 80078da:	e014      	b.n	8007906 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80078dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00e      	beq.n	8007906 <HAL_UART_IRQHandler+0x51e>
 80078e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d008      	beq.n	8007906 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f9ae 	bl	8007c56 <UART_EndTransmit_IT>
    return;
 80078fa:	e004      	b.n	8007906 <HAL_UART_IRQHandler+0x51e>
    return;
 80078fc:	bf00      	nop
 80078fe:	e002      	b.n	8007906 <HAL_UART_IRQHandler+0x51e>
      return;
 8007900:	bf00      	nop
 8007902:	e000      	b.n	8007906 <HAL_UART_IRQHandler+0x51e>
      return;
 8007904:	bf00      	nop
  }
}
 8007906:	37e8      	adds	r7, #232	@ 0xe8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	bc80      	pop	{r7}
 800791c:	4770      	bx	lr

0800791e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007926:	bf00      	nop
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	bc80      	pop	{r7}
 800792e:	4770      	bx	lr

08007930 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	bc80      	pop	{r7}
 8007940:	4770      	bx	lr

08007942 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8007942:	b480      	push	{r7}
 8007944:	b085      	sub	sp, #20
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007954:	2b01      	cmp	r3, #1
 8007956:	d101      	bne.n	800795c <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8007958:	2302      	movs	r3, #2
 800795a:	e020      	b.n	800799e <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2224      	movs	r2, #36	@ 0x24
 8007968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f023 030c 	bic.w	r3, r3, #12
 800797a:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f043 0308 	orr.w	r3, r3, #8
 8007982:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2220      	movs	r2, #32
 8007990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc80      	pop	{r7}
 80079a6:	4770      	bx	lr

080079a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	603b      	str	r3, [r7, #0]
 80079b4:	4613      	mov	r3, r2
 80079b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079b8:	e03b      	b.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c0:	d037      	beq.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079c2:	f7fa fb15 	bl	8001ff0 <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	6a3a      	ldr	r2, [r7, #32]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d302      	bcc.n	80079d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e03a      	b.n	8007a52 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d023      	beq.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x8a>
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b80      	cmp	r3, #128	@ 0x80
 80079ee:	d020      	beq.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x8a>
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2b40      	cmp	r3, #64	@ 0x40
 80079f4:	d01d      	beq.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0308 	and.w	r3, r3, #8
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d116      	bne.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 f856 	bl	8007acc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2208      	movs	r2, #8
 8007a24:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e00f      	b.n	8007a52 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	bf0c      	ite	eq
 8007a42:	2301      	moveq	r3, #1
 8007a44:	2300      	movne	r3, #0
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	461a      	mov	r2, r3
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d0b4      	beq.n	80079ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	4613      	mov	r3, r2
 8007a66:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	88fa      	ldrh	r2, [r7, #6]
 8007a72:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	88fa      	ldrh	r2, [r7, #6]
 8007a78:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2222      	movs	r2, #34	@ 0x22
 8007a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68da      	ldr	r2, [r3, #12]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a9e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695a      	ldr	r2, [r3, #20]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f042 0201 	orr.w	r2, r2, #1
 8007aae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 0220 	orr.w	r2, r2, #32
 8007abe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bc80      	pop	{r7}
 8007aca:	4770      	bx	lr

08007acc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b095      	sub	sp, #84	@ 0x54
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	330c      	adds	r3, #12
 8007ada:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	330c      	adds	r3, #12
 8007af2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007af4:	643a      	str	r2, [r7, #64]	@ 0x40
 8007af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007afa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e5      	bne.n	8007ad4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3314      	adds	r3, #20
 8007b0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	e853 3f00 	ldrex	r3, [r3]
 8007b16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f023 0301 	bic.w	r3, r3, #1
 8007b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3314      	adds	r3, #20
 8007b26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b30:	e841 2300 	strex	r3, r2, [r1]
 8007b34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e5      	bne.n	8007b08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d119      	bne.n	8007b78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	330c      	adds	r3, #12
 8007b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	e853 3f00 	ldrex	r3, [r3]
 8007b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f023 0310 	bic.w	r3, r3, #16
 8007b5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	330c      	adds	r3, #12
 8007b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b64:	61ba      	str	r2, [r7, #24]
 8007b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b68:	6979      	ldr	r1, [r7, #20]
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	e841 2300 	strex	r3, r2, [r1]
 8007b70:	613b      	str	r3, [r7, #16]
   return(result);
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e5      	bne.n	8007b44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007b86:	bf00      	nop
 8007b88:	3754      	adds	r7, #84	@ 0x54
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bc80      	pop	{r7}
 8007b8e:	4770      	bx	lr

08007b90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f7ff fec0 	bl	8007930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bb0:	bf00      	nop
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b21      	cmp	r3, #33	@ 0x21
 8007bca:	d13e      	bne.n	8007c4a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bd4:	d114      	bne.n	8007c00 <UART_Transmit_IT+0x48>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d110      	bne.n	8007c00 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bf2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	1c9a      	adds	r2, r3, #2
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	621a      	str	r2, [r3, #32]
 8007bfe:	e008      	b.n	8007c12 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	1c59      	adds	r1, r3, #1
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	6211      	str	r1, [r2, #32]
 8007c0a:	781a      	ldrb	r2, [r3, #0]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10f      	bne.n	8007c46 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68da      	ldr	r2, [r3, #12]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	e000      	b.n	8007c4c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c4a:	2302      	movs	r3, #2
  }
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc80      	pop	{r7}
 8007c54:	4770      	bx	lr

08007c56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b082      	sub	sp, #8
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7ff fe48 	bl	800790c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b08c      	sub	sp, #48	@ 0x30
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b22      	cmp	r3, #34	@ 0x22
 8007c98:	f040 80ae 	bne.w	8007df8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ca4:	d117      	bne.n	8007cd6 <UART_Receive_IT+0x50>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d113      	bne.n	8007cd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cce:	1c9a      	adds	r2, r3, #2
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8007cd4:	e026      	b.n	8007d24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce8:	d007      	beq.n	8007cfa <UART_Receive_IT+0x74>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <UART_Receive_IT+0x82>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d106      	bne.n	8007d08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	e008      	b.n	8007d1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	4619      	mov	r1, r3
 8007d32:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d15d      	bne.n	8007df4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0220 	bic.w	r2, r2, #32
 8007d46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695a      	ldr	r2, [r3, #20]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 0201 	bic.w	r2, r2, #1
 8007d66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d135      	bne.n	8007dea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	330c      	adds	r3, #12
 8007d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	e853 3f00 	ldrex	r3, [r3]
 8007d92:	613b      	str	r3, [r7, #16]
   return(result);
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f023 0310 	bic.w	r3, r3, #16
 8007d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	330c      	adds	r3, #12
 8007da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007da4:	623a      	str	r2, [r7, #32]
 8007da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da8:	69f9      	ldr	r1, [r7, #28]
 8007daa:	6a3a      	ldr	r2, [r7, #32]
 8007dac:	e841 2300 	strex	r3, r2, [r1]
 8007db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1e5      	bne.n	8007d84 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0310 	and.w	r3, r3, #16
 8007dc2:	2b10      	cmp	r3, #16
 8007dc4:	d10a      	bne.n	8007ddc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	60fb      	str	r3, [r7, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7fa f8a2 	bl	8001f2c <HAL_UARTEx_RxEventCallback>
 8007de8:	e002      	b.n	8007df0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f7ff fd97 	bl	800791e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	e002      	b.n	8007dfa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	e000      	b.n	8007dfa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007df8:	2302      	movs	r3, #2
  }
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3730      	adds	r7, #48	@ 0x30
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689a      	ldr	r2, [r3, #8]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007e3e:	f023 030c 	bic.w	r3, r3, #12
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6812      	ldr	r2, [r2, #0]
 8007e46:	68b9      	ldr	r1, [r7, #8]
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699a      	ldr	r2, [r3, #24]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a2c      	ldr	r2, [pc, #176]	@ (8007f18 <UART_SetConfig+0x114>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d103      	bne.n	8007e74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007e6c:	f7fe fa26 	bl	80062bc <HAL_RCC_GetPCLK2Freq>
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	e002      	b.n	8007e7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007e74:	f7fe fa0e 	bl	8006294 <HAL_RCC_GetPCLK1Freq>
 8007e78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	009a      	lsls	r2, r3, #2
 8007e84:	441a      	add	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e90:	4a22      	ldr	r2, [pc, #136]	@ (8007f1c <UART_SetConfig+0x118>)
 8007e92:	fba2 2303 	umull	r2, r3, r2, r3
 8007e96:	095b      	lsrs	r3, r3, #5
 8007e98:	0119      	lsls	r1, r3, #4
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	009a      	lsls	r2, r3, #2
 8007ea4:	441a      	add	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8007eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8007f1c <UART_SetConfig+0x118>)
 8007eb2:	fba3 0302 	umull	r0, r3, r3, r2
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	2064      	movs	r0, #100	@ 0x64
 8007eba:	fb00 f303 	mul.w	r3, r0, r3
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	011b      	lsls	r3, r3, #4
 8007ec2:	3332      	adds	r3, #50	@ 0x32
 8007ec4:	4a15      	ldr	r2, [pc, #84]	@ (8007f1c <UART_SetConfig+0x118>)
 8007ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eca:	095b      	lsrs	r3, r3, #5
 8007ecc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ed0:	4419      	add	r1, r3
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	009a      	lsls	r2, r3, #2
 8007edc:	441a      	add	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8007f1c <UART_SetConfig+0x118>)
 8007eea:	fba3 0302 	umull	r0, r3, r3, r2
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	2064      	movs	r0, #100	@ 0x64
 8007ef2:	fb00 f303 	mul.w	r3, r0, r3
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	3332      	adds	r3, #50	@ 0x32
 8007efc:	4a07      	ldr	r2, [pc, #28]	@ (8007f1c <UART_SetConfig+0x118>)
 8007efe:	fba2 2303 	umull	r2, r3, r2, r3
 8007f02:	095b      	lsrs	r3, r3, #5
 8007f04:	f003 020f 	and.w	r2, r3, #15
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	440a      	add	r2, r1
 8007f0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007f10:	bf00      	nop
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	40013800 	.word	0x40013800
 8007f1c:	51eb851f 	.word	0x51eb851f

08007f20 <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
static void writeRegister(uint8_t address,uint8_t value)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af04      	add	r7, sp, #16
 8007f26:	4603      	mov	r3, r0
 8007f28:	460a      	mov	r2, r1
 8007f2a:	71fb      	strb	r3, [r7, #7]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	71bb      	strb	r3, [r7, #6]
	if (address > 0x39)
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	2b39      	cmp	r3, #57	@ 0x39
 8007f34:	d901      	bls.n	8007f3a <writeRegister+0x1a>
	address = 0x39;
 8007f36:	2339      	movs	r3, #57	@ 0x39
 8007f38:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Write(&hi2c2, ADXL345_I2C_ADDR, address, 1, &value, 1, 10);
 8007f3a:	79fb      	ldrb	r3, [r7, #7]
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	230a      	movs	r3, #10
 8007f40:	9302      	str	r3, [sp, #8]
 8007f42:	2301      	movs	r3, #1
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	1dbb      	adds	r3, r7, #6
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	21a6      	movs	r1, #166	@ 0xa6
 8007f4e:	4803      	ldr	r0, [pc, #12]	@ (8007f5c <writeRegister+0x3c>)
 8007f50:	f7fb f804 	bl	8002f5c <HAL_I2C_Mem_Write>
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	200003a0 	.word	0x200003a0

08007f60 <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

static void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af04      	add	r7, sp, #16
 8007f66:	4603      	mov	r3, r0
 8007f68:	6039      	str	r1, [r7, #0]
 8007f6a:	71fb      	strb	r3, [r7, #7]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	71bb      	strb	r3, [r7, #6]
	if (address > 0x39)
 8007f70:	79fb      	ldrb	r3, [r7, #7]
 8007f72:	2b39      	cmp	r3, #57	@ 0x39
 8007f74:	d901      	bls.n	8007f7a <readRegister+0x1a>
	address = 0x39;
 8007f76:	2339      	movs	r3, #57	@ 0x39
 8007f78:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Read(&hi2c2, ADXL345_I2C_ADDR, address, 1, value, num, 100);
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	79bb      	ldrb	r3, [r7, #6]
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	2164      	movs	r1, #100	@ 0x64
 8007f84:	9102      	str	r1, [sp, #8]
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	21a6      	movs	r1, #166	@ 0xa6
 8007f90:	4803      	ldr	r0, [pc, #12]	@ (8007fa0 <readRegister+0x40>)
 8007f92:	f7fb f8dd 	bl	8003150 <HAL_I2C_Mem_Read>
}
 8007f96:	bf00      	nop
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	200003a0 	.word	0x200003a0

08007fa4 <adxlBW>:
						9 		|  				50
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
static void adxlBW(ADXL_InitTypeDef * adxl){
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
	uint8_t bwreg = 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73fb      	strb	r3, [r7, #15]
	writeRegister(BW_RATE,bwreg);
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	202c      	movs	r0, #44	@ 0x2c
 8007fb6:	f7ff ffb3 	bl	8007f20 <writeRegister>
	if (adxl->LPMode == LPMODE_LOWPOWER){
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	785b      	ldrb	r3, [r3, #1]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d11a      	bne.n	8007ff8 <adxlBW+0x54>
		// Low power mode
		bwreg |= (1 << 4);
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
 8007fc4:	f043 0310 	orr.w	r3, r3, #16
 8007fc8:	73fb      	strb	r3, [r7, #15]
		if ( ((adxl->Rate) <7) && ((adxl->Rate)>12) ) bwreg += 7;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	789b      	ldrb	r3, [r3, #2]
 8007fce:	2b06      	cmp	r3, #6
 8007fd0:	d807      	bhi.n	8007fe2 <adxlBW+0x3e>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	789b      	ldrb	r3, [r3, #2]
 8007fd6:	2b0c      	cmp	r3, #12
 8007fd8:	d903      	bls.n	8007fe2 <adxlBW+0x3e>
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
 8007fdc:	3307      	adds	r3, #7
 8007fde:	73fb      	strb	r3, [r7, #15]
 8007fe0:	e004      	b.n	8007fec <adxlBW+0x48>
		else bwreg +=(adxl->Rate);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	789a      	ldrb	r2, [r3, #2]
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	4413      	add	r3, r2
 8007fea:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	202c      	movs	r0, #44	@ 0x2c
 8007ff2:	f7ff ff95 	bl	8007f20 <writeRegister>

		if ( ((adxl->Rate) < 6) && ((adxl->Rate) > 15) ) bwreg += 6;
		else bwreg += (adxl->Rate);
		writeRegister(BW_RATE,bwreg);
	}
}
 8007ff6:	e015      	b.n	8008024 <adxlBW+0x80>
		if ( ((adxl->Rate) < 6) && ((adxl->Rate) > 15) ) bwreg += 6;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	789b      	ldrb	r3, [r3, #2]
 8007ffc:	2b05      	cmp	r3, #5
 8007ffe:	d807      	bhi.n	8008010 <adxlBW+0x6c>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	789b      	ldrb	r3, [r3, #2]
 8008004:	2b0f      	cmp	r3, #15
 8008006:	d903      	bls.n	8008010 <adxlBW+0x6c>
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	3306      	adds	r3, #6
 800800c:	73fb      	strb	r3, [r7, #15]
 800800e:	e004      	b.n	800801a <adxlBW+0x76>
		else bwreg += (adxl->Rate);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	789a      	ldrb	r2, [r3, #2]
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	4413      	add	r3, r2
 8008018:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	4619      	mov	r1, r3
 800801e:	202c      	movs	r0, #44	@ 0x2c
 8008020:	f7ff ff7e 	bl	8007f20 <writeRegister>
}
 8008024:	bf00      	nop
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <adxlFormat>:
						3 		|  				+-16g

		*/

static void adxlFormat(ADXL_InitTypeDef * adxl)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
	uint8_t formatreg=0;
 8008034:	2300      	movs	r3, #0
 8008036:	73fb      	strb	r3, [r7, #15]
	writeRegister(DATA_FORMAT,formatreg);
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	4619      	mov	r1, r3
 800803c:	2031      	movs	r0, #49	@ 0x31
 800803e:	f7ff ff6f 	bl	8007f20 <writeRegister>
	formatreg = (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	015b      	lsls	r3, r3, #5
 8008048:	b25a      	sxtb	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	795b      	ldrb	r3, [r3, #5]
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	b25b      	sxtb	r3, r3
 8008052:	4313      	orrs	r3, r2
 8008054:	b25a      	sxtb	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	791b      	ldrb	r3, [r3, #4]
 800805a:	00db      	lsls	r3, r3, #3
 800805c:	b25b      	sxtb	r3, r3
 800805e:	4313      	orrs	r3, r2
 8008060:	b25b      	sxtb	r3, r3
 8008062:	73fb      	strb	r3, [r7, #15]
	formatreg += (adxl -> Range);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	78da      	ldrb	r2, [r3, #3]
 8008068:	7bfb      	ldrb	r3, [r7, #15]
 800806a:	4413      	add	r3, r2
 800806c:	73fb      	strb	r3, [r7, #15]
	writeRegister(DATA_FORMAT,formatreg);
 800806e:	7bfb      	ldrb	r3, [r7, #15]
 8008070:	4619      	mov	r1, r3
 8008072:	2031      	movs	r0, #49	@ 0x31
 8008074:	f7ff ff54 	bl	8007f20 <writeRegister>
}
 8008078:	bf00      	nop
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
	uint8_t testval = 0;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID,&testval,1);
 800808c:	f107 030f 	add.w	r3, r7, #15
 8008090:	2201      	movs	r2, #1
 8008092:	4619      	mov	r1, r3
 8008094:	2000      	movs	r0, #0
 8008096:	f7ff ff63 	bl	8007f60 <readRegister>
	if (testval != ADXL345_I2C_DEVID) return ADXL_ERR;
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	2be5      	cmp	r3, #229	@ 0xe5
 800809e:	d001      	beq.n	80080a4 <ADXL_Init+0x24>
 80080a0:	2301      	movs	r3, #1
 80080a2:	e081      	b.n	80081a8 <ADXL_Init+0x128>
	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff ff7d 	bl	8007fa4 <adxlBW>
	adxlFormat(adxl);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7ff ffbe 	bl	800802c <adxlFormat>

	// Settings gains
	if (adxl->Resolution == RESOLUTION_10BIT)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	791b      	ldrb	r3, [r3, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d13f      	bne.n	8008138 <ADXL_Init+0xb8>
			{
			switch (adxl->Range) {
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	78db      	ldrb	r3, [r3, #3]
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d846      	bhi.n	800814e <ADXL_Init+0xce>
 80080c0:	a201      	add	r2, pc, #4	@ (adr r2, 80080c8 <ADXL_Init+0x48>)
 80080c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c6:	bf00      	nop
 80080c8:	080080d9 	.word	0x080080d9
 80080cc:	080080f1 	.word	0x080080f1
 80080d0:	08008109 	.word	0x08008109
 80080d4:	08008121 	.word	0x08008121
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 80080d8:	4b35      	ldr	r3, [pc, #212]	@ (80081b0 <ADXL_Init+0x130>)
 80080da:	4a36      	ldr	r2, [pc, #216]	@ (80081b4 <ADXL_Init+0x134>)
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	4b34      	ldr	r3, [pc, #208]	@ (80081b0 <ADXL_Init+0x130>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a35      	ldr	r2, [pc, #212]	@ (80081b8 <ADXL_Init+0x138>)
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	4b34      	ldr	r3, [pc, #208]	@ (80081b8 <ADXL_Init+0x138>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a34      	ldr	r2, [pc, #208]	@ (80081bc <ADXL_Init+0x13c>)
 80080ec:	6013      	str	r3, [r2, #0]
								break;
 80080ee:	e02e      	b.n	800814e <ADXL_Init+0xce>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 80080f0:	4b2f      	ldr	r3, [pc, #188]	@ (80081b0 <ADXL_Init+0x130>)
 80080f2:	4a33      	ldr	r2, [pc, #204]	@ (80081c0 <ADXL_Init+0x140>)
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	4b2e      	ldr	r3, [pc, #184]	@ (80081b0 <ADXL_Init+0x130>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a2f      	ldr	r2, [pc, #188]	@ (80081b8 <ADXL_Init+0x138>)
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	4b2e      	ldr	r3, [pc, #184]	@ (80081b8 <ADXL_Init+0x138>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a2e      	ldr	r2, [pc, #184]	@ (80081bc <ADXL_Init+0x13c>)
 8008104:	6013      	str	r3, [r2, #0]
								break;
 8008106:	e022      	b.n	800814e <ADXL_Init+0xce>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 8008108:	4b29      	ldr	r3, [pc, #164]	@ (80081b0 <ADXL_Init+0x130>)
 800810a:	4a2e      	ldr	r2, [pc, #184]	@ (80081c4 <ADXL_Init+0x144>)
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	4b28      	ldr	r3, [pc, #160]	@ (80081b0 <ADXL_Init+0x130>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a29      	ldr	r2, [pc, #164]	@ (80081b8 <ADXL_Init+0x138>)
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	4b28      	ldr	r3, [pc, #160]	@ (80081b8 <ADXL_Init+0x138>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a28      	ldr	r2, [pc, #160]	@ (80081bc <ADXL_Init+0x13c>)
 800811c:	6013      	str	r3, [r2, #0]
								break;
 800811e:	e016      	b.n	800814e <ADXL_Init+0xce>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 8008120:	4b23      	ldr	r3, [pc, #140]	@ (80081b0 <ADXL_Init+0x130>)
 8008122:	4a29      	ldr	r2, [pc, #164]	@ (80081c8 <ADXL_Init+0x148>)
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	4b22      	ldr	r3, [pc, #136]	@ (80081b0 <ADXL_Init+0x130>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a23      	ldr	r2, [pc, #140]	@ (80081b8 <ADXL_Init+0x138>)
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	4b22      	ldr	r3, [pc, #136]	@ (80081b8 <ADXL_Init+0x138>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a22      	ldr	r2, [pc, #136]	@ (80081bc <ADXL_Init+0x13c>)
 8008134:	6013      	str	r3, [r2, #0]
								break;
 8008136:	e00a      	b.n	800814e <ADXL_Init+0xce>
								}
			} else
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 8008138:	4b1d      	ldr	r3, [pc, #116]	@ (80081b0 <ADXL_Init+0x130>)
 800813a:	4a1e      	ldr	r2, [pc, #120]	@ (80081b4 <ADXL_Init+0x134>)
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	4b1c      	ldr	r3, [pc, #112]	@ (80081b0 <ADXL_Init+0x130>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a1d      	ldr	r2, [pc, #116]	@ (80081b8 <ADXL_Init+0x138>)
 8008144:	6013      	str	r3, [r2, #0]
 8008146:	4b1c      	ldr	r3, [pc, #112]	@ (80081b8 <ADXL_Init+0x138>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a1c      	ldr	r2, [pc, #112]	@ (80081bc <ADXL_Init+0x13c>)
 800814c:	6013      	str	r3, [r2, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg = 0;
 800814e:	2300      	movs	r3, #0
 8008150:	73bb      	strb	r3, [r7, #14]
			readRegister(POWER_CTL,&reg,1);
 8008152:	f107 030e 	add.w	r3, r7, #14
 8008156:	2201      	movs	r2, #1
 8008158:	4619      	mov	r1, r3
 800815a:	202d      	movs	r0, #45	@ 0x2d
 800815c:	f7ff ff00 	bl	8007f60 <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	799b      	ldrb	r3, [r3, #6]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d105      	bne.n	8008174 <ADXL_Init+0xf4>
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	f043 0310 	orr.w	r3, r3, #16
 800816e:	b2db      	uxtb	r3, r3
 8008170:	73bb      	strb	r3, [r7, #14]
 8008172:	e004      	b.n	800817e <ADXL_Init+0xfe>
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	f023 0310 	bic.w	r3, r3, #16
 800817a:	b2db      	uxtb	r3, r3
 800817c:	73bb      	strb	r3, [r7, #14]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	79db      	ldrb	r3, [r3, #7]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d105      	bne.n	8008192 <ADXL_Init+0x112>
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	f043 0320 	orr.w	r3, r3, #32
 800818c:	b2db      	uxtb	r3, r3
 800818e:	73bb      	strb	r3, [r7, #14]
 8008190:	e004      	b.n	800819c <ADXL_Init+0x11c>
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	f023 0320 	bic.w	r3, r3, #32
 8008198:	b2db      	uxtb	r3, r3
 800819a:	73bb      	strb	r3, [r7, #14]
			writeRegister(POWER_CTL,reg);
 800819c:	7bbb      	ldrb	r3, [r7, #14]
 800819e:	4619      	mov	r1, r3
 80081a0:	202d      	movs	r0, #45	@ 0x2d
 80081a2:	f7ff febd 	bl	8007f20 <writeRegister>

	return ADXL_OK;
 80081a6:	2300      	movs	r3, #0

}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20000564 	.word	0x20000564
 80081b4:	3b808081 	.word	0x3b808081
 80081b8:	20000560 	.word	0x20000560
 80081bc:	2000055c 	.word	0x2000055c
 80081c0:	3c010204 	.word	0x3c010204
 80081c4:	3c820821 	.word	0x3c820821
 80081c8:	3d042108 	.word	0x3d042108

080081cc <ADXL_getAccel>:
						uint16_t acc[3];
						ADXL_getAccel(acc,OUTPUT_SIGNED);
						and so on...
*/
void ADXL_getAccel(void *Data , uint8_t outputType)
	{
 80081cc:	b590      	push	{r4, r7, lr}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70fb      	strb	r3, [r7, #3]
	uint8_t data[6]={0,0,0,0,0,0};
 80081d8:	4a3b      	ldr	r2, [pc, #236]	@ (80082c8 <ADXL_getAccel+0xfc>)
 80081da:	f107 0308 	add.w	r3, r7, #8
 80081de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80081e2:	6018      	str	r0, [r3, #0]
 80081e4:	3304      	adds	r3, #4
 80081e6:	8019      	strh	r1, [r3, #0]
	readRegister(DATA0,data,6);
 80081e8:	f107 0308 	add.w	r3, r7, #8
 80081ec:	2206      	movs	r2, #6
 80081ee:	4619      	mov	r1, r3
 80081f0:	2032      	movs	r0, #50	@ 0x32
 80081f2:	f7ff feb5 	bl	8007f60 <readRegister>


	if (outputType == OUTPUT_SIGNED){
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d11f      	bne.n	800823c <ADXL_getAccel+0x70>
		int16_t * acc = Data;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	613b      	str	r3, [r7, #16]
		  // Two's Complement
		acc[0] = (int16_t) ((data[1]*256+data[0]));
 8008200:	7a7b      	ldrb	r3, [r7, #9]
 8008202:	021b      	lsls	r3, r3, #8
 8008204:	b29b      	uxth	r3, r3
 8008206:	7a3a      	ldrb	r2, [r7, #8]
 8008208:	4413      	add	r3, r2
 800820a:	b29b      	uxth	r3, r3
 800820c:	b21a      	sxth	r2, r3
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	801a      	strh	r2, [r3, #0]
		acc[1] = (int16_t) ((data[3]*256+data[2]));
 8008212:	7afb      	ldrb	r3, [r7, #11]
 8008214:	021b      	lsls	r3, r3, #8
 8008216:	b29b      	uxth	r3, r3
 8008218:	7aba      	ldrb	r2, [r7, #10]
 800821a:	4413      	add	r3, r2
 800821c:	b29a      	uxth	r2, r3
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	3302      	adds	r3, #2
 8008222:	b212      	sxth	r2, r2
 8008224:	801a      	strh	r2, [r3, #0]
		acc[2] = (int16_t) ((data[5]*256+data[4]));
 8008226:	7b7b      	ldrb	r3, [r7, #13]
 8008228:	021b      	lsls	r3, r3, #8
 800822a:	b29b      	uxth	r3, r3
 800822c:	7b3a      	ldrb	r2, [r7, #12]
 800822e:	4413      	add	r3, r2
 8008230:	b29a      	uxth	r2, r3
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	3304      	adds	r3, #4
 8008236:	b212      	sxth	r2, r2
 8008238:	801a      	strh	r2, [r3, #0]
		fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
		fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
		fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;

	}
}
 800823a:	e040      	b.n	80082be <ADXL_getAccel+0xf2>
	else if (outputType == OUTPUT_FLOAT){
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d13d      	bne.n	80082be <ADXL_getAccel+0xf2>
		float * fdata = Data;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	617b      	str	r3, [r7, #20]
		fdata[0] = ( (int16_t) ((data[1]*256+data[0])))*GAINX;
 8008246:	7a7b      	ldrb	r3, [r7, #9]
 8008248:	021b      	lsls	r3, r3, #8
 800824a:	b29b      	uxth	r3, r3
 800824c:	7a3a      	ldrb	r2, [r7, #8]
 800824e:	4413      	add	r3, r2
 8008250:	b29b      	uxth	r3, r3
 8008252:	b21b      	sxth	r3, r3
 8008254:	4618      	mov	r0, r3
 8008256:	f7f8 fd11 	bl	8000c7c <__aeabi_i2f>
 800825a:	4602      	mov	r2, r0
 800825c:	4b1b      	ldr	r3, [pc, #108]	@ (80082cc <ADXL_getAccel+0x100>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4619      	mov	r1, r3
 8008262:	4610      	mov	r0, r2
 8008264:	f7f8 fd5e 	bl	8000d24 <__aeabi_fmul>
 8008268:	4603      	mov	r3, r0
 800826a:	461a      	mov	r2, r3
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	601a      	str	r2, [r3, #0]
		fdata[1] = ( (int16_t) ((data[3]*256+data[2])))*GAINY;
 8008270:	7afb      	ldrb	r3, [r7, #11]
 8008272:	021b      	lsls	r3, r3, #8
 8008274:	b29b      	uxth	r3, r3
 8008276:	7aba      	ldrb	r2, [r7, #10]
 8008278:	4413      	add	r3, r2
 800827a:	b29b      	uxth	r3, r3
 800827c:	b21b      	sxth	r3, r3
 800827e:	4618      	mov	r0, r3
 8008280:	f7f8 fcfc 	bl	8000c7c <__aeabi_i2f>
 8008284:	4b12      	ldr	r3, [pc, #72]	@ (80082d0 <ADXL_getAccel+0x104>)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	1d1c      	adds	r4, r3, #4
 800828c:	4611      	mov	r1, r2
 800828e:	f7f8 fd49 	bl	8000d24 <__aeabi_fmul>
 8008292:	4603      	mov	r3, r0
 8008294:	6023      	str	r3, [r4, #0]
		fdata[2] = ( (int16_t) ((data[5]*256+data[4])))*GAINZ;
 8008296:	7b7b      	ldrb	r3, [r7, #13]
 8008298:	021b      	lsls	r3, r3, #8
 800829a:	b29b      	uxth	r3, r3
 800829c:	7b3a      	ldrb	r2, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	b21b      	sxth	r3, r3
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7f8 fce9 	bl	8000c7c <__aeabi_i2f>
 80082aa:	4b0a      	ldr	r3, [pc, #40]	@ (80082d4 <ADXL_getAccel+0x108>)
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f103 0408 	add.w	r4, r3, #8
 80082b4:	4611      	mov	r1, r2
 80082b6:	f7f8 fd35 	bl	8000d24 <__aeabi_fmul>
 80082ba:	4603      	mov	r3, r0
 80082bc:	6023      	str	r3, [r4, #0]
}
 80082be:	bf00      	nop
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd90      	pop	{r4, r7, pc}
 80082c6:	bf00      	nop
 80082c8:	0800b154 	.word	0x0800b154
 80082cc:	2000055c 	.word	0x2000055c
 80082d0:	20000560 	.word	0x20000560
 80082d4:	20000564 	.word	0x20000564

080082d8 <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF

*/
void ADXL_Measure(Switch s)
		{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 80082e2:	f107 030f 	add.w	r3, r7, #15
 80082e6:	2201      	movs	r2, #1
 80082e8:	4619      	mov	r1, r3
 80082ea:	202d      	movs	r0, #45	@ 0x2d
 80082ec:	f7ff fe38 	bl	8007f60 <readRegister>
			switch (s) {
 80082f0:	79fb      	ldrb	r3, [r7, #7]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <ADXL_Measure+0x24>
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d010      	beq.n	800831c <ADXL_Measure+0x44>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,reg);
				break;
				}
		}
 80082fa:	e01a      	b.n	8008332 <ADXL_Measure+0x5a>
				reg &= ~(1<<2);
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	f023 0304 	bic.w	r3, r3, #4
 8008302:	b2db      	uxtb	r3, r3
 8008304:	73fb      	strb	r3, [r7, #15]
				reg |= (1<<3);
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	f043 0308 	orr.w	r3, r3, #8
 800830c:	b2db      	uxtb	r3, r3
 800830e:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	4619      	mov	r1, r3
 8008314:	202d      	movs	r0, #45	@ 0x2d
 8008316:	f7ff fe03 	bl	8007f20 <writeRegister>
				break;
 800831a:	e00a      	b.n	8008332 <ADXL_Measure+0x5a>
				reg &= ~(1<<3);
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	f023 0308 	bic.w	r3, r3, #8
 8008322:	b2db      	uxtb	r3, r3
 8008324:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	4619      	mov	r1, r3
 800832a:	202d      	movs	r0, #45	@ 0x2d
 800832c:	f7ff fdf8 	bl	8007f20 <writeRegister>
				break;
 8008330:	bf00      	nop
		}
 8008332:	bf00      	nop
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <IMU_Init>:
#include "../Inc/ImuSensor.h"

ADXL_InitTypeDef IMUSensor;
adxlStatus initSuccess;

void IMU_Init(){
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
	IMUSensor.IntMode = INT_ACTIVEHIGH;
 8008342:	4b15      	ldr	r3, [pc, #84]	@ (8008398 <IMU_Init+0x5c>)
 8008344:	2200      	movs	r2, #0
 8008346:	701a      	strb	r2, [r3, #0]
	IMUSensor.AutoSleep = AUTOSLEEPOFF;
 8008348:	4b13      	ldr	r3, [pc, #76]	@ (8008398 <IMU_Init+0x5c>)
 800834a:	2200      	movs	r2, #0
 800834c:	719a      	strb	r2, [r3, #6]
	IMUSensor.Justify = JUSTIFY_SIGNED;
 800834e:	4b12      	ldr	r3, [pc, #72]	@ (8008398 <IMU_Init+0x5c>)
 8008350:	2200      	movs	r2, #0
 8008352:	715a      	strb	r2, [r3, #5]
	IMUSensor.LPMode = LPMODE_NORMAL;
 8008354:	4b10      	ldr	r3, [pc, #64]	@ (8008398 <IMU_Init+0x5c>)
 8008356:	2200      	movs	r2, #0
 8008358:	705a      	strb	r2, [r3, #1]
	IMUSensor.LinkMode = LINKMODEOFF;
 800835a:	4b0f      	ldr	r3, [pc, #60]	@ (8008398 <IMU_Init+0x5c>)
 800835c:	2200      	movs	r2, #0
 800835e:	71da      	strb	r2, [r3, #7]
	IMUSensor.Range = RANGE_16G;
 8008360:	4b0d      	ldr	r3, [pc, #52]	@ (8008398 <IMU_Init+0x5c>)
 8008362:	2203      	movs	r2, #3
 8008364:	70da      	strb	r2, [r3, #3]
	IMUSensor.Rate = BWRATE_400;
 8008366:	4b0c      	ldr	r3, [pc, #48]	@ (8008398 <IMU_Init+0x5c>)
 8008368:	220c      	movs	r2, #12
 800836a:	709a      	strb	r2, [r3, #2]
	IMUSensor.Resolution = RESOLUTION_10BIT;
 800836c:	4b0a      	ldr	r3, [pc, #40]	@ (8008398 <IMU_Init+0x5c>)
 800836e:	2200      	movs	r2, #0
 8008370:	711a      	strb	r2, [r3, #4]

	adxlStatus status =  ADXL_Init(&IMUSensor);
 8008372:	4809      	ldr	r0, [pc, #36]	@ (8008398 <IMU_Init+0x5c>)
 8008374:	f7ff fe84 	bl	8008080 <ADXL_Init>
 8008378:	4603      	mov	r3, r0
 800837a:	71fb      	strb	r3, [r7, #7]
	if(status == ADXL_OK){
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d102      	bne.n	8008388 <IMU_Init+0x4c>
		ADXL_Measure(ON);
 8008382:	2000      	movs	r0, #0
 8008384:	f7ff ffa8 	bl	80082d8 <ADXL_Measure>
	}
	initSuccess = status;
 8008388:	4a04      	ldr	r2, [pc, #16]	@ (800839c <IMU_Init+0x60>)
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	7013      	strb	r3, [r2, #0]
}
 800838e:	bf00      	nop
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000568 	.word	0x20000568
 800839c:	20000570 	.word	0x20000570

080083a0 <IMU_Compute>:

void IMU_Compute(uint16_t* result){
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
	if(initSuccess != ADXL_OK) return;
 80083a8:	4b0f      	ldr	r3, [pc, #60]	@ (80083e8 <IMU_Compute+0x48>)
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d116      	bne.n	80083de <IMU_Compute+0x3e>
	uint16_t accel_buffer[3] = {0};
 80083b0:	f107 0308 	add.w	r3, r7, #8
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	809a      	strh	r2, [r3, #4]

	ADXL_getAccel(accel_buffer, OUTPUT_SIGNED);
 80083ba:	f107 0308 	add.w	r3, r7, #8
 80083be:	2101      	movs	r1, #1
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff ff03 	bl	80081cc <ADXL_getAccel>

	result[0] = accel_buffer[0];
 80083c6:	893a      	ldrh	r2, [r7, #8]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	801a      	strh	r2, [r3, #0]
	result[1] = accel_buffer[1];
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	3302      	adds	r3, #2
 80083d0:	897a      	ldrh	r2, [r7, #10]
 80083d2:	801a      	strh	r2, [r3, #0]
	result[2] = accel_buffer[2];
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3304      	adds	r3, #4
 80083d8:	89ba      	ldrh	r2, [r7, #12]
 80083da:	801a      	strh	r2, [r3, #0]
 80083dc:	e000      	b.n	80083e0 <IMU_Compute+0x40>
	if(initSuccess != ADXL_OK) return;
 80083de:	bf00      	nop
}
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20000570 	.word	0x20000570

080083ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	4603      	mov	r3, r0
 80083f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80083fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80083fe:	2b84      	cmp	r3, #132	@ 0x84
 8008400:	d005      	beq.n	800840e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008402:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4413      	add	r3, r2
 800840a:	3303      	adds	r3, #3
 800840c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800840e:	68fb      	ldr	r3, [r7, #12]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	bc80      	pop	{r7}
 8008418:	4770      	bx	lr

0800841a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800841e:	f000 faf7 	bl	8008a10 <vTaskStartScheduler>
  
  return osOK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	bd80      	pop	{r7, pc}

08008428 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800842a:	b089      	sub	sp, #36	@ 0x24
 800842c:	af04      	add	r7, sp, #16
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d020      	beq.n	800847c <osThreadCreate+0x54>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d01c      	beq.n	800847c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685c      	ldr	r4, [r3, #4]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	691e      	ldr	r6, [r3, #16]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008454:	4618      	mov	r0, r3
 8008456:	f7ff ffc9 	bl	80083ec <makeFreeRtosPriority>
 800845a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008464:	9202      	str	r2, [sp, #8]
 8008466:	9301      	str	r3, [sp, #4]
 8008468:	9100      	str	r1, [sp, #0]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	4632      	mov	r2, r6
 800846e:	4629      	mov	r1, r5
 8008470:	4620      	mov	r0, r4
 8008472:	f000 f8e8 	bl	8008646 <xTaskCreateStatic>
 8008476:	4603      	mov	r3, r0
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	e01c      	b.n	80084b6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685c      	ldr	r4, [r3, #4]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008488:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff ffab 	bl	80083ec <makeFreeRtosPriority>
 8008496:	4602      	mov	r2, r0
 8008498:	f107 030c 	add.w	r3, r7, #12
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	9200      	str	r2, [sp, #0]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	4632      	mov	r2, r6
 80084a4:	4629      	mov	r1, r5
 80084a6:	4620      	mov	r0, r4
 80084a8:	f000 f92d 	bl	8008706 <xTaskCreate>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d001      	beq.n	80084b6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	e000      	b.n	80084b8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80084b6:	68fb      	ldr	r3, [r7, #12]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084c0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <osDelay+0x16>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	e000      	b.n	80084d8 <osDelay+0x18>
 80084d6:	2301      	movs	r3, #1
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fa63 	bl	80089a4 <vTaskDelay>
  
  return osOK;
 80084de:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f103 0208 	add.w	r2, r3, #8
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008500:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f103 0208 	add.w	r2, r3, #8
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f103 0208 	add.w	r2, r3, #8
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	bc80      	pop	{r7}
 8008524:	4770      	bx	lr

08008526 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008526:	b480      	push	{r7}
 8008528:	b083      	sub	sp, #12
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	bc80      	pop	{r7}
 800853c:	4770      	bx	lr

0800853e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	683a      	ldr	r2, [r7, #0]
 8008562:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	1c5a      	adds	r2, r3, #1
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	601a      	str	r2, [r3, #0]
}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	bc80      	pop	{r7}
 8008582:	4770      	bx	lr

08008584 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859a:	d103      	bne.n	80085a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	e00c      	b.n	80085be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	3308      	adds	r3, #8
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	e002      	b.n	80085b2 <vListInsert+0x2e>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	60fb      	str	r3, [r7, #12]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d2f6      	bcs.n	80085ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	1c5a      	adds	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	601a      	str	r2, [r3, #0]
}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bc80      	pop	{r7}
 80085f2:	4770      	bx	lr

080085f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6892      	ldr	r2, [r2, #8]
 800860a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	6852      	ldr	r2, [r2, #4]
 8008614:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	429a      	cmp	r2, r3
 800861e:	d103      	bne.n	8008628 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689a      	ldr	r2, [r3, #8]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	1e5a      	subs	r2, r3, #1
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr

08008646 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008646:	b580      	push	{r7, lr}
 8008648:	b08e      	sub	sp, #56	@ 0x38
 800864a:	af04      	add	r7, sp, #16
 800864c:	60f8      	str	r0, [r7, #12]
 800864e:	60b9      	str	r1, [r7, #8]
 8008650:	607a      	str	r2, [r7, #4]
 8008652:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10b      	bne.n	8008672 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800865a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800866c:	bf00      	nop
 800866e:	bf00      	nop
 8008670:	e7fd      	b.n	800866e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10b      	bne.n	8008690 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867c:	f383 8811 	msr	BASEPRI, r3
 8008680:	f3bf 8f6f 	isb	sy
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	61fb      	str	r3, [r7, #28]
}
 800868a:	bf00      	nop
 800868c:	bf00      	nop
 800868e:	e7fd      	b.n	800868c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008690:	23a0      	movs	r3, #160	@ 0xa0
 8008692:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	2ba0      	cmp	r3, #160	@ 0xa0
 8008698:	d00b      	beq.n	80086b2 <xTaskCreateStatic+0x6c>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	61bb      	str	r3, [r7, #24]
}
 80086ac:	bf00      	nop
 80086ae:	bf00      	nop
 80086b0:	e7fd      	b.n	80086ae <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d01e      	beq.n	80086f8 <xTaskCreateStatic+0xb2>
 80086ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d01b      	beq.n	80086f8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086c8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	2202      	movs	r2, #2
 80086ce:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086d2:	2300      	movs	r3, #0
 80086d4:	9303      	str	r3, [sp, #12]
 80086d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d8:	9302      	str	r3, [sp, #8]
 80086da:	f107 0314 	add.w	r3, r7, #20
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	68b9      	ldr	r1, [r7, #8]
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f000 f850 	bl	8008790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80086f2:	f000 f8ed 	bl	80088d0 <prvAddNewTaskToReadyList>
 80086f6:	e001      	b.n	80086fc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80086f8:	2300      	movs	r3, #0
 80086fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086fc:	697b      	ldr	r3, [r7, #20]
	}
 80086fe:	4618      	mov	r0, r3
 8008700:	3728      	adds	r7, #40	@ 0x28
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008706:	b580      	push	{r7, lr}
 8008708:	b08c      	sub	sp, #48	@ 0x30
 800870a:	af04      	add	r7, sp, #16
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	603b      	str	r3, [r7, #0]
 8008712:	4613      	mov	r3, r2
 8008714:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008716:	88fb      	ldrh	r3, [r7, #6]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fea0 	bl	8009460 <pvPortMalloc>
 8008720:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00e      	beq.n	8008746 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008728:	20a0      	movs	r0, #160	@ 0xa0
 800872a:	f000 fe99 	bl	8009460 <pvPortMalloc>
 800872e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	631a      	str	r2, [r3, #48]	@ 0x30
 800873c:	e005      	b.n	800874a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800873e:	6978      	ldr	r0, [r7, #20]
 8008740:	f000 ff5c 	bl	80095fc <vPortFree>
 8008744:	e001      	b.n	800874a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008746:	2300      	movs	r3, #0
 8008748:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d017      	beq.n	8008780 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008758:	88fa      	ldrh	r2, [r7, #6]
 800875a:	2300      	movs	r3, #0
 800875c:	9303      	str	r3, [sp, #12]
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	9302      	str	r3, [sp, #8]
 8008762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 f80e 	bl	8008790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008774:	69f8      	ldr	r0, [r7, #28]
 8008776:	f000 f8ab 	bl	80088d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800877a:	2301      	movs	r3, #1
 800877c:	61bb      	str	r3, [r7, #24]
 800877e:	e002      	b.n	8008786 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008780:	f04f 33ff 	mov.w	r3, #4294967295
 8008784:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008786:	69bb      	ldr	r3, [r7, #24]
	}
 8008788:	4618      	mov	r0, r3
 800878a:	3720      	adds	r7, #32
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
 800879c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80087a8:	3b01      	subs	r3, #1
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	f023 0307 	bic.w	r3, r3, #7
 80087b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00b      	beq.n	80087da <prvInitialiseNewTask+0x4a>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	617b      	str	r3, [r7, #20]
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop
 80087d8:	e7fd      	b.n	80087d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d01f      	beq.n	8008820 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087e0:	2300      	movs	r3, #0
 80087e2:	61fb      	str	r3, [r7, #28]
 80087e4:	e012      	b.n	800880c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	4413      	add	r3, r2
 80087ec:	7819      	ldrb	r1, [r3, #0]
 80087ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	4413      	add	r3, r2
 80087f4:	3334      	adds	r3, #52	@ 0x34
 80087f6:	460a      	mov	r2, r1
 80087f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	4413      	add	r3, r2
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d006      	beq.n	8008814 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	3301      	adds	r3, #1
 800880a:	61fb      	str	r3, [r7, #28]
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	2b0f      	cmp	r3, #15
 8008810:	d9e9      	bls.n	80087e6 <prvInitialiseNewTask+0x56>
 8008812:	e000      	b.n	8008816 <prvInitialiseNewTask+0x86>
			{
				break;
 8008814:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800881e:	e003      	b.n	8008828 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882a:	2b06      	cmp	r3, #6
 800882c:	d901      	bls.n	8008832 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800882e:	2306      	movs	r3, #6
 8008830:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008834:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008836:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800883c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800883e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008840:	2200      	movs	r2, #0
 8008842:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008846:	3304      	adds	r3, #4
 8008848:	4618      	mov	r0, r3
 800884a:	f7ff fe6c 	bl	8008526 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	3318      	adds	r3, #24
 8008852:	4618      	mov	r0, r3
 8008854:	f7ff fe67 	bl	8008526 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800885c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800885e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008860:	f1c3 0207 	rsb	r2, r3, #7
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800886c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800886e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008870:	2200      	movs	r2, #0
 8008872:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008878:	2200      	movs	r2, #0
 800887a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800887e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008880:	334c      	adds	r3, #76	@ 0x4c
 8008882:	224c      	movs	r2, #76	@ 0x4c
 8008884:	2100      	movs	r1, #0
 8008886:	4618      	mov	r0, r3
 8008888:	f001 fb9e 	bl	8009fc8 <memset>
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	4a0d      	ldr	r2, [pc, #52]	@ (80088c4 <prvInitialiseNewTask+0x134>)
 8008890:	651a      	str	r2, [r3, #80]	@ 0x50
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	4a0c      	ldr	r2, [pc, #48]	@ (80088c8 <prvInitialiseNewTask+0x138>)
 8008896:	655a      	str	r2, [r3, #84]	@ 0x54
 8008898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889a:	4a0c      	ldr	r2, [pc, #48]	@ (80088cc <prvInitialiseNewTask+0x13c>)
 800889c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	68f9      	ldr	r1, [r7, #12]
 80088a2:	69b8      	ldr	r0, [r7, #24]
 80088a4:	f000 fc28 	bl	80090f8 <pxPortInitialiseStack>
 80088a8:	4602      	mov	r2, r0
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088ba:	bf00      	nop
 80088bc:	3720      	adds	r7, #32
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20001304 	.word	0x20001304
 80088c8:	2000136c 	.word	0x2000136c
 80088cc:	200013d4 	.word	0x200013d4

080088d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088d8:	f000 fd00 	bl	80092dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088dc:	4b2a      	ldr	r3, [pc, #168]	@ (8008988 <prvAddNewTaskToReadyList+0xb8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3301      	adds	r3, #1
 80088e2:	4a29      	ldr	r2, [pc, #164]	@ (8008988 <prvAddNewTaskToReadyList+0xb8>)
 80088e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088e6:	4b29      	ldr	r3, [pc, #164]	@ (800898c <prvAddNewTaskToReadyList+0xbc>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d109      	bne.n	8008902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088ee:	4a27      	ldr	r2, [pc, #156]	@ (800898c <prvAddNewTaskToReadyList+0xbc>)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088f4:	4b24      	ldr	r3, [pc, #144]	@ (8008988 <prvAddNewTaskToReadyList+0xb8>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d110      	bne.n	800891e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088fc:	f000 fad2 	bl	8008ea4 <prvInitialiseTaskLists>
 8008900:	e00d      	b.n	800891e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008902:	4b23      	ldr	r3, [pc, #140]	@ (8008990 <prvAddNewTaskToReadyList+0xc0>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d109      	bne.n	800891e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800890a:	4b20      	ldr	r3, [pc, #128]	@ (800898c <prvAddNewTaskToReadyList+0xbc>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008914:	429a      	cmp	r2, r3
 8008916:	d802      	bhi.n	800891e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008918:	4a1c      	ldr	r2, [pc, #112]	@ (800898c <prvAddNewTaskToReadyList+0xbc>)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800891e:	4b1d      	ldr	r3, [pc, #116]	@ (8008994 <prvAddNewTaskToReadyList+0xc4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3301      	adds	r3, #1
 8008924:	4a1b      	ldr	r2, [pc, #108]	@ (8008994 <prvAddNewTaskToReadyList+0xc4>)
 8008926:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892c:	2201      	movs	r2, #1
 800892e:	409a      	lsls	r2, r3
 8008930:	4b19      	ldr	r3, [pc, #100]	@ (8008998 <prvAddNewTaskToReadyList+0xc8>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4313      	orrs	r3, r2
 8008936:	4a18      	ldr	r2, [pc, #96]	@ (8008998 <prvAddNewTaskToReadyList+0xc8>)
 8008938:	6013      	str	r3, [r2, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4a15      	ldr	r2, [pc, #84]	@ (800899c <prvAddNewTaskToReadyList+0xcc>)
 8008948:	441a      	add	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3304      	adds	r3, #4
 800894e:	4619      	mov	r1, r3
 8008950:	4610      	mov	r0, r2
 8008952:	f7ff fdf4 	bl	800853e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008956:	f000 fcf1 	bl	800933c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800895a:	4b0d      	ldr	r3, [pc, #52]	@ (8008990 <prvAddNewTaskToReadyList+0xc0>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00e      	beq.n	8008980 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008962:	4b0a      	ldr	r3, [pc, #40]	@ (800898c <prvAddNewTaskToReadyList+0xbc>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896c:	429a      	cmp	r2, r3
 800896e:	d207      	bcs.n	8008980 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008970:	4b0b      	ldr	r3, [pc, #44]	@ (80089a0 <prvAddNewTaskToReadyList+0xd0>)
 8008972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	20000674 	.word	0x20000674
 800898c:	20000574 	.word	0x20000574
 8008990:	20000680 	.word	0x20000680
 8008994:	20000690 	.word	0x20000690
 8008998:	2000067c 	.word	0x2000067c
 800899c:	20000578 	.word	0x20000578
 80089a0:	e000ed04 	.word	0xe000ed04

080089a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d018      	beq.n	80089e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089b6:	4b14      	ldr	r3, [pc, #80]	@ (8008a08 <vTaskDelay+0x64>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00b      	beq.n	80089d6 <vTaskDelay+0x32>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	60bb      	str	r3, [r7, #8]
}
 80089d0:	bf00      	nop
 80089d2:	bf00      	nop
 80089d4:	e7fd      	b.n	80089d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089d6:	f000 f885 	bl	8008ae4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089da:	2100      	movs	r1, #0
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fb25 	bl	800902c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089e2:	f000 f88d 	bl	8008b00 <xTaskResumeAll>
 80089e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d107      	bne.n	80089fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80089ee:	4b07      	ldr	r3, [pc, #28]	@ (8008a0c <vTaskDelay+0x68>)
 80089f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089f4:	601a      	str	r2, [r3, #0]
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089fe:	bf00      	nop
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	2000069c 	.word	0x2000069c
 8008a0c:	e000ed04 	.word	0xe000ed04

08008a10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b08a      	sub	sp, #40	@ 0x28
 8008a14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a1e:	463a      	mov	r2, r7
 8008a20:	1d39      	adds	r1, r7, #4
 8008a22:	f107 0308 	add.w	r3, r7, #8
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7f8 fc14 	bl	8001254 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	9202      	str	r2, [sp, #8]
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	2300      	movs	r3, #0
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	460a      	mov	r2, r1
 8008a3e:	4921      	ldr	r1, [pc, #132]	@ (8008ac4 <vTaskStartScheduler+0xb4>)
 8008a40:	4821      	ldr	r0, [pc, #132]	@ (8008ac8 <vTaskStartScheduler+0xb8>)
 8008a42:	f7ff fe00 	bl	8008646 <xTaskCreateStatic>
 8008a46:	4603      	mov	r3, r0
 8008a48:	4a20      	ldr	r2, [pc, #128]	@ (8008acc <vTaskStartScheduler+0xbc>)
 8008a4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8008acc <vTaskStartScheduler+0xbc>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a54:	2301      	movs	r3, #1
 8008a56:	617b      	str	r3, [r7, #20]
 8008a58:	e001      	b.n	8008a5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d11b      	bne.n	8008a9c <vTaskStartScheduler+0x8c>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	613b      	str	r3, [r7, #16]
}
 8008a76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a78:	4b15      	ldr	r3, [pc, #84]	@ (8008ad0 <vTaskStartScheduler+0xc0>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	334c      	adds	r3, #76	@ 0x4c
 8008a7e:	4a15      	ldr	r2, [pc, #84]	@ (8008ad4 <vTaskStartScheduler+0xc4>)
 8008a80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a82:	4b15      	ldr	r3, [pc, #84]	@ (8008ad8 <vTaskStartScheduler+0xc8>)
 8008a84:	f04f 32ff 	mov.w	r2, #4294967295
 8008a88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a8a:	4b14      	ldr	r3, [pc, #80]	@ (8008adc <vTaskStartScheduler+0xcc>)
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a90:	4b13      	ldr	r3, [pc, #76]	@ (8008ae0 <vTaskStartScheduler+0xd0>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a96:	f000 fbaf 	bl	80091f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a9a:	e00f      	b.n	8008abc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa2:	d10b      	bne.n	8008abc <vTaskStartScheduler+0xac>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	60fb      	str	r3, [r7, #12]
}
 8008ab6:	bf00      	nop
 8008ab8:	bf00      	nop
 8008aba:	e7fd      	b.n	8008ab8 <vTaskStartScheduler+0xa8>
}
 8008abc:	bf00      	nop
 8008abe:	3718      	adds	r7, #24
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	0800b15c 	.word	0x0800b15c
 8008ac8:	08008e75 	.word	0x08008e75
 8008acc:	20000698 	.word	0x20000698
 8008ad0:	20000574 	.word	0x20000574
 8008ad4:	2000001c 	.word	0x2000001c
 8008ad8:	20000694 	.word	0x20000694
 8008adc:	20000680 	.word	0x20000680
 8008ae0:	20000678 	.word	0x20000678

08008ae4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ae8:	4b04      	ldr	r3, [pc, #16]	@ (8008afc <vTaskSuspendAll+0x18>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3301      	adds	r3, #1
 8008aee:	4a03      	ldr	r2, [pc, #12]	@ (8008afc <vTaskSuspendAll+0x18>)
 8008af0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008af2:	bf00      	nop
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc80      	pop	{r7}
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	2000069c 	.word	0x2000069c

08008b00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b0e:	4b42      	ldr	r3, [pc, #264]	@ (8008c18 <xTaskResumeAll+0x118>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10b      	bne.n	8008b2e <xTaskResumeAll+0x2e>
	__asm volatile
 8008b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	603b      	str	r3, [r7, #0]
}
 8008b28:	bf00      	nop
 8008b2a:	bf00      	nop
 8008b2c:	e7fd      	b.n	8008b2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b2e:	f000 fbd5 	bl	80092dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b32:	4b39      	ldr	r3, [pc, #228]	@ (8008c18 <xTaskResumeAll+0x118>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3b01      	subs	r3, #1
 8008b38:	4a37      	ldr	r2, [pc, #220]	@ (8008c18 <xTaskResumeAll+0x118>)
 8008b3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b3c:	4b36      	ldr	r3, [pc, #216]	@ (8008c18 <xTaskResumeAll+0x118>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d161      	bne.n	8008c08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b44:	4b35      	ldr	r3, [pc, #212]	@ (8008c1c <xTaskResumeAll+0x11c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d05d      	beq.n	8008c08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b4c:	e02e      	b.n	8008bac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b4e:	4b34      	ldr	r3, [pc, #208]	@ (8008c20 <xTaskResumeAll+0x120>)
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3318      	adds	r3, #24
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff fd4a 	bl	80085f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3304      	adds	r3, #4
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7ff fd45 	bl	80085f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6e:	2201      	movs	r2, #1
 8008b70:	409a      	lsls	r2, r3
 8008b72:	4b2c      	ldr	r3, [pc, #176]	@ (8008c24 <xTaskResumeAll+0x124>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	4a2a      	ldr	r2, [pc, #168]	@ (8008c24 <xTaskResumeAll+0x124>)
 8008b7a:	6013      	str	r3, [r2, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b80:	4613      	mov	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4a27      	ldr	r2, [pc, #156]	@ (8008c28 <xTaskResumeAll+0x128>)
 8008b8a:	441a      	add	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	4619      	mov	r1, r3
 8008b92:	4610      	mov	r0, r2
 8008b94:	f7ff fcd3 	bl	800853e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b9c:	4b23      	ldr	r3, [pc, #140]	@ (8008c2c <xTaskResumeAll+0x12c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d302      	bcc.n	8008bac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008ba6:	4b22      	ldr	r3, [pc, #136]	@ (8008c30 <xTaskResumeAll+0x130>)
 8008ba8:	2201      	movs	r2, #1
 8008baa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bac:	4b1c      	ldr	r3, [pc, #112]	@ (8008c20 <xTaskResumeAll+0x120>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1cc      	bne.n	8008b4e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bba:	f000 fa17 	bl	8008fec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8008c34 <xTaskResumeAll+0x134>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d010      	beq.n	8008bec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008bca:	f000 f837 	bl	8008c3c <xTaskIncrementTick>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d002      	beq.n	8008bda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008bd4:	4b16      	ldr	r3, [pc, #88]	@ (8008c30 <xTaskResumeAll+0x130>)
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1f1      	bne.n	8008bca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008be6:	4b13      	ldr	r3, [pc, #76]	@ (8008c34 <xTaskResumeAll+0x134>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008bec:	4b10      	ldr	r3, [pc, #64]	@ (8008c30 <xTaskResumeAll+0x130>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d009      	beq.n	8008c08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8008c38 <xTaskResumeAll+0x138>)
 8008bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c08:	f000 fb98 	bl	800933c <vPortExitCritical>

	return xAlreadyYielded;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	2000069c 	.word	0x2000069c
 8008c1c:	20000674 	.word	0x20000674
 8008c20:	20000634 	.word	0x20000634
 8008c24:	2000067c 	.word	0x2000067c
 8008c28:	20000578 	.word	0x20000578
 8008c2c:	20000574 	.word	0x20000574
 8008c30:	20000688 	.word	0x20000688
 8008c34:	20000684 	.word	0x20000684
 8008c38:	e000ed04 	.word	0xe000ed04

08008c3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c42:	2300      	movs	r3, #0
 8008c44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c46:	4b4f      	ldr	r3, [pc, #316]	@ (8008d84 <xTaskIncrementTick+0x148>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f040 808f 	bne.w	8008d6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c50:	4b4d      	ldr	r3, [pc, #308]	@ (8008d88 <xTaskIncrementTick+0x14c>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3301      	adds	r3, #1
 8008c56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c58:	4a4b      	ldr	r2, [pc, #300]	@ (8008d88 <xTaskIncrementTick+0x14c>)
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d121      	bne.n	8008ca8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c64:	4b49      	ldr	r3, [pc, #292]	@ (8008d8c <xTaskIncrementTick+0x150>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00b      	beq.n	8008c86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	603b      	str	r3, [r7, #0]
}
 8008c80:	bf00      	nop
 8008c82:	bf00      	nop
 8008c84:	e7fd      	b.n	8008c82 <xTaskIncrementTick+0x46>
 8008c86:	4b41      	ldr	r3, [pc, #260]	@ (8008d8c <xTaskIncrementTick+0x150>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	4b40      	ldr	r3, [pc, #256]	@ (8008d90 <xTaskIncrementTick+0x154>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a3e      	ldr	r2, [pc, #248]	@ (8008d8c <xTaskIncrementTick+0x150>)
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	4a3e      	ldr	r2, [pc, #248]	@ (8008d90 <xTaskIncrementTick+0x154>)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8008d94 <xTaskIncrementTick+0x158>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	4a3c      	ldr	r2, [pc, #240]	@ (8008d94 <xTaskIncrementTick+0x158>)
 8008ca2:	6013      	str	r3, [r2, #0]
 8008ca4:	f000 f9a2 	bl	8008fec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8008d98 <xTaskIncrementTick+0x15c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d348      	bcc.n	8008d44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cb2:	4b36      	ldr	r3, [pc, #216]	@ (8008d8c <xTaskIncrementTick+0x150>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d104      	bne.n	8008cc6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cbc:	4b36      	ldr	r3, [pc, #216]	@ (8008d98 <xTaskIncrementTick+0x15c>)
 8008cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc2:	601a      	str	r2, [r3, #0]
					break;
 8008cc4:	e03e      	b.n	8008d44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cc6:	4b31      	ldr	r3, [pc, #196]	@ (8008d8c <xTaskIncrementTick+0x150>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d203      	bcs.n	8008ce6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cde:	4a2e      	ldr	r2, [pc, #184]	@ (8008d98 <xTaskIncrementTick+0x15c>)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ce4:	e02e      	b.n	8008d44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7ff fc82 	bl	80085f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	3318      	adds	r3, #24
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7ff fc79 	bl	80085f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d06:	2201      	movs	r2, #1
 8008d08:	409a      	lsls	r2, r3
 8008d0a:	4b24      	ldr	r3, [pc, #144]	@ (8008d9c <xTaskIncrementTick+0x160>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	4a22      	ldr	r2, [pc, #136]	@ (8008d9c <xTaskIncrementTick+0x160>)
 8008d12:	6013      	str	r3, [r2, #0]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d18:	4613      	mov	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4a1f      	ldr	r2, [pc, #124]	@ (8008da0 <xTaskIncrementTick+0x164>)
 8008d22:	441a      	add	r2, r3
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	3304      	adds	r3, #4
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	f7ff fc07 	bl	800853e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d34:	4b1b      	ldr	r3, [pc, #108]	@ (8008da4 <xTaskIncrementTick+0x168>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d3b9      	bcc.n	8008cb2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d42:	e7b6      	b.n	8008cb2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d44:	4b17      	ldr	r3, [pc, #92]	@ (8008da4 <xTaskIncrementTick+0x168>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d4a:	4915      	ldr	r1, [pc, #84]	@ (8008da0 <xTaskIncrementTick+0x164>)
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	440b      	add	r3, r1
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d901      	bls.n	8008d60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d60:	4b11      	ldr	r3, [pc, #68]	@ (8008da8 <xTaskIncrementTick+0x16c>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d007      	beq.n	8008d78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	617b      	str	r3, [r7, #20]
 8008d6c:	e004      	b.n	8008d78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008dac <xTaskIncrementTick+0x170>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	4a0d      	ldr	r2, [pc, #52]	@ (8008dac <xTaskIncrementTick+0x170>)
 8008d76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d78:	697b      	ldr	r3, [r7, #20]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3718      	adds	r7, #24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	2000069c 	.word	0x2000069c
 8008d88:	20000678 	.word	0x20000678
 8008d8c:	2000062c 	.word	0x2000062c
 8008d90:	20000630 	.word	0x20000630
 8008d94:	2000068c 	.word	0x2000068c
 8008d98:	20000694 	.word	0x20000694
 8008d9c:	2000067c 	.word	0x2000067c
 8008da0:	20000578 	.word	0x20000578
 8008da4:	20000574 	.word	0x20000574
 8008da8:	20000688 	.word	0x20000688
 8008dac:	20000684 	.word	0x20000684

08008db0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008db6:	4b29      	ldr	r3, [pc, #164]	@ (8008e5c <vTaskSwitchContext+0xac>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008dbe:	4b28      	ldr	r3, [pc, #160]	@ (8008e60 <vTaskSwitchContext+0xb0>)
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008dc4:	e045      	b.n	8008e52 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008dc6:	4b26      	ldr	r3, [pc, #152]	@ (8008e60 <vTaskSwitchContext+0xb0>)
 8008dc8:	2200      	movs	r2, #0
 8008dca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dcc:	4b25      	ldr	r3, [pc, #148]	@ (8008e64 <vTaskSwitchContext+0xb4>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	fab3 f383 	clz	r3, r3
 8008dd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008dda:	7afb      	ldrb	r3, [r7, #11]
 8008ddc:	f1c3 031f 	rsb	r3, r3, #31
 8008de0:	617b      	str	r3, [r7, #20]
 8008de2:	4921      	ldr	r1, [pc, #132]	@ (8008e68 <vTaskSwitchContext+0xb8>)
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	4613      	mov	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4413      	add	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	440b      	add	r3, r1
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10b      	bne.n	8008e0e <vTaskSwitchContext+0x5e>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	607b      	str	r3, [r7, #4]
}
 8008e08:	bf00      	nop
 8008e0a:	bf00      	nop
 8008e0c:	e7fd      	b.n	8008e0a <vTaskSwitchContext+0x5a>
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4a13      	ldr	r2, [pc, #76]	@ (8008e68 <vTaskSwitchContext+0xb8>)
 8008e1a:	4413      	add	r3, r2
 8008e1c:	613b      	str	r3, [r7, #16]
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	605a      	str	r2, [r3, #4]
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	3308      	adds	r3, #8
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d104      	bne.n	8008e3e <vTaskSwitchContext+0x8e>
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	605a      	str	r2, [r3, #4]
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	4a09      	ldr	r2, [pc, #36]	@ (8008e6c <vTaskSwitchContext+0xbc>)
 8008e46:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e48:	4b08      	ldr	r3, [pc, #32]	@ (8008e6c <vTaskSwitchContext+0xbc>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	334c      	adds	r3, #76	@ 0x4c
 8008e4e:	4a08      	ldr	r2, [pc, #32]	@ (8008e70 <vTaskSwitchContext+0xc0>)
 8008e50:	6013      	str	r3, [r2, #0]
}
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bc80      	pop	{r7}
 8008e5a:	4770      	bx	lr
 8008e5c:	2000069c 	.word	0x2000069c
 8008e60:	20000688 	.word	0x20000688
 8008e64:	2000067c 	.word	0x2000067c
 8008e68:	20000578 	.word	0x20000578
 8008e6c:	20000574 	.word	0x20000574
 8008e70:	2000001c 	.word	0x2000001c

08008e74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e7c:	f000 f852 	bl	8008f24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e80:	4b06      	ldr	r3, [pc, #24]	@ (8008e9c <prvIdleTask+0x28>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d9f9      	bls.n	8008e7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e88:	4b05      	ldr	r3, [pc, #20]	@ (8008ea0 <prvIdleTask+0x2c>)
 8008e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e98:	e7f0      	b.n	8008e7c <prvIdleTask+0x8>
 8008e9a:	bf00      	nop
 8008e9c:	20000578 	.word	0x20000578
 8008ea0:	e000ed04 	.word	0xe000ed04

08008ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008eaa:	2300      	movs	r3, #0
 8008eac:	607b      	str	r3, [r7, #4]
 8008eae:	e00c      	b.n	8008eca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4a12      	ldr	r2, [pc, #72]	@ (8008f04 <prvInitialiseTaskLists+0x60>)
 8008ebc:	4413      	add	r3, r2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff fb12 	bl	80084e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	607b      	str	r3, [r7, #4]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b06      	cmp	r3, #6
 8008ece:	d9ef      	bls.n	8008eb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ed0:	480d      	ldr	r0, [pc, #52]	@ (8008f08 <prvInitialiseTaskLists+0x64>)
 8008ed2:	f7ff fb09 	bl	80084e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ed6:	480d      	ldr	r0, [pc, #52]	@ (8008f0c <prvInitialiseTaskLists+0x68>)
 8008ed8:	f7ff fb06 	bl	80084e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008edc:	480c      	ldr	r0, [pc, #48]	@ (8008f10 <prvInitialiseTaskLists+0x6c>)
 8008ede:	f7ff fb03 	bl	80084e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ee2:	480c      	ldr	r0, [pc, #48]	@ (8008f14 <prvInitialiseTaskLists+0x70>)
 8008ee4:	f7ff fb00 	bl	80084e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ee8:	480b      	ldr	r0, [pc, #44]	@ (8008f18 <prvInitialiseTaskLists+0x74>)
 8008eea:	f7ff fafd 	bl	80084e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008eee:	4b0b      	ldr	r3, [pc, #44]	@ (8008f1c <prvInitialiseTaskLists+0x78>)
 8008ef0:	4a05      	ldr	r2, [pc, #20]	@ (8008f08 <prvInitialiseTaskLists+0x64>)
 8008ef2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8008f20 <prvInitialiseTaskLists+0x7c>)
 8008ef6:	4a05      	ldr	r2, [pc, #20]	@ (8008f0c <prvInitialiseTaskLists+0x68>)
 8008ef8:	601a      	str	r2, [r3, #0]
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20000578 	.word	0x20000578
 8008f08:	20000604 	.word	0x20000604
 8008f0c:	20000618 	.word	0x20000618
 8008f10:	20000634 	.word	0x20000634
 8008f14:	20000648 	.word	0x20000648
 8008f18:	20000660 	.word	0x20000660
 8008f1c:	2000062c 	.word	0x2000062c
 8008f20:	20000630 	.word	0x20000630

08008f24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f2a:	e019      	b.n	8008f60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f2c:	f000 f9d6 	bl	80092dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f30:	4b10      	ldr	r3, [pc, #64]	@ (8008f74 <prvCheckTasksWaitingTermination+0x50>)
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7ff fb59 	bl	80085f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f42:	4b0d      	ldr	r3, [pc, #52]	@ (8008f78 <prvCheckTasksWaitingTermination+0x54>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	4a0b      	ldr	r2, [pc, #44]	@ (8008f78 <prvCheckTasksWaitingTermination+0x54>)
 8008f4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f7c <prvCheckTasksWaitingTermination+0x58>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	4a0a      	ldr	r2, [pc, #40]	@ (8008f7c <prvCheckTasksWaitingTermination+0x58>)
 8008f54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f56:	f000 f9f1 	bl	800933c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f810 	bl	8008f80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f60:	4b06      	ldr	r3, [pc, #24]	@ (8008f7c <prvCheckTasksWaitingTermination+0x58>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1e1      	bne.n	8008f2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f68:	bf00      	nop
 8008f6a:	bf00      	nop
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20000648 	.word	0x20000648
 8008f78:	20000674 	.word	0x20000674
 8008f7c:	2000065c 	.word	0x2000065c

08008f80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	334c      	adds	r3, #76	@ 0x4c
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f001 f823 	bl	8009fd8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d108      	bne.n	8008fae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 fb2b 	bl	80095fc <vPortFree>
				vPortFree( pxTCB );
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fb28 	bl	80095fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fac:	e019      	b.n	8008fe2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d103      	bne.n	8008fc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fb1f 	bl	80095fc <vPortFree>
	}
 8008fbe:	e010      	b.n	8008fe2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d00b      	beq.n	8008fe2 <prvDeleteTCB+0x62>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	60fb      	str	r3, [r7, #12]
}
 8008fdc:	bf00      	nop
 8008fde:	bf00      	nop
 8008fe0:	e7fd      	b.n	8008fde <prvDeleteTCB+0x5e>
	}
 8008fe2:	bf00      	nop
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
	...

08008fec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8009024 <prvResetNextTaskUnblockTime+0x38>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d104      	bne.n	8009006 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8009028 <prvResetNextTaskUnblockTime+0x3c>)
 8008ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8009002:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009004:	e008      	b.n	8009018 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009006:	4b07      	ldr	r3, [pc, #28]	@ (8009024 <prvResetNextTaskUnblockTime+0x38>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	4a04      	ldr	r2, [pc, #16]	@ (8009028 <prvResetNextTaskUnblockTime+0x3c>)
 8009016:	6013      	str	r3, [r2, #0]
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	bc80      	pop	{r7}
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	2000062c 	.word	0x2000062c
 8009028:	20000694 	.word	0x20000694

0800902c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009036:	4b29      	ldr	r3, [pc, #164]	@ (80090dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800903c:	4b28      	ldr	r3, [pc, #160]	@ (80090e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3304      	adds	r3, #4
 8009042:	4618      	mov	r0, r3
 8009044:	f7ff fad6 	bl	80085f4 <uxListRemove>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10b      	bne.n	8009066 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800904e:	4b24      	ldr	r3, [pc, #144]	@ (80090e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009054:	2201      	movs	r2, #1
 8009056:	fa02 f303 	lsl.w	r3, r2, r3
 800905a:	43da      	mvns	r2, r3
 800905c:	4b21      	ldr	r3, [pc, #132]	@ (80090e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4013      	ands	r3, r2
 8009062:	4a20      	ldr	r2, [pc, #128]	@ (80090e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009064:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906c:	d10a      	bne.n	8009084 <prvAddCurrentTaskToDelayedList+0x58>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d007      	beq.n	8009084 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009074:	4b1a      	ldr	r3, [pc, #104]	@ (80090e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	3304      	adds	r3, #4
 800907a:	4619      	mov	r1, r3
 800907c:	481a      	ldr	r0, [pc, #104]	@ (80090e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800907e:	f7ff fa5e 	bl	800853e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009082:	e026      	b.n	80090d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4413      	add	r3, r2
 800908a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800908c:	4b14      	ldr	r3, [pc, #80]	@ (80090e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	429a      	cmp	r2, r3
 800909a:	d209      	bcs.n	80090b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800909c:	4b13      	ldr	r3, [pc, #76]	@ (80090ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	4b0f      	ldr	r3, [pc, #60]	@ (80090e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3304      	adds	r3, #4
 80090a6:	4619      	mov	r1, r3
 80090a8:	4610      	mov	r0, r2
 80090aa:	f7ff fa6b 	bl	8008584 <vListInsert>
}
 80090ae:	e010      	b.n	80090d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090b0:	4b0f      	ldr	r3, [pc, #60]	@ (80090f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	4b0a      	ldr	r3, [pc, #40]	@ (80090e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3304      	adds	r3, #4
 80090ba:	4619      	mov	r1, r3
 80090bc:	4610      	mov	r0, r2
 80090be:	f7ff fa61 	bl	8008584 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090c2:	4b0c      	ldr	r3, [pc, #48]	@ (80090f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d202      	bcs.n	80090d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80090cc:	4a09      	ldr	r2, [pc, #36]	@ (80090f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	6013      	str	r3, [r2, #0]
}
 80090d2:	bf00      	nop
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20000678 	.word	0x20000678
 80090e0:	20000574 	.word	0x20000574
 80090e4:	2000067c 	.word	0x2000067c
 80090e8:	20000660 	.word	0x20000660
 80090ec:	20000630 	.word	0x20000630
 80090f0:	2000062c 	.word	0x2000062c
 80090f4:	20000694 	.word	0x20000694

080090f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3b04      	subs	r3, #4
 8009108:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3b04      	subs	r3, #4
 8009116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	f023 0201 	bic.w	r2, r3, #1
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3b04      	subs	r3, #4
 8009126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009128:	4a08      	ldr	r2, [pc, #32]	@ (800914c <pxPortInitialiseStack+0x54>)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3b14      	subs	r3, #20
 8009132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3b20      	subs	r3, #32
 800913e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009140:	68fb      	ldr	r3, [r7, #12]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	bc80      	pop	{r7}
 800914a:	4770      	bx	lr
 800914c:	08009151 	.word	0x08009151

08009150 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009156:	2300      	movs	r3, #0
 8009158:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800915a:	4b12      	ldr	r3, [pc, #72]	@ (80091a4 <prvTaskExitError+0x54>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009162:	d00b      	beq.n	800917c <prvTaskExitError+0x2c>
	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	60fb      	str	r3, [r7, #12]
}
 8009176:	bf00      	nop
 8009178:	bf00      	nop
 800917a:	e7fd      	b.n	8009178 <prvTaskExitError+0x28>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	60bb      	str	r3, [r7, #8]
}
 800918e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009190:	bf00      	nop
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d0fc      	beq.n	8009192 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009198:	bf00      	nop
 800919a:	bf00      	nop
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	bc80      	pop	{r7}
 80091a2:	4770      	bx	lr
 80091a4:	20000014 	.word	0x20000014
	...

080091b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091b0:	4b07      	ldr	r3, [pc, #28]	@ (80091d0 <pxCurrentTCBConst2>)
 80091b2:	6819      	ldr	r1, [r3, #0]
 80091b4:	6808      	ldr	r0, [r1, #0]
 80091b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80091ba:	f380 8809 	msr	PSP, r0
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f04f 0000 	mov.w	r0, #0
 80091c6:	f380 8811 	msr	BASEPRI, r0
 80091ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80091ce:	4770      	bx	lr

080091d0 <pxCurrentTCBConst2>:
 80091d0:	20000574 	.word	0x20000574
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop

080091d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80091d8:	4806      	ldr	r0, [pc, #24]	@ (80091f4 <prvPortStartFirstTask+0x1c>)
 80091da:	6800      	ldr	r0, [r0, #0]
 80091dc:	6800      	ldr	r0, [r0, #0]
 80091de:	f380 8808 	msr	MSP, r0
 80091e2:	b662      	cpsie	i
 80091e4:	b661      	cpsie	f
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	df00      	svc	0
 80091f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091f2:	bf00      	nop
 80091f4:	e000ed08 	.word	0xe000ed08

080091f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091fe:	4b32      	ldr	r3, [pc, #200]	@ (80092c8 <xPortStartScheduler+0xd0>)
 8009200:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	b2db      	uxtb	r3, r3
 8009208:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	22ff      	movs	r2, #255	@ 0xff
 800920e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009218:	78fb      	ldrb	r3, [r7, #3]
 800921a:	b2db      	uxtb	r3, r3
 800921c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009220:	b2da      	uxtb	r2, r3
 8009222:	4b2a      	ldr	r3, [pc, #168]	@ (80092cc <xPortStartScheduler+0xd4>)
 8009224:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009226:	4b2a      	ldr	r3, [pc, #168]	@ (80092d0 <xPortStartScheduler+0xd8>)
 8009228:	2207      	movs	r2, #7
 800922a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800922c:	e009      	b.n	8009242 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800922e:	4b28      	ldr	r3, [pc, #160]	@ (80092d0 <xPortStartScheduler+0xd8>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3b01      	subs	r3, #1
 8009234:	4a26      	ldr	r2, [pc, #152]	@ (80092d0 <xPortStartScheduler+0xd8>)
 8009236:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009238:	78fb      	ldrb	r3, [r7, #3]
 800923a:	b2db      	uxtb	r3, r3
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	b2db      	uxtb	r3, r3
 8009240:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009242:	78fb      	ldrb	r3, [r7, #3]
 8009244:	b2db      	uxtb	r3, r3
 8009246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800924a:	2b80      	cmp	r3, #128	@ 0x80
 800924c:	d0ef      	beq.n	800922e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800924e:	4b20      	ldr	r3, [pc, #128]	@ (80092d0 <xPortStartScheduler+0xd8>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f1c3 0307 	rsb	r3, r3, #7
 8009256:	2b04      	cmp	r3, #4
 8009258:	d00b      	beq.n	8009272 <xPortStartScheduler+0x7a>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	60bb      	str	r3, [r7, #8]
}
 800926c:	bf00      	nop
 800926e:	bf00      	nop
 8009270:	e7fd      	b.n	800926e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009272:	4b17      	ldr	r3, [pc, #92]	@ (80092d0 <xPortStartScheduler+0xd8>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	021b      	lsls	r3, r3, #8
 8009278:	4a15      	ldr	r2, [pc, #84]	@ (80092d0 <xPortStartScheduler+0xd8>)
 800927a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800927c:	4b14      	ldr	r3, [pc, #80]	@ (80092d0 <xPortStartScheduler+0xd8>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009284:	4a12      	ldr	r2, [pc, #72]	@ (80092d0 <xPortStartScheduler+0xd8>)
 8009286:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	b2da      	uxtb	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009290:	4b10      	ldr	r3, [pc, #64]	@ (80092d4 <xPortStartScheduler+0xdc>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a0f      	ldr	r2, [pc, #60]	@ (80092d4 <xPortStartScheduler+0xdc>)
 8009296:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800929a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800929c:	4b0d      	ldr	r3, [pc, #52]	@ (80092d4 <xPortStartScheduler+0xdc>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a0c      	ldr	r2, [pc, #48]	@ (80092d4 <xPortStartScheduler+0xdc>)
 80092a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80092a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092a8:	f000 f8b8 	bl	800941c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092ac:	4b0a      	ldr	r3, [pc, #40]	@ (80092d8 <xPortStartScheduler+0xe0>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80092b2:	f7ff ff91 	bl	80091d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092b6:	f7ff fd7b 	bl	8008db0 <vTaskSwitchContext>
	prvTaskExitError();
 80092ba:	f7ff ff49 	bl	8009150 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	e000e400 	.word	0xe000e400
 80092cc:	200006a0 	.word	0x200006a0
 80092d0:	200006a4 	.word	0x200006a4
 80092d4:	e000ed20 	.word	0xe000ed20
 80092d8:	20000014 	.word	0x20000014

080092dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	607b      	str	r3, [r7, #4]
}
 80092f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009334 <vPortEnterCritical+0x58>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3301      	adds	r3, #1
 80092fc:	4a0d      	ldr	r2, [pc, #52]	@ (8009334 <vPortEnterCritical+0x58>)
 80092fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009300:	4b0c      	ldr	r3, [pc, #48]	@ (8009334 <vPortEnterCritical+0x58>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d110      	bne.n	800932a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009308:	4b0b      	ldr	r3, [pc, #44]	@ (8009338 <vPortEnterCritical+0x5c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00b      	beq.n	800932a <vPortEnterCritical+0x4e>
	__asm volatile
 8009312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	603b      	str	r3, [r7, #0]
}
 8009324:	bf00      	nop
 8009326:	bf00      	nop
 8009328:	e7fd      	b.n	8009326 <vPortEnterCritical+0x4a>
	}
}
 800932a:	bf00      	nop
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	bc80      	pop	{r7}
 8009332:	4770      	bx	lr
 8009334:	20000014 	.word	0x20000014
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009342:	4b12      	ldr	r3, [pc, #72]	@ (800938c <vPortExitCritical+0x50>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10b      	bne.n	8009362 <vPortExitCritical+0x26>
	__asm volatile
 800934a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	607b      	str	r3, [r7, #4]
}
 800935c:	bf00      	nop
 800935e:	bf00      	nop
 8009360:	e7fd      	b.n	800935e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009362:	4b0a      	ldr	r3, [pc, #40]	@ (800938c <vPortExitCritical+0x50>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3b01      	subs	r3, #1
 8009368:	4a08      	ldr	r2, [pc, #32]	@ (800938c <vPortExitCritical+0x50>)
 800936a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800936c:	4b07      	ldr	r3, [pc, #28]	@ (800938c <vPortExitCritical+0x50>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d105      	bne.n	8009380 <vPortExitCritical+0x44>
 8009374:	2300      	movs	r3, #0
 8009376:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800937e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	bc80      	pop	{r7}
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	20000014 	.word	0x20000014

08009390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009390:	f3ef 8009 	mrs	r0, PSP
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	4b0d      	ldr	r3, [pc, #52]	@ (80093d0 <pxCurrentTCBConst>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80093a0:	6010      	str	r0, [r2, #0]
 80093a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80093a6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80093aa:	f380 8811 	msr	BASEPRI, r0
 80093ae:	f7ff fcff 	bl	8008db0 <vTaskSwitchContext>
 80093b2:	f04f 0000 	mov.w	r0, #0
 80093b6:	f380 8811 	msr	BASEPRI, r0
 80093ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80093be:	6819      	ldr	r1, [r3, #0]
 80093c0:	6808      	ldr	r0, [r1, #0]
 80093c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80093c6:	f380 8809 	msr	PSP, r0
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	4770      	bx	lr

080093d0 <pxCurrentTCBConst>:
 80093d0:	20000574 	.word	0x20000574
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop

080093d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	607b      	str	r3, [r7, #4]
}
 80093f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093f2:	f7ff fc23 	bl	8008c3c <xTaskIncrementTick>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093fc:	4b06      	ldr	r3, [pc, #24]	@ (8009418 <SysTick_Handler+0x40>)
 80093fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	2300      	movs	r3, #0
 8009406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	f383 8811 	msr	BASEPRI, r3
}
 800940e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009410:	bf00      	nop
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	e000ed04 	.word	0xe000ed04

0800941c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800941c:	b480      	push	{r7}
 800941e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009420:	4b0a      	ldr	r3, [pc, #40]	@ (800944c <vPortSetupTimerInterrupt+0x30>)
 8009422:	2200      	movs	r2, #0
 8009424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009426:	4b0a      	ldr	r3, [pc, #40]	@ (8009450 <vPortSetupTimerInterrupt+0x34>)
 8009428:	2200      	movs	r2, #0
 800942a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800942c:	4b09      	ldr	r3, [pc, #36]	@ (8009454 <vPortSetupTimerInterrupt+0x38>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a09      	ldr	r2, [pc, #36]	@ (8009458 <vPortSetupTimerInterrupt+0x3c>)
 8009432:	fba2 2303 	umull	r2, r3, r2, r3
 8009436:	099b      	lsrs	r3, r3, #6
 8009438:	4a08      	ldr	r2, [pc, #32]	@ (800945c <vPortSetupTimerInterrupt+0x40>)
 800943a:	3b01      	subs	r3, #1
 800943c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800943e:	4b03      	ldr	r3, [pc, #12]	@ (800944c <vPortSetupTimerInterrupt+0x30>)
 8009440:	2207      	movs	r2, #7
 8009442:	601a      	str	r2, [r3, #0]
}
 8009444:	bf00      	nop
 8009446:	46bd      	mov	sp, r7
 8009448:	bc80      	pop	{r7}
 800944a:	4770      	bx	lr
 800944c:	e000e010 	.word	0xe000e010
 8009450:	e000e018 	.word	0xe000e018
 8009454:	20000008 	.word	0x20000008
 8009458:	10624dd3 	.word	0x10624dd3
 800945c:	e000e014 	.word	0xe000e014

08009460 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08a      	sub	sp, #40	@ 0x28
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009468:	2300      	movs	r3, #0
 800946a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800946c:	f7ff fb3a 	bl	8008ae4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009470:	4b5c      	ldr	r3, [pc, #368]	@ (80095e4 <pvPortMalloc+0x184>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009478:	f000 f924 	bl	80096c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800947c:	4b5a      	ldr	r3, [pc, #360]	@ (80095e8 <pvPortMalloc+0x188>)
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4013      	ands	r3, r2
 8009484:	2b00      	cmp	r3, #0
 8009486:	f040 8095 	bne.w	80095b4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d01e      	beq.n	80094ce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009490:	2208      	movs	r2, #8
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4413      	add	r3, r2
 8009496:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f003 0307 	and.w	r3, r3, #7
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d015      	beq.n	80094ce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f023 0307 	bic.w	r3, r3, #7
 80094a8:	3308      	adds	r3, #8
 80094aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f003 0307 	and.w	r3, r3, #7
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00b      	beq.n	80094ce <pvPortMalloc+0x6e>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	617b      	str	r3, [r7, #20]
}
 80094c8:	bf00      	nop
 80094ca:	bf00      	nop
 80094cc:	e7fd      	b.n	80094ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d06f      	beq.n	80095b4 <pvPortMalloc+0x154>
 80094d4:	4b45      	ldr	r3, [pc, #276]	@ (80095ec <pvPortMalloc+0x18c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d86a      	bhi.n	80095b4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80094de:	4b44      	ldr	r3, [pc, #272]	@ (80095f0 <pvPortMalloc+0x190>)
 80094e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80094e2:	4b43      	ldr	r3, [pc, #268]	@ (80095f0 <pvPortMalloc+0x190>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094e8:	e004      	b.n	80094f4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80094ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80094ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d903      	bls.n	8009506 <pvPortMalloc+0xa6>
 80094fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1f1      	bne.n	80094ea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009506:	4b37      	ldr	r3, [pc, #220]	@ (80095e4 <pvPortMalloc+0x184>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800950c:	429a      	cmp	r2, r3
 800950e:	d051      	beq.n	80095b4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2208      	movs	r2, #8
 8009516:	4413      	add	r3, r2
 8009518:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800951a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	1ad2      	subs	r2, r2, r3
 800952a:	2308      	movs	r3, #8
 800952c:	005b      	lsls	r3, r3, #1
 800952e:	429a      	cmp	r2, r3
 8009530:	d920      	bls.n	8009574 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4413      	add	r3, r2
 8009538:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	f003 0307 	and.w	r3, r3, #7
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00b      	beq.n	800955c <pvPortMalloc+0xfc>
	__asm volatile
 8009544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009548:	f383 8811 	msr	BASEPRI, r3
 800954c:	f3bf 8f6f 	isb	sy
 8009550:	f3bf 8f4f 	dsb	sy
 8009554:	613b      	str	r3, [r7, #16]
}
 8009556:	bf00      	nop
 8009558:	bf00      	nop
 800955a:	e7fd      	b.n	8009558 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800955c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	1ad2      	subs	r2, r2, r3
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800956e:	69b8      	ldr	r0, [r7, #24]
 8009570:	f000 f90a 	bl	8009788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009574:	4b1d      	ldr	r3, [pc, #116]	@ (80095ec <pvPortMalloc+0x18c>)
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	4a1b      	ldr	r2, [pc, #108]	@ (80095ec <pvPortMalloc+0x18c>)
 8009580:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009582:	4b1a      	ldr	r3, [pc, #104]	@ (80095ec <pvPortMalloc+0x18c>)
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	4b1b      	ldr	r3, [pc, #108]	@ (80095f4 <pvPortMalloc+0x194>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	429a      	cmp	r2, r3
 800958c:	d203      	bcs.n	8009596 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800958e:	4b17      	ldr	r3, [pc, #92]	@ (80095ec <pvPortMalloc+0x18c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a18      	ldr	r2, [pc, #96]	@ (80095f4 <pvPortMalloc+0x194>)
 8009594:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	4b13      	ldr	r3, [pc, #76]	@ (80095e8 <pvPortMalloc+0x188>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	431a      	orrs	r2, r3
 80095a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	2200      	movs	r2, #0
 80095a8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80095aa:	4b13      	ldr	r3, [pc, #76]	@ (80095f8 <pvPortMalloc+0x198>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3301      	adds	r3, #1
 80095b0:	4a11      	ldr	r2, [pc, #68]	@ (80095f8 <pvPortMalloc+0x198>)
 80095b2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095b4:	f7ff faa4 	bl	8008b00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	f003 0307 	and.w	r3, r3, #7
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00b      	beq.n	80095da <pvPortMalloc+0x17a>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	60fb      	str	r3, [r7, #12]
}
 80095d4:	bf00      	nop
 80095d6:	bf00      	nop
 80095d8:	e7fd      	b.n	80095d6 <pvPortMalloc+0x176>
	return pvReturn;
 80095da:	69fb      	ldr	r3, [r7, #28]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3728      	adds	r7, #40	@ 0x28
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	200012b0 	.word	0x200012b0
 80095e8:	200012c4 	.word	0x200012c4
 80095ec:	200012b4 	.word	0x200012b4
 80095f0:	200012a8 	.word	0x200012a8
 80095f4:	200012b8 	.word	0x200012b8
 80095f8:	200012bc 	.word	0x200012bc

080095fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d04f      	beq.n	80096ae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800960e:	2308      	movs	r3, #8
 8009610:	425b      	negs	r3, r3
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	4413      	add	r3, r2
 8009616:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	685a      	ldr	r2, [r3, #4]
 8009620:	4b25      	ldr	r3, [pc, #148]	@ (80096b8 <vPortFree+0xbc>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4013      	ands	r3, r2
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10b      	bne.n	8009642 <vPortFree+0x46>
	__asm volatile
 800962a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962e:	f383 8811 	msr	BASEPRI, r3
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	60fb      	str	r3, [r7, #12]
}
 800963c:	bf00      	nop
 800963e:	bf00      	nop
 8009640:	e7fd      	b.n	800963e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00b      	beq.n	8009662 <vPortFree+0x66>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	60bb      	str	r3, [r7, #8]
}
 800965c:	bf00      	nop
 800965e:	bf00      	nop
 8009660:	e7fd      	b.n	800965e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	4b14      	ldr	r3, [pc, #80]	@ (80096b8 <vPortFree+0xbc>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4013      	ands	r3, r2
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01e      	beq.n	80096ae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d11a      	bne.n	80096ae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	4b0e      	ldr	r3, [pc, #56]	@ (80096b8 <vPortFree+0xbc>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	43db      	mvns	r3, r3
 8009682:	401a      	ands	r2, r3
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009688:	f7ff fa2c 	bl	8008ae4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	4b0a      	ldr	r3, [pc, #40]	@ (80096bc <vPortFree+0xc0>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4413      	add	r3, r2
 8009696:	4a09      	ldr	r2, [pc, #36]	@ (80096bc <vPortFree+0xc0>)
 8009698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800969a:	6938      	ldr	r0, [r7, #16]
 800969c:	f000 f874 	bl	8009788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80096a0:	4b07      	ldr	r3, [pc, #28]	@ (80096c0 <vPortFree+0xc4>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3301      	adds	r3, #1
 80096a6:	4a06      	ldr	r2, [pc, #24]	@ (80096c0 <vPortFree+0xc4>)
 80096a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80096aa:	f7ff fa29 	bl	8008b00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80096ae:	bf00      	nop
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	200012c4 	.word	0x200012c4
 80096bc:	200012b4 	.word	0x200012b4
 80096c0:	200012c0 	.word	0x200012c0

080096c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80096ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096d0:	4b27      	ldr	r3, [pc, #156]	@ (8009770 <prvHeapInit+0xac>)
 80096d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f003 0307 	and.w	r3, r3, #7
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00c      	beq.n	80096f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3307      	adds	r3, #7
 80096e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 0307 	bic.w	r3, r3, #7
 80096ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	4a1f      	ldr	r2, [pc, #124]	@ (8009770 <prvHeapInit+0xac>)
 80096f4:	4413      	add	r3, r2
 80096f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009774 <prvHeapInit+0xb0>)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009702:	4b1c      	ldr	r3, [pc, #112]	@ (8009774 <prvHeapInit+0xb0>)
 8009704:	2200      	movs	r2, #0
 8009706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	4413      	add	r3, r2
 800970e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009710:	2208      	movs	r2, #8
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	1a9b      	subs	r3, r3, r2
 8009716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f023 0307 	bic.w	r3, r3, #7
 800971e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	4a15      	ldr	r2, [pc, #84]	@ (8009778 <prvHeapInit+0xb4>)
 8009724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009726:	4b14      	ldr	r3, [pc, #80]	@ (8009778 <prvHeapInit+0xb4>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2200      	movs	r2, #0
 800972c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800972e:	4b12      	ldr	r3, [pc, #72]	@ (8009778 <prvHeapInit+0xb4>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2200      	movs	r2, #0
 8009734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	1ad2      	subs	r2, r2, r3
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009744:	4b0c      	ldr	r3, [pc, #48]	@ (8009778 <prvHeapInit+0xb4>)
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	4a0a      	ldr	r2, [pc, #40]	@ (800977c <prvHeapInit+0xb8>)
 8009752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	4a09      	ldr	r2, [pc, #36]	@ (8009780 <prvHeapInit+0xbc>)
 800975a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800975c:	4b09      	ldr	r3, [pc, #36]	@ (8009784 <prvHeapInit+0xc0>)
 800975e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009762:	601a      	str	r2, [r3, #0]
}
 8009764:	bf00      	nop
 8009766:	3714      	adds	r7, #20
 8009768:	46bd      	mov	sp, r7
 800976a:	bc80      	pop	{r7}
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	200006a8 	.word	0x200006a8
 8009774:	200012a8 	.word	0x200012a8
 8009778:	200012b0 	.word	0x200012b0
 800977c:	200012b8 	.word	0x200012b8
 8009780:	200012b4 	.word	0x200012b4
 8009784:	200012c4 	.word	0x200012c4

08009788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009790:	4b27      	ldr	r3, [pc, #156]	@ (8009830 <prvInsertBlockIntoFreeList+0xa8>)
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	e002      	b.n	800979c <prvInsertBlockIntoFreeList+0x14>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d8f7      	bhi.n	8009796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	4413      	add	r3, r2
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d108      	bne.n	80097ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	441a      	add	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	441a      	add	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d118      	bne.n	8009810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	4b14      	ldr	r3, [pc, #80]	@ (8009834 <prvInsertBlockIntoFreeList+0xac>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d00d      	beq.n	8009806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	441a      	add	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	e008      	b.n	8009818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009806:	4b0b      	ldr	r3, [pc, #44]	@ (8009834 <prvInsertBlockIntoFreeList+0xac>)
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	e003      	b.n	8009818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	429a      	cmp	r2, r3
 800981e:	d002      	beq.n	8009826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009826:	bf00      	nop
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	bc80      	pop	{r7}
 800982e:	4770      	bx	lr
 8009830:	200012a8 	.word	0x200012a8
 8009834:	200012b0 	.word	0x200012b0

08009838 <TMC2209_setdefault>:
static float pid_output = 0;
static float pid_fraction = 0;
static uint32_t pid_last_time = 0;

void TMC2209_setdefault()
{
 8009838:	b480      	push	{r7}
 800983a:	af00      	add	r7, sp, #0
	gconfConfig.I_scale_analog = TRUE;
 800983c:	4a08      	ldr	r2, [pc, #32]	@ (8009860 <TMC2209_setdefault+0x28>)
 800983e:	7813      	ldrb	r3, [r2, #0]
 8009840:	f043 0301 	orr.w	r3, r3, #1
 8009844:	7013      	strb	r3, [r2, #0]
	gconfConfig.multistep_filt = TRUE;
 8009846:	4a06      	ldr	r2, [pc, #24]	@ (8009860 <TMC2209_setdefault+0x28>)
 8009848:	7853      	ldrb	r3, [r2, #1]
 800984a:	f043 0301 	orr.w	r3, r3, #1
 800984e:	7053      	strb	r3, [r2, #1]
	chopConfig.bytes = CHOPPER_CONFIG_DEFAULT;
 8009850:	4a04      	ldr	r2, [pc, #16]	@ (8009864 <TMC2209_setdefault+0x2c>)
 8009852:	4b05      	ldr	r3, [pc, #20]	@ (8009868 <TMC2209_setdefault+0x30>)
 8009854:	601a      	str	r2, [r3, #0]
}
 8009856:	bf00      	nop
 8009858:	46bd      	mov	sp, r7
 800985a:	bc80      	pop	{r7}
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	200012cc 	.word	0x200012cc
 8009864:	10000053 	.word	0x10000053
 8009868:	200012c8 	.word	0x200012c8

0800986c <TMC2209_setup>:

void TMC2209_setup()
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
	TMC2209_setdefault();
 8009870:	f7ff ffe2 	bl	8009838 <TMC2209_setdefault>
	gconfConfig.bytes = FALSE;
 8009874:	4b17      	ldr	r3, [pc, #92]	@ (80098d4 <TMC2209_setup+0x68>)
 8009876:	2200      	movs	r2, #0
 8009878:	601a      	str	r2, [r3, #0]
	gconfConfig.I_scale_analog = TRUE;
 800987a:	4a16      	ldr	r2, [pc, #88]	@ (80098d4 <TMC2209_setup+0x68>)
 800987c:	7813      	ldrb	r3, [r2, #0]
 800987e:	f043 0301 	orr.w	r3, r3, #1
 8009882:	7013      	strb	r3, [r2, #0]
	gconfConfig.pdn_disable = TRUE;
 8009884:	4a13      	ldr	r2, [pc, #76]	@ (80098d4 <TMC2209_setup+0x68>)
 8009886:	7813      	ldrb	r3, [r2, #0]
 8009888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800988c:	7013      	strb	r3, [r2, #0]
	gconfConfig.multistep_filt = TRUE;
 800988e:	4a11      	ldr	r2, [pc, #68]	@ (80098d4 <TMC2209_setup+0x68>)
 8009890:	7853      	ldrb	r3, [r2, #1]
 8009892:	f043 0301 	orr.w	r3, r3, #1
 8009896:	7053      	strb	r3, [r2, #1]
	gconfConfig.mstep_reg_select = TRUE;
 8009898:	4a0e      	ldr	r2, [pc, #56]	@ (80098d4 <TMC2209_setup+0x68>)
 800989a:	7813      	ldrb	r3, [r2, #0]
 800989c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098a0:	7013      	strb	r3, [r2, #0]

	slaveConfig.conf = 0x00;
 80098a2:	4a0d      	ldr	r2, [pc, #52]	@ (80098d8 <TMC2209_setup+0x6c>)
 80098a4:	7853      	ldrb	r3, [r2, #1]
 80098a6:	f36f 0303 	bfc	r3, #0, #4
 80098aa:	7053      	strb	r3, [r2, #1]

	TMC2209_HAL_Write(TMC2209Reg_GCONF, gconfConfig.bytes);
 80098ac:	4b09      	ldr	r3, [pc, #36]	@ (80098d4 <TMC2209_setup+0x68>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4619      	mov	r1, r3
 80098b2:	2000      	movs	r0, #0
 80098b4:	f000 fb3e 	bl	8009f34 <TMC2209_HAL_Write>
	TMC2209_HAL_Write(TMC2209Reg_SLAVECONF, slaveConfig.bytes);
 80098b8:	4b07      	ldr	r3, [pc, #28]	@ (80098d8 <TMC2209_setup+0x6c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4619      	mov	r1, r3
 80098be:	2003      	movs	r0, #3
 80098c0:	f000 fb38 	bl	8009f34 <TMC2209_HAL_Write>
//	TMC2209_setMicrostep(TMC2209_Microsteps_1);
	TMC2209_disable();
 80098c4:	f000 f832 	bl	800992c <TMC2209_disable>
	HAL_Delay(100);
 80098c8:	2064      	movs	r0, #100	@ 0x64
 80098ca:	f7f8 fb9b 	bl	8002004 <HAL_Delay>
}
 80098ce:	bf00      	nop
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	200012cc 	.word	0x200012cc
 80098d8:	200012d0 	.word	0x200012d0

080098dc <TMC2209_enable>:

void TMC2209_enable()
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	af00      	add	r7, sp, #0
	if(Driver_Enable == FALSE){
 80098e0:	4b0e      	ldr	r3, [pc, #56]	@ (800991c <TMC2209_enable+0x40>)
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d117      	bne.n	8009918 <TMC2209_enable+0x3c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80098e8:	2200      	movs	r2, #0
 80098ea:	2104      	movs	r1, #4
 80098ec:	480c      	ldr	r0, [pc, #48]	@ (8009920 <TMC2209_enable+0x44>)
 80098ee:	f7f9 f994 	bl	8002c1a <HAL_GPIO_WritePin>
		Driver_Enable = TRUE;
 80098f2:	4b0a      	ldr	r3, [pc, #40]	@ (800991c <TMC2209_enable+0x40>)
 80098f4:	2201      	movs	r2, #1
 80098f6:	701a      	strb	r2, [r3, #0]
		chopConfig.toff = toff_;
 80098f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009924 <TMC2209_enable+0x48>)
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	f003 030f 	and.w	r3, r3, #15
 8009900:	b2d9      	uxtb	r1, r3
 8009902:	4a09      	ldr	r2, [pc, #36]	@ (8009928 <TMC2209_enable+0x4c>)
 8009904:	7813      	ldrb	r3, [r2, #0]
 8009906:	f361 0303 	bfi	r3, r1, #0, #4
 800990a:	7013      	strb	r3, [r2, #0]
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 800990c:	4b06      	ldr	r3, [pc, #24]	@ (8009928 <TMC2209_enable+0x4c>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4619      	mov	r1, r3
 8009912:	206c      	movs	r0, #108	@ 0x6c
 8009914:	f000 fb0e 	bl	8009f34 <TMC2209_HAL_Write>
	}
}
 8009918:	bf00      	nop
 800991a:	bd80      	pop	{r7, pc}
 800991c:	200012d4 	.word	0x200012d4
 8009920:	40010800 	.word	0x40010800
 8009924:	20000018 	.word	0x20000018
 8009928:	200012c8 	.word	0x200012c8

0800992c <TMC2209_disable>:

void TMC2209_disable()
{
 800992c:	b580      	push	{r7, lr}
 800992e:	af00      	add	r7, sp, #0
	if(Driver_Enable == TRUE){
 8009930:	4b0c      	ldr	r3, [pc, #48]	@ (8009964 <TMC2209_disable+0x38>)
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d112      	bne.n	800995e <TMC2209_disable+0x32>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8009938:	2201      	movs	r2, #1
 800993a:	2104      	movs	r1, #4
 800993c:	480a      	ldr	r0, [pc, #40]	@ (8009968 <TMC2209_disable+0x3c>)
 800993e:	f7f9 f96c 	bl	8002c1a <HAL_GPIO_WritePin>
		Driver_Enable = FALSE;
 8009942:	4b08      	ldr	r3, [pc, #32]	@ (8009964 <TMC2209_disable+0x38>)
 8009944:	2200      	movs	r2, #0
 8009946:	701a      	strb	r2, [r3, #0]
		chopConfig.toff = TOFF_DISABLE;
 8009948:	4a08      	ldr	r2, [pc, #32]	@ (800996c <TMC2209_disable+0x40>)
 800994a:	7813      	ldrb	r3, [r2, #0]
 800994c:	f36f 0303 	bfc	r3, #0, #4
 8009950:	7013      	strb	r3, [r2, #0]
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 8009952:	4b06      	ldr	r3, [pc, #24]	@ (800996c <TMC2209_disable+0x40>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4619      	mov	r1, r3
 8009958:	206c      	movs	r0, #108	@ 0x6c
 800995a:	f000 faeb 	bl	8009f34 <TMC2209_HAL_Write>
	}
}
 800995e:	bf00      	nop
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	200012d4 	.word	0x200012d4
 8009968:	40010800 	.word	0x40010800
 800996c:	200012c8 	.word	0x200012c8

08009970 <TMC2209_setMicrostep>:

void TMC2209_setMicrostep(TMC2209_Microstep Microstep)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	71fb      	strb	r3, [r7, #7]
	chopConfig.mres = Microstep;
 800997a:	79fb      	ldrb	r3, [r7, #7]
 800997c:	f003 030f 	and.w	r3, r3, #15
 8009980:	b2d9      	uxtb	r1, r3
 8009982:	4a14      	ldr	r2, [pc, #80]	@ (80099d4 <TMC2209_setMicrostep+0x64>)
 8009984:	78d3      	ldrb	r3, [r2, #3]
 8009986:	f361 0303 	bfi	r3, r1, #0, #4
 800998a:	70d3      	strb	r3, [r2, #3]
	TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 800998c:	4b11      	ldr	r3, [pc, #68]	@ (80099d4 <TMC2209_setMicrostep+0x64>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4619      	mov	r1, r3
 8009992:	206c      	movs	r0, #108	@ 0x6c
 8009994:	f000 face 	bl	8009f34 <TMC2209_HAL_Write>
	active_microstep = pow(2, abs(Microstep - TMC2209_Microsteps_1));
 8009998:	79fb      	ldrb	r3, [r7, #7]
 800999a:	3b08      	subs	r3, #8
 800999c:	2b00      	cmp	r3, #0
 800999e:	bfb8      	it	lt
 80099a0:	425b      	neglt	r3, r3
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f6 fd26 	bl	80003f4 <__aeabi_i2d>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	f04f 0000 	mov.w	r0, #0
 80099b0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80099b4:	f000 fbda 	bl	800a16c <pow>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	4610      	mov	r0, r2
 80099be:	4619      	mov	r1, r3
 80099c0:	f7f7 f832 	bl	8000a28 <__aeabi_d2uiz>
 80099c4:	4603      	mov	r3, r0
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	4b03      	ldr	r3, [pc, #12]	@ (80099d8 <TMC2209_setMicrostep+0x68>)
 80099ca:	701a      	strb	r2, [r3, #0]
}
 80099cc:	bf00      	nop
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	200012c8 	.word	0x200012c8
 80099d8:	200012d5 	.word	0x200012d5

080099dc <TMC2209_velocity>:
	TMC2209_HAL_Read(TMC2209Reg_CHOPCONF, &buffer);
	*result = buffer;
}

void TMC2209_velocity(float velocity)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
	float frequency = 0.0f;
 80099e4:	f04f 0300 	mov.w	r3, #0
 80099e8:	613b      	str	r3, [r7, #16]
	uint16_t desired_period = 0;
 80099ea:	2300      	movs	r3, #0
 80099ec:	81fb      	strh	r3, [r7, #14]
	uint16_t prescaller = TMC2209_DEFAULT_PRESCALLER;
 80099ee:	2348      	movs	r3, #72	@ 0x48
 80099f0:	82fb      	strh	r3, [r7, #22]

	if(vel_now == velocity) return;
 80099f2:	4b3d      	ldr	r3, [pc, #244]	@ (8009ae8 <TMC2209_velocity+0x10c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f7f7 fb27 	bl	800104c <__aeabi_fcmpeq>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d16c      	bne.n	8009ade <TMC2209_velocity+0x102>
	if(velocity <= 0) {
 8009a04:	f04f 0100 	mov.w	r1, #0
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7f7 fb33 	bl	8001074 <__aeabi_fcmple>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d100      	bne.n	8009a16 <TMC2209_velocity+0x3a>
 8009a14:	e007      	b.n	8009a26 <TMC2209_velocity+0x4a>
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8009a16:	2100      	movs	r1, #0
 8009a18:	4834      	ldr	r0, [pc, #208]	@ (8009aec <TMC2209_velocity+0x110>)
 8009a1a:	f7fc fe9b 	bl	8006754 <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 8009a1e:	4b34      	ldr	r3, [pc, #208]	@ (8009af0 <TMC2209_velocity+0x114>)
 8009a20:	2201      	movs	r2, #1
 8009a22:	701a      	strb	r2, [r3, #0]
		return;
 8009a24:	e05c      	b.n	8009ae0 <TMC2209_velocity+0x104>
	}

	while(TRUE){
		frequency  = (velocity * (STEP_PER_REV * active_microstep)) / 60;
 8009a26:	4b33      	ldr	r3, [pc, #204]	@ (8009af4 <TMC2209_velocity+0x118>)
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	23c8      	movs	r3, #200	@ 0xc8
 8009a2e:	fb02 f303 	mul.w	r3, r2, r3
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7f7 f922 	bl	8000c7c <__aeabi_i2f>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	6879      	ldr	r1, [r7, #4]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7f7 f971 	bl	8000d24 <__aeabi_fmul>
 8009a42:	4603      	mov	r3, r0
 8009a44:	492c      	ldr	r1, [pc, #176]	@ (8009af8 <TMC2209_velocity+0x11c>)
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7f7 fa20 	bl	8000e8c <__aeabi_fdiv>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	613b      	str	r3, [r7, #16]
		if(((TMC2209_BASE_FREQ / prescaller) / frequency) > MAX_CNT_PERIOD){
 8009a50:	8afb      	ldrh	r3, [r7, #22]
 8009a52:	4a2a      	ldr	r2, [pc, #168]	@ (8009afc <TMC2209_velocity+0x120>)
 8009a54:	fb92 f3f3 	sdiv	r3, r2, r3
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7f7 f90f 	bl	8000c7c <__aeabi_i2f>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	6939      	ldr	r1, [r7, #16]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7f7 fa12 	bl	8000e8c <__aeabi_fdiv>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	4925      	ldr	r1, [pc, #148]	@ (8009b00 <TMC2209_velocity+0x124>)
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7f7 fb15 	bl	800109c <__aeabi_fcmpgt>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <TMC2209_velocity+0xa4>
			prescaller += TMC2209_DEFAULT_PRESCALLER;
 8009a78:	8afb      	ldrh	r3, [r7, #22]
 8009a7a:	3348      	adds	r3, #72	@ 0x48
 8009a7c:	82fb      	strh	r3, [r7, #22]
			continue;
 8009a7e:	e02d      	b.n	8009adc <TMC2209_velocity+0x100>
		}
		desired_period = (uint16_t)round((TMC2209_BASE_FREQ / prescaller) / frequency);
 8009a80:	8afb      	ldrh	r3, [r7, #22]
 8009a82:	4a1e      	ldr	r2, [pc, #120]	@ (8009afc <TMC2209_velocity+0x120>)
 8009a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7f7 f8f7 	bl	8000c7c <__aeabi_i2f>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	6939      	ldr	r1, [r7, #16]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7f7 f9fa 	bl	8000e8c <__aeabi_fdiv>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f6 fcbc 	bl	8000418 <__aeabi_f2d>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	f000 fc12 	bl	800a2d0 <round>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4610      	mov	r0, r2
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	f7f6 ffb8 	bl	8000a28 <__aeabi_d2uiz>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	81fb      	strh	r3, [r7, #14]
		break;
 8009abc:	bf00      	nop
	}

	__HAL_TIM_SET_PRESCALER(&htim2, prescaller);
 8009abe:	4b0b      	ldr	r3, [pc, #44]	@ (8009aec <TMC2209_velocity+0x110>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	8afa      	ldrh	r2, [r7, #22]
 8009ac4:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim2, desired_period);
 8009ac6:	4b09      	ldr	r3, [pc, #36]	@ (8009aec <TMC2209_velocity+0x110>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	89fa      	ldrh	r2, [r7, #14]
 8009acc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009ace:	89fb      	ldrh	r3, [r7, #14]
 8009ad0:	4a06      	ldr	r2, [pc, #24]	@ (8009aec <TMC2209_velocity+0x110>)
 8009ad2:	60d3      	str	r3, [r2, #12]
	vel_now = velocity;
 8009ad4:	4a04      	ldr	r2, [pc, #16]	@ (8009ae8 <TMC2209_velocity+0x10c>)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	e001      	b.n	8009ae0 <TMC2209_velocity+0x104>
		frequency  = (velocity * (STEP_PER_REV * active_microstep)) / 60;
 8009adc:	e7a3      	b.n	8009a26 <TMC2209_velocity+0x4a>
	if(vel_now == velocity) return;
 8009ade:	bf00      	nop
}
 8009ae0:	3718      	adds	r7, #24
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	200012d8 	.word	0x200012d8
 8009aec:	20000438 	.word	0x20000438
 8009af0:	20000019 	.word	0x20000019
 8009af4:	200012d5 	.word	0x200012d5
 8009af8:	42700000 	.word	0x42700000
 8009afc:	044aa200 	.word	0x044aa200
 8009b00:	477fff00 	.word	0x477fff00

08009b04 <TMC2209_move>:

void TMC2209_move(){
 8009b04:	b580      	push	{r7, lr}
 8009b06:	af00      	add	r7, sp, #0
	if(PWM_Pulse_Complete == TRUE){
 8009b08:	4b06      	ldr	r3, [pc, #24]	@ (8009b24 <TMC2209_move+0x20>)
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d106      	bne.n	8009b1e <TMC2209_move+0x1a>
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8009b10:	2100      	movs	r1, #0
 8009b12:	4805      	ldr	r0, [pc, #20]	@ (8009b28 <TMC2209_move+0x24>)
 8009b14:	f7fc fd2e 	bl	8006574 <HAL_TIM_PWM_Start_IT>
		PWM_Pulse_Complete = FALSE;
 8009b18:	4b02      	ldr	r3, [pc, #8]	@ (8009b24 <TMC2209_move+0x20>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	701a      	strb	r2, [r3, #0]
	}
}
 8009b1e:	bf00      	nop
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	20000019 	.word	0x20000019
 8009b28:	20000438 	.word	0x20000438

08009b2c <TMC2209_direction>:
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
		PWM_Pulse_Complete = TRUE;
	}
}

void TMC2209_direction(uint8_t direction){
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	4603      	mov	r3, r0
 8009b34:	71fb      	strb	r3, [r7, #7]
	if(direction == rotation_dir) return;
 8009b36:	4b10      	ldr	r3, [pc, #64]	@ (8009b78 <TMC2209_direction+0x4c>)
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	79fa      	ldrb	r2, [r7, #7]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d016      	beq.n	8009b6e <TMC2209_direction+0x42>

	if(direction == TMC2209_ROT_FWD){
 8009b40:	79fb      	ldrb	r3, [r7, #7]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d107      	bne.n	8009b56 <TMC2209_direction+0x2a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8009b46:	2200      	movs	r2, #0
 8009b48:	2102      	movs	r1, #2
 8009b4a:	480c      	ldr	r0, [pc, #48]	@ (8009b7c <TMC2209_direction+0x50>)
 8009b4c:	f7f9 f865 	bl	8002c1a <HAL_GPIO_WritePin>
		rotation_dir = TMC2209_ROT_FWD;
 8009b50:	4b09      	ldr	r3, [pc, #36]	@ (8009b78 <TMC2209_direction+0x4c>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	701a      	strb	r2, [r3, #0]
	}
	if(direction == TMC2209_ROT_REV){
 8009b56:	79fb      	ldrb	r3, [r7, #7]
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d109      	bne.n	8009b70 <TMC2209_direction+0x44>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	2102      	movs	r1, #2
 8009b60:	4806      	ldr	r0, [pc, #24]	@ (8009b7c <TMC2209_direction+0x50>)
 8009b62:	f7f9 f85a 	bl	8002c1a <HAL_GPIO_WritePin>
		rotation_dir = TMC2209_ROT_REV;
 8009b66:	4b04      	ldr	r3, [pc, #16]	@ (8009b78 <TMC2209_direction+0x4c>)
 8009b68:	2201      	movs	r2, #1
 8009b6a:	701a      	strb	r2, [r3, #0]
 8009b6c:	e000      	b.n	8009b70 <TMC2209_direction+0x44>
	if(direction == rotation_dir) return;
 8009b6e:	bf00      	nop
	}
}
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	200012dc 	.word	0x200012dc
 8009b7c:	40010800 	.word	0x40010800

08009b80 <PID_controller>:

void PID_controller(int32_t* setpoint, int32_t *current, float* result){
 8009b80:	b5b0      	push	{r4, r5, r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
	uint32_t time_now = HAL_GetTick();
 8009b8c:	f7f8 fa30 	bl	8001ff0 <HAL_GetTick>
 8009b90:	6178      	str	r0, [r7, #20]
	if(time_now - pid_last_time >= PID_SAMPLING){
 8009b92:	4b77      	ldr	r3, [pc, #476]	@ (8009d70 <PID_controller+0x1f0>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	2b09      	cmp	r3, #9
 8009b9c:	f240 80d8 	bls.w	8009d50 <PID_controller+0x1d0>
		pid_error = (float)(*setpoint - *current);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7f7 f866 	bl	8000c7c <__aeabi_i2f>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	4a70      	ldr	r2, [pc, #448]	@ (8009d74 <PID_controller+0x1f4>)
 8009bb4:	6013      	str	r3, [r2, #0]

		if(fabs(pid_error) < PID_DEADBAND){
 8009bb6:	4b6f      	ldr	r3, [pc, #444]	@ (8009d74 <PID_controller+0x1f4>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bbe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7f7 fa4c 	bl	8001060 <__aeabi_fcmplt>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d004      	beq.n	8009bd8 <PID_controller+0x58>
			*result = 0;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f04f 0200 	mov.w	r2, #0
 8009bd4:	601a      	str	r2, [r3, #0]
			return;
 8009bd6:	e0bb      	b.n	8009d50 <PID_controller+0x1d0>
		}

		if(fabs(pid_error) > PID_INTEGRAL_TRESHOLD){
 8009bd8:	4b66      	ldr	r3, [pc, #408]	@ (8009d74 <PID_controller+0x1f4>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009be0:	4965      	ldr	r1, [pc, #404]	@ (8009d78 <PID_controller+0x1f8>)
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7f7 fa5a 	bl	800109c <__aeabi_fcmpgt>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d026      	beq.n	8009c3c <PID_controller+0xbc>
			pid_integral += pid_error;
 8009bee:	4b63      	ldr	r3, [pc, #396]	@ (8009d7c <PID_controller+0x1fc>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a60      	ldr	r2, [pc, #384]	@ (8009d74 <PID_controller+0x1f4>)
 8009bf4:	6812      	ldr	r2, [r2, #0]
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7f6 ff8b 	bl	8000b14 <__addsf3>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	461a      	mov	r2, r3
 8009c02:	4b5e      	ldr	r3, [pc, #376]	@ (8009d7c <PID_controller+0x1fc>)
 8009c04:	601a      	str	r2, [r3, #0]
			if(pid_integral > PID_INTEGRAL_MAX) pid_integral = PID_INTEGRAL_MAX;
 8009c06:	4b5d      	ldr	r3, [pc, #372]	@ (8009d7c <PID_controller+0x1fc>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	495d      	ldr	r1, [pc, #372]	@ (8009d80 <PID_controller+0x200>)
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7f7 fa45 	bl	800109c <__aeabi_fcmpgt>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d002      	beq.n	8009c1e <PID_controller+0x9e>
 8009c18:	4b58      	ldr	r3, [pc, #352]	@ (8009d7c <PID_controller+0x1fc>)
 8009c1a:	4a59      	ldr	r2, [pc, #356]	@ (8009d80 <PID_controller+0x200>)
 8009c1c:	601a      	str	r2, [r3, #0]
			if(pid_integral < PID_INTEGRAL_MIN) pid_integral = PID_INTEGRAL_MIN;
 8009c1e:	4b57      	ldr	r3, [pc, #348]	@ (8009d7c <PID_controller+0x1fc>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f04f 0100 	mov.w	r1, #0
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7f7 fa1a 	bl	8001060 <__aeabi_fcmplt>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d008      	beq.n	8009c44 <PID_controller+0xc4>
 8009c32:	4b52      	ldr	r3, [pc, #328]	@ (8009d7c <PID_controller+0x1fc>)
 8009c34:	f04f 0200 	mov.w	r2, #0
 8009c38:	601a      	str	r2, [r3, #0]
 8009c3a:	e003      	b.n	8009c44 <PID_controller+0xc4>
		}else{
			pid_integral = 0;
 8009c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8009d7c <PID_controller+0x1fc>)
 8009c3e:	f04f 0200 	mov.w	r2, #0
 8009c42:	601a      	str	r2, [r3, #0]
		}

		float direvative = (pid_error - pid_last_error) / (time_now - pid_last_time);
 8009c44:	4b4b      	ldr	r3, [pc, #300]	@ (8009d74 <PID_controller+0x1f4>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a4e      	ldr	r2, [pc, #312]	@ (8009d84 <PID_controller+0x204>)
 8009c4a:	6812      	ldr	r2, [r2, #0]
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7f6 ff5e 	bl	8000b10 <__aeabi_fsub>
 8009c54:	4603      	mov	r3, r0
 8009c56:	461c      	mov	r4, r3
 8009c58:	4b45      	ldr	r3, [pc, #276]	@ (8009d70 <PID_controller+0x1f0>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7f7 f807 	bl	8000c74 <__aeabi_ui2f>
 8009c66:	4603      	mov	r3, r0
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f7f7 f90e 	bl	8000e8c <__aeabi_fdiv>
 8009c70:	4603      	mov	r3, r0
 8009c72:	613b      	str	r3, [r7, #16]
		pid_direvative = (pid_direvative * 0.9f) + (direvative * 0.1f);
 8009c74:	4b44      	ldr	r3, [pc, #272]	@ (8009d88 <PID_controller+0x208>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4944      	ldr	r1, [pc, #272]	@ (8009d8c <PID_controller+0x20c>)
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7f7 f852 	bl	8000d24 <__aeabi_fmul>
 8009c80:	4603      	mov	r3, r0
 8009c82:	461c      	mov	r4, r3
 8009c84:	4942      	ldr	r1, [pc, #264]	@ (8009d90 <PID_controller+0x210>)
 8009c86:	6938      	ldr	r0, [r7, #16]
 8009c88:	f7f7 f84c 	bl	8000d24 <__aeabi_fmul>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	4619      	mov	r1, r3
 8009c90:	4620      	mov	r0, r4
 8009c92:	f7f6 ff3f 	bl	8000b14 <__addsf3>
 8009c96:	4603      	mov	r3, r0
 8009c98:	461a      	mov	r2, r3
 8009c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8009d88 <PID_controller+0x208>)
 8009c9c:	601a      	str	r2, [r3, #0]

		pid_output = (PID_KP * pid_error) + (PID_KI * pid_integral) + (PID_KD * pid_direvative);
 8009c9e:	4b35      	ldr	r3, [pc, #212]	@ (8009d74 <PID_controller+0x1f4>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7f6 fbb8 	bl	8000418 <__aeabi_f2d>
 8009ca8:	a32b      	add	r3, pc, #172	@ (adr r3, 8009d58 <PID_controller+0x1d8>)
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	f7f6 fc0b 	bl	80004c8 <__aeabi_dmul>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4614      	mov	r4, r2
 8009cb8:	461d      	mov	r5, r3
 8009cba:	4b30      	ldr	r3, [pc, #192]	@ (8009d7c <PID_controller+0x1fc>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7f6 fbaa 	bl	8000418 <__aeabi_f2d>
 8009cc4:	a326      	add	r3, pc, #152	@ (adr r3, 8009d60 <PID_controller+0x1e0>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f7f6 fbfd 	bl	80004c8 <__aeabi_dmul>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	f7f6 fa41 	bl	800015c <__adddf3>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4614      	mov	r4, r2
 8009ce0:	461d      	mov	r5, r3
 8009ce2:	4b29      	ldr	r3, [pc, #164]	@ (8009d88 <PID_controller+0x208>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7f6 fb96 	bl	8000418 <__aeabi_f2d>
 8009cec:	a31e      	add	r3, pc, #120	@ (adr r3, 8009d68 <PID_controller+0x1e8>)
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	f7f6 fbe9 	bl	80004c8 <__aeabi_dmul>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	f7f6 fa2d 	bl	800015c <__adddf3>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	4610      	mov	r0, r2
 8009d08:	4619      	mov	r1, r3
 8009d0a:	f7f6 fead 	bl	8000a68 <__aeabi_d2f>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	4a20      	ldr	r2, [pc, #128]	@ (8009d94 <PID_controller+0x214>)
 8009d12:	6013      	str	r3, [r2, #0]

		pid_last_error = pid_error;
 8009d14:	4b17      	ldr	r3, [pc, #92]	@ (8009d74 <PID_controller+0x1f4>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a1a      	ldr	r2, [pc, #104]	@ (8009d84 <PID_controller+0x204>)
 8009d1a:	6013      	str	r3, [r2, #0]
		pid_last_time = time_now;
 8009d1c:	4a14      	ldr	r2, [pc, #80]	@ (8009d70 <PID_controller+0x1f0>)
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	6013      	str	r3, [r2, #0]

		*result = fmaxf(0.0f, fminf(1.0f, fabs(pid_output / PID_MAX)));
 8009d22:	4b1c      	ldr	r3, [pc, #112]	@ (8009d94 <PID_controller+0x214>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	491c      	ldr	r1, [pc, #112]	@ (8009d98 <PID_controller+0x218>)
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7f7 f8af 	bl	8000e8c <__aeabi_fdiv>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d34:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 fa9a 	bl	800a272 <fminf>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	f04f 0100 	mov.w	r1, #0
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 fa7f 	bl	800a248 <fmaxf>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	601a      	str	r2, [r3, #0]
	}
}
 8009d50:	3718      	adds	r7, #24
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bdb0      	pop	{r4, r5, r7, pc}
 8009d56:	bf00      	nop
 8009d58:	39405e45 	.word	0x39405e45
 8009d5c:	40248aac 	.word	0x40248aac
 8009d60:	7c58147b 	.word	0x7c58147b
 8009d64:	403772f2 	.word	0x403772f2
 8009d68:	bb11e265 	.word	0xbb11e265
 8009d6c:	40215068 	.word	0x40215068
 8009d70:	200012fc 	.word	0x200012fc
 8009d74:	200012e4 	.word	0x200012e4
 8009d78:	42480000 	.word	0x42480000
 8009d7c:	200012ec 	.word	0x200012ec
 8009d80:	49742400 	.word	0x49742400
 8009d84:	200012e8 	.word	0x200012e8
 8009d88:	200012f0 	.word	0x200012f0
 8009d8c:	3f666666 	.word	0x3f666666
 8009d90:	3dcccccd 	.word	0x3dcccccd
 8009d94:	200012f4 	.word	0x200012f4
 8009d98:	47c35000 	.word	0x47c35000

08009d9c <TMC2209_watchPosition>:
void TMC2209_watchPosition(int32_t* target, int32_t* counter, float* speed){
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]

	PID_controller(target, counter, &pid_fraction);
 8009da8:	4a1e      	ldr	r2, [pc, #120]	@ (8009e24 <TMC2209_watchPosition+0x88>)
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f7ff fee7 	bl	8009b80 <PID_controller>

	if(*counter > *target) TMC2209_direction(TMC2209_ROT_FWD);
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	dd02      	ble.n	8009dc4 <TMC2209_watchPosition+0x28>
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	f7ff feb4 	bl	8009b2c <TMC2209_direction>
	if(*counter < *target) TMC2209_direction(TMC2209_ROT_REV);
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	da02      	bge.n	8009dd6 <TMC2209_watchPosition+0x3a>
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	f7ff feab 	bl	8009b2c <TMC2209_direction>

	if(abs(*target - *counter) > 100){
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bfb8      	it	lt
 8009de4:	425b      	neglt	r3, r3
 8009de6:	2b64      	cmp	r3, #100	@ 0x64
 8009de8:	dd07      	ble.n	8009dfa <TMC2209_watchPosition+0x5e>
		if(active_microstep != TMC2209_Microsteps_1){
 8009dea:	4b0f      	ldr	r3, [pc, #60]	@ (8009e28 <TMC2209_watchPosition+0x8c>)
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	2b08      	cmp	r3, #8
 8009df0:	d00a      	beq.n	8009e08 <TMC2209_watchPosition+0x6c>
			TMC2209_setMicrostep(TMC2209_Microsteps_1);
 8009df2:	2008      	movs	r0, #8
 8009df4:	f7ff fdbc 	bl	8009970 <TMC2209_setMicrostep>
 8009df8:	e006      	b.n	8009e08 <TMC2209_watchPosition+0x6c>
		}
	}else{
		if(active_microstep != TMC2209_Microsteps_64){
 8009dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8009e28 <TMC2209_watchPosition+0x8c>)
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d002      	beq.n	8009e08 <TMC2209_watchPosition+0x6c>
			TMC2209_setMicrostep(TMC2209_Microsteps_64);
 8009e02:	2002      	movs	r0, #2
 8009e04:	f7ff fdb4 	bl	8009970 <TMC2209_setMicrostep>
		}
	}
	*speed = pid_fraction * MAX_SPEED;
 8009e08:	4b06      	ldr	r3, [pc, #24]	@ (8009e24 <TMC2209_watchPosition+0x88>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4907      	ldr	r1, [pc, #28]	@ (8009e2c <TMC2209_watchPosition+0x90>)
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7f6 ff88 	bl	8000d24 <__aeabi_fmul>
 8009e14:	4603      	mov	r3, r0
 8009e16:	461a      	mov	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	601a      	str	r2, [r3, #0]

}
 8009e1c:	bf00      	nop
 8009e1e:	3710      	adds	r7, #16
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	200012f8 	.word	0x200012f8
 8009e28:	200012d5 	.word	0x200012d5
 8009e2c:	43700000 	.word	0x43700000

08009e30 <HAL_TIM_PWM_PulseFinishedCallback>:
		}
	}
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e40:	d104      	bne.n	8009e4c <HAL_TIM_PWM_PulseFinishedCallback+0x1c>
		stepCounter ++;
 8009e42:	4b05      	ldr	r3, [pc, #20]	@ (8009e58 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3301      	adds	r3, #1
 8009e48:	4a03      	ldr	r2, [pc, #12]	@ (8009e58 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8009e4a:	6013      	str	r3, [r2, #0]
	}
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bc80      	pop	{r7}
 8009e54:	4770      	bx	lr
 8009e56:	bf00      	nop
 8009e58:	200012e0 	.word	0x200012e0

08009e5c <calculateCRC>:
#include "../Inc/TMC2209_HAL.h"

extern UART_HandleTypeDef huart1;

static void calculateCRC(uint8_t* datagram, uint8_t datagram_len)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b087      	sub	sp, #28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
	int i,j;
	uint8_t *crc = datagram + (datagram_len - 1);
 8009e68:	78fb      	ldrb	r3, [r7, #3]
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	4413      	add	r3, r2
 8009e70:	60bb      	str	r3, [r7, #8]
	uint8_t currentByte;
	*crc = 0;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2200      	movs	r2, #0
 8009e76:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (datagram_len - 1); i++) {
 8009e78:	2300      	movs	r3, #0
 8009e7a:	617b      	str	r3, [r7, #20]
 8009e7c:	e02e      	b.n	8009edc <calculateCRC+0x80>
		currentByte = datagram[i];
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	4413      	add	r3, r2
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < 8; j++) {
 8009e88:	2300      	movs	r3, #0
 8009e8a:	613b      	str	r3, [r7, #16]
 8009e8c:	e020      	b.n	8009ed0 <calculateCRC+0x74>
			if ((*crc >> 7) ^ (currentByte & 0x01))
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	09db      	lsrs	r3, r3, #7
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	461a      	mov	r2, r3
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d00a      	beq.n	8009eb8 <calculateCRC+0x5c>
				*crc = (*crc << 1) ^ 0x07;
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	005b      	lsls	r3, r3, #1
 8009ea8:	b25b      	sxtb	r3, r3
 8009eaa:	f083 0307 	eor.w	r3, r3, #7
 8009eae:	b25b      	sxtb	r3, r3
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	701a      	strb	r2, [r3, #0]
 8009eb6:	e005      	b.n	8009ec4 <calculateCRC+0x68>
			else
				*crc = (*crc << 1);
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	005b      	lsls	r3, r3, #1
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	701a      	strb	r2, [r3, #0]
			currentByte = currentByte >> 1;
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
 8009ec6:	085b      	lsrs	r3, r3, #1
 8009ec8:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < 8; j++) {
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	613b      	str	r3, [r7, #16]
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	2b07      	cmp	r3, #7
 8009ed4:	dddb      	ble.n	8009e8e <calculateCRC+0x32>
	for (i = 0; i < (datagram_len - 1); i++) {
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	78fb      	ldrb	r3, [r7, #3]
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	697a      	ldr	r2, [r7, #20]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	dbcb      	blt.n	8009e7e <calculateCRC+0x22>
		}
	}
}
 8009ee6:	bf00      	nop
 8009ee8:	bf00      	nop
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bc80      	pop	{r7}
 8009ef0:	4770      	bx	lr

08009ef2 <byteswap>:
static void byteswap (uint8_t data[4])
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b085      	sub	sp, #20
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
    uint8_t tmp;

    tmp = data[0];
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	73fb      	strb	r3, [r7, #15]
    data[0] = data[3];
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	78da      	ldrb	r2, [r3, #3]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	701a      	strb	r2, [r3, #0]
    data[3] = tmp;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	3303      	adds	r3, #3
 8009f0c:	7bfa      	ldrb	r2, [r7, #15]
 8009f0e:	701a      	strb	r2, [r3, #0]
    tmp = data[1];
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	785b      	ldrb	r3, [r3, #1]
 8009f14:	73fb      	strb	r3, [r7, #15]
    data[1] = data[2];
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	7892      	ldrb	r2, [r2, #2]
 8009f1e:	701a      	strb	r2, [r3, #0]
    data[2] = tmp;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	3302      	adds	r3, #2
 8009f24:	7bfa      	ldrb	r2, [r7, #15]
 8009f26:	701a      	strb	r2, [r3, #0]
}
 8009f28:	bf00      	nop
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bc80      	pop	{r7}
 8009f30:	4770      	bx	lr
	...

08009f34 <TMC2209_HAL_Write>:

HAL_StatusTypeDef TMC2209_HAL_Write(uint8_t reg, uint32_t data)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	6039      	str	r1, [r7, #0]
 8009f3e:	71fb      	strb	r3, [r7, #7]
	TMC2209_Write_Datagram_t datagram;
	datagram.data = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	2300      	movs	r3, #0
 8009f46:	613b      	str	r3, [r7, #16]
	datagram.message.sync = 0x05;
 8009f48:	2305      	movs	r3, #5
 8009f4a:	733b      	strb	r3, [r7, #12]
	datagram.message.slave = 0x00;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	737b      	strb	r3, [r7, #13]
	datagram.message.address.idx = reg;
 8009f50:	79fb      	ldrb	r3, [r7, #7]
 8009f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
 8009f5a:	f362 0306 	bfi	r3, r2, #0, #7
 8009f5e:	73bb      	strb	r3, [r7, #14]
	datagram.message.address.write = REG_WRITE;
 8009f60:	7bbb      	ldrb	r3, [r7, #14]
 8009f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f66:	73bb      	strb	r3, [r7, #14]
	datagram.message.payload.value = data;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	f8c7 300f 	str.w	r3, [r7, #15]
	byteswap(datagram.message.payload.data);
 8009f6e:	f107 030c 	add.w	r3, r7, #12
 8009f72:	3303      	adds	r3, #3
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7ff ffbc 	bl	8009ef2 <byteswap>

	calculateCRC(datagram.bytes, sizeof(TMC2209_Write_Datagram_t));
 8009f7a:	f107 030c 	add.w	r3, r7, #12
 8009f7e:	2108      	movs	r1, #8
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7ff ff6b 	bl	8009e5c <calculateCRC>
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8009f86:	4809      	ldr	r0, [pc, #36]	@ (8009fac <TMC2209_HAL_Write+0x78>)
 8009f88:	f7fd fcdb 	bl	8007942 <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, datagram.bytes, sizeof(TMC2209_Write_Datagram_t), HAL_MAX_DELAY);
 8009f8c:	f107 010c 	add.w	r1, r7, #12
 8009f90:	f04f 33ff 	mov.w	r3, #4294967295
 8009f94:	2208      	movs	r2, #8
 8009f96:	4805      	ldr	r0, [pc, #20]	@ (8009fac <TMC2209_HAL_Write+0x78>)
 8009f98:	f7fd f93e 	bl	8007218 <HAL_UART_Transmit>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	75fb      	strb	r3, [r7, #23]

	return status;
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	20000480 	.word	0x20000480

08009fb0 <__malloc_lock>:
 8009fb0:	4801      	ldr	r0, [pc, #4]	@ (8009fb8 <__malloc_lock+0x8>)
 8009fb2:	f000 b891 	b.w	800a0d8 <__retarget_lock_acquire_recursive>
 8009fb6:	bf00      	nop
 8009fb8:	2000143c 	.word	0x2000143c

08009fbc <__malloc_unlock>:
 8009fbc:	4801      	ldr	r0, [pc, #4]	@ (8009fc4 <__malloc_unlock+0x8>)
 8009fbe:	f000 b88c 	b.w	800a0da <__retarget_lock_release_recursive>
 8009fc2:	bf00      	nop
 8009fc4:	2000143c 	.word	0x2000143c

08009fc8 <memset>:
 8009fc8:	4603      	mov	r3, r0
 8009fca:	4402      	add	r2, r0
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d100      	bne.n	8009fd2 <memset+0xa>
 8009fd0:	4770      	bx	lr
 8009fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8009fd6:	e7f9      	b.n	8009fcc <memset+0x4>

08009fd8 <_reclaim_reent>:
 8009fd8:	4b29      	ldr	r3, [pc, #164]	@ (800a080 <_reclaim_reent+0xa8>)
 8009fda:	b570      	push	{r4, r5, r6, lr}
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4604      	mov	r4, r0
 8009fe0:	4283      	cmp	r3, r0
 8009fe2:	d04b      	beq.n	800a07c <_reclaim_reent+0xa4>
 8009fe4:	69c3      	ldr	r3, [r0, #28]
 8009fe6:	b1ab      	cbz	r3, 800a014 <_reclaim_reent+0x3c>
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	b16b      	cbz	r3, 800a008 <_reclaim_reent+0x30>
 8009fec:	2500      	movs	r5, #0
 8009fee:	69e3      	ldr	r3, [r4, #28]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	5959      	ldr	r1, [r3, r5]
 8009ff4:	2900      	cmp	r1, #0
 8009ff6:	d13b      	bne.n	800a070 <_reclaim_reent+0x98>
 8009ff8:	3504      	adds	r5, #4
 8009ffa:	2d80      	cmp	r5, #128	@ 0x80
 8009ffc:	d1f7      	bne.n	8009fee <_reclaim_reent+0x16>
 8009ffe:	69e3      	ldr	r3, [r4, #28]
 800a000:	4620      	mov	r0, r4
 800a002:	68d9      	ldr	r1, [r3, #12]
 800a004:	f000 f86a 	bl	800a0dc <_free_r>
 800a008:	69e3      	ldr	r3, [r4, #28]
 800a00a:	6819      	ldr	r1, [r3, #0]
 800a00c:	b111      	cbz	r1, 800a014 <_reclaim_reent+0x3c>
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 f864 	bl	800a0dc <_free_r>
 800a014:	6961      	ldr	r1, [r4, #20]
 800a016:	b111      	cbz	r1, 800a01e <_reclaim_reent+0x46>
 800a018:	4620      	mov	r0, r4
 800a01a:	f000 f85f 	bl	800a0dc <_free_r>
 800a01e:	69e1      	ldr	r1, [r4, #28]
 800a020:	b111      	cbz	r1, 800a028 <_reclaim_reent+0x50>
 800a022:	4620      	mov	r0, r4
 800a024:	f000 f85a 	bl	800a0dc <_free_r>
 800a028:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a02a:	b111      	cbz	r1, 800a032 <_reclaim_reent+0x5a>
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 f855 	bl	800a0dc <_free_r>
 800a032:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a034:	b111      	cbz	r1, 800a03c <_reclaim_reent+0x64>
 800a036:	4620      	mov	r0, r4
 800a038:	f000 f850 	bl	800a0dc <_free_r>
 800a03c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a03e:	b111      	cbz	r1, 800a046 <_reclaim_reent+0x6e>
 800a040:	4620      	mov	r0, r4
 800a042:	f000 f84b 	bl	800a0dc <_free_r>
 800a046:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a048:	b111      	cbz	r1, 800a050 <_reclaim_reent+0x78>
 800a04a:	4620      	mov	r0, r4
 800a04c:	f000 f846 	bl	800a0dc <_free_r>
 800a050:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a052:	b111      	cbz	r1, 800a05a <_reclaim_reent+0x82>
 800a054:	4620      	mov	r0, r4
 800a056:	f000 f841 	bl	800a0dc <_free_r>
 800a05a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a05c:	b111      	cbz	r1, 800a064 <_reclaim_reent+0x8c>
 800a05e:	4620      	mov	r0, r4
 800a060:	f000 f83c 	bl	800a0dc <_free_r>
 800a064:	6a23      	ldr	r3, [r4, #32]
 800a066:	b14b      	cbz	r3, 800a07c <_reclaim_reent+0xa4>
 800a068:	4620      	mov	r0, r4
 800a06a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a06e:	4718      	bx	r3
 800a070:	680e      	ldr	r6, [r1, #0]
 800a072:	4620      	mov	r0, r4
 800a074:	f000 f832 	bl	800a0dc <_free_r>
 800a078:	4631      	mov	r1, r6
 800a07a:	e7bb      	b.n	8009ff4 <_reclaim_reent+0x1c>
 800a07c:	bd70      	pop	{r4, r5, r6, pc}
 800a07e:	bf00      	nop
 800a080:	2000001c 	.word	0x2000001c

0800a084 <__errno>:
 800a084:	4b01      	ldr	r3, [pc, #4]	@ (800a08c <__errno+0x8>)
 800a086:	6818      	ldr	r0, [r3, #0]
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	2000001c 	.word	0x2000001c

0800a090 <__libc_init_array>:
 800a090:	b570      	push	{r4, r5, r6, lr}
 800a092:	2600      	movs	r6, #0
 800a094:	4d0c      	ldr	r5, [pc, #48]	@ (800a0c8 <__libc_init_array+0x38>)
 800a096:	4c0d      	ldr	r4, [pc, #52]	@ (800a0cc <__libc_init_array+0x3c>)
 800a098:	1b64      	subs	r4, r4, r5
 800a09a:	10a4      	asrs	r4, r4, #2
 800a09c:	42a6      	cmp	r6, r4
 800a09e:	d109      	bne.n	800a0b4 <__libc_init_array+0x24>
 800a0a0:	f000 fffe 	bl	800b0a0 <_init>
 800a0a4:	2600      	movs	r6, #0
 800a0a6:	4d0a      	ldr	r5, [pc, #40]	@ (800a0d0 <__libc_init_array+0x40>)
 800a0a8:	4c0a      	ldr	r4, [pc, #40]	@ (800a0d4 <__libc_init_array+0x44>)
 800a0aa:	1b64      	subs	r4, r4, r5
 800a0ac:	10a4      	asrs	r4, r4, #2
 800a0ae:	42a6      	cmp	r6, r4
 800a0b0:	d105      	bne.n	800a0be <__libc_init_array+0x2e>
 800a0b2:	bd70      	pop	{r4, r5, r6, pc}
 800a0b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0b8:	4798      	blx	r3
 800a0ba:	3601      	adds	r6, #1
 800a0bc:	e7ee      	b.n	800a09c <__libc_init_array+0xc>
 800a0be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0c2:	4798      	blx	r3
 800a0c4:	3601      	adds	r6, #1
 800a0c6:	e7f2      	b.n	800a0ae <__libc_init_array+0x1e>
 800a0c8:	0800b1c0 	.word	0x0800b1c0
 800a0cc:	0800b1c0 	.word	0x0800b1c0
 800a0d0:	0800b1c0 	.word	0x0800b1c0
 800a0d4:	0800b1c4 	.word	0x0800b1c4

0800a0d8 <__retarget_lock_acquire_recursive>:
 800a0d8:	4770      	bx	lr

0800a0da <__retarget_lock_release_recursive>:
 800a0da:	4770      	bx	lr

0800a0dc <_free_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4605      	mov	r5, r0
 800a0e0:	2900      	cmp	r1, #0
 800a0e2:	d040      	beq.n	800a166 <_free_r+0x8a>
 800a0e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0e8:	1f0c      	subs	r4, r1, #4
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	bfb8      	it	lt
 800a0ee:	18e4      	addlt	r4, r4, r3
 800a0f0:	f7ff ff5e 	bl	8009fb0 <__malloc_lock>
 800a0f4:	4a1c      	ldr	r2, [pc, #112]	@ (800a168 <_free_r+0x8c>)
 800a0f6:	6813      	ldr	r3, [r2, #0]
 800a0f8:	b933      	cbnz	r3, 800a108 <_free_r+0x2c>
 800a0fa:	6063      	str	r3, [r4, #4]
 800a0fc:	6014      	str	r4, [r2, #0]
 800a0fe:	4628      	mov	r0, r5
 800a100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a104:	f7ff bf5a 	b.w	8009fbc <__malloc_unlock>
 800a108:	42a3      	cmp	r3, r4
 800a10a:	d908      	bls.n	800a11e <_free_r+0x42>
 800a10c:	6820      	ldr	r0, [r4, #0]
 800a10e:	1821      	adds	r1, r4, r0
 800a110:	428b      	cmp	r3, r1
 800a112:	bf01      	itttt	eq
 800a114:	6819      	ldreq	r1, [r3, #0]
 800a116:	685b      	ldreq	r3, [r3, #4]
 800a118:	1809      	addeq	r1, r1, r0
 800a11a:	6021      	streq	r1, [r4, #0]
 800a11c:	e7ed      	b.n	800a0fa <_free_r+0x1e>
 800a11e:	461a      	mov	r2, r3
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	b10b      	cbz	r3, 800a128 <_free_r+0x4c>
 800a124:	42a3      	cmp	r3, r4
 800a126:	d9fa      	bls.n	800a11e <_free_r+0x42>
 800a128:	6811      	ldr	r1, [r2, #0]
 800a12a:	1850      	adds	r0, r2, r1
 800a12c:	42a0      	cmp	r0, r4
 800a12e:	d10b      	bne.n	800a148 <_free_r+0x6c>
 800a130:	6820      	ldr	r0, [r4, #0]
 800a132:	4401      	add	r1, r0
 800a134:	1850      	adds	r0, r2, r1
 800a136:	4283      	cmp	r3, r0
 800a138:	6011      	str	r1, [r2, #0]
 800a13a:	d1e0      	bne.n	800a0fe <_free_r+0x22>
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	4408      	add	r0, r1
 800a142:	6010      	str	r0, [r2, #0]
 800a144:	6053      	str	r3, [r2, #4]
 800a146:	e7da      	b.n	800a0fe <_free_r+0x22>
 800a148:	d902      	bls.n	800a150 <_free_r+0x74>
 800a14a:	230c      	movs	r3, #12
 800a14c:	602b      	str	r3, [r5, #0]
 800a14e:	e7d6      	b.n	800a0fe <_free_r+0x22>
 800a150:	6820      	ldr	r0, [r4, #0]
 800a152:	1821      	adds	r1, r4, r0
 800a154:	428b      	cmp	r3, r1
 800a156:	bf01      	itttt	eq
 800a158:	6819      	ldreq	r1, [r3, #0]
 800a15a:	685b      	ldreq	r3, [r3, #4]
 800a15c:	1809      	addeq	r1, r1, r0
 800a15e:	6021      	streq	r1, [r4, #0]
 800a160:	6063      	str	r3, [r4, #4]
 800a162:	6054      	str	r4, [r2, #4]
 800a164:	e7cb      	b.n	800a0fe <_free_r+0x22>
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	20001300 	.word	0x20001300

0800a16c <pow>:
 800a16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a170:	4614      	mov	r4, r2
 800a172:	461d      	mov	r5, r3
 800a174:	4680      	mov	r8, r0
 800a176:	4689      	mov	r9, r1
 800a178:	f000 f8f2 	bl	800a360 <__ieee754_pow>
 800a17c:	4622      	mov	r2, r4
 800a17e:	4606      	mov	r6, r0
 800a180:	460f      	mov	r7, r1
 800a182:	462b      	mov	r3, r5
 800a184:	4620      	mov	r0, r4
 800a186:	4629      	mov	r1, r5
 800a188:	f7f6 fc38 	bl	80009fc <__aeabi_dcmpun>
 800a18c:	bbc8      	cbnz	r0, 800a202 <pow+0x96>
 800a18e:	2200      	movs	r2, #0
 800a190:	2300      	movs	r3, #0
 800a192:	4640      	mov	r0, r8
 800a194:	4649      	mov	r1, r9
 800a196:	f7f6 fbff 	bl	8000998 <__aeabi_dcmpeq>
 800a19a:	b1b8      	cbz	r0, 800a1cc <pow+0x60>
 800a19c:	2200      	movs	r2, #0
 800a19e:	2300      	movs	r3, #0
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	f7f6 fbf8 	bl	8000998 <__aeabi_dcmpeq>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d141      	bne.n	800a230 <pow+0xc4>
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	f000 f844 	bl	800a23c <finite>
 800a1b4:	b328      	cbz	r0, 800a202 <pow+0x96>
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	4629      	mov	r1, r5
 800a1be:	f7f6 fbf5 	bl	80009ac <__aeabi_dcmplt>
 800a1c2:	b1f0      	cbz	r0, 800a202 <pow+0x96>
 800a1c4:	f7ff ff5e 	bl	800a084 <__errno>
 800a1c8:	2322      	movs	r3, #34	@ 0x22
 800a1ca:	e019      	b.n	800a200 <pow+0x94>
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	f000 f834 	bl	800a23c <finite>
 800a1d4:	b9c8      	cbnz	r0, 800a20a <pow+0x9e>
 800a1d6:	4640      	mov	r0, r8
 800a1d8:	4649      	mov	r1, r9
 800a1da:	f000 f82f 	bl	800a23c <finite>
 800a1de:	b1a0      	cbz	r0, 800a20a <pow+0x9e>
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	f000 f82a 	bl	800a23c <finite>
 800a1e8:	b178      	cbz	r0, 800a20a <pow+0x9e>
 800a1ea:	4632      	mov	r2, r6
 800a1ec:	463b      	mov	r3, r7
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	f7f6 fc03 	bl	80009fc <__aeabi_dcmpun>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d0e4      	beq.n	800a1c4 <pow+0x58>
 800a1fa:	f7ff ff43 	bl	800a084 <__errno>
 800a1fe:	2321      	movs	r3, #33	@ 0x21
 800a200:	6003      	str	r3, [r0, #0]
 800a202:	4630      	mov	r0, r6
 800a204:	4639      	mov	r1, r7
 800a206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a20a:	2200      	movs	r2, #0
 800a20c:	2300      	movs	r3, #0
 800a20e:	4630      	mov	r0, r6
 800a210:	4639      	mov	r1, r7
 800a212:	f7f6 fbc1 	bl	8000998 <__aeabi_dcmpeq>
 800a216:	2800      	cmp	r0, #0
 800a218:	d0f3      	beq.n	800a202 <pow+0x96>
 800a21a:	4640      	mov	r0, r8
 800a21c:	4649      	mov	r1, r9
 800a21e:	f000 f80d 	bl	800a23c <finite>
 800a222:	2800      	cmp	r0, #0
 800a224:	d0ed      	beq.n	800a202 <pow+0x96>
 800a226:	4620      	mov	r0, r4
 800a228:	4629      	mov	r1, r5
 800a22a:	f000 f807 	bl	800a23c <finite>
 800a22e:	e7c8      	b.n	800a1c2 <pow+0x56>
 800a230:	2600      	movs	r6, #0
 800a232:	4f01      	ldr	r7, [pc, #4]	@ (800a238 <pow+0xcc>)
 800a234:	e7e5      	b.n	800a202 <pow+0x96>
 800a236:	bf00      	nop
 800a238:	3ff00000 	.word	0x3ff00000

0800a23c <finite>:
 800a23c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800a240:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a244:	0fc0      	lsrs	r0, r0, #31
 800a246:	4770      	bx	lr

0800a248 <fmaxf>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4604      	mov	r4, r0
 800a24c:	460d      	mov	r5, r1
 800a24e:	f000 f825 	bl	800a29c <__fpclassifyf>
 800a252:	b910      	cbnz	r0, 800a25a <fmaxf+0x12>
 800a254:	462c      	mov	r4, r5
 800a256:	4620      	mov	r0, r4
 800a258:	bd38      	pop	{r3, r4, r5, pc}
 800a25a:	4628      	mov	r0, r5
 800a25c:	f000 f81e 	bl	800a29c <__fpclassifyf>
 800a260:	2800      	cmp	r0, #0
 800a262:	d0f8      	beq.n	800a256 <fmaxf+0xe>
 800a264:	4629      	mov	r1, r5
 800a266:	4620      	mov	r0, r4
 800a268:	f7f6 ff18 	bl	800109c <__aeabi_fcmpgt>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	d0f1      	beq.n	800a254 <fmaxf+0xc>
 800a270:	e7f1      	b.n	800a256 <fmaxf+0xe>

0800a272 <fminf>:
 800a272:	b538      	push	{r3, r4, r5, lr}
 800a274:	4604      	mov	r4, r0
 800a276:	460d      	mov	r5, r1
 800a278:	f000 f810 	bl	800a29c <__fpclassifyf>
 800a27c:	b910      	cbnz	r0, 800a284 <fminf+0x12>
 800a27e:	462c      	mov	r4, r5
 800a280:	4620      	mov	r0, r4
 800a282:	bd38      	pop	{r3, r4, r5, pc}
 800a284:	4628      	mov	r0, r5
 800a286:	f000 f809 	bl	800a29c <__fpclassifyf>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d0f8      	beq.n	800a280 <fminf+0xe>
 800a28e:	4629      	mov	r1, r5
 800a290:	4620      	mov	r0, r4
 800a292:	f7f6 fee5 	bl	8001060 <__aeabi_fcmplt>
 800a296:	2800      	cmp	r0, #0
 800a298:	d0f1      	beq.n	800a27e <fminf+0xc>
 800a29a:	e7f1      	b.n	800a280 <fminf+0xe>

0800a29c <__fpclassifyf>:
 800a29c:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 800a2a0:	d00d      	beq.n	800a2be <__fpclassifyf+0x22>
 800a2a2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800a2a6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a2aa:	d30a      	bcc.n	800a2c2 <__fpclassifyf+0x26>
 800a2ac:	4b07      	ldr	r3, [pc, #28]	@ (800a2cc <__fpclassifyf+0x30>)
 800a2ae:	1e42      	subs	r2, r0, #1
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d908      	bls.n	800a2c6 <__fpclassifyf+0x2a>
 800a2b4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a2b8:	4258      	negs	r0, r3
 800a2ba:	4158      	adcs	r0, r3
 800a2bc:	4770      	bx	lr
 800a2be:	2002      	movs	r0, #2
 800a2c0:	4770      	bx	lr
 800a2c2:	2004      	movs	r0, #4
 800a2c4:	4770      	bx	lr
 800a2c6:	2003      	movs	r0, #3
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	007ffffe 	.word	0x007ffffe

0800a2d0 <round>:
 800a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d2:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a2d6:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800a2da:	2a13      	cmp	r2, #19
 800a2dc:	4604      	mov	r4, r0
 800a2de:	460d      	mov	r5, r1
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	dc1a      	bgt.n	800a31a <round+0x4a>
 800a2e4:	2a00      	cmp	r2, #0
 800a2e6:	da0b      	bge.n	800a300 <round+0x30>
 800a2e8:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800a2ec:	3201      	adds	r2, #1
 800a2ee:	bf04      	itt	eq
 800a2f0:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800a2f4:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	461d      	mov	r5, r3
 800a2fc:	4614      	mov	r4, r2
 800a2fe:	e016      	b.n	800a32e <round+0x5e>
 800a300:	4815      	ldr	r0, [pc, #84]	@ (800a358 <round+0x88>)
 800a302:	4110      	asrs	r0, r2
 800a304:	4001      	ands	r1, r0
 800a306:	4321      	orrs	r1, r4
 800a308:	d011      	beq.n	800a32e <round+0x5e>
 800a30a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800a30e:	fa41 f202 	asr.w	r2, r1, r2
 800a312:	4413      	add	r3, r2
 800a314:	ea23 0300 	bic.w	r3, r3, r0
 800a318:	e7ee      	b.n	800a2f8 <round+0x28>
 800a31a:	2a33      	cmp	r2, #51	@ 0x33
 800a31c:	dd0a      	ble.n	800a334 <round+0x64>
 800a31e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a322:	d104      	bne.n	800a32e <round+0x5e>
 800a324:	4602      	mov	r2, r0
 800a326:	f7f5 ff19 	bl	800015c <__adddf3>
 800a32a:	4604      	mov	r4, r0
 800a32c:	460d      	mov	r5, r1
 800a32e:	4620      	mov	r0, r4
 800a330:	4629      	mov	r1, r5
 800a332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a334:	f04f 30ff 	mov.w	r0, #4294967295
 800a338:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800a33c:	40f8      	lsrs	r0, r7
 800a33e:	4220      	tst	r0, r4
 800a340:	d0f5      	beq.n	800a32e <round+0x5e>
 800a342:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800a346:	2201      	movs	r2, #1
 800a348:	408a      	lsls	r2, r1
 800a34a:	1912      	adds	r2, r2, r4
 800a34c:	bf28      	it	cs
 800a34e:	3301      	addcs	r3, #1
 800a350:	ea22 0200 	bic.w	r2, r2, r0
 800a354:	e7d1      	b.n	800a2fa <round+0x2a>
 800a356:	bf00      	nop
 800a358:	000fffff 	.word	0x000fffff
 800a35c:	00000000 	.word	0x00000000

0800a360 <__ieee754_pow>:
 800a360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a364:	b091      	sub	sp, #68	@ 0x44
 800a366:	e9cd 2300 	strd	r2, r3, [sp]
 800a36a:	468b      	mov	fp, r1
 800a36c:	e9dd 1800 	ldrd	r1, r8, [sp]
 800a370:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800a374:	4682      	mov	sl, r0
 800a376:	ea57 0001 	orrs.w	r0, r7, r1
 800a37a:	d112      	bne.n	800a3a2 <__ieee754_pow+0x42>
 800a37c:	4653      	mov	r3, sl
 800a37e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800a382:	18db      	adds	r3, r3, r3
 800a384:	4152      	adcs	r2, r2
 800a386:	4298      	cmp	r0, r3
 800a388:	4b91      	ldr	r3, [pc, #580]	@ (800a5d0 <__ieee754_pow+0x270>)
 800a38a:	4193      	sbcs	r3, r2
 800a38c:	f080 84ce 	bcs.w	800ad2c <__ieee754_pow+0x9cc>
 800a390:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a394:	4650      	mov	r0, sl
 800a396:	4659      	mov	r1, fp
 800a398:	f7f5 fee0 	bl	800015c <__adddf3>
 800a39c:	b011      	add	sp, #68	@ 0x44
 800a39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a2:	4b8c      	ldr	r3, [pc, #560]	@ (800a5d4 <__ieee754_pow+0x274>)
 800a3a4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800a3a8:	429e      	cmp	r6, r3
 800a3aa:	465d      	mov	r5, fp
 800a3ac:	46d1      	mov	r9, sl
 800a3ae:	d807      	bhi.n	800a3c0 <__ieee754_pow+0x60>
 800a3b0:	d102      	bne.n	800a3b8 <__ieee754_pow+0x58>
 800a3b2:	f1ba 0f00 	cmp.w	sl, #0
 800a3b6:	d1eb      	bne.n	800a390 <__ieee754_pow+0x30>
 800a3b8:	429f      	cmp	r7, r3
 800a3ba:	d801      	bhi.n	800a3c0 <__ieee754_pow+0x60>
 800a3bc:	d10f      	bne.n	800a3de <__ieee754_pow+0x7e>
 800a3be:	b171      	cbz	r1, 800a3de <__ieee754_pow+0x7e>
 800a3c0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a3c4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a3c8:	ea55 0509 	orrs.w	r5, r5, r9
 800a3cc:	d1e0      	bne.n	800a390 <__ieee754_pow+0x30>
 800a3ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a3d2:	18db      	adds	r3, r3, r3
 800a3d4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a3d8:	4152      	adcs	r2, r2
 800a3da:	429d      	cmp	r5, r3
 800a3dc:	e7d4      	b.n	800a388 <__ieee754_pow+0x28>
 800a3de:	2d00      	cmp	r5, #0
 800a3e0:	4633      	mov	r3, r6
 800a3e2:	da39      	bge.n	800a458 <__ieee754_pow+0xf8>
 800a3e4:	4a7c      	ldr	r2, [pc, #496]	@ (800a5d8 <__ieee754_pow+0x278>)
 800a3e6:	4297      	cmp	r7, r2
 800a3e8:	d84e      	bhi.n	800a488 <__ieee754_pow+0x128>
 800a3ea:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a3ee:	4297      	cmp	r7, r2
 800a3f0:	f240 84ab 	bls.w	800ad4a <__ieee754_pow+0x9ea>
 800a3f4:	153a      	asrs	r2, r7, #20
 800a3f6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a3fa:	2a14      	cmp	r2, #20
 800a3fc:	dd0f      	ble.n	800a41e <__ieee754_pow+0xbe>
 800a3fe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a402:	fa21 f402 	lsr.w	r4, r1, r2
 800a406:	fa04 f202 	lsl.w	r2, r4, r2
 800a40a:	428a      	cmp	r2, r1
 800a40c:	f040 849d 	bne.w	800ad4a <__ieee754_pow+0x9ea>
 800a410:	f004 0401 	and.w	r4, r4, #1
 800a414:	f1c4 0402 	rsb	r4, r4, #2
 800a418:	2900      	cmp	r1, #0
 800a41a:	d15a      	bne.n	800a4d2 <__ieee754_pow+0x172>
 800a41c:	e00e      	b.n	800a43c <__ieee754_pow+0xdc>
 800a41e:	2900      	cmp	r1, #0
 800a420:	d156      	bne.n	800a4d0 <__ieee754_pow+0x170>
 800a422:	f1c2 0214 	rsb	r2, r2, #20
 800a426:	fa47 f402 	asr.w	r4, r7, r2
 800a42a:	fa04 f202 	lsl.w	r2, r4, r2
 800a42e:	42ba      	cmp	r2, r7
 800a430:	f040 8488 	bne.w	800ad44 <__ieee754_pow+0x9e4>
 800a434:	f004 0401 	and.w	r4, r4, #1
 800a438:	f1c4 0402 	rsb	r4, r4, #2
 800a43c:	4a67      	ldr	r2, [pc, #412]	@ (800a5dc <__ieee754_pow+0x27c>)
 800a43e:	4297      	cmp	r7, r2
 800a440:	d130      	bne.n	800a4a4 <__ieee754_pow+0x144>
 800a442:	f1b8 0f00 	cmp.w	r8, #0
 800a446:	f280 8479 	bge.w	800ad3c <__ieee754_pow+0x9dc>
 800a44a:	4652      	mov	r2, sl
 800a44c:	465b      	mov	r3, fp
 800a44e:	2000      	movs	r0, #0
 800a450:	4962      	ldr	r1, [pc, #392]	@ (800a5dc <__ieee754_pow+0x27c>)
 800a452:	f7f6 f963 	bl	800071c <__aeabi_ddiv>
 800a456:	e7a1      	b.n	800a39c <__ieee754_pow+0x3c>
 800a458:	2400      	movs	r4, #0
 800a45a:	2900      	cmp	r1, #0
 800a45c:	d139      	bne.n	800a4d2 <__ieee754_pow+0x172>
 800a45e:	4a5d      	ldr	r2, [pc, #372]	@ (800a5d4 <__ieee754_pow+0x274>)
 800a460:	4297      	cmp	r7, r2
 800a462:	d1eb      	bne.n	800a43c <__ieee754_pow+0xdc>
 800a464:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800a468:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800a46c:	ea53 0309 	orrs.w	r3, r3, r9
 800a470:	f000 845c 	beq.w	800ad2c <__ieee754_pow+0x9cc>
 800a474:	4b5a      	ldr	r3, [pc, #360]	@ (800a5e0 <__ieee754_pow+0x280>)
 800a476:	429e      	cmp	r6, r3
 800a478:	d908      	bls.n	800a48c <__ieee754_pow+0x12c>
 800a47a:	f1b8 0f00 	cmp.w	r8, #0
 800a47e:	f2c0 8459 	blt.w	800ad34 <__ieee754_pow+0x9d4>
 800a482:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a486:	e789      	b.n	800a39c <__ieee754_pow+0x3c>
 800a488:	2402      	movs	r4, #2
 800a48a:	e7e6      	b.n	800a45a <__ieee754_pow+0xfa>
 800a48c:	f1b8 0f00 	cmp.w	r8, #0
 800a490:	f04f 0000 	mov.w	r0, #0
 800a494:	f04f 0100 	mov.w	r1, #0
 800a498:	da80      	bge.n	800a39c <__ieee754_pow+0x3c>
 800a49a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a49e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a4a2:	e77b      	b.n	800a39c <__ieee754_pow+0x3c>
 800a4a4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800a4a8:	d106      	bne.n	800a4b8 <__ieee754_pow+0x158>
 800a4aa:	4652      	mov	r2, sl
 800a4ac:	465b      	mov	r3, fp
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	4659      	mov	r1, fp
 800a4b2:	f7f6 f809 	bl	80004c8 <__aeabi_dmul>
 800a4b6:	e771      	b.n	800a39c <__ieee754_pow+0x3c>
 800a4b8:	4a4a      	ldr	r2, [pc, #296]	@ (800a5e4 <__ieee754_pow+0x284>)
 800a4ba:	4590      	cmp	r8, r2
 800a4bc:	d109      	bne.n	800a4d2 <__ieee754_pow+0x172>
 800a4be:	2d00      	cmp	r5, #0
 800a4c0:	db07      	blt.n	800a4d2 <__ieee754_pow+0x172>
 800a4c2:	4650      	mov	r0, sl
 800a4c4:	4659      	mov	r1, fp
 800a4c6:	b011      	add	sp, #68	@ 0x44
 800a4c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4cc:	f000 bd12 	b.w	800aef4 <__ieee754_sqrt>
 800a4d0:	2400      	movs	r4, #0
 800a4d2:	4650      	mov	r0, sl
 800a4d4:	4659      	mov	r1, fp
 800a4d6:	9302      	str	r3, [sp, #8]
 800a4d8:	f000 fc6a 	bl	800adb0 <fabs>
 800a4dc:	9b02      	ldr	r3, [sp, #8]
 800a4de:	f1b9 0f00 	cmp.w	r9, #0
 800a4e2:	d127      	bne.n	800a534 <__ieee754_pow+0x1d4>
 800a4e4:	4a3d      	ldr	r2, [pc, #244]	@ (800a5dc <__ieee754_pow+0x27c>)
 800a4e6:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800a4ea:	4594      	cmp	ip, r2
 800a4ec:	d000      	beq.n	800a4f0 <__ieee754_pow+0x190>
 800a4ee:	bb0e      	cbnz	r6, 800a534 <__ieee754_pow+0x1d4>
 800a4f0:	f1b8 0f00 	cmp.w	r8, #0
 800a4f4:	da05      	bge.n	800a502 <__ieee754_pow+0x1a2>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	4937      	ldr	r1, [pc, #220]	@ (800a5dc <__ieee754_pow+0x27c>)
 800a4fe:	f7f6 f90d 	bl	800071c <__aeabi_ddiv>
 800a502:	2d00      	cmp	r5, #0
 800a504:	f6bf af4a 	bge.w	800a39c <__ieee754_pow+0x3c>
 800a508:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800a50c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a510:	4326      	orrs	r6, r4
 800a512:	d108      	bne.n	800a526 <__ieee754_pow+0x1c6>
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	4610      	mov	r0, r2
 800a51a:	4619      	mov	r1, r3
 800a51c:	f7f5 fe1c 	bl	8000158 <__aeabi_dsub>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	e795      	b.n	800a452 <__ieee754_pow+0xf2>
 800a526:	2c01      	cmp	r4, #1
 800a528:	f47f af38 	bne.w	800a39c <__ieee754_pow+0x3c>
 800a52c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a530:	4619      	mov	r1, r3
 800a532:	e733      	b.n	800a39c <__ieee754_pow+0x3c>
 800a534:	0fea      	lsrs	r2, r5, #31
 800a536:	3a01      	subs	r2, #1
 800a538:	ea52 0c04 	orrs.w	ip, r2, r4
 800a53c:	d102      	bne.n	800a544 <__ieee754_pow+0x1e4>
 800a53e:	4652      	mov	r2, sl
 800a540:	465b      	mov	r3, fp
 800a542:	e7e9      	b.n	800a518 <__ieee754_pow+0x1b8>
 800a544:	f04f 0900 	mov.w	r9, #0
 800a548:	3c01      	subs	r4, #1
 800a54a:	4314      	orrs	r4, r2
 800a54c:	bf14      	ite	ne
 800a54e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800a5dc <__ieee754_pow+0x27c>
 800a552:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800a5e8 <__ieee754_pow+0x288>
 800a556:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800a55a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800a55e:	f240 8107 	bls.w	800a770 <__ieee754_pow+0x410>
 800a562:	4b22      	ldr	r3, [pc, #136]	@ (800a5ec <__ieee754_pow+0x28c>)
 800a564:	429f      	cmp	r7, r3
 800a566:	4b1e      	ldr	r3, [pc, #120]	@ (800a5e0 <__ieee754_pow+0x280>)
 800a568:	d913      	bls.n	800a592 <__ieee754_pow+0x232>
 800a56a:	429e      	cmp	r6, r3
 800a56c:	d808      	bhi.n	800a580 <__ieee754_pow+0x220>
 800a56e:	f1b8 0f00 	cmp.w	r8, #0
 800a572:	da08      	bge.n	800a586 <__ieee754_pow+0x226>
 800a574:	2000      	movs	r0, #0
 800a576:	b011      	add	sp, #68	@ 0x44
 800a578:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	f000 bcb4 	b.w	800aee8 <__math_oflow>
 800a580:	f1b8 0f00 	cmp.w	r8, #0
 800a584:	dcf6      	bgt.n	800a574 <__ieee754_pow+0x214>
 800a586:	2000      	movs	r0, #0
 800a588:	b011      	add	sp, #68	@ 0x44
 800a58a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58e:	f000 bca6 	b.w	800aede <__math_uflow>
 800a592:	429e      	cmp	r6, r3
 800a594:	d20c      	bcs.n	800a5b0 <__ieee754_pow+0x250>
 800a596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a59a:	2200      	movs	r2, #0
 800a59c:	2300      	movs	r3, #0
 800a59e:	f7f6 fa05 	bl	80009ac <__aeabi_dcmplt>
 800a5a2:	3800      	subs	r0, #0
 800a5a4:	bf18      	it	ne
 800a5a6:	2001      	movne	r0, #1
 800a5a8:	f1b8 0f00 	cmp.w	r8, #0
 800a5ac:	daec      	bge.n	800a588 <__ieee754_pow+0x228>
 800a5ae:	e7e2      	b.n	800a576 <__ieee754_pow+0x216>
 800a5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a5dc <__ieee754_pow+0x27c>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	429e      	cmp	r6, r3
 800a5b6:	d91b      	bls.n	800a5f0 <__ieee754_pow+0x290>
 800a5b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f7f6 f9f5 	bl	80009ac <__aeabi_dcmplt>
 800a5c2:	3800      	subs	r0, #0
 800a5c4:	bf18      	it	ne
 800a5c6:	2001      	movne	r0, #1
 800a5c8:	f1b8 0f00 	cmp.w	r8, #0
 800a5cc:	dcd3      	bgt.n	800a576 <__ieee754_pow+0x216>
 800a5ce:	e7db      	b.n	800a588 <__ieee754_pow+0x228>
 800a5d0:	fff00000 	.word	0xfff00000
 800a5d4:	7ff00000 	.word	0x7ff00000
 800a5d8:	433fffff 	.word	0x433fffff
 800a5dc:	3ff00000 	.word	0x3ff00000
 800a5e0:	3fefffff 	.word	0x3fefffff
 800a5e4:	3fe00000 	.word	0x3fe00000
 800a5e8:	bff00000 	.word	0xbff00000
 800a5ec:	43f00000 	.word	0x43f00000
 800a5f0:	4b5b      	ldr	r3, [pc, #364]	@ (800a760 <__ieee754_pow+0x400>)
 800a5f2:	f7f5 fdb1 	bl	8000158 <__aeabi_dsub>
 800a5f6:	a352      	add	r3, pc, #328	@ (adr r3, 800a740 <__ieee754_pow+0x3e0>)
 800a5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	460d      	mov	r5, r1
 800a600:	f7f5 ff62 	bl	80004c8 <__aeabi_dmul>
 800a604:	a350      	add	r3, pc, #320	@ (adr r3, 800a748 <__ieee754_pow+0x3e8>)
 800a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60a:	4606      	mov	r6, r0
 800a60c:	460f      	mov	r7, r1
 800a60e:	4620      	mov	r0, r4
 800a610:	4629      	mov	r1, r5
 800a612:	f7f5 ff59 	bl	80004c8 <__aeabi_dmul>
 800a616:	2200      	movs	r2, #0
 800a618:	4682      	mov	sl, r0
 800a61a:	468b      	mov	fp, r1
 800a61c:	4620      	mov	r0, r4
 800a61e:	4629      	mov	r1, r5
 800a620:	4b50      	ldr	r3, [pc, #320]	@ (800a764 <__ieee754_pow+0x404>)
 800a622:	f7f5 ff51 	bl	80004c8 <__aeabi_dmul>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	a149      	add	r1, pc, #292	@ (adr r1, 800a750 <__ieee754_pow+0x3f0>)
 800a62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a630:	f7f5 fd92 	bl	8000158 <__aeabi_dsub>
 800a634:	4622      	mov	r2, r4
 800a636:	462b      	mov	r3, r5
 800a638:	f7f5 ff46 	bl	80004c8 <__aeabi_dmul>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	2000      	movs	r0, #0
 800a642:	4949      	ldr	r1, [pc, #292]	@ (800a768 <__ieee754_pow+0x408>)
 800a644:	f7f5 fd88 	bl	8000158 <__aeabi_dsub>
 800a648:	4622      	mov	r2, r4
 800a64a:	4680      	mov	r8, r0
 800a64c:	4689      	mov	r9, r1
 800a64e:	462b      	mov	r3, r5
 800a650:	4620      	mov	r0, r4
 800a652:	4629      	mov	r1, r5
 800a654:	f7f5 ff38 	bl	80004c8 <__aeabi_dmul>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	4640      	mov	r0, r8
 800a65e:	4649      	mov	r1, r9
 800a660:	f7f5 ff32 	bl	80004c8 <__aeabi_dmul>
 800a664:	a33c      	add	r3, pc, #240	@ (adr r3, 800a758 <__ieee754_pow+0x3f8>)
 800a666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66a:	f7f5 ff2d 	bl	80004c8 <__aeabi_dmul>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	4650      	mov	r0, sl
 800a674:	4659      	mov	r1, fp
 800a676:	f7f5 fd6f 	bl	8000158 <__aeabi_dsub>
 800a67a:	2400      	movs	r4, #0
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
 800a680:	4680      	mov	r8, r0
 800a682:	4689      	mov	r9, r1
 800a684:	4630      	mov	r0, r6
 800a686:	4639      	mov	r1, r7
 800a688:	f7f5 fd68 	bl	800015c <__adddf3>
 800a68c:	4632      	mov	r2, r6
 800a68e:	463b      	mov	r3, r7
 800a690:	4620      	mov	r0, r4
 800a692:	460d      	mov	r5, r1
 800a694:	f7f5 fd60 	bl	8000158 <__aeabi_dsub>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	4640      	mov	r0, r8
 800a69e:	4649      	mov	r1, r9
 800a6a0:	f7f5 fd5a 	bl	8000158 <__aeabi_dsub>
 800a6a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	9304      	str	r3, [sp, #16]
 800a6b0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a6b4:	4606      	mov	r6, r0
 800a6b6:	460f      	mov	r7, r1
 800a6b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6bc:	4652      	mov	r2, sl
 800a6be:	465b      	mov	r3, fp
 800a6c0:	f7f5 fd4a 	bl	8000158 <__aeabi_dsub>
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	462b      	mov	r3, r5
 800a6c8:	f7f5 fefe 	bl	80004c8 <__aeabi_dmul>
 800a6cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6d0:	4680      	mov	r8, r0
 800a6d2:	4689      	mov	r9, r1
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	4639      	mov	r1, r7
 800a6d8:	f7f5 fef6 	bl	80004c8 <__aeabi_dmul>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	f7f5 fd3a 	bl	800015c <__adddf3>
 800a6e8:	4652      	mov	r2, sl
 800a6ea:	465b      	mov	r3, fp
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	460f      	mov	r7, r1
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	f7f5 fee8 	bl	80004c8 <__aeabi_dmul>
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	4680      	mov	r8, r0
 800a6fe:	4689      	mov	r9, r1
 800a700:	4630      	mov	r0, r6
 800a702:	4639      	mov	r1, r7
 800a704:	f7f5 fd2a 	bl	800015c <__adddf3>
 800a708:	4b18      	ldr	r3, [pc, #96]	@ (800a76c <__ieee754_pow+0x40c>)
 800a70a:	4604      	mov	r4, r0
 800a70c:	4299      	cmp	r1, r3
 800a70e:	460d      	mov	r5, r1
 800a710:	468a      	mov	sl, r1
 800a712:	468b      	mov	fp, r1
 800a714:	f340 82e0 	ble.w	800acd8 <__ieee754_pow+0x978>
 800a718:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a71c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a720:	4303      	orrs	r3, r0
 800a722:	f000 81df 	beq.w	800aae4 <__ieee754_pow+0x784>
 800a726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a72a:	2200      	movs	r2, #0
 800a72c:	2300      	movs	r3, #0
 800a72e:	f7f6 f93d 	bl	80009ac <__aeabi_dcmplt>
 800a732:	3800      	subs	r0, #0
 800a734:	bf18      	it	ne
 800a736:	2001      	movne	r0, #1
 800a738:	e71d      	b.n	800a576 <__ieee754_pow+0x216>
 800a73a:	bf00      	nop
 800a73c:	f3af 8000 	nop.w
 800a740:	60000000 	.word	0x60000000
 800a744:	3ff71547 	.word	0x3ff71547
 800a748:	f85ddf44 	.word	0xf85ddf44
 800a74c:	3e54ae0b 	.word	0x3e54ae0b
 800a750:	55555555 	.word	0x55555555
 800a754:	3fd55555 	.word	0x3fd55555
 800a758:	652b82fe 	.word	0x652b82fe
 800a75c:	3ff71547 	.word	0x3ff71547
 800a760:	3ff00000 	.word	0x3ff00000
 800a764:	3fd00000 	.word	0x3fd00000
 800a768:	3fe00000 	.word	0x3fe00000
 800a76c:	408fffff 	.word	0x408fffff
 800a770:	4ad3      	ldr	r2, [pc, #844]	@ (800aac0 <__ieee754_pow+0x760>)
 800a772:	402a      	ands	r2, r5
 800a774:	2a00      	cmp	r2, #0
 800a776:	f040 817a 	bne.w	800aa6e <__ieee754_pow+0x70e>
 800a77a:	4bd2      	ldr	r3, [pc, #840]	@ (800aac4 <__ieee754_pow+0x764>)
 800a77c:	2200      	movs	r2, #0
 800a77e:	f7f5 fea3 	bl	80004c8 <__aeabi_dmul>
 800a782:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800a786:	460b      	mov	r3, r1
 800a788:	151a      	asrs	r2, r3, #20
 800a78a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a78e:	4422      	add	r2, r4
 800a790:	920a      	str	r2, [sp, #40]	@ 0x28
 800a792:	4acd      	ldr	r2, [pc, #820]	@ (800aac8 <__ieee754_pow+0x768>)
 800a794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a798:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800a79c:	4293      	cmp	r3, r2
 800a79e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a7a2:	dd08      	ble.n	800a7b6 <__ieee754_pow+0x456>
 800a7a4:	4ac9      	ldr	r2, [pc, #804]	@ (800aacc <__ieee754_pow+0x76c>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	f340 8163 	ble.w	800aa72 <__ieee754_pow+0x712>
 800a7ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7ae:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7b6:	2600      	movs	r6, #0
 800a7b8:	00f3      	lsls	r3, r6, #3
 800a7ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7bc:	4bc4      	ldr	r3, [pc, #784]	@ (800aad0 <__ieee754_pow+0x770>)
 800a7be:	4629      	mov	r1, r5
 800a7c0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a7c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a7ce:	4623      	mov	r3, r4
 800a7d0:	4682      	mov	sl, r0
 800a7d2:	f7f5 fcc1 	bl	8000158 <__aeabi_dsub>
 800a7d6:	4652      	mov	r2, sl
 800a7d8:	462b      	mov	r3, r5
 800a7da:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a7de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a7e2:	f7f5 fcbb 	bl	800015c <__adddf3>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	49b9      	ldr	r1, [pc, #740]	@ (800aad4 <__ieee754_pow+0x774>)
 800a7ee:	f7f5 ff95 	bl	800071c <__aeabi_ddiv>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a7fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7fe:	f7f5 fe63 	bl	80004c8 <__aeabi_dmul>
 800a802:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a806:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a80a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a80e:	2300      	movs	r3, #0
 800a810:	2200      	movs	r2, #0
 800a812:	46ab      	mov	fp, r5
 800a814:	106d      	asrs	r5, r5, #1
 800a816:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a81a:	9304      	str	r3, [sp, #16]
 800a81c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a820:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a824:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a828:	4640      	mov	r0, r8
 800a82a:	4649      	mov	r1, r9
 800a82c:	4614      	mov	r4, r2
 800a82e:	461d      	mov	r5, r3
 800a830:	f7f5 fe4a 	bl	80004c8 <__aeabi_dmul>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a83c:	f7f5 fc8c 	bl	8000158 <__aeabi_dsub>
 800a840:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a844:	4606      	mov	r6, r0
 800a846:	460f      	mov	r7, r1
 800a848:	4620      	mov	r0, r4
 800a84a:	4629      	mov	r1, r5
 800a84c:	f7f5 fc84 	bl	8000158 <__aeabi_dsub>
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	4650      	mov	r0, sl
 800a856:	4659      	mov	r1, fp
 800a858:	f7f5 fc7e 	bl	8000158 <__aeabi_dsub>
 800a85c:	4642      	mov	r2, r8
 800a85e:	464b      	mov	r3, r9
 800a860:	f7f5 fe32 	bl	80004c8 <__aeabi_dmul>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	4630      	mov	r0, r6
 800a86a:	4639      	mov	r1, r7
 800a86c:	f7f5 fc74 	bl	8000158 <__aeabi_dsub>
 800a870:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a874:	f7f5 fe28 	bl	80004c8 <__aeabi_dmul>
 800a878:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a87c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a880:	4610      	mov	r0, r2
 800a882:	4619      	mov	r1, r3
 800a884:	f7f5 fe20 	bl	80004c8 <__aeabi_dmul>
 800a888:	a37b      	add	r3, pc, #492	@ (adr r3, 800aa78 <__ieee754_pow+0x718>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	4604      	mov	r4, r0
 800a890:	460d      	mov	r5, r1
 800a892:	f7f5 fe19 	bl	80004c8 <__aeabi_dmul>
 800a896:	a37a      	add	r3, pc, #488	@ (adr r3, 800aa80 <__ieee754_pow+0x720>)
 800a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89c:	f7f5 fc5e 	bl	800015c <__adddf3>
 800a8a0:	4622      	mov	r2, r4
 800a8a2:	462b      	mov	r3, r5
 800a8a4:	f7f5 fe10 	bl	80004c8 <__aeabi_dmul>
 800a8a8:	a377      	add	r3, pc, #476	@ (adr r3, 800aa88 <__ieee754_pow+0x728>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	f7f5 fc55 	bl	800015c <__adddf3>
 800a8b2:	4622      	mov	r2, r4
 800a8b4:	462b      	mov	r3, r5
 800a8b6:	f7f5 fe07 	bl	80004c8 <__aeabi_dmul>
 800a8ba:	a375      	add	r3, pc, #468	@ (adr r3, 800aa90 <__ieee754_pow+0x730>)
 800a8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c0:	f7f5 fc4c 	bl	800015c <__adddf3>
 800a8c4:	4622      	mov	r2, r4
 800a8c6:	462b      	mov	r3, r5
 800a8c8:	f7f5 fdfe 	bl	80004c8 <__aeabi_dmul>
 800a8cc:	a372      	add	r3, pc, #456	@ (adr r3, 800aa98 <__ieee754_pow+0x738>)
 800a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d2:	f7f5 fc43 	bl	800015c <__adddf3>
 800a8d6:	4622      	mov	r2, r4
 800a8d8:	462b      	mov	r3, r5
 800a8da:	f7f5 fdf5 	bl	80004c8 <__aeabi_dmul>
 800a8de:	a370      	add	r3, pc, #448	@ (adr r3, 800aaa0 <__ieee754_pow+0x740>)
 800a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e4:	f7f5 fc3a 	bl	800015c <__adddf3>
 800a8e8:	4622      	mov	r2, r4
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	460f      	mov	r7, r1
 800a8ee:	462b      	mov	r3, r5
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	4629      	mov	r1, r5
 800a8f4:	f7f5 fde8 	bl	80004c8 <__aeabi_dmul>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	4639      	mov	r1, r7
 800a900:	f7f5 fde2 	bl	80004c8 <__aeabi_dmul>
 800a904:	4604      	mov	r4, r0
 800a906:	460d      	mov	r5, r1
 800a908:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a90c:	4642      	mov	r2, r8
 800a90e:	464b      	mov	r3, r9
 800a910:	f7f5 fc24 	bl	800015c <__adddf3>
 800a914:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a918:	f7f5 fdd6 	bl	80004c8 <__aeabi_dmul>
 800a91c:	4622      	mov	r2, r4
 800a91e:	462b      	mov	r3, r5
 800a920:	f7f5 fc1c 	bl	800015c <__adddf3>
 800a924:	4642      	mov	r2, r8
 800a926:	4682      	mov	sl, r0
 800a928:	468b      	mov	fp, r1
 800a92a:	464b      	mov	r3, r9
 800a92c:	4640      	mov	r0, r8
 800a92e:	4649      	mov	r1, r9
 800a930:	f7f5 fdca 	bl	80004c8 <__aeabi_dmul>
 800a934:	2200      	movs	r2, #0
 800a936:	4b68      	ldr	r3, [pc, #416]	@ (800aad8 <__ieee754_pow+0x778>)
 800a938:	4606      	mov	r6, r0
 800a93a:	460f      	mov	r7, r1
 800a93c:	f7f5 fc0e 	bl	800015c <__adddf3>
 800a940:	4652      	mov	r2, sl
 800a942:	465b      	mov	r3, fp
 800a944:	f7f5 fc0a 	bl	800015c <__adddf3>
 800a948:	2400      	movs	r4, #0
 800a94a:	460d      	mov	r5, r1
 800a94c:	4622      	mov	r2, r4
 800a94e:	460b      	mov	r3, r1
 800a950:	4640      	mov	r0, r8
 800a952:	4649      	mov	r1, r9
 800a954:	f7f5 fdb8 	bl	80004c8 <__aeabi_dmul>
 800a958:	2200      	movs	r2, #0
 800a95a:	4680      	mov	r8, r0
 800a95c:	4689      	mov	r9, r1
 800a95e:	4620      	mov	r0, r4
 800a960:	4629      	mov	r1, r5
 800a962:	4b5d      	ldr	r3, [pc, #372]	@ (800aad8 <__ieee754_pow+0x778>)
 800a964:	f7f5 fbf8 	bl	8000158 <__aeabi_dsub>
 800a968:	4632      	mov	r2, r6
 800a96a:	463b      	mov	r3, r7
 800a96c:	f7f5 fbf4 	bl	8000158 <__aeabi_dsub>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	4650      	mov	r0, sl
 800a976:	4659      	mov	r1, fp
 800a978:	f7f5 fbee 	bl	8000158 <__aeabi_dsub>
 800a97c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a980:	f7f5 fda2 	bl	80004c8 <__aeabi_dmul>
 800a984:	4622      	mov	r2, r4
 800a986:	4606      	mov	r6, r0
 800a988:	460f      	mov	r7, r1
 800a98a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a98e:	462b      	mov	r3, r5
 800a990:	f7f5 fd9a 	bl	80004c8 <__aeabi_dmul>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	4630      	mov	r0, r6
 800a99a:	4639      	mov	r1, r7
 800a99c:	f7f5 fbde 	bl	800015c <__adddf3>
 800a9a0:	2400      	movs	r4, #0
 800a9a2:	4606      	mov	r6, r0
 800a9a4:	460f      	mov	r7, r1
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	4640      	mov	r0, r8
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	f7f5 fbd5 	bl	800015c <__adddf3>
 800a9b2:	a33d      	add	r3, pc, #244	@ (adr r3, 800aaa8 <__ieee754_pow+0x748>)
 800a9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	460d      	mov	r5, r1
 800a9bc:	f7f5 fd84 	bl	80004c8 <__aeabi_dmul>
 800a9c0:	4642      	mov	r2, r8
 800a9c2:	464b      	mov	r3, r9
 800a9c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	f7f5 fbc4 	bl	8000158 <__aeabi_dsub>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	4639      	mov	r1, r7
 800a9d8:	f7f5 fbbe 	bl	8000158 <__aeabi_dsub>
 800a9dc:	a334      	add	r3, pc, #208	@ (adr r3, 800aab0 <__ieee754_pow+0x750>)
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	f7f5 fd71 	bl	80004c8 <__aeabi_dmul>
 800a9e6:	a334      	add	r3, pc, #208	@ (adr r3, 800aab8 <__ieee754_pow+0x758>)
 800a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	460f      	mov	r7, r1
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	4629      	mov	r1, r5
 800a9f4:	f7f5 fd68 	bl	80004c8 <__aeabi_dmul>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	4639      	mov	r1, r7
 800aa00:	f7f5 fbac 	bl	800015c <__adddf3>
 800aa04:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aa06:	4b35      	ldr	r3, [pc, #212]	@ (800aadc <__ieee754_pow+0x77c>)
 800aa08:	2400      	movs	r4, #0
 800aa0a:	4413      	add	r3, r2
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	f7f5 fba4 	bl	800015c <__adddf3>
 800aa14:	4682      	mov	sl, r0
 800aa16:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa18:	468b      	mov	fp, r1
 800aa1a:	f7f5 fceb 	bl	80003f4 <__aeabi_i2d>
 800aa1e:	4606      	mov	r6, r0
 800aa20:	460f      	mov	r7, r1
 800aa22:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aa24:	4b2e      	ldr	r3, [pc, #184]	@ (800aae0 <__ieee754_pow+0x780>)
 800aa26:	4413      	add	r3, r2
 800aa28:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa2c:	4652      	mov	r2, sl
 800aa2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa32:	465b      	mov	r3, fp
 800aa34:	f7f5 fb92 	bl	800015c <__adddf3>
 800aa38:	4642      	mov	r2, r8
 800aa3a:	464b      	mov	r3, r9
 800aa3c:	f7f5 fb8e 	bl	800015c <__adddf3>
 800aa40:	4632      	mov	r2, r6
 800aa42:	463b      	mov	r3, r7
 800aa44:	f7f5 fb8a 	bl	800015c <__adddf3>
 800aa48:	4632      	mov	r2, r6
 800aa4a:	463b      	mov	r3, r7
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	460d      	mov	r5, r1
 800aa50:	f7f5 fb82 	bl	8000158 <__aeabi_dsub>
 800aa54:	4642      	mov	r2, r8
 800aa56:	464b      	mov	r3, r9
 800aa58:	f7f5 fb7e 	bl	8000158 <__aeabi_dsub>
 800aa5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa60:	f7f5 fb7a 	bl	8000158 <__aeabi_dsub>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	4650      	mov	r0, sl
 800aa6a:	4659      	mov	r1, fp
 800aa6c:	e618      	b.n	800a6a0 <__ieee754_pow+0x340>
 800aa6e:	2400      	movs	r4, #0
 800aa70:	e68a      	b.n	800a788 <__ieee754_pow+0x428>
 800aa72:	2601      	movs	r6, #1
 800aa74:	e6a0      	b.n	800a7b8 <__ieee754_pow+0x458>
 800aa76:	bf00      	nop
 800aa78:	4a454eef 	.word	0x4a454eef
 800aa7c:	3fca7e28 	.word	0x3fca7e28
 800aa80:	93c9db65 	.word	0x93c9db65
 800aa84:	3fcd864a 	.word	0x3fcd864a
 800aa88:	a91d4101 	.word	0xa91d4101
 800aa8c:	3fd17460 	.word	0x3fd17460
 800aa90:	518f264d 	.word	0x518f264d
 800aa94:	3fd55555 	.word	0x3fd55555
 800aa98:	db6fabff 	.word	0xdb6fabff
 800aa9c:	3fdb6db6 	.word	0x3fdb6db6
 800aaa0:	33333303 	.word	0x33333303
 800aaa4:	3fe33333 	.word	0x3fe33333
 800aaa8:	e0000000 	.word	0xe0000000
 800aaac:	3feec709 	.word	0x3feec709
 800aab0:	dc3a03fd 	.word	0xdc3a03fd
 800aab4:	3feec709 	.word	0x3feec709
 800aab8:	145b01f5 	.word	0x145b01f5
 800aabc:	be3e2fe0 	.word	0xbe3e2fe0
 800aac0:	7ff00000 	.word	0x7ff00000
 800aac4:	43400000 	.word	0x43400000
 800aac8:	0003988e 	.word	0x0003988e
 800aacc:	000bb679 	.word	0x000bb679
 800aad0:	0800b1b0 	.word	0x0800b1b0
 800aad4:	3ff00000 	.word	0x3ff00000
 800aad8:	40080000 	.word	0x40080000
 800aadc:	0800b190 	.word	0x0800b190
 800aae0:	0800b1a0 	.word	0x0800b1a0
 800aae4:	a39a      	add	r3, pc, #616	@ (adr r3, 800ad50 <__ieee754_pow+0x9f0>)
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	4630      	mov	r0, r6
 800aaec:	4639      	mov	r1, r7
 800aaee:	f7f5 fb35 	bl	800015c <__adddf3>
 800aaf2:	4642      	mov	r2, r8
 800aaf4:	e9cd 0100 	strd	r0, r1, [sp]
 800aaf8:	464b      	mov	r3, r9
 800aafa:	4620      	mov	r0, r4
 800aafc:	4629      	mov	r1, r5
 800aafe:	f7f5 fb2b 	bl	8000158 <__aeabi_dsub>
 800ab02:	4602      	mov	r2, r0
 800ab04:	460b      	mov	r3, r1
 800ab06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab0a:	f7f5 ff6d 	bl	80009e8 <__aeabi_dcmpgt>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	f47f ae09 	bne.w	800a726 <__ieee754_pow+0x3c6>
 800ab14:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ab18:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ab1c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800ab20:	fa43 fa0a 	asr.w	sl, r3, sl
 800ab24:	44da      	add	sl, fp
 800ab26:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ab2a:	489b      	ldr	r0, [pc, #620]	@ (800ad98 <__ieee754_pow+0xa38>)
 800ab2c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ab30:	4108      	asrs	r0, r1
 800ab32:	ea00 030a 	and.w	r3, r0, sl
 800ab36:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ab3a:	f1c1 0114 	rsb	r1, r1, #20
 800ab3e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800ab42:	4640      	mov	r0, r8
 800ab44:	fa4a fa01 	asr.w	sl, sl, r1
 800ab48:	f1bb 0f00 	cmp.w	fp, #0
 800ab4c:	4649      	mov	r1, r9
 800ab4e:	f04f 0200 	mov.w	r2, #0
 800ab52:	bfb8      	it	lt
 800ab54:	f1ca 0a00 	rsblt	sl, sl, #0
 800ab58:	f7f5 fafe 	bl	8000158 <__aeabi_dsub>
 800ab5c:	4680      	mov	r8, r0
 800ab5e:	4689      	mov	r9, r1
 800ab60:	2400      	movs	r4, #0
 800ab62:	4632      	mov	r2, r6
 800ab64:	463b      	mov	r3, r7
 800ab66:	4640      	mov	r0, r8
 800ab68:	4649      	mov	r1, r9
 800ab6a:	f7f5 faf7 	bl	800015c <__adddf3>
 800ab6e:	a37a      	add	r3, pc, #488	@ (adr r3, 800ad58 <__ieee754_pow+0x9f8>)
 800ab70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab74:	4620      	mov	r0, r4
 800ab76:	460d      	mov	r5, r1
 800ab78:	f7f5 fca6 	bl	80004c8 <__aeabi_dmul>
 800ab7c:	4642      	mov	r2, r8
 800ab7e:	464b      	mov	r3, r9
 800ab80:	e9cd 0100 	strd	r0, r1, [sp]
 800ab84:	4620      	mov	r0, r4
 800ab86:	4629      	mov	r1, r5
 800ab88:	f7f5 fae6 	bl	8000158 <__aeabi_dsub>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4630      	mov	r0, r6
 800ab92:	4639      	mov	r1, r7
 800ab94:	f7f5 fae0 	bl	8000158 <__aeabi_dsub>
 800ab98:	a371      	add	r3, pc, #452	@ (adr r3, 800ad60 <__ieee754_pow+0xa00>)
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	f7f5 fc93 	bl	80004c8 <__aeabi_dmul>
 800aba2:	a371      	add	r3, pc, #452	@ (adr r3, 800ad68 <__ieee754_pow+0xa08>)
 800aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba8:	4680      	mov	r8, r0
 800abaa:	4689      	mov	r9, r1
 800abac:	4620      	mov	r0, r4
 800abae:	4629      	mov	r1, r5
 800abb0:	f7f5 fc8a 	bl	80004c8 <__aeabi_dmul>
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	4640      	mov	r0, r8
 800abba:	4649      	mov	r1, r9
 800abbc:	f7f5 face 	bl	800015c <__adddf3>
 800abc0:	4604      	mov	r4, r0
 800abc2:	460d      	mov	r5, r1
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abcc:	f7f5 fac6 	bl	800015c <__adddf3>
 800abd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abd4:	4680      	mov	r8, r0
 800abd6:	4689      	mov	r9, r1
 800abd8:	f7f5 fabe 	bl	8000158 <__aeabi_dsub>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	4620      	mov	r0, r4
 800abe2:	4629      	mov	r1, r5
 800abe4:	f7f5 fab8 	bl	8000158 <__aeabi_dsub>
 800abe8:	4642      	mov	r2, r8
 800abea:	4606      	mov	r6, r0
 800abec:	460f      	mov	r7, r1
 800abee:	464b      	mov	r3, r9
 800abf0:	4640      	mov	r0, r8
 800abf2:	4649      	mov	r1, r9
 800abf4:	f7f5 fc68 	bl	80004c8 <__aeabi_dmul>
 800abf8:	a35d      	add	r3, pc, #372	@ (adr r3, 800ad70 <__ieee754_pow+0xa10>)
 800abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfe:	4604      	mov	r4, r0
 800ac00:	460d      	mov	r5, r1
 800ac02:	f7f5 fc61 	bl	80004c8 <__aeabi_dmul>
 800ac06:	a35c      	add	r3, pc, #368	@ (adr r3, 800ad78 <__ieee754_pow+0xa18>)
 800ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0c:	f7f5 faa4 	bl	8000158 <__aeabi_dsub>
 800ac10:	4622      	mov	r2, r4
 800ac12:	462b      	mov	r3, r5
 800ac14:	f7f5 fc58 	bl	80004c8 <__aeabi_dmul>
 800ac18:	a359      	add	r3, pc, #356	@ (adr r3, 800ad80 <__ieee754_pow+0xa20>)
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	f7f5 fa9d 	bl	800015c <__adddf3>
 800ac22:	4622      	mov	r2, r4
 800ac24:	462b      	mov	r3, r5
 800ac26:	f7f5 fc4f 	bl	80004c8 <__aeabi_dmul>
 800ac2a:	a357      	add	r3, pc, #348	@ (adr r3, 800ad88 <__ieee754_pow+0xa28>)
 800ac2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac30:	f7f5 fa92 	bl	8000158 <__aeabi_dsub>
 800ac34:	4622      	mov	r2, r4
 800ac36:	462b      	mov	r3, r5
 800ac38:	f7f5 fc46 	bl	80004c8 <__aeabi_dmul>
 800ac3c:	a354      	add	r3, pc, #336	@ (adr r3, 800ad90 <__ieee754_pow+0xa30>)
 800ac3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac42:	f7f5 fa8b 	bl	800015c <__adddf3>
 800ac46:	4622      	mov	r2, r4
 800ac48:	462b      	mov	r3, r5
 800ac4a:	f7f5 fc3d 	bl	80004c8 <__aeabi_dmul>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4640      	mov	r0, r8
 800ac54:	4649      	mov	r1, r9
 800ac56:	f7f5 fa7f 	bl	8000158 <__aeabi_dsub>
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	460d      	mov	r5, r1
 800ac5e:	4602      	mov	r2, r0
 800ac60:	460b      	mov	r3, r1
 800ac62:	4640      	mov	r0, r8
 800ac64:	4649      	mov	r1, r9
 800ac66:	f7f5 fc2f 	bl	80004c8 <__aeabi_dmul>
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	e9cd 0100 	strd	r0, r1, [sp]
 800ac70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ac74:	4620      	mov	r0, r4
 800ac76:	4629      	mov	r1, r5
 800ac78:	f7f5 fa6e 	bl	8000158 <__aeabi_dsub>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	460b      	mov	r3, r1
 800ac80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac84:	f7f5 fd4a 	bl	800071c <__aeabi_ddiv>
 800ac88:	4632      	mov	r2, r6
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	460d      	mov	r5, r1
 800ac8e:	463b      	mov	r3, r7
 800ac90:	4640      	mov	r0, r8
 800ac92:	4649      	mov	r1, r9
 800ac94:	f7f5 fc18 	bl	80004c8 <__aeabi_dmul>
 800ac98:	4632      	mov	r2, r6
 800ac9a:	463b      	mov	r3, r7
 800ac9c:	f7f5 fa5e 	bl	800015c <__adddf3>
 800aca0:	4602      	mov	r2, r0
 800aca2:	460b      	mov	r3, r1
 800aca4:	4620      	mov	r0, r4
 800aca6:	4629      	mov	r1, r5
 800aca8:	f7f5 fa56 	bl	8000158 <__aeabi_dsub>
 800acac:	4642      	mov	r2, r8
 800acae:	464b      	mov	r3, r9
 800acb0:	f7f5 fa52 	bl	8000158 <__aeabi_dsub>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	2000      	movs	r0, #0
 800acba:	4938      	ldr	r1, [pc, #224]	@ (800ad9c <__ieee754_pow+0xa3c>)
 800acbc:	f7f5 fa4c 	bl	8000158 <__aeabi_dsub>
 800acc0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800acc4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800acc8:	da2e      	bge.n	800ad28 <__ieee754_pow+0x9c8>
 800acca:	4652      	mov	r2, sl
 800accc:	f000 f874 	bl	800adb8 <scalbn>
 800acd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acd4:	f7ff bbed 	b.w	800a4b2 <__ieee754_pow+0x152>
 800acd8:	4c31      	ldr	r4, [pc, #196]	@ (800ada0 <__ieee754_pow+0xa40>)
 800acda:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800acde:	42a3      	cmp	r3, r4
 800ace0:	d91a      	bls.n	800ad18 <__ieee754_pow+0x9b8>
 800ace2:	4b30      	ldr	r3, [pc, #192]	@ (800ada4 <__ieee754_pow+0xa44>)
 800ace4:	440b      	add	r3, r1
 800ace6:	4303      	orrs	r3, r0
 800ace8:	d009      	beq.n	800acfe <__ieee754_pow+0x99e>
 800acea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acee:	2200      	movs	r2, #0
 800acf0:	2300      	movs	r3, #0
 800acf2:	f7f5 fe5b 	bl	80009ac <__aeabi_dcmplt>
 800acf6:	3800      	subs	r0, #0
 800acf8:	bf18      	it	ne
 800acfa:	2001      	movne	r0, #1
 800acfc:	e444      	b.n	800a588 <__ieee754_pow+0x228>
 800acfe:	4642      	mov	r2, r8
 800ad00:	464b      	mov	r3, r9
 800ad02:	f7f5 fa29 	bl	8000158 <__aeabi_dsub>
 800ad06:	4632      	mov	r2, r6
 800ad08:	463b      	mov	r3, r7
 800ad0a:	f7f5 fe63 	bl	80009d4 <__aeabi_dcmpge>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d1eb      	bne.n	800acea <__ieee754_pow+0x98a>
 800ad12:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800ada8 <__ieee754_pow+0xa48>
 800ad16:	e6fd      	b.n	800ab14 <__ieee754_pow+0x7b4>
 800ad18:	469a      	mov	sl, r3
 800ad1a:	4b24      	ldr	r3, [pc, #144]	@ (800adac <__ieee754_pow+0xa4c>)
 800ad1c:	459a      	cmp	sl, r3
 800ad1e:	f63f aef9 	bhi.w	800ab14 <__ieee754_pow+0x7b4>
 800ad22:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ad26:	e71b      	b.n	800ab60 <__ieee754_pow+0x800>
 800ad28:	4621      	mov	r1, r4
 800ad2a:	e7d1      	b.n	800acd0 <__ieee754_pow+0x970>
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	491b      	ldr	r1, [pc, #108]	@ (800ad9c <__ieee754_pow+0xa3c>)
 800ad30:	f7ff bb34 	b.w	800a39c <__ieee754_pow+0x3c>
 800ad34:	2000      	movs	r0, #0
 800ad36:	2100      	movs	r1, #0
 800ad38:	f7ff bb30 	b.w	800a39c <__ieee754_pow+0x3c>
 800ad3c:	4650      	mov	r0, sl
 800ad3e:	4659      	mov	r1, fp
 800ad40:	f7ff bb2c 	b.w	800a39c <__ieee754_pow+0x3c>
 800ad44:	460c      	mov	r4, r1
 800ad46:	f7ff bb79 	b.w	800a43c <__ieee754_pow+0xdc>
 800ad4a:	2400      	movs	r4, #0
 800ad4c:	f7ff bb64 	b.w	800a418 <__ieee754_pow+0xb8>
 800ad50:	652b82fe 	.word	0x652b82fe
 800ad54:	3c971547 	.word	0x3c971547
 800ad58:	00000000 	.word	0x00000000
 800ad5c:	3fe62e43 	.word	0x3fe62e43
 800ad60:	fefa39ef 	.word	0xfefa39ef
 800ad64:	3fe62e42 	.word	0x3fe62e42
 800ad68:	0ca86c39 	.word	0x0ca86c39
 800ad6c:	be205c61 	.word	0xbe205c61
 800ad70:	72bea4d0 	.word	0x72bea4d0
 800ad74:	3e663769 	.word	0x3e663769
 800ad78:	c5d26bf1 	.word	0xc5d26bf1
 800ad7c:	3ebbbd41 	.word	0x3ebbbd41
 800ad80:	af25de2c 	.word	0xaf25de2c
 800ad84:	3f11566a 	.word	0x3f11566a
 800ad88:	16bebd93 	.word	0x16bebd93
 800ad8c:	3f66c16c 	.word	0x3f66c16c
 800ad90:	5555553e 	.word	0x5555553e
 800ad94:	3fc55555 	.word	0x3fc55555
 800ad98:	fff00000 	.word	0xfff00000
 800ad9c:	3ff00000 	.word	0x3ff00000
 800ada0:	4090cbff 	.word	0x4090cbff
 800ada4:	3f6f3400 	.word	0x3f6f3400
 800ada8:	4090cc00 	.word	0x4090cc00
 800adac:	3fe00000 	.word	0x3fe00000

0800adb0 <fabs>:
 800adb0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800adb4:	4619      	mov	r1, r3
 800adb6:	4770      	bx	lr

0800adb8 <scalbn>:
 800adb8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800adbc:	4616      	mov	r6, r2
 800adbe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800adc2:	4683      	mov	fp, r0
 800adc4:	468c      	mov	ip, r1
 800adc6:	460b      	mov	r3, r1
 800adc8:	b982      	cbnz	r2, 800adec <scalbn+0x34>
 800adca:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800adce:	4303      	orrs	r3, r0
 800add0:	d039      	beq.n	800ae46 <scalbn+0x8e>
 800add2:	4b2f      	ldr	r3, [pc, #188]	@ (800ae90 <scalbn+0xd8>)
 800add4:	2200      	movs	r2, #0
 800add6:	f7f5 fb77 	bl	80004c8 <__aeabi_dmul>
 800adda:	4b2e      	ldr	r3, [pc, #184]	@ (800ae94 <scalbn+0xdc>)
 800addc:	4683      	mov	fp, r0
 800adde:	429e      	cmp	r6, r3
 800ade0:	468c      	mov	ip, r1
 800ade2:	da0d      	bge.n	800ae00 <scalbn+0x48>
 800ade4:	a326      	add	r3, pc, #152	@ (adr r3, 800ae80 <scalbn+0xc8>)
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	e01b      	b.n	800ae24 <scalbn+0x6c>
 800adec:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800adf0:	42ba      	cmp	r2, r7
 800adf2:	d109      	bne.n	800ae08 <scalbn+0x50>
 800adf4:	4602      	mov	r2, r0
 800adf6:	f7f5 f9b1 	bl	800015c <__adddf3>
 800adfa:	4683      	mov	fp, r0
 800adfc:	468c      	mov	ip, r1
 800adfe:	e022      	b.n	800ae46 <scalbn+0x8e>
 800ae00:	460b      	mov	r3, r1
 800ae02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ae06:	3a36      	subs	r2, #54	@ 0x36
 800ae08:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ae0c:	428e      	cmp	r6, r1
 800ae0e:	dd0c      	ble.n	800ae2a <scalbn+0x72>
 800ae10:	a31d      	add	r3, pc, #116	@ (adr r3, 800ae88 <scalbn+0xd0>)
 800ae12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae16:	461c      	mov	r4, r3
 800ae18:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800ae1c:	f361 74df 	bfi	r4, r1, #31, #1
 800ae20:	4621      	mov	r1, r4
 800ae22:	481d      	ldr	r0, [pc, #116]	@ (800ae98 <scalbn+0xe0>)
 800ae24:	f7f5 fb50 	bl	80004c8 <__aeabi_dmul>
 800ae28:	e7e7      	b.n	800adfa <scalbn+0x42>
 800ae2a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ae2e:	4432      	add	r2, r6
 800ae30:	428a      	cmp	r2, r1
 800ae32:	dced      	bgt.n	800ae10 <scalbn+0x58>
 800ae34:	2a00      	cmp	r2, #0
 800ae36:	dd0a      	ble.n	800ae4e <scalbn+0x96>
 800ae38:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ae3c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ae40:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae44:	46ac      	mov	ip, r5
 800ae46:	4658      	mov	r0, fp
 800ae48:	4661      	mov	r1, ip
 800ae4a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800ae4e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ae52:	da09      	bge.n	800ae68 <scalbn+0xb0>
 800ae54:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800ae58:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800ae5c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800ae60:	480e      	ldr	r0, [pc, #56]	@ (800ae9c <scalbn+0xe4>)
 800ae62:	f041 011f 	orr.w	r1, r1, #31
 800ae66:	e7bd      	b.n	800ade4 <scalbn+0x2c>
 800ae68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ae6c:	3236      	adds	r2, #54	@ 0x36
 800ae6e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ae72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ae76:	4658      	mov	r0, fp
 800ae78:	4629      	mov	r1, r5
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	4b08      	ldr	r3, [pc, #32]	@ (800aea0 <scalbn+0xe8>)
 800ae7e:	e7d1      	b.n	800ae24 <scalbn+0x6c>
 800ae80:	c2f8f359 	.word	0xc2f8f359
 800ae84:	01a56e1f 	.word	0x01a56e1f
 800ae88:	8800759c 	.word	0x8800759c
 800ae8c:	7e37e43c 	.word	0x7e37e43c
 800ae90:	43500000 	.word	0x43500000
 800ae94:	ffff3cb0 	.word	0xffff3cb0
 800ae98:	8800759c 	.word	0x8800759c
 800ae9c:	c2f8f359 	.word	0xc2f8f359
 800aea0:	3c900000 	.word	0x3c900000

0800aea4 <with_errno>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	4604      	mov	r4, r0
 800aea8:	460d      	mov	r5, r1
 800aeaa:	4616      	mov	r6, r2
 800aeac:	f7ff f8ea 	bl	800a084 <__errno>
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	6006      	str	r6, [r0, #0]
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}

0800aeb8 <xflow>:
 800aeb8:	b513      	push	{r0, r1, r4, lr}
 800aeba:	4604      	mov	r4, r0
 800aebc:	4619      	mov	r1, r3
 800aebe:	4610      	mov	r0, r2
 800aec0:	b10c      	cbz	r4, 800aec6 <xflow+0xe>
 800aec2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800aec6:	e9cd 2300 	strd	r2, r3, [sp]
 800aeca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aece:	f7f5 fafb 	bl	80004c8 <__aeabi_dmul>
 800aed2:	2222      	movs	r2, #34	@ 0x22
 800aed4:	b002      	add	sp, #8
 800aed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeda:	f7ff bfe3 	b.w	800aea4 <with_errno>

0800aede <__math_uflow>:
 800aede:	2200      	movs	r2, #0
 800aee0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800aee4:	f7ff bfe8 	b.w	800aeb8 <xflow>

0800aee8 <__math_oflow>:
 800aee8:	2200      	movs	r2, #0
 800aeea:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800aeee:	f7ff bfe3 	b.w	800aeb8 <xflow>
	...

0800aef4 <__ieee754_sqrt>:
 800aef4:	4a67      	ldr	r2, [pc, #412]	@ (800b094 <__ieee754_sqrt+0x1a0>)
 800aef6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefa:	438a      	bics	r2, r1
 800aefc:	4606      	mov	r6, r0
 800aefe:	460f      	mov	r7, r1
 800af00:	460b      	mov	r3, r1
 800af02:	4604      	mov	r4, r0
 800af04:	d10e      	bne.n	800af24 <__ieee754_sqrt+0x30>
 800af06:	4602      	mov	r2, r0
 800af08:	f7f5 fade 	bl	80004c8 <__aeabi_dmul>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	4630      	mov	r0, r6
 800af12:	4639      	mov	r1, r7
 800af14:	f7f5 f922 	bl	800015c <__adddf3>
 800af18:	4606      	mov	r6, r0
 800af1a:	460f      	mov	r7, r1
 800af1c:	4630      	mov	r0, r6
 800af1e:	4639      	mov	r1, r7
 800af20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af24:	2900      	cmp	r1, #0
 800af26:	dc0c      	bgt.n	800af42 <__ieee754_sqrt+0x4e>
 800af28:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800af2c:	4302      	orrs	r2, r0
 800af2e:	d0f5      	beq.n	800af1c <__ieee754_sqrt+0x28>
 800af30:	b189      	cbz	r1, 800af56 <__ieee754_sqrt+0x62>
 800af32:	4602      	mov	r2, r0
 800af34:	f7f5 f910 	bl	8000158 <__aeabi_dsub>
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	f7f5 fbee 	bl	800071c <__aeabi_ddiv>
 800af40:	e7ea      	b.n	800af18 <__ieee754_sqrt+0x24>
 800af42:	150a      	asrs	r2, r1, #20
 800af44:	d115      	bne.n	800af72 <__ieee754_sqrt+0x7e>
 800af46:	2100      	movs	r1, #0
 800af48:	e009      	b.n	800af5e <__ieee754_sqrt+0x6a>
 800af4a:	0ae3      	lsrs	r3, r4, #11
 800af4c:	3a15      	subs	r2, #21
 800af4e:	0564      	lsls	r4, r4, #21
 800af50:	2b00      	cmp	r3, #0
 800af52:	d0fa      	beq.n	800af4a <__ieee754_sqrt+0x56>
 800af54:	e7f7      	b.n	800af46 <__ieee754_sqrt+0x52>
 800af56:	460a      	mov	r2, r1
 800af58:	e7fa      	b.n	800af50 <__ieee754_sqrt+0x5c>
 800af5a:	005b      	lsls	r3, r3, #1
 800af5c:	3101      	adds	r1, #1
 800af5e:	02d8      	lsls	r0, r3, #11
 800af60:	d5fb      	bpl.n	800af5a <__ieee754_sqrt+0x66>
 800af62:	1e48      	subs	r0, r1, #1
 800af64:	1a12      	subs	r2, r2, r0
 800af66:	f1c1 0020 	rsb	r0, r1, #32
 800af6a:	fa24 f000 	lsr.w	r0, r4, r0
 800af6e:	4303      	orrs	r3, r0
 800af70:	408c      	lsls	r4, r1
 800af72:	2600      	movs	r6, #0
 800af74:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800af78:	2116      	movs	r1, #22
 800af7a:	07d2      	lsls	r2, r2, #31
 800af7c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800af80:	4632      	mov	r2, r6
 800af82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af8a:	bf5c      	itt	pl
 800af8c:	005b      	lslpl	r3, r3, #1
 800af8e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800af92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af96:	bf58      	it	pl
 800af98:	0064      	lslpl	r4, r4, #1
 800af9a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800af9e:	107f      	asrs	r7, r7, #1
 800afa0:	0064      	lsls	r4, r4, #1
 800afa2:	1815      	adds	r5, r2, r0
 800afa4:	429d      	cmp	r5, r3
 800afa6:	bfde      	ittt	le
 800afa8:	182a      	addle	r2, r5, r0
 800afaa:	1b5b      	suble	r3, r3, r5
 800afac:	1836      	addle	r6, r6, r0
 800afae:	0fe5      	lsrs	r5, r4, #31
 800afb0:	3901      	subs	r1, #1
 800afb2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800afb6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800afba:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800afbe:	d1f0      	bne.n	800afa2 <__ieee754_sqrt+0xae>
 800afc0:	460d      	mov	r5, r1
 800afc2:	f04f 0a20 	mov.w	sl, #32
 800afc6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800afca:	429a      	cmp	r2, r3
 800afcc:	eb01 0c00 	add.w	ip, r1, r0
 800afd0:	db02      	blt.n	800afd8 <__ieee754_sqrt+0xe4>
 800afd2:	d113      	bne.n	800affc <__ieee754_sqrt+0x108>
 800afd4:	45a4      	cmp	ip, r4
 800afd6:	d811      	bhi.n	800affc <__ieee754_sqrt+0x108>
 800afd8:	f1bc 0f00 	cmp.w	ip, #0
 800afdc:	eb0c 0100 	add.w	r1, ip, r0
 800afe0:	da42      	bge.n	800b068 <__ieee754_sqrt+0x174>
 800afe2:	2900      	cmp	r1, #0
 800afe4:	db40      	blt.n	800b068 <__ieee754_sqrt+0x174>
 800afe6:	f102 0e01 	add.w	lr, r2, #1
 800afea:	1a9b      	subs	r3, r3, r2
 800afec:	4672      	mov	r2, lr
 800afee:	45a4      	cmp	ip, r4
 800aff0:	bf88      	it	hi
 800aff2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800aff6:	eba4 040c 	sub.w	r4, r4, ip
 800affa:	4405      	add	r5, r0
 800affc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800b000:	f1ba 0a01 	subs.w	sl, sl, #1
 800b004:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800b008:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b00c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b010:	d1db      	bne.n	800afca <__ieee754_sqrt+0xd6>
 800b012:	431c      	orrs	r4, r3
 800b014:	d01a      	beq.n	800b04c <__ieee754_sqrt+0x158>
 800b016:	4c20      	ldr	r4, [pc, #128]	@ (800b098 <__ieee754_sqrt+0x1a4>)
 800b018:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800b09c <__ieee754_sqrt+0x1a8>
 800b01c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b020:	e9db 2300 	ldrd	r2, r3, [fp]
 800b024:	f7f5 f898 	bl	8000158 <__aeabi_dsub>
 800b028:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	4640      	mov	r0, r8
 800b032:	4649      	mov	r1, r9
 800b034:	f7f5 fcc4 	bl	80009c0 <__aeabi_dcmple>
 800b038:	b140      	cbz	r0, 800b04c <__ieee754_sqrt+0x158>
 800b03a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b03e:	e9db 2300 	ldrd	r2, r3, [fp]
 800b042:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b046:	d111      	bne.n	800b06c <__ieee754_sqrt+0x178>
 800b048:	4655      	mov	r5, sl
 800b04a:	3601      	adds	r6, #1
 800b04c:	1072      	asrs	r2, r6, #1
 800b04e:	086b      	lsrs	r3, r5, #1
 800b050:	07f1      	lsls	r1, r6, #31
 800b052:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b056:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b05a:	bf48      	it	mi
 800b05c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b060:	4618      	mov	r0, r3
 800b062:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800b066:	e757      	b.n	800af18 <__ieee754_sqrt+0x24>
 800b068:	4696      	mov	lr, r2
 800b06a:	e7be      	b.n	800afea <__ieee754_sqrt+0xf6>
 800b06c:	f7f5 f876 	bl	800015c <__adddf3>
 800b070:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b074:	4602      	mov	r2, r0
 800b076:	460b      	mov	r3, r1
 800b078:	4640      	mov	r0, r8
 800b07a:	4649      	mov	r1, r9
 800b07c:	f7f5 fc96 	bl	80009ac <__aeabi_dcmplt>
 800b080:	b120      	cbz	r0, 800b08c <__ieee754_sqrt+0x198>
 800b082:	1ca8      	adds	r0, r5, #2
 800b084:	bf08      	it	eq
 800b086:	3601      	addeq	r6, #1
 800b088:	3502      	adds	r5, #2
 800b08a:	e7df      	b.n	800b04c <__ieee754_sqrt+0x158>
 800b08c:	1c6b      	adds	r3, r5, #1
 800b08e:	f023 0501 	bic.w	r5, r3, #1
 800b092:	e7db      	b.n	800b04c <__ieee754_sqrt+0x158>
 800b094:	7ff00000 	.word	0x7ff00000
 800b098:	20000078 	.word	0x20000078
 800b09c:	20000070 	.word	0x20000070

0800b0a0 <_init>:
 800b0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a2:	bf00      	nop
 800b0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0a6:	bc08      	pop	{r3}
 800b0a8:	469e      	mov	lr, r3
 800b0aa:	4770      	bx	lr

0800b0ac <_fini>:
 800b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ae:	bf00      	nop
 800b0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0b2:	bc08      	pop	{r3}
 800b0b4:	469e      	mov	lr, r3
 800b0b6:	4770      	bx	lr
