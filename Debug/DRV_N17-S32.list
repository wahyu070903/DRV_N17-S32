
DRV_N17-S32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084f8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08008608  08008608  00009608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b4  080086b4  0000a064  2**0
                  CONTENTS
  4 .ARM          00000000  080086b4  080086b4  0000a064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086b4  080086b4  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086b4  080086b4  000096b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086b8  080086b8  000096b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080086bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b3c  20000064  08008720  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ba0  08008720  0000aba0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019979  00000000  00000000  0000a08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d5d  00000000  00000000  00023a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  00027768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010da  00000000  00000000  00028d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa9b  00000000  00000000  00029de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac11  00000000  00000000  0004487d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096368  00000000  00000000  0005f48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f57f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf8  00000000  00000000  000f583c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fb434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	080085f0 	.word	0x080085f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	080085f0 	.word	0x080085f0

08000150 <lowPassFilter>:

int32_t getCounter(){
	return accumulate_counter;
}

uint16_t lowPassFilter(uint16_t newData){
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	80fb      	strh	r3, [r7, #6]
	encoderReadings[filterIndex] = newData;
 800015a:	4b1c      	ldr	r3, [pc, #112]	@ (80001cc <lowPassFilter+0x7c>)
 800015c:	881b      	ldrh	r3, [r3, #0]
 800015e:	4619      	mov	r1, r3
 8000160:	4a1b      	ldr	r2, [pc, #108]	@ (80001d0 <lowPassFilter+0x80>)
 8000162:	88fb      	ldrh	r3, [r7, #6]
 8000164:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	filterIndex = (filterIndex + 1) % FILTER_SIZE;
 8000168:	4b18      	ldr	r3, [pc, #96]	@ (80001cc <lowPassFilter+0x7c>)
 800016a:	881b      	ldrh	r3, [r3, #0]
 800016c:	3301      	adds	r3, #1
 800016e:	425a      	negs	r2, r3
 8000170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000174:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000178:	bf58      	it	pl
 800017a:	4253      	negpl	r3, r2
 800017c:	b29a      	uxth	r2, r3
 800017e:	4b13      	ldr	r3, [pc, #76]	@ (80001cc <lowPassFilter+0x7c>)
 8000180:	801a      	strh	r2, [r3, #0]

	int sum = 0;
 8000182:	2300      	movs	r3, #0
 8000184:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTER_SIZE; i++) {
 8000186:	2300      	movs	r3, #0
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	e00a      	b.n	80001a2 <lowPassFilter+0x52>
		sum += encoderReadings[i];
 800018c:	4a10      	ldr	r2, [pc, #64]	@ (80001d0 <lowPassFilter+0x80>)
 800018e:	68bb      	ldr	r3, [r7, #8]
 8000190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000194:	461a      	mov	r2, r3
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	4413      	add	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTER_SIZE; i++) {
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	3301      	adds	r3, #1
 80001a0:	60bb      	str	r3, [r7, #8]
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80001a8:	dbf0      	blt.n	800018c <lowPassFilter+0x3c>
	}

	filteredValue = sum / FILTER_SIZE;
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	da01      	bge.n	80001b4 <lowPassFilter+0x64>
 80001b0:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80001b4:	129b      	asrs	r3, r3, #10
 80001b6:	b29a      	uxth	r2, r3
 80001b8:	4b06      	ldr	r3, [pc, #24]	@ (80001d4 <lowPassFilter+0x84>)
 80001ba:	801a      	strh	r2, [r3, #0]

	return filteredValue;
 80001bc:	4b05      	ldr	r3, [pc, #20]	@ (80001d4 <lowPassFilter+0x84>)
 80001be:	881b      	ldrh	r3, [r3, #0]
}
 80001c0:	4618      	mov	r0, r3
 80001c2:	3714      	adds	r7, #20
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	2000088c 	.word	0x2000088c
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	2000088e 	.word	0x2000088e

080001d8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a2d      	ldr	r2, [pc, #180]	@ (800029c <HAL_I2C_MemRxCpltCallback+0xc4>)
 80001e6:	4293      	cmp	r3, r2
 80001e8:	d154      	bne.n	8000294 <HAL_I2C_MemRxCpltCallback+0xbc>
        uint16_t position_now = (raw_buffer[0] << 8) | raw_buffer[1];
 80001ea:	4b2d      	ldr	r3, [pc, #180]	@ (80002a0 <HAL_I2C_MemRxCpltCallback+0xc8>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	021b      	lsls	r3, r3, #8
 80001f0:	b21a      	sxth	r2, r3
 80001f2:	4b2b      	ldr	r3, [pc, #172]	@ (80002a0 <HAL_I2C_MemRxCpltCallback+0xc8>)
 80001f4:	785b      	ldrb	r3, [r3, #1]
 80001f6:	b21b      	sxth	r3, r3
 80001f8:	4313      	orrs	r3, r2
 80001fa:	b21b      	sxth	r3, r3
 80001fc:	817b      	strh	r3, [r7, #10]
        position_now = lowPassFilter(position_now);
 80001fe:	897b      	ldrh	r3, [r7, #10]
 8000200:	4618      	mov	r0, r3
 8000202:	f7ff ffa5 	bl	8000150 <lowPassFilter>
 8000206:	4603      	mov	r3, r0
 8000208:	817b      	strh	r3, [r7, #10]
        int32_t delta = (int32_t)(position_now - position_prev);
 800020a:	897b      	ldrh	r3, [r7, #10]
 800020c:	4a25      	ldr	r2, [pc, #148]	@ (80002a4 <HAL_I2C_MemRxCpltCallback+0xcc>)
 800020e:	8812      	ldrh	r2, [r2, #0]
 8000210:	1a9b      	subs	r3, r3, r2
 8000212:	60fb      	str	r3, [r7, #12]

        if(rotation_direction){
 8000214:	4b24      	ldr	r3, [pc, #144]	@ (80002a8 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d00d      	beq.n	8000238 <HAL_I2C_MemRxCpltCallback+0x60>
        	if(delta > ENC_PPR/2){
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000222:	dd03      	ble.n	800022c <HAL_I2C_MemRxCpltCallback+0x54>
        		delta -= ENC_PPR;
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800022a:	60fb      	str	r3, [r7, #12]
        	}
        	delta = abs(delta);
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	2b00      	cmp	r3, #0
 8000230:	bfb8      	it	lt
 8000232:	425b      	neglt	r3, r3
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	e00d      	b.n	8000254 <HAL_I2C_MemRxCpltCallback+0x7c>
        }else{
        	if(delta < -(ENC_PPR/2)){
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 800023e:	da03      	bge.n	8000248 <HAL_I2C_MemRxCpltCallback+0x70>
        		delta += ENC_PPR;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000246:	60fb      	str	r3, [r7, #12]
        	}
        	delta = -abs(delta);
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2b00      	cmp	r3, #0
 800024c:	bfb8      	it	lt
 800024e:	425b      	neglt	r3, r3
 8000250:	425b      	negs	r3, r3
 8000252:	60fb      	str	r3, [r7, #12]
        }

        accumulate_counter += delta;
 8000254:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	4413      	add	r3, r2
 800025c:	4a13      	ldr	r2, [pc, #76]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 800025e:	6013      	str	r3, [r2, #0]

        if(accumulate_counter >= ENC_MAX_COUNT){
 8000260:	4b12      	ldr	r3, [pc, #72]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a12      	ldr	r2, [pc, #72]	@ (80002b0 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8000266:	4293      	cmp	r3, r2
 8000268:	dd06      	ble.n	8000278 <HAL_I2C_MemRxCpltCallback+0xa0>
			accumulate_counter -= ENC_MAX_COUNT;
 800026a:	4b10      	ldr	r3, [pc, #64]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8000270:	4413      	add	r3, r2
 8000272:	4a0e      	ldr	r2, [pc, #56]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000274:	6013      	str	r3, [r2, #0]
 8000276:	e00a      	b.n	800028e <HAL_I2C_MemRxCpltCallback+0xb6>
		}else if(accumulate_counter < ENC_MIN_COUNT){
 8000278:	4b0c      	ldr	r3, [pc, #48]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a0d      	ldr	r2, [pc, #52]	@ (80002b4 <HAL_I2C_MemRxCpltCallback+0xdc>)
 800027e:	4293      	cmp	r3, r2
 8000280:	da05      	bge.n	800028e <HAL_I2C_MemRxCpltCallback+0xb6>
			accumulate_counter += ENC_MAX_COUNT;
 8000282:	4b0a      	ldr	r3, [pc, #40]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4b0c      	ldr	r3, [pc, #48]	@ (80002b8 <HAL_I2C_MemRxCpltCallback+0xe0>)
 8000288:	4413      	add	r3, r2
 800028a:	4a08      	ldr	r2, [pc, #32]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 800028c:	6013      	str	r3, [r2, #0]
		}

        position_prev = position_now;
 800028e:	4a05      	ldr	r2, [pc, #20]	@ (80002a4 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8000290:	897b      	ldrh	r3, [r7, #10]
 8000292:	8013      	strh	r3, [r2, #0]
    }
}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40005400 	.word	0x40005400
 80002a0:	20000088 	.word	0x20000088
 80002a4:	20000082 	.word	0x20000082
 80002a8:	20000080 	.word	0x20000080
 80002ac:	20000084 	.word	0x20000084
 80002b0:	0098967e 	.word	0x0098967e
 80002b4:	ff676981 	.word	0xff676981
 80002b8:	0098967f 	.word	0x0098967f

080002bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	4a06      	ldr	r2, [pc, #24]	@ (80002e4 <vApplicationGetIdleTaskMemory+0x28>)
 80002cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	4a05      	ldr	r2, [pc, #20]	@ (80002e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80002d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2280      	movs	r2, #128	@ 0x80
 80002d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	20000890 	.word	0x20000890
 80002e8:	20000930 	.word	0x20000930

080002ec <i2c_scanbus>:


#include "i2c_bus.h"

/* Blocking function */
void i2c_scanbus(I2C_HandleTypeDef* channel, uint8_t* found_addr){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result;
	static uint8_t counter = 0;
	for(uint8_t i = 0 ; i <= I2C_MAX_NODE ; i++){
 80002f6:	2300      	movs	r3, #0
 80002f8:	73fb      	strb	r3, [r7, #15]
 80002fa:	e020      	b.n	800033e <i2c_scanbus+0x52>
		result = HAL_I2C_IsDeviceReady(channel, (i << 1), 1, 100);
 80002fc:	7bfb      	ldrb	r3, [r7, #15]
 80002fe:	b29b      	uxth	r3, r3
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	b299      	uxth	r1, r3
 8000304:	2364      	movs	r3, #100	@ 0x64
 8000306:	2201      	movs	r2, #1
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f001 fedd 	bl	80020c8 <HAL_I2C_IsDeviceReady>
 800030e:	4603      	mov	r3, r0
 8000310:	73bb      	strb	r3, [r7, #14]
		if(result == HAL_OK){
 8000312:	7bbb      	ldrb	r3, [r7, #14]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d10c      	bne.n	8000332 <i2c_scanbus+0x46>
			found_addr[counter] = i;
 8000318:	4b0d      	ldr	r3, [pc, #52]	@ (8000350 <i2c_scanbus+0x64>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	461a      	mov	r2, r3
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	4413      	add	r3, r2
 8000322:	7bfa      	ldrb	r2, [r7, #15]
 8000324:	701a      	strb	r2, [r3, #0]
			counter++;
 8000326:	4b0a      	ldr	r3, [pc, #40]	@ (8000350 <i2c_scanbus+0x64>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	3301      	adds	r3, #1
 800032c:	b2da      	uxtb	r2, r3
 800032e:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <i2c_scanbus+0x64>)
 8000330:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(10);
 8000332:	200a      	movs	r0, #10
 8000334:	f000 fcd6 	bl	8000ce4 <HAL_Delay>
	for(uint8_t i = 0 ; i <= I2C_MAX_NODE ; i++){
 8000338:	7bfb      	ldrb	r3, [r7, #15]
 800033a:	3301      	adds	r3, #1
 800033c:	73fb      	strb	r3, [r7, #15]
 800033e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000342:	2b00      	cmp	r3, #0
 8000344:	dada      	bge.n	80002fc <i2c_scanbus+0x10>
	}
}
 8000346:	bf00      	nop
 8000348:	bf00      	nop
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000b30 	.word	0x20000b30

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b5b0      	push	{r4, r5, r7, lr}
 8000356:	b096      	sub	sp, #88	@ 0x58
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035a:	f000 fc91 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035e:	f000 f85d 	bl	800041c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000362:	f000 f96f 	bl	8000644 <MX_GPIO_Init>
  MX_DMA_Init();
 8000366:	f000 f94f 	bl	8000608 <MX_DMA_Init>
  MX_I2C1_Init();
 800036a:	f000 f89d 	bl	80004a8 <MX_I2C1_Init>
  MX_TIM2_Init();
 800036e:	f000 f8c9 	bl	8000504 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000372:	f000 f91f 	bl	80005b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_scanbus(&hi2c1, i2c_available);
 8000376:	4921      	ldr	r1, [pc, #132]	@ (80003fc <main+0xa8>)
 8000378:	4821      	ldr	r0, [pc, #132]	@ (8000400 <main+0xac>)
 800037a:	f7ff ffb7 	bl	80002ec <i2c_scanbus>
  TMC2209_setup();
 800037e:	f007 fea3 	bl	80080c8 <TMC2209_setup>
  encoder_init();
 8000382:	f006 fc3f 	bl	8006c04 <encoder_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000386:	4b1f      	ldr	r3, [pc, #124]	@ (8000404 <main+0xb0>)
 8000388:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800038c:	461d      	mov	r5, r3
 800038e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000392:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000396:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800039a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800039e:	2100      	movs	r1, #0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f006 fc8d 	bl	8006cc0 <osThreadCreate>
 80003a6:	4603      	mov	r3, r0
 80003a8:	4a17      	ldr	r2, [pc, #92]	@ (8000408 <main+0xb4>)
 80003aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 80003ac:	4b17      	ldr	r3, [pc, #92]	@ (800040c <main+0xb8>)
 80003ae:	f107 0420 	add.w	r4, r7, #32
 80003b2:	461d      	mov	r5, r3
 80003b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 80003c0:	f107 0320 	add.w	r3, r7, #32
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f006 fc7a 	bl	8006cc0 <osThreadCreate>
 80003cc:	4603      	mov	r3, r0
 80003ce:	4a10      	ldr	r2, [pc, #64]	@ (8000410 <main+0xbc>)
 80003d0:	6013      	str	r3, [r2, #0]

  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 80003d2:	4b10      	ldr	r3, [pc, #64]	@ (8000414 <main+0xc0>)
 80003d4:	1d3c      	adds	r4, r7, #4
 80003d6:	461d      	mov	r5, r3
 80003d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2100      	movs	r1, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f006 fc69 	bl	8006cc0 <osThreadCreate>
 80003ee:	4603      	mov	r3, r0
 80003f0:	4a09      	ldr	r2, [pc, #36]	@ (8000418 <main+0xc4>)
 80003f2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80003f4:	f006 fc5d 	bl	8006cb2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <main+0xa4>
 80003fc:	20000c68 	.word	0x20000c68
 8000400:	20000b34 	.word	0x20000b34
 8000404:	08008614 	.word	0x08008614
 8000408:	20000c5c 	.word	0x20000c5c
 800040c:	0800863c 	.word	0x0800863c
 8000410:	20000c60 	.word	0x20000c60
 8000414:	08008664 	.word	0x08008664
 8000418:	20000c64 	.word	0x20000c64

0800041c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b090      	sub	sp, #64	@ 0x40
 8000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	f107 0318 	add.w	r3, r7, #24
 8000426:	2228      	movs	r2, #40	@ 0x28
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f008 f814 	bl	8008458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800043e:	2301      	movs	r3, #1
 8000440:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000442:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000446:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044c:	2301      	movs	r3, #1
 800044e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000450:	2302      	movs	r3, #2
 8000452:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000454:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000458:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800045a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800045e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000460:	f107 0318 	add.w	r3, r7, #24
 8000464:	4618      	mov	r0, r3
 8000466:	f003 fefd 	bl	8004264 <HAL_RCC_OscConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000470:	f000 f9aa 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000474:	230f      	movs	r3, #15
 8000476:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000478:	2302      	movs	r3, #2
 800047a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000480:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2102      	movs	r1, #2
 800048e:	4618      	mov	r0, r3
 8000490:	f004 f96a 	bl	8004768 <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800049a:	f000 f995 	bl	80007c8 <Error_Handler>
  }
}
 800049e:	bf00      	nop
 80004a0:	3740      	adds	r7, #64	@ 0x40
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004ac:	4b12      	ldr	r3, [pc, #72]	@ (80004f8 <MX_I2C1_Init+0x50>)
 80004ae:	4a13      	ldr	r2, [pc, #76]	@ (80004fc <MX_I2C1_Init+0x54>)
 80004b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80004b2:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <MX_I2C1_Init+0x50>)
 80004b4:	4a12      	ldr	r2, [pc, #72]	@ (8000500 <MX_I2C1_Init+0x58>)
 80004b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	@ (80004f8 <MX_I2C1_Init+0x50>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004be:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <MX_I2C1_Init+0x50>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <MX_I2C1_Init+0x50>)
 80004c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004cc:	4b0a      	ldr	r3, [pc, #40]	@ (80004f8 <MX_I2C1_Init+0x50>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004d2:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <MX_I2C1_Init+0x50>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004d8:	4b07      	ldr	r3, [pc, #28]	@ (80004f8 <MX_I2C1_Init+0x50>)
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004de:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <MX_I2C1_Init+0x50>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004e4:	4804      	ldr	r0, [pc, #16]	@ (80004f8 <MX_I2C1_Init+0x50>)
 80004e6:	f001 f8bf 	bl	8001668 <HAL_I2C_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004f0:	f000 f96a 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000b34 	.word	0x20000b34
 80004fc:	40005400 	.word	0x40005400
 8000500:	00061a80 	.word	0x00061a80

08000504 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	@ 0x28
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]
 8000522:	615a      	str	r2, [r3, #20]
 8000524:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000526:	4b22      	ldr	r3, [pc, #136]	@ (80005b0 <MX_TIM2_Init+0xac>)
 8000528:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800052c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 800052e:	4b20      	ldr	r3, [pc, #128]	@ (80005b0 <MX_TIM2_Init+0xac>)
 8000530:	2247      	movs	r2, #71	@ 0x47
 8000532:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000534:	4b1e      	ldr	r3, [pc, #120]	@ (80005b0 <MX_TIM2_Init+0xac>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4 - 1;
 800053a:	4b1d      	ldr	r3, [pc, #116]	@ (80005b0 <MX_TIM2_Init+0xac>)
 800053c:	2203      	movs	r2, #3
 800053e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000540:	4b1b      	ldr	r3, [pc, #108]	@ (80005b0 <MX_TIM2_Init+0xac>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000546:	4b1a      	ldr	r3, [pc, #104]	@ (80005b0 <MX_TIM2_Init+0xac>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800054c:	4818      	ldr	r0, [pc, #96]	@ (80005b0 <MX_TIM2_Init+0xac>)
 800054e:	f004 fb73 	bl	8004c38 <HAL_TIM_PWM_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000558:	f000 f936 	bl	80007c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055c:	2300      	movs	r3, #0
 800055e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000564:	f107 0320 	add.w	r3, r7, #32
 8000568:	4619      	mov	r1, r3
 800056a:	4811      	ldr	r0, [pc, #68]	@ (80005b0 <MX_TIM2_Init+0xac>)
 800056c:	f005 f84e 	bl	800560c <HAL_TIMEx_MasterConfigSynchronization>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000576:	f000 f927 	bl	80007c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800057a:	2360      	movs	r3, #96	@ 0x60
 800057c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 800057e:	2332      	movs	r3, #50	@ 0x32
 8000580:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	4619      	mov	r1, r3
 8000590:	4807      	ldr	r0, [pc, #28]	@ (80005b0 <MX_TIM2_Init+0xac>)
 8000592:	f004 fd43 	bl	800501c <HAL_TIM_PWM_ConfigChannel>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800059c:	f000 f914 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <MX_TIM2_Init+0xac>)
 80005a2:	f000 f9ed 	bl	8000980 <HAL_TIM_MspPostInit>

}
 80005a6:	bf00      	nop
 80005a8:	3728      	adds	r7, #40	@ 0x28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000bcc 	.word	0x20000bcc

080005b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_USART1_UART_Init+0x4c>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	@ (8000604 <MX_USART1_UART_Init+0x50>)
 80005bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80005be:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <MX_USART1_UART_Init+0x4c>)
 80005c0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80005c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_USART1_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_USART1_UART_Init+0x4c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <MX_USART1_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_USART1_UART_Init+0x4c>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <MX_USART1_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_USART1_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	@ (8000600 <MX_USART1_UART_Init+0x4c>)
 80005ec:	f005 f87e 	bl	80056ec <HAL_HalfDuplex_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005f6:	f000 f8e7 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000c14 	.word	0x20000c14
 8000604:	40013800 	.word	0x40013800

08000608 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060e:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_DMA_Init+0x38>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <MX_DMA_Init+0x38>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_DMA_Init+0x38>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2105      	movs	r1, #5
 800062a:	2011      	movs	r0, #17
 800062c:	f000 fc33 	bl	8000e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000630:	2011      	movs	r0, #17
 8000632:	f000 fc4c 	bl	8000ece <HAL_NVIC_EnableIRQ>

}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40021000 	.word	0x40021000

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 0310 	add.w	r3, r7, #16
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000658:	4b3d      	ldr	r3, [pc, #244]	@ (8000750 <MX_GPIO_Init+0x10c>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a3c      	ldr	r2, [pc, #240]	@ (8000750 <MX_GPIO_Init+0x10c>)
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b3a      	ldr	r3, [pc, #232]	@ (8000750 <MX_GPIO_Init+0x10c>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0310 	and.w	r3, r3, #16
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b37      	ldr	r3, [pc, #220]	@ (8000750 <MX_GPIO_Init+0x10c>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a36      	ldr	r2, [pc, #216]	@ (8000750 <MX_GPIO_Init+0x10c>)
 8000676:	f043 0320 	orr.w	r3, r3, #32
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b34      	ldr	r3, [pc, #208]	@ (8000750 <MX_GPIO_Init+0x10c>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0320 	and.w	r3, r3, #32
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	4b31      	ldr	r3, [pc, #196]	@ (8000750 <MX_GPIO_Init+0x10c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a30      	ldr	r2, [pc, #192]	@ (8000750 <MX_GPIO_Init+0x10c>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b2e      	ldr	r3, [pc, #184]	@ (8000750 <MX_GPIO_Init+0x10c>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000750 <MX_GPIO_Init+0x10c>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000750 <MX_GPIO_Init+0x10c>)
 80006a6:	f043 0308 	orr.w	r3, r3, #8
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <MX_GPIO_Init+0x10c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0308 	and.w	r3, r3, #8
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006be:	4825      	ldr	r0, [pc, #148]	@ (8000754 <MX_GPIO_Init+0x110>)
 80006c0:	f000 ffba 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2106      	movs	r1, #6
 80006c8:	4823      	ldr	r0, [pc, #140]	@ (8000758 <MX_GPIO_Init+0x114>)
 80006ca:	f000 ffb5 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2120      	movs	r1, #32
 80006d2:	4822      	ldr	r0, [pc, #136]	@ (800075c <MX_GPIO_Init+0x118>)
 80006d4:	f000 ffb0 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	4619      	mov	r1, r3
 80006f0:	4818      	ldr	r0, [pc, #96]	@ (8000754 <MX_GPIO_Init+0x110>)
 80006f2:	f000 fe1d 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80006f6:	2306      	movs	r3, #6
 80006f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2302      	movs	r3, #2
 8000704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	4619      	mov	r1, r3
 800070c:	4812      	ldr	r0, [pc, #72]	@ (8000758 <MX_GPIO_Init+0x114>)
 800070e:	f000 fe0f 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000712:	2310      	movs	r3, #16
 8000714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	4619      	mov	r1, r3
 8000724:	480d      	ldr	r0, [pc, #52]	@ (800075c <MX_GPIO_Init+0x118>)
 8000726:	f000 fe03 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800072a:	2320      	movs	r3, #32
 800072c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2302      	movs	r3, #2
 8000738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	4619      	mov	r1, r3
 8000740:	4806      	ldr	r0, [pc, #24]	@ (800075c <MX_GPIO_Init+0x118>)
 8000742:	f000 fdf5 	bl	8001330 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000746:	bf00      	nop
 8000748:	3720      	adds	r7, #32
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000
 8000754:	40011000 	.word	0x40011000
 8000758:	40010800 	.word	0x40010800
 800075c:	40010c00 	.word	0x40010c00

08000760 <StartDriverTask>:

/* USER CODE BEGIN 4 */
void StartDriverTask(void const * argument){
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	for(;;){
		TMC2209_readChopConfig(&driver_value);
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <StartDriverTask+0x1c>)
 800076a:	f007 fd19 	bl	80081a0 <TMC2209_readChopConfig>
		TMC2209_enable();
 800076e:	f007 fce1 	bl	8008134 <TMC2209_enable>
//		TMC2209_moveVelocity(100);

		osDelay(100);
 8000772:	2064      	movs	r0, #100	@ 0x64
 8000774:	f006 faf0 	bl	8006d58 <osDelay>
		TMC2209_readChopConfig(&driver_value);
 8000778:	bf00      	nop
 800077a:	e7f5      	b.n	8000768 <StartDriverTask+0x8>
 800077c:	20000c6c 	.word	0x20000c6c

08000780 <StartEncoderTask>:
	}
}

void StartEncoderTask(void const * argument){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	for(;;){
		encoder_getAngle(&enc_raw);
 8000788:	4801      	ldr	r0, [pc, #4]	@ (8000790 <StartEncoderTask+0x10>)
 800078a:	f006 fa61 	bl	8006c50 <encoder_getAngle>
 800078e:	e7fb      	b.n	8000788 <StartEncoderTask+0x8>
 8000790:	20000c70 	.word	0x20000c70

08000794 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f006 fadb 	bl	8006d58 <osDelay>
 80007a2:	e7fb      	b.n	800079c <StartDefaultTask+0x8>

080007a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a04      	ldr	r2, [pc, #16]	@ (80007c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d101      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b6:	f000 fa79 	bl	8000cac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40012c00 	.word	0x40012c00

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <HAL_MspInit+0x68>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a17      	ldr	r2, [pc, #92]	@ (800083c <HAL_MspInit+0x68>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b15      	ldr	r3, [pc, #84]	@ (800083c <HAL_MspInit+0x68>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b12      	ldr	r3, [pc, #72]	@ (800083c <HAL_MspInit+0x68>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a11      	ldr	r2, [pc, #68]	@ (800083c <HAL_MspInit+0x68>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <HAL_MspInit+0x68>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	210f      	movs	r1, #15
 800080e:	f06f 0001 	mvn.w	r0, #1
 8000812:	f000 fb40 	bl	8000e96 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000816:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <HAL_MspInit+0x6c>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	4a04      	ldr	r2, [pc, #16]	@ (8000840 <HAL_MspInit+0x6c>)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	40010000 	.word	0x40010000

08000844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a31      	ldr	r2, [pc, #196]	@ (8000924 <HAL_I2C_MspInit+0xe0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d15a      	bne.n	800091a <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000864:	4b30      	ldr	r3, [pc, #192]	@ (8000928 <HAL_I2C_MspInit+0xe4>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a2f      	ldr	r2, [pc, #188]	@ (8000928 <HAL_I2C_MspInit+0xe4>)
 800086a:	f043 0308 	orr.w	r3, r3, #8
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <HAL_I2C_MspInit+0xe4>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0308 	and.w	r3, r3, #8
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800087c:	23c0      	movs	r3, #192	@ 0xc0
 800087e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000880:	2312      	movs	r3, #18
 8000882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4619      	mov	r1, r3
 800088e:	4827      	ldr	r0, [pc, #156]	@ (800092c <HAL_I2C_MspInit+0xe8>)
 8000890:	f000 fd4e 	bl	8001330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000894:	4b24      	ldr	r3, [pc, #144]	@ (8000928 <HAL_I2C_MspInit+0xe4>)
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	4a23      	ldr	r2, [pc, #140]	@ (8000928 <HAL_I2C_MspInit+0xe4>)
 800089a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800089e:	61d3      	str	r3, [r2, #28]
 80008a0:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <HAL_I2C_MspInit+0xe4>)
 80008a2:	69db      	ldr	r3, [r3, #28]
 80008a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80008ac:	4b20      	ldr	r3, [pc, #128]	@ (8000930 <HAL_I2C_MspInit+0xec>)
 80008ae:	4a21      	ldr	r2, [pc, #132]	@ (8000934 <HAL_I2C_MspInit+0xf0>)
 80008b0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <HAL_I2C_MspInit+0xec>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <HAL_I2C_MspInit+0xec>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008be:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <HAL_I2C_MspInit+0xec>)
 80008c0:	2280      	movs	r2, #128	@ 0x80
 80008c2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <HAL_I2C_MspInit+0xec>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <HAL_I2C_MspInit+0xec>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <HAL_I2C_MspInit+0xec>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80008d6:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <HAL_I2C_MspInit+0xec>)
 80008d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80008de:	4814      	ldr	r0, [pc, #80]	@ (8000930 <HAL_I2C_MspInit+0xec>)
 80008e0:	f000 fb04 	bl	8000eec <HAL_DMA_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80008ea:	f7ff ff6d 	bl	80007c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000930 <HAL_I2C_MspInit+0xec>)
 80008f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80008f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000930 <HAL_I2C_MspInit+0xec>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2105      	movs	r1, #5
 80008fe:	201f      	movs	r0, #31
 8000900:	f000 fac9 	bl	8000e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000904:	201f      	movs	r0, #31
 8000906:	f000 fae2 	bl	8000ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2105      	movs	r1, #5
 800090e:	2020      	movs	r0, #32
 8000910:	f000 fac1 	bl	8000e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000914:	2020      	movs	r0, #32
 8000916:	f000 fada 	bl	8000ece <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800091a:	bf00      	nop
 800091c:	3720      	adds	r7, #32
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40005400 	.word	0x40005400
 8000928:	40021000 	.word	0x40021000
 800092c:	40010c00 	.word	0x40010c00
 8000930:	20000b88 	.word	0x20000b88
 8000934:	40020080 	.word	0x40020080

08000938 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000948:	d113      	bne.n	8000972 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <HAL_TIM_PWM_MspInit+0x44>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4a0b      	ldr	r2, [pc, #44]	@ (800097c <HAL_TIM_PWM_MspInit+0x44>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	61d3      	str	r3, [r2, #28]
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <HAL_TIM_PWM_MspInit+0x44>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2105      	movs	r1, #5
 8000966:	201c      	movs	r0, #28
 8000968:	f000 fa95 	bl	8000e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800096c:	201c      	movs	r0, #28
 800096e:	f000 faae 	bl	8000ece <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800099e:	d117      	bne.n	80009d0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <HAL_TIM_MspPostInit+0x58>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a0c      	ldr	r2, [pc, #48]	@ (80009d8 <HAL_TIM_MspPostInit+0x58>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <HAL_TIM_MspPostInit+0x58>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b8:	2301      	movs	r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	4804      	ldr	r0, [pc, #16]	@ (80009dc <HAL_TIM_MspPostInit+0x5c>)
 80009cc:	f000 fcb0 	bl	8001330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40010800 	.word	0x40010800

080009e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0310 	add.w	r3, r7, #16
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000a64 <HAL_UART_MspInit+0x84>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d12c      	bne.n	8000a5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a00:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a18      	ldr	r2, [pc, #96]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a12      	ldr	r2, [pc, #72]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <HAL_UART_MspInit+0x88>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a36:	2312      	movs	r3, #18
 8000a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4619      	mov	r1, r3
 8000a44:	4809      	ldr	r0, [pc, #36]	@ (8000a6c <HAL_UART_MspInit+0x8c>)
 8000a46:	f000 fc73 	bl	8001330 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2105      	movs	r1, #5
 8000a4e:	2025      	movs	r0, #37	@ 0x25
 8000a50:	f000 fa21 	bl	8000e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a54:	2025      	movs	r0, #37	@ 0x25
 8000a56:	f000 fa3a 	bl	8000ece <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40013800 	.word	0x40013800
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40010800 	.word	0x40010800

08000a70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	@ 0x30
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a86:	4b2e      	ldr	r3, [pc, #184]	@ (8000b40 <HAL_InitTick+0xd0>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a2d      	ldr	r2, [pc, #180]	@ (8000b40 <HAL_InitTick+0xd0>)
 8000a8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b2b      	ldr	r3, [pc, #172]	@ (8000b40 <HAL_InitTick+0xd0>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a9e:	f107 020c 	add.w	r2, r7, #12
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 ffcd 	bl	8004a48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000aae:	f003 ffb7 	bl	8004a20 <HAL_RCC_GetPCLK2Freq>
 8000ab2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ab6:	4a23      	ldr	r2, [pc, #140]	@ (8000b44 <HAL_InitTick+0xd4>)
 8000ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8000abc:	0c9b      	lsrs	r3, r3, #18
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000ac4:	4a21      	ldr	r2, [pc, #132]	@ (8000b4c <HAL_InitTick+0xdc>)
 8000ac6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000aca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ace:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ae8:	4817      	ldr	r0, [pc, #92]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000aea:	f003 fffb 	bl	8004ae4 <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000af4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d11b      	bne.n	8000b34 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000afc:	4812      	ldr	r0, [pc, #72]	@ (8000b48 <HAL_InitTick+0xd8>)
 8000afe:	f004 f849 	bl	8004b94 <HAL_TIM_Base_Start_IT>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000b08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d111      	bne.n	8000b34 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b10:	2019      	movs	r0, #25
 8000b12:	f000 f9dc 	bl	8000ece <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d808      	bhi.n	8000b2e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2019      	movs	r0, #25
 8000b22:	f000 f9b8 	bl	8000e96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <HAL_InitTick+0xe0>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	e002      	b.n	8000b34 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3730      	adds	r7, #48	@ 0x30
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	20000c74 	.word	0x20000c74
 8000b4c:	40012c00 	.word	0x40012c00
 8000b50:	20000004 	.word	0x20000004

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <NMI_Handler+0x4>

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000b8c:	4802      	ldr	r0, [pc, #8]	@ (8000b98 <DMA1_Channel7_IRQHandler+0x10>)
 8000b8e:	f000 fabb 	bl	8001108 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000b88 	.word	0x20000b88

08000b9c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ba0:	4802      	ldr	r0, [pc, #8]	@ (8000bac <TIM1_UP_IRQHandler+0x10>)
 8000ba2:	f004 f94b 	bl	8004e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000c74 	.word	0x20000c74

08000bb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <TIM2_IRQHandler+0x10>)
 8000bb6:	f004 f941 	bl	8004e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000bcc 	.word	0x20000bcc

08000bc4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <I2C1_EV_IRQHandler+0x10>)
 8000bca:	f001 fbab 	bl	8002324 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000b34 	.word	0x20000b34

08000bd8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <I2C1_ER_IRQHandler+0x10>)
 8000bde:	f001 fcf4 	bl	80025ca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000b34 	.word	0x20000b34

08000bec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <USART1_IRQHandler+0x10>)
 8000bf2:	f004 ff53 	bl	8005a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000c14 	.word	0x20000c14

08000c00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <HAL_UARTEx_RxEventCallback>:
	HAL_HalfDuplex_EnableReceiver(&huart1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 8000c18:	221e      	movs	r2, #30
 8000c1a:	4904      	ldr	r1, [pc, #16]	@ (8000c2c <HAL_UARTEx_RxEventCallback+0x20>)
 8000c1c:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <HAL_UARTEx_RxEventCallback+0x24>)
 8000c1e:	f004 fedf 	bl	80059e0 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000cbc 	.word	0x20000cbc
 8000c30:	20000c14 	.word	0x20000c14

08000c34 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8000c34:	f7ff ffe4 	bl	8000c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c38:	480b      	ldr	r0, [pc, #44]	@ (8000c68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c3a:	490c      	ldr	r1, [pc, #48]	@ (8000c6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a09      	ldr	r2, [pc, #36]	@ (8000c74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c50:	4c09      	ldr	r4, [pc, #36]	@ (8000c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f007 fc59 	bl	8008514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c62:	f7ff fb77 	bl	8000354 <main>
  bx lr
 8000c66:	4770      	bx	lr
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000c70:	080086bc 	.word	0x080086bc
  ldr r2, =_sbss
 8000c74:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000c78:	20001ba0 	.word	0x20001ba0

08000c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC1_2_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <HAL_Init+0x28>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a07      	ldr	r2, [pc, #28]	@ (8000ca8 <HAL_Init+0x28>)
 8000c8a:	f043 0310 	orr.w	r3, r3, #16
 8000c8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f8f5 	bl	8000e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c96:	200f      	movs	r0, #15
 8000c98:	f7ff feea 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c9c:	f7ff fd9a 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40022000 	.word	0x40022000

08000cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <HAL_IncTick+0x1c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <HAL_IncTick+0x20>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a03      	ldr	r2, [pc, #12]	@ (8000ccc <HAL_IncTick+0x20>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000cdc 	.word	0x20000cdc

08000cd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b02      	ldr	r3, [pc, #8]	@ (8000ce0 <HAL_GetTick+0x10>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	20000cdc 	.word	0x20000cdc

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff fff0 	bl	8000cd0 <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffe0 	bl	8000cd0 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db0b      	blt.n	8000dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	4906      	ldr	r1, [pc, #24]	@ (8000dc4 <__NVIC_EnableIRQ+0x34>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	@ (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	@ (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	@ 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff4f 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea8:	f7ff ff64 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	6978      	ldr	r0, [r7, #20]
 8000eb4:	f7ff ffb2 	bl	8000e1c <NVIC_EncodePriority>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff81 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff57 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e043      	b.n	8000f8a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b22      	ldr	r3, [pc, #136]	@ (8000f94 <HAL_DMA_Init+0xa8>)
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a22      	ldr	r2, [pc, #136]	@ (8000f98 <HAL_DMA_Init+0xac>)
 8000f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	009a      	lsls	r2, r3, #2
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8000f9c <HAL_DMA_Init+0xb0>)
 8000f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2202      	movs	r2, #2
 8000f24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000f36:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000f3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	bffdfff8 	.word	0xbffdfff8
 8000f98:	cccccccd 	.word	0xcccccccd
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d008      	beq.n	8000fca <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2204      	movs	r2, #4
 8000fbc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e020      	b.n	800100c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 020e 	bic.w	r2, r2, #14
 8000fd8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0201 	bic.w	r2, r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800100a:	7bfb      	ldrb	r3, [r7, #15]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
	...

08001018 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d005      	beq.n	800103c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2204      	movs	r2, #4
 8001034:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e051      	b.n	80010e0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 020e 	bic.w	r2, r2, #14
 800104a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0201 	bic.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a22      	ldr	r2, [pc, #136]	@ (80010ec <HAL_DMA_Abort_IT+0xd4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d029      	beq.n	80010ba <HAL_DMA_Abort_IT+0xa2>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a21      	ldr	r2, [pc, #132]	@ (80010f0 <HAL_DMA_Abort_IT+0xd8>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d022      	beq.n	80010b6 <HAL_DMA_Abort_IT+0x9e>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1f      	ldr	r2, [pc, #124]	@ (80010f4 <HAL_DMA_Abort_IT+0xdc>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d01a      	beq.n	80010b0 <HAL_DMA_Abort_IT+0x98>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a1e      	ldr	r2, [pc, #120]	@ (80010f8 <HAL_DMA_Abort_IT+0xe0>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d012      	beq.n	80010aa <HAL_DMA_Abort_IT+0x92>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a1c      	ldr	r2, [pc, #112]	@ (80010fc <HAL_DMA_Abort_IT+0xe4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00a      	beq.n	80010a4 <HAL_DMA_Abort_IT+0x8c>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a1b      	ldr	r2, [pc, #108]	@ (8001100 <HAL_DMA_Abort_IT+0xe8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d102      	bne.n	800109e <HAL_DMA_Abort_IT+0x86>
 8001098:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800109c:	e00e      	b.n	80010bc <HAL_DMA_Abort_IT+0xa4>
 800109e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010a2:	e00b      	b.n	80010bc <HAL_DMA_Abort_IT+0xa4>
 80010a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a8:	e008      	b.n	80010bc <HAL_DMA_Abort_IT+0xa4>
 80010aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ae:	e005      	b.n	80010bc <HAL_DMA_Abort_IT+0xa4>
 80010b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010b4:	e002      	b.n	80010bc <HAL_DMA_Abort_IT+0xa4>
 80010b6:	2310      	movs	r3, #16
 80010b8:	e000      	b.n	80010bc <HAL_DMA_Abort_IT+0xa4>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4a11      	ldr	r2, [pc, #68]	@ (8001104 <HAL_DMA_Abort_IT+0xec>)
 80010be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	4798      	blx	r3
    } 
  }
  return status;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40020008 	.word	0x40020008
 80010f0:	4002001c 	.word	0x4002001c
 80010f4:	40020030 	.word	0x40020030
 80010f8:	40020044 	.word	0x40020044
 80010fc:	40020058 	.word	0x40020058
 8001100:	4002006c 	.word	0x4002006c
 8001104:	40020000 	.word	0x40020000

08001108 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	2204      	movs	r2, #4
 8001126:	409a      	lsls	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4013      	ands	r3, r2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d04f      	beq.n	80011d0 <HAL_DMA_IRQHandler+0xc8>
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	2b00      	cmp	r3, #0
 8001138:	d04a      	beq.n	80011d0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	2b00      	cmp	r3, #0
 8001146:	d107      	bne.n	8001158 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0204 	bic.w	r2, r2, #4
 8001156:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a66      	ldr	r2, [pc, #408]	@ (80012f8 <HAL_DMA_IRQHandler+0x1f0>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d029      	beq.n	80011b6 <HAL_DMA_IRQHandler+0xae>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a65      	ldr	r2, [pc, #404]	@ (80012fc <HAL_DMA_IRQHandler+0x1f4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d022      	beq.n	80011b2 <HAL_DMA_IRQHandler+0xaa>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a63      	ldr	r2, [pc, #396]	@ (8001300 <HAL_DMA_IRQHandler+0x1f8>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d01a      	beq.n	80011ac <HAL_DMA_IRQHandler+0xa4>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a62      	ldr	r2, [pc, #392]	@ (8001304 <HAL_DMA_IRQHandler+0x1fc>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d012      	beq.n	80011a6 <HAL_DMA_IRQHandler+0x9e>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a60      	ldr	r2, [pc, #384]	@ (8001308 <HAL_DMA_IRQHandler+0x200>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00a      	beq.n	80011a0 <HAL_DMA_IRQHandler+0x98>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a5f      	ldr	r2, [pc, #380]	@ (800130c <HAL_DMA_IRQHandler+0x204>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d102      	bne.n	800119a <HAL_DMA_IRQHandler+0x92>
 8001194:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001198:	e00e      	b.n	80011b8 <HAL_DMA_IRQHandler+0xb0>
 800119a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800119e:	e00b      	b.n	80011b8 <HAL_DMA_IRQHandler+0xb0>
 80011a0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80011a4:	e008      	b.n	80011b8 <HAL_DMA_IRQHandler+0xb0>
 80011a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011aa:	e005      	b.n	80011b8 <HAL_DMA_IRQHandler+0xb0>
 80011ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011b0:	e002      	b.n	80011b8 <HAL_DMA_IRQHandler+0xb0>
 80011b2:	2340      	movs	r3, #64	@ 0x40
 80011b4:	e000      	b.n	80011b8 <HAL_DMA_IRQHandler+0xb0>
 80011b6:	2304      	movs	r3, #4
 80011b8:	4a55      	ldr	r2, [pc, #340]	@ (8001310 <HAL_DMA_IRQHandler+0x208>)
 80011ba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 8094 	beq.w	80012ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80011ce:	e08e      	b.n	80012ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	2202      	movs	r2, #2
 80011d6:	409a      	lsls	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4013      	ands	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d056      	beq.n	800128e <HAL_DMA_IRQHandler+0x186>
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d051      	beq.n	800128e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0320 	and.w	r3, r3, #32
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10b      	bne.n	8001210 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 020a 	bic.w	r2, r2, #10
 8001206:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a38      	ldr	r2, [pc, #224]	@ (80012f8 <HAL_DMA_IRQHandler+0x1f0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d029      	beq.n	800126e <HAL_DMA_IRQHandler+0x166>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a37      	ldr	r2, [pc, #220]	@ (80012fc <HAL_DMA_IRQHandler+0x1f4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d022      	beq.n	800126a <HAL_DMA_IRQHandler+0x162>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a35      	ldr	r2, [pc, #212]	@ (8001300 <HAL_DMA_IRQHandler+0x1f8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d01a      	beq.n	8001264 <HAL_DMA_IRQHandler+0x15c>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a34      	ldr	r2, [pc, #208]	@ (8001304 <HAL_DMA_IRQHandler+0x1fc>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d012      	beq.n	800125e <HAL_DMA_IRQHandler+0x156>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a32      	ldr	r2, [pc, #200]	@ (8001308 <HAL_DMA_IRQHandler+0x200>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00a      	beq.n	8001258 <HAL_DMA_IRQHandler+0x150>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a31      	ldr	r2, [pc, #196]	@ (800130c <HAL_DMA_IRQHandler+0x204>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d102      	bne.n	8001252 <HAL_DMA_IRQHandler+0x14a>
 800124c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001250:	e00e      	b.n	8001270 <HAL_DMA_IRQHandler+0x168>
 8001252:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001256:	e00b      	b.n	8001270 <HAL_DMA_IRQHandler+0x168>
 8001258:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800125c:	e008      	b.n	8001270 <HAL_DMA_IRQHandler+0x168>
 800125e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001262:	e005      	b.n	8001270 <HAL_DMA_IRQHandler+0x168>
 8001264:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001268:	e002      	b.n	8001270 <HAL_DMA_IRQHandler+0x168>
 800126a:	2320      	movs	r3, #32
 800126c:	e000      	b.n	8001270 <HAL_DMA_IRQHandler+0x168>
 800126e:	2302      	movs	r3, #2
 8001270:	4a27      	ldr	r2, [pc, #156]	@ (8001310 <HAL_DMA_IRQHandler+0x208>)
 8001272:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001280:	2b00      	cmp	r3, #0
 8001282:	d034      	beq.n	80012ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800128c:	e02f      	b.n	80012ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	2208      	movs	r2, #8
 8001294:	409a      	lsls	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4013      	ands	r3, r2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d028      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x1e8>
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d023      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 020e 	bic.w	r2, r2, #14
 80012b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012c0:	2101      	movs	r1, #1
 80012c2:	fa01 f202 	lsl.w	r2, r1, r2
 80012c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d004      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	4798      	blx	r3
    }
  }
  return;
 80012ee:	bf00      	nop
 80012f0:	bf00      	nop
}
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40020008 	.word	0x40020008
 80012fc:	4002001c 	.word	0x4002001c
 8001300:	40020030 	.word	0x40020030
 8001304:	40020044 	.word	0x40020044
 8001308:	40020058 	.word	0x40020058
 800130c:	4002006c 	.word	0x4002006c
 8001310:	40020000 	.word	0x40020000

08001314 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001322:	b2db      	uxtb	r3, r3
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
	...

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b08b      	sub	sp, #44	@ 0x2c
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001342:	e169      	b.n	8001618 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001344:	2201      	movs	r2, #1
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	429a      	cmp	r2, r3
 800135e:	f040 8158 	bne.w	8001612 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a9a      	ldr	r2, [pc, #616]	@ (80015d0 <HAL_GPIO_Init+0x2a0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d05e      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 800136c:	4a98      	ldr	r2, [pc, #608]	@ (80015d0 <HAL_GPIO_Init+0x2a0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d875      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 8001372:	4a98      	ldr	r2, [pc, #608]	@ (80015d4 <HAL_GPIO_Init+0x2a4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d058      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 8001378:	4a96      	ldr	r2, [pc, #600]	@ (80015d4 <HAL_GPIO_Init+0x2a4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d86f      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 800137e:	4a96      	ldr	r2, [pc, #600]	@ (80015d8 <HAL_GPIO_Init+0x2a8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d052      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 8001384:	4a94      	ldr	r2, [pc, #592]	@ (80015d8 <HAL_GPIO_Init+0x2a8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d869      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 800138a:	4a94      	ldr	r2, [pc, #592]	@ (80015dc <HAL_GPIO_Init+0x2ac>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d04c      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 8001390:	4a92      	ldr	r2, [pc, #584]	@ (80015dc <HAL_GPIO_Init+0x2ac>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d863      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 8001396:	4a92      	ldr	r2, [pc, #584]	@ (80015e0 <HAL_GPIO_Init+0x2b0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d046      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 800139c:	4a90      	ldr	r2, [pc, #576]	@ (80015e0 <HAL_GPIO_Init+0x2b0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d85d      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 80013a2:	2b12      	cmp	r3, #18
 80013a4:	d82a      	bhi.n	80013fc <HAL_GPIO_Init+0xcc>
 80013a6:	2b12      	cmp	r3, #18
 80013a8:	d859      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 80013aa:	a201      	add	r2, pc, #4	@ (adr r2, 80013b0 <HAL_GPIO_Init+0x80>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	0800142b 	.word	0x0800142b
 80013b4:	08001405 	.word	0x08001405
 80013b8:	08001417 	.word	0x08001417
 80013bc:	08001459 	.word	0x08001459
 80013c0:	0800145f 	.word	0x0800145f
 80013c4:	0800145f 	.word	0x0800145f
 80013c8:	0800145f 	.word	0x0800145f
 80013cc:	0800145f 	.word	0x0800145f
 80013d0:	0800145f 	.word	0x0800145f
 80013d4:	0800145f 	.word	0x0800145f
 80013d8:	0800145f 	.word	0x0800145f
 80013dc:	0800145f 	.word	0x0800145f
 80013e0:	0800145f 	.word	0x0800145f
 80013e4:	0800145f 	.word	0x0800145f
 80013e8:	0800145f 	.word	0x0800145f
 80013ec:	0800145f 	.word	0x0800145f
 80013f0:	0800145f 	.word	0x0800145f
 80013f4:	0800140d 	.word	0x0800140d
 80013f8:	08001421 	.word	0x08001421
 80013fc:	4a79      	ldr	r2, [pc, #484]	@ (80015e4 <HAL_GPIO_Init+0x2b4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d013      	beq.n	800142a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001402:	e02c      	b.n	800145e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	623b      	str	r3, [r7, #32]
          break;
 800140a:	e029      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	3304      	adds	r3, #4
 8001412:	623b      	str	r3, [r7, #32]
          break;
 8001414:	e024      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	3308      	adds	r3, #8
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e01f      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	330c      	adds	r3, #12
 8001426:	623b      	str	r3, [r7, #32]
          break;
 8001428:	e01a      	b.n	8001460 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001432:	2304      	movs	r3, #4
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e013      	b.n	8001460 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d105      	bne.n	800144c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001440:	2308      	movs	r3, #8
 8001442:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	611a      	str	r2, [r3, #16]
          break;
 800144a:	e009      	b.n	8001460 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800144c:	2308      	movs	r3, #8
 800144e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	615a      	str	r2, [r3, #20]
          break;
 8001456:	e003      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
          break;
 800145c:	e000      	b.n	8001460 <HAL_GPIO_Init+0x130>
          break;
 800145e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2bff      	cmp	r3, #255	@ 0xff
 8001464:	d801      	bhi.n	800146a <HAL_GPIO_Init+0x13a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	e001      	b.n	800146e <HAL_GPIO_Init+0x13e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3304      	adds	r3, #4
 800146e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2bff      	cmp	r3, #255	@ 0xff
 8001474:	d802      	bhi.n	800147c <HAL_GPIO_Init+0x14c>
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	e002      	b.n	8001482 <HAL_GPIO_Init+0x152>
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	3b08      	subs	r3, #8
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	210f      	movs	r1, #15
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	401a      	ands	r2, r3
 8001494:	6a39      	ldr	r1, [r7, #32]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	431a      	orrs	r2, r3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80b1 	beq.w	8001612 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014b0:	4b4d      	ldr	r3, [pc, #308]	@ (80015e8 <HAL_GPIO_Init+0x2b8>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a4c      	ldr	r2, [pc, #304]	@ (80015e8 <HAL_GPIO_Init+0x2b8>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b4a      	ldr	r3, [pc, #296]	@ (80015e8 <HAL_GPIO_Init+0x2b8>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014c8:	4a48      	ldr	r2, [pc, #288]	@ (80015ec <HAL_GPIO_Init+0x2bc>)
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a40      	ldr	r2, [pc, #256]	@ (80015f0 <HAL_GPIO_Init+0x2c0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d013      	beq.n	800151c <HAL_GPIO_Init+0x1ec>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a3f      	ldr	r2, [pc, #252]	@ (80015f4 <HAL_GPIO_Init+0x2c4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d00d      	beq.n	8001518 <HAL_GPIO_Init+0x1e8>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a3e      	ldr	r2, [pc, #248]	@ (80015f8 <HAL_GPIO_Init+0x2c8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d007      	beq.n	8001514 <HAL_GPIO_Init+0x1e4>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a3d      	ldr	r2, [pc, #244]	@ (80015fc <HAL_GPIO_Init+0x2cc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d101      	bne.n	8001510 <HAL_GPIO_Init+0x1e0>
 800150c:	2303      	movs	r3, #3
 800150e:	e006      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001510:	2304      	movs	r3, #4
 8001512:	e004      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001514:	2302      	movs	r3, #2
 8001516:	e002      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 800151c:	2300      	movs	r3, #0
 800151e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001520:	f002 0203 	and.w	r2, r2, #3
 8001524:	0092      	lsls	r2, r2, #2
 8001526:	4093      	lsls	r3, r2
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800152e:	492f      	ldr	r1, [pc, #188]	@ (80015ec <HAL_GPIO_Init+0x2bc>)
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001548:	4b2d      	ldr	r3, [pc, #180]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	492c      	ldr	r1, [pc, #176]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001556:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	43db      	mvns	r3, r3
 800155e:	4928      	ldr	r1, [pc, #160]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001560:	4013      	ands	r3, r2
 8001562:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001570:	4b23      	ldr	r3, [pc, #140]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	4922      	ldr	r1, [pc, #136]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	60cb      	str	r3, [r1, #12]
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	43db      	mvns	r3, r3
 8001586:	491e      	ldr	r1, [pc, #120]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001588:	4013      	ands	r3, r2
 800158a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001598:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	4918      	ldr	r1, [pc, #96]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015a6:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	4914      	ldr	r1, [pc, #80]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d021      	beq.n	8001604 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	490e      	ldr	r1, [pc, #56]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	e021      	b.n	8001612 <HAL_GPIO_Init+0x2e2>
 80015ce:	bf00      	nop
 80015d0:	10320000 	.word	0x10320000
 80015d4:	10310000 	.word	0x10310000
 80015d8:	10220000 	.word	0x10220000
 80015dc:	10210000 	.word	0x10210000
 80015e0:	10120000 	.word	0x10120000
 80015e4:	10110000 	.word	0x10110000
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000
 80015f0:	40010800 	.word	0x40010800
 80015f4:	40010c00 	.word	0x40010c00
 80015f8:	40011000 	.word	0x40011000
 80015fc:	40011400 	.word	0x40011400
 8001600:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001604:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <HAL_GPIO_Init+0x304>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	43db      	mvns	r3, r3
 800160c:	4909      	ldr	r1, [pc, #36]	@ (8001634 <HAL_GPIO_Init+0x304>)
 800160e:	4013      	ands	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	3301      	adds	r3, #1
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161e:	fa22 f303 	lsr.w	r3, r2, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	f47f ae8e 	bne.w	8001344 <HAL_GPIO_Init+0x14>
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	372c      	adds	r7, #44	@ 0x2c
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
 8001644:	4613      	mov	r3, r2
 8001646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001648:	787b      	ldrb	r3, [r7, #1]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001654:	e003      	b.n	800165e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001656:	887b      	ldrh	r3, [r7, #2]
 8001658:	041a      	lsls	r2, r3, #16
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	611a      	str	r2, [r3, #16]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e12b      	b.n	80018d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff f8d8 	bl	8000844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2224      	movs	r2, #36	@ 0x24
 8001698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016cc:	f003 f994 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 80016d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4a81      	ldr	r2, [pc, #516]	@ (80018dc <HAL_I2C_Init+0x274>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d807      	bhi.n	80016ec <HAL_I2C_Init+0x84>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4a80      	ldr	r2, [pc, #512]	@ (80018e0 <HAL_I2C_Init+0x278>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	bf94      	ite	ls
 80016e4:	2301      	movls	r3, #1
 80016e6:	2300      	movhi	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	e006      	b.n	80016fa <HAL_I2C_Init+0x92>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4a7d      	ldr	r2, [pc, #500]	@ (80018e4 <HAL_I2C_Init+0x27c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	bf94      	ite	ls
 80016f4:	2301      	movls	r3, #1
 80016f6:	2300      	movhi	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0e7      	b.n	80018d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4a78      	ldr	r2, [pc, #480]	@ (80018e8 <HAL_I2C_Init+0x280>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0c9b      	lsrs	r3, r3, #18
 800170c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	430a      	orrs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a6a      	ldr	r2, [pc, #424]	@ (80018dc <HAL_I2C_Init+0x274>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d802      	bhi.n	800173c <HAL_I2C_Init+0xd4>
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	3301      	adds	r3, #1
 800173a:	e009      	b.n	8001750 <HAL_I2C_Init+0xe8>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	4a69      	ldr	r2, [pc, #420]	@ (80018ec <HAL_I2C_Init+0x284>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	099b      	lsrs	r3, r3, #6
 800174e:	3301      	adds	r3, #1
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	430b      	orrs	r3, r1
 8001756:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001762:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	495c      	ldr	r1, [pc, #368]	@ (80018dc <HAL_I2C_Init+0x274>)
 800176c:	428b      	cmp	r3, r1
 800176e:	d819      	bhi.n	80017a4 <HAL_I2C_Init+0x13c>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1e59      	subs	r1, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fbb1 f3f3 	udiv	r3, r1, r3
 800177e:	1c59      	adds	r1, r3, #1
 8001780:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001784:	400b      	ands	r3, r1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00a      	beq.n	80017a0 <HAL_I2C_Init+0x138>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1e59      	subs	r1, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fbb1 f3f3 	udiv	r3, r1, r3
 8001798:	3301      	adds	r3, #1
 800179a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179e:	e051      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 80017a0:	2304      	movs	r3, #4
 80017a2:	e04f      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d111      	bne.n	80017d0 <HAL_I2C_Init+0x168>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	440b      	add	r3, r1
 80017ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80017be:	3301      	adds	r3, #1
 80017c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	e012      	b.n	80017f6 <HAL_I2C_Init+0x18e>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1e58      	subs	r0, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	0099      	lsls	r1, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Init+0x196>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e022      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10e      	bne.n	8001824 <HAL_I2C_Init+0x1bc>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1e58      	subs	r0, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6859      	ldr	r1, [r3, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	440b      	add	r3, r1
 8001814:	fbb0 f3f3 	udiv	r3, r0, r3
 8001818:	3301      	adds	r3, #1
 800181a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001822:	e00f      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e58      	subs	r0, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	0099      	lsls	r1, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	fbb0 f3f3 	udiv	r3, r0, r3
 800183a:	3301      	adds	r3, #1
 800183c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001840:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	6809      	ldr	r1, [r1, #0]
 8001848:	4313      	orrs	r3, r2
 800184a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001872:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6911      	ldr	r1, [r2, #16]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68d2      	ldr	r2, [r2, #12]
 800187e:	4311      	orrs	r1, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	430b      	orrs	r3, r1
 8001886:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2220      	movs	r2, #32
 80018be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	000186a0 	.word	0x000186a0
 80018e0:	001e847f 	.word	0x001e847f
 80018e4:	003d08ff 	.word	0x003d08ff
 80018e8:	431bde83 	.word	0x431bde83
 80018ec:	10624dd3 	.word	0x10624dd3

080018f0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001902:	2b80      	cmp	r3, #128	@ 0x80
 8001904:	d103      	bne.n	800190e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	@ 0x30
 800191c:	af02      	add	r7, sp, #8
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	4608      	mov	r0, r1
 8001922:	4611      	mov	r1, r2
 8001924:	461a      	mov	r2, r3
 8001926:	4603      	mov	r3, r0
 8001928:	817b      	strh	r3, [r7, #10]
 800192a:	460b      	mov	r3, r1
 800192c:	813b      	strh	r3, [r7, #8]
 800192e:	4613      	mov	r3, r2
 8001930:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001936:	f7ff f9cb 	bl	8000cd0 <HAL_GetTick>
 800193a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b20      	cmp	r3, #32
 8001946:	f040 8250 	bne.w	8001dea <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2319      	movs	r3, #25
 8001950:	2201      	movs	r2, #1
 8001952:	4982      	ldr	r1, [pc, #520]	@ (8001b5c <HAL_I2C_Mem_Read+0x244>)
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f002 fa4b 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001960:	2302      	movs	r3, #2
 8001962:	e243      	b.n	8001dec <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_I2C_Mem_Read+0x5a>
 800196e:	2302      	movs	r3, #2
 8001970:	e23c      	b.n	8001dec <HAL_I2C_Mem_Read+0x4d4>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b01      	cmp	r3, #1
 8001986:	d007      	beq.n	8001998 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2222      	movs	r2, #34	@ 0x22
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2240      	movs	r2, #64	@ 0x40
 80019b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80019c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4a62      	ldr	r2, [pc, #392]	@ (8001b60 <HAL_I2C_Mem_Read+0x248>)
 80019d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019da:	88f8      	ldrh	r0, [r7, #6]
 80019dc:	893a      	ldrh	r2, [r7, #8]
 80019de:	8979      	ldrh	r1, [r7, #10]
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	4603      	mov	r3, r0
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f002 f870 	bl	8003ad0 <I2C_RequestMemoryRead>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e1f8      	b.n	8001dec <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d113      	bne.n	8001a2a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	e1cc      	b.n	8001dc4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d11e      	bne.n	8001a70 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a42:	b672      	cpsid	i
}
 8001a44:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a6c:	b662      	cpsie	i
}
 8001a6e:	e035      	b.n	8001adc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d11e      	bne.n	8001ab6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ab0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ab2:	b662      	cpsie	i
}
 8001ab4:	e012      	b.n	8001adc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ac4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001adc:	e172      	b.n	8001dc4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	f200 811f 	bhi.w	8001d26 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d123      	bne.n	8001b38 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f002 fb0f 	bl	8004118 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e173      	b.n	8001dec <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b36:	e145      	b.n	8001dc4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d152      	bne.n	8001be6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b46:	2200      	movs	r2, #0
 8001b48:	4906      	ldr	r1, [pc, #24]	@ (8001b64 <HAL_I2C_Mem_Read+0x24c>)
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f002 f950 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d008      	beq.n	8001b68 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e148      	b.n	8001dec <HAL_I2C_Mem_Read+0x4d4>
 8001b5a:	bf00      	nop
 8001b5c:	00100002 	.word	0x00100002
 8001b60:	ffff0000 	.word	0xffff0000
 8001b64:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001bae:	b662      	cpsie	i
}
 8001bb0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001be4:	e0ee      	b.n	8001dc4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bec:	2200      	movs	r2, #0
 8001bee:	4981      	ldr	r1, [pc, #516]	@ (8001df4 <HAL_I2C_Mem_Read+0x4dc>)
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f002 f8fd 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0f5      	b.n	8001dec <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c10:	b672      	cpsid	i
}
 8001c12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691a      	ldr	r2, [r3, #16]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c46:	4b6c      	ldr	r3, [pc, #432]	@ (8001df8 <HAL_I2C_Mem_Read+0x4e0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	08db      	lsrs	r3, r3, #3
 8001c4c:	4a6b      	ldr	r2, [pc, #428]	@ (8001dfc <HAL_I2C_Mem_Read+0x4e4>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	0a1a      	lsrs	r2, r3, #8
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	00da      	lsls	r2, r3, #3
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d118      	bne.n	8001c9e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2220      	movs	r2, #32
 8001c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f043 0220 	orr.w	r2, r3, #32
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001c8e:	b662      	cpsie	i
}
 8001c90:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0a6      	b.n	8001dec <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d1d9      	bne.n	8001c60 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001cee:	b662      	cpsie	i
}
 8001cf0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d24:	e04e      	b.n	8001dc4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f002 f9f4 	bl	8004118 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e058      	b.n	8001dec <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d124      	bne.n	8001dc4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d107      	bne.n	8001d92 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d90:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f47f ae88 	bne.w	8001ade <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e000      	b.n	8001dec <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001dea:	2302      	movs	r3, #2
  }
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3728      	adds	r7, #40	@ 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	00010004 	.word	0x00010004
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	14f8b589 	.word	0x14f8b589

08001e00 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	4608      	mov	r0, r1
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4603      	mov	r3, r0
 8001e10:	817b      	strh	r3, [r7, #10]
 8001e12:	460b      	mov	r3, r1
 8001e14:	813b      	strh	r3, [r7, #8]
 8001e16:	4613      	mov	r3, r2
 8001e18:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	f040 808a 	bne.w	8001f40 <HAL_I2C_Mem_Write_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e2c:	4b47      	ldr	r3, [pc, #284]	@ (8001f4c <HAL_I2C_Mem_Write_IT+0x14c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	08db      	lsrs	r3, r3, #3
 8001e32:	4a47      	ldr	r2, [pc, #284]	@ (8001f50 <HAL_I2C_Mem_Write_IT+0x150>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	0a1a      	lsrs	r2, r3, #8
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	009a      	lsls	r2, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d112      	bne.n	8001e78 <HAL_I2C_Mem_Write_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	f043 0220 	orr.w	r2, r3, #32
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001e74:	2302      	movs	r3, #2
 8001e76:	e064      	b.n	8001f42 <HAL_I2C_Mem_Write_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d0df      	beq.n	8001e46 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_I2C_Mem_Write_IT+0x94>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e056      	b.n	8001f42 <HAL_I2C_Mem_Write_IT+0x142>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d007      	beq.n	8001eba <HAL_I2C_Mem_Write_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ec8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2221      	movs	r2, #33	@ 0x21
 8001ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2240      	movs	r2, #64	@ 0x40
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a3a      	ldr	r2, [r7, #32]
 8001ee4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001eea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4a16      	ldr	r2, [pc, #88]	@ (8001f54 <HAL_I2C_Mem_Write_IT+0x154>)
 8001efa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001efc:	897a      	ldrh	r2, [r7, #10]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8001f02:	893a      	ldrh	r2, [r7, #8]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001f08:	88fa      	ldrh	r2, [r7, #6]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f22:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001f3a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e000      	b.n	8001f42 <HAL_I2C_Mem_Write_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8001f40:	2302      	movs	r3, #2
  }
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	371c      	adds	r7, #28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	14f8b589 	.word	0x14f8b589
 8001f54:	ffff0000 	.word	0xffff0000

08001f58 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	4608      	mov	r0, r1
 8001f62:	4611      	mov	r1, r2
 8001f64:	461a      	mov	r2, r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	817b      	strh	r3, [r7, #10]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	813b      	strh	r3, [r7, #8]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	f040 8096 	bne.w	80020b0 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f84:	4b4d      	ldr	r3, [pc, #308]	@ (80020bc <HAL_I2C_Mem_Read_IT+0x164>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	08db      	lsrs	r3, r3, #3
 8001f8a:	4a4d      	ldr	r2, [pc, #308]	@ (80020c0 <HAL_I2C_Mem_Read_IT+0x168>)
 8001f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f90:	0a1a      	lsrs	r2, r3, #8
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	009a      	lsls	r2, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d112      	bne.n	8001fd0 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f043 0220 	orr.w	r2, r3, #32
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e070      	b.n	80020b2 <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d0df      	beq.n	8001f9e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_I2C_Mem_Read_IT+0x94>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e062      	b.n	80020b2 <HAL_I2C_Mem_Read_IT+0x15a>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d007      	beq.n	8002012 <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002020:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2222      	movs	r2, #34	@ 0x22
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2240      	movs	r2, #64	@ 0x40
 800202e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a3a      	ldr	r2, [r7, #32]
 800203c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002042:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4a1c      	ldr	r2, [pc, #112]	@ (80020c4 <HAL_I2C_Mem_Read_IT+0x16c>)
 8002052:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002054:	897a      	ldrh	r2, [r7, #10]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800205a:	893a      	ldrh	r2, [r7, #8]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002060:	88fa      	ldrh	r2, [r7, #6]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800207a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800208a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80020aa:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e000      	b.n	80020b2 <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 80020b0:	2302      	movs	r3, #2
  }
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	20000000 	.word	0x20000000
 80020c0:	14f8b589 	.word	0x14f8b589
 80020c4:	ffff0000 	.word	0xffff0000

080020c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	@ 0x28
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	460b      	mov	r3, r1
 80020d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80020d8:	f7fe fdfa 	bl	8000cd0 <HAL_GetTick>
 80020dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	f040 8111 	bne.w	8002312 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2319      	movs	r3, #25
 80020f6:	2201      	movs	r2, #1
 80020f8:	4988      	ldr	r1, [pc, #544]	@ (800231c <HAL_I2C_IsDeviceReady+0x254>)
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f001 fe78 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	e104      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_I2C_IsDeviceReady+0x50>
 8002114:	2302      	movs	r3, #2
 8002116:	e0fd      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x24c>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d007      	beq.n	800213e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800214c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2224      	movs	r2, #36	@ 0x24
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a70      	ldr	r2, [pc, #448]	@ (8002320 <HAL_I2C_IsDeviceReady+0x258>)
 8002160:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002170:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2200      	movs	r2, #0
 800217a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f001 fe36 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00d      	beq.n	80021a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002198:	d103      	bne.n	80021a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021a0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e0b6      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021a6:	897b      	ldrh	r3, [r7, #10]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80021b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80021b6:	f7fe fd8b 	bl	8000cd0 <HAL_GetTick>
 80021ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e0:	bf0c      	ite	eq
 80021e2:	2301      	moveq	r3, #1
 80021e4:	2300      	movne	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80021ea:	e025      	b.n	8002238 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021ec:	f7fe fd70 	bl	8000cd0 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d302      	bcc.n	8002202 <HAL_I2C_IsDeviceReady+0x13a>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	22a0      	movs	r2, #160	@ 0xa0
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b02      	cmp	r3, #2
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800222a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2ba0      	cmp	r3, #160	@ 0xa0
 8002242:	d005      	beq.n	8002250 <HAL_I2C_IsDeviceReady+0x188>
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <HAL_I2C_IsDeviceReady+0x188>
 800224a:	7dbb      	ldrb	r3, [r7, #22]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0cd      	beq.n	80021ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b02      	cmp	r3, #2
 8002264:	d129      	bne.n	80022ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002274:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2319      	movs	r3, #25
 8002292:	2201      	movs	r2, #1
 8002294:	4921      	ldr	r1, [pc, #132]	@ (800231c <HAL_I2C_IsDeviceReady+0x254>)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f001 fdaa 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e036      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e02c      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2319      	movs	r3, #25
 80022da:	2201      	movs	r2, #1
 80022dc:	490f      	ldr	r1, [pc, #60]	@ (800231c <HAL_I2C_IsDeviceReady+0x254>)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f001 fd86 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e012      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	3301      	adds	r3, #1
 80022f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	f4ff af32 	bcc.w	8002162 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002312:	2302      	movs	r3, #2
  }
}
 8002314:	4618      	mov	r0, r3
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	00100002 	.word	0x00100002
 8002320:	ffff0000 	.word	0xffff0000

08002324 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002344:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800234c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b10      	cmp	r3, #16
 8002352:	d003      	beq.n	800235c <HAL_I2C_EV_IRQHandler+0x38>
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	2b40      	cmp	r3, #64	@ 0x40
 8002358:	f040 80b1 	bne.w	80024be <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <HAL_I2C_EV_IRQHandler+0x6e>
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800237c:	d003      	beq.n	8002386 <HAL_I2C_EV_IRQHandler+0x62>
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002384:	d101      	bne.n	800238a <HAL_I2C_EV_IRQHandler+0x66>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_I2C_EV_IRQHandler+0x68>
 800238a:	2300      	movs	r3, #0
 800238c:	2b01      	cmp	r3, #1
 800238e:	f000 8114 	beq.w	80025ba <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00b      	beq.n	80023b4 <HAL_I2C_EV_IRQHandler+0x90>
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f001 ff41 	bl	800422e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fd6b 	bl	8002e88 <I2C_Master_SB>
 80023b2:	e083      	b.n	80024bc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d008      	beq.n	80023d0 <HAL_I2C_EV_IRQHandler+0xac>
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 fde2 	bl	8002f92 <I2C_Master_ADD10>
 80023ce:	e075      	b.n	80024bc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <HAL_I2C_EV_IRQHandler+0xc8>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fdfd 	bl	8002fe4 <I2C_Master_ADDR>
 80023ea:	e067      	b.n	80024bc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d036      	beq.n	8002464 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002400:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002404:	f000 80db 	beq.w	80025be <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00d      	beq.n	800242e <HAL_I2C_EV_IRQHandler+0x10a>
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_I2C_EV_IRQHandler+0x10a>
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d103      	bne.n	800242e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f9cb 	bl	80027c2 <I2C_MasterTransmit_TXE>
 800242c:	e046      	b.n	80024bc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80c2 	beq.w	80025be <HAL_I2C_EV_IRQHandler+0x29a>
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80bc 	beq.w	80025be <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002446:	7bbb      	ldrb	r3, [r7, #14]
 8002448:	2b21      	cmp	r3, #33	@ 0x21
 800244a:	d103      	bne.n	8002454 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fa54 	bl	80028fa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002452:	e0b4      	b.n	80025be <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	2b40      	cmp	r3, #64	@ 0x40
 8002458:	f040 80b1 	bne.w	80025be <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fac2 	bl	80029e6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002462:	e0ac      	b.n	80025be <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800246e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002472:	f000 80a4 	beq.w	80025be <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00d      	beq.n	800249c <HAL_I2C_EV_IRQHandler+0x178>
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_I2C_EV_IRQHandler+0x178>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d103      	bne.n	800249c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fb3e 	bl	8002b16 <I2C_MasterReceive_RXNE>
 800249a:	e00f      	b.n	80024bc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 808b 	beq.w	80025be <HAL_I2C_EV_IRQHandler+0x29a>
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8085 	beq.w	80025be <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fbf6 	bl	8002ca6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ba:	e080      	b.n	80025be <HAL_I2C_EV_IRQHandler+0x29a>
 80024bc:	e07f      	b.n	80025be <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d004      	beq.n	80024d0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	e007      	b.n	80024e0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d011      	beq.n	800250e <HAL_I2C_EV_IRQHandler+0x1ea>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00c      	beq.n	800250e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002504:	69b9      	ldr	r1, [r7, #24]
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 ffc3 	bl	8003492 <I2C_Slave_ADDR>
 800250c:	e05a      	b.n	80025c4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_I2C_EV_IRQHandler+0x206>
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fffe 	bl	8003524 <I2C_Slave_STOPF>
 8002528:	e04c      	b.n	80025c4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800252a:	7bbb      	ldrb	r3, [r7, #14]
 800252c:	2b21      	cmp	r3, #33	@ 0x21
 800252e:	d002      	beq.n	8002536 <HAL_I2C_EV_IRQHandler+0x212>
 8002530:	7bbb      	ldrb	r3, [r7, #14]
 8002532:	2b29      	cmp	r3, #41	@ 0x29
 8002534:	d120      	bne.n	8002578 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00d      	beq.n	800255c <HAL_I2C_EV_IRQHandler+0x238>
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002546:	2b00      	cmp	r3, #0
 8002548:	d008      	beq.n	800255c <HAL_I2C_EV_IRQHandler+0x238>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d103      	bne.n	800255c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fee0 	bl	800331a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800255a:	e032      	b.n	80025c2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d02d      	beq.n	80025c2 <HAL_I2C_EV_IRQHandler+0x29e>
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800256c:	2b00      	cmp	r3, #0
 800256e:	d028      	beq.n	80025c2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 ff0f 	bl	8003394 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002576:	e024      	b.n	80025c2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00d      	beq.n	800259e <HAL_I2C_EV_IRQHandler+0x27a>
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_I2C_EV_IRQHandler+0x27a>
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d103      	bne.n	800259e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 ff1c 	bl	80033d4 <I2C_SlaveReceive_RXNE>
 800259c:	e012      	b.n	80025c4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00d      	beq.n	80025c4 <HAL_I2C_EV_IRQHandler+0x2a0>
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 ff4c 	bl	8003450 <I2C_SlaveReceive_BTF>
 80025b8:	e004      	b.n	80025c4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80025ba:	bf00      	nop
 80025bc:	e002      	b.n	80025c4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025be:	bf00      	nop
 80025c0:	e000      	b.n	80025c4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025c2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b08a      	sub	sp, #40	@ 0x28
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025ec:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d015      	beq.n	8002624 <HAL_I2C_ER_IRQHandler+0x5a>
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d010      	beq.n	8002624 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002612:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002622:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00d      	beq.n	800264a <HAL_I2C_ER_IRQHandler+0x80>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	f043 0302 	orr.w	r3, r3, #2
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002648:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002650:	2b00      	cmp	r3, #0
 8002652:	d03e      	beq.n	80026d2 <HAL_I2C_ER_IRQHandler+0x108>
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d039      	beq.n	80026d2 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 800265e:	7efb      	ldrb	r3, [r7, #27]
 8002660:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002670:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002678:	7ebb      	ldrb	r3, [r7, #26]
 800267a:	2b20      	cmp	r3, #32
 800267c:	d112      	bne.n	80026a4 <HAL_I2C_ER_IRQHandler+0xda>
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10f      	bne.n	80026a4 <HAL_I2C_ER_IRQHandler+0xda>
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	2b21      	cmp	r3, #33	@ 0x21
 8002688:	d008      	beq.n	800269c <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	2b29      	cmp	r3, #41	@ 0x29
 800268e:	d005      	beq.n	800269c <HAL_I2C_ER_IRQHandler+0xd2>
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	2b28      	cmp	r3, #40	@ 0x28
 8002694:	d106      	bne.n	80026a4 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b21      	cmp	r3, #33	@ 0x21
 800269a:	d103      	bne.n	80026a4 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f001 f871 	bl	8003784 <I2C_Slave_AF>
 80026a2:	e016      	b.n	80026d2 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026ac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80026b6:	7efb      	ldrb	r3, [r7, #27]
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d002      	beq.n	80026c2 <HAL_I2C_ER_IRQHandler+0xf8>
 80026bc:	7efb      	ldrb	r3, [r7, #27]
 80026be:	2b40      	cmp	r3, #64	@ 0x40
 80026c0:	d107      	bne.n	80026d2 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026d0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00d      	beq.n	80026f8 <HAL_I2C_ER_IRQHandler+0x12e>
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e8:	f043 0308 	orr.w	r3, r3, #8
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80026f6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f001 f8ae 	bl	800386c <I2C_ITError>
  }
}
 8002710:	bf00      	nop
 8002712:	3728      	adds	r7, #40	@ 0x28
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
 800276c:	4613      	mov	r3, r2
 800276e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027d8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027de:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d150      	bne.n	800288a <I2C_MasterTransmit_TXE+0xc8>
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b21      	cmp	r3, #33	@ 0x21
 80027ec:	d14d      	bne.n	800288a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d01d      	beq.n	8002830 <I2C_MasterTransmit_TXE+0x6e>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	d01a      	beq.n	8002830 <I2C_MasterTransmit_TXE+0x6e>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002800:	d016      	beq.n	8002830 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002810:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2211      	movs	r2, #17
 8002816:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff75 	bl	8002718 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800282e:	e060      	b.n	80028f2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800283e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800284e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b40      	cmp	r3, #64	@ 0x40
 8002868:	d107      	bne.n	800287a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ff8a 	bl	800278c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002878:	e03b      	b.n	80028f2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ff48 	bl	8002718 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002888:	e033      	b.n	80028f2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	2b21      	cmp	r3, #33	@ 0x21
 800288e:	d005      	beq.n	800289c <I2C_MasterTransmit_TXE+0xda>
 8002890:	7bbb      	ldrb	r3, [r7, #14]
 8002892:	2b40      	cmp	r3, #64	@ 0x40
 8002894:	d12d      	bne.n	80028f2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	2b22      	cmp	r3, #34	@ 0x22
 800289a:	d12a      	bne.n	80028f2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d108      	bne.n	80028b8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80028b6:	e01c      	b.n	80028f2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b40      	cmp	r3, #64	@ 0x40
 80028c2:	d103      	bne.n	80028cc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f88e 	bl	80029e6 <I2C_MemoryTransmit_TXE_BTF>
}
 80028ca:	e012      	b.n	80028f2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	781a      	ldrb	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80028f0:	e7ff      	b.n	80028f2 <I2C_MasterTransmit_TXE+0x130>
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002906:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b21      	cmp	r3, #33	@ 0x21
 8002912:	d164      	bne.n	80029de <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d012      	beq.n	8002944 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	781a      	ldrb	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002942:	e04c      	b.n	80029de <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d01d      	beq.n	8002986 <I2C_MasterTransmit_BTF+0x8c>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b20      	cmp	r3, #32
 800294e:	d01a      	beq.n	8002986 <I2C_MasterTransmit_BTF+0x8c>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002956:	d016      	beq.n	8002986 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002966:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2211      	movs	r2, #17
 800296c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff feca 	bl	8002718 <HAL_I2C_MasterTxCpltCallback>
}
 8002984:	e02b      	b.n	80029de <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002994:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029a4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b40      	cmp	r3, #64	@ 0x40
 80029be:	d107      	bne.n	80029d0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff fedf 	bl	800278c <HAL_I2C_MemTxCpltCallback>
}
 80029ce:	e006      	b.n	80029de <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fe9d 	bl	8002718 <HAL_I2C_MasterTxCpltCallback>
}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d11d      	bne.n	8002a3a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d10b      	bne.n	8002a1e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a16:	1c9a      	adds	r2, r3, #2
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002a1c:	e077      	b.n	8002b0e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	121b      	asrs	r3, r3, #8
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002a38:	e069      	b.n	8002b0e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d10b      	bne.n	8002a5a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002a58:	e059      	b.n	8002b0e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d152      	bne.n	8002b08 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	2b22      	cmp	r3, #34	@ 0x22
 8002a66:	d10d      	bne.n	8002a84 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a76:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002a82:	e044      	b.n	8002b0e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d015      	beq.n	8002aba <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b21      	cmp	r3, #33	@ 0x21
 8002a92:	d112      	bne.n	8002aba <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002ab8:	e029      	b.n	8002b0e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d124      	bne.n	8002b0e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	2b21      	cmp	r3, #33	@ 0x21
 8002ac8:	d121      	bne.n	8002b0e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ad8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fe43 	bl	800278c <HAL_I2C_MemTxCpltCallback>
}
 8002b06:	e002      	b.n	8002b0e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7fe fef1 	bl	80018f0 <I2C_Flush_DR>
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b22      	cmp	r3, #34	@ 0x22
 8002b28:	f040 80b9 	bne.w	8002c9e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d921      	bls.n	8002b84 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	f040 8096 	bne.w	8002c9e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b80:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002b82:	e08c      	b.n	8002c9e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d07f      	beq.n	8002c8c <I2C_MasterReceive_RXNE+0x176>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d002      	beq.n	8002b98 <I2C_MasterReceive_RXNE+0x82>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d179      	bne.n	8002c8c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f001 fa8b 	bl	80040b4 <I2C_WaitOnSTOPRequestThroughIT>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d14c      	bne.n	8002c3e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bb2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002bc2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b40      	cmp	r3, #64	@ 0x40
 8002bfc:	d10a      	bne.n	8002c14 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7fd fae3 	bl	80001d8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c12:	e044      	b.n	8002c9e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d002      	beq.n	8002c28 <I2C_MasterReceive_RXNE+0x112>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d103      	bne.n	8002c30 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c2e:	e002      	b.n	8002c36 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2212      	movs	r2, #18
 8002c34:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff fd77 	bl	800272a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c3c:	e02f      	b.n	8002c9e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c4c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff fd8a 	bl	800279e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c8a:	e008      	b.n	8002c9e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c9a:	605a      	str	r2, [r3, #4]
}
 8002c9c:	e7ff      	b.n	8002c9e <I2C_MasterReceive_RXNE+0x188>
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d11b      	bne.n	8002cf6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ccc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002cf4:	e0c4      	b.n	8002e80 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d129      	bne.n	8002d54 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d0e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d00a      	beq.n	8002d2c <I2C_MasterReceive_BTF+0x86>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d007      	beq.n	8002d2c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002d52:	e095      	b.n	8002e80 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d17d      	bne.n	8002e5a <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d002      	beq.n	8002d6a <I2C_MasterReceive_BTF+0xc4>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b10      	cmp	r3, #16
 8002d68:	d108      	bne.n	8002d7c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e016      	b.n	8002daa <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d002      	beq.n	8002d88 <I2C_MasterReceive_BTF+0xe2>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d108      	bne.n	8002d9a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	e007      	b.n	8002daa <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002e04:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b40      	cmp	r3, #64	@ 0x40
 8002e18:	d10a      	bne.n	8002e30 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7fd f9d5 	bl	80001d8 <HAL_I2C_MemRxCpltCallback>
}
 8002e2e:	e027      	b.n	8002e80 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d002      	beq.n	8002e44 <I2C_MasterReceive_BTF+0x19e>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d103      	bne.n	8002e4c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e4a:	e002      	b.n	8002e52 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2212      	movs	r2, #18
 8002e50:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff fc69 	bl	800272a <HAL_I2C_MasterRxCpltCallback>
}
 8002e58:	e012      	b.n	8002e80 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b40      	cmp	r3, #64	@ 0x40
 8002e9a:	d117      	bne.n	8002ecc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002eb4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002eb6:	e067      	b.n	8002f88 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	611a      	str	r2, [r3, #16]
}
 8002eca:	e05d      	b.n	8002f88 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ed4:	d133      	bne.n	8002f3e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b21      	cmp	r3, #33	@ 0x21
 8002ee0:	d109      	bne.n	8002ef6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ef2:	611a      	str	r2, [r3, #16]
 8002ef4:	e008      	b.n	8002f08 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d004      	beq.n	8002f1a <I2C_Master_SB+0x92>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d108      	bne.n	8002f2c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d032      	beq.n	8002f88 <I2C_Master_SB+0x100>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d02d      	beq.n	8002f88 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f3a:	605a      	str	r2, [r3, #4]
}
 8002f3c:	e024      	b.n	8002f88 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10e      	bne.n	8002f64 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	11db      	asrs	r3, r3, #7
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f003 0306 	and.w	r3, r3, #6
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f063 030f 	orn	r3, r3, #15
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	611a      	str	r2, [r3, #16]
}
 8002f62:	e011      	b.n	8002f88 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10d      	bne.n	8002f88 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	11db      	asrs	r3, r3, #7
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f003 0306 	and.w	r3, r3, #6
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	f063 030e 	orn	r3, r3, #14
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	611a      	str	r2, [r3, #16]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr

08002f92 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d004      	beq.n	8002fb8 <I2C_Master_ADD10+0x26>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d108      	bne.n	8002fca <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00c      	beq.n	8002fda <I2C_Master_ADD10+0x48>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fd8:	605a      	str	r2, [r3, #4]
  }
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b091      	sub	sp, #68	@ 0x44
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ff2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003000:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b22      	cmp	r3, #34	@ 0x22
 800300c:	f040 8174 	bne.w	80032f8 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10f      	bne.n	8003038 <I2C_Master_ADDR+0x54>
 8003018:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800301c:	2b40      	cmp	r3, #64	@ 0x40
 800301e:	d10b      	bne.n	8003038 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003020:	2300      	movs	r3, #0
 8003022:	633b      	str	r3, [r7, #48]	@ 0x30
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	633b      	str	r3, [r7, #48]	@ 0x30
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	633b      	str	r3, [r7, #48]	@ 0x30
 8003034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003036:	e16b      	b.n	8003310 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11d      	bne.n	800307c <I2C_Master_ADDR+0x98>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003048:	d118      	bne.n	800307c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304a:	2300      	movs	r3, #0
 800304c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800305e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800306e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	651a      	str	r2, [r3, #80]	@ 0x50
 800307a:	e149      	b.n	8003310 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d113      	bne.n	80030ae <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003086:	2300      	movs	r3, #0
 8003088:	62bb      	str	r3, [r7, #40]	@ 0x28
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800309a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e120      	b.n	80032f0 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	f040 808a 	bne.w	80031ce <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80030ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030c0:	d137      	bne.n	8003132 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030d0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030e0:	d113      	bne.n	800310a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	627b      	str	r3, [r7, #36]	@ 0x24
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	e0f2      	b.n	80032f0 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310a:	2300      	movs	r3, #0
 800310c:	623b      	str	r3, [r7, #32]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	623b      	str	r3, [r7, #32]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	623b      	str	r3, [r7, #32]
 800311e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	e0de      	b.n	80032f0 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003134:	2b08      	cmp	r3, #8
 8003136:	d02e      	beq.n	8003196 <I2C_Master_ADDR+0x1b2>
 8003138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800313a:	2b20      	cmp	r3, #32
 800313c:	d02b      	beq.n	8003196 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800313e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003140:	2b12      	cmp	r3, #18
 8003142:	d102      	bne.n	800314a <I2C_Master_ADDR+0x166>
 8003144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003146:	2b01      	cmp	r3, #1
 8003148:	d125      	bne.n	8003196 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800314a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800314c:	2b04      	cmp	r3, #4
 800314e:	d00e      	beq.n	800316e <I2C_Master_ADDR+0x18a>
 8003150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003152:	2b02      	cmp	r3, #2
 8003154:	d00b      	beq.n	800316e <I2C_Master_ADDR+0x18a>
 8003156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003158:	2b10      	cmp	r3, #16
 800315a:	d008      	beq.n	800316e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	e007      	b.n	800317e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800317c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	e0ac      	b.n	80032f0 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a6:	2300      	movs	r3, #0
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e090      	b.n	80032f0 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d158      	bne.n	800328a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80031d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d021      	beq.n	8003222 <I2C_Master_ADDR+0x23e>
 80031de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d01e      	beq.n	8003222 <I2C_Master_ADDR+0x23e>
 80031e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d01b      	beq.n	8003222 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031f8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	e012      	b.n	8003248 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003230:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003252:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003256:	d14b      	bne.n	80032f0 <I2C_Master_ADDR+0x30c>
 8003258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800325e:	d00b      	beq.n	8003278 <I2C_Master_ADDR+0x294>
 8003260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003262:	2b01      	cmp	r3, #1
 8003264:	d008      	beq.n	8003278 <I2C_Master_ADDR+0x294>
 8003266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003268:	2b08      	cmp	r3, #8
 800326a:	d005      	beq.n	8003278 <I2C_Master_ADDR+0x294>
 800326c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326e:	2b10      	cmp	r3, #16
 8003270:	d002      	beq.n	8003278 <I2C_Master_ADDR+0x294>
 8003272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003274:	2b20      	cmp	r3, #32
 8003276:	d13b      	bne.n	80032f0 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003286:	605a      	str	r2, [r3, #4]
 8003288:	e032      	b.n	80032f0 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003298:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032a8:	d117      	bne.n	80032da <I2C_Master_ADDR+0x2f6>
 80032aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032b0:	d00b      	beq.n	80032ca <I2C_Master_ADDR+0x2e6>
 80032b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d008      	beq.n	80032ca <I2C_Master_ADDR+0x2e6>
 80032b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d005      	beq.n	80032ca <I2C_Master_ADDR+0x2e6>
 80032be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c0:	2b10      	cmp	r3, #16
 80032c2:	d002      	beq.n	80032ca <I2C_Master_ADDR+0x2e6>
 80032c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d107      	bne.n	80032da <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80032f6:	e00b      	b.n	8003310 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f8:	2300      	movs	r3, #0
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
}
 800330e:	e7ff      	b.n	8003310 <I2C_Master_ADDR+0x32c>
 8003310:	bf00      	nop
 8003312:	3744      	adds	r7, #68	@ 0x44
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003328:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d02b      	beq.n	800338c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	781a      	ldrb	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d114      	bne.n	800338c <I2C_SlaveTransmit_TXE+0x72>
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	2b29      	cmp	r3, #41	@ 0x29
 8003366:	d111      	bne.n	800338c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003376:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2221      	movs	r2, #33	@ 0x21
 800337c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2228      	movs	r2, #40	@ 0x28
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff f9d8 	bl	800273c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d011      	beq.n	80033ca <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	781a      	ldrb	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d02c      	beq.n	8003448 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d114      	bne.n	8003448 <I2C_SlaveReceive_RXNE+0x74>
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	2b2a      	cmp	r3, #42	@ 0x2a
 8003422:	d111      	bne.n	8003448 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003432:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2222      	movs	r2, #34	@ 0x22
 8003438:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2228      	movs	r2, #40	@ 0x28
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff f983 	bl	800274e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003448:	bf00      	nop
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d012      	beq.n	8003488 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr

08003492 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800349c:	2300      	movs	r3, #0
 800349e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80034ac:	2b28      	cmp	r3, #40	@ 0x28
 80034ae:	d125      	bne.n	80034fc <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034be:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80034ca:	2301      	movs	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d103      	bne.n	80034e0 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	81bb      	strh	r3, [r7, #12]
 80034de:	e002      	b.n	80034e6 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80034ee:	89ba      	ldrh	r2, [r7, #12]
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	4619      	mov	r1, r3
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff f933 	bl	8002760 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80034fa:	e00e      	b.n	800351a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fc:	2300      	movs	r3, #0
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003532:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003542:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003544:	2300      	movs	r3, #0
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003570:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800357c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003580:	d172      	bne.n	8003668 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	2b22      	cmp	r3, #34	@ 0x22
 8003586:	d002      	beq.n	800358e <I2C_Slave_STOPF+0x6a>
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b2a      	cmp	r3, #42	@ 0x2a
 800358c:	d135      	bne.n	80035fa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b29a      	uxth	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d005      	beq.n	80035b2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	f043 0204 	orr.w	r2, r3, #4
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd fea4 	bl	8001314 <HAL_DMA_GetState>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d049      	beq.n	8003666 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d6:	4a69      	ldr	r2, [pc, #420]	@ (800377c <I2C_Slave_STOPF+0x258>)
 80035d8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fd fd1a 	bl	8001018 <HAL_DMA_Abort_IT>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d03d      	beq.n	8003666 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035f4:	4610      	mov	r0, r2
 80035f6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035f8:	e035      	b.n	8003666 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	b29a      	uxth	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	f043 0204 	orr.w	r2, r3, #4
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800362c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003632:	4618      	mov	r0, r3
 8003634:	f7fd fe6e 	bl	8001314 <HAL_DMA_GetState>
 8003638:	4603      	mov	r3, r0
 800363a:	2b01      	cmp	r3, #1
 800363c:	d014      	beq.n	8003668 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003642:	4a4e      	ldr	r2, [pc, #312]	@ (800377c <I2C_Slave_STOPF+0x258>)
 8003644:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fce4 	bl	8001018 <HAL_DMA_Abort_IT>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003660:	4610      	mov	r0, r2
 8003662:	4798      	blx	r3
 8003664:	e000      	b.n	8003668 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003666:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d03e      	beq.n	80036f0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b04      	cmp	r3, #4
 800367e:	d112      	bne.n	80036a6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b0:	2b40      	cmp	r3, #64	@ 0x40
 80036b2:	d112      	bne.n	80036da <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f8b7 	bl	800386c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80036fe:	e039      	b.n	8003774 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	2b2a      	cmp	r3, #42	@ 0x2a
 8003704:	d109      	bne.n	800371a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2228      	movs	r2, #40	@ 0x28
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff f81a 	bl	800274e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b28      	cmp	r3, #40	@ 0x28
 8003724:	d111      	bne.n	800374a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a15      	ldr	r2, [pc, #84]	@ (8003780 <I2C_Slave_STOPF+0x25c>)
 800372a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff f819 	bl	800277a <HAL_I2C_ListenCpltCallback>
}
 8003748:	e014      	b.n	8003774 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	2b22      	cmp	r3, #34	@ 0x22
 8003750:	d002      	beq.n	8003758 <I2C_Slave_STOPF+0x234>
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b22      	cmp	r3, #34	@ 0x22
 8003756:	d10d      	bne.n	8003774 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fe ffed 	bl	800274e <HAL_I2C_SlaveRxCpltCallback>
}
 8003774:	bf00      	nop
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	08003ca1 	.word	0x08003ca1
 8003780:	ffff0000 	.word	0xffff0000

08003784 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003792:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b08      	cmp	r3, #8
 800379e:	d002      	beq.n	80037a6 <I2C_Slave_AF+0x22>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d129      	bne.n	80037fa <I2C_Slave_AF+0x76>
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b28      	cmp	r3, #40	@ 0x28
 80037aa:	d126      	bne.n	80037fa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a2e      	ldr	r2, [pc, #184]	@ (8003868 <I2C_Slave_AF+0xe4>)
 80037b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037c0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037ca:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037da:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fe ffc1 	bl	800277a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80037f8:	e031      	b.n	800385e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b21      	cmp	r3, #33	@ 0x21
 80037fe:	d129      	bne.n	8003854 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a19      	ldr	r2, [pc, #100]	@ (8003868 <I2C_Slave_AF+0xe4>)
 8003804:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2221      	movs	r2, #33	@ 0x21
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800382a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003834:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003844:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fe f852 	bl	80018f0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7fe ff75 	bl	800273c <HAL_I2C_SlaveTxCpltCallback>
}
 8003852:	e004      	b.n	800385e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800385c:	615a      	str	r2, [r3, #20]
}
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	ffff0000 	.word	0xffff0000

0800386c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800387a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003882:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003884:	7bbb      	ldrb	r3, [r7, #14]
 8003886:	2b10      	cmp	r3, #16
 8003888:	d002      	beq.n	8003890 <I2C_ITError+0x24>
 800388a:	7bbb      	ldrb	r3, [r7, #14]
 800388c:	2b40      	cmp	r3, #64	@ 0x40
 800388e:	d10a      	bne.n	80038a6 <I2C_ITError+0x3a>
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b22      	cmp	r3, #34	@ 0x22
 8003894:	d107      	bne.n	80038a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038ac:	2b28      	cmp	r3, #40	@ 0x28
 80038ae:	d107      	bne.n	80038c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2228      	movs	r2, #40	@ 0x28
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80038be:	e015      	b.n	80038ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038ce:	d00a      	beq.n	80038e6 <I2C_ITError+0x7a>
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b60      	cmp	r3, #96	@ 0x60
 80038d4:	d007      	beq.n	80038e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038fa:	d162      	bne.n	80039c2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800390a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003910:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d020      	beq.n	800395c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ac8 <I2C_ITError+0x25c>)
 8003920:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003926:	4618      	mov	r0, r3
 8003928:	f7fd fb76 	bl	8001018 <HAL_DMA_Abort_IT>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8089 	beq.w	8003a46 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003956:	4610      	mov	r0, r2
 8003958:	4798      	blx	r3
 800395a:	e074      	b.n	8003a46 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003960:	4a59      	ldr	r2, [pc, #356]	@ (8003ac8 <I2C_ITError+0x25c>)
 8003962:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003968:	4618      	mov	r0, r3
 800396a:	f7fd fb55 	bl	8001018 <HAL_DMA_Abort_IT>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d068      	beq.n	8003a46 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397e:	2b40      	cmp	r3, #64	@ 0x40
 8003980:	d10b      	bne.n	800399a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039bc:	4610      	mov	r0, r2
 80039be:	4798      	blx	r3
 80039c0:	e041      	b.n	8003a46 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b60      	cmp	r3, #96	@ 0x60
 80039cc:	d125      	bne.n	8003a1a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e6:	2b40      	cmp	r3, #64	@ 0x40
 80039e8:	d10b      	bne.n	8003a02 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fe fecc 	bl	80027b0 <HAL_I2C_AbortCpltCallback>
 8003a18:	e015      	b.n	8003a46 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a24:	2b40      	cmp	r3, #64	@ 0x40
 8003a26:	d10b      	bne.n	8003a40 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7fe feac 	bl	800279e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10e      	bne.n	8003a74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d109      	bne.n	8003a74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d104      	bne.n	8003a74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a82:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a8a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d113      	bne.n	8003ac0 <I2C_ITError+0x254>
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b28      	cmp	r3, #40	@ 0x28
 8003a9c:	d110      	bne.n	8003ac0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8003acc <I2C_ITError+0x260>)
 8003aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fe fe5d 	bl	800277a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	08003ca1 	.word	0x08003ca1
 8003acc:	ffff0000 	.word	0xffff0000

08003ad0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4611      	mov	r1, r2
 8003adc:	461a      	mov	r2, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	817b      	strh	r3, [r7, #10]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	813b      	strh	r3, [r7, #8]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003af8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f96a 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00d      	beq.n	8003b3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b30:	d103      	bne.n	8003b3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e0aa      	b.n	8003c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b3e:	897b      	ldrh	r3, [r7, #10]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	6a3a      	ldr	r2, [r7, #32]
 8003b52:	4952      	ldr	r1, [pc, #328]	@ (8003c9c <I2C_RequestMemoryRead+0x1cc>)
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f9c5 	bl	8003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e097      	b.n	8003c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b7c:	6a39      	ldr	r1, [r7, #32]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fa50 	bl	8004024 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d107      	bne.n	8003ba2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e076      	b.n	8003c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d105      	bne.n	8003bb8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bac:	893b      	ldrh	r3, [r7, #8]
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	611a      	str	r2, [r3, #16]
 8003bb6:	e021      	b.n	8003bfc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bb8:	893b      	ldrh	r3, [r7, #8]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc8:	6a39      	ldr	r1, [r7, #32]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fa2a 	bl	8004024 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00d      	beq.n	8003bf2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d107      	bne.n	8003bee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e050      	b.n	8003c94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bf2:	893b      	ldrh	r3, [r7, #8]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bfe:	6a39      	ldr	r1, [r7, #32]
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 fa0f 	bl	8004024 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00d      	beq.n	8003c28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d107      	bne.n	8003c24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e035      	b.n	8003c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f8d3 	bl	8003df0 <I2C_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00d      	beq.n	8003c6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c5e:	d103      	bne.n	8003c68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e013      	b.n	8003c94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c6c:	897b      	ldrh	r3, [r7, #10]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7e:	6a3a      	ldr	r2, [r7, #32]
 8003c80:	4906      	ldr	r1, [pc, #24]	@ (8003c9c <I2C_RequestMemoryRead+0x1cc>)
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f92e 	bl	8003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	00010002 	.word	0x00010002

08003ca0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cba:	4b4b      	ldr	r3, [pc, #300]	@ (8003de8 <I2C_DMAAbort+0x148>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	08db      	lsrs	r3, r3, #3
 8003cc0:	4a4a      	ldr	r2, [pc, #296]	@ (8003dec <I2C_DMAAbort+0x14c>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	0a1a      	lsrs	r2, r3, #8
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	00da      	lsls	r2, r3, #3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	f043 0220 	orr.w	r2, r3, #32
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003ce6:	e00a      	b.n	8003cfe <I2C_DMAAbort+0x5e>
    }
    count--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cfc:	d0ea      	beq.n	8003cd4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d2c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d40:	2200      	movs	r2, #0
 8003d42:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d50:	2200      	movs	r2, #0
 8003d52:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b60      	cmp	r3, #96	@ 0x60
 8003d6e:	d10e      	bne.n	8003d8e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2200      	movs	r2, #0
 8003d84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d86:	6978      	ldr	r0, [r7, #20]
 8003d88:	f7fe fd12 	bl	80027b0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d8c:	e027      	b.n	8003dde <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d8e:	7cfb      	ldrb	r3, [r7, #19]
 8003d90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d94:	2b28      	cmp	r3, #40	@ 0x28
 8003d96:	d117      	bne.n	8003dc8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003db6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2228      	movs	r2, #40	@ 0x28
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003dc6:	e007      	b.n	8003dd8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003dd8:	6978      	ldr	r0, [r7, #20]
 8003dda:	f7fe fce0 	bl	800279e <HAL_I2C_ErrorCallback>
}
 8003dde:	bf00      	nop
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000000 	.word	0x20000000
 8003dec:	14f8b589 	.word	0x14f8b589

08003df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e00:	e048      	b.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d044      	beq.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e0a:	f7fc ff61 	bl	8000cd0 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d302      	bcc.n	8003e20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d139      	bne.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	0c1b      	lsrs	r3, r3, #16
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d10d      	bne.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	43da      	mvns	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4013      	ands	r3, r2
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	e00c      	b.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	43da      	mvns	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4013      	ands	r3, r2
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d116      	bne.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	f043 0220 	orr.w	r2, r3, #32
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e023      	b.n	8003edc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	0c1b      	lsrs	r3, r3, #16
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d10d      	bne.n	8003eba <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	43da      	mvns	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	e00c      	b.n	8003ed4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	43da      	mvns	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d093      	beq.n	8003e02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef2:	e071      	b.n	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f02:	d123      	bne.n	8003f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f38:	f043 0204 	orr.w	r2, r3, #4
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e067      	b.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f52:	d041      	beq.n	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f54:	f7fc febc 	bl	8000cd0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d302      	bcc.n	8003f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d136      	bne.n	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d10c      	bne.n	8003f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	43da      	mvns	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	e00b      	b.n	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	43da      	mvns	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf14      	ite	ne
 8003fa0:	2301      	movne	r3, #1
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d016      	beq.n	8003fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e021      	b.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	0c1b      	lsrs	r3, r3, #16
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d10c      	bne.n	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	43da      	mvns	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	4013      	ands	r3, r2
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bf14      	ite	ne
 8003ff4:	2301      	movne	r3, #1
 8003ff6:	2300      	moveq	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e00b      	b.n	8004014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	43da      	mvns	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4013      	ands	r3, r2
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	bf14      	ite	ne
 800400e:	2301      	movne	r3, #1
 8004010:	2300      	moveq	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	f47f af6d 	bne.w	8003ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004030:	e034      	b.n	800409c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f8cd 	bl	80041d2 <I2C_IsAcknowledgeFailed>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e034      	b.n	80040ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004048:	d028      	beq.n	800409c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fc fe41 	bl	8000cd0 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11d      	bne.n	800409c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406a:	2b80      	cmp	r3, #128	@ 0x80
 800406c:	d016      	beq.n	800409c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	f043 0220 	orr.w	r2, r3, #32
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e007      	b.n	80040ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a6:	2b80      	cmp	r3, #128	@ 0x80
 80040a8:	d1c3      	bne.n	8004032 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80040c0:	4b13      	ldr	r3, [pc, #76]	@ (8004110 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	08db      	lsrs	r3, r3, #3
 80040c6:	4a13      	ldr	r2, [pc, #76]	@ (8004114 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	0a1a      	lsrs	r2, r3, #8
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b01      	subs	r3, #1
 80040da:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d107      	bne.n	80040f2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	f043 0220 	orr.w	r2, r3, #32
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e008      	b.n	8004104 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004100:	d0e9      	beq.n	80040d6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000000 	.word	0x20000000
 8004114:	14f8b589 	.word	0x14f8b589

08004118 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004124:	e049      	b.n	80041ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b10      	cmp	r3, #16
 8004132:	d119      	bne.n	8004168 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0210 	mvn.w	r2, #16
 800413c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e030      	b.n	80041ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004168:	f7fc fdb2 	bl	8000cd0 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	429a      	cmp	r2, r3
 8004176:	d302      	bcc.n	800417e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d11d      	bne.n	80041ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004188:	2b40      	cmp	r3, #64	@ 0x40
 800418a:	d016      	beq.n	80041ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	f043 0220 	orr.w	r2, r3, #32
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e007      	b.n	80041ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c4:	2b40      	cmp	r3, #64	@ 0x40
 80041c6:	d1ae      	bne.n	8004126 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e8:	d11b      	bne.n	8004222 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	f043 0204 	orr.w	r2, r3, #4
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr

0800422e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800423e:	d103      	bne.n	8004248 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004246:	e007      	b.n	8004258 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004250:	d102      	bne.n	8004258 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2208      	movs	r2, #8
 8004256:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr
	...

08004264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e272      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 8087 	beq.w	8004392 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004284:	4b92      	ldr	r3, [pc, #584]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	2b04      	cmp	r3, #4
 800428e:	d00c      	beq.n	80042aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004290:	4b8f      	ldr	r3, [pc, #572]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b08      	cmp	r3, #8
 800429a:	d112      	bne.n	80042c2 <HAL_RCC_OscConfig+0x5e>
 800429c:	4b8c      	ldr	r3, [pc, #560]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a8:	d10b      	bne.n	80042c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042aa:	4b89      	ldr	r3, [pc, #548]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d06c      	beq.n	8004390 <HAL_RCC_OscConfig+0x12c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d168      	bne.n	8004390 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e24c      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ca:	d106      	bne.n	80042da <HAL_RCC_OscConfig+0x76>
 80042cc:	4b80      	ldr	r3, [pc, #512]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a7f      	ldr	r2, [pc, #508]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	e02e      	b.n	8004338 <HAL_RCC_OscConfig+0xd4>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10c      	bne.n	80042fc <HAL_RCC_OscConfig+0x98>
 80042e2:	4b7b      	ldr	r3, [pc, #492]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a7a      	ldr	r2, [pc, #488]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	4b78      	ldr	r3, [pc, #480]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a77      	ldr	r2, [pc, #476]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e01d      	b.n	8004338 <HAL_RCC_OscConfig+0xd4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0xbc>
 8004306:	4b72      	ldr	r3, [pc, #456]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a71      	ldr	r2, [pc, #452]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800430c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b6f      	ldr	r3, [pc, #444]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a6e      	ldr	r2, [pc, #440]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0xd4>
 8004320:	4b6b      	ldr	r3, [pc, #428]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6a      	ldr	r2, [pc, #424]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b68      	ldr	r3, [pc, #416]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a67      	ldr	r2, [pc, #412]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004336:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fc fcc6 	bl	8000cd0 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004348:	f7fc fcc2 	bl	8000cd0 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	@ 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e200      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	4b5d      	ldr	r3, [pc, #372]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0xe4>
 8004366:	e014      	b.n	8004392 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fc fcb2 	bl	8000cd0 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004370:	f7fc fcae 	bl	8000cd0 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	@ 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1ec      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	4b53      	ldr	r3, [pc, #332]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x10c>
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d063      	beq.n	8004466 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800439e:	4b4c      	ldr	r3, [pc, #304]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043aa:	4b49      	ldr	r3, [pc, #292]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d11c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x18c>
 80043b6:	4b46      	ldr	r3, [pc, #280]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d116      	bne.n	80043f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	4b43      	ldr	r3, [pc, #268]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_RCC_OscConfig+0x176>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e1c0      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	4b3d      	ldr	r3, [pc, #244]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4939      	ldr	r1, [pc, #228]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	e03a      	b.n	8004466 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d020      	beq.n	800443a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f8:	4b36      	ldr	r3, [pc, #216]	@ (80044d4 <HAL_RCC_OscConfig+0x270>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fe:	f7fc fc67 	bl	8000cd0 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004406:	f7fc fc63 	bl	8000cd0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e1a1      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004418:	4b2d      	ldr	r3, [pc, #180]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b2a      	ldr	r3, [pc, #168]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4927      	ldr	r1, [pc, #156]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]
 8004438:	e015      	b.n	8004466 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443a:	4b26      	ldr	r3, [pc, #152]	@ (80044d4 <HAL_RCC_OscConfig+0x270>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fc fc46 	bl	8000cd0 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004448:	f7fc fc42 	bl	8000cd0 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e180      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	4b1d      	ldr	r3, [pc, #116]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d03a      	beq.n	80044e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d019      	beq.n	80044ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447a:	4b17      	ldr	r3, [pc, #92]	@ (80044d8 <HAL_RCC_OscConfig+0x274>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004480:	f7fc fc26 	bl	8000cd0 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004488:	f7fc fc22 	bl	8000cd0 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e160      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449a:	4b0d      	ldr	r3, [pc, #52]	@ (80044d0 <HAL_RCC_OscConfig+0x26c>)
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044a6:	2001      	movs	r0, #1
 80044a8:	f000 fafe 	bl	8004aa8 <RCC_Delay>
 80044ac:	e01c      	b.n	80044e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ae:	4b0a      	ldr	r3, [pc, #40]	@ (80044d8 <HAL_RCC_OscConfig+0x274>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b4:	f7fc fc0c 	bl	8000cd0 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ba:	e00f      	b.n	80044dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fc fc08 	bl	8000cd0 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d908      	bls.n	80044dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e146      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
 80044ce:	bf00      	nop
 80044d0:	40021000 	.word	0x40021000
 80044d4:	42420000 	.word	0x42420000
 80044d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044dc:	4b92      	ldr	r3, [pc, #584]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e9      	bne.n	80044bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80a6 	beq.w	8004642 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f6:	2300      	movs	r3, #0
 80044f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10d      	bne.n	8004522 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004506:	4b88      	ldr	r3, [pc, #544]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	4a87      	ldr	r2, [pc, #540]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004510:	61d3      	str	r3, [r2, #28]
 8004512:	4b85      	ldr	r3, [pc, #532]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004522:	4b82      	ldr	r3, [pc, #520]	@ (800472c <HAL_RCC_OscConfig+0x4c8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d118      	bne.n	8004560 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800452e:	4b7f      	ldr	r3, [pc, #508]	@ (800472c <HAL_RCC_OscConfig+0x4c8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a7e      	ldr	r2, [pc, #504]	@ (800472c <HAL_RCC_OscConfig+0x4c8>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453a:	f7fc fbc9 	bl	8000cd0 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004542:	f7fc fbc5 	bl	8000cd0 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b64      	cmp	r3, #100	@ 0x64
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e103      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	4b75      	ldr	r3, [pc, #468]	@ (800472c <HAL_RCC_OscConfig+0x4c8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d106      	bne.n	8004576 <HAL_RCC_OscConfig+0x312>
 8004568:	4b6f      	ldr	r3, [pc, #444]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4a6e      	ldr	r2, [pc, #440]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6213      	str	r3, [r2, #32]
 8004574:	e02d      	b.n	80045d2 <HAL_RCC_OscConfig+0x36e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x334>
 800457e:	4b6a      	ldr	r3, [pc, #424]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4a69      	ldr	r2, [pc, #420]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	6213      	str	r3, [r2, #32]
 800458a:	4b67      	ldr	r3, [pc, #412]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	4a66      	ldr	r2, [pc, #408]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004590:	f023 0304 	bic.w	r3, r3, #4
 8004594:	6213      	str	r3, [r2, #32]
 8004596:	e01c      	b.n	80045d2 <HAL_RCC_OscConfig+0x36e>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	2b05      	cmp	r3, #5
 800459e:	d10c      	bne.n	80045ba <HAL_RCC_OscConfig+0x356>
 80045a0:	4b61      	ldr	r3, [pc, #388]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	4a60      	ldr	r2, [pc, #384]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045a6:	f043 0304 	orr.w	r3, r3, #4
 80045aa:	6213      	str	r3, [r2, #32]
 80045ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	6213      	str	r3, [r2, #32]
 80045b8:	e00b      	b.n	80045d2 <HAL_RCC_OscConfig+0x36e>
 80045ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	4a5a      	ldr	r2, [pc, #360]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	6213      	str	r3, [r2, #32]
 80045c6:	4b58      	ldr	r3, [pc, #352]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	4a57      	ldr	r2, [pc, #348]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d015      	beq.n	8004606 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045da:	f7fc fb79 	bl	8000cd0 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e0:	e00a      	b.n	80045f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fc fb75 	bl	8000cd0 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e0b1      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ee      	beq.n	80045e2 <HAL_RCC_OscConfig+0x37e>
 8004604:	e014      	b.n	8004630 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004606:	f7fc fb63 	bl	8000cd0 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460c:	e00a      	b.n	8004624 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460e:	f7fc fb5f 	bl	8000cd0 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e09b      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004624:	4b40      	ldr	r3, [pc, #256]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1ee      	bne.n	800460e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d105      	bne.n	8004642 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004636:	4b3c      	ldr	r3, [pc, #240]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	4a3b      	ldr	r2, [pc, #236]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 800463c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004640:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8087 	beq.w	800475a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800464c:	4b36      	ldr	r3, [pc, #216]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b08      	cmp	r3, #8
 8004656:	d061      	beq.n	800471c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d146      	bne.n	80046ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004660:	4b33      	ldr	r3, [pc, #204]	@ (8004730 <HAL_RCC_OscConfig+0x4cc>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004666:	f7fc fb33 	bl	8000cd0 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466e:	f7fc fb2f 	bl	8000cd0 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e06d      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004680:	4b29      	ldr	r3, [pc, #164]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004694:	d108      	bne.n	80046a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004696:	4b24      	ldr	r3, [pc, #144]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	4921      	ldr	r1, [pc, #132]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a19      	ldr	r1, [r3, #32]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	430b      	orrs	r3, r1
 80046ba:	491b      	ldr	r1, [pc, #108]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004730 <HAL_RCC_OscConfig+0x4cc>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c6:	f7fc fb03 	bl	8000cd0 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ce:	f7fc faff 	bl	8000cd0 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e03d      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046e0:	4b11      	ldr	r3, [pc, #68]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x46a>
 80046ec:	e035      	b.n	800475a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ee:	4b10      	ldr	r3, [pc, #64]	@ (8004730 <HAL_RCC_OscConfig+0x4cc>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fc faec 	bl	8000cd0 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fc fae8 	bl	8000cd0 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e026      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800470e:	4b06      	ldr	r3, [pc, #24]	@ (8004728 <HAL_RCC_OscConfig+0x4c4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x498>
 800471a:	e01e      	b.n	800475a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d107      	bne.n	8004734 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e019      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
 8004728:	40021000 	.word	0x40021000
 800472c:	40007000 	.word	0x40007000
 8004730:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004734:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <HAL_RCC_OscConfig+0x500>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	429a      	cmp	r2, r3
 8004746:	d106      	bne.n	8004756 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d001      	beq.n	800475a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40021000 	.word	0x40021000

08004768 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0d0      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800477c:	4b6a      	ldr	r3, [pc, #424]	@ (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d910      	bls.n	80047ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b67      	ldr	r3, [pc, #412]	@ (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 0207 	bic.w	r2, r3, #7
 8004792:	4965      	ldr	r1, [pc, #404]	@ (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b63      	ldr	r3, [pc, #396]	@ (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0b8      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d020      	beq.n	80047fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c4:	4b59      	ldr	r3, [pc, #356]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4a58      	ldr	r2, [pc, #352]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047dc:	4b53      	ldr	r3, [pc, #332]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4a52      	ldr	r2, [pc, #328]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80047e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e8:	4b50      	ldr	r3, [pc, #320]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	494d      	ldr	r1, [pc, #308]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d040      	beq.n	8004888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	4b47      	ldr	r3, [pc, #284]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d115      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e07f      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004826:	4b41      	ldr	r3, [pc, #260]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e073      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004836:	4b3d      	ldr	r3, [pc, #244]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e06b      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004846:	4b39      	ldr	r3, [pc, #228]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f023 0203 	bic.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4936      	ldr	r1, [pc, #216]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004858:	f7fc fa3a 	bl	8000cd0 <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	e00a      	b.n	8004876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004860:	f7fc fa36 	bl	8000cd0 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e053      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004876:	4b2d      	ldr	r3, [pc, #180]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 020c 	and.w	r2, r3, #12
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	429a      	cmp	r2, r3
 8004886:	d1eb      	bne.n	8004860 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004888:	4b27      	ldr	r3, [pc, #156]	@ (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d210      	bcs.n	80048b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b24      	ldr	r3, [pc, #144]	@ (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 0207 	bic.w	r2, r3, #7
 800489e:	4922      	ldr	r1, [pc, #136]	@ (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b20      	ldr	r3, [pc, #128]	@ (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e032      	b.n	800491e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c4:	4b19      	ldr	r3, [pc, #100]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4916      	ldr	r1, [pc, #88]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048e2:	4b12      	ldr	r3, [pc, #72]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	490e      	ldr	r1, [pc, #56]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048f6:	f000 f821 	bl	800493c <HAL_RCC_GetSysClockFreq>
 80048fa:	4602      	mov	r2, r0
 80048fc:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <HAL_RCC_ClockConfig+0x1c4>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	490a      	ldr	r1, [pc, #40]	@ (8004930 <HAL_RCC_ClockConfig+0x1c8>)
 8004908:	5ccb      	ldrb	r3, [r1, r3]
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	4a09      	ldr	r2, [pc, #36]	@ (8004934 <HAL_RCC_ClockConfig+0x1cc>)
 8004910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004912:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <HAL_RCC_ClockConfig+0x1d0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fc f8aa 	bl	8000a70 <HAL_InitTick>

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40022000 	.word	0x40022000
 800492c:	40021000 	.word	0x40021000
 8004930:	08008688 	.word	0x08008688
 8004934:	20000000 	.word	0x20000000
 8004938:	20000004 	.word	0x20000004

0800493c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	2300      	movs	r3, #0
 8004950:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004956:	4b1e      	ldr	r3, [pc, #120]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b04      	cmp	r3, #4
 8004964:	d002      	beq.n	800496c <HAL_RCC_GetSysClockFreq+0x30>
 8004966:	2b08      	cmp	r3, #8
 8004968:	d003      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0x36>
 800496a:	e027      	b.n	80049bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800496c:	4b19      	ldr	r3, [pc, #100]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800496e:	613b      	str	r3, [r7, #16]
      break;
 8004970:	e027      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	0c9b      	lsrs	r3, r3, #18
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	4a17      	ldr	r2, [pc, #92]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800497c:	5cd3      	ldrb	r3, [r2, r3]
 800497e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d010      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800498a:	4b11      	ldr	r3, [pc, #68]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	0c5b      	lsrs	r3, r3, #17
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	4a11      	ldr	r2, [pc, #68]	@ (80049dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a0d      	ldr	r2, [pc, #52]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800499e:	fb03 f202 	mul.w	r2, r3, r2
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	e004      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a0c      	ldr	r2, [pc, #48]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049b0:	fb02 f303 	mul.w	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	613b      	str	r3, [r7, #16]
      break;
 80049ba:	e002      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049bc:	4b05      	ldr	r3, [pc, #20]	@ (80049d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80049be:	613b      	str	r3, [r7, #16]
      break;
 80049c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c2:	693b      	ldr	r3, [r7, #16]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40021000 	.word	0x40021000
 80049d4:	007a1200 	.word	0x007a1200
 80049d8:	080086a0 	.word	0x080086a0
 80049dc:	080086b0 	.word	0x080086b0
 80049e0:	003d0900 	.word	0x003d0900

080049e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e8:	4b02      	ldr	r3, [pc, #8]	@ (80049f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80049ea:	681b      	ldr	r3, [r3, #0]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr
 80049f4:	20000000 	.word	0x20000000

080049f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049fc:	f7ff fff2 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	@ (8004a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	@ (8004a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	08008698 	.word	0x08008698

08004a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a24:	f7ff ffde 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b05      	ldr	r3, [pc, #20]	@ (8004a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	0adb      	lsrs	r3, r3, #11
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4903      	ldr	r1, [pc, #12]	@ (8004a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40021000 	.word	0x40021000
 8004a44:	08008698 	.word	0x08008698

08004a48 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	220f      	movs	r2, #15
 8004a56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a58:	4b11      	ldr	r3, [pc, #68]	@ (8004aa0 <HAL_RCC_GetClockConfig+0x58>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 0203 	and.w	r2, r3, #3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a64:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa0 <HAL_RCC_GetClockConfig+0x58>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a70:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <HAL_RCC_GetClockConfig+0x58>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a7c:	4b08      	ldr	r3, [pc, #32]	@ (8004aa0 <HAL_RCC_GetClockConfig+0x58>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	08db      	lsrs	r3, r3, #3
 8004a82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a8a:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0207 	and.w	r2, r3, #7
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	40022000 	.word	0x40022000

08004aa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8004adc <RCC_Delay+0x34>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae0 <RCC_Delay+0x38>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	0a5b      	lsrs	r3, r3, #9
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	fb02 f303 	mul.w	r3, r2, r3
 8004ac2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ac4:	bf00      	nop
  }
  while (Delay --);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1e5a      	subs	r2, r3, #1
 8004aca:	60fa      	str	r2, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f9      	bne.n	8004ac4 <RCC_Delay+0x1c>
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr
 8004adc:	20000000 	.word	0x20000000
 8004ae0:	10624dd3 	.word	0x10624dd3

08004ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e041      	b.n	8004b7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f839 	bl	8004b82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4610      	mov	r0, r2
 8004b24:	f000 fb58 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d001      	beq.n	8004bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e03a      	b.n	8004c22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a18      	ldr	r2, [pc, #96]	@ (8004c2c <HAL_TIM_Base_Start_IT+0x98>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00e      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x58>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd6:	d009      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x58>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a14      	ldr	r2, [pc, #80]	@ (8004c30 <HAL_TIM_Base_Start_IT+0x9c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x58>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a13      	ldr	r2, [pc, #76]	@ (8004c34 <HAL_TIM_Base_Start_IT+0xa0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d111      	bne.n	8004c10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b06      	cmp	r3, #6
 8004bfc:	d010      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0201 	orr.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0e:	e007      	b.n	8004c20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr
 8004c2c:	40012c00 	.word	0x40012c00
 8004c30:	40000400 	.word	0x40000400
 8004c34:	40000800 	.word	0x40000800

08004c38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e041      	b.n	8004cce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fb fe6a 	bl	8000938 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f000 faae 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b0c      	cmp	r3, #12
 8004cea:	d841      	bhi.n	8004d70 <HAL_TIM_PWM_Stop_IT+0x98>
 8004cec:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d29 	.word	0x08004d29
 8004cf8:	08004d71 	.word	0x08004d71
 8004cfc:	08004d71 	.word	0x08004d71
 8004d00:	08004d71 	.word	0x08004d71
 8004d04:	08004d3b 	.word	0x08004d3b
 8004d08:	08004d71 	.word	0x08004d71
 8004d0c:	08004d71 	.word	0x08004d71
 8004d10:	08004d71 	.word	0x08004d71
 8004d14:	08004d4d 	.word	0x08004d4d
 8004d18:	08004d71 	.word	0x08004d71
 8004d1c:	08004d71 	.word	0x08004d71
 8004d20:	08004d71 	.word	0x08004d71
 8004d24:	08004d5f 	.word	0x08004d5f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0202 	bic.w	r2, r2, #2
 8004d36:	60da      	str	r2, [r3, #12]
      break;
 8004d38:	e01d      	b.n	8004d76 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0204 	bic.w	r2, r2, #4
 8004d48:	60da      	str	r2, [r3, #12]
      break;
 8004d4a:	e014      	b.n	8004d76 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0208 	bic.w	r2, r2, #8
 8004d5a:	60da      	str	r2, [r3, #12]
      break;
 8004d5c:	e00b      	b.n	8004d76 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0210 	bic.w	r2, r2, #16
 8004d6c:	60da      	str	r2, [r3, #12]
      break;
 8004d6e:	e002      	b.n	8004d76 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
      break;
 8004d74:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d157      	bne.n	8004e2c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2200      	movs	r2, #0
 8004d82:	6839      	ldr	r1, [r7, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fc1d 	bl	80055c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8004e38 <HAL_TIM_PWM_Stop_IT+0x160>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d117      	bne.n	8004dc4 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6a1a      	ldr	r2, [r3, #32]
 8004d9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d9e:	4013      	ands	r3, r2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10f      	bne.n	8004dc4 <HAL_TIM_PWM_Stop_IT+0xec>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6a1a      	ldr	r2, [r3, #32]
 8004daa:	f240 4344 	movw	r3, #1092	@ 0x444
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d107      	bne.n	8004dc4 <HAL_TIM_PWM_Stop_IT+0xec>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dc2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6a1a      	ldr	r2, [r3, #32]
 8004dca:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10f      	bne.n	8004df4 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6a1a      	ldr	r2, [r3, #32]
 8004dda:	f240 4344 	movw	r3, #1092	@ 0x444
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d107      	bne.n	8004df4 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d104      	bne.n	8004e04 <HAL_TIM_PWM_Stop_IT+0x12c>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e02:	e013      	b.n	8004e2c <HAL_TIM_PWM_Stop_IT+0x154>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d104      	bne.n	8004e14 <HAL_TIM_PWM_Stop_IT+0x13c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e12:	e00b      	b.n	8004e2c <HAL_TIM_PWM_Stop_IT+0x154>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d104      	bne.n	8004e24 <HAL_TIM_PWM_Stop_IT+0x14c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e22:	e003      	b.n	8004e2c <HAL_TIM_PWM_Stop_IT+0x154>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40012c00 	.word	0x40012c00

08004e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d020      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01b      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0202 	mvn.w	r2, #2
 8004e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f993 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004e8c:	e005      	b.n	8004e9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f986 	bl	80051a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f003 f997 	bl	80081c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d020      	beq.n	8004eec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01b      	beq.n	8004eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0204 	mvn.w	r2, #4
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f96d 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f960 	bl	80051a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f003 f971 	bl	80081c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d020      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01b      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0208 	mvn.w	r2, #8
 8004f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f947 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004f24:	e005      	b.n	8004f32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f93a 	bl	80051a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f003 f94b 	bl	80081c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d020      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01b      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0210 	mvn.w	r2, #16
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2208      	movs	r2, #8
 8004f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f921 	bl	80051b2 <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f914 	bl	80051a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f003 f925 	bl	80081c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0201 	mvn.w	r2, #1
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fb fbfe 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00c      	beq.n	8004fcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fb87 	bl	80056da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00c      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d007      	beq.n	8004ff0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f8ea 	bl	80051c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00c      	beq.n	8005014 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f003 0320 	and.w	r3, r3, #32
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0220 	mvn.w	r2, #32
 800500c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fb5a 	bl	80056c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005036:	2302      	movs	r3, #2
 8005038:	e0ae      	b.n	8005198 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b0c      	cmp	r3, #12
 8005046:	f200 809f 	bhi.w	8005188 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800504a:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	08005085 	.word	0x08005085
 8005054:	08005189 	.word	0x08005189
 8005058:	08005189 	.word	0x08005189
 800505c:	08005189 	.word	0x08005189
 8005060:	080050c5 	.word	0x080050c5
 8005064:	08005189 	.word	0x08005189
 8005068:	08005189 	.word	0x08005189
 800506c:	08005189 	.word	0x08005189
 8005070:	08005107 	.word	0x08005107
 8005074:	08005189 	.word	0x08005189
 8005078:	08005189 	.word	0x08005189
 800507c:	08005189 	.word	0x08005189
 8005080:	08005147 	.word	0x08005147
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 f912 	bl	80052b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0208 	orr.w	r2, r2, #8
 800509e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0204 	bic.w	r2, r2, #4
 80050ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6999      	ldr	r1, [r3, #24]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	619a      	str	r2, [r3, #24]
      break;
 80050c2:	e064      	b.n	800518e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 f958 	bl	8005380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6999      	ldr	r1, [r3, #24]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	021a      	lsls	r2, r3, #8
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	619a      	str	r2, [r3, #24]
      break;
 8005104:	e043      	b.n	800518e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	4618      	mov	r0, r3
 800510e:	f000 f9a1 	bl	8005454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0208 	orr.w	r2, r2, #8
 8005120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0204 	bic.w	r2, r2, #4
 8005130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69d9      	ldr	r1, [r3, #28]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	61da      	str	r2, [r3, #28]
      break;
 8005144:	e023      	b.n	800518e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	4618      	mov	r0, r3
 800514e:	f000 f9eb 	bl	8005528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69d9      	ldr	r1, [r3, #28]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	021a      	lsls	r2, r3, #8
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	61da      	str	r2, [r3, #28]
      break;
 8005186:	e002      	b.n	800518e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	75fb      	strb	r3, [r7, #23]
      break;
 800518c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005196:	7dfb      	ldrb	r3, [r7, #23]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr

080051b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr
	...

080051d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a2f      	ldr	r2, [pc, #188]	@ (80052a8 <TIM_Base_SetConfig+0xd0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00b      	beq.n	8005208 <TIM_Base_SetConfig+0x30>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f6:	d007      	beq.n	8005208 <TIM_Base_SetConfig+0x30>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a2c      	ldr	r2, [pc, #176]	@ (80052ac <TIM_Base_SetConfig+0xd4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d003      	beq.n	8005208 <TIM_Base_SetConfig+0x30>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a2b      	ldr	r2, [pc, #172]	@ (80052b0 <TIM_Base_SetConfig+0xd8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d108      	bne.n	800521a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a22      	ldr	r2, [pc, #136]	@ (80052a8 <TIM_Base_SetConfig+0xd0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00b      	beq.n	800523a <TIM_Base_SetConfig+0x62>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005228:	d007      	beq.n	800523a <TIM_Base_SetConfig+0x62>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a1f      	ldr	r2, [pc, #124]	@ (80052ac <TIM_Base_SetConfig+0xd4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_Base_SetConfig+0x62>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a1e      	ldr	r2, [pc, #120]	@ (80052b0 <TIM_Base_SetConfig+0xd8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d108      	bne.n	800524c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a0d      	ldr	r2, [pc, #52]	@ (80052a8 <TIM_Base_SetConfig+0xd0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d103      	bne.n	8005280 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f023 0201 	bic.w	r2, r3, #1
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	611a      	str	r2, [r3, #16]
  }
}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800

080052b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f023 0201 	bic.w	r2, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0303 	bic.w	r3, r3, #3
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f023 0302 	bic.w	r3, r3, #2
 80052fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a1c      	ldr	r2, [pc, #112]	@ (800537c <TIM_OC1_SetConfig+0xc8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d10c      	bne.n	800532a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0308 	bic.w	r3, r3, #8
 8005316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f023 0304 	bic.w	r3, r3, #4
 8005328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a13      	ldr	r2, [pc, #76]	@ (800537c <TIM_OC1_SetConfig+0xc8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d111      	bne.n	8005356 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	621a      	str	r2, [r3, #32]
}
 8005370:	bf00      	nop
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40012c00 	.word	0x40012c00

08005380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f023 0210 	bic.w	r2, r3, #16
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f023 0320 	bic.w	r3, r3, #32
 80053ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a1d      	ldr	r2, [pc, #116]	@ (8005450 <TIM_OC2_SetConfig+0xd0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d10d      	bne.n	80053fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a14      	ldr	r2, [pc, #80]	@ (8005450 <TIM_OC2_SetConfig+0xd0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d113      	bne.n	800542c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800540a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr
 8005450:	40012c00 	.word	0x40012c00

08005454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800549c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005524 <TIM_OC3_SetConfig+0xd0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d10d      	bne.n	80054ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a14      	ldr	r2, [pc, #80]	@ (8005524 <TIM_OC3_SetConfig+0xd0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d113      	bne.n	80054fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	621a      	str	r2, [r3, #32]
}
 8005518:	bf00      	nop
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40012c00 	.word	0x40012c00

08005528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800555e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	021b      	lsls	r3, r3, #8
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	031b      	lsls	r3, r3, #12
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4313      	orrs	r3, r2
 800557e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a0f      	ldr	r2, [pc, #60]	@ (80055c0 <TIM_OC4_SetConfig+0x98>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d109      	bne.n	800559c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800558e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	019b      	lsls	r3, r3, #6
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	4313      	orrs	r3, r2
 800559a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc80      	pop	{r7}
 80055be:	4770      	bx	lr
 80055c0:	40012c00 	.word	0x40012c00

080055c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 031f 	and.w	r3, r3, #31
 80055d6:	2201      	movs	r2, #1
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1a      	ldr	r2, [r3, #32]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	43db      	mvns	r3, r3
 80055e6:	401a      	ands	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1a      	ldr	r2, [r3, #32]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	fa01 f303 	lsl.w	r3, r1, r3
 80055fc:	431a      	orrs	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005620:	2302      	movs	r3, #2
 8005622:	e046      	b.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800564a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a16      	ldr	r2, [pc, #88]	@ (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00e      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005670:	d009      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a12      	ldr	r2, [pc, #72]	@ (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d004      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a10      	ldr	r2, [pc, #64]	@ (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d10c      	bne.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800568c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	4313      	orrs	r3, r2
 8005696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr
 80056bc:	40012c00 	.word	0x40012c00
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40000800 	.word	0x40000800

080056c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr

080056da <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e04a      	b.n	8005794 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fb f964 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2224      	movs	r2, #36	@ 0x24
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800572e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fef3 	bl	800651c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695a      	ldr	r2, [r3, #20]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8005754:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0208 	orr.w	r2, r2, #8
 8005764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	@ 0x28
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	4613      	mov	r3, r2
 80057aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d175      	bne.n	80058a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <HAL_UART_Transmit+0x2c>
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e06e      	b.n	80058aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2221      	movs	r2, #33	@ 0x21
 80057d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057da:	f7fb fa79 	bl	8000cd0 <HAL_GetTick>
 80057de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	88fa      	ldrh	r2, [r7, #6]
 80057e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	88fa      	ldrh	r2, [r7, #6]
 80057ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057f4:	d108      	bne.n	8005808 <HAL_UART_Transmit+0x6c>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d104      	bne.n	8005808 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	61bb      	str	r3, [r7, #24]
 8005806:	e003      	b.n	8005810 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005810:	e02e      	b.n	8005870 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2200      	movs	r2, #0
 800581a:	2180      	movs	r1, #128	@ 0x80
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 fc50 	bl	80060c2 <UART_WaitOnFlagUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e03a      	b.n	80058aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	3302      	adds	r3, #2
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e007      	b.n	8005862 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	3301      	adds	r3, #1
 8005860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1cb      	bne.n	8005812 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2200      	movs	r2, #0
 8005882:	2140      	movs	r1, #64	@ 0x40
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 fc1c 	bl	80060c2 <UART_WaitOnFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e006      	b.n	80058aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e000      	b.n	80058aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
  }
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b08a      	sub	sp, #40	@ 0x28
 80058b6:	af02      	add	r7, sp, #8
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	603b      	str	r3, [r7, #0]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	f040 8081 	bne.w	80059d6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <HAL_UART_Receive+0x2e>
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e079      	b.n	80059d8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2222      	movs	r2, #34	@ 0x22
 80058ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058f8:	f7fb f9ea 	bl	8000cd0 <HAL_GetTick>
 80058fc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	88fa      	ldrh	r2, [r7, #6]
 8005902:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	88fa      	ldrh	r2, [r7, #6]
 8005908:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005912:	d108      	bne.n	8005926 <HAL_UART_Receive+0x74>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800591c:	2300      	movs	r3, #0
 800591e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	e003      	b.n	800592e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800592a:	2300      	movs	r3, #0
 800592c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800592e:	e047      	b.n	80059c0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2200      	movs	r2, #0
 8005938:	2120      	movs	r1, #32
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 fbc1 	bl	80060c2 <UART_WaitOnFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d005      	beq.n	8005952 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e042      	b.n	80059d8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10c      	bne.n	8005972 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005964:	b29a      	uxth	r2, r3
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	3302      	adds	r3, #2
 800596e:	61bb      	str	r3, [r7, #24]
 8005970:	e01f      	b.n	80059b2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800597a:	d007      	beq.n	800598c <HAL_UART_Receive+0xda>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <HAL_UART_Receive+0xe8>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d106      	bne.n	800599a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	b2da      	uxtb	r2, r3
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	e008      	b.n	80059ac <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	3301      	adds	r3, #1
 80059b0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1b2      	bne.n	8005930 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e000      	b.n	80059d8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80059d6:	2302      	movs	r3, #2
  }
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3720      	adds	r7, #32
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08c      	sub	sp, #48	@ 0x30
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	4613      	mov	r3, r2
 80059ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d14a      	bne.n	8005a90 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e043      	b.n	8005a92 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fba9 	bl	8006174 <UART_Start_Receive_IT>
 8005a22:	4603      	mov	r3, r0
 8005a24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005a28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d12c      	bne.n	8005a8a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d125      	bne.n	8005a84 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a38:	2300      	movs	r3, #0
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f043 0310 	orr.w	r3, r3, #16
 8005a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	330c      	adds	r3, #12
 8005a6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a70:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	6a39      	ldr	r1, [r7, #32]
 8005a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e5      	bne.n	8005a4e <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8005a82:	e002      	b.n	8005a8a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a8e:	e000      	b.n	8005a92 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005a90:	2302      	movs	r3, #2
  }
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3730      	adds	r7, #48	@ 0x30
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b0ba      	sub	sp, #232	@ 0xe8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005ada:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10f      	bne.n	8005b02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d009      	beq.n	8005b02 <HAL_UART_IRQHandler+0x66>
 8005aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005af2:	f003 0320 	and.w	r3, r3, #32
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fc50 	bl	80063a0 <UART_Receive_IT>
      return;
 8005b00:	e25b      	b.n	8005fba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80de 	beq.w	8005cc8 <HAL_UART_IRQHandler+0x22c>
 8005b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d106      	bne.n	8005b26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b1c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 80d1 	beq.w	8005cc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00b      	beq.n	8005b4a <HAL_UART_IRQHandler+0xae>
 8005b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d005      	beq.n	8005b4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b42:	f043 0201 	orr.w	r2, r3, #1
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00b      	beq.n	8005b6e <HAL_UART_IRQHandler+0xd2>
 8005b56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b66:	f043 0202 	orr.w	r2, r3, #2
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00b      	beq.n	8005b92 <HAL_UART_IRQHandler+0xf6>
 8005b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8a:	f043 0204 	orr.w	r2, r3, #4
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d011      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x126>
 8005b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d105      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bba:	f043 0208 	orr.w	r2, r3, #8
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 81f2 	beq.w	8005fb0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d008      	beq.n	8005bea <HAL_UART_IRQHandler+0x14e>
 8005bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fbdb 	bl	80063a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	bf14      	ite	ne
 8005bf8:	2301      	movne	r3, #1
 8005bfa:	2300      	moveq	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d103      	bne.n	8005c16 <HAL_UART_IRQHandler+0x17a>
 8005c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d04f      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fae5 	bl	80061e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d041      	beq.n	8005cae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3314      	adds	r3, #20
 8005c30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3314      	adds	r3, #20
 8005c52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1d9      	bne.n	8005c2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d013      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c82:	4a7e      	ldr	r2, [pc, #504]	@ (8005e7c <HAL_UART_IRQHandler+0x3e0>)
 8005c84:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fb f9c4 	bl	8001018 <HAL_DMA_Abort_IT>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d016      	beq.n	8005cc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca4:	e00e      	b.n	8005cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f99c 	bl	8005fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cac:	e00a      	b.n	8005cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f998 	bl	8005fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb4:	e006      	b.n	8005cc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f994 	bl	8005fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005cc2:	e175      	b.n	8005fb0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc4:	bf00      	nop
    return;
 8005cc6:	e173      	b.n	8005fb0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	f040 814f 	bne.w	8005f70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 8148 	beq.w	8005f70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8141 	beq.w	8005f70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60bb      	str	r3, [r7, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60bb      	str	r3, [r7, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	60bb      	str	r3, [r7, #8]
 8005d02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 80b6 	beq.w	8005e80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8145 	beq.w	8005fb4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d32:	429a      	cmp	r2, r3
 8005d34:	f080 813e 	bcs.w	8005fb4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	f000 8088 	beq.w	8005e5c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	330c      	adds	r3, #12
 8005d74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d78:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d80:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d84:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1d9      	bne.n	8005d4c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3314      	adds	r3, #20
 8005d9e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005da8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005daa:	f023 0301 	bic.w	r3, r3, #1
 8005dae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3314      	adds	r3, #20
 8005db8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005dbc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005dc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005dc4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005dce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e1      	bne.n	8005d98 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3314      	adds	r3, #20
 8005dda:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005de4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3314      	adds	r3, #20
 8005df4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005df8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005dfa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005dfe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e3      	bne.n	8005dd4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	330c      	adds	r3, #12
 8005e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e2c:	f023 0310 	bic.w	r3, r3, #16
 8005e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	330c      	adds	r3, #12
 8005e3a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005e3e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e40:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e3      	bne.n	8005e1a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fb f8a2 	bl	8000fa0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7fa feca 	bl	8000c0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e78:	e09c      	b.n	8005fb4 <HAL_UART_IRQHandler+0x518>
 8005e7a:	bf00      	nop
 8005e7c:	080062ab 	.word	0x080062ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 808e 	beq.w	8005fb8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8089 	beq.w	8005fb8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	330c      	adds	r3, #12
 8005eac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	330c      	adds	r3, #12
 8005ec6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005eca:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ecc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ed0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1e3      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3314      	adds	r3, #20
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	623b      	str	r3, [r7, #32]
   return(result);
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	f023 0301 	bic.w	r3, r3, #1
 8005ef4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3314      	adds	r3, #20
 8005efe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f02:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e3      	bne.n	8005ede <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	e853 3f00 	ldrex	r3, [r3]
 8005f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0310 	bic.w	r3, r3, #16
 8005f3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	330c      	adds	r3, #12
 8005f44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f48:	61fa      	str	r2, [r7, #28]
 8005f4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	69b9      	ldr	r1, [r7, #24]
 8005f4e:	69fa      	ldr	r2, [r7, #28]
 8005f50:	e841 2300 	strex	r3, r2, [r1]
 8005f54:	617b      	str	r3, [r7, #20]
   return(result);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1e3      	bne.n	8005f24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f66:	4619      	mov	r1, r3
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7fa fe4f 	bl	8000c0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f6e:	e023      	b.n	8005fb8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d009      	beq.n	8005f90 <HAL_UART_IRQHandler+0x4f4>
 8005f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f9a2 	bl	80062d2 <UART_Transmit_IT>
    return;
 8005f8e:	e014      	b.n	8005fba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00e      	beq.n	8005fba <HAL_UART_IRQHandler+0x51e>
 8005f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d008      	beq.n	8005fba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f9e1 	bl	8006370 <UART_EndTransmit_IT>
    return;
 8005fae:	e004      	b.n	8005fba <HAL_UART_IRQHandler+0x51e>
    return;
 8005fb0:	bf00      	nop
 8005fb2:	e002      	b.n	8005fba <HAL_UART_IRQHandler+0x51e>
      return;
 8005fb4:	bf00      	nop
 8005fb6:	e000      	b.n	8005fba <HAL_UART_IRQHandler+0x51e>
      return;
 8005fb8:	bf00      	nop
  }
}
 8005fba:	37e8      	adds	r7, #232	@ 0xe8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bc80      	pop	{r7}
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bc80      	pop	{r7}
 8005ff4:	4770      	bx	lr

08005ff6 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b085      	sub	sp, #20
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800600c:	2302      	movs	r3, #2
 800600e:	e020      	b.n	8006052 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2224      	movs	r2, #36	@ 0x24
 800601c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 030c 	bic.w	r3, r3, #12
 800602e:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f043 0308 	orr.w	r3, r3, #8
 8006036:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	bc80      	pop	{r7}
 800605a:	4770      	bx	lr

0800605c <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8006072:	2302      	movs	r3, #2
 8006074:	e020      	b.n	80060b8 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2224      	movs	r2, #36	@ 0x24
 8006082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f023 030c 	bic.w	r3, r3, #12
 8006094:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f043 0304 	orr.w	r3, r3, #4
 800609c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr

080060c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b086      	sub	sp, #24
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	603b      	str	r3, [r7, #0]
 80060ce:	4613      	mov	r3, r2
 80060d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d2:	e03b      	b.n	800614c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060da:	d037      	beq.n	800614c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060dc:	f7fa fdf8 	bl	8000cd0 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	6a3a      	ldr	r2, [r7, #32]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d302      	bcc.n	80060f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d101      	bne.n	80060f6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e03a      	b.n	800616c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d023      	beq.n	800614c <UART_WaitOnFlagUntilTimeout+0x8a>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b80      	cmp	r3, #128	@ 0x80
 8006108:	d020      	beq.n	800614c <UART_WaitOnFlagUntilTimeout+0x8a>
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b40      	cmp	r3, #64	@ 0x40
 800610e:	d01d      	beq.n	800614c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0308 	and.w	r3, r3, #8
 800611a:	2b08      	cmp	r3, #8
 800611c:	d116      	bne.n	800614c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f856 	bl	80061e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2208      	movs	r2, #8
 800613e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e00f      	b.n	800616c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	4013      	ands	r3, r2
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	429a      	cmp	r2, r3
 800615a:	bf0c      	ite	eq
 800615c:	2301      	moveq	r3, #1
 800615e:	2300      	movne	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	429a      	cmp	r2, r3
 8006168:	d0b4      	beq.n	80060d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	88fa      	ldrh	r2, [r7, #6]
 800618c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	88fa      	ldrh	r2, [r7, #6]
 8006192:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2222      	movs	r2, #34	@ 0x22
 800619e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695a      	ldr	r2, [r3, #20]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0201 	orr.w	r2, r2, #1
 80061c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0220 	orr.w	r2, r2, #32
 80061d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr

080061e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b095      	sub	sp, #84	@ 0x54
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	330c      	adds	r3, #12
 80061f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006204:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	330c      	adds	r3, #12
 800620c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800620e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006210:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006214:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800621c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e5      	bne.n	80061ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3314      	adds	r3, #20
 8006228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	e853 3f00 	ldrex	r3, [r3]
 8006230:	61fb      	str	r3, [r7, #28]
   return(result);
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	f023 0301 	bic.w	r3, r3, #1
 8006238:	64bb      	str	r3, [r7, #72]	@ 0x48
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3314      	adds	r3, #20
 8006240:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006242:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006244:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006248:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e5      	bne.n	8006222 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625a:	2b01      	cmp	r3, #1
 800625c:	d119      	bne.n	8006292 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	60bb      	str	r3, [r7, #8]
   return(result);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f023 0310 	bic.w	r3, r3, #16
 8006274:	647b      	str	r3, [r7, #68]	@ 0x44
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800627e:	61ba      	str	r2, [r7, #24]
 8006280:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6979      	ldr	r1, [r7, #20]
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	613b      	str	r3, [r7, #16]
   return(result);
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e5      	bne.n	800625e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062a0:	bf00      	nop
 80062a2:	3754      	adds	r7, #84	@ 0x54
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr

080062aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7ff fe8d 	bl	8005fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ca:	bf00      	nop
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b085      	sub	sp, #20
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b21      	cmp	r3, #33	@ 0x21
 80062e4:	d13e      	bne.n	8006364 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ee:	d114      	bne.n	800631a <UART_Transmit_IT+0x48>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d110      	bne.n	800631a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800630c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	1c9a      	adds	r2, r3, #2
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	621a      	str	r2, [r3, #32]
 8006318:	e008      	b.n	800632c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	1c59      	adds	r1, r3, #1
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6211      	str	r1, [r2, #32]
 8006324:	781a      	ldrb	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29b      	uxth	r3, r3
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	4619      	mov	r1, r3
 800633a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10f      	bne.n	8006360 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800634e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800635e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	e000      	b.n	8006366 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006364:	2302      	movs	r3, #2
  }
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr

08006370 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006386:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff fe15 	bl	8005fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08c      	sub	sp, #48	@ 0x30
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b22      	cmp	r3, #34	@ 0x22
 80063b2:	f040 80ae 	bne.w	8006512 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063be:	d117      	bne.n	80063f0 <UART_Receive_IT+0x50>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d113      	bne.n	80063f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	b29b      	uxth	r3, r3
 80063da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063de:	b29a      	uxth	r2, r3
 80063e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e8:	1c9a      	adds	r2, r3, #2
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80063ee:	e026      	b.n	800643e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006402:	d007      	beq.n	8006414 <UART_Receive_IT+0x74>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <UART_Receive_IT+0x82>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d106      	bne.n	8006422 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	b2da      	uxtb	r2, r3
 800641c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e008      	b.n	8006434 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	b2db      	uxtb	r3, r3
 800642a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800642e:	b2da      	uxtb	r2, r3
 8006430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006432:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29b      	uxth	r3, r3
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	4619      	mov	r1, r3
 800644c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800644e:	2b00      	cmp	r3, #0
 8006450:	d15d      	bne.n	800650e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0220 	bic.w	r2, r2, #32
 8006460:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006470:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695a      	ldr	r2, [r3, #20]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0201 	bic.w	r2, r2, #1
 8006480:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006494:	2b01      	cmp	r3, #1
 8006496:	d135      	bne.n	8006504 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	330c      	adds	r3, #12
 80064a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	613b      	str	r3, [r7, #16]
   return(result);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f023 0310 	bic.w	r3, r3, #16
 80064b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	330c      	adds	r3, #12
 80064bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064be:	623a      	str	r2, [r7, #32]
 80064c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	69f9      	ldr	r1, [r7, #28]
 80064c4:	6a3a      	ldr	r2, [r7, #32]
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e5      	bne.n	800649e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b10      	cmp	r3, #16
 80064de:	d10a      	bne.n	80064f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7fa fb85 	bl	8000c0c <HAL_UARTEx_RxEventCallback>
 8006502:	e002      	b.n	800650a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff fd64 	bl	8005fd2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	e002      	b.n	8006514 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	e000      	b.n	8006514 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006512:	2302      	movs	r3, #2
  }
}
 8006514:	4618      	mov	r0, r3
 8006516:	3730      	adds	r7, #48	@ 0x30
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006556:	f023 030c 	bic.w	r3, r3, #12
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	430b      	orrs	r3, r1
 8006562:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a2c      	ldr	r2, [pc, #176]	@ (8006630 <UART_SetConfig+0x114>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d103      	bne.n	800658c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006584:	f7fe fa4c 	bl	8004a20 <HAL_RCC_GetPCLK2Freq>
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	e002      	b.n	8006592 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800658c:	f7fe fa34 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 8006590:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009a      	lsls	r2, r3, #2
 800659c:	441a      	add	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a8:	4a22      	ldr	r2, [pc, #136]	@ (8006634 <UART_SetConfig+0x118>)
 80065aa:	fba2 2303 	umull	r2, r3, r2, r3
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	0119      	lsls	r1, r3, #4
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	009a      	lsls	r2, r3, #2
 80065bc:	441a      	add	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80065c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006634 <UART_SetConfig+0x118>)
 80065ca:	fba3 0302 	umull	r0, r3, r3, r2
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	2064      	movs	r0, #100	@ 0x64
 80065d2:	fb00 f303 	mul.w	r3, r0, r3
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	3332      	adds	r3, #50	@ 0x32
 80065dc:	4a15      	ldr	r2, [pc, #84]	@ (8006634 <UART_SetConfig+0x118>)
 80065de:	fba2 2303 	umull	r2, r3, r2, r3
 80065e2:	095b      	lsrs	r3, r3, #5
 80065e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065e8:	4419      	add	r1, r3
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	4613      	mov	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	009a      	lsls	r2, r3, #2
 80065f4:	441a      	add	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006600:	4b0c      	ldr	r3, [pc, #48]	@ (8006634 <UART_SetConfig+0x118>)
 8006602:	fba3 0302 	umull	r0, r3, r3, r2
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	2064      	movs	r0, #100	@ 0x64
 800660a:	fb00 f303 	mul.w	r3, r0, r3
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	3332      	adds	r3, #50	@ 0x32
 8006614:	4a07      	ldr	r2, [pc, #28]	@ (8006634 <UART_SetConfig+0x118>)
 8006616:	fba2 2303 	umull	r2, r3, r2, r3
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	f003 020f 	and.w	r2, r3, #15
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	440a      	add	r2, r1
 8006626:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006628:	bf00      	nop
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	40013800 	.word	0x40013800
 8006634:	51eb851f 	.word	0x51eb851f

08006638 <AS5600_Init>:
AS5600_TypeDef *AS5600_New(void) {
    AS5600_TypeDef *a = (AS5600_TypeDef *)calloc(1, sizeof(AS5600_TypeDef));
    return a;
}

HAL_StatusTypeDef AS5600_Init(AS5600_TypeDef *a) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af02      	add	r7, sp, #8
 800663e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	73bb      	strb	r3, [r7, #14]
    uint8_t pwm = 0;
 8006644:	2300      	movs	r3, #0
 8006646:	73fb      	strb	r3, [r7, #15]
    uint8_t mag_status = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	737b      	strb	r3, [r7, #13]
    /* Set configuration defaults for uninitialized values. */
    if (!(a->PositiveRotationDirection)) {
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	7b9b      	ldrb	r3, [r3, #14]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d102      	bne.n	800665a <AS5600_Init+0x22>
        a->PositiveRotationDirection = AS5600_DIR_CW;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	739a      	strb	r2, [r3, #14]
    }
    if (!(a->LowPowerMode)) {
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	7bdb      	ldrb	r3, [r3, #15]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d102      	bne.n	8006668 <AS5600_Init+0x30>
        a->LowPowerMode = AS5600_POWER_MODE_DEFAULT;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	73da      	strb	r2, [r3, #15]
    }
    if (!(a->Hysteresis)) {
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	7c1b      	ldrb	r3, [r3, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d102      	bne.n	8006676 <AS5600_Init+0x3e>
        a->Hysteresis = AS5600_HYSTERESIS_DEFAULT;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	741a      	strb	r2, [r3, #16]
    }
    if (!(a->OutputMode)) {
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	7c5b      	ldrb	r3, [r3, #17]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d102      	bne.n	8006684 <AS5600_Init+0x4c>
        a->OutputMode = AS5600_OUTPUT_STAGE_DEFAULT;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	745a      	strb	r2, [r3, #17]
    }
    if (!(a->PWMFrequency)) {
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	7c9b      	ldrb	r3, [r3, #18]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <AS5600_Init+0x5a>
        a->PWMFrequency = AS5600_PWM_FREQUENCY_DEFAULT;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	749a      	strb	r2, [r3, #18]
    }
    if (!(a->SlowFilter)) {
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	7cdb      	ldrb	r3, [r3, #19]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <AS5600_Init+0x68>
        a->SlowFilter = AS5600_SLOW_FILTER_DEFAULT;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	74da      	strb	r2, [r3, #19]
    }
    if (!(a->FastFilterThreshold)) {
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	7d1b      	ldrb	r3, [r3, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d102      	bne.n	80066ae <AS5600_Init+0x76>
        a->FastFilterThreshold = AS5600_FAST_FILTER_DEFAULT;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	751a      	strb	r2, [r3, #20]
    }
    if (!(a->WatchdogTimer)) {
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	7d5b      	ldrb	r3, [r3, #21]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d102      	bne.n	80066bc <AS5600_Init+0x84>
        a->WatchdogTimer = AS5600_WATCHDOG_DEFAULT;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2202      	movs	r2, #2
 80066ba:	755a      	strb	r2, [r3, #21]
    }
    /* Write configuration settings.
       Do this in single write instead of using functions below to avoid
       overhead of multiple calls to HAL_I2C_Mem_Write_IT */
    switch (a->LowPowerMode) {
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	7bdb      	ldrb	r3, [r3, #15]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d83e      	bhi.n	8006744 <AS5600_Init+0x10c>
 80066c6:	a201      	add	r2, pc, #4	@ (adr r2, 80066cc <AS5600_Init+0x94>)
 80066c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066cc:	080066dd 	.word	0x080066dd
 80066d0:	080066ef 	.word	0x080066ef
 80066d4:	08006711 	.word	0x08006711
 80066d8:	08006733 	.word	0x08006733
        case AS5600_POWER_MODE_NOM:
            a->confRegister[1] &= ~((1UL << 1) | (1UL << 0));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	7ddb      	ldrb	r3, [r3, #23]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f023 0303 	bic.w	r3, r3, #3
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	75da      	strb	r2, [r3, #23]
            break;
 80066ec:	e02e      	b.n	800674c <AS5600_Init+0x114>
        case AS5600_POWER_MODE_LPM1:
            a->confRegister[1] |= (1UL << 0);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	7ddb      	ldrb	r3, [r3, #23]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	f043 0301 	orr.w	r3, r3, #1
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 1);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	7ddb      	ldrb	r3, [r3, #23]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f023 0302 	bic.w	r3, r3, #2
 8006708:	b2da      	uxtb	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	75da      	strb	r2, [r3, #23]
            break;
 800670e:	e01d      	b.n	800674c <AS5600_Init+0x114>
        case AS5600_POWER_MODE_LPM2:
            a->confRegister[1] |= (1UL << 1);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	7ddb      	ldrb	r3, [r3, #23]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	f043 0302 	orr.w	r3, r3, #2
 800671a:	b2da      	uxtb	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= (1UL << 0);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	7ddb      	ldrb	r3, [r3, #23]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	b2da      	uxtb	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	75da      	strb	r2, [r3, #23]
            break;
 8006730:	e00c      	b.n	800674c <AS5600_Init+0x114>
        case AS5600_POWER_MODE_LPM3:
            a->confRegister[1] |= ((1UL << 1) | (1UL << 0));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	7ddb      	ldrb	r3, [r3, #23]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f043 0303 	orr.w	r3, r3, #3
 800673c:	b2da      	uxtb	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	75da      	strb	r2, [r3, #23]
            break;
 8006742:	e003      	b.n	800674c <AS5600_Init+0x114>
        default:
            /* Invalid low power mode specified */
            status = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	73bb      	strb	r3, [r7, #14]
            return status;
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	e208      	b.n	8006b5e <AS5600_Init+0x526>
    }
    switch (a->Hysteresis) {
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	7c1b      	ldrb	r3, [r3, #16]
 8006750:	3b01      	subs	r3, #1
 8006752:	2b03      	cmp	r3, #3
 8006754:	d83e      	bhi.n	80067d4 <AS5600_Init+0x19c>
 8006756:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <AS5600_Init+0x124>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	0800676d 	.word	0x0800676d
 8006760:	0800677f 	.word	0x0800677f
 8006764:	080067a1 	.word	0x080067a1
 8006768:	080067c3 	.word	0x080067c3
        case AS5600_HYSTERESIS_OFF:
            a->confRegister[1] &= ~((1UL << 3) | (1UL << 2));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	7ddb      	ldrb	r3, [r3, #23]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f023 030c 	bic.w	r3, r3, #12
 8006776:	b2da      	uxtb	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	75da      	strb	r2, [r3, #23]
            break;
 800677c:	e02e      	b.n	80067dc <AS5600_Init+0x1a4>
        case AS5600_HYSTERESIS_1LSB:
            a->confRegister[1] |= (1UL << 2);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	7ddb      	ldrb	r3, [r3, #23]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	f043 0304 	orr.w	r3, r3, #4
 8006788:	b2da      	uxtb	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 3);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	7ddb      	ldrb	r3, [r3, #23]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	f023 0308 	bic.w	r3, r3, #8
 8006798:	b2da      	uxtb	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	75da      	strb	r2, [r3, #23]
            break;
 800679e:	e01d      	b.n	80067dc <AS5600_Init+0x1a4>
        case AS5600_HYSTERESIS_2LSB:
            a->confRegister[1] &= ~(1UL << 2);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	7ddb      	ldrb	r3, [r3, #23]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	f023 0304 	bic.w	r3, r3, #4
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] |= (1UL << 3);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	7ddb      	ldrb	r3, [r3, #23]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	f043 0308 	orr.w	r3, r3, #8
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	75da      	strb	r2, [r3, #23]
            break;
 80067c0:	e00c      	b.n	80067dc <AS5600_Init+0x1a4>
        case AS5600_HYSTERESIS_3LSB:
            a->confRegister[1] |= ((1UL << 3) | (1UL << 2));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	7ddb      	ldrb	r3, [r3, #23]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	f043 030c 	orr.w	r3, r3, #12
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	75da      	strb	r2, [r3, #23]
            break;
 80067d2:	e003      	b.n	80067dc <AS5600_Init+0x1a4>
        default:
            /* Invalid hysteresis mode specified */
            status = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	73bb      	strb	r3, [r7, #14]
            return status;
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	e1c0      	b.n	8006b5e <AS5600_Init+0x526>
    }
    switch (a->OutputMode) {
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	7c5b      	ldrb	r3, [r3, #17]
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d020      	beq.n	8006826 <AS5600_Init+0x1ee>
 80067e4:	2b03      	cmp	r3, #3
 80067e6:	dc31      	bgt.n	800684c <AS5600_Init+0x214>
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d002      	beq.n	80067f2 <AS5600_Init+0x1ba>
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d009      	beq.n	8006804 <AS5600_Init+0x1cc>
 80067f0:	e02c      	b.n	800684c <AS5600_Init+0x214>
        case AS5600_OUTPUT_STAGE_FULL:
            a->confRegister[1] &= ~((1UL << 5) | (1UL << 4));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	7ddb      	ldrb	r3, [r3, #23]
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	75da      	strb	r2, [r3, #23]
            break;
 8006802:	e027      	b.n	8006854 <AS5600_Init+0x21c>
        case AS5600_OUTPUT_STAGE_REDUCED:
            a->confRegister[1] |= (1UL << 4);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	7ddb      	ldrb	r3, [r3, #23]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	f043 0310 	orr.w	r3, r3, #16
 800680e:	b2da      	uxtb	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 5);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	7ddb      	ldrb	r3, [r3, #23]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f023 0320 	bic.w	r3, r3, #32
 800681e:	b2da      	uxtb	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	75da      	strb	r2, [r3, #23]
            break;
 8006824:	e016      	b.n	8006854 <AS5600_Init+0x21c>
        case AS5600_OUTPUT_STAGE_PWM:
            a->confRegister[1] &= (1UL << 4);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	7ddb      	ldrb	r3, [r3, #23]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	f003 0310 	and.w	r3, r3, #16
 8006830:	b2da      	uxtb	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] |= (1UL << 5);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	7ddb      	ldrb	r3, [r3, #23]
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f043 0320 	orr.w	r3, r3, #32
 8006840:	b2da      	uxtb	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	75da      	strb	r2, [r3, #23]
            pwm = 1;
 8006846:	2301      	movs	r3, #1
 8006848:	73fb      	strb	r3, [r7, #15]
            break;
 800684a:	e003      	b.n	8006854 <AS5600_Init+0x21c>
        default:
            /* Invalid output mode specified */
            status = HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	73bb      	strb	r3, [r7, #14]
            return status;
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	e184      	b.n	8006b5e <AS5600_Init+0x526>
    }
    if (pwm) {
 8006854:	7bfb      	ldrb	r3, [r7, #15]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d048      	beq.n	80068ec <AS5600_Init+0x2b4>
        switch (a->PWMFrequency) {
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	7c9b      	ldrb	r3, [r3, #18]
 800685e:	3b01      	subs	r3, #1
 8006860:	2b03      	cmp	r3, #3
 8006862:	d83f      	bhi.n	80068e4 <AS5600_Init+0x2ac>
 8006864:	a201      	add	r2, pc, #4	@ (adr r2, 800686c <AS5600_Init+0x234>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	0800687d 	.word	0x0800687d
 8006870:	0800688f 	.word	0x0800688f
 8006874:	080068b1 	.word	0x080068b1
 8006878:	080068d3 	.word	0x080068d3
            case AS5600_PWM_FREQUENCY_115HZ:
                a->confRegister[1] &= ~((1UL << 7) | (1UL << 6));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	7ddb      	ldrb	r3, [r3, #23]
 8006880:	b2db      	uxtb	r3, r3
 8006882:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006886:	b2da      	uxtb	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	75da      	strb	r2, [r3, #23]
                break;
 800688c:	e02e      	b.n	80068ec <AS5600_Init+0x2b4>
            case AS5600_PWM_FREQUENCY_230HZ:
                a->confRegister[1] |= (1UL << 6);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	7ddb      	ldrb	r3, [r3, #23]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006898:	b2da      	uxtb	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	75da      	strb	r2, [r3, #23]
                a->confRegister[1] &= ~(1UL << 7);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	7ddb      	ldrb	r3, [r3, #23]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	75da      	strb	r2, [r3, #23]
                break;
 80068ae:	e01d      	b.n	80068ec <AS5600_Init+0x2b4>
            case AS5600_PWM_FREQUENCY_460HZ:
                a->confRegister[1] &= ~(1UL << 6);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	7ddb      	ldrb	r3, [r3, #23]
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	75da      	strb	r2, [r3, #23]
                a->confRegister[1] |= (1UL << 7);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	7ddb      	ldrb	r3, [r3, #23]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	75da      	strb	r2, [r3, #23]
                break;
 80068d0:	e00c      	b.n	80068ec <AS5600_Init+0x2b4>
            case AS5600_PWM_FREQUENCY_920HZ:
                a->confRegister[1] |= ((1UL << 7) | (1UL << 6));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	7ddb      	ldrb	r3, [r3, #23]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	75da      	strb	r2, [r3, #23]
                break;
 80068e2:	e003      	b.n	80068ec <AS5600_Init+0x2b4>
            default:
                /* Invalid PWM frequency specified. */
                status = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	73bb      	strb	r3, [r7, #14]
                return status;
 80068e8:	7bbb      	ldrb	r3, [r7, #14]
 80068ea:	e138      	b.n	8006b5e <AS5600_Init+0x526>
        }
    }
    switch (a->SlowFilter) {
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	7cdb      	ldrb	r3, [r3, #19]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d83e      	bhi.n	8006974 <AS5600_Init+0x33c>
 80068f6:	a201      	add	r2, pc, #4	@ (adr r2, 80068fc <AS5600_Init+0x2c4>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	0800690d 	.word	0x0800690d
 8006900:	0800691f 	.word	0x0800691f
 8006904:	08006941 	.word	0x08006941
 8006908:	08006963 	.word	0x08006963
        case AS5600_SLOW_FILTER_16X:
            a->confRegister[0] &= ~((1UL << 1) | (1UL << 0));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	7d9b      	ldrb	r3, [r3, #22]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	f023 0303 	bic.w	r3, r3, #3
 8006916:	b2da      	uxtb	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	759a      	strb	r2, [r3, #22]
            break;
 800691c:	e02e      	b.n	800697c <AS5600_Init+0x344>
        case AS5600_SLOW_FILTER_8X:
            a->confRegister[0] |= (1UL << 0);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	7d9b      	ldrb	r3, [r3, #22]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	f043 0301 	orr.w	r3, r3, #1
 8006928:	b2da      	uxtb	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] &= ~(1UL << 1);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	7d9b      	ldrb	r3, [r3, #22]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	f023 0302 	bic.w	r3, r3, #2
 8006938:	b2da      	uxtb	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	759a      	strb	r2, [r3, #22]
            break;
 800693e:	e01d      	b.n	800697c <AS5600_Init+0x344>
        case AS5600_SLOW_FILTER_4X:
            a->confRegister[0] &= ~(1UL << 0);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	7d9b      	ldrb	r3, [r3, #22]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f023 0301 	bic.w	r3, r3, #1
 800694a:	b2da      	uxtb	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	7d9b      	ldrb	r3, [r3, #22]
 8006954:	b2db      	uxtb	r3, r3
 8006956:	f043 0302 	orr.w	r3, r3, #2
 800695a:	b2da      	uxtb	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	759a      	strb	r2, [r3, #22]
            break;
 8006960:	e00c      	b.n	800697c <AS5600_Init+0x344>
        case AS5600_SLOW_FILTER_2X:
            a->confRegister[0] |= ((1UL << 1) | (1UL << 0));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	7d9b      	ldrb	r3, [r3, #22]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	f043 0303 	orr.w	r3, r3, #3
 800696c:	b2da      	uxtb	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	759a      	strb	r2, [r3, #22]
            break;
 8006972:	e003      	b.n	800697c <AS5600_Init+0x344>
        default:
            /* Invalid slow filter mode specified */
            status = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	73bb      	strb	r3, [r7, #14]
            return status;
 8006978:	7bbb      	ldrb	r3, [r7, #14]
 800697a:	e0f0      	b.n	8006b5e <AS5600_Init+0x526>
    }
    switch (a->FastFilterThreshold) {
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	7d1b      	ldrb	r3, [r3, #20]
 8006980:	3b01      	subs	r3, #1
 8006982:	2b07      	cmp	r3, #7
 8006984:	f200 808c 	bhi.w	8006aa0 <AS5600_Init+0x468>
 8006988:	a201      	add	r2, pc, #4	@ (adr r2, 8006990 <AS5600_Init+0x358>)
 800698a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698e:	bf00      	nop
 8006990:	080069b1 	.word	0x080069b1
 8006994:	080069c3 	.word	0x080069c3
 8006998:	080069e5 	.word	0x080069e5
 800699c:	08006a07 	.word	0x08006a07
 80069a0:	08006a29 	.word	0x08006a29
 80069a4:	08006a4b 	.word	0x08006a4b
 80069a8:	08006a6d 	.word	0x08006a6d
 80069ac:	08006a8f 	.word	0x08006a8f
        case AS5600_FAST_FILTER_SLOW_ONLY:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	7d9b      	ldrb	r3, [r3, #22]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f023 031c 	bic.w	r3, r3, #28
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	759a      	strb	r2, [r3, #22]
            break;
 80069c0:	e072      	b.n	8006aa8 <AS5600_Init+0x470>
        case AS5600_FAST_FILTER_6LSB:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	7d9b      	ldrb	r3, [r3, #22]
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f023 0318 	bic.w	r3, r3, #24
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 2);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	7d9b      	ldrb	r3, [r3, #22]
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	f043 0304 	orr.w	r3, r3, #4
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	759a      	strb	r2, [r3, #22]
            break;
 80069e2:	e061      	b.n	8006aa8 <AS5600_Init+0x470>
        case AS5600_FAST_FILTER_7LSB:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 2));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	7d9b      	ldrb	r3, [r3, #22]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f023 0314 	bic.w	r3, r3, #20
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 3);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	7d9b      	ldrb	r3, [r3, #22]
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	f043 0308 	orr.w	r3, r3, #8
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	759a      	strb	r2, [r3, #22]
            break;
 8006a04:	e050      	b.n	8006aa8 <AS5600_Init+0x470>
        case AS5600_FAST_FILTER_9LSB:
            a->confRegister[0] &= ~(1UL << 4);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	7d9b      	ldrb	r3, [r3, #22]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	f023 0310 	bic.w	r3, r3, #16
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 3) | (1UL << 2));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	7d9b      	ldrb	r3, [r3, #22]
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f043 030c 	orr.w	r3, r3, #12
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	759a      	strb	r2, [r3, #22]
            break;
 8006a26:	e03f      	b.n	8006aa8 <AS5600_Init+0x470>
        case AS5600_FAST_FILTER_18LSB:
            a->confRegister[0] &= ~((1UL << 3) | (1UL << 2));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	7d9b      	ldrb	r3, [r3, #22]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	f023 030c 	bic.w	r3, r3, #12
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 4);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	7d9b      	ldrb	r3, [r3, #22]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	f043 0310 	orr.w	r3, r3, #16
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	759a      	strb	r2, [r3, #22]
            break;
 8006a48:	e02e      	b.n	8006aa8 <AS5600_Init+0x470>
        case AS5600_FAST_FILTER_21LSB:
            a->confRegister[0] &= ~(1UL << 3);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	7d9b      	ldrb	r3, [r3, #22]
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	f023 0308 	bic.w	r3, r3, #8
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 2));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	7d9b      	ldrb	r3, [r3, #22]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	f043 0314 	orr.w	r3, r3, #20
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	759a      	strb	r2, [r3, #22]
            break;
 8006a6a:	e01d      	b.n	8006aa8 <AS5600_Init+0x470>
        case AS5600_FAST_FILTER_24LSB:
            a->confRegister[0] &= ~(1UL << 2);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7d9b      	ldrb	r3, [r3, #22]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	f023 0304 	bic.w	r3, r3, #4
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	7d9b      	ldrb	r3, [r3, #22]
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	f043 0318 	orr.w	r3, r3, #24
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	759a      	strb	r2, [r3, #22]
            break;
 8006a8c:	e00c      	b.n	8006aa8 <AS5600_Init+0x470>
        case AS5600_FAST_FILTER_10LSB:
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	7d9b      	ldrb	r3, [r3, #22]
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	f043 031c 	orr.w	r3, r3, #28
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	759a      	strb	r2, [r3, #22]
            break;
 8006a9e:	e003      	b.n	8006aa8 <AS5600_Init+0x470>
        default:
            /* Invalid slow filter mode specified */
            status = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	73bb      	strb	r3, [r7, #14]
            return status;
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	e05a      	b.n	8006b5e <AS5600_Init+0x526>
    }
    switch (a->WatchdogTimer) {
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	7d5b      	ldrb	r3, [r3, #21]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d002      	beq.n	8006ab6 <AS5600_Init+0x47e>
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d009      	beq.n	8006ac8 <AS5600_Init+0x490>
 8006ab4:	e011      	b.n	8006ada <AS5600_Init+0x4a2>
        case AS5600_WATCHDOG_OFF:
            a->confRegister[0] &= ~(1UL << 6);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	7d9b      	ldrb	r3, [r3, #22]
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	759a      	strb	r2, [r3, #22]
            break;
 8006ac6:	e00c      	b.n	8006ae2 <AS5600_Init+0x4aa>
        case AS5600_WATCHDOG_ON:
            a->confRegister[0] |= (1UL << 6);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	7d9b      	ldrb	r3, [r3, #22]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	759a      	strb	r2, [r3, #22]
            break;
 8006ad8:	e003      	b.n	8006ae2 <AS5600_Init+0x4aa>
        default:
            /* Invalid watchdog state specified */
            status = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	73bb      	strb	r3, [r7, #14]
            return status;
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	e03d      	b.n	8006b5e <AS5600_Init+0x526>
    }
    if (HAL_I2C_Mem_Write_IT(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, a->confRegister, 2) != HAL_OK) {
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	791b      	ldrb	r3, [r3, #4]
 8006aea:	4619      	mov	r1, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3316      	adds	r3, #22
 8006af0:	2202      	movs	r2, #2
 8006af2:	9201      	str	r2, [sp, #4]
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	2301      	movs	r3, #1
 8006af8:	2207      	movs	r2, #7
 8006afa:	f7fb f981 	bl	8001e00 <HAL_I2C_Mem_Write_IT>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d003      	beq.n	8006b0c <AS5600_Init+0x4d4>
        status = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	73bb      	strb	r3, [r7, #14]
        return status;
 8006b08:	7bbb      	ldrb	r3, [r7, #14]
 8006b0a:	e028      	b.n	8006b5e <AS5600_Init+0x526>
    }
    /* Check magnet status */
    if (AS5600_GetMagnetStatus(a, &mag_status) != HAL_OK) {
 8006b0c:	f107 030d 	add.w	r3, r7, #13
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f857 	bl	8006bc6 <AS5600_GetMagnetStatus>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <AS5600_Init+0x4ee>
        status = HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	73bb      	strb	r3, [r7, #14]
        return status;
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	e01b      	b.n	8006b5e <AS5600_Init+0x526>
    }
    if (!(mag_status & AS5600_MAGNET_DETECTED)) {
 8006b26:	7b7b      	ldrb	r3, [r7, #13]
 8006b28:	f003 0320 	and.w	r3, r3, #32
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d103      	bne.n	8006b38 <AS5600_Init+0x500>
        /* Magnet not detected */
        status = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	73bb      	strb	r3, [r7, #14]
        return status;
 8006b34:	7bbb      	ldrb	r3, [r7, #14]
 8006b36:	e012      	b.n	8006b5e <AS5600_Init+0x526>
    }
    if ((mag_status & AS5600_AGC_MIN_GAIN_OVERFLOW)) {
 8006b38:	7b7b      	ldrb	r3, [r7, #13]
 8006b3a:	f003 0308 	and.w	r3, r3, #8
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <AS5600_Init+0x512>
        /* B-field is too strong */
        status = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	73bb      	strb	r3, [r7, #14]
        return status;
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	e009      	b.n	8006b5e <AS5600_Init+0x526>
    }
    if ((mag_status & AS5600_AGC_MAX_GAIN_OVERFLOW)) {
 8006b4a:	7b7b      	ldrb	r3, [r7, #13]
 8006b4c:	f003 0310 	and.w	r3, r3, #16
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <AS5600_Init+0x524>
        /* B-field is too weak */
        status = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	73bb      	strb	r3, [r7, #14]
        return status;
 8006b58:	7bbb      	ldrb	r3, [r7, #14]
 8006b5a:	e000      	b.n	8006b5e <AS5600_Init+0x526>
    }
    /* Write */

    return status;
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop

08006b68 <AS5600_GetRawAngle>:
    }

    return status;
}

HAL_StatusTypeDef AS5600_GetRawAngle(AS5600_TypeDef *const a, uint16_t *const angle) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af04      	add	r7, sp, #16
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2] = {0};
 8006b76:	2300      	movs	r3, #0
 8006b78:	81bb      	strh	r3, [r7, #12]
    status = HAL_I2C_Mem_Read(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_RAW_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, 100);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6818      	ldr	r0, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	791b      	ldrb	r3, [r3, #4]
 8006b82:	4619      	mov	r1, r3
 8006b84:	2364      	movs	r3, #100	@ 0x64
 8006b86:	9302      	str	r3, [sp, #8]
 8006b88:	2302      	movs	r3, #2
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	f107 030c 	add.w	r3, r7, #12
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	2301      	movs	r3, #1
 8006b94:	220c      	movs	r2, #12
 8006b96:	f7fa febf 	bl	8001918 <HAL_I2C_Mem_Read>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <AS5600_GetRawAngle+0x40>
        status = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	73fb      	strb	r3, [r7, #15]
    }
    *angle = ((data[0] << 8) | data[1]);
 8006ba8:	7b3b      	ldrb	r3, [r7, #12]
 8006baa:	021b      	lsls	r3, r3, #8
 8006bac:	b21a      	sxth	r2, r3
 8006bae:	7b7b      	ldrb	r3, [r7, #13]
 8006bb0:	b21b      	sxth	r3, r3
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	b21b      	sxth	r3, r3
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	801a      	strh	r2, [r3, #0]
    return status;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <AS5600_GetMagnetStatus>:
    *angle = ((data[0] << 8) | data[1]);

    return status;
}

HAL_StatusTypeDef AS5600_GetMagnetStatus(AS5600_TypeDef *const a, uint8_t *const stat) {
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b086      	sub	sp, #24
 8006bca:	af02      	add	r7, sp, #8
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Read_IT(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_STATUS,
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6818      	ldr	r0, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	791b      	ldrb	r3, [r3, #4]
 8006bdc:	4619      	mov	r1, r3
 8006bde:	2301      	movs	r3, #1
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	2301      	movs	r3, #1
 8006be8:	220b      	movs	r2, #11
 8006bea:	f7fb f9b5 	bl	8001f58 <HAL_I2C_Mem_Read_IT>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <AS5600_GetMagnetStatus+0x32>
                            I2C_MEMADD_SIZE_8BIT, stat, 1) != HAL_OK) {
        status = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <encoder_init>:

AS5600_TypeDef Encoder;
extern I2C_HandleTypeDef hi2c1;
static uint8_t init_success = FALSE;

void encoder_init(){
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
	Encoder.i2cHandle = &hi2c1;
 8006c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c40 <encoder_init+0x3c>)
 8006c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8006c44 <encoder_init+0x40>)
 8006c0e:	601a      	str	r2, [r3, #0]
	Encoder.i2cAddr = ENCODER_ADDRESS;
 8006c10:	4b0b      	ldr	r3, [pc, #44]	@ (8006c40 <encoder_init+0x3c>)
 8006c12:	2236      	movs	r2, #54	@ 0x36
 8006c14:	711a      	strb	r2, [r3, #4]
	Encoder.DirPort = ENCODER_PORT;
 8006c16:	4b0a      	ldr	r3, [pc, #40]	@ (8006c40 <encoder_init+0x3c>)
 8006c18:	4a0b      	ldr	r2, [pc, #44]	@ (8006c48 <encoder_init+0x44>)
 8006c1a:	609a      	str	r2, [r3, #8]
	Encoder.DirPin = GPIO_PIN_5;
 8006c1c:	4b08      	ldr	r3, [pc, #32]	@ (8006c40 <encoder_init+0x3c>)
 8006c1e:	2220      	movs	r2, #32
 8006c20:	819a      	strh	r2, [r3, #12]

	HAL_StatusTypeDef status = AS5600_Init(&Encoder);
 8006c22:	4807      	ldr	r0, [pc, #28]	@ (8006c40 <encoder_init+0x3c>)
 8006c24:	f7ff fd08 	bl	8006638 <AS5600_Init>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	71fb      	strb	r3, [r7, #7]
	if(status == HAL_OK) init_success = TRUE;
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d102      	bne.n	8006c38 <encoder_init+0x34>
 8006c32:	4b06      	ldr	r3, [pc, #24]	@ (8006c4c <encoder_init+0x48>)
 8006c34:	2201      	movs	r2, #1
 8006c36:	701a      	strb	r2, [r3, #0]
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20000ce0 	.word	0x20000ce0
 8006c44:	20000b34 	.word	0x20000b34
 8006c48:	40010c00 	.word	0x40010c00
 8006c4c:	20000cf8 	.word	0x20000cf8

08006c50 <encoder_getAngle>:

void encoder_getAngle(uint16_t* res){
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
	uint16_t result = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = AS5600_GetRawAngle(&Encoder, &result);
 8006c5c:	f107 030c 	add.w	r3, r7, #12
 8006c60:	4619      	mov	r1, r3
 8006c62:	4807      	ldr	r0, [pc, #28]	@ (8006c80 <encoder_getAngle+0x30>)
 8006c64:	f7ff ff80 	bl	8006b68 <AS5600_GetRawAngle>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	73fb      	strb	r3, [r7, #15]
	if(status == HAL_OK){
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d102      	bne.n	8006c78 <encoder_getAngle+0x28>
		*res = result;
 8006c72:	89ba      	ldrh	r2, [r7, #12]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	801a      	strh	r2, [r3, #0]
	}
}
 8006c78:	bf00      	nop
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	20000ce0 	.word	0x20000ce0

08006c84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c96:	2b84      	cmp	r3, #132	@ 0x84
 8006c98:	d005      	beq.n	8006ca6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006c9a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	3303      	adds	r3, #3
 8006ca4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr

08006cb2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006cb6:	f000 faf7 	bl	80072a8 <vTaskStartScheduler>
  
  return osOK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc2:	b089      	sub	sp, #36	@ 0x24
 8006cc4:	af04      	add	r7, sp, #16
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d020      	beq.n	8006d14 <osThreadCreate+0x54>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d01c      	beq.n	8006d14 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685c      	ldr	r4, [r3, #4]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691e      	ldr	r6, [r3, #16]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7ff ffc9 	bl	8006c84 <makeFreeRtosPriority>
 8006cf2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cfc:	9202      	str	r2, [sp, #8]
 8006cfe:	9301      	str	r3, [sp, #4]
 8006d00:	9100      	str	r1, [sp, #0]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	4632      	mov	r2, r6
 8006d06:	4629      	mov	r1, r5
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f000 f8e8 	bl	8006ede <xTaskCreateStatic>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	e01c      	b.n	8006d4e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685c      	ldr	r4, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d20:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff ffab 	bl	8006c84 <makeFreeRtosPriority>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	f107 030c 	add.w	r3, r7, #12
 8006d34:	9301      	str	r3, [sp, #4]
 8006d36:	9200      	str	r2, [sp, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	4632      	mov	r2, r6
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f000 f92d 	bl	8006f9e <xTaskCreate>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d001      	beq.n	8006d4e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	e000      	b.n	8006d50 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d58 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <osDelay+0x16>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	e000      	b.n	8006d70 <osDelay+0x18>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fa63 	bl	800723c <vTaskDelay>
  
  return osOK;
 8006d76:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f103 0208 	add.w	r2, r3, #8
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f04f 32ff 	mov.w	r2, #4294967295
 8006d98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f103 0208 	add.w	r2, r3, #8
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f103 0208 	add.w	r2, r3, #8
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bc80      	pop	{r7}
 8006dbc:	4770      	bx	lr

08006dbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr

08006dd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	601a      	str	r2, [r3, #0]
}
 8006e12:	bf00      	nop
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bc80      	pop	{r7}
 8006e1a:	4770      	bx	lr

08006e1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e32:	d103      	bne.n	8006e3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	e00c      	b.n	8006e56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3308      	adds	r3, #8
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	e002      	b.n	8006e4a <vListInsert+0x2e>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d2f6      	bcs.n	8006e44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	601a      	str	r2, [r3, #0]
}
 8006e82:	bf00      	nop
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bc80      	pop	{r7}
 8006e8a:	4770      	bx	lr

08006e8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6892      	ldr	r2, [r2, #8]
 8006ea2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6852      	ldr	r2, [r2, #4]
 8006eac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d103      	bne.n	8006ec0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	1e5a      	subs	r2, r3, #1
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr

08006ede <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b08e      	sub	sp, #56	@ 0x38
 8006ee2:	af04      	add	r7, sp, #16
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	607a      	str	r2, [r7, #4]
 8006eea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10b      	bne.n	8006f0a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f04:	bf00      	nop
 8006f06:	bf00      	nop
 8006f08:	e7fd      	b.n	8006f06 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10b      	bne.n	8006f28 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	61fb      	str	r3, [r7, #28]
}
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	e7fd      	b.n	8006f24 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f28:	23a0      	movs	r3, #160	@ 0xa0
 8006f2a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006f30:	d00b      	beq.n	8006f4a <xTaskCreateStatic+0x6c>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	61bb      	str	r3, [r7, #24]
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	e7fd      	b.n	8006f46 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01e      	beq.n	8006f90 <xTaskCreateStatic+0xb2>
 8006f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01b      	beq.n	8006f90 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f60:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f64:	2202      	movs	r2, #2
 8006f66:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9303      	str	r3, [sp, #12]
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	9302      	str	r3, [sp, #8]
 8006f72:	f107 0314 	add.w	r3, r7, #20
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	68b9      	ldr	r1, [r7, #8]
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 f850 	bl	8007028 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f8a:	f000 f8ed 	bl	8007168 <prvAddNewTaskToReadyList>
 8006f8e:	e001      	b.n	8006f94 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006f90:	2300      	movs	r3, #0
 8006f92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f94:	697b      	ldr	r3, [r7, #20]
	}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3728      	adds	r7, #40	@ 0x28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b08c      	sub	sp, #48	@ 0x30
 8006fa2:	af04      	add	r7, sp, #16
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	603b      	str	r3, [r7, #0]
 8006faa:	4613      	mov	r3, r2
 8006fac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 fe9c 	bl	8007cf0 <pvPortMalloc>
 8006fb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00e      	beq.n	8006fde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006fc0:	20a0      	movs	r0, #160	@ 0xa0
 8006fc2:	f000 fe95 	bl	8007cf0 <pvPortMalloc>
 8006fc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fd4:	e005      	b.n	8006fe2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006fd6:	6978      	ldr	r0, [r7, #20]
 8006fd8:	f000 ff58 	bl	8007e8c <vPortFree>
 8006fdc:	e001      	b.n	8006fe2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d017      	beq.n	8007018 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9303      	str	r3, [sp, #12]
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	9302      	str	r3, [sp, #8]
 8006ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffc:	9301      	str	r3, [sp, #4]
 8006ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 f80e 	bl	8007028 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800700c:	69f8      	ldr	r0, [r7, #28]
 800700e:	f000 f8ab 	bl	8007168 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007012:	2301      	movs	r3, #1
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	e002      	b.n	800701e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007018:	f04f 33ff 	mov.w	r3, #4294967295
 800701c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800701e:	69bb      	ldr	r3, [r7, #24]
	}
 8007020:	4618      	mov	r0, r3
 8007022:	3720      	adds	r7, #32
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007038:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007040:	3b01      	subs	r3, #1
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	f023 0307 	bic.w	r3, r3, #7
 800704e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00b      	beq.n	8007072 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	617b      	str	r3, [r7, #20]
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	e7fd      	b.n	800706e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01f      	beq.n	80070b8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007078:	2300      	movs	r3, #0
 800707a:	61fb      	str	r3, [r7, #28]
 800707c:	e012      	b.n	80070a4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	4413      	add	r3, r2
 8007084:	7819      	ldrb	r1, [r3, #0]
 8007086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	4413      	add	r3, r2
 800708c:	3334      	adds	r3, #52	@ 0x34
 800708e:	460a      	mov	r2, r1
 8007090:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	4413      	add	r3, r2
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d006      	beq.n	80070ac <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	3301      	adds	r3, #1
 80070a2:	61fb      	str	r3, [r7, #28]
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	2b0f      	cmp	r3, #15
 80070a8:	d9e9      	bls.n	800707e <prvInitialiseNewTask+0x56>
 80070aa:	e000      	b.n	80070ae <prvInitialiseNewTask+0x86>
			{
				break;
 80070ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070b6:	e003      	b.n	80070c0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80070b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c2:	2b06      	cmp	r3, #6
 80070c4:	d901      	bls.n	80070ca <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070c6:	2306      	movs	r3, #6
 80070c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070d4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80070d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d8:	2200      	movs	r2, #0
 80070da:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070de:	3304      	adds	r3, #4
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff fe6c 	bl	8006dbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e8:	3318      	adds	r3, #24
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff fe67 	bl	8006dbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f8:	f1c3 0207 	rsb	r2, r3, #7
 80070fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007104:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007108:	2200      	movs	r2, #0
 800710a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800710e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007110:	2200      	movs	r2, #0
 8007112:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	334c      	adds	r3, #76	@ 0x4c
 800711a:	224c      	movs	r2, #76	@ 0x4c
 800711c:	2100      	movs	r1, #0
 800711e:	4618      	mov	r0, r3
 8007120:	f001 f99a 	bl	8008458 <memset>
 8007124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007126:	4a0d      	ldr	r2, [pc, #52]	@ (800715c <prvInitialiseNewTask+0x134>)
 8007128:	651a      	str	r2, [r3, #80]	@ 0x50
 800712a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712c:	4a0c      	ldr	r2, [pc, #48]	@ (8007160 <prvInitialiseNewTask+0x138>)
 800712e:	655a      	str	r2, [r3, #84]	@ 0x54
 8007130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007132:	4a0c      	ldr	r2, [pc, #48]	@ (8007164 <prvInitialiseNewTask+0x13c>)
 8007134:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	68f9      	ldr	r1, [r7, #12]
 800713a:	69b8      	ldr	r0, [r7, #24]
 800713c:	f000 fc28 	bl	8007990 <pxPortInitialiseStack>
 8007140:	4602      	mov	r2, r0
 8007142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007144:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800714c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007152:	bf00      	nop
 8007154:	3720      	adds	r7, #32
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	20001a64 	.word	0x20001a64
 8007160:	20001acc 	.word	0x20001acc
 8007164:	20001b34 	.word	0x20001b34

08007168 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007170:	f000 fcfc 	bl	8007b6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007174:	4b2a      	ldr	r3, [pc, #168]	@ (8007220 <prvAddNewTaskToReadyList+0xb8>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3301      	adds	r3, #1
 800717a:	4a29      	ldr	r2, [pc, #164]	@ (8007220 <prvAddNewTaskToReadyList+0xb8>)
 800717c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800717e:	4b29      	ldr	r3, [pc, #164]	@ (8007224 <prvAddNewTaskToReadyList+0xbc>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d109      	bne.n	800719a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007186:	4a27      	ldr	r2, [pc, #156]	@ (8007224 <prvAddNewTaskToReadyList+0xbc>)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800718c:	4b24      	ldr	r3, [pc, #144]	@ (8007220 <prvAddNewTaskToReadyList+0xb8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d110      	bne.n	80071b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007194:	f000 fad2 	bl	800773c <prvInitialiseTaskLists>
 8007198:	e00d      	b.n	80071b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800719a:	4b23      	ldr	r3, [pc, #140]	@ (8007228 <prvAddNewTaskToReadyList+0xc0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d109      	bne.n	80071b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071a2:	4b20      	ldr	r3, [pc, #128]	@ (8007224 <prvAddNewTaskToReadyList+0xbc>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d802      	bhi.n	80071b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007224 <prvAddNewTaskToReadyList+0xbc>)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071b6:	4b1d      	ldr	r3, [pc, #116]	@ (800722c <prvAddNewTaskToReadyList+0xc4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3301      	adds	r3, #1
 80071bc:	4a1b      	ldr	r2, [pc, #108]	@ (800722c <prvAddNewTaskToReadyList+0xc4>)
 80071be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c4:	2201      	movs	r2, #1
 80071c6:	409a      	lsls	r2, r3
 80071c8:	4b19      	ldr	r3, [pc, #100]	@ (8007230 <prvAddNewTaskToReadyList+0xc8>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	4a18      	ldr	r2, [pc, #96]	@ (8007230 <prvAddNewTaskToReadyList+0xc8>)
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4a15      	ldr	r2, [pc, #84]	@ (8007234 <prvAddNewTaskToReadyList+0xcc>)
 80071e0:	441a      	add	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	3304      	adds	r3, #4
 80071e6:	4619      	mov	r1, r3
 80071e8:	4610      	mov	r0, r2
 80071ea:	f7ff fdf4 	bl	8006dd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071ee:	f000 fced 	bl	8007bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007228 <prvAddNewTaskToReadyList+0xc0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00e      	beq.n	8007218 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007224 <prvAddNewTaskToReadyList+0xbc>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007204:	429a      	cmp	r2, r3
 8007206:	d207      	bcs.n	8007218 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007208:	4b0b      	ldr	r3, [pc, #44]	@ (8007238 <prvAddNewTaskToReadyList+0xd0>)
 800720a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007218:	bf00      	nop
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20000dfc 	.word	0x20000dfc
 8007224:	20000cfc 	.word	0x20000cfc
 8007228:	20000e08 	.word	0x20000e08
 800722c:	20000e18 	.word	0x20000e18
 8007230:	20000e04 	.word	0x20000e04
 8007234:	20000d00 	.word	0x20000d00
 8007238:	e000ed04 	.word	0xe000ed04

0800723c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d018      	beq.n	8007280 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800724e:	4b14      	ldr	r3, [pc, #80]	@ (80072a0 <vTaskDelay+0x64>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00b      	beq.n	800726e <vTaskDelay+0x32>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60bb      	str	r3, [r7, #8]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800726e:	f000 f885 	bl	800737c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007272:	2100      	movs	r1, #0
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fb25 	bl	80078c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800727a:	f000 f88d 	bl	8007398 <xTaskResumeAll>
 800727e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d107      	bne.n	8007296 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007286:	4b07      	ldr	r3, [pc, #28]	@ (80072a4 <vTaskDelay+0x68>)
 8007288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007296:	bf00      	nop
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20000e24 	.word	0x20000e24
 80072a4:	e000ed04 	.word	0xe000ed04

080072a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08a      	sub	sp, #40	@ 0x28
 80072ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072b6:	463a      	mov	r2, r7
 80072b8:	1d39      	adds	r1, r7, #4
 80072ba:	f107 0308 	add.w	r3, r7, #8
 80072be:	4618      	mov	r0, r3
 80072c0:	f7f8 fffc 	bl	80002bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	9202      	str	r2, [sp, #8]
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	2300      	movs	r3, #0
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	2300      	movs	r3, #0
 80072d4:	460a      	mov	r2, r1
 80072d6:	4921      	ldr	r1, [pc, #132]	@ (800735c <vTaskStartScheduler+0xb4>)
 80072d8:	4821      	ldr	r0, [pc, #132]	@ (8007360 <vTaskStartScheduler+0xb8>)
 80072da:	f7ff fe00 	bl	8006ede <xTaskCreateStatic>
 80072de:	4603      	mov	r3, r0
 80072e0:	4a20      	ldr	r2, [pc, #128]	@ (8007364 <vTaskStartScheduler+0xbc>)
 80072e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072e4:	4b1f      	ldr	r3, [pc, #124]	@ (8007364 <vTaskStartScheduler+0xbc>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072ec:	2301      	movs	r3, #1
 80072ee:	617b      	str	r3, [r7, #20]
 80072f0:	e001      	b.n	80072f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d11b      	bne.n	8007334 <vTaskStartScheduler+0x8c>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	613b      	str	r3, [r7, #16]
}
 800730e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007310:	4b15      	ldr	r3, [pc, #84]	@ (8007368 <vTaskStartScheduler+0xc0>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	334c      	adds	r3, #76	@ 0x4c
 8007316:	4a15      	ldr	r2, [pc, #84]	@ (800736c <vTaskStartScheduler+0xc4>)
 8007318:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800731a:	4b15      	ldr	r3, [pc, #84]	@ (8007370 <vTaskStartScheduler+0xc8>)
 800731c:	f04f 32ff 	mov.w	r2, #4294967295
 8007320:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007322:	4b14      	ldr	r3, [pc, #80]	@ (8007374 <vTaskStartScheduler+0xcc>)
 8007324:	2201      	movs	r2, #1
 8007326:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007328:	4b13      	ldr	r3, [pc, #76]	@ (8007378 <vTaskStartScheduler+0xd0>)
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800732e:	f000 fbab 	bl	8007a88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007332:	e00f      	b.n	8007354 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733a:	d10b      	bne.n	8007354 <vTaskStartScheduler+0xac>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	60fb      	str	r3, [r7, #12]
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	e7fd      	b.n	8007350 <vTaskStartScheduler+0xa8>
}
 8007354:	bf00      	nop
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	08008680 	.word	0x08008680
 8007360:	0800770d 	.word	0x0800770d
 8007364:	20000e20 	.word	0x20000e20
 8007368:	20000cfc 	.word	0x20000cfc
 800736c:	20000014 	.word	0x20000014
 8007370:	20000e1c 	.word	0x20000e1c
 8007374:	20000e08 	.word	0x20000e08
 8007378:	20000e00 	.word	0x20000e00

0800737c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007380:	4b04      	ldr	r3, [pc, #16]	@ (8007394 <vTaskSuspendAll+0x18>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3301      	adds	r3, #1
 8007386:	4a03      	ldr	r2, [pc, #12]	@ (8007394 <vTaskSuspendAll+0x18>)
 8007388:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800738a:	bf00      	nop
 800738c:	46bd      	mov	sp, r7
 800738e:	bc80      	pop	{r7}
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20000e24 	.word	0x20000e24

08007398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073a6:	4b42      	ldr	r3, [pc, #264]	@ (80074b0 <xTaskResumeAll+0x118>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10b      	bne.n	80073c6 <xTaskResumeAll+0x2e>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	603b      	str	r3, [r7, #0]
}
 80073c0:	bf00      	nop
 80073c2:	bf00      	nop
 80073c4:	e7fd      	b.n	80073c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073c6:	f000 fbd1 	bl	8007b6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073ca:	4b39      	ldr	r3, [pc, #228]	@ (80074b0 <xTaskResumeAll+0x118>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	4a37      	ldr	r2, [pc, #220]	@ (80074b0 <xTaskResumeAll+0x118>)
 80073d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073d4:	4b36      	ldr	r3, [pc, #216]	@ (80074b0 <xTaskResumeAll+0x118>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d161      	bne.n	80074a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073dc:	4b35      	ldr	r3, [pc, #212]	@ (80074b4 <xTaskResumeAll+0x11c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d05d      	beq.n	80074a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073e4:	e02e      	b.n	8007444 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e6:	4b34      	ldr	r3, [pc, #208]	@ (80074b8 <xTaskResumeAll+0x120>)
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3318      	adds	r3, #24
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff fd4a 	bl	8006e8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3304      	adds	r3, #4
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7ff fd45 	bl	8006e8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007406:	2201      	movs	r2, #1
 8007408:	409a      	lsls	r2, r3
 800740a:	4b2c      	ldr	r3, [pc, #176]	@ (80074bc <xTaskResumeAll+0x124>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4313      	orrs	r3, r2
 8007410:	4a2a      	ldr	r2, [pc, #168]	@ (80074bc <xTaskResumeAll+0x124>)
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007418:	4613      	mov	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4a27      	ldr	r2, [pc, #156]	@ (80074c0 <xTaskResumeAll+0x128>)
 8007422:	441a      	add	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3304      	adds	r3, #4
 8007428:	4619      	mov	r1, r3
 800742a:	4610      	mov	r0, r2
 800742c:	f7ff fcd3 	bl	8006dd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007434:	4b23      	ldr	r3, [pc, #140]	@ (80074c4 <xTaskResumeAll+0x12c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743a:	429a      	cmp	r2, r3
 800743c:	d302      	bcc.n	8007444 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800743e:	4b22      	ldr	r3, [pc, #136]	@ (80074c8 <xTaskResumeAll+0x130>)
 8007440:	2201      	movs	r2, #1
 8007442:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007444:	4b1c      	ldr	r3, [pc, #112]	@ (80074b8 <xTaskResumeAll+0x120>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1cc      	bne.n	80073e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007452:	f000 fa17 	bl	8007884 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007456:	4b1d      	ldr	r3, [pc, #116]	@ (80074cc <xTaskResumeAll+0x134>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d010      	beq.n	8007484 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007462:	f000 f837 	bl	80074d4 <xTaskIncrementTick>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800746c:	4b16      	ldr	r3, [pc, #88]	@ (80074c8 <xTaskResumeAll+0x130>)
 800746e:	2201      	movs	r2, #1
 8007470:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3b01      	subs	r3, #1
 8007476:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1f1      	bne.n	8007462 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800747e:	4b13      	ldr	r3, [pc, #76]	@ (80074cc <xTaskResumeAll+0x134>)
 8007480:	2200      	movs	r2, #0
 8007482:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007484:	4b10      	ldr	r3, [pc, #64]	@ (80074c8 <xTaskResumeAll+0x130>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d009      	beq.n	80074a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800748c:	2301      	movs	r3, #1
 800748e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007490:	4b0f      	ldr	r3, [pc, #60]	@ (80074d0 <xTaskResumeAll+0x138>)
 8007492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074a0:	f000 fb94 	bl	8007bcc <vPortExitCritical>

	return xAlreadyYielded;
 80074a4:	68bb      	ldr	r3, [r7, #8]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	20000e24 	.word	0x20000e24
 80074b4:	20000dfc 	.word	0x20000dfc
 80074b8:	20000dbc 	.word	0x20000dbc
 80074bc:	20000e04 	.word	0x20000e04
 80074c0:	20000d00 	.word	0x20000d00
 80074c4:	20000cfc 	.word	0x20000cfc
 80074c8:	20000e10 	.word	0x20000e10
 80074cc:	20000e0c 	.word	0x20000e0c
 80074d0:	e000ed04 	.word	0xe000ed04

080074d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074da:	2300      	movs	r3, #0
 80074dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074de:	4b4f      	ldr	r3, [pc, #316]	@ (800761c <xTaskIncrementTick+0x148>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f040 808f 	bne.w	8007606 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074e8:	4b4d      	ldr	r3, [pc, #308]	@ (8007620 <xTaskIncrementTick+0x14c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3301      	adds	r3, #1
 80074ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074f0:	4a4b      	ldr	r2, [pc, #300]	@ (8007620 <xTaskIncrementTick+0x14c>)
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d121      	bne.n	8007540 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80074fc:	4b49      	ldr	r3, [pc, #292]	@ (8007624 <xTaskIncrementTick+0x150>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00b      	beq.n	800751e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	603b      	str	r3, [r7, #0]
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	e7fd      	b.n	800751a <xTaskIncrementTick+0x46>
 800751e:	4b41      	ldr	r3, [pc, #260]	@ (8007624 <xTaskIncrementTick+0x150>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	60fb      	str	r3, [r7, #12]
 8007524:	4b40      	ldr	r3, [pc, #256]	@ (8007628 <xTaskIncrementTick+0x154>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a3e      	ldr	r2, [pc, #248]	@ (8007624 <xTaskIncrementTick+0x150>)
 800752a:	6013      	str	r3, [r2, #0]
 800752c:	4a3e      	ldr	r2, [pc, #248]	@ (8007628 <xTaskIncrementTick+0x154>)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	4b3e      	ldr	r3, [pc, #248]	@ (800762c <xTaskIncrementTick+0x158>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3301      	adds	r3, #1
 8007538:	4a3c      	ldr	r2, [pc, #240]	@ (800762c <xTaskIncrementTick+0x158>)
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	f000 f9a2 	bl	8007884 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007540:	4b3b      	ldr	r3, [pc, #236]	@ (8007630 <xTaskIncrementTick+0x15c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	429a      	cmp	r2, r3
 8007548:	d348      	bcc.n	80075dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800754a:	4b36      	ldr	r3, [pc, #216]	@ (8007624 <xTaskIncrementTick+0x150>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d104      	bne.n	800755e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007554:	4b36      	ldr	r3, [pc, #216]	@ (8007630 <xTaskIncrementTick+0x15c>)
 8007556:	f04f 32ff 	mov.w	r2, #4294967295
 800755a:	601a      	str	r2, [r3, #0]
					break;
 800755c:	e03e      	b.n	80075dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800755e:	4b31      	ldr	r3, [pc, #196]	@ (8007624 <xTaskIncrementTick+0x150>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	429a      	cmp	r2, r3
 8007574:	d203      	bcs.n	800757e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007576:	4a2e      	ldr	r2, [pc, #184]	@ (8007630 <xTaskIncrementTick+0x15c>)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800757c:	e02e      	b.n	80075dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	3304      	adds	r3, #4
 8007582:	4618      	mov	r0, r3
 8007584:	f7ff fc82 	bl	8006e8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800758c:	2b00      	cmp	r3, #0
 800758e:	d004      	beq.n	800759a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	3318      	adds	r3, #24
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff fc79 	bl	8006e8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	2201      	movs	r2, #1
 80075a0:	409a      	lsls	r2, r3
 80075a2:	4b24      	ldr	r3, [pc, #144]	@ (8007634 <xTaskIncrementTick+0x160>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	4a22      	ldr	r2, [pc, #136]	@ (8007634 <xTaskIncrementTick+0x160>)
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075b0:	4613      	mov	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4a1f      	ldr	r2, [pc, #124]	@ (8007638 <xTaskIncrementTick+0x164>)
 80075ba:	441a      	add	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	3304      	adds	r3, #4
 80075c0:	4619      	mov	r1, r3
 80075c2:	4610      	mov	r0, r2
 80075c4:	f7ff fc07 	bl	8006dd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075cc:	4b1b      	ldr	r3, [pc, #108]	@ (800763c <xTaskIncrementTick+0x168>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d3b9      	bcc.n	800754a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80075d6:	2301      	movs	r3, #1
 80075d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075da:	e7b6      	b.n	800754a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075dc:	4b17      	ldr	r3, [pc, #92]	@ (800763c <xTaskIncrementTick+0x168>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e2:	4915      	ldr	r1, [pc, #84]	@ (8007638 <xTaskIncrementTick+0x164>)
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d901      	bls.n	80075f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80075f4:	2301      	movs	r3, #1
 80075f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80075f8:	4b11      	ldr	r3, [pc, #68]	@ (8007640 <xTaskIncrementTick+0x16c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d007      	beq.n	8007610 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007600:	2301      	movs	r3, #1
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	e004      	b.n	8007610 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007606:	4b0f      	ldr	r3, [pc, #60]	@ (8007644 <xTaskIncrementTick+0x170>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3301      	adds	r3, #1
 800760c:	4a0d      	ldr	r2, [pc, #52]	@ (8007644 <xTaskIncrementTick+0x170>)
 800760e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007610:	697b      	ldr	r3, [r7, #20]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20000e24 	.word	0x20000e24
 8007620:	20000e00 	.word	0x20000e00
 8007624:	20000db4 	.word	0x20000db4
 8007628:	20000db8 	.word	0x20000db8
 800762c:	20000e14 	.word	0x20000e14
 8007630:	20000e1c 	.word	0x20000e1c
 8007634:	20000e04 	.word	0x20000e04
 8007638:	20000d00 	.word	0x20000d00
 800763c:	20000cfc 	.word	0x20000cfc
 8007640:	20000e10 	.word	0x20000e10
 8007644:	20000e0c 	.word	0x20000e0c

08007648 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800764e:	4b29      	ldr	r3, [pc, #164]	@ (80076f4 <vTaskSwitchContext+0xac>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007656:	4b28      	ldr	r3, [pc, #160]	@ (80076f8 <vTaskSwitchContext+0xb0>)
 8007658:	2201      	movs	r2, #1
 800765a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800765c:	e045      	b.n	80076ea <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800765e:	4b26      	ldr	r3, [pc, #152]	@ (80076f8 <vTaskSwitchContext+0xb0>)
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007664:	4b25      	ldr	r3, [pc, #148]	@ (80076fc <vTaskSwitchContext+0xb4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	fab3 f383 	clz	r3, r3
 8007670:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007672:	7afb      	ldrb	r3, [r7, #11]
 8007674:	f1c3 031f 	rsb	r3, r3, #31
 8007678:	617b      	str	r3, [r7, #20]
 800767a:	4921      	ldr	r1, [pc, #132]	@ (8007700 <vTaskSwitchContext+0xb8>)
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	440b      	add	r3, r1
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10b      	bne.n	80076a6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	607b      	str	r3, [r7, #4]
}
 80076a0:	bf00      	nop
 80076a2:	bf00      	nop
 80076a4:	e7fd      	b.n	80076a2 <vTaskSwitchContext+0x5a>
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4613      	mov	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4a13      	ldr	r2, [pc, #76]	@ (8007700 <vTaskSwitchContext+0xb8>)
 80076b2:	4413      	add	r3, r2
 80076b4:	613b      	str	r3, [r7, #16]
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	605a      	str	r2, [r3, #4]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	3308      	adds	r3, #8
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d104      	bne.n	80076d6 <vTaskSwitchContext+0x8e>
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	605a      	str	r2, [r3, #4]
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	4a09      	ldr	r2, [pc, #36]	@ (8007704 <vTaskSwitchContext+0xbc>)
 80076de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076e0:	4b08      	ldr	r3, [pc, #32]	@ (8007704 <vTaskSwitchContext+0xbc>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	334c      	adds	r3, #76	@ 0x4c
 80076e6:	4a08      	ldr	r2, [pc, #32]	@ (8007708 <vTaskSwitchContext+0xc0>)
 80076e8:	6013      	str	r3, [r2, #0]
}
 80076ea:	bf00      	nop
 80076ec:	371c      	adds	r7, #28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bc80      	pop	{r7}
 80076f2:	4770      	bx	lr
 80076f4:	20000e24 	.word	0x20000e24
 80076f8:	20000e10 	.word	0x20000e10
 80076fc:	20000e04 	.word	0x20000e04
 8007700:	20000d00 	.word	0x20000d00
 8007704:	20000cfc 	.word	0x20000cfc
 8007708:	20000014 	.word	0x20000014

0800770c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007714:	f000 f852 	bl	80077bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007718:	4b06      	ldr	r3, [pc, #24]	@ (8007734 <prvIdleTask+0x28>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d9f9      	bls.n	8007714 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007720:	4b05      	ldr	r3, [pc, #20]	@ (8007738 <prvIdleTask+0x2c>)
 8007722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007730:	e7f0      	b.n	8007714 <prvIdleTask+0x8>
 8007732:	bf00      	nop
 8007734:	20000d00 	.word	0x20000d00
 8007738:	e000ed04 	.word	0xe000ed04

0800773c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007742:	2300      	movs	r3, #0
 8007744:	607b      	str	r3, [r7, #4]
 8007746:	e00c      	b.n	8007762 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4a12      	ldr	r2, [pc, #72]	@ (800779c <prvInitialiseTaskLists+0x60>)
 8007754:	4413      	add	r3, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff fb12 	bl	8006d80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	3301      	adds	r3, #1
 8007760:	607b      	str	r3, [r7, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b06      	cmp	r3, #6
 8007766:	d9ef      	bls.n	8007748 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007768:	480d      	ldr	r0, [pc, #52]	@ (80077a0 <prvInitialiseTaskLists+0x64>)
 800776a:	f7ff fb09 	bl	8006d80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800776e:	480d      	ldr	r0, [pc, #52]	@ (80077a4 <prvInitialiseTaskLists+0x68>)
 8007770:	f7ff fb06 	bl	8006d80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007774:	480c      	ldr	r0, [pc, #48]	@ (80077a8 <prvInitialiseTaskLists+0x6c>)
 8007776:	f7ff fb03 	bl	8006d80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800777a:	480c      	ldr	r0, [pc, #48]	@ (80077ac <prvInitialiseTaskLists+0x70>)
 800777c:	f7ff fb00 	bl	8006d80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007780:	480b      	ldr	r0, [pc, #44]	@ (80077b0 <prvInitialiseTaskLists+0x74>)
 8007782:	f7ff fafd 	bl	8006d80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007786:	4b0b      	ldr	r3, [pc, #44]	@ (80077b4 <prvInitialiseTaskLists+0x78>)
 8007788:	4a05      	ldr	r2, [pc, #20]	@ (80077a0 <prvInitialiseTaskLists+0x64>)
 800778a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800778c:	4b0a      	ldr	r3, [pc, #40]	@ (80077b8 <prvInitialiseTaskLists+0x7c>)
 800778e:	4a05      	ldr	r2, [pc, #20]	@ (80077a4 <prvInitialiseTaskLists+0x68>)
 8007790:	601a      	str	r2, [r3, #0]
}
 8007792:	bf00      	nop
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000d00 	.word	0x20000d00
 80077a0:	20000d8c 	.word	0x20000d8c
 80077a4:	20000da0 	.word	0x20000da0
 80077a8:	20000dbc 	.word	0x20000dbc
 80077ac:	20000dd0 	.word	0x20000dd0
 80077b0:	20000de8 	.word	0x20000de8
 80077b4:	20000db4 	.word	0x20000db4
 80077b8:	20000db8 	.word	0x20000db8

080077bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077c2:	e019      	b.n	80077f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077c4:	f000 f9d2 	bl	8007b6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077c8:	4b10      	ldr	r3, [pc, #64]	@ (800780c <prvCheckTasksWaitingTermination+0x50>)
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff fb59 	bl	8006e8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077da:	4b0d      	ldr	r3, [pc, #52]	@ (8007810 <prvCheckTasksWaitingTermination+0x54>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3b01      	subs	r3, #1
 80077e0:	4a0b      	ldr	r2, [pc, #44]	@ (8007810 <prvCheckTasksWaitingTermination+0x54>)
 80077e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007814 <prvCheckTasksWaitingTermination+0x58>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	4a0a      	ldr	r2, [pc, #40]	@ (8007814 <prvCheckTasksWaitingTermination+0x58>)
 80077ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077ee:	f000 f9ed 	bl	8007bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f810 	bl	8007818 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077f8:	4b06      	ldr	r3, [pc, #24]	@ (8007814 <prvCheckTasksWaitingTermination+0x58>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e1      	bne.n	80077c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007800:	bf00      	nop
 8007802:	bf00      	nop
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000dd0 	.word	0x20000dd0
 8007810:	20000dfc 	.word	0x20000dfc
 8007814:	20000de4 	.word	0x20000de4

08007818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	334c      	adds	r3, #76	@ 0x4c
 8007824:	4618      	mov	r0, r3
 8007826:	f000 fe1f 	bl	8008468 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007830:	2b00      	cmp	r3, #0
 8007832:	d108      	bne.n	8007846 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007838:	4618      	mov	r0, r3
 800783a:	f000 fb27 	bl	8007e8c <vPortFree>
				vPortFree( pxTCB );
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fb24 	bl	8007e8c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007844:	e019      	b.n	800787a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800784c:	2b01      	cmp	r3, #1
 800784e:	d103      	bne.n	8007858 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fb1b 	bl	8007e8c <vPortFree>
	}
 8007856:	e010      	b.n	800787a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800785e:	2b02      	cmp	r3, #2
 8007860:	d00b      	beq.n	800787a <prvDeleteTCB+0x62>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	60fb      	str	r3, [r7, #12]
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop
 8007878:	e7fd      	b.n	8007876 <prvDeleteTCB+0x5e>
	}
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800788a:	4b0c      	ldr	r3, [pc, #48]	@ (80078bc <prvResetNextTaskUnblockTime+0x38>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d104      	bne.n	800789e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007894:	4b0a      	ldr	r3, [pc, #40]	@ (80078c0 <prvResetNextTaskUnblockTime+0x3c>)
 8007896:	f04f 32ff 	mov.w	r2, #4294967295
 800789a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800789c:	e008      	b.n	80078b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800789e:	4b07      	ldr	r3, [pc, #28]	@ (80078bc <prvResetNextTaskUnblockTime+0x38>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	4a04      	ldr	r2, [pc, #16]	@ (80078c0 <prvResetNextTaskUnblockTime+0x3c>)
 80078ae:	6013      	str	r3, [r2, #0]
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bc80      	pop	{r7}
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	20000db4 	.word	0x20000db4
 80078c0:	20000e1c 	.word	0x20000e1c

080078c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078ce:	4b29      	ldr	r3, [pc, #164]	@ (8007974 <prvAddCurrentTaskToDelayedList+0xb0>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078d4:	4b28      	ldr	r3, [pc, #160]	@ (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3304      	adds	r3, #4
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff fad6 	bl	8006e8c <uxListRemove>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10b      	bne.n	80078fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80078e6:	4b24      	ldr	r3, [pc, #144]	@ (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ec:	2201      	movs	r2, #1
 80078ee:	fa02 f303 	lsl.w	r3, r2, r3
 80078f2:	43da      	mvns	r2, r3
 80078f4:	4b21      	ldr	r3, [pc, #132]	@ (800797c <prvAddCurrentTaskToDelayedList+0xb8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4013      	ands	r3, r2
 80078fa:	4a20      	ldr	r2, [pc, #128]	@ (800797c <prvAddCurrentTaskToDelayedList+0xb8>)
 80078fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007904:	d10a      	bne.n	800791c <prvAddCurrentTaskToDelayedList+0x58>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d007      	beq.n	800791c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800790c:	4b1a      	ldr	r3, [pc, #104]	@ (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3304      	adds	r3, #4
 8007912:	4619      	mov	r1, r3
 8007914:	481a      	ldr	r0, [pc, #104]	@ (8007980 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007916:	f7ff fa5e 	bl	8006dd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800791a:	e026      	b.n	800796a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4413      	add	r3, r2
 8007922:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007924:	4b14      	ldr	r3, [pc, #80]	@ (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	429a      	cmp	r2, r3
 8007932:	d209      	bcs.n	8007948 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007934:	4b13      	ldr	r3, [pc, #76]	@ (8007984 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	4b0f      	ldr	r3, [pc, #60]	@ (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3304      	adds	r3, #4
 800793e:	4619      	mov	r1, r3
 8007940:	4610      	mov	r0, r2
 8007942:	f7ff fa6b 	bl	8006e1c <vListInsert>
}
 8007946:	e010      	b.n	800796a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007948:	4b0f      	ldr	r3, [pc, #60]	@ (8007988 <prvAddCurrentTaskToDelayedList+0xc4>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	4b0a      	ldr	r3, [pc, #40]	@ (8007978 <prvAddCurrentTaskToDelayedList+0xb4>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3304      	adds	r3, #4
 8007952:	4619      	mov	r1, r3
 8007954:	4610      	mov	r0, r2
 8007956:	f7ff fa61 	bl	8006e1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800795a:	4b0c      	ldr	r3, [pc, #48]	@ (800798c <prvAddCurrentTaskToDelayedList+0xc8>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	429a      	cmp	r2, r3
 8007962:	d202      	bcs.n	800796a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007964:	4a09      	ldr	r2, [pc, #36]	@ (800798c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	6013      	str	r3, [r2, #0]
}
 800796a:	bf00      	nop
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000e00 	.word	0x20000e00
 8007978:	20000cfc 	.word	0x20000cfc
 800797c:	20000e04 	.word	0x20000e04
 8007980:	20000de8 	.word	0x20000de8
 8007984:	20000db8 	.word	0x20000db8
 8007988:	20000db4 	.word	0x20000db4
 800798c:	20000e1c 	.word	0x20000e1c

08007990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3b04      	subs	r3, #4
 80079a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80079a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3b04      	subs	r3, #4
 80079ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f023 0201 	bic.w	r2, r3, #1
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3b04      	subs	r3, #4
 80079be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079c0:	4a08      	ldr	r2, [pc, #32]	@ (80079e4 <pxPortInitialiseStack+0x54>)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3b14      	subs	r3, #20
 80079ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3b20      	subs	r3, #32
 80079d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079d8:	68fb      	ldr	r3, [r7, #12]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	bc80      	pop	{r7}
 80079e2:	4770      	bx	lr
 80079e4:	080079e9 	.word	0x080079e9

080079e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079f2:	4b12      	ldr	r3, [pc, #72]	@ (8007a3c <prvTaskExitError+0x54>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	d00b      	beq.n	8007a14 <prvTaskExitError+0x2c>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	60fb      	str	r3, [r7, #12]
}
 8007a0e:	bf00      	nop
 8007a10:	bf00      	nop
 8007a12:	e7fd      	b.n	8007a10 <prvTaskExitError+0x28>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	60bb      	str	r3, [r7, #8]
}
 8007a26:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a28:	bf00      	nop
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0fc      	beq.n	8007a2a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr
 8007a3c:	2000000c 	.word	0x2000000c

08007a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a40:	4b07      	ldr	r3, [pc, #28]	@ (8007a60 <pxCurrentTCBConst2>)
 8007a42:	6819      	ldr	r1, [r3, #0]
 8007a44:	6808      	ldr	r0, [r1, #0]
 8007a46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a4a:	f380 8809 	msr	PSP, r0
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f04f 0000 	mov.w	r0, #0
 8007a56:	f380 8811 	msr	BASEPRI, r0
 8007a5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007a5e:	4770      	bx	lr

08007a60 <pxCurrentTCBConst2>:
 8007a60:	20000cfc 	.word	0x20000cfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop

08007a68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007a68:	4806      	ldr	r0, [pc, #24]	@ (8007a84 <prvPortStartFirstTask+0x1c>)
 8007a6a:	6800      	ldr	r0, [r0, #0]
 8007a6c:	6800      	ldr	r0, [r0, #0]
 8007a6e:	f380 8808 	msr	MSP, r0
 8007a72:	b662      	cpsie	i
 8007a74:	b661      	cpsie	f
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	df00      	svc	0
 8007a80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a82:	bf00      	nop
 8007a84:	e000ed08 	.word	0xe000ed08

08007a88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a8e:	4b32      	ldr	r3, [pc, #200]	@ (8007b58 <xPortStartScheduler+0xd0>)
 8007a90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	22ff      	movs	r2, #255	@ 0xff
 8007a9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8007b5c <xPortStartScheduler+0xd4>)
 8007ab4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8007b60 <xPortStartScheduler+0xd8>)
 8007ab8:	2207      	movs	r2, #7
 8007aba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007abc:	e009      	b.n	8007ad2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007abe:	4b28      	ldr	r3, [pc, #160]	@ (8007b60 <xPortStartScheduler+0xd8>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	4a26      	ldr	r2, [pc, #152]	@ (8007b60 <xPortStartScheduler+0xd8>)
 8007ac6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ac8:	78fb      	ldrb	r3, [r7, #3]
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ada:	2b80      	cmp	r3, #128	@ 0x80
 8007adc:	d0ef      	beq.n	8007abe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ade:	4b20      	ldr	r3, [pc, #128]	@ (8007b60 <xPortStartScheduler+0xd8>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f1c3 0307 	rsb	r3, r3, #7
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	d00b      	beq.n	8007b02 <xPortStartScheduler+0x7a>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	60bb      	str	r3, [r7, #8]
}
 8007afc:	bf00      	nop
 8007afe:	bf00      	nop
 8007b00:	e7fd      	b.n	8007afe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b02:	4b17      	ldr	r3, [pc, #92]	@ (8007b60 <xPortStartScheduler+0xd8>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	4a15      	ldr	r2, [pc, #84]	@ (8007b60 <xPortStartScheduler+0xd8>)
 8007b0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b0c:	4b14      	ldr	r3, [pc, #80]	@ (8007b60 <xPortStartScheduler+0xd8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b14:	4a12      	ldr	r2, [pc, #72]	@ (8007b60 <xPortStartScheduler+0xd8>)
 8007b16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b20:	4b10      	ldr	r3, [pc, #64]	@ (8007b64 <xPortStartScheduler+0xdc>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a0f      	ldr	r2, [pc, #60]	@ (8007b64 <xPortStartScheduler+0xdc>)
 8007b26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b64 <xPortStartScheduler+0xdc>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a0c      	ldr	r2, [pc, #48]	@ (8007b64 <xPortStartScheduler+0xdc>)
 8007b32:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007b36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b38:	f000 f8b8 	bl	8007cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b68 <xPortStartScheduler+0xe0>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b42:	f7ff ff91 	bl	8007a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b46:	f7ff fd7f 	bl	8007648 <vTaskSwitchContext>
	prvTaskExitError();
 8007b4a:	f7ff ff4d 	bl	80079e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	e000e400 	.word	0xe000e400
 8007b5c:	20000e28 	.word	0x20000e28
 8007b60:	20000e2c 	.word	0x20000e2c
 8007b64:	e000ed20 	.word	0xe000ed20
 8007b68:	2000000c 	.word	0x2000000c

08007b6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	607b      	str	r3, [r7, #4]
}
 8007b84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b86:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc4 <vPortEnterCritical+0x58>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8007bc4 <vPortEnterCritical+0x58>)
 8007b8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b90:	4b0c      	ldr	r3, [pc, #48]	@ (8007bc4 <vPortEnterCritical+0x58>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d110      	bne.n	8007bba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b98:	4b0b      	ldr	r3, [pc, #44]	@ (8007bc8 <vPortEnterCritical+0x5c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00b      	beq.n	8007bba <vPortEnterCritical+0x4e>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	603b      	str	r3, [r7, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop
 8007bb8:	e7fd      	b.n	8007bb6 <vPortEnterCritical+0x4a>
	}
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr
 8007bc4:	2000000c 	.word	0x2000000c
 8007bc8:	e000ed04 	.word	0xe000ed04

08007bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bd2:	4b12      	ldr	r3, [pc, #72]	@ (8007c1c <vPortExitCritical+0x50>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10b      	bne.n	8007bf2 <vPortExitCritical+0x26>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	607b      	str	r3, [r7, #4]
}
 8007bec:	bf00      	nop
 8007bee:	bf00      	nop
 8007bf0:	e7fd      	b.n	8007bee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8007c1c <vPortExitCritical+0x50>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	4a08      	ldr	r2, [pc, #32]	@ (8007c1c <vPortExitCritical+0x50>)
 8007bfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bfc:	4b07      	ldr	r3, [pc, #28]	@ (8007c1c <vPortExitCritical+0x50>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d105      	bne.n	8007c10 <vPortExitCritical+0x44>
 8007c04:	2300      	movs	r3, #0
 8007c06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bc80      	pop	{r7}
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	2000000c 	.word	0x2000000c

08007c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c20:	f3ef 8009 	mrs	r0, PSP
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	4b0d      	ldr	r3, [pc, #52]	@ (8007c60 <pxCurrentTCBConst>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c30:	6010      	str	r0, [r2, #0]
 8007c32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007c36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007c3a:	f380 8811 	msr	BASEPRI, r0
 8007c3e:	f7ff fd03 	bl	8007648 <vTaskSwitchContext>
 8007c42:	f04f 0000 	mov.w	r0, #0
 8007c46:	f380 8811 	msr	BASEPRI, r0
 8007c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007c4e:	6819      	ldr	r1, [r3, #0]
 8007c50:	6808      	ldr	r0, [r1, #0]
 8007c52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007c56:	f380 8809 	msr	PSP, r0
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	4770      	bx	lr

08007c60 <pxCurrentTCBConst>:
 8007c60:	20000cfc 	.word	0x20000cfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop

08007c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	607b      	str	r3, [r7, #4]
}
 8007c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c82:	f7ff fc27 	bl	80074d4 <xTaskIncrementTick>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c8c:	4b06      	ldr	r3, [pc, #24]	@ (8007ca8 <SysTick_Handler+0x40>)
 8007c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	2300      	movs	r3, #0
 8007c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	f383 8811 	msr	BASEPRI, r3
}
 8007c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	e000ed04 	.word	0xe000ed04

08007cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cac:	b480      	push	{r7}
 8007cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8007cdc <vPortSetupTimerInterrupt+0x30>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ce0 <vPortSetupTimerInterrupt+0x34>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cbc:	4b09      	ldr	r3, [pc, #36]	@ (8007ce4 <vPortSetupTimerInterrupt+0x38>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a09      	ldr	r2, [pc, #36]	@ (8007ce8 <vPortSetupTimerInterrupt+0x3c>)
 8007cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc6:	099b      	lsrs	r3, r3, #6
 8007cc8:	4a08      	ldr	r2, [pc, #32]	@ (8007cec <vPortSetupTimerInterrupt+0x40>)
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cce:	4b03      	ldr	r3, [pc, #12]	@ (8007cdc <vPortSetupTimerInterrupt+0x30>)
 8007cd0:	2207      	movs	r2, #7
 8007cd2:	601a      	str	r2, [r3, #0]
}
 8007cd4:	bf00      	nop
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bc80      	pop	{r7}
 8007cda:	4770      	bx	lr
 8007cdc:	e000e010 	.word	0xe000e010
 8007ce0:	e000e018 	.word	0xe000e018
 8007ce4:	20000000 	.word	0x20000000
 8007ce8:	10624dd3 	.word	0x10624dd3
 8007cec:	e000e014 	.word	0xe000e014

08007cf0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08a      	sub	sp, #40	@ 0x28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cfc:	f7ff fb3e 	bl	800737c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d00:	4b5c      	ldr	r3, [pc, #368]	@ (8007e74 <pvPortMalloc+0x184>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d08:	f000 f924 	bl	8007f54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d0c:	4b5a      	ldr	r3, [pc, #360]	@ (8007e78 <pvPortMalloc+0x188>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4013      	ands	r3, r2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f040 8095 	bne.w	8007e44 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01e      	beq.n	8007d5e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007d20:	2208      	movs	r2, #8
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4413      	add	r3, r2
 8007d26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d015      	beq.n	8007d5e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f023 0307 	bic.w	r3, r3, #7
 8007d38:	3308      	adds	r3, #8
 8007d3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00b      	beq.n	8007d5e <pvPortMalloc+0x6e>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	617b      	str	r3, [r7, #20]
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	e7fd      	b.n	8007d5a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d06f      	beq.n	8007e44 <pvPortMalloc+0x154>
 8007d64:	4b45      	ldr	r3, [pc, #276]	@ (8007e7c <pvPortMalloc+0x18c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d86a      	bhi.n	8007e44 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d6e:	4b44      	ldr	r3, [pc, #272]	@ (8007e80 <pvPortMalloc+0x190>)
 8007d70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d72:	4b43      	ldr	r3, [pc, #268]	@ (8007e80 <pvPortMalloc+0x190>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d78:	e004      	b.n	8007d84 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d903      	bls.n	8007d96 <pvPortMalloc+0xa6>
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f1      	bne.n	8007d7a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d96:	4b37      	ldr	r3, [pc, #220]	@ (8007e74 <pvPortMalloc+0x184>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d051      	beq.n	8007e44 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2208      	movs	r2, #8
 8007da6:	4413      	add	r3, r2
 8007da8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	1ad2      	subs	r2, r2, r3
 8007dba:	2308      	movs	r3, #8
 8007dbc:	005b      	lsls	r3, r3, #1
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d920      	bls.n	8007e04 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	f003 0307 	and.w	r3, r3, #7
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <pvPortMalloc+0xfc>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	613b      	str	r3, [r7, #16]
}
 8007de6:	bf00      	nop
 8007de8:	bf00      	nop
 8007dea:	e7fd      	b.n	8007de8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	1ad2      	subs	r2, r2, r3
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007dfe:	69b8      	ldr	r0, [r7, #24]
 8007e00:	f000 f90a 	bl	8008018 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e04:	4b1d      	ldr	r3, [pc, #116]	@ (8007e7c <pvPortMalloc+0x18c>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8007e7c <pvPortMalloc+0x18c>)
 8007e10:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e12:	4b1a      	ldr	r3, [pc, #104]	@ (8007e7c <pvPortMalloc+0x18c>)
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	4b1b      	ldr	r3, [pc, #108]	@ (8007e84 <pvPortMalloc+0x194>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d203      	bcs.n	8007e26 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e1e:	4b17      	ldr	r3, [pc, #92]	@ (8007e7c <pvPortMalloc+0x18c>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a18      	ldr	r2, [pc, #96]	@ (8007e84 <pvPortMalloc+0x194>)
 8007e24:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	4b13      	ldr	r3, [pc, #76]	@ (8007e78 <pvPortMalloc+0x188>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e32:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e3a:	4b13      	ldr	r3, [pc, #76]	@ (8007e88 <pvPortMalloc+0x198>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	4a11      	ldr	r2, [pc, #68]	@ (8007e88 <pvPortMalloc+0x198>)
 8007e42:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e44:	f7ff faa8 	bl	8007398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00b      	beq.n	8007e6a <pvPortMalloc+0x17a>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	60fb      	str	r3, [r7, #12]
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	e7fd      	b.n	8007e66 <pvPortMalloc+0x176>
	return pvReturn;
 8007e6a:	69fb      	ldr	r3, [r7, #28]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3728      	adds	r7, #40	@ 0x28
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	20001a38 	.word	0x20001a38
 8007e78:	20001a4c 	.word	0x20001a4c
 8007e7c:	20001a3c 	.word	0x20001a3c
 8007e80:	20001a30 	.word	0x20001a30
 8007e84:	20001a40 	.word	0x20001a40
 8007e88:	20001a44 	.word	0x20001a44

08007e8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d04f      	beq.n	8007f3e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e9e:	2308      	movs	r3, #8
 8007ea0:	425b      	negs	r3, r3
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	4b25      	ldr	r3, [pc, #148]	@ (8007f48 <vPortFree+0xbc>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10b      	bne.n	8007ed2 <vPortFree+0x46>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	60fb      	str	r3, [r7, #12]
}
 8007ecc:	bf00      	nop
 8007ece:	bf00      	nop
 8007ed0:	e7fd      	b.n	8007ece <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00b      	beq.n	8007ef2 <vPortFree+0x66>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	60bb      	str	r3, [r7, #8]
}
 8007eec:	bf00      	nop
 8007eee:	bf00      	nop
 8007ef0:	e7fd      	b.n	8007eee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	4b14      	ldr	r3, [pc, #80]	@ (8007f48 <vPortFree+0xbc>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4013      	ands	r3, r2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01e      	beq.n	8007f3e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d11a      	bne.n	8007f3e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8007f48 <vPortFree+0xbc>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	43db      	mvns	r3, r3
 8007f12:	401a      	ands	r2, r3
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f18:	f7ff fa30 	bl	800737c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	4b0a      	ldr	r3, [pc, #40]	@ (8007f4c <vPortFree+0xc0>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4413      	add	r3, r2
 8007f26:	4a09      	ldr	r2, [pc, #36]	@ (8007f4c <vPortFree+0xc0>)
 8007f28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f2a:	6938      	ldr	r0, [r7, #16]
 8007f2c:	f000 f874 	bl	8008018 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f30:	4b07      	ldr	r3, [pc, #28]	@ (8007f50 <vPortFree+0xc4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	3301      	adds	r3, #1
 8007f36:	4a06      	ldr	r2, [pc, #24]	@ (8007f50 <vPortFree+0xc4>)
 8007f38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f3a:	f7ff fa2d 	bl	8007398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f3e:	bf00      	nop
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20001a4c 	.word	0x20001a4c
 8007f4c:	20001a3c 	.word	0x20001a3c
 8007f50:	20001a48 	.word	0x20001a48

08007f54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f5a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007f5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f60:	4b27      	ldr	r3, [pc, #156]	@ (8008000 <prvHeapInit+0xac>)
 8007f62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f003 0307 	and.w	r3, r3, #7
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00c      	beq.n	8007f88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	3307      	adds	r3, #7
 8007f72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f023 0307 	bic.w	r3, r3, #7
 8007f7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	4a1f      	ldr	r2, [pc, #124]	@ (8008000 <prvHeapInit+0xac>)
 8007f84:	4413      	add	r3, r2
 8007f86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8008004 <prvHeapInit+0xb0>)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f92:	4b1c      	ldr	r3, [pc, #112]	@ (8008004 <prvHeapInit+0xb0>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fa0:	2208      	movs	r2, #8
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	1a9b      	subs	r3, r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0307 	bic.w	r3, r3, #7
 8007fae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4a15      	ldr	r2, [pc, #84]	@ (8008008 <prvHeapInit+0xb4>)
 8007fb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fb6:	4b14      	ldr	r3, [pc, #80]	@ (8008008 <prvHeapInit+0xb4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fbe:	4b12      	ldr	r3, [pc, #72]	@ (8008008 <prvHeapInit+0xb4>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	1ad2      	subs	r2, r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008008 <prvHeapInit+0xb4>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800800c <prvHeapInit+0xb8>)
 8007fe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	4a09      	ldr	r2, [pc, #36]	@ (8008010 <prvHeapInit+0xbc>)
 8007fea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fec:	4b09      	ldr	r3, [pc, #36]	@ (8008014 <prvHeapInit+0xc0>)
 8007fee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ff2:	601a      	str	r2, [r3, #0]
}
 8007ff4:	bf00      	nop
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	20000e30 	.word	0x20000e30
 8008004:	20001a30 	.word	0x20001a30
 8008008:	20001a38 	.word	0x20001a38
 800800c:	20001a40 	.word	0x20001a40
 8008010:	20001a3c 	.word	0x20001a3c
 8008014:	20001a4c 	.word	0x20001a4c

08008018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008020:	4b27      	ldr	r3, [pc, #156]	@ (80080c0 <prvInsertBlockIntoFreeList+0xa8>)
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	e002      	b.n	800802c <prvInsertBlockIntoFreeList+0x14>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	429a      	cmp	r2, r3
 8008034:	d8f7      	bhi.n	8008026 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	4413      	add	r3, r2
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	429a      	cmp	r2, r3
 8008046:	d108      	bne.n	800805a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	441a      	add	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	441a      	add	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d118      	bne.n	80080a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	4b14      	ldr	r3, [pc, #80]	@ (80080c4 <prvInsertBlockIntoFreeList+0xac>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d00d      	beq.n	8008096 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	441a      	add	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	e008      	b.n	80080a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008096:	4b0b      	ldr	r3, [pc, #44]	@ (80080c4 <prvInsertBlockIntoFreeList+0xac>)
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	e003      	b.n	80080a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d002      	beq.n	80080b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080b6:	bf00      	nop
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr
 80080c0:	20001a30 	.word	0x20001a30
 80080c4:	20001a38 	.word	0x20001a38

080080c8 <TMC2209_setup>:
	chopConfig.bytes = CHOPPER_CONFIG_DEFAULT;
	TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
}

void TMC2209_setup()
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	af00      	add	r7, sp, #0
	gconfConfig.bytes = FALSE;
 80080cc:	4b17      	ldr	r3, [pc, #92]	@ (800812c <TMC2209_setup+0x64>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]
	gconfConfig.I_scale_analog = TRUE;
 80080d2:	4a16      	ldr	r2, [pc, #88]	@ (800812c <TMC2209_setup+0x64>)
 80080d4:	7813      	ldrb	r3, [r2, #0]
 80080d6:	f043 0301 	orr.w	r3, r3, #1
 80080da:	7013      	strb	r3, [r2, #0]
	gconfConfig.pdn_disable = TRUE;
 80080dc:	4a13      	ldr	r2, [pc, #76]	@ (800812c <TMC2209_setup+0x64>)
 80080de:	7813      	ldrb	r3, [r2, #0]
 80080e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080e4:	7013      	strb	r3, [r2, #0]
	gconfConfig.multistep_filt = TRUE;
 80080e6:	4a11      	ldr	r2, [pc, #68]	@ (800812c <TMC2209_setup+0x64>)
 80080e8:	7853      	ldrb	r3, [r2, #1]
 80080ea:	f043 0301 	orr.w	r3, r3, #1
 80080ee:	7053      	strb	r3, [r2, #1]
	gconfConfig.mstep_reg_select = TRUE;
 80080f0:	4a0e      	ldr	r2, [pc, #56]	@ (800812c <TMC2209_setup+0x64>)
 80080f2:	7813      	ldrb	r3, [r2, #0]
 80080f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080f8:	7013      	strb	r3, [r2, #0]

	slaveConfig.conf = 0x00;
 80080fa:	4a0d      	ldr	r2, [pc, #52]	@ (8008130 <TMC2209_setup+0x68>)
 80080fc:	7853      	ldrb	r3, [r2, #1]
 80080fe:	f36f 0303 	bfc	r3, #0, #4
 8008102:	7053      	strb	r3, [r2, #1]

	TMC2209_HAL_Write(TMC2209Reg_GCONF, gconfConfig.bytes);
 8008104:	4b09      	ldr	r3, [pc, #36]	@ (800812c <TMC2209_setup+0x64>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4619      	mov	r1, r3
 800810a:	2000      	movs	r0, #0
 800810c:	f000 f8de 	bl	80082cc <TMC2209_HAL_Write>
	TMC2209_HAL_Write(TMC2209Reg_SLAVECONF, slaveConfig.bytes);
 8008110:	4b07      	ldr	r3, [pc, #28]	@ (8008130 <TMC2209_setup+0x68>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4619      	mov	r1, r3
 8008116:	2003      	movs	r0, #3
 8008118:	f000 f8d8 	bl	80082cc <TMC2209_HAL_Write>
//	TMC2209_setMicrostep(TMC2209_Microsteps_1);
	TMC2209_disable();
 800811c:	f000 f828 	bl	8008170 <TMC2209_disable>
	HAL_Delay(100);
 8008120:	2064      	movs	r0, #100	@ 0x64
 8008122:	f7f8 fddf 	bl	8000ce4 <HAL_Delay>
}
 8008126:	bf00      	nop
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20001a54 	.word	0x20001a54
 8008130:	20001a58 	.word	0x20001a58

08008134 <TMC2209_enable>:

void TMC2209_enable()
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8008138:	2200      	movs	r2, #0
 800813a:	2104      	movs	r1, #4
 800813c:	4808      	ldr	r0, [pc, #32]	@ (8008160 <TMC2209_enable+0x2c>)
 800813e:	f7f9 fa7b 	bl	8001638 <HAL_GPIO_WritePin>
	Driver_Enable = TRUE;
 8008142:	4b08      	ldr	r3, [pc, #32]	@ (8008164 <TMC2209_enable+0x30>)
 8008144:	2201      	movs	r2, #1
 8008146:	701a      	strb	r2, [r3, #0]
	chopConfig.toff = toff_;
 8008148:	4b07      	ldr	r3, [pc, #28]	@ (8008168 <TMC2209_enable+0x34>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	b2d9      	uxtb	r1, r3
 8008152:	4a06      	ldr	r2, [pc, #24]	@ (800816c <TMC2209_enable+0x38>)
 8008154:	7813      	ldrb	r3, [r2, #0]
 8008156:	f361 0303 	bfi	r3, r1, #0, #4
 800815a:	7013      	strb	r3, [r2, #0]
}
 800815c:	bf00      	nop
 800815e:	bd80      	pop	{r7, pc}
 8008160:	40010800 	.word	0x40010800
 8008164:	20001a5c 	.word	0x20001a5c
 8008168:	20000010 	.word	0x20000010
 800816c:	20001a50 	.word	0x20001a50

08008170 <TMC2209_disable>:

void TMC2209_disable()
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8008174:	2201      	movs	r2, #1
 8008176:	2104      	movs	r1, #4
 8008178:	4806      	ldr	r0, [pc, #24]	@ (8008194 <TMC2209_disable+0x24>)
 800817a:	f7f9 fa5d 	bl	8001638 <HAL_GPIO_WritePin>
	Driver_Enable = FALSE;
 800817e:	4b06      	ldr	r3, [pc, #24]	@ (8008198 <TMC2209_disable+0x28>)
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
	chopConfig.toff = TOFF_DISABLE;
 8008184:	4a05      	ldr	r2, [pc, #20]	@ (800819c <TMC2209_disable+0x2c>)
 8008186:	7813      	ldrb	r3, [r2, #0]
 8008188:	f36f 0303 	bfc	r3, #0, #4
 800818c:	7013      	strb	r3, [r2, #0]
}
 800818e:	bf00      	nop
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40010800 	.word	0x40010800
 8008198:	20001a5c 	.word	0x20001a5c
 800819c:	20001a50 	.word	0x20001a50

080081a0 <TMC2209_readChopConfig>:
{
	chopConfig.mres = Microstep;
	TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
}
void TMC2209_readChopConfig(uint32_t* result)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
	uint32_t buffer = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]
	TMC2209_HAL_Read(TMC2209Reg_CHOPCONF, &buffer);
 80081ac:	f107 030c 	add.w	r3, r7, #12
 80081b0:	4619      	mov	r1, r3
 80081b2:	206c      	movs	r0, #108	@ 0x6c
 80081b4:	f000 f8c8 	bl	8008348 <TMC2209_HAL_Read>
	*result = buffer;
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	601a      	str	r2, [r3, #0]
}
 80081be:	bf00      	nop
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <HAL_TIM_PWM_PulseFinishedCallback>:
		PWM_Pulse_Complete = FALSE;
	}
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081d8:	d106      	bne.n	80081e8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
		HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 80081da:	2100      	movs	r1, #0
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7fc fd7b 	bl	8004cd8 <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 80081e2:	4b03      	ldr	r3, [pc, #12]	@ (80081f0 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 80081e4:	2201      	movs	r2, #1
 80081e6:	701a      	strb	r2, [r3, #0]
	}
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20000011 	.word	0x20000011

080081f4 <calculateCRC>:
#include "../Inc/TMC2209_HAL.h"

extern UART_HandleTypeDef huart1;

static void calculateCRC(uint8_t* datagram, uint8_t datagram_len)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
	int i,j;
	uint8_t *crc = datagram + (datagram_len - 1);
 8008200:	78fb      	ldrb	r3, [r7, #3]
 8008202:	3b01      	subs	r3, #1
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	4413      	add	r3, r2
 8008208:	60bb      	str	r3, [r7, #8]
	uint8_t currentByte;
	*crc = 0;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2200      	movs	r2, #0
 800820e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (datagram_len - 1); i++) {
 8008210:	2300      	movs	r3, #0
 8008212:	617b      	str	r3, [r7, #20]
 8008214:	e02e      	b.n	8008274 <calculateCRC+0x80>
		currentByte = datagram[i];
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	4413      	add	r3, r2
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < 8; j++) {
 8008220:	2300      	movs	r3, #0
 8008222:	613b      	str	r3, [r7, #16]
 8008224:	e020      	b.n	8008268 <calculateCRC+0x74>
			if ((*crc >> 7) ^ (currentByte & 0x01))
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	09db      	lsrs	r3, r3, #7
 800822c:	b2db      	uxtb	r3, r3
 800822e:	461a      	mov	r2, r3
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	429a      	cmp	r2, r3
 8008238:	d00a      	beq.n	8008250 <calculateCRC+0x5c>
				*crc = (*crc << 1) ^ 0x07;
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	b25b      	sxtb	r3, r3
 8008242:	f083 0307 	eor.w	r3, r3, #7
 8008246:	b25b      	sxtb	r3, r3
 8008248:	b2da      	uxtb	r2, r3
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	e005      	b.n	800825c <calculateCRC+0x68>
			else
				*crc = (*crc << 1);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	b2da      	uxtb	r2, r3
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	701a      	strb	r2, [r3, #0]
			currentByte = currentByte >> 1;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	085b      	lsrs	r3, r3, #1
 8008260:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < 8; j++) {
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	3301      	adds	r3, #1
 8008266:	613b      	str	r3, [r7, #16]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2b07      	cmp	r3, #7
 800826c:	dddb      	ble.n	8008226 <calculateCRC+0x32>
	for (i = 0; i < (datagram_len - 1); i++) {
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	3301      	adds	r3, #1
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	3b01      	subs	r3, #1
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	429a      	cmp	r2, r3
 800827c:	dbcb      	blt.n	8008216 <calculateCRC+0x22>
		}
	}
}
 800827e:	bf00      	nop
 8008280:	bf00      	nop
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	bc80      	pop	{r7}
 8008288:	4770      	bx	lr

0800828a <byteswap>:
static void byteswap (uint8_t data[4])
{
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
    uint8_t tmp;

    tmp = data[0];
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	73fb      	strb	r3, [r7, #15]
    data[0] = data[3];
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	78da      	ldrb	r2, [r3, #3]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	701a      	strb	r2, [r3, #0]
    data[3] = tmp;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3303      	adds	r3, #3
 80082a4:	7bfa      	ldrb	r2, [r7, #15]
 80082a6:	701a      	strb	r2, [r3, #0]
    tmp = data[1];
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	785b      	ldrb	r3, [r3, #1]
 80082ac:	73fb      	strb	r3, [r7, #15]
    data[1] = data[2];
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3301      	adds	r3, #1
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	7892      	ldrb	r2, [r2, #2]
 80082b6:	701a      	strb	r2, [r3, #0]
    data[2] = tmp;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3302      	adds	r3, #2
 80082bc:	7bfa      	ldrb	r2, [r7, #15]
 80082be:	701a      	strb	r2, [r3, #0]
}
 80082c0:	bf00      	nop
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bc80      	pop	{r7}
 80082c8:	4770      	bx	lr
	...

080082cc <TMC2209_HAL_Write>:

HAL_StatusTypeDef TMC2209_HAL_Write(uint8_t reg, uint32_t data)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	6039      	str	r1, [r7, #0]
 80082d6:	71fb      	strb	r3, [r7, #7]
	TMC2209_Write_Datagram_t datagram;
	datagram.data = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	2300      	movs	r3, #0
 80082de:	613b      	str	r3, [r7, #16]
	datagram.message.sync = 0x05;
 80082e0:	2305      	movs	r3, #5
 80082e2:	733b      	strb	r3, [r7, #12]
	datagram.message.slave = 0x00;
 80082e4:	2300      	movs	r3, #0
 80082e6:	737b      	strb	r3, [r7, #13]
	datagram.message.address.idx = reg;
 80082e8:	79fb      	ldrb	r3, [r7, #7]
 80082ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	7bbb      	ldrb	r3, [r7, #14]
 80082f2:	f362 0306 	bfi	r3, r2, #0, #7
 80082f6:	73bb      	strb	r3, [r7, #14]
	datagram.message.address.write = REG_WRITE;
 80082f8:	7bbb      	ldrb	r3, [r7, #14]
 80082fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082fe:	73bb      	strb	r3, [r7, #14]
	datagram.message.payload.value = data;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	f8c7 300f 	str.w	r3, [r7, #15]
	byteswap(datagram.message.payload.data);
 8008306:	f107 030c 	add.w	r3, r7, #12
 800830a:	3303      	adds	r3, #3
 800830c:	4618      	mov	r0, r3
 800830e:	f7ff ffbc 	bl	800828a <byteswap>

	calculateCRC(datagram.bytes, sizeof(TMC2209_Write_Datagram_t));
 8008312:	f107 030c 	add.w	r3, r7, #12
 8008316:	2108      	movs	r1, #8
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff ff6b 	bl	80081f4 <calculateCRC>
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 800831e:	4809      	ldr	r0, [pc, #36]	@ (8008344 <TMC2209_HAL_Write+0x78>)
 8008320:	f7fd fe69 	bl	8005ff6 <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, datagram.bytes, sizeof(TMC2209_Write_Datagram_t), HAL_MAX_DELAY);
 8008324:	f107 010c 	add.w	r1, r7, #12
 8008328:	f04f 33ff 	mov.w	r3, #4294967295
 800832c:	2208      	movs	r2, #8
 800832e:	4805      	ldr	r0, [pc, #20]	@ (8008344 <TMC2209_HAL_Write+0x78>)
 8008330:	f7fd fa34 	bl	800579c <HAL_UART_Transmit>
 8008334:	4603      	mov	r3, r0
 8008336:	75fb      	strb	r3, [r7, #23]

	return status;
 8008338:	7dfb      	ldrb	r3, [r7, #23]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3718      	adds	r7, #24
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20000c14 	.word	0x20000c14

08008348 <TMC2209_HAL_Read>:
HAL_StatusTypeDef TMC2209_HAL_Read(uint8_t reg, uint32_t* result)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08a      	sub	sp, #40	@ 0x28
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	6039      	str	r1, [r7, #0]
 8008352:	71fb      	strb	r3, [r7, #7]
	TMC2209_Read_Datagram_t datagram;
	TMC2209_Write_Datagram_t res;

	datagram.data = 0;
 8008354:	2300      	movs	r3, #0
 8008356:	61fb      	str	r3, [r7, #28]
	res.data = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]
 800835c:	2300      	movs	r3, #0
 800835e:	61bb      	str	r3, [r7, #24]
	datagram.message.sync = 0x05;
 8008360:	2305      	movs	r3, #5
 8008362:	773b      	strb	r3, [r7, #28]
	datagram.message.slave = 0x00;
 8008364:	2300      	movs	r3, #0
 8008366:	777b      	strb	r3, [r7, #29]
	datagram.message.address.idx = reg & 0x7F;
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800836e:	b2da      	uxtb	r2, r3
 8008370:	7fbb      	ldrb	r3, [r7, #30]
 8008372:	f362 0306 	bfi	r3, r2, #0, #7
 8008376:	77bb      	strb	r3, [r7, #30]
	datagram.message.address.write = REG_READ;
 8008378:	7fbb      	ldrb	r3, [r7, #30]
 800837a:	f36f 13c7 	bfc	r3, #7, #1
 800837e:	77bb      	strb	r3, [r7, #30]
	calculateCRC(datagram.bytes, sizeof(TMC2209_Read_Datagram_t));
 8008380:	f107 031c 	add.w	r3, r7, #28
 8008384:	2104      	movs	r1, #4
 8008386:	4618      	mov	r0, r3
 8008388:	f7ff ff34 	bl	80081f4 <calculateCRC>

	HAL_HalfDuplex_EnableTransmitter(&huart1);
 800838c:	482b      	ldr	r0, [pc, #172]	@ (800843c <TMC2209_HAL_Read+0xf4>)
 800838e:	f7fd fe32 	bl	8005ff6 <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef wstatus = HAL_UART_Transmit(&huart1, datagram.bytes, sizeof(TMC2209_Read_Datagram_t), HAL_MAX_DELAY);
 8008392:	f107 011c 	add.w	r1, r7, #28
 8008396:	f04f 33ff 	mov.w	r3, #4294967295
 800839a:	2204      	movs	r2, #4
 800839c:	4827      	ldr	r0, [pc, #156]	@ (800843c <TMC2209_HAL_Read+0xf4>)
 800839e:	f7fd f9fd 	bl	800579c <HAL_UART_Transmit>
 80083a2:	4603      	mov	r3, r0
 80083a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if(wstatus == HAL_OK){
 80083a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d13e      	bne.n	800842e <TMC2209_HAL_Read+0xe6>
		uint8_t buffer[8] = {0};
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	2300      	movs	r3, #0
 80083b6:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < sizeof(buffer) ; i++){
 80083b8:	2300      	movs	r3, #0
 80083ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80083bc:	e00e      	b.n	80083dc <TMC2209_HAL_Read+0x94>
			HAL_HalfDuplex_EnableReceiver(&huart1);
 80083be:	481f      	ldr	r0, [pc, #124]	@ (800843c <TMC2209_HAL_Read+0xf4>)
 80083c0:	f7fd fe4c 	bl	800605c <HAL_HalfDuplex_EnableReceiver>
			HAL_UART_Receive(&huart1, &buffer[i], sizeof(buffer), 100);
 80083c4:	f107 020c 	add.w	r2, r7, #12
 80083c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ca:	18d1      	adds	r1, r2, r3
 80083cc:	2364      	movs	r3, #100	@ 0x64
 80083ce:	2208      	movs	r2, #8
 80083d0:	481a      	ldr	r0, [pc, #104]	@ (800843c <TMC2209_HAL_Read+0xf4>)
 80083d2:	f7fd fa6e 	bl	80058b2 <HAL_UART_Receive>
		for(int i = 0; i < sizeof(buffer) ; i++){
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	3301      	adds	r3, #1
 80083da:	627b      	str	r3, [r7, #36]	@ 0x24
 80083dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083de:	2b07      	cmp	r3, #7
 80083e0:	d9ed      	bls.n	80083be <TMC2209_HAL_Read+0x76>
		}

		memcpy(res.bytes, buffer, sizeof(buffer));
 80083e2:	f107 0314 	add.w	r3, r7, #20
 80083e6:	f107 020c 	add.w	r2, r7, #12
 80083ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083ee:	e883 0003 	stmia.w	r3, {r0, r1}
		uint8_t crc = res.message.crc;
 80083f2:	7efb      	ldrb	r3, [r7, #27]
 80083f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		calculateCRC(res.bytes, sizeof(	TMC2209_Write_Datagram_t));
 80083f8:	f107 0314 	add.w	r3, r7, #20
 80083fc:	2108      	movs	r1, #8
 80083fe:	4618      	mov	r0, r3
 8008400:	f7ff fef8 	bl	80081f4 <calculateCRC>
		if(res.message.slave == 0xFF && crc == res.message.crc){
 8008404:	7d7b      	ldrb	r3, [r7, #21]
 8008406:	2bff      	cmp	r3, #255	@ 0xff
 8008408:	d111      	bne.n	800842e <TMC2209_HAL_Read+0xe6>
 800840a:	7efb      	ldrb	r3, [r7, #27]
 800840c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8008410:	429a      	cmp	r2, r3
 8008412:	d10c      	bne.n	800842e <TMC2209_HAL_Read+0xe6>
			uint8_t temp_var[4];
			memcpy(temp_var,res.message.payload.data, sizeof(temp_var));
 8008414:	f8d7 3017 	ldr.w	r3, [r7, #23]
 8008418:	60bb      	str	r3, [r7, #8]
			byteswap(temp_var);
 800841a:	f107 0308 	add.w	r3, r7, #8
 800841e:	4618      	mov	r0, r3
 8008420:	f7ff ff33 	bl	800828a <byteswap>
			*result = *(uint32_t*)temp_var;
 8008424:	f107 0308 	add.w	r3, r7, #8
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	601a      	str	r2, [r3, #0]
		}
	}
	return wstatus;
 800842e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8008432:	4618      	mov	r0, r3
 8008434:	3728      	adds	r7, #40	@ 0x28
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20000c14 	.word	0x20000c14

08008440 <__malloc_lock>:
 8008440:	4801      	ldr	r0, [pc, #4]	@ (8008448 <__malloc_lock+0x8>)
 8008442:	f000 b88b 	b.w	800855c <__retarget_lock_acquire_recursive>
 8008446:	bf00      	nop
 8008448:	20001b9c 	.word	0x20001b9c

0800844c <__malloc_unlock>:
 800844c:	4801      	ldr	r0, [pc, #4]	@ (8008454 <__malloc_unlock+0x8>)
 800844e:	f000 b886 	b.w	800855e <__retarget_lock_release_recursive>
 8008452:	bf00      	nop
 8008454:	20001b9c 	.word	0x20001b9c

08008458 <memset>:
 8008458:	4603      	mov	r3, r0
 800845a:	4402      	add	r2, r0
 800845c:	4293      	cmp	r3, r2
 800845e:	d100      	bne.n	8008462 <memset+0xa>
 8008460:	4770      	bx	lr
 8008462:	f803 1b01 	strb.w	r1, [r3], #1
 8008466:	e7f9      	b.n	800845c <memset+0x4>

08008468 <_reclaim_reent>:
 8008468:	4b29      	ldr	r3, [pc, #164]	@ (8008510 <_reclaim_reent+0xa8>)
 800846a:	b570      	push	{r4, r5, r6, lr}
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4604      	mov	r4, r0
 8008470:	4283      	cmp	r3, r0
 8008472:	d04b      	beq.n	800850c <_reclaim_reent+0xa4>
 8008474:	69c3      	ldr	r3, [r0, #28]
 8008476:	b1ab      	cbz	r3, 80084a4 <_reclaim_reent+0x3c>
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	b16b      	cbz	r3, 8008498 <_reclaim_reent+0x30>
 800847c:	2500      	movs	r5, #0
 800847e:	69e3      	ldr	r3, [r4, #28]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	5959      	ldr	r1, [r3, r5]
 8008484:	2900      	cmp	r1, #0
 8008486:	d13b      	bne.n	8008500 <_reclaim_reent+0x98>
 8008488:	3504      	adds	r5, #4
 800848a:	2d80      	cmp	r5, #128	@ 0x80
 800848c:	d1f7      	bne.n	800847e <_reclaim_reent+0x16>
 800848e:	69e3      	ldr	r3, [r4, #28]
 8008490:	4620      	mov	r0, r4
 8008492:	68d9      	ldr	r1, [r3, #12]
 8008494:	f000 f864 	bl	8008560 <_free_r>
 8008498:	69e3      	ldr	r3, [r4, #28]
 800849a:	6819      	ldr	r1, [r3, #0]
 800849c:	b111      	cbz	r1, 80084a4 <_reclaim_reent+0x3c>
 800849e:	4620      	mov	r0, r4
 80084a0:	f000 f85e 	bl	8008560 <_free_r>
 80084a4:	6961      	ldr	r1, [r4, #20]
 80084a6:	b111      	cbz	r1, 80084ae <_reclaim_reent+0x46>
 80084a8:	4620      	mov	r0, r4
 80084aa:	f000 f859 	bl	8008560 <_free_r>
 80084ae:	69e1      	ldr	r1, [r4, #28]
 80084b0:	b111      	cbz	r1, 80084b8 <_reclaim_reent+0x50>
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 f854 	bl	8008560 <_free_r>
 80084b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80084ba:	b111      	cbz	r1, 80084c2 <_reclaim_reent+0x5a>
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 f84f 	bl	8008560 <_free_r>
 80084c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084c4:	b111      	cbz	r1, 80084cc <_reclaim_reent+0x64>
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 f84a 	bl	8008560 <_free_r>
 80084cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80084ce:	b111      	cbz	r1, 80084d6 <_reclaim_reent+0x6e>
 80084d0:	4620      	mov	r0, r4
 80084d2:	f000 f845 	bl	8008560 <_free_r>
 80084d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80084d8:	b111      	cbz	r1, 80084e0 <_reclaim_reent+0x78>
 80084da:	4620      	mov	r0, r4
 80084dc:	f000 f840 	bl	8008560 <_free_r>
 80084e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80084e2:	b111      	cbz	r1, 80084ea <_reclaim_reent+0x82>
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 f83b 	bl	8008560 <_free_r>
 80084ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80084ec:	b111      	cbz	r1, 80084f4 <_reclaim_reent+0x8c>
 80084ee:	4620      	mov	r0, r4
 80084f0:	f000 f836 	bl	8008560 <_free_r>
 80084f4:	6a23      	ldr	r3, [r4, #32]
 80084f6:	b14b      	cbz	r3, 800850c <_reclaim_reent+0xa4>
 80084f8:	4620      	mov	r0, r4
 80084fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084fe:	4718      	bx	r3
 8008500:	680e      	ldr	r6, [r1, #0]
 8008502:	4620      	mov	r0, r4
 8008504:	f000 f82c 	bl	8008560 <_free_r>
 8008508:	4631      	mov	r1, r6
 800850a:	e7bb      	b.n	8008484 <_reclaim_reent+0x1c>
 800850c:	bd70      	pop	{r4, r5, r6, pc}
 800850e:	bf00      	nop
 8008510:	20000014 	.word	0x20000014

08008514 <__libc_init_array>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	2600      	movs	r6, #0
 8008518:	4d0c      	ldr	r5, [pc, #48]	@ (800854c <__libc_init_array+0x38>)
 800851a:	4c0d      	ldr	r4, [pc, #52]	@ (8008550 <__libc_init_array+0x3c>)
 800851c:	1b64      	subs	r4, r4, r5
 800851e:	10a4      	asrs	r4, r4, #2
 8008520:	42a6      	cmp	r6, r4
 8008522:	d109      	bne.n	8008538 <__libc_init_array+0x24>
 8008524:	f000 f864 	bl	80085f0 <_init>
 8008528:	2600      	movs	r6, #0
 800852a:	4d0a      	ldr	r5, [pc, #40]	@ (8008554 <__libc_init_array+0x40>)
 800852c:	4c0a      	ldr	r4, [pc, #40]	@ (8008558 <__libc_init_array+0x44>)
 800852e:	1b64      	subs	r4, r4, r5
 8008530:	10a4      	asrs	r4, r4, #2
 8008532:	42a6      	cmp	r6, r4
 8008534:	d105      	bne.n	8008542 <__libc_init_array+0x2e>
 8008536:	bd70      	pop	{r4, r5, r6, pc}
 8008538:	f855 3b04 	ldr.w	r3, [r5], #4
 800853c:	4798      	blx	r3
 800853e:	3601      	adds	r6, #1
 8008540:	e7ee      	b.n	8008520 <__libc_init_array+0xc>
 8008542:	f855 3b04 	ldr.w	r3, [r5], #4
 8008546:	4798      	blx	r3
 8008548:	3601      	adds	r6, #1
 800854a:	e7f2      	b.n	8008532 <__libc_init_array+0x1e>
 800854c:	080086b4 	.word	0x080086b4
 8008550:	080086b4 	.word	0x080086b4
 8008554:	080086b4 	.word	0x080086b4
 8008558:	080086b8 	.word	0x080086b8

0800855c <__retarget_lock_acquire_recursive>:
 800855c:	4770      	bx	lr

0800855e <__retarget_lock_release_recursive>:
 800855e:	4770      	bx	lr

08008560 <_free_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4605      	mov	r5, r0
 8008564:	2900      	cmp	r1, #0
 8008566:	d040      	beq.n	80085ea <_free_r+0x8a>
 8008568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800856c:	1f0c      	subs	r4, r1, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	bfb8      	it	lt
 8008572:	18e4      	addlt	r4, r4, r3
 8008574:	f7ff ff64 	bl	8008440 <__malloc_lock>
 8008578:	4a1c      	ldr	r2, [pc, #112]	@ (80085ec <_free_r+0x8c>)
 800857a:	6813      	ldr	r3, [r2, #0]
 800857c:	b933      	cbnz	r3, 800858c <_free_r+0x2c>
 800857e:	6063      	str	r3, [r4, #4]
 8008580:	6014      	str	r4, [r2, #0]
 8008582:	4628      	mov	r0, r5
 8008584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008588:	f7ff bf60 	b.w	800844c <__malloc_unlock>
 800858c:	42a3      	cmp	r3, r4
 800858e:	d908      	bls.n	80085a2 <_free_r+0x42>
 8008590:	6820      	ldr	r0, [r4, #0]
 8008592:	1821      	adds	r1, r4, r0
 8008594:	428b      	cmp	r3, r1
 8008596:	bf01      	itttt	eq
 8008598:	6819      	ldreq	r1, [r3, #0]
 800859a:	685b      	ldreq	r3, [r3, #4]
 800859c:	1809      	addeq	r1, r1, r0
 800859e:	6021      	streq	r1, [r4, #0]
 80085a0:	e7ed      	b.n	800857e <_free_r+0x1e>
 80085a2:	461a      	mov	r2, r3
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	b10b      	cbz	r3, 80085ac <_free_r+0x4c>
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	d9fa      	bls.n	80085a2 <_free_r+0x42>
 80085ac:	6811      	ldr	r1, [r2, #0]
 80085ae:	1850      	adds	r0, r2, r1
 80085b0:	42a0      	cmp	r0, r4
 80085b2:	d10b      	bne.n	80085cc <_free_r+0x6c>
 80085b4:	6820      	ldr	r0, [r4, #0]
 80085b6:	4401      	add	r1, r0
 80085b8:	1850      	adds	r0, r2, r1
 80085ba:	4283      	cmp	r3, r0
 80085bc:	6011      	str	r1, [r2, #0]
 80085be:	d1e0      	bne.n	8008582 <_free_r+0x22>
 80085c0:	6818      	ldr	r0, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	4408      	add	r0, r1
 80085c6:	6010      	str	r0, [r2, #0]
 80085c8:	6053      	str	r3, [r2, #4]
 80085ca:	e7da      	b.n	8008582 <_free_r+0x22>
 80085cc:	d902      	bls.n	80085d4 <_free_r+0x74>
 80085ce:	230c      	movs	r3, #12
 80085d0:	602b      	str	r3, [r5, #0]
 80085d2:	e7d6      	b.n	8008582 <_free_r+0x22>
 80085d4:	6820      	ldr	r0, [r4, #0]
 80085d6:	1821      	adds	r1, r4, r0
 80085d8:	428b      	cmp	r3, r1
 80085da:	bf01      	itttt	eq
 80085dc:	6819      	ldreq	r1, [r3, #0]
 80085de:	685b      	ldreq	r3, [r3, #4]
 80085e0:	1809      	addeq	r1, r1, r0
 80085e2:	6021      	streq	r1, [r4, #0]
 80085e4:	6063      	str	r3, [r4, #4]
 80085e6:	6054      	str	r4, [r2, #4]
 80085e8:	e7cb      	b.n	8008582 <_free_r+0x22>
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	20001a60 	.word	0x20001a60

080085f0 <_init>:
 80085f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f2:	bf00      	nop
 80085f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f6:	bc08      	pop	{r3}
 80085f8:	469e      	mov	lr, r3
 80085fa:	4770      	bx	lr

080085fc <_fini>:
 80085fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fe:	bf00      	nop
 8008600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008602:	bc08      	pop	{r3}
 8008604:	469e      	mov	lr, r3
 8008606:	4770      	bx	lr
