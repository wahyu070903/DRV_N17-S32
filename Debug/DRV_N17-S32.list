
DRV_N17-S32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006db0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08006ec0  08006ec0  00007ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007048  08007048  00009068  2**0
                  CONTENTS
  4 .ARM          00000000  08007048  08007048  00009068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007048  08007048  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007048  08007048  00008048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800704c  0800704c  0000804c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007050  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001460  20000068  080070b8  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014c8  080070b8  000094c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023b54  00000000  00000000  00009091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004536  00000000  00000000  0002cbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  00031120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001190  00000000  00000000  00032778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afb2  00000000  00000000  00033908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024022  00000000  00000000  0004e8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097c58  00000000  00000000  000728dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044e8  00000000  00000000  0010a578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000e04a  00000000  00000000  0010ea60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0011caaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ea8 	.word	0x08006ea8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08006ea8 	.word	0x08006ea8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_d2uiz>:
 80004c8:	004a      	lsls	r2, r1, #1
 80004ca:	d211      	bcs.n	80004f0 <__aeabi_d2uiz+0x28>
 80004cc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80004d0:	d211      	bcs.n	80004f6 <__aeabi_d2uiz+0x2e>
 80004d2:	d50d      	bpl.n	80004f0 <__aeabi_d2uiz+0x28>
 80004d4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80004d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004dc:	d40e      	bmi.n	80004fc <__aeabi_d2uiz+0x34>
 80004de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	4770      	bx	lr
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	4770      	bx	lr
 80004f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fa:	d102      	bne.n	8000502 <__aeabi_d2uiz+0x3a>
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000500:	4770      	bx	lr
 8000502:	f04f 0000 	mov.w	r0, #0
 8000506:	4770      	bx	lr

08000508 <__aeabi_d2f>:
 8000508:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800050c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000510:	bf24      	itt	cs
 8000512:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000516:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800051a:	d90d      	bls.n	8000538 <__aeabi_d2f+0x30>
 800051c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000520:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000524:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000528:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800052c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000530:	bf08      	it	eq
 8000532:	f020 0001 	biceq.w	r0, r0, #1
 8000536:	4770      	bx	lr
 8000538:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800053c:	d121      	bne.n	8000582 <__aeabi_d2f+0x7a>
 800053e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000542:	bfbc      	itt	lt
 8000544:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000548:	4770      	bxlt	lr
 800054a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800054e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000552:	f1c2 0218 	rsb	r2, r2, #24
 8000556:	f1c2 0c20 	rsb	ip, r2, #32
 800055a:	fa10 f30c 	lsls.w	r3, r0, ip
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	bf18      	it	ne
 8000564:	f040 0001 	orrne.w	r0, r0, #1
 8000568:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800056c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000570:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000574:	ea40 000c 	orr.w	r0, r0, ip
 8000578:	fa23 f302 	lsr.w	r3, r3, r2
 800057c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000580:	e7cc      	b.n	800051c <__aeabi_d2f+0x14>
 8000582:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000586:	d107      	bne.n	8000598 <__aeabi_d2f+0x90>
 8000588:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800058c:	bf1e      	ittt	ne
 800058e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000592:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000596:	4770      	bxne	lr
 8000598:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800059c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80005a0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <__aeabi_frsub>:
 80005a8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80005ac:	e002      	b.n	80005b4 <__addsf3>
 80005ae:	bf00      	nop

080005b0 <__aeabi_fsub>:
 80005b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080005b4 <__addsf3>:
 80005b4:	0042      	lsls	r2, r0, #1
 80005b6:	bf1f      	itttt	ne
 80005b8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005bc:	ea92 0f03 	teqne	r2, r3
 80005c0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005c4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005c8:	d06a      	beq.n	80006a0 <__addsf3+0xec>
 80005ca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005ce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005d2:	bfc1      	itttt	gt
 80005d4:	18d2      	addgt	r2, r2, r3
 80005d6:	4041      	eorgt	r1, r0
 80005d8:	4048      	eorgt	r0, r1
 80005da:	4041      	eorgt	r1, r0
 80005dc:	bfb8      	it	lt
 80005de:	425b      	neglt	r3, r3
 80005e0:	2b19      	cmp	r3, #25
 80005e2:	bf88      	it	hi
 80005e4:	4770      	bxhi	lr
 80005e6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005ea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005ee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80005f2:	bf18      	it	ne
 80005f4:	4240      	negne	r0, r0
 80005f6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005fa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80005fe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000602:	bf18      	it	ne
 8000604:	4249      	negne	r1, r1
 8000606:	ea92 0f03 	teq	r2, r3
 800060a:	d03f      	beq.n	800068c <__addsf3+0xd8>
 800060c:	f1a2 0201 	sub.w	r2, r2, #1
 8000610:	fa41 fc03 	asr.w	ip, r1, r3
 8000614:	eb10 000c 	adds.w	r0, r0, ip
 8000618:	f1c3 0320 	rsb	r3, r3, #32
 800061c:	fa01 f103 	lsl.w	r1, r1, r3
 8000620:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000624:	d502      	bpl.n	800062c <__addsf3+0x78>
 8000626:	4249      	negs	r1, r1
 8000628:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800062c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000630:	d313      	bcc.n	800065a <__addsf3+0xa6>
 8000632:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000636:	d306      	bcc.n	8000646 <__addsf3+0x92>
 8000638:	0840      	lsrs	r0, r0, #1
 800063a:	ea4f 0131 	mov.w	r1, r1, rrx
 800063e:	f102 0201 	add.w	r2, r2, #1
 8000642:	2afe      	cmp	r2, #254	@ 0xfe
 8000644:	d251      	bcs.n	80006ea <__addsf3+0x136>
 8000646:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800064a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800064e:	bf08      	it	eq
 8000650:	f020 0001 	biceq.w	r0, r0, #1
 8000654:	ea40 0003 	orr.w	r0, r0, r3
 8000658:	4770      	bx	lr
 800065a:	0049      	lsls	r1, r1, #1
 800065c:	eb40 0000 	adc.w	r0, r0, r0
 8000660:	3a01      	subs	r2, #1
 8000662:	bf28      	it	cs
 8000664:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000668:	d2ed      	bcs.n	8000646 <__addsf3+0x92>
 800066a:	fab0 fc80 	clz	ip, r0
 800066e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000672:	ebb2 020c 	subs.w	r2, r2, ip
 8000676:	fa00 f00c 	lsl.w	r0, r0, ip
 800067a:	bfaa      	itet	ge
 800067c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000680:	4252      	neglt	r2, r2
 8000682:	4318      	orrge	r0, r3
 8000684:	bfbc      	itt	lt
 8000686:	40d0      	lsrlt	r0, r2
 8000688:	4318      	orrlt	r0, r3
 800068a:	4770      	bx	lr
 800068c:	f092 0f00 	teq	r2, #0
 8000690:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000694:	bf06      	itte	eq
 8000696:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800069a:	3201      	addeq	r2, #1
 800069c:	3b01      	subne	r3, #1
 800069e:	e7b5      	b.n	800060c <__addsf3+0x58>
 80006a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006a8:	bf18      	it	ne
 80006aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006ae:	d021      	beq.n	80006f4 <__addsf3+0x140>
 80006b0:	ea92 0f03 	teq	r2, r3
 80006b4:	d004      	beq.n	80006c0 <__addsf3+0x10c>
 80006b6:	f092 0f00 	teq	r2, #0
 80006ba:	bf08      	it	eq
 80006bc:	4608      	moveq	r0, r1
 80006be:	4770      	bx	lr
 80006c0:	ea90 0f01 	teq	r0, r1
 80006c4:	bf1c      	itt	ne
 80006c6:	2000      	movne	r0, #0
 80006c8:	4770      	bxne	lr
 80006ca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80006ce:	d104      	bne.n	80006da <__addsf3+0x126>
 80006d0:	0040      	lsls	r0, r0, #1
 80006d2:	bf28      	it	cs
 80006d4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80006d8:	4770      	bx	lr
 80006da:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80006de:	bf3c      	itt	cc
 80006e0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80006e4:	4770      	bxcc	lr
 80006e6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006ea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80006ee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006f2:	4770      	bx	lr
 80006f4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006f8:	bf16      	itet	ne
 80006fa:	4608      	movne	r0, r1
 80006fc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000700:	4601      	movne	r1, r0
 8000702:	0242      	lsls	r2, r0, #9
 8000704:	bf06      	itte	eq
 8000706:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800070a:	ea90 0f01 	teqeq	r0, r1
 800070e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000712:	4770      	bx	lr

08000714 <__aeabi_ui2f>:
 8000714:	f04f 0300 	mov.w	r3, #0
 8000718:	e004      	b.n	8000724 <__aeabi_i2f+0x8>
 800071a:	bf00      	nop

0800071c <__aeabi_i2f>:
 800071c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000720:	bf48      	it	mi
 8000722:	4240      	negmi	r0, r0
 8000724:	ea5f 0c00 	movs.w	ip, r0
 8000728:	bf08      	it	eq
 800072a:	4770      	bxeq	lr
 800072c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000730:	4601      	mov	r1, r0
 8000732:	f04f 0000 	mov.w	r0, #0
 8000736:	e01c      	b.n	8000772 <__aeabi_l2f+0x2a>

08000738 <__aeabi_ul2f>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	f04f 0300 	mov.w	r3, #0
 8000744:	e00a      	b.n	800075c <__aeabi_l2f+0x14>
 8000746:	bf00      	nop

08000748 <__aeabi_l2f>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000754:	d502      	bpl.n	800075c <__aeabi_l2f+0x14>
 8000756:	4240      	negs	r0, r0
 8000758:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075c:	ea5f 0c01 	movs.w	ip, r1
 8000760:	bf02      	ittt	eq
 8000762:	4684      	moveq	ip, r0
 8000764:	4601      	moveq	r1, r0
 8000766:	2000      	moveq	r0, #0
 8000768:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800076c:	bf08      	it	eq
 800076e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000772:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000776:	fabc f28c 	clz	r2, ip
 800077a:	3a08      	subs	r2, #8
 800077c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000780:	db10      	blt.n	80007a4 <__aeabi_l2f+0x5c>
 8000782:	fa01 fc02 	lsl.w	ip, r1, r2
 8000786:	4463      	add	r3, ip
 8000788:	fa00 fc02 	lsl.w	ip, r0, r2
 800078c:	f1c2 0220 	rsb	r2, r2, #32
 8000790:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000794:	fa20 f202 	lsr.w	r2, r0, r2
 8000798:	eb43 0002 	adc.w	r0, r3, r2
 800079c:	bf08      	it	eq
 800079e:	f020 0001 	biceq.w	r0, r0, #1
 80007a2:	4770      	bx	lr
 80007a4:	f102 0220 	add.w	r2, r2, #32
 80007a8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007ac:	f1c2 0220 	rsb	r2, r2, #32
 80007b0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007b4:	fa21 f202 	lsr.w	r2, r1, r2
 80007b8:	eb43 0002 	adc.w	r0, r3, r2
 80007bc:	bf08      	it	eq
 80007be:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007c2:	4770      	bx	lr

080007c4 <__aeabi_fmul>:
 80007c4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007cc:	bf1e      	ittt	ne
 80007ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007d2:	ea92 0f0c 	teqne	r2, ip
 80007d6:	ea93 0f0c 	teqne	r3, ip
 80007da:	d06f      	beq.n	80008bc <__aeabi_fmul+0xf8>
 80007dc:	441a      	add	r2, r3
 80007de:	ea80 0c01 	eor.w	ip, r0, r1
 80007e2:	0240      	lsls	r0, r0, #9
 80007e4:	bf18      	it	ne
 80007e6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007ea:	d01e      	beq.n	800082a <__aeabi_fmul+0x66>
 80007ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80007f0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007f4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007f8:	fba0 3101 	umull	r3, r1, r0, r1
 80007fc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000800:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000804:	bf3e      	ittt	cc
 8000806:	0049      	lslcc	r1, r1, #1
 8000808:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800080c:	005b      	lslcc	r3, r3, #1
 800080e:	ea40 0001 	orr.w	r0, r0, r1
 8000812:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000816:	2afd      	cmp	r2, #253	@ 0xfd
 8000818:	d81d      	bhi.n	8000856 <__aeabi_fmul+0x92>
 800081a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800081e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000822:	bf08      	it	eq
 8000824:	f020 0001 	biceq.w	r0, r0, #1
 8000828:	4770      	bx	lr
 800082a:	f090 0f00 	teq	r0, #0
 800082e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000832:	bf08      	it	eq
 8000834:	0249      	lsleq	r1, r1, #9
 8000836:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800083a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800083e:	3a7f      	subs	r2, #127	@ 0x7f
 8000840:	bfc2      	ittt	gt
 8000842:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000846:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800084a:	4770      	bxgt	lr
 800084c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000850:	f04f 0300 	mov.w	r3, #0
 8000854:	3a01      	subs	r2, #1
 8000856:	dc5d      	bgt.n	8000914 <__aeabi_fmul+0x150>
 8000858:	f112 0f19 	cmn.w	r2, #25
 800085c:	bfdc      	itt	le
 800085e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000862:	4770      	bxle	lr
 8000864:	f1c2 0200 	rsb	r2, r2, #0
 8000868:	0041      	lsls	r1, r0, #1
 800086a:	fa21 f102 	lsr.w	r1, r1, r2
 800086e:	f1c2 0220 	rsb	r2, r2, #32
 8000872:	fa00 fc02 	lsl.w	ip, r0, r2
 8000876:	ea5f 0031 	movs.w	r0, r1, rrx
 800087a:	f140 0000 	adc.w	r0, r0, #0
 800087e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000882:	bf08      	it	eq
 8000884:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000888:	4770      	bx	lr
 800088a:	f092 0f00 	teq	r2, #0
 800088e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000892:	bf02      	ittt	eq
 8000894:	0040      	lsleq	r0, r0, #1
 8000896:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800089a:	3a01      	subeq	r2, #1
 800089c:	d0f9      	beq.n	8000892 <__aeabi_fmul+0xce>
 800089e:	ea40 000c 	orr.w	r0, r0, ip
 80008a2:	f093 0f00 	teq	r3, #0
 80008a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008aa:	bf02      	ittt	eq
 80008ac:	0049      	lsleq	r1, r1, #1
 80008ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80008b2:	3b01      	subeq	r3, #1
 80008b4:	d0f9      	beq.n	80008aa <__aeabi_fmul+0xe6>
 80008b6:	ea41 010c 	orr.w	r1, r1, ip
 80008ba:	e78f      	b.n	80007dc <__aeabi_fmul+0x18>
 80008bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008c0:	ea92 0f0c 	teq	r2, ip
 80008c4:	bf18      	it	ne
 80008c6:	ea93 0f0c 	teqne	r3, ip
 80008ca:	d00a      	beq.n	80008e2 <__aeabi_fmul+0x11e>
 80008cc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80008d0:	bf18      	it	ne
 80008d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80008d6:	d1d8      	bne.n	800088a <__aeabi_fmul+0xc6>
 80008d8:	ea80 0001 	eor.w	r0, r0, r1
 80008dc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	bf17      	itett	ne
 80008e8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80008ec:	4608      	moveq	r0, r1
 80008ee:	f091 0f00 	teqne	r1, #0
 80008f2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80008f6:	d014      	beq.n	8000922 <__aeabi_fmul+0x15e>
 80008f8:	ea92 0f0c 	teq	r2, ip
 80008fc:	d101      	bne.n	8000902 <__aeabi_fmul+0x13e>
 80008fe:	0242      	lsls	r2, r0, #9
 8000900:	d10f      	bne.n	8000922 <__aeabi_fmul+0x15e>
 8000902:	ea93 0f0c 	teq	r3, ip
 8000906:	d103      	bne.n	8000910 <__aeabi_fmul+0x14c>
 8000908:	024b      	lsls	r3, r1, #9
 800090a:	bf18      	it	ne
 800090c:	4608      	movne	r0, r1
 800090e:	d108      	bne.n	8000922 <__aeabi_fmul+0x15e>
 8000910:	ea80 0001 	eor.w	r0, r0, r1
 8000914:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000918:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800091c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000920:	4770      	bx	lr
 8000922:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000926:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800092a:	4770      	bx	lr

0800092c <__aeabi_fdiv>:
 800092c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000930:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000934:	bf1e      	ittt	ne
 8000936:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800093a:	ea92 0f0c 	teqne	r2, ip
 800093e:	ea93 0f0c 	teqne	r3, ip
 8000942:	d069      	beq.n	8000a18 <__aeabi_fdiv+0xec>
 8000944:	eba2 0203 	sub.w	r2, r2, r3
 8000948:	ea80 0c01 	eor.w	ip, r0, r1
 800094c:	0249      	lsls	r1, r1, #9
 800094e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000952:	d037      	beq.n	80009c4 <__aeabi_fdiv+0x98>
 8000954:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000958:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800095c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000960:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000964:	428b      	cmp	r3, r1
 8000966:	bf38      	it	cc
 8000968:	005b      	lslcc	r3, r3, #1
 800096a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800096e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000972:	428b      	cmp	r3, r1
 8000974:	bf24      	itt	cs
 8000976:	1a5b      	subcs	r3, r3, r1
 8000978:	ea40 000c 	orrcs.w	r0, r0, ip
 800097c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000980:	bf24      	itt	cs
 8000982:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000986:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800098a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800098e:	bf24      	itt	cs
 8000990:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000994:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000998:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800099c:	bf24      	itt	cs
 800099e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009a2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	bf18      	it	ne
 80009aa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009ae:	d1e0      	bne.n	8000972 <__aeabi_fdiv+0x46>
 80009b0:	2afd      	cmp	r2, #253	@ 0xfd
 80009b2:	f63f af50 	bhi.w	8000856 <__aeabi_fmul+0x92>
 80009b6:	428b      	cmp	r3, r1
 80009b8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009bc:	bf08      	it	eq
 80009be:	f020 0001 	biceq.w	r0, r0, #1
 80009c2:	4770      	bx	lr
 80009c4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009c8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009cc:	327f      	adds	r2, #127	@ 0x7f
 80009ce:	bfc2      	ittt	gt
 80009d0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80009d4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009d8:	4770      	bxgt	lr
 80009da:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009de:	f04f 0300 	mov.w	r3, #0
 80009e2:	3a01      	subs	r2, #1
 80009e4:	e737      	b.n	8000856 <__aeabi_fmul+0x92>
 80009e6:	f092 0f00 	teq	r2, #0
 80009ea:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009ee:	bf02      	ittt	eq
 80009f0:	0040      	lsleq	r0, r0, #1
 80009f2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80009f6:	3a01      	subeq	r2, #1
 80009f8:	d0f9      	beq.n	80009ee <__aeabi_fdiv+0xc2>
 80009fa:	ea40 000c 	orr.w	r0, r0, ip
 80009fe:	f093 0f00 	teq	r3, #0
 8000a02:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a06:	bf02      	ittt	eq
 8000a08:	0049      	lsleq	r1, r1, #1
 8000a0a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a0e:	3b01      	subeq	r3, #1
 8000a10:	d0f9      	beq.n	8000a06 <__aeabi_fdiv+0xda>
 8000a12:	ea41 010c 	orr.w	r1, r1, ip
 8000a16:	e795      	b.n	8000944 <__aeabi_fdiv+0x18>
 8000a18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a1c:	ea92 0f0c 	teq	r2, ip
 8000a20:	d108      	bne.n	8000a34 <__aeabi_fdiv+0x108>
 8000a22:	0242      	lsls	r2, r0, #9
 8000a24:	f47f af7d 	bne.w	8000922 <__aeabi_fmul+0x15e>
 8000a28:	ea93 0f0c 	teq	r3, ip
 8000a2c:	f47f af70 	bne.w	8000910 <__aeabi_fmul+0x14c>
 8000a30:	4608      	mov	r0, r1
 8000a32:	e776      	b.n	8000922 <__aeabi_fmul+0x15e>
 8000a34:	ea93 0f0c 	teq	r3, ip
 8000a38:	d104      	bne.n	8000a44 <__aeabi_fdiv+0x118>
 8000a3a:	024b      	lsls	r3, r1, #9
 8000a3c:	f43f af4c 	beq.w	80008d8 <__aeabi_fmul+0x114>
 8000a40:	4608      	mov	r0, r1
 8000a42:	e76e      	b.n	8000922 <__aeabi_fmul+0x15e>
 8000a44:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a48:	bf18      	it	ne
 8000a4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a4e:	d1ca      	bne.n	80009e6 <__aeabi_fdiv+0xba>
 8000a50:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000a54:	f47f af5c 	bne.w	8000910 <__aeabi_fmul+0x14c>
 8000a58:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000a5c:	f47f af3c 	bne.w	80008d8 <__aeabi_fmul+0x114>
 8000a60:	e75f      	b.n	8000922 <__aeabi_fmul+0x15e>
 8000a62:	bf00      	nop

08000a64 <__gesf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpsf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__lesf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpsf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpsf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d011      	beq.n	8000ab4 <__cmpsf2+0x40>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a96:	bf18      	it	ne
 8000a98:	ea90 0f01 	teqne	r0, r1
 8000a9c:	bf58      	it	pl
 8000a9e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000aa2:	bf88      	it	hi
 8000aa4:	17c8      	asrhi	r0, r1, #31
 8000aa6:	bf38      	it	cc
 8000aa8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000aac:	bf18      	it	ne
 8000aae:	f040 0001 	orrne.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab8:	d102      	bne.n	8000ac0 <__cmpsf2+0x4c>
 8000aba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000abe:	d105      	bne.n	8000acc <__cmpsf2+0x58>
 8000ac0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ac4:	d1e4      	bne.n	8000a90 <__cmpsf2+0x1c>
 8000ac6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000aca:	d0e1      	beq.n	8000a90 <__cmpsf2+0x1c>
 8000acc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_cfrcmple>:
 8000ad4:	4684      	mov	ip, r0
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	4661      	mov	r1, ip
 8000ada:	e7ff      	b.n	8000adc <__aeabi_cfcmpeq>

08000adc <__aeabi_cfcmpeq>:
 8000adc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ade:	f7ff ffc9 	bl	8000a74 <__cmpsf2>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	bf48      	it	mi
 8000ae6:	f110 0f00 	cmnmi.w	r0, #0
 8000aea:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000aec <__aeabi_fcmpeq>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff fff4 	bl	8000adc <__aeabi_cfcmpeq>
 8000af4:	bf0c      	ite	eq
 8000af6:	2001      	moveq	r0, #1
 8000af8:	2000      	movne	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_fcmplt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffea 	bl	8000adc <__aeabi_cfcmpeq>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_fcmple>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffe0 	bl	8000adc <__aeabi_cfcmpeq>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_fcmpge>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffd2 	bl	8000ad4 <__aeabi_cfrcmple>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fcmpgt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffc8 	bl	8000ad4 <__aeabi_cfrcmple>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_f2iz>:
 8000b50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b54:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b58:	d30f      	bcc.n	8000b7a <__aeabi_f2iz+0x2a>
 8000b5a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b5e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b62:	d90d      	bls.n	8000b80 <__aeabi_f2iz+0x30>
 8000b64:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b70:	fa23 f002 	lsr.w	r0, r3, r2
 8000b74:	bf18      	it	ne
 8000b76:	4240      	negne	r0, r0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr
 8000b80:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b84:	d101      	bne.n	8000b8a <__aeabi_f2iz+0x3a>
 8000b86:	0242      	lsls	r2, r0, #9
 8000b88:	d105      	bne.n	8000b96 <__aeabi_f2iz+0x46>
 8000b8a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b8e:	bf08      	it	eq
 8000b90:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_f2uiz>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	d20e      	bcs.n	8000bbe <__aeabi_f2uiz+0x22>
 8000ba0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ba4:	d30b      	bcc.n	8000bbe <__aeabi_f2uiz+0x22>
 8000ba6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000baa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bae:	d409      	bmi.n	8000bc4 <__aeabi_f2uiz+0x28>
 8000bb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb8:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbc:	4770      	bx	lr
 8000bbe:	f04f 0000 	mov.w	r0, #0
 8000bc2:	4770      	bx	lr
 8000bc4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000bc8:	d101      	bne.n	8000bce <__aeabi_f2uiz+0x32>
 8000bca:	0242      	lsls	r2, r0, #9
 8000bcc:	d102      	bne.n	8000bd4 <__aeabi_f2uiz+0x38>
 8000bce:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	@ (8000bec <vApplicationGetIdleTaskMemory+0x10>)
 8000bde:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000be0:	4b03      	ldr	r3, [pc, #12]	@ (8000bf0 <vApplicationGetIdleTaskMemory+0x14>)
 8000be2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000be4:	2380      	movs	r3, #128	@ 0x80
 8000be6:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000284 	.word	0x20000284
 8000bf0:	20000084 	.word	0x20000084

08000bf4 <i2c_reset>:
		}
		HAL_Delay(5);
	}
}

void i2c_reset(I2C_HandleTypeDef* hi2c) {
 8000bf4:	b538      	push	{r3, r4, r5, lr}
 8000bf6:	4604      	mov	r4, r0
	__HAL_RCC_I2C1_FORCE_RESET();
 8000bf8:	4d0c      	ldr	r5, [pc, #48]	@ (8000c2c <i2c_reset+0x38>)
 8000bfa:	692b      	ldr	r3, [r5, #16]
 8000bfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c00:	612b      	str	r3, [r5, #16]
	HAL_Delay(10);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f000 fd06 	bl	8001614 <HAL_Delay>
	__HAL_RCC_I2C1_RELEASE_RESET();
 8000c08:	692b      	ldr	r3, [r5, #16]
 8000c0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000c0e:	612b      	str	r3, [r5, #16]
	HAL_Delay(10);
 8000c10:	200a      	movs	r0, #10
 8000c12:	f000 fcff 	bl	8001614 <HAL_Delay>
    HAL_I2C_DeInit(hi2c);
 8000c16:	4620      	mov	r0, r4
 8000c18:	f001 fce8 	bl	80025ec <HAL_I2C_DeInit>
    HAL_Delay(10);
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f000 fcf9 	bl	8001614 <HAL_Delay>
    HAL_I2C_Init(hi2c);
 8000c22:	4620      	mov	r0, r4
 8000c24:	f001 fc04 	bl	8002430 <HAL_I2C_Init>
}
 8000c28:	bd38      	pop	{r3, r4, r5, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <i2c_bus_recover>:

void i2c_bus_recover(I2C_HandleTypeDef* hi2c) {
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	b086      	sub	sp, #24
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	2300      	movs	r3, #0
 8000c36:	9302      	str	r3, [sp, #8]
 8000c38:	9303      	str	r3, [sp, #12]
 8000c3a:	9304      	str	r3, [sp, #16]
 8000c3c:	9305      	str	r3, [sp, #20]
    uint16_t scl_pin, sda_pin;

    const uint8_t max_timeout = 100;
    static uint8_t timeout_count = 0;

    if (hi2c->Instance == I2C1) {
 8000c3e:	6803      	ldr	r3, [r0, #0]
 8000c40:	4a24      	ldr	r2, [pc, #144]	@ (8000cd4 <i2c_bus_recover+0xa4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d043      	beq.n	8000cce <i2c_bus_recover+0x9e>
        scl_port = GPIOB;
        sda_port = GPIOB;
        scl_pin = GPIO_PIN_6;
        sda_pin = GPIO_PIN_7;
    } else if (hi2c->Instance == I2C2) {
 8000c46:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d13d      	bne.n	8000cca <i2c_bus_recover+0x9a>
        scl_port = GPIOB;
        sda_port = GPIOB;
        scl_pin = GPIO_PIN_10;
        sda_pin = GPIO_PIN_11;
 8000c4e:	f44f 6600 	mov.w	r6, #2048	@ 0x800
        scl_pin = GPIO_PIN_10;
 8000c52:	f44f 6580 	mov.w	r5, #1024	@ 0x400
    } else {
        return;
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <i2c_bus_recover+0xa8>)
 8000c58:	699a      	ldr	r2, [r3, #24]
 8000c5a:	f042 0208 	orr.w	r2, r2, #8
 8000c5e:	619a      	str	r2, [r3, #24]
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = scl_pin | sda_pin;
 8000c6a:	ea45 0306 	orr.w	r3, r5, r6
 8000c6e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c70:	2311      	movs	r3, #17
 8000c72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(scl_port, &GPIO_InitStruct);
 8000c7c:	a902      	add	r1, sp, #8
 8000c7e:	4817      	ldr	r0, [pc, #92]	@ (8000cdc <i2c_bus_recover+0xac>)
 8000c80:	f000 fdca 	bl	8001818 <HAL_GPIO_Init>

    while(HAL_GPIO_ReadPin(sda_port, sda_pin) == GPIO_PIN_RESET) {
 8000c84:	4631      	mov	r1, r6
 8000c86:	4815      	ldr	r0, [pc, #84]	@ (8000cdc <i2c_bus_recover+0xac>)
 8000c88:	f000 ff52 	bl	8001b30 <HAL_GPIO_ReadPin>
 8000c8c:	b9b8      	cbnz	r0, 8000cbe <i2c_bus_recover+0x8e>
		HAL_GPIO_WritePin(scl_port, scl_pin, GPIO_PIN_SET);
 8000c8e:	4c13      	ldr	r4, [pc, #76]	@ (8000cdc <i2c_bus_recover+0xac>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	4629      	mov	r1, r5
 8000c94:	4620      	mov	r0, r4
 8000c96:	f000 ff52 	bl	8001b3e <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 fcba 	bl	8001614 <HAL_Delay>
		HAL_GPIO_WritePin(scl_port, scl_pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f000 ff4a 	bl	8001b3e <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f000 fcb2 	bl	8001614 <HAL_Delay>

		timeout_count ++;
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce0 <i2c_bus_recover+0xb0>)
 8000cb2:	7813      	ldrb	r3, [r2, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	7013      	strb	r3, [r2, #0]
		if(timeout_count > max_timeout) break;
 8000cba:	2b64      	cmp	r3, #100	@ 0x64
 8000cbc:	d9e2      	bls.n	8000c84 <i2c_bus_recover+0x54>
    }

    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cbe:	2312      	movs	r3, #18
 8000cc0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(scl_port, &GPIO_InitStruct);
 8000cc2:	a902      	add	r1, sp, #8
 8000cc4:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <i2c_bus_recover+0xac>)
 8000cc6:	f000 fda7 	bl	8001818 <HAL_GPIO_Init>
}
 8000cca:	b006      	add	sp, #24
 8000ccc:	bd70      	pop	{r4, r5, r6, pc}
        sda_pin = GPIO_PIN_7;
 8000cce:	2680      	movs	r6, #128	@ 0x80
        scl_pin = GPIO_PIN_6;
 8000cd0:	2540      	movs	r5, #64	@ 0x40
 8000cd2:	e7c0      	b.n	8000c56 <i2c_bus_recover+0x26>
 8000cd4:	40005400 	.word	0x40005400
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010c00 	.word	0x40010c00
 8000ce0:	20000324 	.word	0x20000324

08000ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ce8:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cea:	2400      	movs	r4, #0
 8000cec:	9404      	str	r4, [sp, #16]
 8000cee:	9405      	str	r4, [sp, #20]
 8000cf0:	9406      	str	r4, [sp, #24]
 8000cf2:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf4:	4b31      	ldr	r3, [pc, #196]	@ (8000dbc <MX_GPIO_Init+0xd8>)
 8000cf6:	699a      	ldr	r2, [r3, #24]
 8000cf8:	f042 0210 	orr.w	r2, r2, #16
 8000cfc:	619a      	str	r2, [r3, #24]
 8000cfe:	699a      	ldr	r2, [r3, #24]
 8000d00:	f002 0210 	and.w	r2, r2, #16
 8000d04:	9200      	str	r2, [sp, #0]
 8000d06:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d08:	699a      	ldr	r2, [r3, #24]
 8000d0a:	f042 0220 	orr.w	r2, r2, #32
 8000d0e:	619a      	str	r2, [r3, #24]
 8000d10:	699a      	ldr	r2, [r3, #24]
 8000d12:	f002 0220 	and.w	r2, r2, #32
 8000d16:	9201      	str	r2, [sp, #4]
 8000d18:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	699a      	ldr	r2, [r3, #24]
 8000d1c:	f042 0204 	orr.w	r2, r2, #4
 8000d20:	619a      	str	r2, [r3, #24]
 8000d22:	699a      	ldr	r2, [r3, #24]
 8000d24:	f002 0204 	and.w	r2, r2, #4
 8000d28:	9202      	str	r2, [sp, #8]
 8000d2a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	699a      	ldr	r2, [r3, #24]
 8000d2e:	f042 0208 	orr.w	r2, r2, #8
 8000d32:	619a      	str	r2, [r3, #24]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	9303      	str	r3, [sp, #12]
 8000d3c:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d3e:	f8df 9080 	ldr.w	r9, [pc, #128]	@ 8000dc0 <MX_GPIO_Init+0xdc>
 8000d42:	4622      	mov	r2, r4
 8000d44:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d48:	4648      	mov	r0, r9
 8000d4a:	f000 fef8 	bl	8001b3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000d4e:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8000dc4 <MX_GPIO_Init+0xe0>
 8000d52:	4622      	mov	r2, r4
 8000d54:	2106      	movs	r1, #6
 8000d56:	4640      	mov	r0, r8
 8000d58:	f000 fef1 	bl	8001b3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d5c:	4d1a      	ldr	r5, [pc, #104]	@ (8000dc8 <MX_GPIO_Init+0xe4>)
 8000d5e:	4622      	mov	r2, r4
 8000d60:	2120      	movs	r1, #32
 8000d62:	4628      	mov	r0, r5
 8000d64:	f000 feeb 	bl	8001b3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d6c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2701      	movs	r7, #1
 8000d70:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2602      	movs	r6, #2
 8000d76:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d78:	a904      	add	r1, sp, #16
 8000d7a:	4648      	mov	r0, r9
 8000d7c:	f000 fd4c 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000d80:	2306      	movs	r3, #6
 8000d82:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	a904      	add	r1, sp, #16
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	f000 fd43 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d92:	2310      	movs	r3, #16
 8000d94:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9a:	eb0d 0103 	add.w	r1, sp, r3
 8000d9e:	4628      	mov	r0, r5
 8000da0:	f000 fd3a 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000da4:	2320      	movs	r3, #32
 8000da6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	a904      	add	r1, sp, #16
 8000db0:	4628      	mov	r0, r5
 8000db2:	f000 fd31 	bl	8001818 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000db6:	b009      	add	sp, #36	@ 0x24
 8000db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40011000 	.word	0x40011000
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	40010c00 	.word	0x40010c00

08000dcc <StartDriverTask>:

/* USER CODE BEGIN 4 */
void StartDriverTask(void const * argument){
 8000dcc:	b508      	push	{r3, lr}
	for(;;){
		Motion_Runtime();
 8000dce:	f005 fcdd 	bl	800678c <Motion_Runtime>
	for(;;){
 8000dd2:	e7fc      	b.n	8000dce <StartDriverTask+0x2>

08000dd4 <StartEncoderTask>:
	}
}


void StartEncoderTask(void const * argument){
 8000dd4:	b508      	push	{r3, lr}
	for(;;){
		encoder_counter = EncoderEnablePool();
 8000dd6:	f004 fb4b 	bl	8005470 <EncoderEnablePool>
 8000dda:	4b01      	ldr	r3, [pc, #4]	@ (8000de0 <StartEncoderTask+0xc>)
 8000ddc:	6018      	str	r0, [r3, #0]
	for(;;){
 8000dde:	e7fa      	b.n	8000dd6 <StartEncoderTask+0x2>
 8000de0:	20000330 	.word	0x20000330

08000de4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000de4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f004 fbea 	bl	80055c0 <osDelay>
  for(;;)
 8000dec:	e7fb      	b.n	8000de6 <StartDefaultTask+0x2>
	...

08000df0 <suspendTaskEcpectSelf>:
void suspendTaskEcpectSelf(){
 8000df0:	b508      	push	{r3, lr}
	vTaskSuspend(driverTaskHandler);
 8000df2:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <suspendTaskEcpectSelf+0x14>)
 8000df4:	6818      	ldr	r0, [r3, #0]
 8000df6:	f005 f809 	bl	8005e0c <vTaskSuspend>
	vTaskSuspend(encoderTaskHandler);
 8000dfa:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <suspendTaskEcpectSelf+0x18>)
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	f005 f805 	bl	8005e0c <vTaskSuspend>
}
 8000e02:	bd08      	pop	{r3, pc}
 8000e04:	2000033c 	.word	0x2000033c
 8000e08:	20000338 	.word	0x20000338

08000e0c <StartWatcherTask>:
void StartWatcherTask(void const * argument){
 8000e0c:	b508      	push	{r3, lr}
		displaySysStat();
 8000e0e:	f000 fb95 	bl	800153c <displaySysStat>
		if(isErrorExist()){
 8000e12:	f000 fb89 	bl	8001528 <isErrorExist>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d0f9      	beq.n	8000e0e <StartWatcherTask+0x2>
			suspendTaskEcpectSelf();
 8000e1a:	f7ff ffe9 	bl	8000df0 <suspendTaskEcpectSelf>
 8000e1e:	e7f6      	b.n	8000e0e <StartWatcherTask+0x2>

08000e20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e20:	b510      	push	{r4, lr}
 8000e22:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e24:	6802      	ldr	r2, [r0, #0]
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d004      	beq.n	8000e36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) {
 8000e2c:	6822      	ldr	r2, [r4, #0]
 8000e2e:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d003      	beq.n	8000e3c <HAL_TIM_PeriodElapsedCallback+0x1c>
	  pid_computed = PID_Compute(&motor_target, &encoder_counter);
  }
  /* USER CODE END Callback 1 */
}
 8000e34:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8000e36:	f000 fbdb 	bl	80015f0 <HAL_IncTick>
 8000e3a:	e7f7      	b.n	8000e2c <HAL_TIM_PeriodElapsedCallback+0xc>
	  pid_computed = PID_Compute(&motor_target, &encoder_counter);
 8000e3c:	4905      	ldr	r1, [pc, #20]	@ (8000e54 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e3e:	4806      	ldr	r0, [pc, #24]	@ (8000e58 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e40:	f005 fb5e 	bl	8006500 <PID_Compute>
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e46:	6018      	str	r0, [r3, #0]
}
 8000e48:	e7f4      	b.n	8000e34 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000e4a:	bf00      	nop
 8000e4c:	40012c00 	.word	0x40012c00
 8000e50:	40000400 	.word	0x40000400
 8000e54:	20000330 	.word	0x20000330
 8000e58:	20000328 	.word	0x20000328
 8000e5c:	2000032c 	.word	0x2000032c

08000e60 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <Error_Handler+0x2>

08000e64 <MX_I2C1_Init>:
{
 8000e64:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000e66:	480a      	ldr	r0, [pc, #40]	@ (8000e90 <MX_I2C1_Init+0x2c>)
 8000e68:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <MX_I2C1_Init+0x30>)
 8000e6a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <MX_I2C1_Init+0x34>)
 8000e6e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e70:	2300      	movs	r3, #0
 8000e72:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e74:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e7a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e7c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e7e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e80:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e82:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e84:	f001 fad4 	bl	8002430 <HAL_I2C_Init>
 8000e88:	b900      	cbnz	r0, 8000e8c <MX_I2C1_Init+0x28>
}
 8000e8a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e8c:	f7ff ffe8 	bl	8000e60 <Error_Handler>
 8000e90:	20000464 	.word	0x20000464
 8000e94:	40005400 	.word	0x40005400
 8000e98:	00061a80 	.word	0x00061a80

08000e9c <MX_TIM2_Init>:
{
 8000e9c:	b500      	push	{lr}
 8000e9e:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	9308      	str	r3, [sp, #32]
 8000ea4:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	9302      	str	r3, [sp, #8]
 8000eaa:	9303      	str	r3, [sp, #12]
 8000eac:	9304      	str	r3, [sp, #16]
 8000eae:	9305      	str	r3, [sp, #20]
 8000eb0:	9306      	str	r3, [sp, #24]
 8000eb2:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8000eb4:	4816      	ldr	r0, [pc, #88]	@ (8000f10 <MX_TIM2_Init+0x74>)
 8000eb6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eba:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 72 - 1;
 8000ebc:	2247      	movs	r2, #71	@ 0x47
 8000ebe:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4 - 1;
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eca:	f003 fa4d 	bl	8004368 <HAL_TIM_PWM_Init>
 8000ece:	b9c8      	cbnz	r0, 8000f04 <MX_TIM2_Init+0x68>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed4:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ed6:	a908      	add	r1, sp, #32
 8000ed8:	480d      	ldr	r0, [pc, #52]	@ (8000f10 <MX_TIM2_Init+0x74>)
 8000eda:	f003 fcb7 	bl	800484c <HAL_TIMEx_MasterConfigSynchronization>
 8000ede:	b998      	cbnz	r0, 8000f08 <MX_TIM2_Init+0x6c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee0:	2360      	movs	r3, #96	@ 0x60
 8000ee2:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 50;
 8000ee4:	2332      	movs	r3, #50	@ 0x32
 8000ee6:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee8:	2200      	movs	r2, #0
 8000eea:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eec:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eee:	a901      	add	r1, sp, #4
 8000ef0:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <MX_TIM2_Init+0x74>)
 8000ef2:	f003 fa93 	bl	800441c <HAL_TIM_PWM_ConfigChannel>
 8000ef6:	b948      	cbnz	r0, 8000f0c <MX_TIM2_Init+0x70>
  HAL_TIM_MspPostInit(&htim2);
 8000ef8:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <MX_TIM2_Init+0x74>)
 8000efa:	f000 f9e9 	bl	80012d0 <HAL_TIM_MspPostInit>
}
 8000efe:	b00b      	add	sp, #44	@ 0x2c
 8000f00:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f04:	f7ff ffac 	bl	8000e60 <Error_Handler>
    Error_Handler();
 8000f08:	f7ff ffaa 	bl	8000e60 <Error_Handler>
    Error_Handler();
 8000f0c:	f7ff ffa8 	bl	8000e60 <Error_Handler>
 8000f10:	2000041c 	.word	0x2000041c

08000f14 <MX_USART1_UART_Init>:
{
 8000f14:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000f16:	480a      	ldr	r0, [pc, #40]	@ (8000f40 <MX_USART1_UART_Init+0x2c>)
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <MX_USART1_UART_Init+0x30>)
 8000f1a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 230400;
 8000f1c:	f44f 3361 	mov.w	r3, #230400	@ 0x38400
 8000f20:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	2300      	movs	r3, #0
 8000f24:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f26:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f28:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	61c3      	str	r3, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000f32:	f003 fdde 	bl	8004af2 <HAL_HalfDuplex_Init>
 8000f36:	b900      	cbnz	r0, 8000f3a <MX_USART1_UART_Init+0x26>
}
 8000f38:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f3a:	f7ff ff91 	bl	8000e60 <Error_Handler>
 8000f3e:	bf00      	nop
 8000f40:	2000038c 	.word	0x2000038c
 8000f44:	40013800 	.word	0x40013800

08000f48 <MX_USART3_UART_Init>:
{
 8000f48:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8000f4a:	480a      	ldr	r0, [pc, #40]	@ (8000f74 <MX_USART3_UART_Init+0x2c>)
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <MX_USART3_UART_Init+0x30>)
 8000f4e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 8000f50:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8000f54:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	2300      	movs	r3, #0
 8000f58:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f5a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f5c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f5e:	220c      	movs	r2, #12
 8000f60:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f66:	f003 fd94 	bl	8004a92 <HAL_UART_Init>
 8000f6a:	b900      	cbnz	r0, 8000f6e <MX_USART3_UART_Init+0x26>
}
 8000f6c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000f6e:	f7ff ff77 	bl	8000e60 <Error_Handler>
 8000f72:	bf00      	nop
 8000f74:	20000344 	.word	0x20000344
 8000f78:	40004800 	.word	0x40004800

08000f7c <MX_TIM3_Init>:
{
 8000f7c:	b500      	push	{lr}
 8000f7e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f80:	2300      	movs	r3, #0
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	9303      	str	r3, [sp, #12]
 8000f86:	9304      	str	r3, [sp, #16]
 8000f88:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 8000f8e:	4813      	ldr	r0, [pc, #76]	@ (8000fdc <MX_TIM3_Init+0x60>)
 8000f90:	4a13      	ldr	r2, [pc, #76]	@ (8000fe0 <MX_TIM3_Init+0x64>)
 8000f92:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 72 - 1;
 8000f94:	2247      	movs	r2, #71	@ 0x47
 8000f96:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000 - 1;
 8000f9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f9e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa0:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fa4:	f003 f9b4 	bl	8004310 <HAL_TIM_Base_Init>
 8000fa8:	b990      	cbnz	r0, 8000fd0 <MX_TIM3_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000faa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fae:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fb0:	a902      	add	r1, sp, #8
 8000fb2:	480a      	ldr	r0, [pc, #40]	@ (8000fdc <MX_TIM3_Init+0x60>)
 8000fb4:	f003 faac 	bl	8004510 <HAL_TIM_ConfigClockSource>
 8000fb8:	b960      	cbnz	r0, 8000fd4 <MX_TIM3_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fc0:	4669      	mov	r1, sp
 8000fc2:	4806      	ldr	r0, [pc, #24]	@ (8000fdc <MX_TIM3_Init+0x60>)
 8000fc4:	f003 fc42 	bl	800484c <HAL_TIMEx_MasterConfigSynchronization>
 8000fc8:	b930      	cbnz	r0, 8000fd8 <MX_TIM3_Init+0x5c>
}
 8000fca:	b007      	add	sp, #28
 8000fcc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000fd0:	f7ff ff46 	bl	8000e60 <Error_Handler>
    Error_Handler();
 8000fd4:	f7ff ff44 	bl	8000e60 <Error_Handler>
    Error_Handler();
 8000fd8:	f7ff ff42 	bl	8000e60 <Error_Handler>
 8000fdc:	200003d4 	.word	0x200003d4
 8000fe0:	40000400 	.word	0x40000400

08000fe4 <SystemClock_Config>:
{
 8000fe4:	b500      	push	{lr}
 8000fe6:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe8:	2228      	movs	r2, #40	@ 0x28
 8000fea:	2100      	movs	r1, #0
 8000fec:	a806      	add	r0, sp, #24
 8000fee:	f005 fdfb 	bl	8006be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	9303      	str	r3, [sp, #12]
 8000ffa:	9304      	str	r3, [sp, #16]
 8000ffc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffe:	2201      	movs	r2, #1
 8001000:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001002:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001006:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	2202      	movs	r2, #2
 800100c:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100e:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001010:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001014:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001016:	a806      	add	r0, sp, #24
 8001018:	f002 fc7c 	bl	8003914 <HAL_RCC_OscConfig>
 800101c:	b980      	cbnz	r0, 8001040 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101e:	230f      	movs	r3, #15
 8001020:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001022:	2102      	movs	r1, #2
 8001024:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800102a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800102e:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001030:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001032:	a801      	add	r0, sp, #4
 8001034:	f002 fea0 	bl	8003d78 <HAL_RCC_ClockConfig>
 8001038:	b920      	cbnz	r0, 8001044 <SystemClock_Config+0x60>
}
 800103a:	b011      	add	sp, #68	@ 0x44
 800103c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001040:	f7ff ff0e 	bl	8000e60 <Error_Handler>
    Error_Handler();
 8001044:	f7ff ff0c 	bl	8000e60 <Error_Handler>

08001048 <main>:
{
 8001048:	b500      	push	{lr}
 800104a:	b09d      	sub	sp, #116	@ 0x74
  HAL_Init();
 800104c:	f000 fabe 	bl	80015cc <HAL_Init>
  SystemClock_Config();
 8001050:	f7ff ffc8 	bl	8000fe4 <SystemClock_Config>
  MX_GPIO_Init();
 8001054:	f7ff fe46 	bl	8000ce4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001058:	f7ff ff04 	bl	8000e64 <MX_I2C1_Init>
  MX_TIM2_Init();
 800105c:	f7ff ff1e 	bl	8000e9c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001060:	f7ff ff58 	bl	8000f14 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001064:	f7ff ff70 	bl	8000f48 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001068:	f7ff ff88 	bl	8000f7c <MX_TIM3_Init>
  i2c_bus_recover(&hi2c1);
 800106c:	4c2c      	ldr	r4, [pc, #176]	@ (8001120 <main+0xd8>)
 800106e:	4620      	mov	r0, r4
 8001070:	f7ff fdde 	bl	8000c30 <i2c_bus_recover>
  i2c_reset(&hi2c1);
 8001074:	4620      	mov	r0, r4
 8001076:	f7ff fdbd 	bl	8000bf4 <i2c_reset>
  HAL_I2C_Init(&hi2c1);
 800107a:	4620      	mov	r0, r4
 800107c:	f001 f9d8 	bl	8002430 <HAL_I2C_Init>
  initWatcherStack();
 8001080:	f000 fa3a 	bl	80014f8 <initWatcherStack>
  Motion_Init();
 8001084:	f005 fa9e 	bl	80065c4 <Motion_Init>
  EncoderInit();
 8001088:	f004 f9ce 	bl	8005428 <EncoderInit>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800108c:	4c25      	ldr	r4, [pc, #148]	@ (8001124 <main+0xdc>)
 800108e:	f10d 0c54 	add.w	ip, sp, #84	@ 0x54
 8001092:	46a6      	mov	lr, r4
 8001094:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001098:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800109c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80010a0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010a4:	2100      	movs	r1, #0
 80010a6:	a815      	add	r0, sp, #84	@ 0x54
 80010a8:	f004 fa57 	bl	800555a <osThreadCreate>
 80010ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <main+0xe0>)
 80010ae:	6018      	str	r0, [r3, #0]
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 80010b0:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 80010b4:	f104 0e1c 	add.w	lr, r4, #28
 80010b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80010bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80010c0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80010c4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 80010c8:	2100      	movs	r1, #0
 80010ca:	a80e      	add	r0, sp, #56	@ 0x38
 80010cc:	f004 fa45 	bl	800555a <osThreadCreate>
 80010d0:	4b16      	ldr	r3, [pc, #88]	@ (800112c <main+0xe4>)
 80010d2:	6018      	str	r0, [r3, #0]
  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 80010d4:	f10d 0c1c 	add.w	ip, sp, #28
 80010d8:	f104 0e38 	add.w	lr, r4, #56	@ 0x38
 80010dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80010e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80010e4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80010e8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 80010ec:	2100      	movs	r1, #0
 80010ee:	a807      	add	r0, sp, #28
 80010f0:	f004 fa33 	bl	800555a <osThreadCreate>
 80010f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <main+0xe8>)
 80010f6:	6018      	str	r0, [r3, #0]
  osThreadDef(watcherTask, StartWatcherTask, osPriorityNormal, 0, 128);
 80010f8:	46ee      	mov	lr, sp
 80010fa:	f104 0c54 	add.w	ip, r4, #84	@ 0x54
 80010fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001102:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001106:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800110a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  watcherTaskHandler = osThreadCreate(osThread(watcherTask), NULL);
 800110e:	2100      	movs	r1, #0
 8001110:	4668      	mov	r0, sp
 8001112:	f004 fa22 	bl	800555a <osThreadCreate>
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <main+0xec>)
 8001118:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800111a:	f004 fa19 	bl	8005550 <osKernelStart>
  while (1)
 800111e:	e7fe      	b.n	800111e <main+0xd6>
 8001120:	20000464 	.word	0x20000464
 8001124:	08006ec0 	.word	0x08006ec0
 8001128:	20000340 	.word	0x20000340
 800112c:	2000033c 	.word	0x2000033c
 8001130:	20000338 	.word	0x20000338
 8001134:	20000334 	.word	0x20000334

08001138 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b500      	push	{lr}
 800113a:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <HAL_MspInit+0x4c>)
 800113e:	699a      	ldr	r2, [r3, #24]
 8001140:	f042 0201 	orr.w	r2, r2, #1
 8001144:	619a      	str	r2, [r3, #24]
 8001146:	699a      	ldr	r2, [r3, #24]
 8001148:	f002 0201 	and.w	r2, r2, #1
 800114c:	9200      	str	r2, [sp, #0]
 800114e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	69da      	ldr	r2, [r3, #28]
 8001152:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001156:	61da      	str	r2, [r3, #28]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	210f      	movs	r1, #15
 8001166:	f06f 0001 	mvn.w	r0, #1
 800116a:	f000 fabf 	bl	80016ec <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800116e:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <HAL_MspInit+0x50>)
 8001170:	6853      	ldr	r3, [r2, #4]
 8001172:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001176:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800117a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117c:	b003      	add	sp, #12
 800117e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	40010000 	.word	0x40010000

0800118c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800118c:	b510      	push	{r4, lr}
 800118e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	2300      	movs	r3, #0
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	9303      	str	r3, [sp, #12]
 8001196:	9304      	str	r3, [sp, #16]
 8001198:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 800119a:	6802      	ldr	r2, [r0, #0]
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <HAL_I2C_MspInit+0x78>)
 800119e:	429a      	cmp	r2, r3
 80011a0:	d001      	beq.n	80011a6 <HAL_I2C_MspInit+0x1a>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011a2:	b006      	add	sp, #24
 80011a4:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4c18      	ldr	r4, [pc, #96]	@ (8001208 <HAL_I2C_MspInit+0x7c>)
 80011a8:	69a3      	ldr	r3, [r4, #24]
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	61a3      	str	r3, [r4, #24]
 80011b0:	69a3      	ldr	r3, [r4, #24]
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ba:	23c0      	movs	r3, #192	@ 0xc0
 80011bc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011be:	2312      	movs	r3, #18
 80011c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	a902      	add	r1, sp, #8
 80011c8:	4810      	ldr	r0, [pc, #64]	@ (800120c <HAL_I2C_MspInit+0x80>)
 80011ca:	f000 fb25 	bl	8001818 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ce:	69e3      	ldr	r3, [r4, #28]
 80011d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011d4:	61e3      	str	r3, [r4, #28]
 80011d6:	69e3      	ldr	r3, [r4, #28]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2105      	movs	r1, #5
 80011e4:	201f      	movs	r0, #31
 80011e6:	f000 fa81 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011ea:	201f      	movs	r0, #31
 80011ec:	f000 fa8e 	bl	800170c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2105      	movs	r1, #5
 80011f4:	2020      	movs	r0, #32
 80011f6:	f000 fa79 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011fa:	2020      	movs	r0, #32
 80011fc:	f000 fa86 	bl	800170c <HAL_NVIC_EnableIRQ>
}
 8001200:	e7cf      	b.n	80011a2 <HAL_I2C_MspInit+0x16>
 8001202:	bf00      	nop
 8001204:	40005400 	.word	0x40005400
 8001208:	40021000 	.word	0x40021000
 800120c:	40010c00 	.word	0x40010c00

08001210 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 8001210:	6802      	ldr	r2, [r0, #0]
 8001212:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <HAL_I2C_MspDeInit+0x38>)
 8001214:	429a      	cmp	r2, r3
 8001216:	d000      	beq.n	800121a <HAL_I2C_MspDeInit+0xa>
 8001218:	4770      	bx	lr
{
 800121a:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800121c:	4a0b      	ldr	r2, [pc, #44]	@ (800124c <HAL_I2C_MspDeInit+0x3c>)
 800121e:	69d3      	ldr	r3, [r2, #28]
 8001220:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001224:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001226:	4c0a      	ldr	r4, [pc, #40]	@ (8001250 <HAL_I2C_MspDeInit+0x40>)
 8001228:	2140      	movs	r1, #64	@ 0x40
 800122a:	4620      	mov	r0, r4
 800122c:	f000 fc02 	bl	8001a34 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001230:	2180      	movs	r1, #128	@ 0x80
 8001232:	4620      	mov	r0, r4
 8001234:	f000 fbfe 	bl	8001a34 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001238:	201f      	movs	r0, #31
 800123a:	f000 fa75 	bl	8001728 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800123e:	2020      	movs	r0, #32
 8001240:	f000 fa72 	bl	8001728 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001244:	bd10      	pop	{r4, pc}
 8001246:	bf00      	nop
 8001248:	40005400 	.word	0x40005400
 800124c:	40021000 	.word	0x40021000
 8001250:	40010c00 	.word	0x40010c00

08001254 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8001254:	6803      	ldr	r3, [r0, #0]
 8001256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800125a:	d000      	beq.n	800125e <HAL_TIM_PWM_MspInit+0xa>
 800125c:	4770      	bx	lr
{
 800125e:	b500      	push	{lr}
 8001260:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001262:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001266:	69da      	ldr	r2, [r3, #28]
 8001268:	f042 0201 	orr.w	r2, r2, #1
 800126c:	61da      	str	r2, [r3, #28]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2105      	movs	r1, #5
 800127c:	201c      	movs	r0, #28
 800127e:	f000 fa35 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001282:	201c      	movs	r0, #28
 8001284:	f000 fa42 	bl	800170c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001288:	b003      	add	sp, #12
 800128a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001290 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001290:	6802      	ldr	r2, [r0, #0]
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <HAL_TIM_Base_MspInit+0x3c>)
 8001294:	429a      	cmp	r2, r3
 8001296:	d000      	beq.n	800129a <HAL_TIM_Base_MspInit+0xa>
 8001298:	4770      	bx	lr
{
 800129a:	b500      	push	{lr}
 800129c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800129e:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 80012a2:	69da      	ldr	r2, [r3, #28]
 80012a4:	f042 0202 	orr.w	r2, r2, #2
 80012a8:	61da      	str	r2, [r3, #28]
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	9b01      	ldr	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2105      	movs	r1, #5
 80012b8:	201d      	movs	r0, #29
 80012ba:	f000 fa17 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012be:	201d      	movs	r0, #29
 80012c0:	f000 fa24 	bl	800170c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80012c4:	b003      	add	sp, #12
 80012c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ca:	bf00      	nop
 80012cc:	40000400 	.word	0x40000400

080012d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012d0:	b500      	push	{lr}
 80012d2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	2300      	movs	r3, #0
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	9303      	str	r3, [sp, #12]
 80012da:	9304      	str	r3, [sp, #16]
 80012dc:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 80012de:	6803      	ldr	r3, [r0, #0]
 80012e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012e4:	d002      	beq.n	80012ec <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012e6:	b007      	add	sp, #28
 80012e8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80012f0:	699a      	ldr	r2, [r3, #24]
 80012f2:	f042 0204 	orr.w	r2, r2, #4
 80012f6:	619a      	str	r2, [r3, #24]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001302:	2301      	movs	r3, #1
 8001304:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	a902      	add	r1, sp, #8
 800130e:	4802      	ldr	r0, [pc, #8]	@ (8001318 <HAL_TIM_MspPostInit+0x48>)
 8001310:	f000 fa82 	bl	8001818 <HAL_GPIO_Init>
}
 8001314:	e7e7      	b.n	80012e6 <HAL_TIM_MspPostInit+0x16>
 8001316:	bf00      	nop
 8001318:	40010800 	.word	0x40010800

0800131c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800131c:	b510      	push	{r4, lr}
 800131e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	2300      	movs	r3, #0
 8001322:	9304      	str	r3, [sp, #16]
 8001324:	9305      	str	r3, [sp, #20]
 8001326:	9306      	str	r3, [sp, #24]
 8001328:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800132a:	6803      	ldr	r3, [r0, #0]
 800132c:	4a2c      	ldr	r2, [pc, #176]	@ (80013e0 <HAL_UART_MspInit+0xc4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d004      	beq.n	800133c <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8001332:	4a2c      	ldr	r2, [pc, #176]	@ (80013e4 <HAL_UART_MspInit+0xc8>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d028      	beq.n	800138a <HAL_UART_MspInit+0x6e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001338:	b008      	add	sp, #32
 800133a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800133c:	4b2a      	ldr	r3, [pc, #168]	@ (80013e8 <HAL_UART_MspInit+0xcc>)
 800133e:	699a      	ldr	r2, [r3, #24]
 8001340:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001344:	619a      	str	r2, [r3, #24]
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800134c:	9200      	str	r2, [sp, #0]
 800134e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	699a      	ldr	r2, [r3, #24]
 8001352:	f042 0204 	orr.w	r2, r2, #4
 8001356:	619a      	str	r2, [r3, #24]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001362:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001366:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001368:	2312      	movs	r3, #18
 800136a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	a904      	add	r1, sp, #16
 8001372:	481e      	ldr	r0, [pc, #120]	@ (80013ec <HAL_UART_MspInit+0xd0>)
 8001374:	f000 fa50 	bl	8001818 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2105      	movs	r1, #5
 800137c:	2025      	movs	r0, #37	@ 0x25
 800137e:	f000 f9b5 	bl	80016ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001382:	2025      	movs	r0, #37	@ 0x25
 8001384:	f000 f9c2 	bl	800170c <HAL_NVIC_EnableIRQ>
 8001388:	e7d6      	b.n	8001338 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800138a:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <HAL_UART_MspInit+0xcc>)
 800138c:	69da      	ldr	r2, [r3, #28]
 800138e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001392:	61da      	str	r2, [r3, #28]
 8001394:	69da      	ldr	r2, [r3, #28]
 8001396:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800139a:	9202      	str	r2, [sp, #8]
 800139c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	699a      	ldr	r2, [r3, #24]
 80013a0:	f042 0208 	orr.w	r2, r2, #8
 80013a4:	619a      	str	r2, [r3, #24]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0308 	and.w	r3, r3, #8
 80013ac:	9303      	str	r3, [sp, #12]
 80013ae:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	4c0c      	ldr	r4, [pc, #48]	@ (80013f0 <HAL_UART_MspInit+0xd4>)
 80013c0:	a904      	add	r1, sp, #16
 80013c2:	4620      	mov	r0, r4
 80013c4:	f000 fa28 	bl	8001818 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	a904      	add	r1, sp, #16
 80013d6:	4620      	mov	r0, r4
 80013d8:	f000 fa1e 	bl	8001818 <HAL_GPIO_Init>
}
 80013dc:	e7ac      	b.n	8001338 <HAL_UART_MspInit+0x1c>
 80013de:	bf00      	nop
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40004800 	.word	0x40004800
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010800 	.word	0x40010800
 80013f0:	40010c00 	.word	0x40010c00

080013f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b530      	push	{r4, r5, lr}
 80013f6:	b089      	sub	sp, #36	@ 0x24
 80013f8:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <HAL_InitTick+0x80>)
 80013fc:	699a      	ldr	r2, [r3, #24]
 80013fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001402:	619a      	str	r2, [r3, #24]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	9b01      	ldr	r3, [sp, #4]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800140e:	a902      	add	r1, sp, #8
 8001410:	a803      	add	r0, sp, #12
 8001412:	f002 fd8d 	bl	8003f30 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001416:	f002 fd7b 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800141a:	4a17      	ldr	r2, [pc, #92]	@ (8001478 <HAL_InitTick+0x84>)
 800141c:	fba2 2300 	umull	r2, r3, r2, r0
 8001420:	0c9b      	lsrs	r3, r3, #18
 8001422:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001424:	4815      	ldr	r0, [pc, #84]	@ (800147c <HAL_InitTick+0x88>)
 8001426:	4a16      	ldr	r2, [pc, #88]	@ (8001480 <HAL_InitTick+0x8c>)
 8001428:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800142a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800142e:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001430:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	6083      	str	r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800143a:	f002 ff69 	bl	8004310 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800143e:	4605      	mov	r5, r0
 8001440:	b110      	cbz	r0, 8001448 <HAL_InitTick+0x54>
    }
  }

 /* Return function status */
  return status;
}
 8001442:	4628      	mov	r0, r5
 8001444:	b009      	add	sp, #36	@ 0x24
 8001446:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <HAL_InitTick+0x88>)
 800144a:	f002 fe39 	bl	80040c0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800144e:	4605      	mov	r5, r0
 8001450:	2800      	cmp	r0, #0
 8001452:	d1f6      	bne.n	8001442 <HAL_InitTick+0x4e>
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001454:	2019      	movs	r0, #25
 8001456:	f000 f959 	bl	800170c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	2c0f      	cmp	r4, #15
 800145c:	d901      	bls.n	8001462 <HAL_InitTick+0x6e>
        status = HAL_ERROR;
 800145e:	2501      	movs	r5, #1
 8001460:	e7ef      	b.n	8001442 <HAL_InitTick+0x4e>
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001462:	2200      	movs	r2, #0
 8001464:	4621      	mov	r1, r4
 8001466:	2019      	movs	r0, #25
 8001468:	f000 f940 	bl	80016ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <HAL_InitTick+0x90>)
 800146e:	601c      	str	r4, [r3, #0]
 8001470:	e7e7      	b.n	8001442 <HAL_InitTick+0x4e>
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	431bde83 	.word	0x431bde83
 800147c:	200004b8 	.word	0x200004b8
 8001480:	40012c00 	.word	0x40012c00
 8001484:	20000008 	.word	0x20000008

08001488 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler>

0800148a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler>

0800148c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <MemManage_Handler>

0800148e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler>

08001490 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler>

08001492 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	4770      	bx	lr

08001494 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001494:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001496:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <TIM1_UP_IRQHandler+0xc>)
 8001498:	f002 fe49 	bl	800412e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800149c:	bd08      	pop	{r3, pc}
 800149e:	bf00      	nop
 80014a0:	200004b8 	.word	0x200004b8

080014a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014a6:	4802      	ldr	r0, [pc, #8]	@ (80014b0 <TIM2_IRQHandler+0xc>)
 80014a8:	f002 fe41 	bl	800412e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ac:	bd08      	pop	{r3, pc}
 80014ae:	bf00      	nop
 80014b0:	2000041c 	.word	0x2000041c

080014b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014b6:	4802      	ldr	r0, [pc, #8]	@ (80014c0 <TIM3_IRQHandler+0xc>)
 80014b8:	f002 fe39 	bl	800412e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014bc:	bd08      	pop	{r3, pc}
 80014be:	bf00      	nop
 80014c0:	200003d4 	.word	0x200003d4

080014c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014c6:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <I2C1_EV_IRQHandler+0xc>)
 80014c8:	f002 f8da 	bl	8003680 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014cc:	bd08      	pop	{r3, pc}
 80014ce:	bf00      	nop
 80014d0:	20000464 	.word	0x20000464

080014d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014d6:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <I2C1_ER_IRQHandler+0xc>)
 80014d8:	f002 f9a2 	bl	8003820 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014dc:	bd08      	pop	{r3, pc}
 80014de:	bf00      	nop
 80014e0:	20000464 	.word	0x20000464

080014e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e6:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <USART1_IRQHandler+0xc>)
 80014e8:	f003 fc94 	bl	8004e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ec:	bd08      	pop	{r3, pc}
 80014ee:	bf00      	nop
 80014f0:	2000038c 	.word	0x2000038c

080014f4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f4:	4770      	bx	lr
	...

080014f8 <initWatcherStack>:
uint8_t listPointer;
uint8_t errorCounter;
uint8_t warnCounter;

void initWatcherStack(){
	for(int i = 0; i < WATCHER_BUFFER ; i++){
 80014f8:	2300      	movs	r3, #0
 80014fa:	e003      	b.n	8001504 <initWatcherStack+0xc>
		watcherList[i] = WATCHER_ERR_NORM;
 80014fc:	4a06      	ldr	r2, [pc, #24]	@ (8001518 <initWatcherStack+0x20>)
 80014fe:	2100      	movs	r1, #0
 8001500:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < WATCHER_BUFFER ; i++){
 8001502:	3301      	adds	r3, #1
 8001504:	2b31      	cmp	r3, #49	@ 0x31
 8001506:	ddf9      	ble.n	80014fc <initWatcherStack+0x4>
	}

	listPointer = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	4a04      	ldr	r2, [pc, #16]	@ (800151c <initWatcherStack+0x24>)
 800150c:	7013      	strb	r3, [r2, #0]
	errorCounter = 0;
 800150e:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <initWatcherStack+0x28>)
 8001510:	7013      	strb	r3, [r2, #0]
	warnCounter = 0;
 8001512:	4a04      	ldr	r2, [pc, #16]	@ (8001524 <initWatcherStack+0x2c>)
 8001514:	7013      	strb	r3, [r2, #0]
}
 8001516:	4770      	bx	lr
 8001518:	20000504 	.word	0x20000504
 800151c:	20000502 	.word	0x20000502
 8001520:	20000501 	.word	0x20000501
 8001524:	20000500 	.word	0x20000500

08001528 <isErrorExist>:
	listPointer--;
	errorCounter--;
}

bool isErrorExist(){
	if(errorCounter > 0) return TRUE;
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <isErrorExist+0x10>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b90b      	cbnz	r3, 8001532 <isErrorExist+0xa>
	return FALSE;
 800152e:	2000      	movs	r0, #0
 8001530:	4770      	bx	lr
	if(errorCounter > 0) return TRUE;
 8001532:	2001      	movs	r0, #1
}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000501 	.word	0x20000501

0800153c <displaySysStat>:

void displaySysStat(){
 800153c:	b510      	push	{r4, lr}
	if(isErrorExist()){
 800153e:	f7ff fff3 	bl	8001528 <isErrorExist>
 8001542:	b198      	cbz	r0, 800156c <displaySysStat+0x30>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001544:	4c0d      	ldr	r4, [pc, #52]	@ (800157c <displaySysStat+0x40>)
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800154c:	4620      	mov	r0, r4
 800154e:	f000 faf6 	bl	8001b3e <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001552:	2064      	movs	r0, #100	@ 0x64
 8001554:	f000 f85e 	bl	8001614 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800155e:	4620      	mov	r0, r4
 8001560:	f000 faed 	bl	8001b3e <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001564:	2064      	movs	r0, #100	@ 0x64
 8001566:	f000 f855 	bl	8001614 <HAL_Delay>
	}else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	}

}
 800156a:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001572:	4802      	ldr	r0, [pc, #8]	@ (800157c <displaySysStat+0x40>)
 8001574:	f000 fae3 	bl	8001b3e <HAL_GPIO_WritePin>
}
 8001578:	e7f7      	b.n	800156a <displaySysStat+0x2e>
 800157a:	bf00      	nop
 800157c:	40011000 	.word	0x40011000

08001580 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8001580:	f7ff ffb8 	bl	80014f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001584:	480b      	ldr	r0, [pc, #44]	@ (80015b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001586:	490c      	ldr	r1, [pc, #48]	@ (80015b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001588:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a09      	ldr	r2, [pc, #36]	@ (80015c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800159c:	4c09      	ldr	r4, [pc, #36]	@ (80015c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015aa:	f005 fb7b 	bl	8006ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ae:	f7ff fd4b 	bl	8001048 <main>
  bx lr
 80015b2:	4770      	bx	lr
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015bc:	08007050 	.word	0x08007050
  ldr r2, =_sbss
 80015c0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015c4:	200014c8 	.word	0x200014c8

080015c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC1_2_IRQHandler>
	...

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ce:	4a07      	ldr	r2, [pc, #28]	@ (80015ec <HAL_Init+0x20>)
 80015d0:	6813      	ldr	r3, [r2, #0]
 80015d2:	f043 0310 	orr.w	r3, r3, #16
 80015d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 f875 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015de:	200f      	movs	r0, #15
 80015e0:	f7ff ff08 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e4:	f7ff fda8 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80015e8:	2000      	movs	r0, #0
 80015ea:	bd08      	pop	{r3, pc}
 80015ec:	40022000 	.word	0x40022000

080015f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015f0:	4a03      	ldr	r2, [pc, #12]	@ (8001600 <HAL_IncTick+0x10>)
 80015f2:	6811      	ldr	r1, [r2, #0]
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <HAL_IncTick+0x14>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	440b      	add	r3, r1
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000538 	.word	0x20000538
 8001604:	20000004 	.word	0x20000004

08001608 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001608:	4b01      	ldr	r3, [pc, #4]	@ (8001610 <HAL_GetTick+0x8>)
 800160a:	6818      	ldr	r0, [r3, #0]
}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000538 	.word	0x20000538

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b538      	push	{r3, r4, r5, lr}
 8001616:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff fff6 	bl	8001608 <HAL_GetTick>
 800161c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001622:	d002      	beq.n	800162a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001624:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <HAL_Delay+0x24>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800162a:	f7ff ffed 	bl	8001608 <HAL_GetTick>
 800162e:	1b40      	subs	r0, r0, r5
 8001630:	42a0      	cmp	r0, r4
 8001632:	d3fa      	bcc.n	800162a <HAL_Delay+0x16>
  {
  }
}
 8001634:	bd38      	pop	{r3, r4, r5, pc}
 8001636:	bf00      	nop
 8001638:	20000004 	.word	0x20000004

0800163c <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800163c:	2800      	cmp	r0, #0
 800163e:	db0c      	blt.n	800165a <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001640:	f000 021f 	and.w	r2, r0, #31
 8001644:	0940      	lsrs	r0, r0, #5
 8001646:	2301      	movs	r3, #1
 8001648:	4093      	lsls	r3, r2
 800164a:	3020      	adds	r0, #32
 800164c:	4a03      	ldr	r2, [pc, #12]	@ (800165c <__NVIC_DisableIRQ+0x20>)
 800164e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001652:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001656:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100

08001660 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001660:	2800      	cmp	r0, #0
 8001662:	db08      	blt.n	8001676 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	0109      	lsls	r1, r1, #4
 8001666:	b2c9      	uxtb	r1, r1
 8001668:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800166c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001670:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001674:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	f000 000f 	and.w	r0, r0, #15
 800167a:	0109      	lsls	r1, r1, #4
 800167c:	b2c9      	uxtb	r1, r1
 800167e:	4b01      	ldr	r3, [pc, #4]	@ (8001684 <__NVIC_SetPriority+0x24>)
 8001680:	5419      	strb	r1, [r3, r0]
  }
}
 8001682:	4770      	bx	lr
 8001684:	e000ed14 	.word	0xe000ed14

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168e:	f1c0 0c07 	rsb	ip, r0, #7
 8001692:	f1bc 0f04 	cmp.w	ip, #4
 8001696:	bf28      	it	cs
 8001698:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169c:	1d03      	adds	r3, r0, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d90f      	bls.n	80016c2 <NVIC_EncodePriority+0x3a>
 80016a2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 3eff 	mov.w	lr, #4294967295
 80016a8:	fa0e f00c 	lsl.w	r0, lr, ip
 80016ac:	ea21 0100 	bic.w	r1, r1, r0
 80016b0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b2:	fa0e fe03 	lsl.w	lr, lr, r3
 80016b6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80016ba:	ea41 0002 	orr.w	r0, r1, r2
 80016be:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	2300      	movs	r3, #0
 80016c4:	e7ee      	b.n	80016a4 <NVIC_EncodePriority+0x1c>
	...

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016cc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d4:	0200      	lsls	r0, r0, #8
 80016d6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016da:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80016e4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ec:	b510      	push	{r4, lr}
 80016ee:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_NVIC_SetPriority+0x1c>)
 80016f2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80016f8:	f7ff ffc6 	bl	8001688 <NVIC_EncodePriority>
 80016fc:	4601      	mov	r1, r0
 80016fe:	4620      	mov	r0, r4
 8001700:	f7ff ffae 	bl	8001660 <__NVIC_SetPriority>
}
 8001704:	bd10      	pop	{r4, pc}
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800170c:	2800      	cmp	r0, #0
 800170e:	db07      	blt.n	8001720 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001710:	f000 021f 	and.w	r2, r0, #31
 8001714:	0940      	lsrs	r0, r0, #5
 8001716:	2301      	movs	r3, #1
 8001718:	4093      	lsls	r3, r2
 800171a:	4a02      	ldr	r2, [pc, #8]	@ (8001724 <HAL_NVIC_EnableIRQ+0x18>)
 800171c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001728:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800172a:	f7ff ff87 	bl	800163c <__NVIC_DisableIRQ>
}
 800172e:	bd08      	pop	{r3, pc}

08001730 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001730:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001732:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	2a02      	cmp	r2, #2
 800173a:	d006      	beq.n	800174a <HAL_DMA_Abort+0x1a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173c:	2204      	movs	r2, #4
 800173e:	6382      	str	r2, [r0, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001740:	2200      	movs	r2, #0
 8001742:	f880 2020 	strb.w	r2, [r0, #32]
    
    return HAL_ERROR;
 8001746:	2001      	movs	r0, #1
 8001748:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800174a:	6801      	ldr	r1, [r0, #0]
 800174c:	680a      	ldr	r2, [r1, #0]
 800174e:	f022 020e 	bic.w	r2, r2, #14
 8001752:	600a      	str	r2, [r1, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001754:	6801      	ldr	r1, [r0, #0]
 8001756:	680a      	ldr	r2, [r1, #0]
 8001758:	f022 0201 	bic.w	r2, r2, #1
 800175c:	600a      	str	r2, [r1, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800175e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001760:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8001762:	2101      	movs	r1, #1
 8001764:	fa01 f202 	lsl.w	r2, r1, r2
 8001768:	6042      	str	r2, [r0, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800176a:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800176e:	2000      	movs	r0, #0
 8001770:	f883 0020 	strb.w	r0, [r3, #32]
  
  return status; 
}
 8001774:	4770      	bx	lr
	...

08001778 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001778:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800177a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d003      	beq.n	800178c <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001784:	2304      	movs	r3, #4
 8001786:	6383      	str	r3, [r0, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001788:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800178a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800178c:	6802      	ldr	r2, [r0, #0]
 800178e:	6813      	ldr	r3, [r2, #0]
 8001790:	f023 030e 	bic.w	r3, r3, #14
 8001794:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001796:	6802      	ldr	r2, [r0, #0]
 8001798:	6813      	ldr	r3, [r2, #0]
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017a0:	6803      	ldr	r3, [r0, #0]
 80017a2:	4a19      	ldr	r2, [pc, #100]	@ (8001808 <HAL_DMA_Abort_IT+0x90>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d014      	beq.n	80017d2 <HAL_DMA_Abort_IT+0x5a>
 80017a8:	3214      	adds	r2, #20
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d01f      	beq.n	80017ee <HAL_DMA_Abort_IT+0x76>
 80017ae:	3214      	adds	r2, #20
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d01e      	beq.n	80017f2 <HAL_DMA_Abort_IT+0x7a>
 80017b4:	3214      	adds	r2, #20
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d01e      	beq.n	80017f8 <HAL_DMA_Abort_IT+0x80>
 80017ba:	3214      	adds	r2, #20
 80017bc:	4293      	cmp	r3, r2
 80017be:	d01e      	beq.n	80017fe <HAL_DMA_Abort_IT+0x86>
 80017c0:	3214      	adds	r2, #20
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d002      	beq.n	80017cc <HAL_DMA_Abort_IT+0x54>
 80017c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017ca:	e003      	b.n	80017d4 <HAL_DMA_Abort_IT+0x5c>
 80017cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80017d0:	e000      	b.n	80017d4 <HAL_DMA_Abort_IT+0x5c>
 80017d2:	2201      	movs	r2, #1
 80017d4:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <HAL_DMA_Abort_IT+0x94>)
 80017d6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80017d8:	2301      	movs	r3, #1
 80017da:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80017de:	2300      	movs	r3, #0
 80017e0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80017e4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80017e6:	b16b      	cbz	r3, 8001804 <HAL_DMA_Abort_IT+0x8c>
      hdma->XferAbortCallback(hdma);
 80017e8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80017ea:	2000      	movs	r0, #0
 80017ec:	e7cd      	b.n	800178a <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017ee:	2210      	movs	r2, #16
 80017f0:	e7f0      	b.n	80017d4 <HAL_DMA_Abort_IT+0x5c>
 80017f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f6:	e7ed      	b.n	80017d4 <HAL_DMA_Abort_IT+0x5c>
 80017f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017fc:	e7ea      	b.n	80017d4 <HAL_DMA_Abort_IT+0x5c>
 80017fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001802:	e7e7      	b.n	80017d4 <HAL_DMA_Abort_IT+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 8001804:	2000      	movs	r0, #0
 8001806:	e7c0      	b.n	800178a <HAL_DMA_Abort_IT+0x12>
 8001808:	40020008 	.word	0x40020008
 800180c:	40020000 	.word	0x40020000

08001810 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8001810:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
}
 8001814:	4770      	bx	lr
	...

08001818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800181c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800181e:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001820:	e0a2      	b.n	8001968 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001822:	4d7e      	ldr	r5, [pc, #504]	@ (8001a1c <HAL_GPIO_Init+0x204>)
 8001824:	42ab      	cmp	r3, r5
 8001826:	d010      	beq.n	800184a <HAL_GPIO_Init+0x32>
 8001828:	d907      	bls.n	800183a <HAL_GPIO_Init+0x22>
 800182a:	4d7d      	ldr	r5, [pc, #500]	@ (8001a20 <HAL_GPIO_Init+0x208>)
 800182c:	42ab      	cmp	r3, r5
 800182e:	d00c      	beq.n	800184a <HAL_GPIO_Init+0x32>
 8001830:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8001834:	42ab      	cmp	r3, r5
 8001836:	d008      	beq.n	800184a <HAL_GPIO_Init+0x32>
 8001838:	e013      	b.n	8001862 <HAL_GPIO_Init+0x4a>
 800183a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800183e:	42ab      	cmp	r3, r5
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x32>
 8001842:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8001846:	42ab      	cmp	r3, r5
 8001848:	d107      	bne.n	800185a <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800184a:	688b      	ldr	r3, [r1, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d055      	beq.n	80018fc <HAL_GPIO_Init+0xe4>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001850:	2b01      	cmp	r3, #1
 8001852:	d04e      	beq.n	80018f2 <HAL_GPIO_Init+0xda>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001854:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001856:	2408      	movs	r4, #8
 8001858:	e003      	b.n	8001862 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800185a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800185e:	42ab      	cmp	r3, r5
 8001860:	d0f3      	beq.n	800184a <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001862:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8001866:	d84b      	bhi.n	8001900 <HAL_GPIO_Init+0xe8>
 8001868:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800186a:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800186e:	6833      	ldr	r3, [r6, #0]
 8001870:	250f      	movs	r5, #15
 8001872:	4095      	lsls	r5, r2
 8001874:	ea23 0305 	bic.w	r3, r3, r5
 8001878:	fa04 f202 	lsl.w	r2, r4, r2
 800187c:	4313      	orrs	r3, r2
 800187e:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001880:	684b      	ldr	r3, [r1, #4]
 8001882:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001886:	d06d      	beq.n	8001964 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001888:	4b66      	ldr	r3, [pc, #408]	@ (8001a24 <HAL_GPIO_Init+0x20c>)
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	f042 0201 	orr.w	r2, r2, #1
 8001890:	619a      	str	r2, [r3, #24]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800189c:	ea4f 029c 	mov.w	r2, ip, lsr #2
 80018a0:	1c95      	adds	r5, r2, #2
 80018a2:	4b61      	ldr	r3, [pc, #388]	@ (8001a28 <HAL_GPIO_Init+0x210>)
 80018a4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018a8:	f00c 0503 	and.w	r5, ip, #3
 80018ac:	00ad      	lsls	r5, r5, #2
 80018ae:	230f      	movs	r3, #15
 80018b0:	40ab      	lsls	r3, r5
 80018b2:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018b6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a2c <HAL_GPIO_Init+0x214>)
 80018b8:	4298      	cmp	r0, r3
 80018ba:	d028      	beq.n	800190e <HAL_GPIO_Init+0xf6>
 80018bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018c0:	4298      	cmp	r0, r3
 80018c2:	f000 808d 	beq.w	80019e0 <HAL_GPIO_Init+0x1c8>
 80018c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018ca:	4298      	cmp	r0, r3
 80018cc:	f000 808a 	beq.w	80019e4 <HAL_GPIO_Init+0x1cc>
 80018d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80018d4:	4298      	cmp	r0, r3
 80018d6:	d018      	beq.n	800190a <HAL_GPIO_Init+0xf2>
 80018d8:	2304      	movs	r3, #4
 80018da:	e019      	b.n	8001910 <HAL_GPIO_Init+0xf8>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018dc:	68cc      	ldr	r4, [r1, #12]
          break;
 80018de:	e7c0      	b.n	8001862 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e0:	68cc      	ldr	r4, [r1, #12]
 80018e2:	3404      	adds	r4, #4
          break;
 80018e4:	e7bd      	b.n	8001862 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018e6:	68cc      	ldr	r4, [r1, #12]
 80018e8:	3408      	adds	r4, #8
          break;
 80018ea:	e7ba      	b.n	8001862 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018ec:	68cc      	ldr	r4, [r1, #12]
 80018ee:	340c      	adds	r4, #12
          break;
 80018f0:	e7b7      	b.n	8001862 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 80018f2:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f4:	2408      	movs	r4, #8
 80018f6:	e7b4      	b.n	8001862 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018f8:	2400      	movs	r4, #0
 80018fa:	e7b2      	b.n	8001862 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018fc:	2404      	movs	r4, #4
 80018fe:	e7b0      	b.n	8001862 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001900:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001902:	f1ac 0208 	sub.w	r2, ip, #8
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	e7b1      	b.n	800186e <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800190a:	2303      	movs	r3, #3
 800190c:	e000      	b.n	8001910 <HAL_GPIO_Init+0xf8>
 800190e:	2300      	movs	r3, #0
 8001910:	40ab      	lsls	r3, r5
 8001912:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8001914:	3202      	adds	r2, #2
 8001916:	4d44      	ldr	r5, [pc, #272]	@ (8001a28 <HAL_GPIO_Init+0x210>)
 8001918:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800191c:	684b      	ldr	r3, [r1, #4]
 800191e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001922:	d061      	beq.n	80019e8 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001924:	4a42      	ldr	r2, [pc, #264]	@ (8001a30 <HAL_GPIO_Init+0x218>)
 8001926:	6893      	ldr	r3, [r2, #8]
 8001928:	ea43 030e 	orr.w	r3, r3, lr
 800192c:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800192e:	684b      	ldr	r3, [r1, #4]
 8001930:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8001934:	d05e      	beq.n	80019f4 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001936:	4a3e      	ldr	r2, [pc, #248]	@ (8001a30 <HAL_GPIO_Init+0x218>)
 8001938:	68d3      	ldr	r3, [r2, #12]
 800193a:	ea43 030e 	orr.w	r3, r3, lr
 800193e:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001940:	684b      	ldr	r3, [r1, #4]
 8001942:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001946:	d05b      	beq.n	8001a00 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001948:	4a39      	ldr	r2, [pc, #228]	@ (8001a30 <HAL_GPIO_Init+0x218>)
 800194a:	6853      	ldr	r3, [r2, #4]
 800194c:	ea43 030e 	orr.w	r3, r3, lr
 8001950:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001952:	684b      	ldr	r3, [r1, #4]
 8001954:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001958:	d058      	beq.n	8001a0c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800195a:	4a35      	ldr	r2, [pc, #212]	@ (8001a30 <HAL_GPIO_Init+0x218>)
 800195c:	6813      	ldr	r3, [r2, #0]
 800195e:	ea43 030e 	orr.w	r3, r3, lr
 8001962:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8001964:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001968:	680b      	ldr	r3, [r1, #0]
 800196a:	fa33 f20c 	lsrs.w	r2, r3, ip
 800196e:	d053      	beq.n	8001a18 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8001970:	2201      	movs	r2, #1
 8001972:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001976:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 800197a:	ea32 0303 	bics.w	r3, r2, r3
 800197e:	d1f1      	bne.n	8001964 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 8001980:	684b      	ldr	r3, [r1, #4]
 8001982:	2b12      	cmp	r3, #18
 8001984:	f63f af4d 	bhi.w	8001822 <HAL_GPIO_Init+0xa>
 8001988:	2b12      	cmp	r3, #18
 800198a:	f63f af6a 	bhi.w	8001862 <HAL_GPIO_Init+0x4a>
 800198e:	a501      	add	r5, pc, #4	@ (adr r5, 8001994 <HAL_GPIO_Init+0x17c>)
 8001990:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8001994:	0800184b 	.word	0x0800184b
 8001998:	080018dd 	.word	0x080018dd
 800199c:	080018e7 	.word	0x080018e7
 80019a0:	080018f9 	.word	0x080018f9
 80019a4:	08001863 	.word	0x08001863
 80019a8:	08001863 	.word	0x08001863
 80019ac:	08001863 	.word	0x08001863
 80019b0:	08001863 	.word	0x08001863
 80019b4:	08001863 	.word	0x08001863
 80019b8:	08001863 	.word	0x08001863
 80019bc:	08001863 	.word	0x08001863
 80019c0:	08001863 	.word	0x08001863
 80019c4:	08001863 	.word	0x08001863
 80019c8:	08001863 	.word	0x08001863
 80019cc:	08001863 	.word	0x08001863
 80019d0:	08001863 	.word	0x08001863
 80019d4:	08001863 	.word	0x08001863
 80019d8:	080018e1 	.word	0x080018e1
 80019dc:	080018ed 	.word	0x080018ed
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019e0:	2301      	movs	r3, #1
 80019e2:	e795      	b.n	8001910 <HAL_GPIO_Init+0xf8>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e793      	b.n	8001910 <HAL_GPIO_Init+0xf8>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019e8:	4a11      	ldr	r2, [pc, #68]	@ (8001a30 <HAL_GPIO_Init+0x218>)
 80019ea:	6893      	ldr	r3, [r2, #8]
 80019ec:	ea23 030e 	bic.w	r3, r3, lr
 80019f0:	6093      	str	r3, [r2, #8]
 80019f2:	e79c      	b.n	800192e <HAL_GPIO_Init+0x116>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001a30 <HAL_GPIO_Init+0x218>)
 80019f6:	68d3      	ldr	r3, [r2, #12]
 80019f8:	ea23 030e 	bic.w	r3, r3, lr
 80019fc:	60d3      	str	r3, [r2, #12]
 80019fe:	e79f      	b.n	8001940 <HAL_GPIO_Init+0x128>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a00:	4a0b      	ldr	r2, [pc, #44]	@ (8001a30 <HAL_GPIO_Init+0x218>)
 8001a02:	6853      	ldr	r3, [r2, #4]
 8001a04:	ea23 030e 	bic.w	r3, r3, lr
 8001a08:	6053      	str	r3, [r2, #4]
 8001a0a:	e7a2      	b.n	8001952 <HAL_GPIO_Init+0x13a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a0c:	4a08      	ldr	r2, [pc, #32]	@ (8001a30 <HAL_GPIO_Init+0x218>)
 8001a0e:	6813      	ldr	r3, [r2, #0]
 8001a10:	ea23 030e 	bic.w	r3, r3, lr
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e7a5      	b.n	8001964 <HAL_GPIO_Init+0x14c>
  }
}
 8001a18:	b002      	add	sp, #8
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
 8001a1c:	10220000 	.word	0x10220000
 8001a20:	10310000 	.word	0x10310000
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	40010800 	.word	0x40010800
 8001a30:	40010400 	.word	0x40010400

08001a34 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8001a34:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001a36:	e06b      	b.n	8001b10 <HAL_GPIO_DeInit+0xdc>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001a38:	2503      	movs	r5, #3
 8001a3a:	e000      	b.n	8001a3e <HAL_GPIO_DeInit+0xa>
 8001a3c:	2500      	movs	r5, #0
 8001a3e:	fa05 f404 	lsl.w	r4, r5, r4
 8001a42:	4564      	cmp	r4, ip
 8001a44:	d042      	beq.n	8001acc <HAL_GPIO_DeInit+0x98>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a46:	2bff      	cmp	r3, #255	@ 0xff
 8001a48:	d85a      	bhi.n	8001b00 <HAL_GPIO_DeInit+0xcc>
 8001a4a:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a4c:	0095      	lsls	r5, r2, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001a4e:	f8de 4000 	ldr.w	r4, [lr]
 8001a52:	f04f 0c0f 	mov.w	ip, #15
 8001a56:	fa0c fc05 	lsl.w	ip, ip, r5
 8001a5a:	ea24 040c 	bic.w	r4, r4, ip
 8001a5e:	f04f 0c04 	mov.w	ip, #4
 8001a62:	fa0c fc05 	lsl.w	ip, ip, r5
 8001a66:	ea44 040c 	orr.w	r4, r4, ip
 8001a6a:	f8ce 4000 	str.w	r4, [lr]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001a6e:	68c4      	ldr	r4, [r0, #12]
 8001a70:	ea24 0303 	bic.w	r3, r4, r3
 8001a74:	60c3      	str	r3, [r0, #12]
    }

    position++;
 8001a76:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8001a78:	fa31 f302 	lsrs.w	r3, r1, r2
 8001a7c:	d046      	beq.n	8001b0c <HAL_GPIO_DeInit+0xd8>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001a7e:	2301      	movs	r3, #1
 8001a80:	4093      	lsls	r3, r2
    if (iocurrent)
 8001a82:	400b      	ands	r3, r1
 8001a84:	d0f7      	beq.n	8001a76 <HAL_GPIO_DeInit+0x42>
      tmp = AFIO->EXTICR[position >> 2u];
 8001a86:	0896      	lsrs	r6, r2, #2
 8001a88:	1cb5      	adds	r5, r6, #2
 8001a8a:	4c26      	ldr	r4, [pc, #152]	@ (8001b24 <HAL_GPIO_DeInit+0xf0>)
 8001a8c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001a90:	f002 0403 	and.w	r4, r2, #3
 8001a94:	00a4      	lsls	r4, r4, #2
 8001a96:	f04f 0c0f 	mov.w	ip, #15
 8001a9a:	fa0c fe04 	lsl.w	lr, ip, r4
 8001a9e:	ea0e 0c05 	and.w	ip, lr, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001aa2:	4d21      	ldr	r5, [pc, #132]	@ (8001b28 <HAL_GPIO_DeInit+0xf4>)
 8001aa4:	42a8      	cmp	r0, r5
 8001aa6:	d0c9      	beq.n	8001a3c <HAL_GPIO_DeInit+0x8>
 8001aa8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001aac:	42a8      	cmp	r0, r5
 8001aae:	d009      	beq.n	8001ac4 <HAL_GPIO_DeInit+0x90>
 8001ab0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001ab4:	42a8      	cmp	r0, r5
 8001ab6:	d007      	beq.n	8001ac8 <HAL_GPIO_DeInit+0x94>
 8001ab8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001abc:	42a8      	cmp	r0, r5
 8001abe:	d0bb      	beq.n	8001a38 <HAL_GPIO_DeInit+0x4>
 8001ac0:	2504      	movs	r5, #4
 8001ac2:	e7bc      	b.n	8001a3e <HAL_GPIO_DeInit+0xa>
 8001ac4:	2501      	movs	r5, #1
 8001ac6:	e7ba      	b.n	8001a3e <HAL_GPIO_DeInit+0xa>
 8001ac8:	2502      	movs	r5, #2
 8001aca:	e7b8      	b.n	8001a3e <HAL_GPIO_DeInit+0xa>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001acc:	4c17      	ldr	r4, [pc, #92]	@ (8001b2c <HAL_GPIO_DeInit+0xf8>)
 8001ace:	6825      	ldr	r5, [r4, #0]
 8001ad0:	ea25 0503 	bic.w	r5, r5, r3
 8001ad4:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001ad6:	6865      	ldr	r5, [r4, #4]
 8001ad8:	ea25 0503 	bic.w	r5, r5, r3
 8001adc:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001ade:	68e5      	ldr	r5, [r4, #12]
 8001ae0:	ea25 0503 	bic.w	r5, r5, r3
 8001ae4:	60e5      	str	r5, [r4, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001ae6:	68a5      	ldr	r5, [r4, #8]
 8001ae8:	ea25 0503 	bic.w	r5, r5, r3
 8001aec:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001aee:	4f0d      	ldr	r7, [pc, #52]	@ (8001b24 <HAL_GPIO_DeInit+0xf0>)
 8001af0:	1cb4      	adds	r4, r6, #2
 8001af2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8001af6:	ea25 050e 	bic.w	r5, r5, lr
 8001afa:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 8001afe:	e7a2      	b.n	8001a46 <HAL_GPIO_DeInit+0x12>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b00:	f100 0e04 	add.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b04:	f1a2 0508 	sub.w	r5, r2, #8
 8001b08:	00ad      	lsls	r5, r5, #2
 8001b0a:	e7a0      	b.n	8001a4e <HAL_GPIO_DeInit+0x1a>
  }
}
 8001b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 8001b0e:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8001b10:	fa31 f302 	lsrs.w	r3, r1, r2
 8001b14:	d005      	beq.n	8001b22 <HAL_GPIO_DeInit+0xee>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001b16:	2301      	movs	r3, #1
 8001b18:	4093      	lsls	r3, r2
    if (iocurrent)
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	d0f7      	beq.n	8001b0e <HAL_GPIO_DeInit+0xda>
{
 8001b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b20:	e7b1      	b.n	8001a86 <HAL_GPIO_DeInit+0x52>
 8001b22:	4770      	bx	lr
 8001b24:	40010000 	.word	0x40010000
 8001b28:	40010800 	.word	0x40010800
 8001b2c:	40010400 	.word	0x40010400

08001b30 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b30:	6883      	ldr	r3, [r0, #8]
 8001b32:	4219      	tst	r1, r3
 8001b34:	d001      	beq.n	8001b3a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001b36:	2001      	movs	r0, #1
 8001b38:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b3a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001b3c:	4770      	bx	lr

08001b3e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b3e:	b10a      	cbz	r2, 8001b44 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b40:	6101      	str	r1, [r0, #16]
 8001b42:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b44:	0409      	lsls	r1, r1, #16
 8001b46:	6101      	str	r1, [r0, #16]
  }
}
 8001b48:	4770      	bx	lr

08001b4a <I2C_Flush_DR>:
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001b4a:	6803      	ldr	r3, [r0, #0]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001b52:	d001      	beq.n	8001b58 <I2C_Flush_DR+0xe>
  {
    hi2c->Instance->DR = 0x00U;
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  }
}
 8001b58:	4770      	bx	lr

08001b5a <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b5a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b40      	cmp	r3, #64	@ 0x40
 8001b62:	d010      	beq.n	8001b86 <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b64:	6903      	ldr	r3, [r0, #16]
 8001b66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b6a:	d01b      	beq.n	8001ba4 <I2C_Master_SB+0x4a>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 8001b6c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d139      	bne.n	8001be6 <I2C_Master_SB+0x8c>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001b72:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001b74:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8001b78:	6802      	ldr	r2, [r0, #0]
 8001b7a:	f003 0306 	and.w	r3, r3, #6
 8001b7e:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8001b82:	6113      	str	r3, [r2, #16]
 8001b84:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 8001b86:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001b88:	b92b      	cbnz	r3, 8001b96 <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001b8a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001b8c:	6802      	ldr	r2, [r0, #0]
 8001b8e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001b92:	6113      	str	r3, [r2, #16]
 8001b94:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001b96:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001b98:	6802      	ldr	r2, [r0, #0]
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	6113      	str	r3, [r2, #16]
 8001ba2:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ba4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b21      	cmp	r3, #33	@ 0x21
 8001bac:	d00f      	beq.n	8001bce <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001bae:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001bb0:	6802      	ldr	r2, [r0, #0]
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001bba:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001bbc:	b16b      	cbz	r3, 8001bda <I2C_Master_SB+0x80>
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc0:	b15b      	cbz	r3, 8001bda <I2C_Master_SB+0x80>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001bc2:	6802      	ldr	r2, [r0, #0]
 8001bc4:	6853      	ldr	r3, [r2, #4]
 8001bc6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bca:	6053      	str	r3, [r2, #4]
 8001bcc:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001bce:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001bd0:	6802      	ldr	r2, [r0, #0]
 8001bd2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001bd6:	6113      	str	r3, [r2, #16]
 8001bd8:	e7ef      	b.n	8001bba <I2C_Master_SB+0x60>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001bda:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001bdc:	b133      	cbz	r3, 8001bec <I2C_Master_SB+0x92>
 8001bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1ee      	bne.n	8001bc2 <I2C_Master_SB+0x68>
 8001be4:	e002      	b.n	8001bec <I2C_Master_SB+0x92>
      }
      else if (hi2c->EventCount == 1U)
 8001be6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d000      	beq.n	8001bee <I2C_Master_SB+0x94>
      {
        /* Do nothing */
      }
    }
  }
}
 8001bec:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001bee:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001bf0:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8001bf4:	6802      	ldr	r2, [r0, #0]
 8001bf6:	f003 0306 	and.w	r3, r3, #6
 8001bfa:	f043 03f1 	orr.w	r3, r3, #241	@ 0xf1
 8001bfe:	6113      	str	r3, [r2, #16]
}
 8001c00:	e7f4      	b.n	8001bec <I2C_Master_SB+0x92>

08001c02 <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001c02:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001c04:	6802      	ldr	r2, [r0, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	6113      	str	r3, [r2, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001c0a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001c0c:	b13b      	cbz	r3, 8001c1e <I2C_Master_ADD10+0x1c>
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c10:	b12b      	cbz	r3, 8001c1e <I2C_Master_ADD10+0x1c>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001c12:	6802      	ldr	r2, [r0, #0]
 8001c14:	6853      	ldr	r3, [r2, #4]
 8001c16:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c1a:	6053      	str	r3, [r2, #4]
  }
}
 8001c1c:	4770      	bx	lr
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001c1e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0fb      	beq.n	8001c1c <I2C_Master_ADD10+0x1a>
 8001c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f3      	bne.n	8001c12 <I2C_Master_ADD10+0x10>
 8001c2a:	e7f7      	b.n	8001c1c <I2C_Master_ADD10+0x1a>

08001c2c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001c2c:	b410      	push	{r4}
 8001c2e:	b08d      	sub	sp, #52	@ 0x34
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001c30:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8001c34:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001c36:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001c38:	6b04      	ldr	r4, [r0, #48]	@ 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c3a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b22      	cmp	r3, #34	@ 0x22
 8001c42:	d00a      	beq.n	8001c5a <I2C_Master_ADDR+0x2e>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c44:	2300      	movs	r3, #0
 8001c46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001c48:	6803      	ldr	r3, [r0, #0]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001c52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  }
}
 8001c54:	b00d      	add	sp, #52	@ 0x34
 8001c56:	bc10      	pop	{r4}
 8001c58:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001c5a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001c5c:	b90b      	cbnz	r3, 8001c62 <I2C_Master_ADDR+0x36>
 8001c5e:	2a40      	cmp	r2, #64	@ 0x40
 8001c60:	d017      	beq.n	8001c92 <I2C_Master_ADDR+0x66>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001c62:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001c64:	b91b      	cbnz	r3, 8001c6e <I2C_Master_ADDR+0x42>
 8001c66:	6903      	ldr	r3, [r0, #16]
 8001c68:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001c6c:	d019      	beq.n	8001ca2 <I2C_Master_ADDR+0x76>
      if (hi2c->XferCount == 0U)
 8001c6e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d125      	bne.n	8001cc2 <I2C_Master_ADDR+0x96>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c76:	9303      	str	r3, [sp, #12]
 8001c78:	6803      	ldr	r3, [r0, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	9203      	str	r2, [sp, #12]
 8001c7e:	699a      	ldr	r2, [r3, #24]
 8001c80:	9203      	str	r2, [sp, #12]
 8001c82:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c8a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	6503      	str	r3, [r0, #80]	@ 0x50
 8001c90:	e7e0      	b.n	8001c54 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	6803      	ldr	r3, [r0, #0]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	9201      	str	r2, [sp, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	9b01      	ldr	r3, [sp, #4]
 8001ca0:	e7d8      	b.n	8001c54 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	9302      	str	r3, [sp, #8]
 8001ca6:	6803      	ldr	r3, [r0, #0]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	9202      	str	r2, [sp, #8]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	9202      	str	r2, [sp, #8]
 8001cb0:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cb8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001cba:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	6503      	str	r3, [r0, #80]	@ 0x50
 8001cc0:	e7c8      	b.n	8001c54 <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 8001cc2:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d01c      	beq.n	8001d04 <I2C_Master_ADDR+0xd8>
      else if (hi2c->XferCount == 2U)
 8001cca:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d072      	beq.n	8001db8 <I2C_Master_ADDR+0x18c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd2:	6802      	ldr	r2, [r0, #0]
 8001cd4:	6813      	ldr	r3, [r2, #0]
 8001cd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cda:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001cdc:	6803      	ldr	r3, [r0, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8001ce4:	f000 80b4 	beq.w	8001e50 <I2C_Master_ADDR+0x224>
 8001ce8:	2920      	cmp	r1, #32
 8001cea:	f200 80ba 	bhi.w	8001e62 <I2C_Master_ADDR+0x236>
 8001cee:	2908      	cmp	r1, #8
 8001cf0:	f080 80a7 	bcs.w	8001e42 <I2C_Master_ADDR+0x216>
 8001cf4:	2901      	cmp	r1, #1
 8001cf6:	f040 80ab 	bne.w	8001e50 <I2C_Master_ADDR+0x224>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	e0a5      	b.n	8001e50 <I2C_Master_ADDR+0x224>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001d04:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8001d08:	d011      	beq.n	8001d2e <I2C_Master_ADDR+0x102>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001d0a:	2908      	cmp	r1, #8
 8001d0c:	d034      	beq.n	8001d78 <I2C_Master_ADDR+0x14c>
 8001d0e:	2920      	cmp	r1, #32
 8001d10:	d032      	beq.n	8001d78 <I2C_Master_ADDR+0x14c>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001d12:	2c12      	cmp	r4, #18
 8001d14:	d02e      	beq.n	8001d74 <I2C_Master_ADDR+0x148>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001d16:	2904      	cmp	r1, #4
 8001d18:	d040      	beq.n	8001d9c <I2C_Master_ADDR+0x170>
 8001d1a:	2902      	cmp	r1, #2
 8001d1c:	d03e      	beq.n	8001d9c <I2C_Master_ADDR+0x170>
 8001d1e:	2910      	cmp	r1, #16
 8001d20:	d03c      	beq.n	8001d9c <I2C_Master_ADDR+0x170>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d22:	6802      	ldr	r2, [r0, #0]
 8001d24:	6813      	ldr	r3, [r2, #0]
 8001d26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	e03b      	b.n	8001da6 <I2C_Master_ADDR+0x17a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d2e:	6802      	ldr	r2, [r0, #0]
 8001d30:	6813      	ldr	r3, [r2, #0]
 8001d32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d36:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d38:	6803      	ldr	r3, [r0, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8001d40:	d00c      	beq.n	8001d5c <I2C_Master_ADDR+0x130>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d48:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	9304      	str	r3, [sp, #16]
 8001d4e:	6803      	ldr	r3, [r0, #0]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	9204      	str	r2, [sp, #16]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	9304      	str	r3, [sp, #16]
 8001d58:	9b04      	ldr	r3, [sp, #16]
 8001d5a:	e797      	b.n	8001c8c <I2C_Master_ADDR+0x60>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	9205      	str	r2, [sp, #20]
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	9205      	str	r2, [sp, #20]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	9205      	str	r2, [sp, #20]
 8001d68:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	e78b      	b.n	8001c8c <I2C_Master_ADDR+0x60>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001d74:	2901      	cmp	r1, #1
 8001d76:	d0d0      	beq.n	8001d1a <I2C_Master_ADDR+0xee>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d78:	6802      	ldr	r2, [r0, #0]
 8001d7a:	6813      	ldr	r3, [r2, #0]
 8001d7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001d80:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d82:	2300      	movs	r3, #0
 8001d84:	9307      	str	r3, [sp, #28]
 8001d86:	6803      	ldr	r3, [r0, #0]
 8001d88:	695a      	ldr	r2, [r3, #20]
 8001d8a:	9207      	str	r2, [sp, #28]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	9207      	str	r2, [sp, #28]
 8001d90:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	e777      	b.n	8001c8c <I2C_Master_ADDR+0x60>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d9c:	6802      	ldr	r2, [r0, #0]
 8001d9e:	6813      	ldr	r3, [r2, #0]
 8001da0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001da4:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da6:	2300      	movs	r3, #0
 8001da8:	9306      	str	r3, [sp, #24]
 8001daa:	6803      	ldr	r3, [r0, #0]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	9206      	str	r2, [sp, #24]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	9306      	str	r3, [sp, #24]
 8001db4:	9b06      	ldr	r3, [sp, #24]
 8001db6:	e769      	b.n	8001c8c <I2C_Master_ADDR+0x60>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001db8:	2910      	cmp	r1, #16
 8001dba:	d804      	bhi.n	8001dc6 <I2C_Master_ADDR+0x19a>
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <I2C_Master_ADDR+0x240>)
 8001dbe:	40cb      	lsrs	r3, r1
 8001dc0:	f013 0f01 	tst.w	r3, #1
 8001dc4:	d122      	bne.n	8001e0c <I2C_Master_ADDR+0x1e0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc6:	6802      	ldr	r2, [r0, #0]
 8001dc8:	6813      	ldr	r3, [r2, #0]
 8001dca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dce:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9308      	str	r3, [sp, #32]
 8001dd4:	6803      	ldr	r3, [r0, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	9208      	str	r2, [sp, #32]
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	9208      	str	r2, [sp, #32]
 8001dde:	9a08      	ldr	r2, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001de6:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001de8:	6803      	ldr	r3, [r0, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8001df0:	f43f af4c 	beq.w	8001c8c <I2C_Master_ADDR+0x60>
 8001df4:	2920      	cmp	r1, #32
 8001df6:	d81f      	bhi.n	8001e38 <I2C_Master_ADDR+0x20c>
 8001df8:	2908      	cmp	r1, #8
 8001dfa:	d215      	bcs.n	8001e28 <I2C_Master_ADDR+0x1fc>
 8001dfc:	2901      	cmp	r1, #1
 8001dfe:	f47f af45 	bne.w	8001c8c <I2C_Master_ADDR+0x60>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	e73f      	b.n	8001c8c <I2C_Master_ADDR+0x60>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e0c:	6802      	ldr	r2, [r0, #0]
 8001e0e:	6813      	ldr	r3, [r2, #0]
 8001e10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e14:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e16:	2300      	movs	r3, #0
 8001e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e1a:	6803      	ldr	r3, [r0, #0]
 8001e1c:	695a      	ldr	r2, [r3, #20]
 8001e1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001e26:	e7df      	b.n	8001de8 <I2C_Master_ADDR+0x1bc>
 8001e28:	3908      	subs	r1, #8
 8001e2a:	4a11      	ldr	r2, [pc, #68]	@ (8001e70 <I2C_Master_ADDR+0x244>)
 8001e2c:	40ca      	lsrs	r2, r1
 8001e2e:	f012 0f01 	tst.w	r2, #1
 8001e32:	f43f af2b 	beq.w	8001c8c <I2C_Master_ADDR+0x60>
 8001e36:	e7e4      	b.n	8001e02 <I2C_Master_ADDR+0x1d6>
 8001e38:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8001e3c:	f47f af26 	bne.w	8001c8c <I2C_Master_ADDR+0x60>
 8001e40:	e7df      	b.n	8001e02 <I2C_Master_ADDR+0x1d6>
 8001e42:	3908      	subs	r1, #8
 8001e44:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <I2C_Master_ADDR+0x244>)
 8001e46:	40ca      	lsrs	r2, r1
 8001e48:	f012 0f01 	tst.w	r2, #1
 8001e4c:	f47f af55 	bne.w	8001cfa <I2C_Master_ADDR+0xce>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e50:	2300      	movs	r3, #0
 8001e52:	930a      	str	r3, [sp, #40]	@ 0x28
 8001e54:	6803      	ldr	r3, [r0, #0]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	920a      	str	r2, [sp, #40]	@ 0x28
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8001e5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001e60:	e714      	b.n	8001c8c <I2C_Master_ADDR+0x60>
 8001e62:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8001e66:	d1f3      	bne.n	8001e50 <I2C_Master_ADDR+0x224>
 8001e68:	e747      	b.n	8001cfa <I2C_Master_ADDR+0xce>
 8001e6a:	bf00      	nop
 8001e6c:	00010014 	.word	0x00010014
 8001e70:	01000101 	.word	0x01000101

08001e74 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8001e74:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b15b      	cbz	r3, 8001e92 <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e7a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8001e7c:	6803      	ldr	r3, [r0, #0]
 8001e7e:	7812      	ldrb	r2, [r2, #0]
 8001e80:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e82:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001e84:	3301      	adds	r3, #1
 8001e86:	6243      	str	r3, [r0, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001e88:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	8543      	strh	r3, [r0, #42]	@ 0x2a
  }
}
 8001e92:	4770      	bx	lr

08001e94 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 8001e94:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	b15b      	cbz	r3, 8001eb2 <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9a:	6803      	ldr	r3, [r0, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001ea0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ea2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	6243      	str	r3, [r0, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001ea8:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	8543      	strh	r3, [r0, #42]	@ 0x2a
  }
}
 8001eb2:	4770      	bx	lr

08001eb4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8001eb4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	9301      	str	r3, [sp, #4]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8001eba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <I2C_WaitOnSTOPRequestThroughIT+0x40>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	08db      	lsrs	r3, r3, #3
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <I2C_WaitOnSTOPRequestThroughIT+0x44>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ecc:	9301      	str	r3, [sp, #4]
  do
  {
    count--;
 8001ece:	9b01      	ldr	r3, [sp, #4]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8001ed4:	9b01      	ldr	r3, [sp, #4]
 8001ed6:	b133      	cbz	r3, 8001ee6 <I2C_WaitOnSTOPRequestThroughIT+0x32>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

      return HAL_ERROR;
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8001ed8:	6803      	ldr	r3, [r0, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8001ee0:	d1f5      	bne.n	8001ece <I2C_WaitOnSTOPRequestThroughIT+0x1a>

  return HAL_OK;
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	e004      	b.n	8001ef0 <I2C_WaitOnSTOPRequestThroughIT+0x3c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ee6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001ee8:	f043 0320 	orr.w	r3, r3, #32
 8001eec:	6403      	str	r3, [r0, #64]	@ 0x40
      return HAL_ERROR;
 8001eee:	2001      	movs	r0, #1
}
 8001ef0:	b002      	add	sp, #8
 8001ef2:	4770      	bx	lr
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	14f8b589 	.word	0x14f8b589

08001efc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001efc:	6803      	ldr	r3, [r0, #0]
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001f04:	d101      	bne.n	8001f0a <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8001f06:	2000      	movs	r0, #0
}
 8001f08:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f0a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f0e:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f14:	2220      	movs	r2, #32
 8001f16:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f1a:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f1e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001f20:	f042 0204 	orr.w	r2, r2, #4
 8001f24:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 8001f26:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	4770      	bx	lr

08001f2e <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8001f2e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001f30:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001f34:	d004      	beq.n	8001f40 <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8001f36:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001f38:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001f3c:	d003      	beq.n	8001f46 <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001f3e:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8001f40:	2301      	movs	r3, #1
 8001f42:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001f44:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001f46:	2308      	movs	r3, #8
 8001f48:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 8001f4a:	e7f8      	b.n	8001f3e <I2C_ConvertOtherXferOptions+0x10>

08001f4c <I2C_WaitOnFlagUntilTimeout>:
{
 8001f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f50:	4606      	mov	r6, r0
 8001f52:	460c      	mov	r4, r1
 8001f54:	4617      	mov	r7, r2
 8001f56:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f58:	e03b      	b.n	8001fd2 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5a:	f7ff fb55 	bl	8001608 <HAL_GetTick>
 8001f5e:	9b06      	ldr	r3, [sp, #24]
 8001f60:	1ac0      	subs	r0, r0, r3
 8001f62:	4540      	cmp	r0, r8
 8001f64:	d802      	bhi.n	8001f6c <I2C_WaitOnFlagUntilTimeout+0x20>
 8001f66:	f1b8 0f00 	cmp.w	r8, #0
 8001f6a:	d132      	bne.n	8001fd2 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f6c:	2d01      	cmp	r5, #1
 8001f6e:	d018      	beq.n	8001fa2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f70:	6833      	ldr	r3, [r6, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	ea24 0303 	bic.w	r3, r4, r3
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	429f      	cmp	r7, r3
 8001f82:	d126      	bne.n	8001fd2 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f8e:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f92:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8001f94:	f042 0220 	orr.w	r2, r2, #32
 8001f98:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001f9a:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	e027      	b.n	8001ff2 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fa2:	6833      	ldr	r3, [r6, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	ea24 0303 	bic.w	r3, r4, r3
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	fab3 f383 	clz	r3, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	e7e5      	b.n	8001f80 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fb4:	6833      	ldr	r3, [r6, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	ea24 0c03 	bic.w	ip, r4, r3
 8001fbc:	fa1f fc8c 	uxth.w	ip, ip
 8001fc0:	fabc fc8c 	clz	ip, ip
 8001fc4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001fc8:	4567      	cmp	r7, ip
 8001fca:	d111      	bne.n	8001ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8001fcc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001fd0:	d1c3      	bne.n	8001f5a <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fd2:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8001fd6:	2d01      	cmp	r5, #1
 8001fd8:	d0ec      	beq.n	8001fb4 <I2C_WaitOnFlagUntilTimeout+0x68>
 8001fda:	6833      	ldr	r3, [r6, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	ea24 0c03 	bic.w	ip, r4, r3
 8001fe2:	fa1f fc8c 	uxth.w	ip, ip
 8001fe6:	fabc fc8c 	clz	ip, ip
 8001fea:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8001fee:	e7eb      	b.n	8001fc8 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8001ff0:	2000      	movs	r0, #0
}
 8001ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001ff6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ffa:	4605      	mov	r5, r0
 8001ffc:	460e      	mov	r6, r1
 8001ffe:	4690      	mov	r8, r2
 8002000:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002002:	e053      	b.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800200a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800200c:	682b      	ldr	r3, [r5, #0]
 800200e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002012:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002014:	2300      	movs	r3, #0
 8002016:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002018:	2220      	movs	r2, #32
 800201a:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800201e:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002022:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8002024:	f042 0204 	orr.w	r2, r2, #4
 8002028:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 800202a:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 800202e:	2001      	movs	r0, #1
 8002030:	e04a      	b.n	80020c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002032:	f7ff fae9 	bl	8001608 <HAL_GetTick>
 8002036:	eba0 0009 	sub.w	r0, r0, r9
 800203a:	4540      	cmp	r0, r8
 800203c:	d802      	bhi.n	8002044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 800203e:	f1b8 0f00 	cmp.w	r8, #0
 8002042:	d133      	bne.n	80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002044:	2f01      	cmp	r7, #1
 8002046:	d017      	beq.n	8002078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8002048:	682b      	ldr	r3, [r5, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	ea26 0303 	bic.w	r3, r6, r3
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b00      	subs	r3, #0
 8002054:	bf18      	it	ne
 8002056:	2301      	movne	r3, #1
 8002058:	b343      	cbz	r3, 80020ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800205a:	2300      	movs	r3, #0
 800205c:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800205e:	2220      	movs	r2, #32
 8002060:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002064:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002068:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 800206a:	f042 0220 	orr.w	r2, r2, #32
 800206e:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002070:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 8002074:	2001      	movs	r0, #1
 8002076:	e027      	b.n	80020c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	ea26 0303 	bic.w	r3, r6, r3
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b00      	subs	r3, #0
 8002084:	bf18      	it	ne
 8002086:	2301      	movne	r3, #1
 8002088:	e7e6      	b.n	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800208a:	682b      	ldr	r3, [r5, #0]
 800208c:	699c      	ldr	r4, [r3, #24]
 800208e:	ea26 0404 	bic.w	r4, r6, r4
 8002092:	b2a4      	uxth	r4, r4
 8002094:	3c00      	subs	r4, #0
 8002096:	bf18      	it	ne
 8002098:	2401      	movne	r4, #1
 800209a:	b1a4      	cbz	r4, 80020c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800209c:	682b      	ldr	r3, [r5, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80020a4:	d1ae      	bne.n	8002004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80020a6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80020aa:	d1c2      	bne.n	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ac:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80020b0:	2f01      	cmp	r7, #1
 80020b2:	d1ea      	bne.n	800208a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 80020b4:	682b      	ldr	r3, [r5, #0]
 80020b6:	695c      	ldr	r4, [r3, #20]
 80020b8:	ea26 0404 	bic.w	r4, r6, r4
 80020bc:	b2a4      	uxth	r4, r4
 80020be:	3c00      	subs	r4, #0
 80020c0:	bf18      	it	ne
 80020c2:	2401      	movne	r4, #1
 80020c4:	e7e9      	b.n	800209a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 80020c6:	2000      	movs	r0, #0
}
 80020c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080020cc <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80020cc:	b570      	push	{r4, r5, r6, lr}
 80020ce:	4604      	mov	r4, r0
 80020d0:	460d      	mov	r5, r1
 80020d2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80020dc:	d121      	bne.n	8002122 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020de:	4620      	mov	r0, r4
 80020e0:	f7ff ff0c 	bl	8001efc <I2C_IsAcknowledgeFailed>
 80020e4:	b9f8      	cbnz	r0, 8002126 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80020e6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80020ea:	d0f3      	beq.n	80020d4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ec:	f7ff fa8c 	bl	8001608 <HAL_GetTick>
 80020f0:	1b80      	subs	r0, r0, r6
 80020f2:	42a8      	cmp	r0, r5
 80020f4:	d801      	bhi.n	80020fa <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80020f6:	2d00      	cmp	r5, #0
 80020f8:	d1ec      	bne.n	80020d4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002102:	d1e7      	bne.n	80020d4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002104:	2300      	movs	r3, #0
 8002106:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002108:	2220      	movs	r2, #32
 800210a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800210e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002112:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002114:	f042 0220 	orr.w	r2, r2, #32
 8002118:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800211a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800211e:	2001      	movs	r0, #1
 8002120:	e000      	b.n	8002124 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8002122:	2000      	movs	r0, #0
}
 8002124:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002126:	2001      	movs	r0, #1
 8002128:	e7fc      	b.n	8002124 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
	...

0800212c <I2C_RequestMemoryWrite>:
{
 800212c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002130:	b085      	sub	sp, #20
 8002132:	4604      	mov	r4, r0
 8002134:	460d      	mov	r5, r1
 8002136:	4691      	mov	r9, r2
 8002138:	461f      	mov	r7, r3
 800213a:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 800213e:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002140:	6803      	ldr	r3, [r0, #0]
 8002142:	6819      	ldr	r1, [r3, #0]
 8002144:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002148:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800214a:	9600      	str	r6, [sp, #0]
 800214c:	4643      	mov	r3, r8
 800214e:	2200      	movs	r2, #0
 8002150:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002154:	f7ff fefa 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8002158:	b960      	cbnz	r0, 8002174 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8002160:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002162:	4633      	mov	r3, r6
 8002164:	4642      	mov	r2, r8
 8002166:	4926      	ldr	r1, [pc, #152]	@ (8002200 <I2C_RequestMemoryWrite+0xd4>)
 8002168:	4620      	mov	r0, r4
 800216a:	f7ff ff44 	bl	8001ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800216e:	b168      	cbz	r0, 800218c <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8002170:	2001      	movs	r0, #1
 8002172:	e008      	b.n	8002186 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800217c:	d002      	beq.n	8002184 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800217e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002182:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002184:	2003      	movs	r0, #3
}
 8002186:	b005      	add	sp, #20
 8002188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218c:	2300      	movs	r3, #0
 800218e:	9303      	str	r3, [sp, #12]
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	9203      	str	r2, [sp, #12]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	9303      	str	r3, [sp, #12]
 800219a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800219c:	4632      	mov	r2, r6
 800219e:	4641      	mov	r1, r8
 80021a0:	4620      	mov	r0, r4
 80021a2:	f7ff ff93 	bl	80020cc <I2C_WaitOnTXEFlagUntilTimeout>
 80021a6:	b930      	cbnz	r0, 80021b6 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021a8:	2f01      	cmp	r7, #1
 80021aa:	d10f      	bne.n	80021cc <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	fa5f f689 	uxtb.w	r6, r9
 80021b2:	611e      	str	r6, [r3, #16]
 80021b4:	e7e7      	b.n	8002186 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d001      	beq.n	80021c0 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80021bc:	2001      	movs	r0, #1
 80021be:	e7e2      	b.n	8002186 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c0:	6822      	ldr	r2, [r4, #0]
 80021c2:	6813      	ldr	r3, [r2, #0]
 80021c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e7f7      	b.n	80021bc <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	ea4f 2219 	mov.w	r2, r9, lsr #8
 80021d2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021d4:	4632      	mov	r2, r6
 80021d6:	4641      	mov	r1, r8
 80021d8:	4620      	mov	r0, r4
 80021da:	f7ff ff77 	bl	80020cc <I2C_WaitOnTXEFlagUntilTimeout>
 80021de:	b920      	cbnz	r0, 80021ea <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	fa5f f689 	uxtb.w	r6, r9
 80021e6:	611e      	str	r6, [r3, #16]
 80021e8:	e7cd      	b.n	8002186 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d001      	beq.n	80021f4 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 80021f0:	2001      	movs	r0, #1
 80021f2:	e7c8      	b.n	8002186 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f4:	6822      	ldr	r2, [r4, #0]
 80021f6:	6813      	ldr	r3, [r2, #0]
 80021f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e7f7      	b.n	80021f0 <I2C_RequestMemoryWrite+0xc4>
 8002200:	00010002 	.word	0x00010002

08002204 <I2C_RequestMemoryRead>:
{
 8002204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	4604      	mov	r4, r0
 800220c:	460d      	mov	r5, r1
 800220e:	4616      	mov	r6, r2
 8002210:	4699      	mov	r9, r3
 8002212:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8002214:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002218:	6802      	ldr	r2, [r0, #0]
 800221a:	6813      	ldr	r3, [r2, #0]
 800221c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002220:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002222:	6803      	ldr	r3, [r0, #0]
 8002224:	6819      	ldr	r1, [r3, #0]
 8002226:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800222a:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800222c:	f8cd 8000 	str.w	r8, [sp]
 8002230:	463b      	mov	r3, r7
 8002232:	2200      	movs	r2, #0
 8002234:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002238:	f7ff fe88 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 800223c:	b970      	cbnz	r0, 800225c <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800223e:	fa5f fa85 	uxtb.w	sl, r5
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 8002248:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800224a:	4643      	mov	r3, r8
 800224c:	463a      	mov	r2, r7
 800224e:	4941      	ldr	r1, [pc, #260]	@ (8002354 <I2C_RequestMemoryRead+0x150>)
 8002250:	4620      	mov	r0, r4
 8002252:	f7ff fed0 	bl	8001ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002256:	b168      	cbz	r0, 8002274 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8002258:	2001      	movs	r0, #1
 800225a:	e008      	b.n	800226e <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002264:	d002      	beq.n	800226c <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002266:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800226a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800226c:	2003      	movs	r0, #3
}
 800226e:	b004      	add	sp, #16
 8002270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002274:	2300      	movs	r3, #0
 8002276:	9303      	str	r3, [sp, #12]
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	9203      	str	r2, [sp, #12]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	9303      	str	r3, [sp, #12]
 8002282:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002284:	4642      	mov	r2, r8
 8002286:	4639      	mov	r1, r7
 8002288:	4620      	mov	r0, r4
 800228a:	f7ff ff1f 	bl	80020cc <I2C_WaitOnTXEFlagUntilTimeout>
 800228e:	b980      	cbnz	r0, 80022b2 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002290:	f1b9 0f01 	cmp.w	r9, #1
 8002294:	d118      	bne.n	80022c8 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	b2f6      	uxtb	r6, r6
 800229a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800229c:	4642      	mov	r2, r8
 800229e:	4639      	mov	r1, r7
 80022a0:	4620      	mov	r0, r4
 80022a2:	f7ff ff13 	bl	80020cc <I2C_WaitOnTXEFlagUntilTimeout>
 80022a6:	b368      	cbz	r0, 8002304 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d024      	beq.n	80022f8 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 80022ae:	2001      	movs	r0, #1
 80022b0:	e7dd      	b.n	800226e <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d001      	beq.n	80022bc <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 80022b8:	2001      	movs	r0, #1
 80022ba:	e7d8      	b.n	800226e <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022bc:	6822      	ldr	r2, [r4, #0]
 80022be:	6813      	ldr	r3, [r2, #0]
 80022c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e7f7      	b.n	80022b8 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	0a32      	lsrs	r2, r6, #8
 80022cc:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ce:	4642      	mov	r2, r8
 80022d0:	4639      	mov	r1, r7
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7ff fefa 	bl	80020cc <I2C_WaitOnTXEFlagUntilTimeout>
 80022d8:	b918      	cbnz	r0, 80022e2 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	b2f6      	uxtb	r6, r6
 80022de:	611e      	str	r6, [r3, #16]
 80022e0:	e7dc      	b.n	800229c <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d001      	beq.n	80022ec <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 80022e8:	2001      	movs	r0, #1
 80022ea:	e7c0      	b.n	800226e <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ec:	6822      	ldr	r2, [r4, #0]
 80022ee:	6813      	ldr	r3, [r2, #0]
 80022f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e7f7      	b.n	80022e8 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f8:	6822      	ldr	r2, [r4, #0]
 80022fa:	6813      	ldr	r3, [r2, #0]
 80022fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e7d4      	b.n	80022ae <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002304:	6822      	ldr	r2, [r4, #0]
 8002306:	6813      	ldr	r3, [r2, #0]
 8002308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800230c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800230e:	f8cd 8000 	str.w	r8, [sp]
 8002312:	463b      	mov	r3, r7
 8002314:	2200      	movs	r2, #0
 8002316:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800231a:	4620      	mov	r0, r4
 800231c:	f7ff fe16 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8002320:	b968      	cbnz	r0, 800233e <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002322:	6822      	ldr	r2, [r4, #0]
 8002324:	f04a 0301 	orr.w	r3, sl, #1
 8002328:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800232a:	4643      	mov	r3, r8
 800232c:	463a      	mov	r2, r7
 800232e:	4909      	ldr	r1, [pc, #36]	@ (8002354 <I2C_RequestMemoryRead+0x150>)
 8002330:	4620      	mov	r0, r4
 8002332:	f7ff fe60 	bl	8001ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002336:	2800      	cmp	r0, #0
 8002338:	d099      	beq.n	800226e <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 800233a:	2001      	movs	r0, #1
 800233c:	e797      	b.n	800226e <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002346:	d002      	beq.n	800234e <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800234c:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800234e:	2003      	movs	r0, #3
 8002350:	e78d      	b.n	800226e <I2C_RequestMemoryRead+0x6a>
 8002352:	bf00      	nop
 8002354:	00010002 	.word	0x00010002

08002358 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	4604      	mov	r4, r0
 800235c:	460d      	mov	r5, r1
 800235e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	f013 0f04 	tst.w	r3, #4
 8002368:	d121      	bne.n	80023ae <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800236a:	4620      	mov	r0, r4
 800236c:	f7ff fdc6 	bl	8001efc <I2C_IsAcknowledgeFailed>
 8002370:	b9f8      	cbnz	r0, 80023b2 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8002372:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002376:	d0f3      	beq.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002378:	f7ff f946 	bl	8001608 <HAL_GetTick>
 800237c:	1b80      	subs	r0, r0, r6
 800237e:	42a8      	cmp	r0, r5
 8002380:	d801      	bhi.n	8002386 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002382:	2d00      	cmp	r5, #0
 8002384:	d1ec      	bne.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f013 0f04 	tst.w	r3, #4
 800238e:	d1e7      	bne.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002390:	2300      	movs	r3, #0
 8002392:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002394:	2220      	movs	r2, #32
 8002396:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800239a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800239e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80023a0:	f042 0220 	orr.w	r2, r2, #32
 80023a4:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80023a6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80023aa:	2001      	movs	r0, #1
 80023ac:	e000      	b.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80023ae:	2000      	movs	r0, #0
}
 80023b0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80023b2:	2001      	movs	r0, #1
 80023b4:	e7fc      	b.n	80023b0 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

080023b6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80023b6:	b570      	push	{r4, r5, r6, lr}
 80023b8:	4604      	mov	r4, r0
 80023ba:	460d      	mov	r5, r1
 80023bc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023be:	e014      	b.n	80023ea <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023c0:	f06f 0210 	mvn.w	r2, #16
 80023c4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023ca:	2220      	movs	r2, #32
 80023cc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023d4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80023d6:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80023d8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80023dc:	2001      	movs	r0, #1
 80023de:	e025      	b.n	800242c <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80023e8:	d010      	beq.n	800240c <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	6958      	ldr	r0, [r3, #20]
 80023ee:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80023f2:	d11a      	bne.n	800242a <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023f4:	6958      	ldr	r0, [r3, #20]
 80023f6:	f010 0f10 	tst.w	r0, #16
 80023fa:	d1e1      	bne.n	80023c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fc:	f7ff f904 	bl	8001608 <HAL_GetTick>
 8002400:	1b80      	subs	r0, r0, r6
 8002402:	42a8      	cmp	r0, r5
 8002404:	d8ec      	bhi.n	80023e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 8002406:	2d00      	cmp	r5, #0
 8002408:	d1ef      	bne.n	80023ea <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 800240a:	e7e9      	b.n	80023e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800240c:	2300      	movs	r3, #0
 800240e:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002410:	2220      	movs	r2, #32
 8002412:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002416:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800241a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800241c:	f042 0220 	orr.w	r2, r2, #32
 8002420:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002422:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 8002426:	2001      	movs	r0, #1
 8002428:	e000      	b.n	800242c <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 800242a:	2000      	movs	r0, #0
}
 800242c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002430 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002430:	2800      	cmp	r0, #0
 8002432:	f000 80cc 	beq.w	80025ce <HAL_I2C_Init+0x19e>
{
 8002436:	b570      	push	{r4, r5, r6, lr}
 8002438:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800243a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800243e:	2b00      	cmp	r3, #0
 8002440:	d077      	beq.n	8002532 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002442:	2324      	movs	r3, #36	@ 0x24
 8002444:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002448:	6822      	ldr	r2, [r4, #0]
 800244a:	6813      	ldr	r3, [r2, #0]
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002452:	6822      	ldr	r2, [r4, #0]
 8002454:	6813      	ldr	r3, [r2, #0]
 8002456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800245a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800245c:	6822      	ldr	r2, [r4, #0]
 800245e:	6813      	ldr	r3, [r2, #0]
 8002460:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002464:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002466:	f001 fd43 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800246a:	6862      	ldr	r2, [r4, #4]
 800246c:	4b5a      	ldr	r3, [pc, #360]	@ (80025d8 <HAL_I2C_Init+0x1a8>)
 800246e:	429a      	cmp	r2, r3
 8002470:	d864      	bhi.n	800253c <HAL_I2C_Init+0x10c>
 8002472:	4b5a      	ldr	r3, [pc, #360]	@ (80025dc <HAL_I2C_Init+0x1ac>)
 8002474:	4298      	cmp	r0, r3
 8002476:	bf8c      	ite	hi
 8002478:	2300      	movhi	r3, #0
 800247a:	2301      	movls	r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	f040 80a8 	bne.w	80025d2 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8002482:	4957      	ldr	r1, [pc, #348]	@ (80025e0 <HAL_I2C_Init+0x1b0>)
 8002484:	fba1 3100 	umull	r3, r1, r1, r0
 8002488:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800248a:	6825      	ldr	r5, [r4, #0]
 800248c:	686a      	ldr	r2, [r5, #4]
 800248e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002492:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002496:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002498:	6821      	ldr	r1, [r4, #0]
 800249a:	6a0a      	ldr	r2, [r1, #32]
 800249c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80024a0:	6866      	ldr	r6, [r4, #4]
 80024a2:	4d4d      	ldr	r5, [pc, #308]	@ (80025d8 <HAL_I2C_Init+0x1a8>)
 80024a4:	42ae      	cmp	r6, r5
 80024a6:	d84f      	bhi.n	8002548 <HAL_I2C_Init+0x118>
 80024a8:	3301      	adds	r3, #1
 80024aa:	4313      	orrs	r3, r2
 80024ac:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024ae:	6821      	ldr	r1, [r4, #0]
 80024b0:	69ca      	ldr	r2, [r1, #28]
 80024b2:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80024b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024ba:	6865      	ldr	r5, [r4, #4]
 80024bc:	4b46      	ldr	r3, [pc, #280]	@ (80025d8 <HAL_I2C_Init+0x1a8>)
 80024be:	429d      	cmp	r5, r3
 80024c0:	d84c      	bhi.n	800255c <HAL_I2C_Init+0x12c>
 80024c2:	1e43      	subs	r3, r0, #1
 80024c4:	006d      	lsls	r5, r5, #1
 80024c6:	fbb3 f3f5 	udiv	r3, r3, r5
 80024ca:	3301      	adds	r3, #1
 80024cc:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80024d0:	4203      	tst	r3, r0
 80024d2:	d078      	beq.n	80025c6 <HAL_I2C_Init+0x196>
 80024d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d8:	431a      	orrs	r2, r3
 80024da:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024dc:	6821      	ldr	r1, [r4, #0]
 80024de:	680b      	ldr	r3, [r1, #0]
 80024e0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80024e4:	69e2      	ldr	r2, [r4, #28]
 80024e6:	6a20      	ldr	r0, [r4, #32]
 80024e8:	4302      	orrs	r2, r0
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024ee:	6821      	ldr	r1, [r4, #0]
 80024f0:	688b      	ldr	r3, [r1, #8]
 80024f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024fa:	6922      	ldr	r2, [r4, #16]
 80024fc:	68e0      	ldr	r0, [r4, #12]
 80024fe:	4302      	orrs	r2, r0
 8002500:	4313      	orrs	r3, r2
 8002502:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002504:	6821      	ldr	r1, [r4, #0]
 8002506:	68cb      	ldr	r3, [r1, #12]
 8002508:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800250c:	6962      	ldr	r2, [r4, #20]
 800250e:	69a0      	ldr	r0, [r4, #24]
 8002510:	4302      	orrs	r2, r0
 8002512:	4313      	orrs	r3, r2
 8002514:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002516:	6822      	ldr	r2, [r4, #0]
 8002518:	6813      	ldr	r3, [r2, #0]
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002520:	2000      	movs	r0, #0
 8002522:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002524:	2320      	movs	r3, #32
 8002526:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800252a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800252c:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8002530:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002532:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002536:	f7fe fe29 	bl	800118c <HAL_I2C_MspInit>
 800253a:	e782      	b.n	8002442 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800253c:	4b29      	ldr	r3, [pc, #164]	@ (80025e4 <HAL_I2C_Init+0x1b4>)
 800253e:	4298      	cmp	r0, r3
 8002540:	bf8c      	ite	hi
 8002542:	2300      	movhi	r3, #0
 8002544:	2301      	movls	r3, #1
 8002546:	e799      	b.n	800247c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002548:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800254c:	fb05 f303 	mul.w	r3, r5, r3
 8002550:	4d25      	ldr	r5, [pc, #148]	@ (80025e8 <HAL_I2C_Init+0x1b8>)
 8002552:	fba5 5303 	umull	r5, r3, r5, r3
 8002556:	099b      	lsrs	r3, r3, #6
 8002558:	3301      	adds	r3, #1
 800255a:	e7a6      	b.n	80024aa <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800255c:	68a6      	ldr	r6, [r4, #8]
 800255e:	b9be      	cbnz	r6, 8002590 <HAL_I2C_Init+0x160>
 8002560:	1e43      	subs	r3, r0, #1
 8002562:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8002566:	fbb3 f3fc 	udiv	r3, r3, ip
 800256a:	3301      	adds	r3, #1
 800256c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002570:	fab3 f383 	clz	r3, r3
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	bb43      	cbnz	r3, 80025ca <HAL_I2C_Init+0x19a>
 8002578:	b9c6      	cbnz	r6, 80025ac <HAL_I2C_Init+0x17c>
 800257a:	1e43      	subs	r3, r0, #1
 800257c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002580:	fbb3 f3f5 	udiv	r3, r3, r5
 8002584:	3301      	adds	r3, #1
 8002586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800258e:	e7a3      	b.n	80024d8 <HAL_I2C_Init+0xa8>
 8002590:	1e43      	subs	r3, r0, #1
 8002592:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002596:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800259a:	fbb3 f3fc 	udiv	r3, r3, ip
 800259e:	3301      	adds	r3, #1
 80025a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	095b      	lsrs	r3, r3, #5
 80025aa:	e7e4      	b.n	8002576 <HAL_I2C_Init+0x146>
 80025ac:	1e43      	subs	r3, r0, #1
 80025ae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80025b2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80025b6:	fbb3 f3f5 	udiv	r3, r3, r5
 80025ba:	3301      	adds	r3, #1
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025c4:	e788      	b.n	80024d8 <HAL_I2C_Init+0xa8>
 80025c6:	2304      	movs	r3, #4
 80025c8:	e786      	b.n	80024d8 <HAL_I2C_Init+0xa8>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e784      	b.n	80024d8 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80025ce:	2001      	movs	r0, #1
}
 80025d0:	4770      	bx	lr
    return HAL_ERROR;
 80025d2:	2001      	movs	r0, #1
 80025d4:	e7ac      	b.n	8002530 <HAL_I2C_Init+0x100>
 80025d6:	bf00      	nop
 80025d8:	000186a0 	.word	0x000186a0
 80025dc:	001e847f 	.word	0x001e847f
 80025e0:	431bde83 	.word	0x431bde83
 80025e4:	003d08ff 	.word	0x003d08ff
 80025e8:	10624dd3 	.word	0x10624dd3

080025ec <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80025ec:	b1a8      	cbz	r0, 800261a <HAL_I2C_DeInit+0x2e>
{
 80025ee:	b510      	push	{r4, lr}
 80025f0:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f2:	2324      	movs	r3, #36	@ 0x24
 80025f4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80025f8:	6802      	ldr	r2, [r0, #0]
 80025fa:	6813      	ldr	r3, [r2, #0]
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002602:	f7fe fe05 	bl	8001210 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002606:	2000      	movs	r0, #0
 8002608:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800260a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800260e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002610:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 8002614:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8002618:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800261a:	2001      	movs	r0, #1
}
 800261c:	4770      	bx	lr
	...

08002620 <HAL_I2C_Mem_Write>:
{
 8002620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002624:	b083      	sub	sp, #12
 8002626:	4604      	mov	r4, r0
 8002628:	460f      	mov	r7, r1
 800262a:	4690      	mov	r8, r2
 800262c:	4699      	mov	r9, r3
 800262e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7fe ffea 	bl	8001608 <HAL_GetTick>
 8002634:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002636:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 800263a:	b2c0      	uxtb	r0, r0
 800263c:	2820      	cmp	r0, #32
 800263e:	d003      	beq.n	8002648 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8002640:	2002      	movs	r0, #2
}
 8002642:	b003      	add	sp, #12
 8002644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002648:	9500      	str	r5, [sp, #0]
 800264a:	2319      	movs	r3, #25
 800264c:	2201      	movs	r2, #1
 800264e:	494b      	ldr	r1, [pc, #300]	@ (800277c <HAL_I2C_Mem_Write+0x15c>)
 8002650:	4620      	mov	r0, r4
 8002652:	f7ff fc7b 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8002656:	2800      	cmp	r0, #0
 8002658:	f040 8089 	bne.w	800276e <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 800265c:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002660:	2b01      	cmp	r3, #1
 8002662:	f000 8086 	beq.w	8002772 <HAL_I2C_Mem_Write+0x152>
 8002666:	2301      	movs	r3, #1
 8002668:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	f012 0f01 	tst.w	r2, #1
 8002674:	d103      	bne.n	800267e <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	f042 0201 	orr.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	6813      	ldr	r3, [r2, #0]
 8002682:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002686:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002688:	2321      	movs	r3, #33	@ 0x21
 800268a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800268e:	2340      	movs	r3, #64	@ 0x40
 8002690:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002694:	2300      	movs	r3, #0
 8002696:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800269a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800269c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80026a0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026a2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026a4:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026a6:	4b36      	ldr	r3, [pc, #216]	@ (8002780 <HAL_I2C_Mem_Write+0x160>)
 80026a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026aa:	9501      	str	r5, [sp, #4]
 80026ac:	9600      	str	r6, [sp, #0]
 80026ae:	464b      	mov	r3, r9
 80026b0:	4642      	mov	r2, r8
 80026b2:	4639      	mov	r1, r7
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7ff fd39 	bl	800212c <I2C_RequestMemoryWrite>
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d15b      	bne.n	8002776 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 80026be:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d035      	beq.n	8002730 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c4:	462a      	mov	r2, r5
 80026c6:	4631      	mov	r1, r6
 80026c8:	4620      	mov	r0, r4
 80026ca:	f7ff fcff 	bl	80020cc <I2C_WaitOnTXEFlagUntilTimeout>
 80026ce:	bb20      	cbnz	r0, 800271a <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80026d8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80026da:	1c53      	adds	r3, r2, #1
 80026dc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80026de:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 80026e0:	3901      	subs	r1, #1
 80026e2:	b289      	uxth	r1, r1
 80026e4:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80026e6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026f0:	6823      	ldr	r3, [r4, #0]
 80026f2:	6958      	ldr	r0, [r3, #20]
 80026f4:	f010 0f04 	tst.w	r0, #4
 80026f8:	d0e1      	beq.n	80026be <HAL_I2C_Mem_Write+0x9e>
 80026fa:	2900      	cmp	r1, #0
 80026fc:	d0df      	beq.n	80026be <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fe:	7852      	ldrb	r2, [r2, #1]
 8002700:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002702:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002704:	3301      	adds	r3, #1
 8002706:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002708:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800270a:	3b01      	subs	r3, #1
 800270c:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 800270e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29b      	uxth	r3, r3
 8002716:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002718:	e7d1      	b.n	80026be <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800271c:	2b04      	cmp	r3, #4
 800271e:	d001      	beq.n	8002724 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8002720:	2001      	movs	r0, #1
 8002722:	e78e      	b.n	8002642 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002724:	6822      	ldr	r2, [r4, #0]
 8002726:	6813      	ldr	r3, [r2, #0]
 8002728:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e7f7      	b.n	8002720 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002730:	462a      	mov	r2, r5
 8002732:	4631      	mov	r1, r6
 8002734:	4620      	mov	r0, r4
 8002736:	f7ff fe0f 	bl	8002358 <I2C_WaitOnBTFFlagUntilTimeout>
 800273a:	b150      	cbz	r0, 8002752 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800273c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800273e:	2b04      	cmp	r3, #4
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8002742:	2001      	movs	r0, #1
 8002744:	e77d      	b.n	8002642 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002746:	6822      	ldr	r2, [r4, #0]
 8002748:	6813      	ldr	r3, [r2, #0]
 800274a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	e7f7      	b.n	8002742 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002752:	6822      	ldr	r2, [r4, #0]
 8002754:	6813      	ldr	r3, [r2, #0]
 8002756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800275a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800275c:	2320      	movs	r3, #32
 800275e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002762:	2300      	movs	r3, #0
 8002764:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002768:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 800276c:	e769      	b.n	8002642 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 800276e:	2002      	movs	r0, #2
 8002770:	e767      	b.n	8002642 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8002772:	2002      	movs	r0, #2
 8002774:	e765      	b.n	8002642 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8002776:	2001      	movs	r0, #1
 8002778:	e763      	b.n	8002642 <HAL_I2C_Mem_Write+0x22>
 800277a:	bf00      	nop
 800277c:	00100002 	.word	0x00100002
 8002780:	ffff0000 	.word	0xffff0000

08002784 <HAL_I2C_Mem_Read>:
{
 8002784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002788:	b089      	sub	sp, #36	@ 0x24
 800278a:	4604      	mov	r4, r0
 800278c:	460f      	mov	r7, r1
 800278e:	4690      	mov	r8, r2
 8002790:	4699      	mov	r9, r3
 8002792:	9e12      	ldr	r6, [sp, #72]	@ 0x48
  __IO uint32_t count = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8002798:	f7fe ff36 	bl	8001608 <HAL_GetTick>
 800279c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800279e:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 80027a2:	b2c0      	uxtb	r0, r0
 80027a4:	2820      	cmp	r0, #32
 80027a6:	d004      	beq.n	80027b2 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 80027a8:	2702      	movs	r7, #2
}
 80027aa:	4638      	mov	r0, r7
 80027ac:	b009      	add	sp, #36	@ 0x24
 80027ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b2:	9500      	str	r5, [sp, #0]
 80027b4:	2319      	movs	r3, #25
 80027b6:	2201      	movs	r2, #1
 80027b8:	4981      	ldr	r1, [pc, #516]	@ (80029c0 <HAL_I2C_Mem_Read+0x23c>)
 80027ba:	4620      	mov	r0, r4
 80027bc:	f7ff fbc6 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	f040 817c 	bne.w	8002abe <HAL_I2C_Mem_Read+0x33a>
    __HAL_LOCK(hi2c);
 80027c6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	f000 8179 	beq.w	8002ac2 <HAL_I2C_Mem_Read+0x33e>
 80027d0:	2301      	movs	r3, #1
 80027d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	f012 0f01 	tst.w	r2, #1
 80027de:	d103      	bne.n	80027e8 <HAL_I2C_Mem_Read+0x64>
      __HAL_I2C_ENABLE(hi2c);
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e8:	6822      	ldr	r2, [r4, #0]
 80027ea:	6813      	ldr	r3, [r2, #0]
 80027ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027f0:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027f2:	2322      	movs	r3, #34	@ 0x22
 80027f4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027f8:	2340      	movs	r3, #64	@ 0x40
 80027fa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fe:	2300      	movs	r3, #0
 8002800:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002802:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002804:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002806:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800280a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800280c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800280e:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002810:	4b6c      	ldr	r3, [pc, #432]	@ (80029c4 <HAL_I2C_Mem_Read+0x240>)
 8002812:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002814:	9501      	str	r5, [sp, #4]
 8002816:	9600      	str	r6, [sp, #0]
 8002818:	464b      	mov	r3, r9
 800281a:	4642      	mov	r2, r8
 800281c:	4639      	mov	r1, r7
 800281e:	4620      	mov	r0, r4
 8002820:	f7ff fcf0 	bl	8002204 <I2C_RequestMemoryRead>
 8002824:	4607      	mov	r7, r0
 8002826:	2800      	cmp	r0, #0
 8002828:	f040 814d 	bne.w	8002ac6 <HAL_I2C_Mem_Read+0x342>
    if (hi2c->XferSize == 0U)
 800282c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800282e:	b95b      	cbnz	r3, 8002848 <HAL_I2C_Mem_Read+0xc4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002830:	9303      	str	r3, [sp, #12]
 8002832:	6823      	ldr	r3, [r4, #0]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	9203      	str	r2, [sp, #12]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	9203      	str	r2, [sp, #12]
 800283c:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	e0f2      	b.n	8002a2e <HAL_I2C_Mem_Read+0x2aa>
    else if (hi2c->XferSize == 1U)
 8002848:	2b01      	cmp	r3, #1
 800284a:	d00f      	beq.n	800286c <HAL_I2C_Mem_Read+0xe8>
    else if (hi2c->XferSize == 2U)
 800284c:	2b02      	cmp	r3, #2
 800284e:	d021      	beq.n	8002894 <HAL_I2C_Mem_Read+0x110>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002850:	6822      	ldr	r2, [r4, #0]
 8002852:	6813      	ldr	r3, [r2, #0]
 8002854:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002858:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285a:	2300      	movs	r3, #0
 800285c:	9306      	str	r3, [sp, #24]
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	9206      	str	r2, [sp, #24]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	9306      	str	r3, [sp, #24]
 8002868:	9b06      	ldr	r3, [sp, #24]
 800286a:	e0e0      	b.n	8002a2e <HAL_I2C_Mem_Read+0x2aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286c:	6822      	ldr	r2, [r4, #0]
 800286e:	6813      	ldr	r3, [r2, #0]
 8002870:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002874:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002876:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002878:	2300      	movs	r3, #0
 800287a:	9304      	str	r3, [sp, #16]
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	9204      	str	r2, [sp, #16]
 8002882:	699a      	ldr	r2, [r3, #24]
 8002884:	9204      	str	r2, [sp, #16]
 8002886:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800288e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002890:	b662      	cpsie	i
}
 8002892:	e0cc      	b.n	8002a2e <HAL_I2C_Mem_Read+0x2aa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002894:	6822      	ldr	r2, [r4, #0]
 8002896:	6813      	ldr	r3, [r2, #0]
 8002898:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800289c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800289e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a0:	2300      	movs	r3, #0
 80028a2:	9305      	str	r3, [sp, #20]
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	9205      	str	r2, [sp, #20]
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	9205      	str	r2, [sp, #20]
 80028ae:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028b8:	b662      	cpsie	i
}
 80028ba:	e0b8      	b.n	8002a2e <HAL_I2C_Mem_Read+0x2aa>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028bc:	462a      	mov	r2, r5
 80028be:	4631      	mov	r1, r6
 80028c0:	4620      	mov	r0, r4
 80028c2:	f7ff fd78 	bl	80023b6 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028c6:	2800      	cmp	r0, #0
 80028c8:	f040 80ff 	bne.w	8002aca <HAL_I2C_Mem_Read+0x346>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028cc:	6823      	ldr	r3, [r4, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80028d2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80028d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80028d6:	3301      	adds	r3, #1
 80028d8:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80028da:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80028dc:	3b01      	subs	r3, #1
 80028de:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80028e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80028ea:	e0a0      	b.n	8002a2e <HAL_I2C_Mem_Read+0x2aa>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028ec:	9500      	str	r5, [sp, #0]
 80028ee:	4633      	mov	r3, r6
 80028f0:	2200      	movs	r2, #0
 80028f2:	4935      	ldr	r1, [pc, #212]	@ (80029c8 <HAL_I2C_Mem_Read+0x244>)
 80028f4:	4620      	mov	r0, r4
 80028f6:	f7ff fb29 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 80028fa:	2800      	cmp	r0, #0
 80028fc:	f040 80e9 	bne.w	8002ad2 <HAL_I2C_Mem_Read+0x34e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002900:	6822      	ldr	r2, [r4, #0]
 8002902:	6813      	ldr	r3, [r2, #0]
 8002904:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002908:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800290a:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002912:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002914:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002916:	3301      	adds	r3, #1
 8002918:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800291a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800291c:	3b01      	subs	r3, #1
 800291e:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002920:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29b      	uxth	r3, r3
 8002928:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800292a:	4b28      	ldr	r3, [pc, #160]	@ (80029cc <HAL_I2C_Mem_Read+0x248>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	08db      	lsrs	r3, r3, #3
 8002930:	4a27      	ldr	r2, [pc, #156]	@ (80029d0 <HAL_I2C_Mem_Read+0x24c>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800293c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002940:	9307      	str	r3, [sp, #28]
            count--;
 8002942:	9b07      	ldr	r3, [sp, #28]
 8002944:	3b01      	subs	r3, #1
 8002946:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 8002948:	9b07      	ldr	r3, [sp, #28]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d028      	beq.n	80029a0 <HAL_I2C_Mem_Read+0x21c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800294e:	6823      	ldr	r3, [r4, #0]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	f012 0f04 	tst.w	r2, #4
 8002956:	d0f4      	beq.n	8002942 <HAL_I2C_Mem_Read+0x1be>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002966:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002968:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800296a:	3301      	adds	r3, #1
 800296c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800296e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002970:	3b01      	subs	r3, #1
 8002972:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002974:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29b      	uxth	r3, r3
 800297c:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800297e:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002980:	6823      	ldr	r3, [r4, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002986:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002988:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800298a:	3301      	adds	r3, #1
 800298c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800298e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002990:	3b01      	subs	r3, #1
 8002992:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002994:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29b      	uxth	r3, r3
 800299c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800299e:	e046      	b.n	8002a2e <HAL_I2C_Mem_Read+0x2aa>
              hi2c->PreviousState       = I2C_STATE_NONE;
 80029a0:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80029a2:	2220      	movs	r2, #32
 80029a4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80029ae:	f042 0220 	orr.w	r2, r2, #32
 80029b2:	6422      	str	r2, [r4, #64]	@ 0x40
 80029b4:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80029b6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
              return HAL_ERROR;
 80029ba:	2701      	movs	r7, #1
 80029bc:	e6f5      	b.n	80027aa <HAL_I2C_Mem_Read+0x26>
 80029be:	bf00      	nop
 80029c0:	00100002 	.word	0x00100002
 80029c4:	ffff0000 	.word	0xffff0000
 80029c8:	00010004 	.word	0x00010004
 80029cc:	20000000 	.word	0x20000000
 80029d0:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d4:	462a      	mov	r2, r5
 80029d6:	4631      	mov	r1, r6
 80029d8:	4620      	mov	r0, r4
 80029da:	f7ff fcec 	bl	80023b6 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029de:	2800      	cmp	r0, #0
 80029e0:	d179      	bne.n	8002ad6 <HAL_I2C_Mem_Read+0x352>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80029e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80029ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80029ec:	3301      	adds	r3, #1
 80029ee:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 80029f0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80029f2:	3a01      	subs	r2, #1
 80029f4:	b292      	uxth	r2, r2
 80029f6:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80029f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	6959      	ldr	r1, [r3, #20]
 8002a06:	f011 0f04 	tst.w	r1, #4
 8002a0a:	d010      	beq.n	8002a2e <HAL_I2C_Mem_Read+0x2aa>
          if (hi2c->XferSize == 3U)
 8002a0c:	2a03      	cmp	r2, #3
 8002a0e:	d048      	beq.n	8002aa2 <HAL_I2C_Mem_Read+0x31e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a16:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002a18:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002a1e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002a20:	3b01      	subs	r3, #1
 8002a22:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002a24:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a2e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d03b      	beq.n	8002aac <HAL_I2C_Mem_Read+0x328>
      if (hi2c->XferSize <= 3U)
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d8cd      	bhi.n	80029d4 <HAL_I2C_Mem_Read+0x250>
        if (hi2c->XferSize == 1U)
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	f43f af3f 	beq.w	80028bc <HAL_I2C_Mem_Read+0x138>
        else if (hi2c->XferSize == 2U)
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	f47f af54 	bne.w	80028ec <HAL_I2C_Mem_Read+0x168>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a44:	9500      	str	r5, [sp, #0]
 8002a46:	4633      	mov	r3, r6
 8002a48:	2200      	movs	r2, #0
 8002a4a:	4924      	ldr	r1, [pc, #144]	@ (8002adc <HAL_I2C_Mem_Read+0x358>)
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7ff fa7d 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8002a52:	2800      	cmp	r0, #0
 8002a54:	d13b      	bne.n	8002ace <HAL_I2C_Mem_Read+0x34a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a56:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	6822      	ldr	r2, [r4, #0]
 8002a5a:	6813      	ldr	r3, [r2, #0]
 8002a5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a60:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a68:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002a6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002a70:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002a76:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a80:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a88:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002a8a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002a90:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002a92:	3b01      	subs	r3, #1
 8002a94:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002a96:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002aa0:	e7c5      	b.n	8002a2e <HAL_I2C_Mem_Read+0x2aa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e7b1      	b.n	8002a10 <HAL_I2C_Mem_Read+0x28c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002aac:	2320      	movs	r3, #32
 8002aae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002ab8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8002abc:	e675      	b.n	80027aa <HAL_I2C_Mem_Read+0x26>
      return HAL_BUSY;
 8002abe:	2702      	movs	r7, #2
 8002ac0:	e673      	b.n	80027aa <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 8002ac2:	2702      	movs	r7, #2
 8002ac4:	e671      	b.n	80027aa <HAL_I2C_Mem_Read+0x26>
      return HAL_ERROR;
 8002ac6:	2701      	movs	r7, #1
 8002ac8:	e66f      	b.n	80027aa <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8002aca:	2701      	movs	r7, #1
 8002acc:	e66d      	b.n	80027aa <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8002ace:	2701      	movs	r7, #1
 8002ad0:	e66b      	b.n	80027aa <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8002ad2:	2701      	movs	r7, #1
 8002ad4:	e669      	b.n	80027aa <HAL_I2C_Mem_Read+0x26>
          return HAL_ERROR;
 8002ad6:	2701      	movs	r7, #1
 8002ad8:	e667      	b.n	80027aa <HAL_I2C_Mem_Read+0x26>
 8002ada:	bf00      	nop
 8002adc:	00010004 	.word	0x00010004

08002ae0 <HAL_I2C_IsDeviceReady>:
{
 8002ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	4688      	mov	r8, r1
 8002aea:	4691      	mov	r9, r2
 8002aec:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8002aee:	f7fe fd8b 	bl	8001608 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af2:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d003      	beq.n	8002b04 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8002afc:	2002      	movs	r0, #2
}
 8002afe:	b005      	add	sp, #20
 8002b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b04:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b06:	9000      	str	r0, [sp, #0]
 8002b08:	2319      	movs	r3, #25
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4957      	ldr	r1, [pc, #348]	@ (8002c6c <HAL_I2C_IsDeviceReady+0x18c>)
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f7ff fa1c 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8002b14:	2800      	cmp	r0, #0
 8002b16:	f040 80a0 	bne.w	8002c5a <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8002b1a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	f000 809d 	beq.w	8002c5e <HAL_I2C_IsDeviceReady+0x17e>
 8002b24:	2301      	movs	r3, #1
 8002b26:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	f012 0f01 	tst.w	r2, #1
 8002b32:	d103      	bne.n	8002b3c <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b3c:	6822      	ldr	r2, [r4, #0]
 8002b3e:	6813      	ldr	r3, [r2, #0]
 8002b40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b44:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b46:	2324      	movs	r3, #36	@ 0x24
 8002b48:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	2700      	movs	r7, #0
 8002b4e:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b50:	4b47      	ldr	r3, [pc, #284]	@ (8002c70 <HAL_I2C_IsDeviceReady+0x190>)
 8002b52:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b54:	e040      	b.n	8002bd8 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002b5e:	d002      	beq.n	8002b66 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b64:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8002b66:	2003      	movs	r0, #3
 8002b68:	e7c9      	b.n	8002afe <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b6a:	23a0      	movs	r3, #160	@ 0xa0
 8002b6c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b70:	6822      	ldr	r2, [r4, #0]
 8002b72:	6953      	ldr	r3, [r2, #20]
 8002b74:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b78:	6952      	ldr	r2, [r2, #20]
 8002b7a:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b7e:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 8002b82:	fa5f fc8c 	uxtb.w	ip, ip
 8002b86:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8002b8a:	d009      	beq.n	8002ba0 <HAL_I2C_IsDeviceReady+0xc0>
 8002b8c:	b943      	cbnz	r3, 8002ba0 <HAL_I2C_IsDeviceReady+0xc0>
 8002b8e:	b93a      	cbnz	r2, 8002ba0 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b90:	f7fe fd3a 	bl	8001608 <HAL_GetTick>
 8002b94:	1b80      	subs	r0, r0, r6
 8002b96:	42a8      	cmp	r0, r5
 8002b98:	d8e7      	bhi.n	8002b6a <HAL_I2C_IsDeviceReady+0x8a>
 8002b9a:	2d00      	cmp	r5, #0
 8002b9c:	d1e8      	bne.n	8002b70 <HAL_I2C_IsDeviceReady+0x90>
 8002b9e:	e7e4      	b.n	8002b6a <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	2320      	movs	r3, #32
 8002ba2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	f012 0f02 	tst.w	r2, #2
 8002bae:	d131      	bne.n	8002c14 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bbe:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bc0:	9600      	str	r6, [sp, #0]
 8002bc2:	2319      	movs	r3, #25
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	4929      	ldr	r1, [pc, #164]	@ (8002c6c <HAL_I2C_IsDeviceReady+0x18c>)
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7ff f9bf 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	d149      	bne.n	8002c66 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8002bd2:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8002bd4:	454f      	cmp	r7, r9
 8002bd6:	d238      	bcs.n	8002c4a <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd8:	6822      	ldr	r2, [r4, #0]
 8002bda:	6813      	ldr	r3, [r2, #0]
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be0:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002be2:	9600      	str	r6, [sp, #0]
 8002be4:	462b      	mov	r3, r5
 8002be6:	2200      	movs	r2, #0
 8002be8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7ff f9ad 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	d1af      	bne.n	8002b56 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 8002bfc:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8002bfe:	f7fe fd03 	bl	8001608 <HAL_GetTick>
 8002c02:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c04:	6822      	ldr	r2, [r4, #0]
 8002c06:	6953      	ldr	r3, [r2, #20]
 8002c08:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c0c:	6952      	ldr	r2, [r2, #20]
 8002c0e:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c12:	e7b4      	b.n	8002b7e <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c1a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9303      	str	r3, [sp, #12]
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	9203      	str	r2, [sp, #12]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	9303      	str	r3, [sp, #12]
 8002c2a:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c2c:	9600      	str	r6, [sp, #0]
 8002c2e:	2319      	movs	r3, #25
 8002c30:	2201      	movs	r2, #1
 8002c32:	490e      	ldr	r1, [pc, #56]	@ (8002c6c <HAL_I2C_IsDeviceReady+0x18c>)
 8002c34:	4620      	mov	r0, r4
 8002c36:	f7ff f989 	bl	8001f4c <I2C_WaitOnFlagUntilTimeout>
 8002c3a:	b990      	cbnz	r0, 8002c62 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 8002c42:	2300      	movs	r3, #0
 8002c44:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 8002c48:	e759      	b.n	8002afe <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8002c50:	2300      	movs	r3, #0
 8002c52:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8002c56:	2001      	movs	r0, #1
 8002c58:	e751      	b.n	8002afe <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8002c5a:	2002      	movs	r0, #2
 8002c5c:	e74f      	b.n	8002afe <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8002c5e:	2002      	movs	r0, #2
 8002c60:	e74d      	b.n	8002afe <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8002c62:	2001      	movs	r0, #1
 8002c64:	e74b      	b.n	8002afe <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8002c66:	2001      	movs	r0, #1
 8002c68:	e749      	b.n	8002afe <HAL_I2C_IsDeviceReady+0x1e>
 8002c6a:	bf00      	nop
 8002c6c:	00100002 	.word	0x00100002
 8002c70:	ffff0000 	.word	0xffff0000

08002c74 <HAL_I2C_MasterTxCpltCallback>:
}
 8002c74:	4770      	bx	lr

08002c76 <HAL_I2C_MasterRxCpltCallback>:
}
 8002c76:	4770      	bx	lr

08002c78 <HAL_I2C_SlaveTxCpltCallback>:
}
 8002c78:	4770      	bx	lr

08002c7a <I2C_SlaveTransmit_TXE>:
{
 8002c7a:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c7c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002c80:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8002c82:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	b183      	cbz	r3, 8002caa <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c88:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8002c8a:	6803      	ldr	r3, [r0, #0]
 8002c8c:	7809      	ldrb	r1, [r1, #0]
 8002c8e:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8002c90:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002c92:	3301      	adds	r3, #1
 8002c94:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8002c96:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	8543      	strh	r3, [r0, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ca0:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	b90b      	cbnz	r3, 8002caa <I2C_SlaveTransmit_TXE+0x30>
 8002ca6:	2a29      	cmp	r2, #41	@ 0x29
 8002ca8:	d000      	beq.n	8002cac <I2C_SlaveTransmit_TXE+0x32>
}
 8002caa:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cac:	6802      	ldr	r2, [r0, #0]
 8002cae:	6853      	ldr	r3, [r2, #4]
 8002cb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cb4:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cb6:	2321      	movs	r3, #33	@ 0x21
 8002cb8:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cba:	2328      	movs	r3, #40	@ 0x28
 8002cbc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cc0:	f7ff ffda 	bl	8002c78 <HAL_I2C_SlaveTxCpltCallback>
}
 8002cc4:	e7f1      	b.n	8002caa <I2C_SlaveTransmit_TXE+0x30>

08002cc6 <HAL_I2C_SlaveRxCpltCallback>:
}
 8002cc6:	4770      	bx	lr

08002cc8 <I2C_SlaveReceive_RXNE>:
{
 8002cc8:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002cce:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8002cd0:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	b183      	cbz	r3, 8002cf8 <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd6:	6803      	ldr	r3, [r0, #0]
 8002cd8:	6919      	ldr	r1, [r3, #16]
 8002cda:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002cdc:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8002cde:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8002ce4:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	8543      	strh	r3, [r0, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cee:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	b90b      	cbnz	r3, 8002cf8 <I2C_SlaveReceive_RXNE+0x30>
 8002cf4:	2a2a      	cmp	r2, #42	@ 0x2a
 8002cf6:	d000      	beq.n	8002cfa <I2C_SlaveReceive_RXNE+0x32>
}
 8002cf8:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cfa:	6802      	ldr	r2, [r0, #0]
 8002cfc:	6853      	ldr	r3, [r2, #4]
 8002cfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d02:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d04:	2322      	movs	r3, #34	@ 0x22
 8002d06:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d08:	2328      	movs	r3, #40	@ 0x28
 8002d0a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d0e:	f7ff ffda 	bl	8002cc6 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d12:	e7f1      	b.n	8002cf8 <I2C_SlaveReceive_RXNE+0x30>

08002d14 <HAL_I2C_AddrCallback>:
}
 8002d14:	4770      	bx	lr

08002d16 <I2C_Slave_ADDR>:
{
 8002d16:	b500      	push	{lr}
 8002d18:	b083      	sub	sp, #12
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d1a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002d1e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d22:	2b28      	cmp	r3, #40	@ 0x28
 8002d24:	d00c      	beq.n	8002d40 <I2C_Slave_ADDR+0x2a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d26:	2300      	movs	r3, #0
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	6802      	ldr	r2, [r0, #0]
 8002d2c:	6951      	ldr	r1, [r2, #20]
 8002d2e:	9101      	str	r1, [sp, #4]
 8002d30:	6992      	ldr	r2, [r2, #24]
 8002d32:	9201      	str	r2, [sp, #4]
 8002d34:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 8002d36:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
}
 8002d3a:	b003      	add	sp, #12
 8002d3c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d40:	6802      	ldr	r2, [r0, #0]
 8002d42:	6853      	ldr	r3, [r2, #4]
 8002d44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d48:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d4a:	f011 0f04 	tst.w	r1, #4
 8002d4e:	d00b      	beq.n	8002d68 <I2C_Slave_ADDR+0x52>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d50:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d52:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8002d56:	d109      	bne.n	8002d6c <I2C_Slave_ADDR+0x56>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d58:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d60:	4619      	mov	r1, r3
 8002d62:	f7ff ffd7 	bl	8002d14 <HAL_I2C_AddrCallback>
 8002d66:	e7e8      	b.n	8002d3a <I2C_Slave_ADDR+0x24>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e7f2      	b.n	8002d52 <I2C_Slave_ADDR+0x3c>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d6c:	8b02      	ldrh	r2, [r0, #24]
 8002d6e:	e7f4      	b.n	8002d5a <I2C_Slave_ADDR+0x44>

08002d70 <HAL_I2C_ListenCpltCallback>:
}
 8002d70:	4770      	bx	lr
	...

08002d74 <I2C_Slave_AF>:
{
 8002d74:	b510      	push	{r4, lr}
 8002d76:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d78:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d7e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002d80:	2a08      	cmp	r2, #8
 8002d82:	d001      	beq.n	8002d88 <I2C_Slave_AF+0x14>
 8002d84:	2a20      	cmp	r2, #32
 8002d86:	d101      	bne.n	8002d8c <I2C_Slave_AF+0x18>
 8002d88:	2b28      	cmp	r3, #40	@ 0x28
 8002d8a:	d006      	beq.n	8002d9a <I2C_Slave_AF+0x26>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d8c:	2b21      	cmp	r3, #33	@ 0x21
 8002d8e:	d01f      	beq.n	8002dd0 <I2C_Slave_AF+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d96:	615a      	str	r2, [r3, #20]
}
 8002d98:	bd10      	pop	{r4, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e10 <I2C_Slave_AF+0x9c>)
 8002d9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d9e:	6822      	ldr	r2, [r4, #0]
 8002da0:	6853      	ldr	r3, [r2, #4]
 8002da2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002da6:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dae:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db0:	6822      	ldr	r2, [r4, #0]
 8002db2:	6813      	ldr	r3, [r2, #0]
 8002db4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002db8:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002dc4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f7ff ffd1 	bl	8002d70 <HAL_I2C_ListenCpltCallback>
 8002dce:	e7e3      	b.n	8002d98 <I2C_Slave_AF+0x24>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e10 <I2C_Slave_AF+0x9c>)
 8002dd2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dd4:	2321      	movs	r3, #33	@ 0x21
 8002dd6:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002dd8:	2320      	movs	r3, #32
 8002dda:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002dde:	2300      	movs	r3, #0
 8002de0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002de4:	6822      	ldr	r2, [r4, #0]
 8002de6:	6853      	ldr	r3, [r2, #4]
 8002de8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002dec:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002df4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df6:	6822      	ldr	r2, [r4, #0]
 8002df8:	6813      	ldr	r3, [r2, #0]
 8002dfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002dfe:	6013      	str	r3, [r2, #0]
    I2C_Flush_DR(hi2c);
 8002e00:	4620      	mov	r0, r4
 8002e02:	f7fe fea2 	bl	8001b4a <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e06:	4620      	mov	r0, r4
 8002e08:	f7ff ff36 	bl	8002c78 <HAL_I2C_SlaveTxCpltCallback>
 8002e0c:	e7c4      	b.n	8002d98 <I2C_Slave_AF+0x24>
 8002e0e:	bf00      	nop
 8002e10:	ffff0000 	.word	0xffff0000

08002e14 <HAL_I2C_MemTxCpltCallback>:
}
 8002e14:	4770      	bx	lr

08002e16 <I2C_MasterTransmit_BTF>:
{
 8002e16:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e18:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e1a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b21      	cmp	r3, #33	@ 0x21
 8002e22:	d000      	beq.n	8002e26 <I2C_MasterTransmit_BTF+0x10>
}
 8002e24:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 8002e26:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	b163      	cbz	r3, 8002e46 <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e2c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8002e2e:	6803      	ldr	r3, [r0, #0]
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002e34:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002e36:	3301      	adds	r3, #1
 8002e38:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 8002e3a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8002e44:	e7ee      	b.n	8002e24 <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e46:	2a08      	cmp	r2, #8
 8002e48:	d004      	beq.n	8002e54 <I2C_MasterTransmit_BTF+0x3e>
 8002e4a:	2a20      	cmp	r2, #32
 8002e4c:	d002      	beq.n	8002e54 <I2C_MasterTransmit_BTF+0x3e>
 8002e4e:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8002e52:	d119      	bne.n	8002e88 <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e54:	6802      	ldr	r2, [r0, #0]
 8002e56:	6853      	ldr	r3, [r2, #4]
 8002e58:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e5c:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5e:	6802      	ldr	r2, [r0, #0]
 8002e60:	6813      	ldr	r3, [r2, #0]
 8002e62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e66:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	6303      	str	r3, [r0, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e72:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b40      	cmp	r3, #64	@ 0x40
 8002e7a:	d015      	beq.n	8002ea8 <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e82:	f7ff fef7 	bl	8002c74 <HAL_I2C_MasterTxCpltCallback>
}
 8002e86:	e7cd      	b.n	8002e24 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e88:	6802      	ldr	r2, [r0, #0]
 8002e8a:	6853      	ldr	r3, [r2, #4]
 8002e8c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e90:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e92:	2311      	movs	r3, #17
 8002e94:	6303      	str	r3, [r0, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ea2:	f7ff fee7 	bl	8002c74 <HAL_I2C_MasterTxCpltCallback>
 8002ea6:	e7bd      	b.n	8002e24 <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002eae:	f7ff ffb1 	bl	8002e14 <HAL_I2C_MemTxCpltCallback>
 8002eb2:	e7b7      	b.n	8002e24 <I2C_MasterTransmit_BTF+0xe>

08002eb4 <I2C_MemoryTransmit_TXE_BTF>:
{
 8002eb4:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002eb6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
  if (hi2c->EventCount == 0U)
 8002eba:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002ebc:	b99a      	cbnz	r2, 8002ee6 <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002ebe:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d008      	beq.n	8002ed6 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ec4:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002ec6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8002eca:	6802      	ldr	r2, [r0, #0]
 8002ecc:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8002ece:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8002ed4:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ed6:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002ed8:	6802      	ldr	r2, [r0, #0]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8002ede:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	6503      	str	r3, [r0, #80]	@ 0x50
 8002ee4:	e7f6      	b.n	8002ed4 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8002ee6:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 8002ee8:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002eea:	2a01      	cmp	r2, #1
 8002eec:	d023      	beq.n	8002f36 <I2C_MemoryTransmit_TXE_BTF+0x82>
  else if (hi2c->EventCount == 2U)
 8002eee:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002ef0:	2a02      	cmp	r2, #2
 8002ef2:	d13e      	bne.n	8002f72 <I2C_MemoryTransmit_TXE_BTF+0xbe>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ef4:	2b22      	cmp	r3, #34	@ 0x22
 8002ef6:	d026      	beq.n	8002f46 <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ef8:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 8002efa:	b292      	uxth	r2, r2
 8002efc:	b10a      	cbz	r2, 8002f02 <I2C_MemoryTransmit_TXE_BTF+0x4e>
 8002efe:	2b21      	cmp	r3, #33	@ 0x21
 8002f00:	d02a      	beq.n	8002f58 <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f02:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 8002f04:	b292      	uxth	r2, r2
 8002f06:	2a00      	cmp	r2, #0
 8002f08:	d1e4      	bne.n	8002ed4 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8002f0a:	2b21      	cmp	r3, #33	@ 0x21
 8002f0c:	d1e2      	bne.n	8002ed4 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f0e:	6802      	ldr	r2, [r0, #0]
 8002f10:	6853      	ldr	r3, [r2, #4]
 8002f12:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f16:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f18:	6802      	ldr	r2, [r0, #0]
 8002f1a:	6813      	ldr	r3, [r2, #0]
 8002f1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f20:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f26:	2220      	movs	r2, #32
 8002f28:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f30:	f7ff ff70 	bl	8002e14 <HAL_I2C_MemTxCpltCallback>
 8002f34:	e7ce      	b.n	8002ed4 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f36:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002f38:	6802      	ldr	r2, [r0, #0]
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 8002f3e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002f40:	3301      	adds	r3, #1
 8002f42:	6503      	str	r3, [r0, #80]	@ 0x50
 8002f44:	e7c6      	b.n	8002ed4 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002f46:	6802      	ldr	r2, [r0, #0]
 8002f48:	6813      	ldr	r3, [r2, #0]
 8002f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f4e:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8002f50:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002f52:	3301      	adds	r3, #1
 8002f54:	6503      	str	r3, [r0, #80]	@ 0x50
 8002f56:	e7bd      	b.n	8002ed4 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f58:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8002f5a:	6803      	ldr	r3, [r0, #0]
 8002f5c:	7812      	ldrb	r2, [r2, #0]
 8002f5e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002f60:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002f62:	3301      	adds	r3, #1
 8002f64:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 8002f66:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8002f70:	e7b0      	b.n	8002ed4 <I2C_MemoryTransmit_TXE_BTF+0x20>
    I2C_Flush_DR(hi2c);
 8002f72:	f7fe fdea 	bl	8001b4a <I2C_Flush_DR>
}
 8002f76:	e7ad      	b.n	8002ed4 <I2C_MemoryTransmit_TXE_BTF+0x20>

08002f78 <I2C_MasterTransmit_TXE>:
{
 8002f78:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f7a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002f7e:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f80:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 8002f84:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f86:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f88:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d13b      	bne.n	8003006 <I2C_MasterTransmit_TXE+0x8e>
 8002f8e:	2b21      	cmp	r3, #33	@ 0x21
 8002f90:	d002      	beq.n	8002f98 <I2C_MasterTransmit_TXE+0x20>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f92:	2a40      	cmp	r2, #64	@ 0x40
 8002f94:	d042      	beq.n	800301c <I2C_MasterTransmit_TXE+0xa4>
}
 8002f96:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f98:	2c08      	cmp	r4, #8
 8002f9a:	d004      	beq.n	8002fa6 <I2C_MasterTransmit_TXE+0x2e>
 8002f9c:	2c20      	cmp	r4, #32
 8002f9e:	d002      	beq.n	8002fa6 <I2C_MasterTransmit_TXE+0x2e>
 8002fa0:	f514 3f80 	cmn.w	r4, #65536	@ 0x10000
 8002fa4:	d119      	bne.n	8002fda <I2C_MasterTransmit_TXE+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fa6:	6802      	ldr	r2, [r0, #0]
 8002fa8:	6853      	ldr	r3, [r2, #4]
 8002faa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002fae:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	6802      	ldr	r2, [r0, #0]
 8002fb2:	6813      	ldr	r3, [r2, #0]
 8002fb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fb8:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fc4:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b40      	cmp	r3, #64	@ 0x40
 8002fcc:	d015      	beq.n	8002ffa <I2C_MasterTransmit_TXE+0x82>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fd4:	f7ff fe4e 	bl	8002c74 <HAL_I2C_MasterTxCpltCallback>
 8002fd8:	e7dd      	b.n	8002f96 <I2C_MasterTransmit_TXE+0x1e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fda:	6802      	ldr	r2, [r0, #0]
 8002fdc:	6853      	ldr	r3, [r2, #4]
 8002fde:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002fe2:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fe4:	2311      	movs	r3, #17
 8002fe6:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	2320      	movs	r3, #32
 8002ff0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ff4:	f7ff fe3e 	bl	8002c74 <HAL_I2C_MasterTxCpltCallback>
 8002ff8:	e7cd      	b.n	8002f96 <I2C_MasterTransmit_TXE+0x1e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003000:	f7ff ff08 	bl	8002e14 <HAL_I2C_MemTxCpltCallback>
 8003004:	e7c7      	b.n	8002f96 <I2C_MasterTransmit_TXE+0x1e>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003006:	2b21      	cmp	r3, #33	@ 0x21
 8003008:	d1c3      	bne.n	8002f92 <I2C_MasterTransmit_TXE+0x1a>
    if (hi2c->XferCount == 0U)
 800300a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	b943      	cbnz	r3, 8003022 <I2C_MasterTransmit_TXE+0xaa>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003010:	6802      	ldr	r2, [r0, #0]
 8003012:	6853      	ldr	r3, [r2, #4]
 8003014:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003018:	6053      	str	r3, [r2, #4]
 800301a:	e7bc      	b.n	8002f96 <I2C_MasterTransmit_TXE+0x1e>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800301c:	2b22      	cmp	r3, #34	@ 0x22
 800301e:	d1ba      	bne.n	8002f96 <I2C_MasterTransmit_TXE+0x1e>
 8003020:	e7f3      	b.n	800300a <I2C_MasterTransmit_TXE+0x92>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003022:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b40      	cmp	r3, #64	@ 0x40
 800302a:	d00c      	beq.n	8003046 <I2C_MasterTransmit_TXE+0xce>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800302c:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800302e:	6803      	ldr	r3, [r0, #0]
 8003030:	7812      	ldrb	r2, [r2, #0]
 8003032:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003034:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003036:	3301      	adds	r3, #1
 8003038:	6243      	str	r3, [r0, #36]	@ 0x24
        hi2c->XferCount--;
 800303a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29b      	uxth	r3, r3
 8003042:	8543      	strh	r3, [r0, #42]	@ 0x2a
}
 8003044:	e7a7      	b.n	8002f96 <I2C_MasterTransmit_TXE+0x1e>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003046:	f7ff ff35 	bl	8002eb4 <I2C_MemoryTransmit_TXE_BTF>
 800304a:	e7a4      	b.n	8002f96 <I2C_MasterTransmit_TXE+0x1e>

0800304c <HAL_I2C_MemRxCpltCallback>:
}
 800304c:	4770      	bx	lr

0800304e <I2C_MasterReceive_BTF>:
{
 800304e:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003050:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 8003052:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b04      	cmp	r3, #4
 8003058:	d014      	beq.n	8003084 <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 800305a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b03      	cmp	r3, #3
 8003060:	d022      	beq.n	80030a8 <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 8003062:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d039      	beq.n	80030de <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306a:	6803      	ldr	r3, [r0, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003070:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003072:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003074:	3301      	adds	r3, #1
 8003076:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8003078:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	8543      	strh	r3, [r0, #42]	@ 0x2a
}
 8003082:	e010      	b.n	80030a6 <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003084:	6802      	ldr	r2, [r0, #0]
 8003086:	6853      	ldr	r3, [r2, #4]
 8003088:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800308c:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308e:	6803      	ldr	r3, [r0, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003094:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003096:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003098:	3301      	adds	r3, #1
 800309a:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 800309c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	8543      	strh	r3, [r0, #42]	@ 0x2a
}
 80030a6:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030a8:	6801      	ldr	r1, [r0, #0]
 80030aa:	684b      	ldr	r3, [r1, #4]
 80030ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030b0:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80030b2:	2a04      	cmp	r2, #4
 80030b4:	d006      	beq.n	80030c4 <I2C_MasterReceive_BTF+0x76>
 80030b6:	2a02      	cmp	r2, #2
 80030b8:	d004      	beq.n	80030c4 <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ba:	6802      	ldr	r2, [r0, #0]
 80030bc:	6813      	ldr	r3, [r2, #0]
 80030be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030c2:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c4:	6803      	ldr	r3, [r0, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80030ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030cc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80030ce:	3301      	adds	r3, #1
 80030d0:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 80030d2:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29b      	uxth	r3, r3
 80030da:	8543      	strh	r3, [r0, #42]	@ 0x2a
 80030dc:	e7e3      	b.n	80030a6 <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80030de:	1e53      	subs	r3, r2, #1
 80030e0:	2b0f      	cmp	r3, #15
 80030e2:	d842      	bhi.n	800316a <I2C_MasterReceive_BTF+0x11c>
 80030e4:	e8df f003 	tbb	[pc, r3]
 80030e8:	3b413b08 	.word	0x3b413b08
 80030ec:	41414141 	.word	0x41414141
 80030f0:	41414141 	.word	0x41414141
 80030f4:	08414141 	.word	0x08414141
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f8:	6801      	ldr	r1, [r0, #0]
 80030fa:	680b      	ldr	r3, [r1, #0]
 80030fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003100:	600b      	str	r3, [r1, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003102:	6803      	ldr	r3, [r0, #0]
 8003104:	6919      	ldr	r1, [r3, #16]
 8003106:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003108:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 800310a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800310c:	1c4b      	adds	r3, r1, #1
 800310e:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8003110:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29b      	uxth	r3, r3
 8003118:	8543      	strh	r3, [r0, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311a:	6803      	ldr	r3, [r0, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 8003120:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003122:	3301      	adds	r3, #1
 8003124:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8003126:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29b      	uxth	r3, r3
 800312e:	8543      	strh	r3, [r0, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003130:	6801      	ldr	r1, [r0, #0]
 8003132:	684b      	ldr	r3, [r1, #4]
 8003134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003138:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800313a:	2320      	movs	r3, #32
 800313c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003140:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b40      	cmp	r3, #64	@ 0x40
 8003148:	d015      	beq.n	8003176 <I2C_MasterReceive_BTF+0x128>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800314a:	2300      	movs	r3, #0
 800314c:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003150:	2a08      	cmp	r2, #8
 8003152:	d017      	beq.n	8003184 <I2C_MasterReceive_BTF+0x136>
 8003154:	2a20      	cmp	r2, #32
 8003156:	d015      	beq.n	8003184 <I2C_MasterReceive_BTF+0x136>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003158:	2312      	movs	r3, #18
 800315a:	6303      	str	r3, [r0, #48]	@ 0x30
 800315c:	e014      	b.n	8003188 <I2C_MasterReceive_BTF+0x13a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315e:	6801      	ldr	r1, [r0, #0]
 8003160:	680b      	ldr	r3, [r1, #0]
 8003162:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003166:	600b      	str	r3, [r1, #0]
 8003168:	e7cb      	b.n	8003102 <I2C_MasterReceive_BTF+0xb4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316a:	6801      	ldr	r1, [r0, #0]
 800316c:	680b      	ldr	r3, [r1, #0]
 800316e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003172:	600b      	str	r3, [r1, #0]
 8003174:	e7c5      	b.n	8003102 <I2C_MasterReceive_BTF+0xb4>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003176:	2300      	movs	r3, #0
 8003178:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800317c:	6303      	str	r3, [r0, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800317e:	f7ff ff65 	bl	800304c <HAL_I2C_MemRxCpltCallback>
 8003182:	e790      	b.n	80030a6 <I2C_MasterReceive_BTF+0x58>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003184:	2300      	movs	r3, #0
 8003186:	6303      	str	r3, [r0, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003188:	f7ff fd75 	bl	8002c76 <HAL_I2C_MasterRxCpltCallback>
 800318c:	e78b      	b.n	80030a6 <I2C_MasterReceive_BTF+0x58>

0800318e <HAL_I2C_ErrorCallback>:
}
 800318e:	4770      	bx	lr

08003190 <I2C_MasterReceive_RXNE>:
{
 8003190:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003192:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b22      	cmp	r3, #34	@ 0x22
 800319a:	d000      	beq.n	800319e <I2C_MasterReceive_RXNE+0xe>
}
 800319c:	bd38      	pop	{r3, r4, r5, pc}
 800319e:	4604      	mov	r4, r0
    CurrentXferOptions = hi2c->XferOptions;
 80031a0:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
    tmp = hi2c->XferCount;
 80031a2:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80031a4:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d915      	bls.n	80031d6 <I2C_MasterReceive_RXNE+0x46>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031aa:	6803      	ldr	r3, [r0, #0]
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80031b0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80031b2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80031b4:	3301      	adds	r3, #1
 80031b6:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 80031b8:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29b      	uxth	r3, r3
 80031c0:	8543      	strh	r3, [r0, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80031c2:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d1e8      	bne.n	800319c <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031ca:	6802      	ldr	r2, [r0, #0]
 80031cc:	6853      	ldr	r3, [r2, #4]
 80031ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031d2:	6053      	str	r3, [r2, #4]
 80031d4:	e7e2      	b.n	800319c <I2C_MasterReceive_RXNE+0xc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80031d6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80031d8:	2a02      	cmp	r2, #2
 80031da:	d001      	beq.n	80031e0 <I2C_MasterReceive_RXNE+0x50>
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d905      	bls.n	80031ec <I2C_MasterReceive_RXNE+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031e0:	6822      	ldr	r2, [r4, #0]
 80031e2:	6853      	ldr	r3, [r2, #4]
 80031e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031e8:	6053      	str	r3, [r2, #4]
}
 80031ea:	e7d7      	b.n	800319c <I2C_MasterReceive_RXNE+0xc>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031ec:	f7fe fe62 	bl	8001eb4 <I2C_WaitOnSTOPRequestThroughIT>
 80031f0:	2800      	cmp	r0, #0
 80031f2:	d135      	bne.n	8003260 <I2C_MasterReceive_RXNE+0xd0>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f4:	6822      	ldr	r2, [r4, #0]
 80031f6:	6813      	ldr	r3, [r2, #0]
 80031f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031fc:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031fe:	6822      	ldr	r2, [r4, #0]
 8003200:	6853      	ldr	r3, [r2, #4]
 8003202:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003206:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800320e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003210:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003212:	3301      	adds	r3, #1
 8003214:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003216:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29b      	uxth	r3, r3
 800321e:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003220:	2320      	movs	r3, #32
 8003222:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003226:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b40      	cmp	r3, #64	@ 0x40
 800322e:	d009      	beq.n	8003244 <I2C_MasterReceive_RXNE+0xb4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003230:	2300      	movs	r3, #0
 8003232:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003236:	2d08      	cmp	r5, #8
 8003238:	d00c      	beq.n	8003254 <I2C_MasterReceive_RXNE+0xc4>
 800323a:	2d20      	cmp	r5, #32
 800323c:	d00a      	beq.n	8003254 <I2C_MasterReceive_RXNE+0xc4>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800323e:	2312      	movs	r3, #18
 8003240:	6323      	str	r3, [r4, #48]	@ 0x30
 8003242:	e009      	b.n	8003258 <I2C_MasterReceive_RXNE+0xc8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003244:	2300      	movs	r3, #0
 8003246:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800324a:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800324c:	4620      	mov	r0, r4
 800324e:	f7ff fefd 	bl	800304c <HAL_I2C_MemRxCpltCallback>
 8003252:	e7a3      	b.n	800319c <I2C_MasterReceive_RXNE+0xc>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003254:	2300      	movs	r3, #0
 8003256:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003258:	4620      	mov	r0, r4
 800325a:	f7ff fd0c 	bl	8002c76 <HAL_I2C_MasterRxCpltCallback>
 800325e:	e79d      	b.n	800319c <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003260:	6822      	ldr	r2, [r4, #0]
 8003262:	6853      	ldr	r3, [r2, #4]
 8003264:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003268:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003270:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003272:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003274:	3301      	adds	r3, #1
 8003276:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003278:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29b      	uxth	r3, r3
 8003280:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003282:	2320      	movs	r3, #32
 8003284:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003288:	2300      	movs	r3, #0
 800328a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800328e:	4620      	mov	r0, r4
 8003290:	f7ff ff7d 	bl	800318e <HAL_I2C_ErrorCallback>
 8003294:	e782      	b.n	800319c <I2C_MasterReceive_RXNE+0xc>

08003296 <HAL_I2C_AbortCpltCallback>:
}
 8003296:	4770      	bx	lr

08003298 <I2C_DMAAbort>:
{
 8003298:	b500      	push	{lr}
 800329a:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80032a0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032a2:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 80032a6:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80032a8:	4b32      	ldr	r3, [pc, #200]	@ (8003374 <I2C_DMAAbort+0xdc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	08db      	lsrs	r3, r3, #3
 80032ae:	4932      	ldr	r1, [pc, #200]	@ (8003378 <I2C_DMAAbort+0xe0>)
 80032b0:	fba1 1303 	umull	r1, r3, r1, r3
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80032ba:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80032be:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80032c0:	9b01      	ldr	r3, [sp, #4]
 80032c2:	b143      	cbz	r3, 80032d6 <I2C_DMAAbort+0x3e>
    count--;
 80032c4:	9b01      	ldr	r3, [sp, #4]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80032ca:	6803      	ldr	r3, [r0, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80032d2:	d1f5      	bne.n	80032c0 <I2C_DMAAbort+0x28>
 80032d4:	e003      	b.n	80032de <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032d6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80032d8:	f043 0320 	orr.w	r3, r3, #32
 80032dc:	6403      	str	r3, [r0, #64]	@ 0x40
  if (hi2c->hdmatx != NULL)
 80032de:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80032e0:	b10b      	cbz	r3, 80032e6 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80032e2:	2100      	movs	r1, #0
 80032e4:	6299      	str	r1, [r3, #40]	@ 0x28
  if (hi2c->hdmarx != NULL)
 80032e6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80032e8:	b10b      	cbz	r3, 80032ee <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 80032ea:	2100      	movs	r1, #0
 80032ec:	6299      	str	r1, [r3, #40]	@ 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ee:	6801      	ldr	r1, [r0, #0]
 80032f0:	680b      	ldr	r3, [r1, #0]
 80032f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032f6:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	8543      	strh	r3, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 80032fc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80032fe:	b10b      	cbz	r3, 8003304 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003300:	2100      	movs	r1, #0
 8003302:	6359      	str	r1, [r3, #52]	@ 0x34
  if (hi2c->hdmarx != NULL)
 8003304:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003306:	b10b      	cbz	r3, 800330c <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003308:	2100      	movs	r1, #0
 800330a:	6359      	str	r1, [r3, #52]	@ 0x34
  __HAL_I2C_DISABLE(hi2c);
 800330c:	6801      	ldr	r1, [r0, #0]
 800330e:	680b      	ldr	r3, [r1, #0]
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003316:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b60      	cmp	r3, #96	@ 0x60
 800331e:	d00e      	beq.n	800333e <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003320:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8003324:	2a28      	cmp	r2, #40	@ 0x28
 8003326:	d014      	beq.n	8003352 <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 8003328:	2320      	movs	r3, #32
 800332a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800332e:	2300      	movs	r3, #0
 8003330:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003334:	f7ff ff2b 	bl	800318e <HAL_I2C_ErrorCallback>
}
 8003338:	b003      	add	sp, #12
 800333a:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 800333e:	2320      	movs	r3, #32
 8003340:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003344:	2300      	movs	r3, #0
 8003346:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800334a:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800334c:	f7ff ffa3 	bl	8003296 <HAL_I2C_AbortCpltCallback>
 8003350:	e7f2      	b.n	8003338 <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 8003352:	6802      	ldr	r2, [r0, #0]
 8003354:	6813      	ldr	r3, [r2, #0]
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335c:	6802      	ldr	r2, [r0, #0]
 800335e:	6813      	ldr	r3, [r2, #0]
 8003360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003364:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003366:	2300      	movs	r3, #0
 8003368:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800336a:	2328      	movs	r3, #40	@ 0x28
 800336c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
 8003370:	e7e0      	b.n	8003334 <I2C_DMAAbort+0x9c>
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000
 8003378:	14f8b589 	.word	0x14f8b589

0800337c <I2C_ITError>:
{
 800337c:	b510      	push	{r4, lr}
 800337e:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003380:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003384:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003386:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 800338a:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800338c:	2a10      	cmp	r2, #16
 800338e:	d036      	beq.n	80033fe <I2C_ITError+0x82>
 8003390:	2a40      	cmp	r2, #64	@ 0x40
 8003392:	d034      	beq.n	80033fe <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003394:	f003 0228 	and.w	r2, r3, #40	@ 0x28
 8003398:	2a28      	cmp	r2, #40	@ 0x28
 800339a:	d038      	beq.n	800340e <I2C_ITError+0x92>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800339c:	6822      	ldr	r2, [r4, #0]
 800339e:	6852      	ldr	r2, [r2, #4]
 80033a0:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80033a4:	d107      	bne.n	80033b6 <I2C_ITError+0x3a>
 80033a6:	2b60      	cmp	r3, #96	@ 0x60
 80033a8:	d005      	beq.n	80033b6 <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	2320      	movs	r3, #32
 80033ac:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	6323      	str	r3, [r4, #48]	@ 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80033c2:	d048      	beq.n	8003456 <I2C_ITError+0xda>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ca:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80033cc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80033ce:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d020      	beq.n	800341a <I2C_ITError+0x9e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033d8:	4b44      	ldr	r3, [pc, #272]	@ (80034ec <I2C_ITError+0x170>)
 80033da:	6353      	str	r3, [r2, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033dc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80033de:	f7fe f9cb 	bl	8001778 <HAL_DMA_Abort_IT>
 80033e2:	2800      	cmp	r0, #0
 80033e4:	d049      	beq.n	800347a <I2C_ITError+0xfe>
        __HAL_I2C_DISABLE(hi2c);
 80033e6:	6822      	ldr	r2, [r4, #0]
 80033e8:	6813      	ldr	r3, [r2, #0]
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	2320      	movs	r3, #32
 80033f2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033f6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80033f8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80033fa:	4798      	blx	r3
 80033fc:	e03d      	b.n	800347a <I2C_ITError+0xfe>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033fe:	2b22      	cmp	r3, #34	@ 0x22
 8003400:	d1c8      	bne.n	8003394 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003402:	6821      	ldr	r1, [r4, #0]
 8003404:	680a      	ldr	r2, [r1, #0]
 8003406:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800340a:	600a      	str	r2, [r1, #0]
 800340c:	e7c2      	b.n	8003394 <I2C_ITError+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 800340e:	2300      	movs	r3, #0
 8003410:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003412:	2328      	movs	r3, #40	@ 0x28
 8003414:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 8003418:	e7cf      	b.n	80033ba <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800341a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800341c:	4a33      	ldr	r2, [pc, #204]	@ (80034ec <I2C_ITError+0x170>)
 800341e:	635a      	str	r2, [r3, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003420:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003422:	f7fe f9a9 	bl	8001778 <HAL_DMA_Abort_IT>
 8003426:	b340      	cbz	r0, 800347a <I2C_ITError+0xfe>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003430:	d005      	beq.n	800343e <I2C_ITError+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003436:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003438:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800343a:	3301      	adds	r3, #1
 800343c:	6263      	str	r3, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 800343e:	6822      	ldr	r2, [r4, #0]
 8003440:	6813      	ldr	r3, [r2, #0]
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003448:	2320      	movs	r3, #32
 800344a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800344e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003450:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003452:	4798      	blx	r3
 8003454:	e011      	b.n	800347a <I2C_ITError+0xfe>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003456:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	2a60      	cmp	r2, #96	@ 0x60
 800345e:	d01f      	beq.n	80034a0 <I2C_ITError+0x124>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003466:	d005      	beq.n	8003474 <I2C_ITError+0xf8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800346c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800346e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003470:	3301      	adds	r3, #1
 8003472:	6263      	str	r3, [r4, #36]	@ 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003474:	4620      	mov	r0, r4
 8003476:	f7ff fe8a 	bl	800318e <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 800347a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800347c:	f013 0f0f 	tst.w	r3, #15
 8003480:	d004      	beq.n	800348c <I2C_ITError+0x110>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	6853      	ldr	r3, [r2, #4]
 8003486:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800348a:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 800348c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003490:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003492:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003494:	f012 0f04 	tst.w	r2, #4
 8003498:	d001      	beq.n	800349e <I2C_ITError+0x122>
 800349a:	2b28      	cmp	r3, #40	@ 0x28
 800349c:	d018      	beq.n	80034d0 <I2C_ITError+0x154>
}
 800349e:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	2220      	movs	r2, #32
 80034a2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a6:	2200      	movs	r2, #0
 80034a8:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80034b0:	d005      	beq.n	80034be <I2C_ITError+0x142>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80034b6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80034b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80034ba:	3301      	adds	r3, #1
 80034bc:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 80034be:	6822      	ldr	r2, [r4, #0]
 80034c0:	6813      	ldr	r3, [r2, #0]
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80034c8:	4620      	mov	r0, r4
 80034ca:	f7ff fee4 	bl	8003296 <HAL_I2C_AbortCpltCallback>
 80034ce:	e7d4      	b.n	800347a <I2C_ITError+0xfe>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034d0:	4b07      	ldr	r3, [pc, #28]	@ (80034f0 <I2C_ITError+0x174>)
 80034d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80034d8:	2220      	movs	r2, #32
 80034da:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034de:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7ff fc44 	bl	8002d70 <HAL_I2C_ListenCpltCallback>
}
 80034e8:	e7d9      	b.n	800349e <I2C_ITError+0x122>
 80034ea:	bf00      	nop
 80034ec:	08003299 	.word	0x08003299
 80034f0:	ffff0000 	.word	0xffff0000

080034f4 <I2C_Slave_STOPF>:
{
 80034f4:	b530      	push	{r4, r5, lr}
 80034f6:	b083      	sub	sp, #12
 80034f8:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034fa:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 80034fe:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003500:	6802      	ldr	r2, [r0, #0]
 8003502:	6853      	ldr	r3, [r2, #4]
 8003504:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003508:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	6803      	ldr	r3, [r0, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	9201      	str	r2, [sp, #4]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351e:	6802      	ldr	r2, [r0, #0]
 8003520:	6813      	ldr	r3, [r2, #0]
 8003522:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003526:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003528:	6803      	ldr	r3, [r0, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8003530:	d038      	beq.n	80035a4 <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003532:	2d22      	cmp	r5, #34	@ 0x22
 8003534:	d021      	beq.n	800357a <I2C_Slave_STOPF+0x86>
 8003536:	2d2a      	cmp	r5, #42	@ 0x2a
 8003538:	d01f      	beq.n	800357a <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800353a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	6852      	ldr	r2, [r2, #4]
 8003540:	b292      	uxth	r2, r2
 8003542:	8542      	strh	r2, [r0, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8003544:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 8003546:	b292      	uxth	r2, r2
 8003548:	b11a      	cbz	r2, 8003552 <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800354a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800354c:	f042 0204 	orr.w	r2, r2, #4
 8003550:	6402      	str	r2, [r0, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003558:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800355a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800355c:	f7fe f958 	bl	8001810 <HAL_DMA_GetState>
 8003560:	2801      	cmp	r0, #1
 8003562:	d01f      	beq.n	80035a4 <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003564:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003566:	4a44      	ldr	r2, [pc, #272]	@ (8003678 <I2C_Slave_STOPF+0x184>)
 8003568:	635a      	str	r2, [r3, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800356a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800356c:	f7fe f904 	bl	8001778 <HAL_DMA_Abort_IT>
 8003570:	b1c0      	cbz	r0, 80035a4 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003572:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003574:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003576:	4798      	blx	r3
 8003578:	e014      	b.n	80035a4 <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800357a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	6852      	ldr	r2, [r2, #4]
 8003580:	b292      	uxth	r2, r2
 8003582:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8003584:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003586:	b292      	uxth	r2, r2
 8003588:	b11a      	cbz	r2, 8003592 <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800358a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800358c:	f042 0204 	orr.w	r2, r2, #4
 8003590:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003598:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800359a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800359c:	f7fe f938 	bl	8001810 <HAL_DMA_GetState>
 80035a0:	2801      	cmp	r0, #1
 80035a2:	d142      	bne.n	800362a <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 80035a4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	b333      	cbz	r3, 80035f8 <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	f012 0f04 	tst.w	r2, #4
 80035b2:	d00a      	beq.n	80035ca <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80035b8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80035ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80035bc:	3301      	adds	r3, #1
 80035be:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80035c0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80035d2:	d00a      	beq.n	80035ea <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80035d8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80035da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80035dc:	3301      	adds	r3, #1
 80035de:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80035e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80035ea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	b11b      	cbz	r3, 80035f8 <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035f2:	f043 0304 	orr.w	r3, r3, #4
 80035f6:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035fa:	bb13      	cbnz	r3, 8003642 <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80035fc:	2d2a      	cmp	r5, #42	@ 0x2a
 80035fe:	d025      	beq.n	800364c <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003600:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b28      	cmp	r3, #40	@ 0x28
 8003608:	d029      	beq.n	800365e <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800360a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800360c:	2b22      	cmp	r3, #34	@ 0x22
 800360e:	d001      	beq.n	8003614 <I2C_Slave_STOPF+0x120>
 8003610:	2d22      	cmp	r5, #34	@ 0x22
 8003612:	d119      	bne.n	8003648 <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003614:	2300      	movs	r3, #0
 8003616:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003618:	2220      	movs	r2, #32
 800361a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800361e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003622:	4620      	mov	r0, r4
 8003624:	f7ff fb4f 	bl	8002cc6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003628:	e00e      	b.n	8003648 <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800362a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800362c:	4a12      	ldr	r2, [pc, #72]	@ (8003678 <I2C_Slave_STOPF+0x184>)
 800362e:	635a      	str	r2, [r3, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003630:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003632:	f7fe f8a1 	bl	8001778 <HAL_DMA_Abort_IT>
 8003636:	2800      	cmp	r0, #0
 8003638:	d0b4      	beq.n	80035a4 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800363a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800363c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800363e:	4798      	blx	r3
 8003640:	e7b0      	b.n	80035a4 <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8003642:	4620      	mov	r0, r4
 8003644:	f7ff fe9a 	bl	800337c <I2C_ITError>
}
 8003648:	b003      	add	sp, #12
 800364a:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 800364c:	2300      	movs	r3, #0
 800364e:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003650:	2328      	movs	r3, #40	@ 0x28
 8003652:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003656:	4620      	mov	r0, r4
 8003658:	f7ff fb35 	bl	8002cc6 <HAL_I2C_SlaveRxCpltCallback>
 800365c:	e7d0      	b.n	8003600 <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800365e:	4b07      	ldr	r3, [pc, #28]	@ (800367c <I2C_Slave_STOPF+0x188>)
 8003660:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003662:	2300      	movs	r3, #0
 8003664:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003666:	2220      	movs	r2, #32
 8003668:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800366c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003670:	4620      	mov	r0, r4
 8003672:	f7ff fb7d 	bl	8002d70 <HAL_I2C_ListenCpltCallback>
 8003676:	e7e7      	b.n	8003648 <I2C_Slave_STOPF+0x154>
 8003678:	08003299 	.word	0x08003299
 800367c:	ffff0000 	.word	0xffff0000

08003680 <HAL_I2C_EV_IRQHandler>:
{
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003682:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003684:	6802      	ldr	r2, [r0, #0]
 8003686:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003688:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800368a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800368e:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003690:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
 8003694:	b2c8      	uxtb	r0, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003696:	2b10      	cmp	r3, #16
 8003698:	d013      	beq.n	80036c2 <HAL_I2C_EV_IRQHandler+0x42>
 800369a:	2b40      	cmp	r3, #64	@ 0x40
 800369c:	d011      	beq.n	80036c2 <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800369e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d07a      	beq.n	800379a <HAL_I2C_EV_IRQHandler+0x11a>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036a4:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 80036a6:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a8:	f013 0f02 	tst.w	r3, #2
 80036ac:	d078      	beq.n	80037a0 <HAL_I2C_EV_IRQHandler+0x120>
 80036ae:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80036b2:	d075      	beq.n	80037a0 <HAL_I2C_EV_IRQHandler+0x120>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036b6:	b103      	cbz	r3, 80036ba <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036b8:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80036ba:	4620      	mov	r0, r4
 80036bc:	f7ff fb2b 	bl	8002d16 <I2C_Slave_ADDR>
}
 80036c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036c2:	f8d2 c018 	ldr.w	ip, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036c6:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80036c8:	f011 0701 	ands.w	r7, r1, #1
 80036cc:	d105      	bne.n	80036da <HAL_I2C_EV_IRQHandler+0x5a>
 80036ce:	f5b6 0f2a 	cmp.w	r6, #11141120	@ 0xaa0000
 80036d2:	d0f5      	beq.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
 80036d4:	f1b6 4f2a 	cmp.w	r6, #2852126720	@ 0xaa000000
 80036d8:	d0f2      	beq.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036da:	b117      	cbz	r7, 80036e2 <HAL_I2C_EV_IRQHandler+0x62>
 80036dc:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80036e0:	d129      	bne.n	8003736 <HAL_I2C_EV_IRQHandler+0xb6>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036e2:	f011 0f08 	tst.w	r1, #8
 80036e6:	d002      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x6e>
 80036e8:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80036ec:	d12a      	bne.n	8003744 <HAL_I2C_EV_IRQHandler+0xc4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ee:	f011 0f02 	tst.w	r1, #2
 80036f2:	d002      	beq.n	80036fa <HAL_I2C_EV_IRQHandler+0x7a>
 80036f4:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80036f8:	d128      	bne.n	800374c <HAL_I2C_EV_IRQHandler+0xcc>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80036fa:	f01c 0f04 	tst.w	ip, #4
 80036fe:	d031      	beq.n	8003764 <HAL_I2C_EV_IRQHandler+0xe4>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003700:	6852      	ldr	r2, [r2, #4]
 8003702:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8003706:	d1db      	bne.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003708:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800370c:	d005      	beq.n	800371a <HAL_I2C_EV_IRQHandler+0x9a>
 800370e:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003712:	d002      	beq.n	800371a <HAL_I2C_EV_IRQHandler+0x9a>
 8003714:	f011 0f04 	tst.w	r1, #4
 8003718:	d01c      	beq.n	8003754 <HAL_I2C_EV_IRQHandler+0xd4>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800371a:	f011 0f04 	tst.w	r1, #4
 800371e:	d0cf      	beq.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
 8003720:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003724:	d0cc      	beq.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003726:	2821      	cmp	r0, #33	@ 0x21
 8003728:	d018      	beq.n	800375c <HAL_I2C_EV_IRQHandler+0xdc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800372a:	2b40      	cmp	r3, #64	@ 0x40
 800372c:	d1c8      	bne.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800372e:	4620      	mov	r0, r4
 8003730:	f7ff fbc0 	bl	8002eb4 <I2C_MemoryTransmit_TXE_BTF>
 8003734:	e7c4      	b.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 8003736:	4620      	mov	r0, r4
 8003738:	f7fe fbf9 	bl	8001f2e <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 800373c:	4620      	mov	r0, r4
 800373e:	f7fe fa0c 	bl	8001b5a <I2C_Master_SB>
 8003742:	e7bd      	b.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 8003744:	4620      	mov	r0, r4
 8003746:	f7fe fa5c 	bl	8001c02 <I2C_Master_ADD10>
 800374a:	e7b9      	b.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 800374c:	4620      	mov	r0, r4
 800374e:	f7fe fa6d 	bl	8001c2c <I2C_Master_ADDR>
 8003752:	e7b5      	b.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 8003754:	4620      	mov	r0, r4
 8003756:	f7ff fc0f 	bl	8002f78 <I2C_MasterTransmit_TXE>
 800375a:	e7b1      	b.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
            I2C_MasterTransmit_BTF(hi2c);
 800375c:	4620      	mov	r0, r4
 800375e:	f7ff fb5a 	bl	8002e16 <I2C_MasterTransmit_BTF>
 8003762:	e7ad      	b.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003764:	6853      	ldr	r3, [r2, #4]
 8003766:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800376a:	d1a9      	bne.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800376c:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8003770:	d005      	beq.n	800377e <HAL_I2C_EV_IRQHandler+0xfe>
 8003772:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003776:	d002      	beq.n	800377e <HAL_I2C_EV_IRQHandler+0xfe>
 8003778:	f011 0f04 	tst.w	r1, #4
 800377c:	d009      	beq.n	8003792 <HAL_I2C_EV_IRQHandler+0x112>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800377e:	f011 0f04 	tst.w	r1, #4
 8003782:	d09d      	beq.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
 8003784:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003788:	d09a      	beq.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 800378a:	4620      	mov	r0, r4
 800378c:	f7ff fc5f 	bl	800304e <I2C_MasterReceive_BTF>
 8003790:	e796      	b.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8003792:	4620      	mov	r0, r4
 8003794:	f7ff fcfc 	bl	8003190 <I2C_MasterReceive_RXNE>
 8003798:	e792      	b.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800379a:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800379c:	6953      	ldr	r3, [r2, #20]
 800379e:	e783      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037a0:	f013 0f10 	tst.w	r3, #16
 80037a4:	d002      	beq.n	80037ac <HAL_I2C_EV_IRQHandler+0x12c>
 80037a6:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80037aa:	d118      	bne.n	80037de <HAL_I2C_EV_IRQHandler+0x15e>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037ac:	2821      	cmp	r0, #33	@ 0x21
 80037ae:	d01a      	beq.n	80037e6 <HAL_I2C_EV_IRQHandler+0x166>
 80037b0:	2829      	cmp	r0, #41	@ 0x29
 80037b2:	d018      	beq.n	80037e6 <HAL_I2C_EV_IRQHandler+0x166>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037b4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80037b8:	d005      	beq.n	80037c6 <HAL_I2C_EV_IRQHandler+0x146>
 80037ba:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 80037be:	d002      	beq.n	80037c6 <HAL_I2C_EV_IRQHandler+0x146>
 80037c0:	f013 0f04 	tst.w	r3, #4
 80037c4:	d028      	beq.n	8003818 <HAL_I2C_EV_IRQHandler+0x198>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037c6:	f013 0f04 	tst.w	r3, #4
 80037ca:	f43f af79 	beq.w	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
 80037ce:	f415 7f00 	tst.w	r5, #512	@ 0x200
 80037d2:	f43f af75 	beq.w	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 80037d6:	4620      	mov	r0, r4
 80037d8:	f7fe fb5c 	bl	8001e94 <I2C_SlaveReceive_BTF>
      }
 80037dc:	e770      	b.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 80037de:	4620      	mov	r0, r4
 80037e0:	f7ff fe88 	bl	80034f4 <I2C_Slave_STOPF>
 80037e4:	e76c      	b.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80037ea:	d005      	beq.n	80037f8 <HAL_I2C_EV_IRQHandler+0x178>
 80037ec:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 80037f0:	d002      	beq.n	80037f8 <HAL_I2C_EV_IRQHandler+0x178>
 80037f2:	f013 0f04 	tst.w	r3, #4
 80037f6:	d00b      	beq.n	8003810 <HAL_I2C_EV_IRQHandler+0x190>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037f8:	f013 0f04 	tst.w	r3, #4
 80037fc:	f43f af60 	beq.w	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
 8003800:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003804:	f43f af5c 	beq.w	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 8003808:	4620      	mov	r0, r4
 800380a:	f7fe fb33 	bl	8001e74 <I2C_SlaveTransmit_BTF>
 800380e:	e757      	b.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8003810:	4620      	mov	r0, r4
 8003812:	f7ff fa32 	bl	8002c7a <I2C_SlaveTransmit_TXE>
 8003816:	e753      	b.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 8003818:	4620      	mov	r0, r4
 800381a:	f7ff fa55 	bl	8002cc8 <I2C_SlaveReceive_RXNE>
 800381e:	e74f      	b.n	80036c0 <HAL_I2C_EV_IRQHandler+0x40>

08003820 <HAL_I2C_ER_IRQHandler>:
{
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003824:	6803      	ldr	r3, [r0, #0]
 8003826:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003828:	685f      	ldr	r7, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800382a:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 800382e:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003830:	f415 7680 	ands.w	r6, r5, #256	@ 0x100
 8003834:	d00b      	beq.n	800384e <HAL_I2C_ER_IRQHandler+0x2e>
 8003836:	f417 7680 	ands.w	r6, r7, #256	@ 0x100
 800383a:	d008      	beq.n	800384e <HAL_I2C_ER_IRQHandler+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800383c:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 8003840:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003842:	6801      	ldr	r1, [r0, #0]
 8003844:	680b      	ldr	r3, [r1, #0]
 8003846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800384a:	600b      	str	r3, [r1, #0]
    error |= HAL_I2C_ERROR_BERR;
 800384c:	2601      	movs	r6, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800384e:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003852:	d008      	beq.n	8003866 <HAL_I2C_ER_IRQHandler+0x46>
 8003854:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8003858:	d005      	beq.n	8003866 <HAL_I2C_ER_IRQHandler+0x46>
    error |= HAL_I2C_ERROR_ARLO;
 800385a:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	f46f 7100 	mvn.w	r1, #512	@ 0x200
 8003864:	6159      	str	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003866:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 800386a:	d019      	beq.n	80038a0 <HAL_I2C_ER_IRQHandler+0x80>
 800386c:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8003870:	d016      	beq.n	80038a0 <HAL_I2C_ER_IRQHandler+0x80>
    tmp2 = hi2c->XferCount;
 8003872:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003874:	b299      	uxth	r1, r3
    tmp3 = hi2c->State;
 8003876:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800387a:	b2db      	uxtb	r3, r3
    tmp4 = hi2c->PreviousState;
 800387c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800387e:	2a20      	cmp	r2, #32
 8003880:	d01b      	beq.n	80038ba <HAL_I2C_ER_IRQHandler+0x9a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
 8003888:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 800388a:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800388e:	2a10      	cmp	r2, #16
 8003890:	d001      	beq.n	8003896 <HAL_I2C_ER_IRQHandler+0x76>
 8003892:	2a40      	cmp	r2, #64	@ 0x40
 8003894:	d104      	bne.n	80038a0 <HAL_I2C_ER_IRQHandler+0x80>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003896:	6822      	ldr	r2, [r4, #0]
 8003898:	6813      	ldr	r3, [r2, #0]
 800389a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800389e:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038a0:	f415 6f00 	tst.w	r5, #2048	@ 0x800
 80038a4:	d017      	beq.n	80038d6 <HAL_I2C_ER_IRQHandler+0xb6>
 80038a6:	f417 7f80 	tst.w	r7, #256	@ 0x100
 80038aa:	d014      	beq.n	80038d6 <HAL_I2C_ER_IRQHandler+0xb6>
    error |= HAL_I2C_ERROR_OVR;
 80038ac:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80038b6:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 80038b8:	e00e      	b.n	80038d8 <HAL_I2C_ER_IRQHandler+0xb8>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80038ba:	2900      	cmp	r1, #0
 80038bc:	d1e1      	bne.n	8003882 <HAL_I2C_ER_IRQHandler+0x62>
 80038be:	2b21      	cmp	r3, #33	@ 0x21
 80038c0:	d005      	beq.n	80038ce <HAL_I2C_ER_IRQHandler+0xae>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80038c2:	2b29      	cmp	r3, #41	@ 0x29
 80038c4:	d003      	beq.n	80038ce <HAL_I2C_ER_IRQHandler+0xae>
 80038c6:	2b28      	cmp	r3, #40	@ 0x28
 80038c8:	d1db      	bne.n	8003882 <HAL_I2C_ER_IRQHandler+0x62>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80038ca:	2821      	cmp	r0, #33	@ 0x21
 80038cc:	d1d9      	bne.n	8003882 <HAL_I2C_ER_IRQHandler+0x62>
      I2C_Slave_AF(hi2c);
 80038ce:	4620      	mov	r0, r4
 80038d0:	f7ff fa50 	bl	8002d74 <I2C_Slave_AF>
 80038d4:	e7e4      	b.n	80038a0 <HAL_I2C_ER_IRQHandler+0x80>
  if (error != HAL_I2C_ERROR_NONE)
 80038d6:	b12e      	cbz	r6, 80038e4 <HAL_I2C_ER_IRQHandler+0xc4>
    hi2c->ErrorCode |= error;
 80038d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038da:	4333      	orrs	r3, r6
 80038dc:	6423      	str	r3, [r4, #64]	@ 0x40
    I2C_ITError(hi2c);
 80038de:	4620      	mov	r0, r4
 80038e0:	f7ff fd4c 	bl	800337c <I2C_ITError>
}
 80038e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038e8:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038ea:	4b08      	ldr	r3, [pc, #32]	@ (800390c <RCC_Delay+0x24>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a08      	ldr	r2, [pc, #32]	@ (8003910 <RCC_Delay+0x28>)
 80038f0:	fba2 2303 	umull	r2, r3, r2, r3
 80038f4:	0a5b      	lsrs	r3, r3, #9
 80038f6:	fb00 f303 	mul.w	r3, r0, r3
 80038fa:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80038fc:	bf00      	nop
  }
  while (Delay --);
 80038fe:	9b01      	ldr	r3, [sp, #4]
 8003900:	1e5a      	subs	r2, r3, #1
 8003902:	9201      	str	r2, [sp, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f9      	bne.n	80038fc <RCC_Delay+0x14>
}
 8003908:	b002      	add	sp, #8
 800390a:	4770      	bx	lr
 800390c:	20000000 	.word	0x20000000
 8003910:	10624dd3 	.word	0x10624dd3

08003914 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003914:	2800      	cmp	r0, #0
 8003916:	f000 81f1 	beq.w	8003cfc <HAL_RCC_OscConfig+0x3e8>
{
 800391a:	b570      	push	{r4, r5, r6, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003920:	6803      	ldr	r3, [r0, #0]
 8003922:	f013 0f01 	tst.w	r3, #1
 8003926:	d02c      	beq.n	8003982 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003928:	4b99      	ldr	r3, [pc, #612]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b04      	cmp	r3, #4
 8003932:	d01d      	beq.n	8003970 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003934:	4b96      	ldr	r3, [pc, #600]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 030c 	and.w	r3, r3, #12
 800393c:	2b08      	cmp	r3, #8
 800393e:	d012      	beq.n	8003966 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003940:	6863      	ldr	r3, [r4, #4]
 8003942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003946:	d041      	beq.n	80039cc <HAL_RCC_OscConfig+0xb8>
 8003948:	2b00      	cmp	r3, #0
 800394a:	d155      	bne.n	80039f8 <HAL_RCC_OscConfig+0xe4>
 800394c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003950:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e037      	b.n	80039d6 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003966:	4b8a      	ldr	r3, [pc, #552]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800396e:	d0e7      	beq.n	8003940 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	4b87      	ldr	r3, [pc, #540]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003978:	d003      	beq.n	8003982 <HAL_RCC_OscConfig+0x6e>
 800397a:	6863      	ldr	r3, [r4, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 81bf 	beq.w	8003d00 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	f013 0f02 	tst.w	r3, #2
 8003988:	d075      	beq.n	8003a76 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800398a:	4b81      	ldr	r3, [pc, #516]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f013 0f0c 	tst.w	r3, #12
 8003992:	d05f      	beq.n	8003a54 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003994:	4b7e      	ldr	r3, [pc, #504]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 030c 	and.w	r3, r3, #12
 800399c:	2b08      	cmp	r3, #8
 800399e:	d054      	beq.n	8003a4a <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a0:	6923      	ldr	r3, [r4, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 808a 	beq.w	8003abc <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80039a8:	4b7a      	ldr	r3, [pc, #488]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039ae:	f7fd fe2b 	bl	8001608 <HAL_GetTick>
 80039b2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b4:	4b76      	ldr	r3, [pc, #472]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f013 0f02 	tst.w	r3, #2
 80039bc:	d175      	bne.n	8003aaa <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039be:	f7fd fe23 	bl	8001608 <HAL_GetTick>
 80039c2:	1b40      	subs	r0, r0, r5
 80039c4:	2802      	cmp	r0, #2
 80039c6:	d9f5      	bls.n	80039b4 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80039c8:	2003      	movs	r0, #3
 80039ca:	e19e      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039cc:	4a70      	ldr	r2, [pc, #448]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 80039ce:	6813      	ldr	r3, [r2, #0]
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039d6:	6863      	ldr	r3, [r4, #4]
 80039d8:	b343      	cbz	r3, 8003a2c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80039da:	f7fd fe15 	bl	8001608 <HAL_GetTick>
 80039de:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e0:	4b6b      	ldr	r3, [pc, #428]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80039e8:	d1cb      	bne.n	8003982 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ea:	f7fd fe0d 	bl	8001608 <HAL_GetTick>
 80039ee:	1b40      	subs	r0, r0, r5
 80039f0:	2864      	cmp	r0, #100	@ 0x64
 80039f2:	d9f5      	bls.n	80039e0 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80039f4:	2003      	movs	r0, #3
 80039f6:	e188      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039fc:	d009      	beq.n	8003a12 <HAL_RCC_OscConfig+0xfe>
 80039fe:	4b64      	ldr	r3, [pc, #400]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e7e1      	b.n	80039d6 <HAL_RCC_OscConfig+0xc2>
 8003a12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a16:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e7d4      	b.n	80039d6 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8003a2c:	f7fd fdec 	bl	8001608 <HAL_GetTick>
 8003a30:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a32:	4b57      	ldr	r3, [pc, #348]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003a3a:	d0a2      	beq.n	8003982 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fd fde4 	bl	8001608 <HAL_GetTick>
 8003a40:	1b40      	subs	r0, r0, r5
 8003a42:	2864      	cmp	r0, #100	@ 0x64
 8003a44:	d9f5      	bls.n	8003a32 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8003a46:	2003      	movs	r0, #3
 8003a48:	e15f      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a4a:	4b51      	ldr	r3, [pc, #324]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003a52:	d1a5      	bne.n	80039a0 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a54:	4b4e      	ldr	r3, [pc, #312]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f013 0f02 	tst.w	r3, #2
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCC_OscConfig+0x152>
 8003a5e:	6923      	ldr	r3, [r4, #16]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	f040 814f 	bne.w	8003d04 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a66:	4a4a      	ldr	r2, [pc, #296]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003a68:	6813      	ldr	r3, [r2, #0]
 8003a6a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003a6e:	6961      	ldr	r1, [r4, #20]
 8003a70:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003a74:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	f013 0f08 	tst.w	r3, #8
 8003a7c:	d033      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a7e:	69a3      	ldr	r3, [r4, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d05c      	beq.n	8003b3e <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8003a84:	4b43      	ldr	r3, [pc, #268]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8003a8c:	f7fd fdbc 	bl	8001608 <HAL_GetTick>
 8003a90:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a92:	4b3f      	ldr	r3, [pc, #252]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	f013 0f02 	tst.w	r3, #2
 8003a9a:	d121      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9c:	f7fd fdb4 	bl	8001608 <HAL_GetTick>
 8003aa0:	1b40      	subs	r0, r0, r5
 8003aa2:	2802      	cmp	r0, #2
 8003aa4:	d9f5      	bls.n	8003a92 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8003aa6:	2003      	movs	r0, #3
 8003aa8:	e12f      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aaa:	4a39      	ldr	r2, [pc, #228]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003aac:	6813      	ldr	r3, [r2, #0]
 8003aae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003ab2:	6961      	ldr	r1, [r4, #20]
 8003ab4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e7dc      	b.n	8003a76 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003abc:	4b35      	ldr	r3, [pc, #212]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ac2:	f7fd fda1 	bl	8001608 <HAL_GetTick>
 8003ac6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac8:	4b31      	ldr	r3, [pc, #196]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f013 0f02 	tst.w	r3, #2
 8003ad0:	d0d1      	beq.n	8003a76 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fd fd99 	bl	8001608 <HAL_GetTick>
 8003ad6:	1b40      	subs	r0, r0, r5
 8003ad8:	2802      	cmp	r0, #2
 8003ada:	d9f5      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8003adc:	2003      	movs	r0, #3
 8003ade:	e114      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f7ff ff01 	bl	80038e8 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	f013 0f04 	tst.w	r3, #4
 8003aec:	f000 8096 	beq.w	8003c1c <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af0:	4b27      	ldr	r3, [pc, #156]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003af8:	d134      	bne.n	8003b64 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afa:	4b25      	ldr	r3, [pc, #148]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003b02:	61da      	str	r2, [r3, #28]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b0e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b10:	4b21      	ldr	r3, [pc, #132]	@ (8003b98 <HAL_RCC_OscConfig+0x284>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003b18:	d026      	beq.n	8003b68 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b1a:	68e3      	ldr	r3, [r4, #12]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d03d      	beq.n	8003b9c <HAL_RCC_OscConfig+0x288>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d153      	bne.n	8003bcc <HAL_RCC_OscConfig+0x2b8>
 8003b24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b28:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8003b2c:	6a1a      	ldr	r2, [r3, #32]
 8003b2e:	f022 0201 	bic.w	r2, r2, #1
 8003b32:	621a      	str	r2, [r3, #32]
 8003b34:	6a1a      	ldr	r2, [r3, #32]
 8003b36:	f022 0204 	bic.w	r2, r2, #4
 8003b3a:	621a      	str	r2, [r3, #32]
 8003b3c:	e033      	b.n	8003ba6 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8003b3e:	4b15      	ldr	r3, [pc, #84]	@ (8003b94 <HAL_RCC_OscConfig+0x280>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8003b46:	f7fd fd5f 	bl	8001608 <HAL_GetTick>
 8003b4a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	4b10      	ldr	r3, [pc, #64]	@ (8003b90 <HAL_RCC_OscConfig+0x27c>)
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	f013 0f02 	tst.w	r3, #2
 8003b54:	d0c7      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b56:	f7fd fd57 	bl	8001608 <HAL_GetTick>
 8003b5a:	1b40      	subs	r0, r0, r5
 8003b5c:	2802      	cmp	r0, #2
 8003b5e:	d9f5      	bls.n	8003b4c <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8003b60:	2003      	movs	r0, #3
 8003b62:	e0d2      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8003b64:	2500      	movs	r5, #0
 8003b66:	e7d3      	b.n	8003b10 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b68:	4a0b      	ldr	r2, [pc, #44]	@ (8003b98 <HAL_RCC_OscConfig+0x284>)
 8003b6a:	6813      	ldr	r3, [r2, #0]
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b70:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003b72:	f7fd fd49 	bl	8001608 <HAL_GetTick>
 8003b76:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	4b07      	ldr	r3, [pc, #28]	@ (8003b98 <HAL_RCC_OscConfig+0x284>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003b80:	d1cb      	bne.n	8003b1a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b82:	f7fd fd41 	bl	8001608 <HAL_GetTick>
 8003b86:	1b80      	subs	r0, r0, r6
 8003b88:	2864      	cmp	r0, #100	@ 0x64
 8003b8a:	d9f5      	bls.n	8003b78 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8003b8c:	2003      	movs	r0, #3
 8003b8e:	e0bc      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
 8003b90:	40021000 	.word	0x40021000
 8003b94:	42420000 	.word	0x42420000
 8003b98:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9c:	4a5f      	ldr	r2, [pc, #380]	@ (8003d1c <HAL_RCC_OscConfig+0x408>)
 8003b9e:	6a13      	ldr	r3, [r2, #32]
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ba6:	68e3      	ldr	r3, [r4, #12]
 8003ba8:	b333      	cbz	r3, 8003bf8 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8003baa:	f7fd fd2d 	bl	8001608 <HAL_GetTick>
 8003bae:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8003d1c <HAL_RCC_OscConfig+0x408>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f013 0f02 	tst.w	r3, #2
 8003bb8:	d12f      	bne.n	8003c1a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fd fd25 	bl	8001608 <HAL_GetTick>
 8003bbe:	1b80      	subs	r0, r0, r6
 8003bc0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003bc4:	4298      	cmp	r0, r3
 8003bc6:	d9f3      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8003bc8:	2003      	movs	r0, #3
 8003bca:	e09e      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bcc:	2b05      	cmp	r3, #5
 8003bce:	d009      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2d0>
 8003bd0:	4b52      	ldr	r3, [pc, #328]	@ (8003d1c <HAL_RCC_OscConfig+0x408>)
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	621a      	str	r2, [r3, #32]
 8003bda:	6a1a      	ldr	r2, [r3, #32]
 8003bdc:	f022 0204 	bic.w	r2, r2, #4
 8003be0:	621a      	str	r2, [r3, #32]
 8003be2:	e7e0      	b.n	8003ba6 <HAL_RCC_OscConfig+0x292>
 8003be4:	4b4d      	ldr	r3, [pc, #308]	@ (8003d1c <HAL_RCC_OscConfig+0x408>)
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	f042 0204 	orr.w	r2, r2, #4
 8003bec:	621a      	str	r2, [r3, #32]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	621a      	str	r2, [r3, #32]
 8003bf6:	e7d6      	b.n	8003ba6 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8003bf8:	f7fd fd06 	bl	8001608 <HAL_GetTick>
 8003bfc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfe:	4b47      	ldr	r3, [pc, #284]	@ (8003d1c <HAL_RCC_OscConfig+0x408>)
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f013 0f02 	tst.w	r3, #2
 8003c06:	d008      	beq.n	8003c1a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c08:	f7fd fcfe 	bl	8001608 <HAL_GetTick>
 8003c0c:	1b80      	subs	r0, r0, r6
 8003c0e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c12:	4298      	cmp	r0, r3
 8003c14:	d9f3      	bls.n	8003bfe <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8003c16:	2003      	movs	r0, #3
 8003c18:	e077      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8003c1a:	b9e5      	cbnz	r5, 8003c56 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1c:	69e3      	ldr	r3, [r4, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d072      	beq.n	8003d08 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c22:	4a3e      	ldr	r2, [pc, #248]	@ (8003d1c <HAL_RCC_OscConfig+0x408>)
 8003c24:	6852      	ldr	r2, [r2, #4]
 8003c26:	f002 020c 	and.w	r2, r2, #12
 8003c2a:	2a08      	cmp	r2, #8
 8003c2c:	d056      	beq.n	8003cdc <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d017      	beq.n	8003c62 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8003c32:	4b3b      	ldr	r3, [pc, #236]	@ (8003d20 <HAL_RCC_OscConfig+0x40c>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003c38:	f7fd fce6 	bl	8001608 <HAL_GetTick>
 8003c3c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3e:	4b37      	ldr	r3, [pc, #220]	@ (8003d1c <HAL_RCC_OscConfig+0x408>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003c46:	d047      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fd fcde 	bl	8001608 <HAL_GetTick>
 8003c4c:	1b00      	subs	r0, r0, r4
 8003c4e:	2802      	cmp	r0, #2
 8003c50:	d9f5      	bls.n	8003c3e <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8003c52:	2003      	movs	r0, #3
 8003c54:	e059      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c56:	4a31      	ldr	r2, [pc, #196]	@ (8003d1c <HAL_RCC_OscConfig+0x408>)
 8003c58:	69d3      	ldr	r3, [r2, #28]
 8003c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	61d3      	str	r3, [r2, #28]
 8003c60:	e7dc      	b.n	8003c1c <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8003c62:	4b2f      	ldr	r3, [pc, #188]	@ (8003d20 <HAL_RCC_OscConfig+0x40c>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003c68:	f7fd fcce 	bl	8001608 <HAL_GetTick>
 8003c6c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8003d1c <HAL_RCC_OscConfig+0x408>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003c76:	d006      	beq.n	8003c86 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fd fcc6 	bl	8001608 <HAL_GetTick>
 8003c7c:	1b40      	subs	r0, r0, r5
 8003c7e:	2802      	cmp	r0, #2
 8003c80:	d9f5      	bls.n	8003c6e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003c82:	2003      	movs	r0, #3
 8003c84:	e041      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c86:	6a23      	ldr	r3, [r4, #32]
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c8c:	d01a      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c8e:	4923      	ldr	r1, [pc, #140]	@ (8003d1c <HAL_RCC_OscConfig+0x408>)
 8003c90:	684b      	ldr	r3, [r1, #4]
 8003c92:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8003c96:	6a22      	ldr	r2, [r4, #32]
 8003c98:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003c9a:	4302      	orrs	r2, r0
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d20 <HAL_RCC_OscConfig+0x40c>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003ca6:	f7fd fcaf 	bl	8001608 <HAL_GetTick>
 8003caa:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cac:	4b1b      	ldr	r3, [pc, #108]	@ (8003d1c <HAL_RCC_OscConfig+0x408>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003cb4:	d10e      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb6:	f7fd fca7 	bl	8001608 <HAL_GetTick>
 8003cba:	1b00      	subs	r0, r0, r4
 8003cbc:	2802      	cmp	r0, #2
 8003cbe:	d9f5      	bls.n	8003cac <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8003cc0:	2003      	movs	r0, #3
 8003cc2:	e022      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cc4:	4a15      	ldr	r2, [pc, #84]	@ (8003d1c <HAL_RCC_OscConfig+0x408>)
 8003cc6:	6853      	ldr	r3, [r2, #4]
 8003cc8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ccc:	68a1      	ldr	r1, [r4, #8]
 8003cce:	430b      	orrs	r3, r1
 8003cd0:	6053      	str	r3, [r2, #4]
 8003cd2:	e7dc      	b.n	8003c8e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	e018      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
 8003cd8:	2000      	movs	r0, #0
 8003cda:	e016      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d016      	beq.n	8003d0e <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8003ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8003d1c <HAL_RCC_OscConfig+0x408>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce4:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8003ce8:	6a22      	ldr	r2, [r4, #32]
 8003cea:	4291      	cmp	r1, r2
 8003cec:	d111      	bne.n	8003d12 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cee:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003cf2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d10e      	bne.n	8003d16 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	e006      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8003cfc:	2001      	movs	r0, #1
}
 8003cfe:	4770      	bx	lr
        return HAL_ERROR;
 8003d00:	2001      	movs	r0, #1
 8003d02:	e002      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8003d04:	2001      	movs	r0, #1
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8003d08:	2000      	movs	r0, #0
}
 8003d0a:	b002      	add	sp, #8
 8003d0c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003d0e:	2001      	movs	r0, #1
 8003d10:	e7fb      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8003d12:	2001      	movs	r0, #1
 8003d14:	e7f9      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
 8003d16:	2001      	movs	r0, #1
 8003d18:	e7f7      	b.n	8003d0a <HAL_RCC_OscConfig+0x3f6>
 8003d1a:	bf00      	nop
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	42420000 	.word	0x42420000

08003d24 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003d24:	4b0f      	ldr	r3, [pc, #60]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x40>)
 8003d26:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003d28:	f003 020c 	and.w	r2, r3, #12
 8003d2c:	2a08      	cmp	r2, #8
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8003d30:	480d      	ldr	r0, [pc, #52]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8003d32:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d34:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003d38:	490c      	ldr	r1, [pc, #48]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x48>)
 8003d3a:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d3c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003d40:	d00b      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d42:	4b08      	ldr	r3, [pc, #32]	@ (8003d64 <HAL_RCC_GetSysClockFreq+0x40>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003d4a:	4a09      	ldr	r2, [pc, #36]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003d4c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d4e:	4a06      	ldr	r2, [pc, #24]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x44>)
 8003d50:	fb02 f000 	mul.w	r0, r2, r0
 8003d54:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d58:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d5a:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <HAL_RCC_GetSysClockFreq+0x50>)
 8003d5c:	fb03 f000 	mul.w	r0, r3, r0
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	007a1200 	.word	0x007a1200
 8003d6c:	08006f7c 	.word	0x08006f7c
 8003d70:	08006f78 	.word	0x08006f78
 8003d74:	003d0900 	.word	0x003d0900

08003d78 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	f000 80a0 	beq.w	8003ebe <HAL_RCC_ClockConfig+0x146>
{
 8003d7e:	b570      	push	{r4, r5, r6, lr}
 8003d80:	460d      	mov	r5, r1
 8003d82:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d84:	4b52      	ldr	r3, [pc, #328]	@ (8003ed0 <HAL_RCC_ClockConfig+0x158>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	428b      	cmp	r3, r1
 8003d8e:	d20b      	bcs.n	8003da8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d90:	4a4f      	ldr	r2, [pc, #316]	@ (8003ed0 <HAL_RCC_ClockConfig+0x158>)
 8003d92:	6813      	ldr	r3, [r2, #0]
 8003d94:	f023 0307 	bic.w	r3, r3, #7
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9c:	6813      	ldr	r3, [r2, #0]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	428b      	cmp	r3, r1
 8003da4:	f040 808d 	bne.w	8003ec2 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da8:	6823      	ldr	r3, [r4, #0]
 8003daa:	f013 0f02 	tst.w	r3, #2
 8003dae:	d017      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	f013 0f04 	tst.w	r3, #4
 8003db4:	d004      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003db6:	4a47      	ldr	r2, [pc, #284]	@ (8003ed4 <HAL_RCC_ClockConfig+0x15c>)
 8003db8:	6853      	ldr	r3, [r2, #4]
 8003dba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003dbe:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	f013 0f08 	tst.w	r3, #8
 8003dc6:	d004      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc8:	4a42      	ldr	r2, [pc, #264]	@ (8003ed4 <HAL_RCC_ClockConfig+0x15c>)
 8003dca:	6853      	ldr	r3, [r2, #4]
 8003dcc:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003dd0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd2:	4a40      	ldr	r2, [pc, #256]	@ (8003ed4 <HAL_RCC_ClockConfig+0x15c>)
 8003dd4:	6853      	ldr	r3, [r2, #4]
 8003dd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dda:	68a1      	ldr	r1, [r4, #8]
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	f013 0f01 	tst.w	r3, #1
 8003de6:	d031      	beq.n	8003e4c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de8:	6863      	ldr	r3, [r4, #4]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d020      	beq.n	8003e30 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d025      	beq.n	8003e3e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df2:	4a38      	ldr	r2, [pc, #224]	@ (8003ed4 <HAL_RCC_ClockConfig+0x15c>)
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	f012 0f02 	tst.w	r2, #2
 8003dfa:	d064      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfc:	4935      	ldr	r1, [pc, #212]	@ (8003ed4 <HAL_RCC_ClockConfig+0x15c>)
 8003dfe:	684a      	ldr	r2, [r1, #4]
 8003e00:	f022 0203 	bic.w	r2, r2, #3
 8003e04:	4313      	orrs	r3, r2
 8003e06:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003e08:	f7fd fbfe 	bl	8001608 <HAL_GetTick>
 8003e0c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	4b31      	ldr	r3, [pc, #196]	@ (8003ed4 <HAL_RCC_ClockConfig+0x15c>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	6862      	ldr	r2, [r4, #4]
 8003e18:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003e1c:	d016      	beq.n	8003e4c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1e:	f7fd fbf3 	bl	8001608 <HAL_GetTick>
 8003e22:	1b80      	subs	r0, r0, r6
 8003e24:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e28:	4298      	cmp	r0, r3
 8003e2a:	d9f0      	bls.n	8003e0e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8003e2c:	2003      	movs	r0, #3
 8003e2e:	e045      	b.n	8003ebc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e30:	4a28      	ldr	r2, [pc, #160]	@ (8003ed4 <HAL_RCC_ClockConfig+0x15c>)
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8003e38:	d1e0      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003e3a:	2001      	movs	r0, #1
 8003e3c:	e03e      	b.n	8003ebc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3e:	4a25      	ldr	r2, [pc, #148]	@ (8003ed4 <HAL_RCC_ClockConfig+0x15c>)
 8003e40:	6812      	ldr	r2, [r2, #0]
 8003e42:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8003e46:	d1d9      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003e48:	2001      	movs	r0, #1
 8003e4a:	e037      	b.n	8003ebc <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e4c:	4b20      	ldr	r3, [pc, #128]	@ (8003ed0 <HAL_RCC_ClockConfig+0x158>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	42ab      	cmp	r3, r5
 8003e56:	d90a      	bls.n	8003e6e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e58:	4a1d      	ldr	r2, [pc, #116]	@ (8003ed0 <HAL_RCC_ClockConfig+0x158>)
 8003e5a:	6813      	ldr	r3, [r2, #0]
 8003e5c:	f023 0307 	bic.w	r3, r3, #7
 8003e60:	432b      	orrs	r3, r5
 8003e62:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e64:	6813      	ldr	r3, [r2, #0]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	42ab      	cmp	r3, r5
 8003e6c:	d12d      	bne.n	8003eca <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	f013 0f04 	tst.w	r3, #4
 8003e74:	d006      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e76:	4a17      	ldr	r2, [pc, #92]	@ (8003ed4 <HAL_RCC_ClockConfig+0x15c>)
 8003e78:	6853      	ldr	r3, [r2, #4]
 8003e7a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003e7e:	68e1      	ldr	r1, [r4, #12]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	f013 0f08 	tst.w	r3, #8
 8003e8a:	d007      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e8c:	4a11      	ldr	r2, [pc, #68]	@ (8003ed4 <HAL_RCC_ClockConfig+0x15c>)
 8003e8e:	6853      	ldr	r3, [r2, #4]
 8003e90:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003e94:	6921      	ldr	r1, [r4, #16]
 8003e96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003e9a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e9c:	f7ff ff42 	bl	8003d24 <HAL_RCC_GetSysClockFreq>
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <HAL_RCC_ClockConfig+0x15c>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8003ed8 <HAL_RCC_ClockConfig+0x160>)
 8003eaa:	5cd3      	ldrb	r3, [r2, r3]
 8003eac:	40d8      	lsrs	r0, r3
 8003eae:	4b0b      	ldr	r3, [pc, #44]	@ (8003edc <HAL_RCC_ClockConfig+0x164>)
 8003eb0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <HAL_RCC_ClockConfig+0x168>)
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	f7fd fa9d 	bl	80013f4 <HAL_InitTick>
  return HAL_OK;
 8003eba:	2000      	movs	r0, #0
}
 8003ebc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003ebe:	2001      	movs	r0, #1
}
 8003ec0:	4770      	bx	lr
    return HAL_ERROR;
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	e7fa      	b.n	8003ebc <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8003ec6:	2001      	movs	r0, #1
 8003ec8:	e7f8      	b.n	8003ebc <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8003eca:	2001      	movs	r0, #1
 8003ecc:	e7f6      	b.n	8003ebc <HAL_RCC_ClockConfig+0x144>
 8003ece:	bf00      	nop
 8003ed0:	40022000 	.word	0x40022000
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	08006f68 	.word	0x08006f68
 8003edc:	20000000 	.word	0x20000000
 8003ee0:	20000008 	.word	0x20000008

08003ee4 <HAL_RCC_GetHCLKFreq>:
}
 8003ee4:	4b01      	ldr	r3, [pc, #4]	@ (8003eec <HAL_RCC_GetHCLKFreq+0x8>)
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	20000000 	.word	0x20000000

08003ef0 <HAL_RCC_GetPCLK1Freq>:
{
 8003ef0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ef2:	f7ff fff7 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003ef6:	4b04      	ldr	r3, [pc, #16]	@ (8003f08 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003efe:	4a03      	ldr	r2, [pc, #12]	@ (8003f0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003f00:	5cd3      	ldrb	r3, [r2, r3]
}
 8003f02:	40d8      	lsrs	r0, r3
 8003f04:	bd08      	pop	{r3, pc}
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	08006f60 	.word	0x08006f60

08003f10 <HAL_RCC_GetPCLK2Freq>:
{
 8003f10:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f12:	f7ff ffe7 	bl	8003ee4 <HAL_RCC_GetHCLKFreq>
 8003f16:	4b04      	ldr	r3, [pc, #16]	@ (8003f28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003f1e:	4a03      	ldr	r2, [pc, #12]	@ (8003f2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003f20:	5cd3      	ldrb	r3, [r2, r3]
}
 8003f22:	40d8      	lsrs	r0, r3
 8003f24:	bd08      	pop	{r3, pc}
 8003f26:	bf00      	nop
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	08006f60 	.word	0x08006f60

08003f30 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f30:	230f      	movs	r3, #15
 8003f32:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f34:	4b0b      	ldr	r3, [pc, #44]	@ (8003f64 <HAL_RCC_GetClockConfig+0x34>)
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	f002 0203 	and.w	r2, r2, #3
 8003f3c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8003f44:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003f4c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	08db      	lsrs	r3, r3, #3
 8003f52:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f56:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f58:	4b03      	ldr	r3, [pc, #12]	@ (8003f68 <HAL_RCC_GetClockConfig+0x38>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	600b      	str	r3, [r1, #0]
}
 8003f62:	4770      	bx	lr
 8003f64:	40021000 	.word	0x40021000
 8003f68:	40022000 	.word	0x40022000

08003f6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f6c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f70:	6a03      	ldr	r3, [r0, #32]
 8003f72:	f023 0301 	bic.w	r3, r3, #1
 8003f76:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f78:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7a:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f7c:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f80:	680c      	ldr	r4, [r1, #0]
 8003f82:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f84:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f88:	688b      	ldr	r3, [r1, #8]
 8003f8a:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8003fbc <TIM_OC1_SetConfig+0x50>)
 8003f8e:	4290      	cmp	r0, r2
 8003f90:	d006      	beq.n	8003fa0 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f92:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f94:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f96:	684a      	ldr	r2, [r1, #4]
 8003f98:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9a:	6203      	str	r3, [r0, #32]
}
 8003f9c:	bc30      	pop	{r4, r5}
 8003f9e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fa0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003fa4:	68ca      	ldr	r2, [r1, #12]
 8003fa6:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fa8:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fac:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003fb0:	694a      	ldr	r2, [r1, #20]
 8003fb2:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fb4:	698d      	ldr	r5, [r1, #24]
 8003fb6:	4315      	orrs	r5, r2
 8003fb8:	e7eb      	b.n	8003f92 <TIM_OC1_SetConfig+0x26>
 8003fba:	bf00      	nop
 8003fbc:	40012c00 	.word	0x40012c00

08003fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fc0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fc4:	6a02      	ldr	r2, [r0, #32]
 8003fc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fca:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fce:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fd0:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd4:	680d      	ldr	r5, [r1, #0]
 8003fd6:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fdc:	688a      	ldr	r2, [r1, #8]
 8003fde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fe2:	4a0d      	ldr	r2, [pc, #52]	@ (8004018 <TIM_OC3_SetConfig+0x58>)
 8003fe4:	4290      	cmp	r0, r2
 8003fe6:	d006      	beq.n	8003ff6 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fea:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fec:	684a      	ldr	r2, [r1, #4]
 8003fee:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff0:	6203      	str	r3, [r0, #32]
}
 8003ff2:	bc30      	pop	{r4, r5}
 8003ff4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ff6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ffa:	68ca      	ldr	r2, [r1, #12]
 8003ffc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004000:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004004:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004008:	694a      	ldr	r2, [r1, #20]
 800400a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800400e:	698a      	ldr	r2, [r1, #24]
 8004010:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8004014:	e7e8      	b.n	8003fe8 <TIM_OC3_SetConfig+0x28>
 8004016:	bf00      	nop
 8004018:	40012c00 	.word	0x40012c00

0800401c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800401c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004020:	6a02      	ldr	r2, [r0, #32]
 8004022:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004026:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004028:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800402a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800402c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004030:	680d      	ldr	r5, [r1, #0]
 8004032:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004036:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800403a:	688d      	ldr	r5, [r1, #8]
 800403c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004040:	4d07      	ldr	r5, [pc, #28]	@ (8004060 <TIM_OC4_SetConfig+0x44>)
 8004042:	42a8      	cmp	r0, r5
 8004044:	d006      	beq.n	8004054 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004046:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004048:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800404a:	684a      	ldr	r2, [r1, #4]
 800404c:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404e:	6203      	str	r3, [r0, #32]
}
 8004050:	bc30      	pop	{r4, r5}
 8004052:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004054:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004058:	694d      	ldr	r5, [r1, #20]
 800405a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800405e:	e7f2      	b.n	8004046 <TIM_OC4_SetConfig+0x2a>
 8004060:	40012c00 	.word	0x40012c00

08004064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004064:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004066:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004068:	6a04      	ldr	r4, [r0, #32]
 800406a:	f024 0401 	bic.w	r4, r4, #1
 800406e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004070:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004072:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004076:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800407a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800407e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004080:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004082:	6203      	str	r3, [r0, #32]
}
 8004084:	bc10      	pop	{r4}
 8004086:	4770      	bx	lr

08004088 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004088:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800408a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408c:	6a04      	ldr	r4, [r0, #32]
 800408e:	f024 0410 	bic.w	r4, r4, #16
 8004092:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004094:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004096:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800409a:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800409e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80040a2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040a6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80040a8:	6203      	str	r3, [r0, #32]
}
 80040aa:	bc10      	pop	{r4}
 80040ac:	4770      	bx	lr

080040ae <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040ae:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040b4:	430b      	orrs	r3, r1
 80040b6:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ba:	6083      	str	r3, [r0, #8]
}
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80040c0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d127      	bne.n	800411a <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 80040ca:	2302      	movs	r3, #2
 80040cc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040d0:	6802      	ldr	r2, [r0, #0]
 80040d2:	68d3      	ldr	r3, [r2, #12]
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040da:	6803      	ldr	r3, [r0, #0]
 80040dc:	4a11      	ldr	r2, [pc, #68]	@ (8004124 <HAL_TIM_Base_Start_IT+0x64>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d010      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x44>
 80040e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e6:	d00d      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x44>
 80040e8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d009      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x44>
 80040f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d005      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004100:	2000      	movs	r0, #0
 8004102:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410a:	2a06      	cmp	r2, #6
 800410c:	d007      	beq.n	800411e <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004116:	2000      	movs	r0, #0
 8004118:	4770      	bx	lr
    return HAL_ERROR;
 800411a:	2001      	movs	r0, #1
 800411c:	4770      	bx	lr
  return HAL_OK;
 800411e:	2000      	movs	r0, #0
}
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40012c00 	.word	0x40012c00

08004128 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004128:	4770      	bx	lr

0800412a <HAL_TIM_IC_CaptureCallback>:
}
 800412a:	4770      	bx	lr

0800412c <HAL_TIM_TriggerCallback>:
}
 800412c:	4770      	bx	lr

0800412e <HAL_TIM_IRQHandler>:
{
 800412e:	b570      	push	{r4, r5, r6, lr}
 8004130:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8004132:	6803      	ldr	r3, [r0, #0]
 8004134:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004136:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004138:	f015 0f02 	tst.w	r5, #2
 800413c:	d010      	beq.n	8004160 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800413e:	f016 0f02 	tst.w	r6, #2
 8004142:	d00d      	beq.n	8004160 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004144:	f06f 0202 	mvn.w	r2, #2
 8004148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800414a:	2301      	movs	r3, #1
 800414c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800414e:	6803      	ldr	r3, [r0, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f013 0f03 	tst.w	r3, #3
 8004156:	d05e      	beq.n	8004216 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8004158:	f7ff ffe7 	bl	800412a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415c:	2300      	movs	r3, #0
 800415e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004160:	f015 0f04 	tst.w	r5, #4
 8004164:	d012      	beq.n	800418c <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004166:	f016 0f04 	tst.w	r6, #4
 800416a:	d00f      	beq.n	800418c <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	f06f 0204 	mvn.w	r2, #4
 8004172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004174:	2302      	movs	r3, #2
 8004176:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004180:	d04f      	beq.n	8004222 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8004182:	4620      	mov	r0, r4
 8004184:	f7ff ffd1 	bl	800412a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004188:	2300      	movs	r3, #0
 800418a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800418c:	f015 0f08 	tst.w	r5, #8
 8004190:	d012      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004192:	f016 0f08 	tst.w	r6, #8
 8004196:	d00f      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	f06f 0208 	mvn.w	r2, #8
 800419e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041a0:	2304      	movs	r3, #4
 80041a2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f013 0f03 	tst.w	r3, #3
 80041ac:	d040      	beq.n	8004230 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80041ae:	4620      	mov	r0, r4
 80041b0:	f7ff ffbb 	bl	800412a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b4:	2300      	movs	r3, #0
 80041b6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041b8:	f015 0f10 	tst.w	r5, #16
 80041bc:	d012      	beq.n	80041e4 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041be:	f016 0f10 	tst.w	r6, #16
 80041c2:	d00f      	beq.n	80041e4 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	f06f 0210 	mvn.w	r2, #16
 80041ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041cc:	2308      	movs	r3, #8
 80041ce:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80041d8:	d031      	beq.n	800423e <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80041da:	4620      	mov	r0, r4
 80041dc:	f7ff ffa5 	bl	800412a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e0:	2300      	movs	r3, #0
 80041e2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041e4:	f015 0f01 	tst.w	r5, #1
 80041e8:	d002      	beq.n	80041f0 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041ea:	f016 0f01 	tst.w	r6, #1
 80041ee:	d12d      	bne.n	800424c <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041f0:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80041f4:	d002      	beq.n	80041fc <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041f6:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80041fa:	d12f      	bne.n	800425c <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041fc:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8004200:	d002      	beq.n	8004208 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004202:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8004206:	d131      	bne.n	800426c <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004208:	f015 0f20 	tst.w	r5, #32
 800420c:	d002      	beq.n	8004214 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800420e:	f016 0f20 	tst.w	r6, #32
 8004212:	d133      	bne.n	800427c <HAL_TIM_IRQHandler+0x14e>
}
 8004214:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004216:	f7ff ff87 	bl	8004128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421a:	4620      	mov	r0, r4
 800421c:	f002 fb12 	bl	8006844 <HAL_TIM_PWM_PulseFinishedCallback>
 8004220:	e79c      	b.n	800415c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004222:	4620      	mov	r0, r4
 8004224:	f7ff ff80 	bl	8004128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004228:	4620      	mov	r0, r4
 800422a:	f002 fb0b 	bl	8006844 <HAL_TIM_PWM_PulseFinishedCallback>
 800422e:	e7ab      	b.n	8004188 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004230:	4620      	mov	r0, r4
 8004232:	f7ff ff79 	bl	8004128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004236:	4620      	mov	r0, r4
 8004238:	f002 fb04 	bl	8006844 <HAL_TIM_PWM_PulseFinishedCallback>
 800423c:	e7ba      	b.n	80041b4 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423e:	4620      	mov	r0, r4
 8004240:	f7ff ff72 	bl	8004128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004244:	4620      	mov	r0, r4
 8004246:	f002 fafd 	bl	8006844 <HAL_TIM_PWM_PulseFinishedCallback>
 800424a:	e7c9      	b.n	80041e0 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	f06f 0201 	mvn.w	r2, #1
 8004252:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004254:	4620      	mov	r0, r4
 8004256:	f7fc fde3 	bl	8000e20 <HAL_TIM_PeriodElapsedCallback>
 800425a:	e7c9      	b.n	80041f0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800425c:	6823      	ldr	r3, [r4, #0]
 800425e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004262:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004264:	4620      	mov	r0, r4
 8004266:	f000 fb28 	bl	80048ba <HAL_TIMEx_BreakCallback>
 800426a:	e7c7      	b.n	80041fc <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004272:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004274:	4620      	mov	r0, r4
 8004276:	f7ff ff59 	bl	800412c <HAL_TIM_TriggerCallback>
 800427a:	e7c5      	b.n	8004208 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	f06f 0220 	mvn.w	r2, #32
 8004282:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004284:	4620      	mov	r0, r4
 8004286:	f000 fb17 	bl	80048b8 <HAL_TIMEx_CommutCallback>
}
 800428a:	e7c3      	b.n	8004214 <HAL_TIM_IRQHandler+0xe6>

0800428c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800428c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800428e:	4a1f      	ldr	r2, [pc, #124]	@ (800430c <TIM_Base_SetConfig+0x80>)
 8004290:	4290      	cmp	r0, r2
 8004292:	d00a      	beq.n	80042aa <TIM_Base_SetConfig+0x1e>
 8004294:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004298:	d007      	beq.n	80042aa <TIM_Base_SetConfig+0x1e>
 800429a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800429e:	4290      	cmp	r0, r2
 80042a0:	d003      	beq.n	80042aa <TIM_Base_SetConfig+0x1e>
 80042a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042a6:	4290      	cmp	r0, r2
 80042a8:	d103      	bne.n	80042b2 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80042ae:	684a      	ldr	r2, [r1, #4]
 80042b0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042b2:	4a16      	ldr	r2, [pc, #88]	@ (800430c <TIM_Base_SetConfig+0x80>)
 80042b4:	4290      	cmp	r0, r2
 80042b6:	d00a      	beq.n	80042ce <TIM_Base_SetConfig+0x42>
 80042b8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80042bc:	d007      	beq.n	80042ce <TIM_Base_SetConfig+0x42>
 80042be:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80042c2:	4290      	cmp	r0, r2
 80042c4:	d003      	beq.n	80042ce <TIM_Base_SetConfig+0x42>
 80042c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042ca:	4290      	cmp	r0, r2
 80042cc:	d103      	bne.n	80042d6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d2:	68ca      	ldr	r2, [r1, #12]
 80042d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042da:	694a      	ldr	r2, [r1, #20]
 80042dc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80042de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e0:	688b      	ldr	r3, [r1, #8]
 80042e2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80042e4:	680b      	ldr	r3, [r1, #0]
 80042e6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e8:	4b08      	ldr	r3, [pc, #32]	@ (800430c <TIM_Base_SetConfig+0x80>)
 80042ea:	4298      	cmp	r0, r3
 80042ec:	d00a      	beq.n	8004304 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 80042ee:	2301      	movs	r3, #1
 80042f0:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042f2:	6903      	ldr	r3, [r0, #16]
 80042f4:	f013 0f01 	tst.w	r3, #1
 80042f8:	d003      	beq.n	8004302 <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042fa:	6903      	ldr	r3, [r0, #16]
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	6103      	str	r3, [r0, #16]
}
 8004302:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8004304:	690b      	ldr	r3, [r1, #16]
 8004306:	6303      	str	r3, [r0, #48]	@ 0x30
 8004308:	e7f1      	b.n	80042ee <TIM_Base_SetConfig+0x62>
 800430a:	bf00      	nop
 800430c:	40012c00 	.word	0x40012c00

08004310 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004310:	b340      	cbz	r0, 8004364 <HAL_TIM_Base_Init+0x54>
{
 8004312:	b510      	push	{r4, lr}
 8004314:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004316:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800431a:	b1f3      	cbz	r3, 800435a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	2302      	movs	r3, #2
 800431e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004322:	4621      	mov	r1, r4
 8004324:	f851 0b04 	ldr.w	r0, [r1], #4
 8004328:	f7ff ffb0 	bl	800428c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800432c:	2301      	movs	r3, #1
 800432e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004332:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004336:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800433a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800433e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004342:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004346:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800434a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800434e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004352:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004356:	2000      	movs	r0, #0
}
 8004358:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800435a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800435e:	f7fc ff97 	bl	8001290 <HAL_TIM_Base_MspInit>
 8004362:	e7db      	b.n	800431c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004364:	2001      	movs	r0, #1
}
 8004366:	4770      	bx	lr

08004368 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004368:	b340      	cbz	r0, 80043bc <HAL_TIM_PWM_Init+0x54>
{
 800436a:	b510      	push	{r4, lr}
 800436c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800436e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004372:	b1f3      	cbz	r3, 80043b2 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	2302      	movs	r3, #2
 8004376:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437a:	4621      	mov	r1, r4
 800437c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004380:	f7ff ff84 	bl	800428c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004384:	2301      	movs	r3, #1
 8004386:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800438e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004392:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004396:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800439a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800439e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043a2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80043a6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80043aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80043ae:	2000      	movs	r0, #0
}
 80043b0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80043b2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80043b6:	f7fc ff4d 	bl	8001254 <HAL_TIM_PWM_MspInit>
 80043ba:	e7db      	b.n	8004374 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80043bc:	2001      	movs	r0, #1
}
 80043be:	4770      	bx	lr

080043c0 <TIM_OC2_SetConfig>:
{
 80043c0:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80043c2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c4:	6a02      	ldr	r2, [r0, #32]
 80043c6:	f022 0210 	bic.w	r2, r2, #16
 80043ca:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80043cc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80043ce:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043d0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d4:	680d      	ldr	r5, [r1, #0]
 80043d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80043da:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043de:	688d      	ldr	r5, [r1, #8]
 80043e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043e4:	4d0c      	ldr	r5, [pc, #48]	@ (8004418 <TIM_OC2_SetConfig+0x58>)
 80043e6:	42a8      	cmp	r0, r5
 80043e8:	d006      	beq.n	80043f8 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80043ea:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80043ec:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80043ee:	684a      	ldr	r2, [r1, #4]
 80043f0:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80043f2:	6203      	str	r3, [r0, #32]
}
 80043f4:	bc30      	pop	{r4, r5}
 80043f6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80043f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043fc:	68cd      	ldr	r5, [r1, #12]
 80043fe:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004406:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800440a:	694d      	ldr	r5, [r1, #20]
 800440c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004410:	698d      	ldr	r5, [r1, #24]
 8004412:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004416:	e7e8      	b.n	80043ea <TIM_OC2_SetConfig+0x2a>
 8004418:	40012c00 	.word	0x40012c00

0800441c <HAL_TIM_PWM_ConfigChannel>:
{
 800441c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800441e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004422:	2b01      	cmp	r3, #1
 8004424:	d066      	beq.n	80044f4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004426:	4604      	mov	r4, r0
 8004428:	460d      	mov	r5, r1
 800442a:	2301      	movs	r3, #1
 800442c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8004430:	2a0c      	cmp	r2, #12
 8004432:	d85a      	bhi.n	80044ea <HAL_TIM_PWM_ConfigChannel+0xce>
 8004434:	e8df f002 	tbb	[pc, r2]
 8004438:	59595907 	.word	0x59595907
 800443c:	5959591b 	.word	0x5959591b
 8004440:	59595930 	.word	0x59595930
 8004444:	44          	.byte	0x44
 8004445:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004446:	6800      	ldr	r0, [r0, #0]
 8004448:	f7ff fd90 	bl	8003f6c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800444c:	6822      	ldr	r2, [r4, #0]
 800444e:	6993      	ldr	r3, [r2, #24]
 8004450:	f043 0308 	orr.w	r3, r3, #8
 8004454:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	6993      	ldr	r3, [r2, #24]
 800445a:	f023 0304 	bic.w	r3, r3, #4
 800445e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004460:	6822      	ldr	r2, [r4, #0]
 8004462:	6993      	ldr	r3, [r2, #24]
 8004464:	6929      	ldr	r1, [r5, #16]
 8004466:	430b      	orrs	r3, r1
 8004468:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800446a:	2000      	movs	r0, #0
      break;
 800446c:	e03e      	b.n	80044ec <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800446e:	6800      	ldr	r0, [r0, #0]
 8004470:	f7ff ffa6 	bl	80043c0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	6993      	ldr	r3, [r2, #24]
 8004478:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800447c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800447e:	6822      	ldr	r2, [r4, #0]
 8004480:	6993      	ldr	r3, [r2, #24]
 8004482:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004486:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004488:	6822      	ldr	r2, [r4, #0]
 800448a:	6993      	ldr	r3, [r2, #24]
 800448c:	6929      	ldr	r1, [r5, #16]
 800448e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004492:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004494:	2000      	movs	r0, #0
      break;
 8004496:	e029      	b.n	80044ec <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004498:	6800      	ldr	r0, [r0, #0]
 800449a:	f7ff fd91 	bl	8003fc0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800449e:	6822      	ldr	r2, [r4, #0]
 80044a0:	69d3      	ldr	r3, [r2, #28]
 80044a2:	f043 0308 	orr.w	r3, r3, #8
 80044a6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044a8:	6822      	ldr	r2, [r4, #0]
 80044aa:	69d3      	ldr	r3, [r2, #28]
 80044ac:	f023 0304 	bic.w	r3, r3, #4
 80044b0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	69d3      	ldr	r3, [r2, #28]
 80044b6:	6929      	ldr	r1, [r5, #16]
 80044b8:	430b      	orrs	r3, r1
 80044ba:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80044bc:	2000      	movs	r0, #0
      break;
 80044be:	e015      	b.n	80044ec <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044c0:	6800      	ldr	r0, [r0, #0]
 80044c2:	f7ff fdab 	bl	800401c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044c6:	6822      	ldr	r2, [r4, #0]
 80044c8:	69d3      	ldr	r3, [r2, #28]
 80044ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80044ce:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044d0:	6822      	ldr	r2, [r4, #0]
 80044d2:	69d3      	ldr	r3, [r2, #28]
 80044d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044d8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044da:	6822      	ldr	r2, [r4, #0]
 80044dc:	69d3      	ldr	r3, [r2, #28]
 80044de:	6929      	ldr	r1, [r5, #16]
 80044e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80044e4:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80044e6:	2000      	movs	r0, #0
      break;
 80044e8:	e000      	b.n	80044ec <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80044ea:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80044ec:	2300      	movs	r3, #0
 80044ee:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80044f4:	2002      	movs	r0, #2
 80044f6:	e7fc      	b.n	80044f2 <HAL_TIM_PWM_ConfigChannel+0xd6>

080044f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044fa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044fc:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004500:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004504:	430a      	orrs	r2, r1
 8004506:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800450a:	6082      	str	r2, [r0, #8]
}
 800450c:	bc10      	pop	{r4}
 800450e:	4770      	bx	lr

08004510 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004510:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d078      	beq.n	800460a <HAL_TIM_ConfigClockSource+0xfa>
{
 8004518:	b510      	push	{r4, lr}
 800451a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800451c:	2301      	movs	r3, #1
 800451e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004522:	2302      	movs	r3, #2
 8004524:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004528:	6802      	ldr	r2, [r0, #0]
 800452a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800452c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004530:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004534:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004536:	680b      	ldr	r3, [r1, #0]
 8004538:	2b60      	cmp	r3, #96	@ 0x60
 800453a:	d04c      	beq.n	80045d6 <HAL_TIM_ConfigClockSource+0xc6>
 800453c:	d829      	bhi.n	8004592 <HAL_TIM_ConfigClockSource+0x82>
 800453e:	2b40      	cmp	r3, #64	@ 0x40
 8004540:	d054      	beq.n	80045ec <HAL_TIM_ConfigClockSource+0xdc>
 8004542:	d90c      	bls.n	800455e <HAL_TIM_ConfigClockSource+0x4e>
 8004544:	2b50      	cmp	r3, #80	@ 0x50
 8004546:	d122      	bne.n	800458e <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004548:	68ca      	ldr	r2, [r1, #12]
 800454a:	6849      	ldr	r1, [r1, #4]
 800454c:	6800      	ldr	r0, [r0, #0]
 800454e:	f7ff fd89 	bl	8004064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004552:	2150      	movs	r1, #80	@ 0x50
 8004554:	6820      	ldr	r0, [r4, #0]
 8004556:	f7ff fdaa 	bl	80040ae <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2000      	movs	r0, #0
      break;
 800455c:	e005      	b.n	800456a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800455e:	2b20      	cmp	r3, #32
 8004560:	d00d      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x6e>
 8004562:	d909      	bls.n	8004578 <HAL_TIM_ConfigClockSource+0x68>
 8004564:	2b30      	cmp	r3, #48	@ 0x30
 8004566:	d00a      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8004568:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800456a:	2301      	movs	r3, #1
 800456c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004570:	2300      	movs	r3, #0
 8004572:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004576:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004578:	b10b      	cbz	r3, 800457e <HAL_TIM_ConfigClockSource+0x6e>
 800457a:	2b10      	cmp	r3, #16
 800457c:	d105      	bne.n	800458a <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800457e:	4619      	mov	r1, r3
 8004580:	6820      	ldr	r0, [r4, #0]
 8004582:	f7ff fd94 	bl	80040ae <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004586:	2000      	movs	r0, #0
      break;
 8004588:	e7ef      	b.n	800456a <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800458a:	2001      	movs	r0, #1
 800458c:	e7ed      	b.n	800456a <HAL_TIM_ConfigClockSource+0x5a>
 800458e:	2001      	movs	r0, #1
 8004590:	e7eb      	b.n	800456a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004596:	d034      	beq.n	8004602 <HAL_TIM_ConfigClockSource+0xf2>
 8004598:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800459c:	d10c      	bne.n	80045b8 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 800459e:	68cb      	ldr	r3, [r1, #12]
 80045a0:	684a      	ldr	r2, [r1, #4]
 80045a2:	6889      	ldr	r1, [r1, #8]
 80045a4:	6800      	ldr	r0, [r0, #0]
 80045a6:	f7ff ffa7 	bl	80044f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045aa:	6822      	ldr	r2, [r4, #0]
 80045ac:	6893      	ldr	r3, [r2, #8]
 80045ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045b2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80045b4:	2000      	movs	r0, #0
      break;
 80045b6:	e7d8      	b.n	800456a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80045b8:	2b70      	cmp	r3, #112	@ 0x70
 80045ba:	d124      	bne.n	8004606 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 80045bc:	68cb      	ldr	r3, [r1, #12]
 80045be:	684a      	ldr	r2, [r1, #4]
 80045c0:	6889      	ldr	r1, [r1, #8]
 80045c2:	6800      	ldr	r0, [r0, #0]
 80045c4:	f7ff ff98 	bl	80044f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80045c8:	6822      	ldr	r2, [r4, #0]
 80045ca:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80045d0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80045d2:	2000      	movs	r0, #0
      break;
 80045d4:	e7c9      	b.n	800456a <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045d6:	68ca      	ldr	r2, [r1, #12]
 80045d8:	6849      	ldr	r1, [r1, #4]
 80045da:	6800      	ldr	r0, [r0, #0]
 80045dc:	f7ff fd54 	bl	8004088 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045e0:	2160      	movs	r1, #96	@ 0x60
 80045e2:	6820      	ldr	r0, [r4, #0]
 80045e4:	f7ff fd63 	bl	80040ae <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80045e8:	2000      	movs	r0, #0
      break;
 80045ea:	e7be      	b.n	800456a <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ec:	68ca      	ldr	r2, [r1, #12]
 80045ee:	6849      	ldr	r1, [r1, #4]
 80045f0:	6800      	ldr	r0, [r0, #0]
 80045f2:	f7ff fd37 	bl	8004064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045f6:	2140      	movs	r1, #64	@ 0x40
 80045f8:	6820      	ldr	r0, [r4, #0]
 80045fa:	f7ff fd58 	bl	80040ae <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80045fe:	2000      	movs	r0, #0
      break;
 8004600:	e7b3      	b.n	800456a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8004602:	2000      	movs	r0, #0
 8004604:	e7b1      	b.n	800456a <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8004606:	2001      	movs	r0, #1
 8004608:	e7af      	b.n	800456a <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800460a:	2002      	movs	r0, #2
}
 800460c:	4770      	bx	lr

0800460e <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800460e:	f001 011f 	and.w	r1, r1, #31
 8004612:	f04f 0c01 	mov.w	ip, #1
 8004616:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800461a:	6a03      	ldr	r3, [r0, #32]
 800461c:	ea23 030c 	bic.w	r3, r3, ip
 8004620:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004622:	6a03      	ldr	r3, [r0, #32]
 8004624:	408a      	lsls	r2, r1
 8004626:	4313      	orrs	r3, r2
 8004628:	6203      	str	r3, [r0, #32]
}
 800462a:	4770      	bx	lr

0800462c <HAL_TIM_PWM_Start_IT>:
{
 800462c:	b510      	push	{r4, lr}
 800462e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004630:	4608      	mov	r0, r1
 8004632:	2900      	cmp	r1, #0
 8004634:	d130      	bne.n	8004698 <HAL_TIM_PWM_Start_IT+0x6c>
 8004636:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800463a:	b2db      	uxtb	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	bf18      	it	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 8090 	bne.w	8004768 <HAL_TIM_PWM_Start_IT+0x13c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004648:	2800      	cmp	r0, #0
 800464a:	d13e      	bne.n	80046ca <HAL_TIM_PWM_Start_IT+0x9e>
 800464c:	2302      	movs	r3, #2
 800464e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	68d3      	ldr	r3, [r2, #12]
 8004656:	f043 0302 	orr.w	r3, r3, #2
 800465a:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800465c:	2201      	movs	r2, #1
 800465e:	4601      	mov	r1, r0
 8004660:	6820      	ldr	r0, [r4, #0]
 8004662:	f7ff ffd4 	bl	800460e <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	4a42      	ldr	r2, [pc, #264]	@ (8004774 <HAL_TIM_PWM_Start_IT+0x148>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d06c      	beq.n	8004748 <HAL_TIM_PWM_Start_IT+0x11c>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	4a40      	ldr	r2, [pc, #256]	@ (8004774 <HAL_TIM_PWM_Start_IT+0x148>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d06d      	beq.n	8004752 <HAL_TIM_PWM_Start_IT+0x126>
 8004676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800467a:	d06a      	beq.n	8004752 <HAL_TIM_PWM_Start_IT+0x126>
 800467c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004680:	4293      	cmp	r3, r2
 8004682:	d066      	beq.n	8004752 <HAL_TIM_PWM_Start_IT+0x126>
 8004684:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004688:	4293      	cmp	r3, r2
 800468a:	d062      	beq.n	8004752 <HAL_TIM_PWM_Start_IT+0x126>
      __HAL_TIM_ENABLE(htim);
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	2000      	movs	r0, #0
 8004696:	e068      	b.n	800476a <HAL_TIM_PWM_Start_IT+0x13e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004698:	2904      	cmp	r1, #4
 800469a:	d008      	beq.n	80046ae <HAL_TIM_PWM_Start_IT+0x82>
 800469c:	2908      	cmp	r1, #8
 800469e:	d00d      	beq.n	80046bc <HAL_TIM_PWM_Start_IT+0x90>
 80046a0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	bf18      	it	ne
 80046aa:	2301      	movne	r3, #1
 80046ac:	e7c9      	b.n	8004642 <HAL_TIM_PWM_Start_IT+0x16>
 80046ae:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	bf18      	it	ne
 80046b8:	2301      	movne	r3, #1
 80046ba:	e7c2      	b.n	8004642 <HAL_TIM_PWM_Start_IT+0x16>
 80046bc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	bf18      	it	ne
 80046c6:	2301      	movne	r3, #1
 80046c8:	e7bb      	b.n	8004642 <HAL_TIM_PWM_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ca:	2804      	cmp	r0, #4
 80046cc:	d024      	beq.n	8004718 <HAL_TIM_PWM_Start_IT+0xec>
 80046ce:	2808      	cmp	r0, #8
 80046d0:	d02b      	beq.n	800472a <HAL_TIM_PWM_Start_IT+0xfe>
 80046d2:	2302      	movs	r3, #2
 80046d4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 80046d8:	280c      	cmp	r0, #12
 80046da:	d847      	bhi.n	800476c <HAL_TIM_PWM_Start_IT+0x140>
 80046dc:	a301      	add	r3, pc, #4	@ (adr r3, 80046e4 <HAL_TIM_PWM_Start_IT+0xb8>)
 80046de:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80046e2:	bf00      	nop
 80046e4:	08004653 	.word	0x08004653
 80046e8:	0800476d 	.word	0x0800476d
 80046ec:	0800476d 	.word	0x0800476d
 80046f0:	0800476d 	.word	0x0800476d
 80046f4:	0800471f 	.word	0x0800471f
 80046f8:	0800476d 	.word	0x0800476d
 80046fc:	0800476d 	.word	0x0800476d
 8004700:	0800476d 	.word	0x0800476d
 8004704:	08004731 	.word	0x08004731
 8004708:	0800476d 	.word	0x0800476d
 800470c:	0800476d 	.word	0x0800476d
 8004710:	0800476d 	.word	0x0800476d
 8004714:	0800473d 	.word	0x0800473d
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004718:	2302      	movs	r3, #2
 800471a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	68d3      	ldr	r3, [r2, #12]
 8004722:	f043 0304 	orr.w	r3, r3, #4
 8004726:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004728:	e798      	b.n	800465c <HAL_TIM_PWM_Start_IT+0x30>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800472a:	2302      	movs	r3, #2
 800472c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004730:	6822      	ldr	r2, [r4, #0]
 8004732:	68d3      	ldr	r3, [r2, #12]
 8004734:	f043 0308 	orr.w	r3, r3, #8
 8004738:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 800473a:	e78f      	b.n	800465c <HAL_TIM_PWM_Start_IT+0x30>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	68d3      	ldr	r3, [r2, #12]
 8004740:	f043 0310 	orr.w	r3, r3, #16
 8004744:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004746:	e789      	b.n	800465c <HAL_TIM_PWM_Start_IT+0x30>
      __HAL_TIM_MOE_ENABLE(htim);
 8004748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800474a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800474e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004750:	e78d      	b.n	800466e <HAL_TIM_PWM_Start_IT+0x42>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004758:	2a06      	cmp	r2, #6
 800475a:	d009      	beq.n	8004770 <HAL_TIM_PWM_Start_IT+0x144>
        __HAL_TIM_ENABLE(htim);
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	2000      	movs	r0, #0
 8004766:	e000      	b.n	800476a <HAL_TIM_PWM_Start_IT+0x13e>
    return HAL_ERROR;
 8004768:	2001      	movs	r0, #1
}
 800476a:	bd10      	pop	{r4, pc}
  switch (Channel)
 800476c:	2001      	movs	r0, #1
 800476e:	e7fc      	b.n	800476a <HAL_TIM_PWM_Start_IT+0x13e>
 8004770:	2000      	movs	r0, #0
 8004772:	e7fa      	b.n	800476a <HAL_TIM_PWM_Start_IT+0x13e>
 8004774:	40012c00 	.word	0x40012c00

08004778 <HAL_TIM_PWM_Stop_IT>:
{
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	4605      	mov	r5, r0
 800477c:	460c      	mov	r4, r1
  switch (Channel)
 800477e:	290c      	cmp	r1, #12
 8004780:	d85f      	bhi.n	8004842 <HAL_TIM_PWM_Stop_IT+0xca>
 8004782:	e8df f001 	tbb	[pc, r1]
 8004786:	5e07      	.short	0x5e07
 8004788:	5e2a5e5e 	.word	0x5e2a5e5e
 800478c:	5e305e5e 	.word	0x5e305e5e
 8004790:	5e5e      	.short	0x5e5e
 8004792:	36          	.byte	0x36
 8004793:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004794:	6802      	ldr	r2, [r0, #0]
 8004796:	68d3      	ldr	r3, [r2, #12]
 8004798:	f023 0302 	bic.w	r3, r3, #2
 800479c:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800479e:	2200      	movs	r2, #0
 80047a0:	4621      	mov	r1, r4
 80047a2:	6828      	ldr	r0, [r5, #0]
 80047a4:	f7ff ff33 	bl	800460e <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	4a27      	ldr	r2, [pc, #156]	@ (8004848 <HAL_TIM_PWM_Stop_IT+0xd0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d026      	beq.n	80047fe <HAL_TIM_PWM_Stop_IT+0x86>
    __HAL_TIM_DISABLE(htim);
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	6a19      	ldr	r1, [r3, #32]
 80047b4:	f241 1211 	movw	r2, #4369	@ 0x1111
 80047b8:	4211      	tst	r1, r2
 80047ba:	d108      	bne.n	80047ce <HAL_TIM_PWM_Stop_IT+0x56>
 80047bc:	6a19      	ldr	r1, [r3, #32]
 80047be:	f240 4244 	movw	r2, #1092	@ 0x444
 80047c2:	4211      	tst	r1, r2
 80047c4:	d103      	bne.n	80047ce <HAL_TIM_PWM_Stop_IT+0x56>
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	f022 0201 	bic.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80047ce:	bb2c      	cbnz	r4, 800481c <HAL_TIM_PWM_Stop_IT+0xa4>
 80047d0:	2301      	movs	r3, #1
 80047d2:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
 80047d6:	2000      	movs	r0, #0
 80047d8:	e034      	b.n	8004844 <HAL_TIM_PWM_Stop_IT+0xcc>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80047da:	6802      	ldr	r2, [r0, #0]
 80047dc:	68d3      	ldr	r3, [r2, #12]
 80047de:	f023 0304 	bic.w	r3, r3, #4
 80047e2:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80047e4:	e7db      	b.n	800479e <HAL_TIM_PWM_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80047e6:	6802      	ldr	r2, [r0, #0]
 80047e8:	68d3      	ldr	r3, [r2, #12]
 80047ea:	f023 0308 	bic.w	r3, r3, #8
 80047ee:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80047f0:	e7d5      	b.n	800479e <HAL_TIM_PWM_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80047f2:	6802      	ldr	r2, [r0, #0]
 80047f4:	68d3      	ldr	r3, [r2, #12]
 80047f6:	f023 0310 	bic.w	r3, r3, #16
 80047fa:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 80047fc:	e7cf      	b.n	800479e <HAL_TIM_PWM_Stop_IT+0x26>
      __HAL_TIM_MOE_DISABLE(htim);
 80047fe:	6a19      	ldr	r1, [r3, #32]
 8004800:	f241 1211 	movw	r2, #4369	@ 0x1111
 8004804:	4211      	tst	r1, r2
 8004806:	d1d3      	bne.n	80047b0 <HAL_TIM_PWM_Stop_IT+0x38>
 8004808:	6a19      	ldr	r1, [r3, #32]
 800480a:	f240 4244 	movw	r2, #1092	@ 0x444
 800480e:	4211      	tst	r1, r2
 8004810:	d1ce      	bne.n	80047b0 <HAL_TIM_PWM_Stop_IT+0x38>
 8004812:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004814:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004818:	645a      	str	r2, [r3, #68]	@ 0x44
 800481a:	e7c9      	b.n	80047b0 <HAL_TIM_PWM_Stop_IT+0x38>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800481c:	2c04      	cmp	r4, #4
 800481e:	d006      	beq.n	800482e <HAL_TIM_PWM_Stop_IT+0xb6>
 8004820:	2c08      	cmp	r4, #8
 8004822:	d009      	beq.n	8004838 <HAL_TIM_PWM_Stop_IT+0xc0>
 8004824:	2301      	movs	r3, #1
 8004826:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
 800482a:	2000      	movs	r0, #0
 800482c:	e00a      	b.n	8004844 <HAL_TIM_PWM_Stop_IT+0xcc>
 800482e:	2301      	movs	r3, #1
 8004830:	f885 303f 	strb.w	r3, [r5, #63]	@ 0x3f
 8004834:	2000      	movs	r0, #0
 8004836:	e005      	b.n	8004844 <HAL_TIM_PWM_Stop_IT+0xcc>
 8004838:	2301      	movs	r3, #1
 800483a:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800483e:	2000      	movs	r0, #0
 8004840:	e000      	b.n	8004844 <HAL_TIM_PWM_Stop_IT+0xcc>
  switch (Channel)
 8004842:	2001      	movs	r0, #1
}
 8004844:	bd38      	pop	{r3, r4, r5, pc}
 8004846:	bf00      	nop
 8004848:	40012c00 	.word	0x40012c00

0800484c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800484c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004850:	2a01      	cmp	r2, #1
 8004852:	d02c      	beq.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8004854:	b410      	push	{r4}
 8004856:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004858:	2201      	movs	r2, #1
 800485a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485e:	2202      	movs	r2, #2
 8004860:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004864:	6802      	ldr	r2, [r0, #0]
 8004866:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004868:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800486a:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800486e:	6808      	ldr	r0, [r1, #0]
 8004870:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004874:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	480e      	ldr	r0, [pc, #56]	@ (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800487a:	4282      	cmp	r2, r0
 800487c:	d00a      	beq.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 800487e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004882:	d007      	beq.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004884:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8004888:	4282      	cmp	r2, r0
 800488a:	d003      	beq.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 800488c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004890:	4282      	cmp	r2, r0
 8004892:	d104      	bne.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004894:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004898:	6849      	ldr	r1, [r1, #4]
 800489a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800489c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048a4:	2000      	movs	r0, #0
 80048a6:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80048aa:	bc10      	pop	{r4}
 80048ac:	4770      	bx	lr
  __HAL_LOCK(htim);
 80048ae:	2002      	movs	r0, #2
}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40012c00 	.word	0x40012c00

080048b8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048b8:	4770      	bx	lr

080048ba <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048ba:	4770      	bx	lr

080048bc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048bc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	f102 030c 	add.w	r3, r2, #12
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	320c      	adds	r2, #12
 80048cc:	e842 3100 	strex	r1, r3, [r2]
 80048d0:	2900      	cmp	r1, #0
 80048d2:	d1f3      	bne.n	80048bc <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	f102 0314 	add.w	r3, r2, #20
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	3214      	adds	r2, #20
 80048e4:	e842 3100 	strex	r1, r3, [r2]
 80048e8:	2900      	cmp	r1, #0
 80048ea:	d1f3      	bne.n	80048d4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d005      	beq.n	80048fe <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048f2:	2320      	movs	r3, #32
 80048f4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f8:	2300      	movs	r3, #0
 80048fa:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80048fc:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	f102 030c 	add.w	r3, r2, #12
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	320c      	adds	r2, #12
 800490e:	e842 3100 	strex	r1, r3, [r2]
 8004912:	2900      	cmp	r1, #0
 8004914:	d1f3      	bne.n	80048fe <UART_EndRxTransfer+0x42>
 8004916:	e7ec      	b.n	80048f2 <UART_EndRxTransfer+0x36>

08004918 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004918:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b21      	cmp	r3, #33	@ 0x21
 8004920:	d001      	beq.n	8004926 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004922:	2002      	movs	r0, #2
  }
}
 8004924:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004926:	6883      	ldr	r3, [r0, #8]
 8004928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800492c:	d017      	beq.n	800495e <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800492e:	6a03      	ldr	r3, [r0, #32]
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	6202      	str	r2, [r0, #32]
 8004934:	781a      	ldrb	r2, [r3, #0]
 8004936:	6803      	ldr	r3, [r0, #0]
 8004938:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800493a:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29b      	uxth	r3, r3
 8004942:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8004944:	b94b      	cbnz	r3, 800495a <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004946:	6802      	ldr	r2, [r0, #0]
 8004948:	68d3      	ldr	r3, [r2, #12]
 800494a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800494e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004950:	6802      	ldr	r2, [r0, #0]
 8004952:	68d3      	ldr	r3, [r2, #12]
 8004954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004958:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800495a:	2000      	movs	r0, #0
 800495c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800495e:	6903      	ldr	r3, [r0, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e4      	bne.n	800492e <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004964:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	6802      	ldr	r2, [r0, #0]
 800496a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496e:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004970:	6a03      	ldr	r3, [r0, #32]
 8004972:	3302      	adds	r3, #2
 8004974:	6203      	str	r3, [r0, #32]
 8004976:	e7e0      	b.n	800493a <UART_Transmit_IT+0x22>

08004978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004978:	b510      	push	{r4, lr}
 800497a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800497c:	6802      	ldr	r2, [r0, #0]
 800497e:	6913      	ldr	r3, [r2, #16]
 8004980:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004984:	68c1      	ldr	r1, [r0, #12]
 8004986:	430b      	orrs	r3, r1
 8004988:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800498a:	6883      	ldr	r3, [r0, #8]
 800498c:	6902      	ldr	r2, [r0, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	6942      	ldr	r2, [r0, #20]
 8004992:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004994:	6801      	ldr	r1, [r0, #0]
 8004996:	68cb      	ldr	r3, [r1, #12]
 8004998:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800499c:	f023 030c 	bic.w	r3, r3, #12
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049a4:	6802      	ldr	r2, [r0, #0]
 80049a6:	6953      	ldr	r3, [r2, #20]
 80049a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ac:	6981      	ldr	r1, [r0, #24]
 80049ae:	430b      	orrs	r3, r1
 80049b0:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80049b2:	6802      	ldr	r2, [r0, #0]
 80049b4:	4b13      	ldr	r3, [pc, #76]	@ (8004a04 <UART_SetConfig+0x8c>)
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d020      	beq.n	80049fc <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049ba:	f7ff fa99 	bl	8003ef0 <HAL_RCC_GetPCLK1Freq>
 80049be:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80049c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80049c8:	6863      	ldr	r3, [r4, #4]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80049d0:	480d      	ldr	r0, [pc, #52]	@ (8004a08 <UART_SetConfig+0x90>)
 80049d2:	fba0 3102 	umull	r3, r1, r0, r2
 80049d6:	0949      	lsrs	r1, r1, #5
 80049d8:	2364      	movs	r3, #100	@ 0x64
 80049da:	fb03 2311 	mls	r3, r3, r1, r2
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	3332      	adds	r3, #50	@ 0x32
 80049e2:	fba0 0303 	umull	r0, r3, r0, r3
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049ec:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80049f0:	f003 030f 	and.w	r3, r3, #15
 80049f4:	6821      	ldr	r1, [r4, #0]
 80049f6:	4413      	add	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 80049fa:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80049fc:	f7ff fa88 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	e7dd      	b.n	80049c0 <UART_SetConfig+0x48>
 8004a04:	40013800 	.word	0x40013800
 8004a08:	51eb851f 	.word	0x51eb851f

08004a0c <UART_WaitOnFlagUntilTimeout>:
{
 8004a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a10:	b083      	sub	sp, #12
 8004a12:	4605      	mov	r5, r0
 8004a14:	460e      	mov	r6, r1
 8004a16:	4617      	mov	r7, r2
 8004a18:	4699      	mov	r9, r3
 8004a1a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1e:	682b      	ldr	r3, [r5, #0]
 8004a20:	681c      	ldr	r4, [r3, #0]
 8004a22:	ea36 0404 	bics.w	r4, r6, r4
 8004a26:	bf0c      	ite	eq
 8004a28:	2401      	moveq	r4, #1
 8004a2a:	2400      	movne	r4, #0
 8004a2c:	42bc      	cmp	r4, r7
 8004a2e:	d128      	bne.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8004a30:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004a34:	d0f3      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fc fde7 	bl	8001608 <HAL_GetTick>
 8004a3a:	eba0 0009 	sub.w	r0, r0, r9
 8004a3e:	4540      	cmp	r0, r8
 8004a40:	d823      	bhi.n	8004a8a <UART_WaitOnFlagUntilTimeout+0x7e>
 8004a42:	f1b8 0f00 	cmp.w	r8, #0
 8004a46:	d022      	beq.n	8004a8e <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	f012 0f04 	tst.w	r2, #4
 8004a50:	d0e5      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x12>
 8004a52:	2e80      	cmp	r6, #128	@ 0x80
 8004a54:	d0e3      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x12>
 8004a56:	2e40      	cmp	r6, #64	@ 0x40
 8004a58:	d0e1      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	f012 0f08 	tst.w	r2, #8
 8004a60:	d0dd      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a62:	2400      	movs	r4, #0
 8004a64:	9401      	str	r4, [sp, #4]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	9201      	str	r2, [sp, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8004a70:	4628      	mov	r0, r5
 8004a72:	f7ff ff23 	bl	80048bc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a76:	2308      	movs	r3, #8
 8004a78:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8004a7a:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8004a7e:	2001      	movs	r0, #1
 8004a80:	e000      	b.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8004a82:	2000      	movs	r0, #0
}
 8004a84:	b003      	add	sp, #12
 8004a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8004a8a:	2003      	movs	r0, #3
 8004a8c:	e7fa      	b.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x78>
 8004a8e:	2003      	movs	r0, #3
 8004a90:	e7f8      	b.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x78>

08004a92 <HAL_UART_Init>:
  if (huart == NULL)
 8004a92:	b360      	cbz	r0, 8004aee <HAL_UART_Init+0x5c>
{
 8004a94:	b510      	push	{r4, lr}
 8004a96:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004a98:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004a9c:	b313      	cbz	r3, 8004ae4 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8004a9e:	2324      	movs	r3, #36	@ 0x24
 8004aa0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004aa4:	6822      	ldr	r2, [r4, #0]
 8004aa6:	68d3      	ldr	r3, [r2, #12]
 8004aa8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004aac:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f7ff ff62 	bl	8004978 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ab4:	6822      	ldr	r2, [r4, #0]
 8004ab6:	6913      	ldr	r3, [r2, #16]
 8004ab8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004abc:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004abe:	6822      	ldr	r2, [r4, #0]
 8004ac0:	6953      	ldr	r3, [r2, #20]
 8004ac2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004ac6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004ac8:	6822      	ldr	r2, [r4, #0]
 8004aca:	68d3      	ldr	r3, [r2, #12]
 8004acc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004ad0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ad6:	2320      	movs	r3, #32
 8004ad8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004adc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ae0:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004ae2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004ae4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004ae8:	f7fc fc18 	bl	800131c <HAL_UART_MspInit>
 8004aec:	e7d7      	b.n	8004a9e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004aee:	2001      	movs	r0, #1
}
 8004af0:	4770      	bx	lr

08004af2 <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d031      	beq.n	8004b5a <HAL_HalfDuplex_Init+0x68>
{
 8004af6:	b510      	push	{r4, lr}
 8004af8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004afa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004afe:	b33b      	cbz	r3, 8004b50 <HAL_HalfDuplex_Init+0x5e>
  huart->gState = HAL_UART_STATE_BUSY;
 8004b00:	2324      	movs	r3, #36	@ 0x24
 8004b02:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	68d3      	ldr	r3, [r2, #12]
 8004b0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b0e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004b10:	4620      	mov	r0, r4
 8004b12:	f7ff ff31 	bl	8004978 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b16:	6822      	ldr	r2, [r4, #0]
 8004b18:	6913      	ldr	r3, [r2, #16]
 8004b1a:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004b1e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004b20:	6822      	ldr	r2, [r4, #0]
 8004b22:	6953      	ldr	r3, [r2, #20]
 8004b24:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004b28:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004b2a:	6822      	ldr	r2, [r4, #0]
 8004b2c:	6953      	ldr	r3, [r2, #20]
 8004b2e:	f043 0308 	orr.w	r3, r3, #8
 8004b32:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004b34:	6822      	ldr	r2, [r4, #0]
 8004b36:	68d3      	ldr	r3, [r2, #12]
 8004b38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b3c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3e:	2000      	movs	r0, #0
 8004b40:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b42:	2320      	movs	r3, #32
 8004b44:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b4c:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004b4e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004b50:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004b54:	f7fc fbe2 	bl	800131c <HAL_UART_MspInit>
 8004b58:	e7d2      	b.n	8004b00 <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 8004b5a:	2001      	movs	r0, #1
}
 8004b5c:	4770      	bx	lr

08004b5e <HAL_UART_Transmit>:
{
 8004b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004b66:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d156      	bne.n	8004c1e <HAL_UART_Transmit+0xc0>
 8004b70:	4604      	mov	r4, r0
 8004b72:	460d      	mov	r5, r1
 8004b74:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004b76:	2900      	cmp	r1, #0
 8004b78:	d055      	beq.n	8004c26 <HAL_UART_Transmit+0xc8>
 8004b7a:	b90a      	cbnz	r2, 8004b80 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8004b7c:	2001      	movs	r0, #1
 8004b7e:	e04f      	b.n	8004c20 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b84:	2321      	movs	r3, #33	@ 0x21
 8004b86:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8004b8a:	f7fc fd3d 	bl	8001608 <HAL_GetTick>
 8004b8e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004b90:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b94:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b98:	68a3      	ldr	r3, [r4, #8]
 8004b9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b9e:	d002      	beq.n	8004ba6 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8004ba0:	f04f 0800 	mov.w	r8, #0
 8004ba4:	e014      	b.n	8004bd0 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba6:	6923      	ldr	r3, [r4, #16]
 8004ba8:	b32b      	cbz	r3, 8004bf6 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8004baa:	f04f 0800 	mov.w	r8, #0
 8004bae:	e00f      	b.n	8004bd0 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8004bb0:	2320      	movs	r3, #32
 8004bb2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8004bb6:	2003      	movs	r0, #3
 8004bb8:	e032      	b.n	8004c20 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bba:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004bbe:	6822      	ldr	r2, [r4, #0]
 8004bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004bc6:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8004bc8:	b292      	uxth	r2, r2
 8004bca:	3a01      	subs	r2, #1
 8004bcc:	b292      	uxth	r2, r2
 8004bce:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004bd0:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	b193      	cbz	r3, 8004bfc <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bd6:	9600      	str	r6, [sp, #0]
 8004bd8:	463b      	mov	r3, r7
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2180      	movs	r1, #128	@ 0x80
 8004bde:	4620      	mov	r0, r4
 8004be0:	f7ff ff14 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d1e3      	bne.n	8004bb0 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8004be8:	2d00      	cmp	r5, #0
 8004bea:	d0e6      	beq.n	8004bba <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bec:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bf4:	e7e7      	b.n	8004bc6 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8004bf6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004bf8:	2500      	movs	r5, #0
 8004bfa:	e7e9      	b.n	8004bd0 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bfc:	9600      	str	r6, [sp, #0]
 8004bfe:	463b      	mov	r3, r7
 8004c00:	2200      	movs	r2, #0
 8004c02:	2140      	movs	r1, #64	@ 0x40
 8004c04:	4620      	mov	r0, r4
 8004c06:	f7ff ff01 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 8004c0a:	b918      	cbnz	r0, 8004c14 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8004c0c:	2320      	movs	r3, #32
 8004c0e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8004c12:	e005      	b.n	8004c20 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8004c14:	2320      	movs	r3, #32
 8004c16:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8004c1a:	2003      	movs	r0, #3
 8004c1c:	e000      	b.n	8004c20 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8004c1e:	2002      	movs	r0, #2
}
 8004c20:	b002      	add	sp, #8
 8004c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004c26:	2001      	movs	r0, #1
 8004c28:	e7fa      	b.n	8004c20 <HAL_UART_Transmit+0xc2>

08004c2a <HAL_UART_Receive>:
{
 8004c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c32:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d159      	bne.n	8004cf0 <HAL_UART_Receive+0xc6>
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	460d      	mov	r5, r1
 8004c40:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004c42:	2900      	cmp	r1, #0
 8004c44:	d058      	beq.n	8004cf8 <HAL_UART_Receive+0xce>
 8004c46:	b90a      	cbnz	r2, 8004c4c <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 8004c48:	2001      	movs	r0, #1
 8004c4a:	e052      	b.n	8004cf2 <HAL_UART_Receive+0xc8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c50:	2222      	movs	r2, #34	@ 0x22
 8004c52:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c56:	6303      	str	r3, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 8004c58:	f7fc fcd6 	bl	8001608 <HAL_GetTick>
 8004c5c:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8004c5e:	f8a4 802c 	strh.w	r8, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004c62:	f8a4 802e 	strh.w	r8, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c66:	68a3      	ldr	r3, [r4, #8]
 8004c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c6c:	d002      	beq.n	8004c74 <HAL_UART_Receive+0x4a>
      pdata16bits = NULL;
 8004c6e:	f04f 0800 	mov.w	r8, #0
 8004c72:	e01c      	b.n	8004cae <HAL_UART_Receive+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c74:	6923      	ldr	r3, [r4, #16]
 8004c76:	b113      	cbz	r3, 8004c7e <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 8004c78:	f04f 0800 	mov.w	r8, #0
 8004c7c:	e017      	b.n	8004cae <HAL_UART_Receive+0x84>
      pdata16bits = (uint16_t *) pData;
 8004c7e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004c80:	2500      	movs	r5, #0
 8004c82:	e014      	b.n	8004cae <HAL_UART_Receive+0x84>
        huart->RxState = HAL_UART_STATE_READY;
 8004c84:	2320      	movs	r3, #32
 8004c86:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        return HAL_TIMEOUT;
 8004c8a:	2003      	movs	r0, #3
 8004c8c:	e031      	b.n	8004cf2 <HAL_UART_Receive+0xc8>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c96:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 8004c9a:	e003      	b.n	8004ca4 <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8004ca2:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8004ca4:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 8004ca6:	b292      	uxth	r2, r2
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	b292      	uxth	r2, r2
 8004cac:	85e2      	strh	r2, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004cae:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	b1c3      	cbz	r3, 8004ce6 <HAL_UART_Receive+0xbc>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cb4:	9600      	str	r6, [sp, #0]
 8004cb6:	463b      	mov	r3, r7
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2120      	movs	r1, #32
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f7ff fea5 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d1de      	bne.n	8004c84 <HAL_UART_Receive+0x5a>
      if (pdata8bits == NULL)
 8004cc6:	2d00      	cmp	r5, #0
 8004cc8:	d0e1      	beq.n	8004c8e <HAL_UART_Receive+0x64>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cca:	68a3      	ldr	r3, [r4, #8]
 8004ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd0:	d0e4      	beq.n	8004c9c <HAL_UART_Receive+0x72>
 8004cd2:	b913      	cbnz	r3, 8004cda <HAL_UART_Receive+0xb0>
 8004cd4:	6923      	ldr	r3, [r4, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0e0      	beq.n	8004c9c <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ce2:	702b      	strb	r3, [r5, #0]
 8004ce4:	e7dd      	b.n	8004ca2 <HAL_UART_Receive+0x78>
    huart->RxState = HAL_UART_STATE_READY;
 8004ce6:	2320      	movs	r3, #32
 8004ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 8004cec:	2000      	movs	r0, #0
 8004cee:	e000      	b.n	8004cf2 <HAL_UART_Receive+0xc8>
    return HAL_BUSY;
 8004cf0:	2002      	movs	r0, #2
}
 8004cf2:	b002      	add	sp, #8
 8004cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	e7fa      	b.n	8004cf2 <HAL_UART_Receive+0xc8>

08004cfc <HAL_UART_TxCpltCallback>:
}
 8004cfc:	4770      	bx	lr

08004cfe <UART_EndTransmit_IT>:
{
 8004cfe:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d00:	6801      	ldr	r1, [r0, #0]
 8004d02:	68ca      	ldr	r2, [r1, #12]
 8004d04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d08:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8004d10:	f7ff fff4 	bl	8004cfc <HAL_UART_TxCpltCallback>
}
 8004d14:	2000      	movs	r0, #0
 8004d16:	bd08      	pop	{r3, pc}

08004d18 <HAL_UART_RxCpltCallback>:
}
 8004d18:	4770      	bx	lr

08004d1a <HAL_UART_ErrorCallback>:
}
 8004d1a:	4770      	bx	lr

08004d1c <UART_DMAAbortOnError>:
{
 8004d1c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d1e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d24:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8004d26:	f7ff fff8 	bl	8004d1a <HAL_UART_ErrorCallback>
}
 8004d2a:	bd08      	pop	{r3, pc}

08004d2c <HAL_UARTEx_RxEventCallback>:
}
 8004d2c:	4770      	bx	lr

08004d2e <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d2e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b22      	cmp	r3, #34	@ 0x22
 8004d36:	d169      	bne.n	8004e0c <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d38:	6883      	ldr	r3, [r0, #8]
 8004d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d3e:	d04f      	beq.n	8004de0 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d40:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d46:	d004      	beq.n	8004d52 <UART_Receive_IT+0x24>
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d156      	bne.n	8004dfa <UART_Receive_IT+0xcc>
 8004d4c:	6903      	ldr	r3, [r0, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d153      	bne.n	8004dfa <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d52:	6803      	ldr	r3, [r0, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004d58:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8004d5e:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d151      	bne.n	8004e10 <UART_Receive_IT+0xe2>
{
 8004d6c:	b500      	push	{lr}
 8004d6e:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d70:	6802      	ldr	r2, [r0, #0]
 8004d72:	68d3      	ldr	r3, [r2, #12]
 8004d74:	f023 0320 	bic.w	r3, r3, #32
 8004d78:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d7a:	6802      	ldr	r2, [r0, #0]
 8004d7c:	68d3      	ldr	r3, [r2, #12]
 8004d7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d82:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d84:	6802      	ldr	r2, [r0, #0]
 8004d86:	6953      	ldr	r3, [r2, #20]
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004d8e:	2320      	movs	r3, #32
 8004d90:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d94:	2300      	movs	r3, #0
 8004d96:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d98:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d133      	bne.n	8004e06 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	f102 030c 	add.w	r3, r2, #12
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	320c      	adds	r2, #12
 8004db2:	e842 3100 	strex	r1, r3, [r2]
 8004db6:	2900      	cmp	r1, #0
 8004db8:	d1f3      	bne.n	8004da2 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004dba:	6803      	ldr	r3, [r0, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	f012 0f10 	tst.w	r2, #16
 8004dc2:	d006      	beq.n	8004dd2 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	9201      	str	r2, [sp, #4]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	9201      	str	r2, [sp, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dd2:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8004dd4:	f7ff ffaa 	bl	8004d2c <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004dd8:	2000      	movs	r0, #0
}
 8004dda:	b003      	add	sp, #12
 8004ddc:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de0:	6902      	ldr	r2, [r0, #16]
 8004de2:	2a00      	cmp	r2, #0
 8004de4:	d1ac      	bne.n	8004d40 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004de6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004de8:	6803      	ldr	r3, [r0, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004df2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004df4:	3302      	adds	r3, #2
 8004df6:	6283      	str	r3, [r0, #40]	@ 0x28
 8004df8:	e7b1      	b.n	8004d5e <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dfa:	6803      	ldr	r3, [r0, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e02:	7013      	strb	r3, [r2, #0]
 8004e04:	e7a8      	b.n	8004d58 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8004e06:	f7ff ff87 	bl	8004d18 <HAL_UART_RxCpltCallback>
 8004e0a:	e7e5      	b.n	8004dd8 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8004e0c:	2002      	movs	r0, #2
 8004e0e:	4770      	bx	lr
    return HAL_OK;
 8004e10:	2000      	movs	r0, #0
}
 8004e12:	4770      	bx	lr

08004e14 <HAL_UART_IRQHandler>:
{
 8004e14:	b510      	push	{r4, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e1a:	6802      	ldr	r2, [r0, #0]
 8004e1c:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e1e:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e20:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8004e22:	f013 0f0f 	tst.w	r3, #15
 8004e26:	d109      	bne.n	8004e3c <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e28:	f013 0f20 	tst.w	r3, #32
 8004e2c:	d00c      	beq.n	8004e48 <HAL_UART_IRQHandler+0x34>
 8004e2e:	f010 0f20 	tst.w	r0, #32
 8004e32:	d009      	beq.n	8004e48 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8004e34:	4620      	mov	r0, r4
 8004e36:	f7ff ff7a 	bl	8004d2e <UART_Receive_IT>
      return;
 8004e3a:	e016      	b.n	8004e6a <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e3c:	f011 0101 	ands.w	r1, r1, #1
 8004e40:	d115      	bne.n	8004e6e <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e42:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8004e46:	d112      	bne.n	8004e6e <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004e4a:	2901      	cmp	r1, #1
 8004e4c:	d079      	beq.n	8004f42 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e4e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004e52:	d003      	beq.n	8004e5c <HAL_UART_IRQHandler+0x48>
 8004e54:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8004e58:	f040 8113 	bne.w	8005082 <HAL_UART_IRQHandler+0x26e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e5c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004e60:	d003      	beq.n	8004e6a <HAL_UART_IRQHandler+0x56>
 8004e62:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8004e66:	f040 8110 	bne.w	800508a <HAL_UART_IRQHandler+0x276>
}
 8004e6a:	b002      	add	sp, #8
 8004e6c:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e6e:	f013 0f01 	tst.w	r3, #1
 8004e72:	d006      	beq.n	8004e82 <HAL_UART_IRQHandler+0x6e>
 8004e74:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8004e78:	d003      	beq.n	8004e82 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e7a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004e7c:	f042 0201 	orr.w	r2, r2, #1
 8004e80:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e82:	f013 0f04 	tst.w	r3, #4
 8004e86:	d004      	beq.n	8004e92 <HAL_UART_IRQHandler+0x7e>
 8004e88:	b119      	cbz	r1, 8004e92 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e8a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004e8c:	f042 0202 	orr.w	r2, r2, #2
 8004e90:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e92:	f013 0f02 	tst.w	r3, #2
 8004e96:	d004      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x8e>
 8004e98:	b119      	cbz	r1, 8004ea2 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e9a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004e9c:	f042 0204 	orr.w	r2, r2, #4
 8004ea0:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ea2:	f013 0f08 	tst.w	r3, #8
 8004ea6:	d007      	beq.n	8004eb8 <HAL_UART_IRQHandler+0xa4>
 8004ea8:	f010 0f20 	tst.w	r0, #32
 8004eac:	d100      	bne.n	8004eb0 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eae:	b119      	cbz	r1, 8004eb8 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004eb0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004eb2:	f042 0208 	orr.w	r2, r2, #8
 8004eb6:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eb8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004eba:	2a00      	cmp	r2, #0
 8004ebc:	d0d5      	beq.n	8004e6a <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ebe:	f013 0f20 	tst.w	r3, #32
 8004ec2:	d002      	beq.n	8004eca <HAL_UART_IRQHandler+0xb6>
 8004ec4:	f010 0f20 	tst.w	r0, #32
 8004ec8:	d129      	bne.n	8004f1e <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ed2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004ed4:	f012 0f08 	tst.w	r2, #8
 8004ed8:	d100      	bne.n	8004edc <HAL_UART_IRQHandler+0xc8>
 8004eda:	b363      	cbz	r3, 8004f36 <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8004edc:	4620      	mov	r0, r4
 8004ede:	f7ff fced 	bl	80048bc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004eea:	d020      	beq.n	8004f2e <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	f102 0314 	add.w	r3, r2, #20
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	3214      	adds	r2, #20
 8004efc:	e842 3100 	strex	r1, r3, [r2]
 8004f00:	2900      	cmp	r1, #0
 8004f02:	d1f3      	bne.n	8004eec <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8004f04:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004f06:	b173      	cbz	r3, 8004f26 <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f08:	4a62      	ldr	r2, [pc, #392]	@ (8005094 <HAL_UART_IRQHandler+0x280>)
 8004f0a:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f0c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004f0e:	f7fc fc33 	bl	8001778 <HAL_DMA_Abort_IT>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d0a9      	beq.n	8004e6a <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f16:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004f18:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004f1a:	4798      	blx	r3
 8004f1c:	e7a5      	b.n	8004e6a <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f7ff ff05 	bl	8004d2e <UART_Receive_IT>
 8004f24:	e7d1      	b.n	8004eca <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 8004f26:	4620      	mov	r0, r4
 8004f28:	f7ff fef7 	bl	8004d1a <HAL_UART_ErrorCallback>
 8004f2c:	e79d      	b.n	8004e6a <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f7ff fef3 	bl	8004d1a <HAL_UART_ErrorCallback>
 8004f34:	e799      	b.n	8004e6a <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 8004f36:	4620      	mov	r0, r4
 8004f38:	f7ff feef 	bl	8004d1a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8004f40:	e793      	b.n	8004e6a <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f42:	f013 0f10 	tst.w	r3, #16
 8004f46:	d082      	beq.n	8004e4e <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f48:	f010 0f10 	tst.w	r0, #16
 8004f4c:	f43f af7f 	beq.w	8004e4e <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f50:	2300      	movs	r3, #0
 8004f52:	9301      	str	r3, [sp, #4]
 8004f54:	6813      	ldr	r3, [r2, #0]
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	6853      	ldr	r3, [r2, #4]
 8004f5a:	9301      	str	r3, [sp, #4]
 8004f5c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f5e:	6953      	ldr	r3, [r2, #20]
 8004f60:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004f64:	d051      	beq.n	800500a <HAL_UART_IRQHandler+0x1f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f66:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004f68:	6813      	ldr	r3, [r2, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f43f af7b 	beq.w	8004e6a <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f74:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004f76:	4299      	cmp	r1, r3
 8004f78:	f67f af77 	bls.w	8004e6a <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8004f7c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f7e:	6993      	ldr	r3, [r2, #24]
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d037      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x1e0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f84:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	f102 030c 	add.w	r3, r2, #12
 8004f8a:	e853 3f00 	ldrex	r3, [r3]
 8004f8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	320c      	adds	r2, #12
 8004f94:	e842 3100 	strex	r1, r3, [r2]
 8004f98:	2900      	cmp	r1, #0
 8004f9a:	d1f3      	bne.n	8004f84 <HAL_UART_IRQHandler+0x170>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	f102 0314 	add.w	r3, r2, #20
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	3214      	adds	r2, #20
 8004fac:	e842 3100 	strex	r1, r3, [r2]
 8004fb0:	2900      	cmp	r1, #0
 8004fb2:	d1f3      	bne.n	8004f9c <HAL_UART_IRQHandler+0x188>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	f102 0314 	add.w	r3, r2, #20
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	3214      	adds	r2, #20
 8004fc4:	e842 3100 	strex	r1, r3, [r2]
 8004fc8:	2900      	cmp	r1, #0
 8004fca:	d1f3      	bne.n	8004fb4 <HAL_UART_IRQHandler+0x1a0>
          huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	2320      	movs	r3, #32
 8004fce:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	f102 030c 	add.w	r3, r2, #12
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe4:	320c      	adds	r2, #12
 8004fe6:	e842 3100 	strex	r1, r3, [r2]
 8004fea:	2900      	cmp	r1, #0
 8004fec:	d1f3      	bne.n	8004fd6 <HAL_UART_IRQHandler+0x1c2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fee:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004ff0:	f7fc fb9e 	bl	8001730 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ff8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004ffa:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	1ac9      	subs	r1, r1, r3
 8005000:	b289      	uxth	r1, r1
 8005002:	4620      	mov	r0, r4
 8005004:	f7ff fe92 	bl	8004d2c <HAL_UARTEx_RxEventCallback>
      return;
 8005008:	e72f      	b.n	8004e6a <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800500a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800500c:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800500e:	b29b      	uxth	r3, r3
 8005010:	1ac9      	subs	r1, r1, r3
 8005012:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005014:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	f43f af26 	beq.w	8004e6a <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 800501e:	2900      	cmp	r1, #0
 8005020:	f43f af23 	beq.w	8004e6a <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005024:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	f102 030c 	add.w	r3, r2, #12
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	320c      	adds	r2, #12
 8005034:	e842 3000 	strex	r0, r3, [r2]
 8005038:	2800      	cmp	r0, #0
 800503a:	d1f3      	bne.n	8005024 <HAL_UART_IRQHandler+0x210>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	f102 0314 	add.w	r3, r2, #20
 8005042:	e853 3f00 	ldrex	r3, [r3]
 8005046:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	3214      	adds	r2, #20
 800504c:	e842 3000 	strex	r0, r3, [r2]
 8005050:	2800      	cmp	r0, #0
 8005052:	d1f3      	bne.n	800503c <HAL_UART_IRQHandler+0x228>
        huart->RxState = HAL_UART_STATE_READY;
 8005054:	2320      	movs	r3, #32
 8005056:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505a:	2300      	movs	r3, #0
 800505c:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800505e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	f102 030c 	add.w	r3, r2, #12
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	320c      	adds	r2, #12
 800506e:	e842 3000 	strex	r0, r3, [r2]
 8005072:	2800      	cmp	r0, #0
 8005074:	d1f3      	bne.n	800505e <HAL_UART_IRQHandler+0x24a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005076:	2302      	movs	r3, #2
 8005078:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800507a:	4620      	mov	r0, r4
 800507c:	f7ff fe56 	bl	8004d2c <HAL_UARTEx_RxEventCallback>
      return;
 8005080:	e6f3      	b.n	8004e6a <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8005082:	4620      	mov	r0, r4
 8005084:	f7ff fc48 	bl	8004918 <UART_Transmit_IT>
    return;
 8005088:	e6ef      	b.n	8004e6a <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 800508a:	4620      	mov	r0, r4
 800508c:	f7ff fe37 	bl	8004cfe <UART_EndTransmit_IT>
    return;
 8005090:	e6eb      	b.n	8004e6a <HAL_UART_IRQHandler+0x56>
 8005092:	bf00      	nop
 8005094:	08004d1d 	.word	0x08004d1d

08005098 <HAL_HalfDuplex_EnableTransmitter>:
  __HAL_LOCK(huart);
 8005098:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800509c:	2b01      	cmp	r3, #1
 800509e:	d014      	beq.n	80050ca <HAL_HalfDuplex_EnableTransmitter+0x32>
 80050a0:	2301      	movs	r3, #1
 80050a2:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_BUSY;
 80050a6:	2324      	movs	r3, #36	@ 0x24
 80050a8:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  tmpreg = huart->Instance->CR1;
 80050ac:	6802      	ldr	r2, [r0, #0]
 80050ae:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80050b0:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_TE;
 80050b4:	f043 0308 	orr.w	r3, r3, #8
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80050b8:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80050ba:	2320      	movs	r3, #32
 80050bc:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UNLOCK(huart);
 80050c0:	2300      	movs	r3, #0
 80050c2:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  return HAL_OK;
 80050c6:	4618      	mov	r0, r3
 80050c8:	4770      	bx	lr
  __HAL_LOCK(huart);
 80050ca:	2002      	movs	r0, #2
}
 80050cc:	4770      	bx	lr

080050ce <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 80050ce:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d014      	beq.n	8005100 <HAL_HalfDuplex_EnableReceiver+0x32>
 80050d6:	2301      	movs	r3, #1
 80050d8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_BUSY;
 80050dc:	2324      	movs	r3, #36	@ 0x24
 80050de:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  tmpreg = huart->Instance->CR1;
 80050e2:	6802      	ldr	r2, [r0, #0]
 80050e4:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80050e6:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 80050ea:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80050ee:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80050f0:	2320      	movs	r3, #32
 80050f2:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UNLOCK(huart);
 80050f6:	2300      	movs	r3, #0
 80050f8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  return HAL_OK;
 80050fc:	4618      	mov	r0, r3
 80050fe:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005100:	2002      	movs	r0, #2
}
 8005102:	4770      	bx	lr

08005104 <AS5600_GetRawAngle>:
    }

    return status;
}

HAL_StatusTypeDef AS5600_GetRawAngle(AS5600_TypeDef *const a, uint16_t *const angle) {
 8005104:	b510      	push	{r4, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	460c      	mov	r4, r1
    HAL_StatusTypeDef status = HAL_OK;
    uint8_t data[2] = {0};
 800510a:	2300      	movs	r3, #0
 800510c:	f8ad 3014 	strh.w	r3, [sp, #20]
    status = HAL_I2C_Mem_Read(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_RAW_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, 100);
 8005110:	2364      	movs	r3, #100	@ 0x64
 8005112:	9302      	str	r3, [sp, #8]
 8005114:	2302      	movs	r3, #2
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	ab05      	add	r3, sp, #20
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	2301      	movs	r3, #1
 800511e:	220c      	movs	r2, #12
 8005120:	7901      	ldrb	r1, [r0, #4]
 8005122:	6800      	ldr	r0, [r0, #0]
 8005124:	f7fd fb2e 	bl	8002784 <HAL_I2C_Mem_Read>
    if (status != HAL_OK) {
 8005128:	b100      	cbz	r0, 800512c <AS5600_GetRawAngle+0x28>
        status = HAL_ERROR;
 800512a:	2001      	movs	r0, #1
    }
    *angle = ((data[0] << 8) | data[1]);
 800512c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8005130:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8005134:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005138:	8023      	strh	r3, [r4, #0]
    return status;
}
 800513a:	b006      	add	sp, #24
 800513c:	bd10      	pop	{r4, pc}

0800513e <AS5600_GetMagnetStatus>:
    *angle = ((data[0] << 8) | data[1]);

    return status;
}

HAL_StatusTypeDef AS5600_GetMagnetStatus(AS5600_TypeDef *const a, uint8_t *const stat) {
 800513e:	b500      	push	{lr}
 8005140:	b085      	sub	sp, #20
    HAL_StatusTypeDef status = HAL_OK;
    if(HAL_I2C_Mem_Read(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_STATUS,
 8005142:	230a      	movs	r3, #10
 8005144:	9302      	str	r3, [sp, #8]
 8005146:	2301      	movs	r3, #1
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	9100      	str	r1, [sp, #0]
 800514c:	220b      	movs	r2, #11
 800514e:	7901      	ldrb	r1, [r0, #4]
 8005150:	6800      	ldr	r0, [r0, #0]
 8005152:	f7fd fb17 	bl	8002784 <HAL_I2C_Mem_Read>
 8005156:	b100      	cbz	r0, 800515a <AS5600_GetMagnetStatus+0x1c>
            I2C_MEMADD_SIZE_8BIT, stat, 1, 10) != HAL_OK){
    	status = HAL_ERROR;
 8005158:	2001      	movs	r0, #1
    }
    return status;
}
 800515a:	b005      	add	sp, #20
 800515c:	f85d fb04 	ldr.w	pc, [sp], #4

08005160 <AS5600_Init>:
AS5600Init_StatusTypedef AS5600_Init(AS5600_TypeDef *a) {
 8005160:	b510      	push	{r4, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	4604      	mov	r4, r0
    uint8_t mag_status = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	f88d 3017 	strb.w	r3, [sp, #23]
    if (!(a->PositiveRotationDirection)) {
 800516c:	7b83      	ldrb	r3, [r0, #14]
 800516e:	b90b      	cbnz	r3, 8005174 <AS5600_Init+0x14>
        a->PositiveRotationDirection = AS5600_DIR_CW;
 8005170:	2301      	movs	r3, #1
 8005172:	7383      	strb	r3, [r0, #14]
    if (!(a->LowPowerMode)) {
 8005174:	7be3      	ldrb	r3, [r4, #15]
 8005176:	b90b      	cbnz	r3, 800517c <AS5600_Init+0x1c>
        a->LowPowerMode = AS5600_POWER_MODE_DEFAULT;
 8005178:	2301      	movs	r3, #1
 800517a:	73e3      	strb	r3, [r4, #15]
    if (!(a->Hysteresis)) {
 800517c:	7c23      	ldrb	r3, [r4, #16]
 800517e:	b90b      	cbnz	r3, 8005184 <AS5600_Init+0x24>
        a->Hysteresis = AS5600_HYSTERESIS_DEFAULT;
 8005180:	2301      	movs	r3, #1
 8005182:	7423      	strb	r3, [r4, #16]
    if (!(a->OutputMode)) {
 8005184:	7c63      	ldrb	r3, [r4, #17]
 8005186:	b90b      	cbnz	r3, 800518c <AS5600_Init+0x2c>
        a->OutputMode = AS5600_OUTPUT_STAGE_DEFAULT;
 8005188:	2301      	movs	r3, #1
 800518a:	7463      	strb	r3, [r4, #17]
    if (!(a->PWMFrequency)) {
 800518c:	7ca3      	ldrb	r3, [r4, #18]
 800518e:	b90b      	cbnz	r3, 8005194 <AS5600_Init+0x34>
        a->PWMFrequency = AS5600_PWM_FREQUENCY_DEFAULT;
 8005190:	2301      	movs	r3, #1
 8005192:	74a3      	strb	r3, [r4, #18]
    if (!(a->SlowFilter)) {
 8005194:	7ce3      	ldrb	r3, [r4, #19]
 8005196:	b90b      	cbnz	r3, 800519c <AS5600_Init+0x3c>
        a->SlowFilter = AS5600_SLOW_FILTER_DEFAULT;
 8005198:	2301      	movs	r3, #1
 800519a:	74e3      	strb	r3, [r4, #19]
    if (!(a->FastFilterThreshold)) {
 800519c:	7d23      	ldrb	r3, [r4, #20]
 800519e:	b90b      	cbnz	r3, 80051a4 <AS5600_Init+0x44>
        a->FastFilterThreshold = AS5600_FAST_FILTER_DEFAULT;
 80051a0:	2301      	movs	r3, #1
 80051a2:	7523      	strb	r3, [r4, #20]
    if (!(a->WatchdogTimer)) {
 80051a4:	7d63      	ldrb	r3, [r4, #21]
 80051a6:	b90b      	cbnz	r3, 80051ac <AS5600_Init+0x4c>
        a->WatchdogTimer = AS5600_WATCHDOG_DEFAULT;
 80051a8:	2302      	movs	r3, #2
 80051aa:	7563      	strb	r3, [r4, #21]
    switch (a->LowPowerMode) {
 80051ac:	7be3      	ldrb	r3, [r4, #15]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	f200 8127 	bhi.w	8005404 <AS5600_Init+0x2a4>
 80051b6:	e8df f003 	tbb	[pc, r3]
 80051ba:	0f02      	.short	0x0f02
 80051bc:	2118      	.short	0x2118
            a->confRegister[1] &= ~((1UL << 1) | (1UL << 0));
 80051be:	7de3      	ldrb	r3, [r4, #23]
 80051c0:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80051c4:	75e3      	strb	r3, [r4, #23]
    switch (a->Hysteresis) {
 80051c6:	7c23      	ldrb	r3, [r4, #16]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	f200 811c 	bhi.w	8005408 <AS5600_Init+0x2a8>
 80051d0:	e8df f003 	tbb	[pc, r3]
 80051d4:	39302719 	.word	0x39302719
            a->confRegister[1] |= (1UL << 0);
 80051d8:	7de3      	ldrb	r3, [r4, #23]
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] &= ~(1UL << 1);
 80051e0:	7de3      	ldrb	r3, [r4, #23]
 80051e2:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 80051e6:	75e3      	strb	r3, [r4, #23]
            break;
 80051e8:	e7ed      	b.n	80051c6 <AS5600_Init+0x66>
            a->confRegister[1] |= (1UL << 1);
 80051ea:	7de3      	ldrb	r3, [r4, #23]
 80051ec:	f043 0302 	orr.w	r3, r3, #2
 80051f0:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] &= (1UL << 0);
 80051f2:	7de3      	ldrb	r3, [r4, #23]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	75e3      	strb	r3, [r4, #23]
            break;
 80051fa:	e7e4      	b.n	80051c6 <AS5600_Init+0x66>
            a->confRegister[1] |= ((1UL << 1) | (1UL << 0));
 80051fc:	7de3      	ldrb	r3, [r4, #23]
 80051fe:	f043 0303 	orr.w	r3, r3, #3
 8005202:	75e3      	strb	r3, [r4, #23]
            break;
 8005204:	e7df      	b.n	80051c6 <AS5600_Init+0x66>
            a->confRegister[1] &= ~((1UL << 3) | (1UL << 2));
 8005206:	7de3      	ldrb	r3, [r4, #23]
 8005208:	f003 03f3 	and.w	r3, r3, #243	@ 0xf3
 800520c:	75e3      	strb	r3, [r4, #23]
    switch (a->OutputMode) {
 800520e:	7c63      	ldrb	r3, [r4, #17]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d02a      	beq.n	800526a <AS5600_Init+0x10a>
 8005214:	2b03      	cmp	r3, #3
 8005216:	d031      	beq.n	800527c <AS5600_Init+0x11c>
 8005218:	2b01      	cmp	r3, #1
 800521a:	d019      	beq.n	8005250 <AS5600_Init+0xf0>
 800521c:	2001      	movs	r0, #1
}
 800521e:	b006      	add	sp, #24
 8005220:	bd10      	pop	{r4, pc}
            a->confRegister[1] |= (1UL << 2);
 8005222:	7de3      	ldrb	r3, [r4, #23]
 8005224:	f043 0304 	orr.w	r3, r3, #4
 8005228:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] &= ~(1UL << 3);
 800522a:	7de3      	ldrb	r3, [r4, #23]
 800522c:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
 8005230:	75e3      	strb	r3, [r4, #23]
            break;
 8005232:	e7ec      	b.n	800520e <AS5600_Init+0xae>
            a->confRegister[1] &= ~(1UL << 2);
 8005234:	7de3      	ldrb	r3, [r4, #23]
 8005236:	f003 03fb 	and.w	r3, r3, #251	@ 0xfb
 800523a:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] |= (1UL << 3);
 800523c:	7de3      	ldrb	r3, [r4, #23]
 800523e:	f043 0308 	orr.w	r3, r3, #8
 8005242:	75e3      	strb	r3, [r4, #23]
            break;
 8005244:	e7e3      	b.n	800520e <AS5600_Init+0xae>
            a->confRegister[1] |= ((1UL << 3) | (1UL << 2));
 8005246:	7de3      	ldrb	r3, [r4, #23]
 8005248:	f043 030c 	orr.w	r3, r3, #12
 800524c:	75e3      	strb	r3, [r4, #23]
            break;
 800524e:	e7de      	b.n	800520e <AS5600_Init+0xae>
            a->confRegister[1] &= ~((1UL << 5) | (1UL << 4));
 8005250:	7de3      	ldrb	r3, [r4, #23]
 8005252:	f003 03cf 	and.w	r3, r3, #207	@ 0xcf
 8005256:	75e3      	strb	r3, [r4, #23]
    switch (a->SlowFilter) {
 8005258:	7ce3      	ldrb	r3, [r4, #19]
 800525a:	3b01      	subs	r3, #1
 800525c:	2b03      	cmp	r3, #3
 800525e:	f200 80d7 	bhi.w	8005410 <AS5600_Init+0x2b0>
 8005262:	e8df f003 	tbb	[pc, r3]
 8005266:	4738      	.short	0x4738
 8005268:	5950      	.short	0x5950
            a->confRegister[1] |= (1UL << 4);
 800526a:	7de3      	ldrb	r3, [r4, #23]
 800526c:	f043 0310 	orr.w	r3, r3, #16
 8005270:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] &= ~(1UL << 5);
 8005272:	7de3      	ldrb	r3, [r4, #23]
 8005274:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005278:	75e3      	strb	r3, [r4, #23]
    if (pwm) {
 800527a:	e7ed      	b.n	8005258 <AS5600_Init+0xf8>
            a->confRegister[1] &= (1UL << 4);
 800527c:	7de3      	ldrb	r3, [r4, #23]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] |= (1UL << 5);
 8005284:	7de3      	ldrb	r3, [r4, #23]
 8005286:	f043 0320 	orr.w	r3, r3, #32
 800528a:	75e3      	strb	r3, [r4, #23]
        switch (a->PWMFrequency) {
 800528c:	7ca3      	ldrb	r3, [r4, #18]
 800528e:	3b01      	subs	r3, #1
 8005290:	2b03      	cmp	r3, #3
 8005292:	f200 80bb 	bhi.w	800540c <AS5600_Init+0x2ac>
 8005296:	e8df f003 	tbb	[pc, r3]
 800529a:	0702      	.short	0x0702
 800529c:	1910      	.short	0x1910
                a->confRegister[1] &= ~((1UL << 7) | (1UL << 6));
 800529e:	7de3      	ldrb	r3, [r4, #23]
 80052a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052a4:	75e3      	strb	r3, [r4, #23]
                break;
 80052a6:	e7d7      	b.n	8005258 <AS5600_Init+0xf8>
                a->confRegister[1] |= (1UL << 6);
 80052a8:	7de3      	ldrb	r3, [r4, #23]
 80052aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ae:	75e3      	strb	r3, [r4, #23]
                a->confRegister[1] &= ~(1UL << 7);
 80052b0:	7de3      	ldrb	r3, [r4, #23]
 80052b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052b6:	75e3      	strb	r3, [r4, #23]
                break;
 80052b8:	e7ce      	b.n	8005258 <AS5600_Init+0xf8>
                a->confRegister[1] &= ~(1UL << 6);
 80052ba:	7de3      	ldrb	r3, [r4, #23]
 80052bc:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
 80052c0:	75e3      	strb	r3, [r4, #23]
                a->confRegister[1] |= (1UL << 7);
 80052c2:	7de3      	ldrb	r3, [r4, #23]
 80052c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052c8:	75e3      	strb	r3, [r4, #23]
                break;
 80052ca:	e7c5      	b.n	8005258 <AS5600_Init+0xf8>
                a->confRegister[1] |= ((1UL << 7) | (1UL << 6));
 80052cc:	7de3      	ldrb	r3, [r4, #23]
 80052ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052d2:	75e3      	strb	r3, [r4, #23]
                break;
 80052d4:	e7c0      	b.n	8005258 <AS5600_Init+0xf8>
            a->confRegister[0] &= ~((1UL << 1) | (1UL << 0));
 80052d6:	7da3      	ldrb	r3, [r4, #22]
 80052d8:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80052dc:	75a3      	strb	r3, [r4, #22]
    switch (a->FastFilterThreshold) {
 80052de:	7d23      	ldrb	r3, [r4, #20]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	2b07      	cmp	r3, #7
 80052e4:	f200 8096 	bhi.w	8005414 <AS5600_Init+0x2b4>
 80052e8:	e8df f003 	tbb	[pc, r3]
 80052ec:	382f261b 	.word	0x382f261b
 80052f0:	5c534a41 	.word	0x5c534a41
            a->confRegister[0] |= (1UL << 0);
 80052f4:	7da3      	ldrb	r3, [r4, #22]
 80052f6:	f043 0301 	orr.w	r3, r3, #1
 80052fa:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] &= ~(1UL << 1);
 80052fc:	7da3      	ldrb	r3, [r4, #22]
 80052fe:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 8005302:	75a3      	strb	r3, [r4, #22]
            break;
 8005304:	e7eb      	b.n	80052de <AS5600_Init+0x17e>
            a->confRegister[0] &= ~(1UL << 0);
 8005306:	7da3      	ldrb	r3, [r4, #22]
 8005308:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800530c:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= (1UL << 1);
 800530e:	7da3      	ldrb	r3, [r4, #22]
 8005310:	f043 0302 	orr.w	r3, r3, #2
 8005314:	75a3      	strb	r3, [r4, #22]
            break;
 8005316:	e7e2      	b.n	80052de <AS5600_Init+0x17e>
            a->confRegister[0] |= ((1UL << 1) | (1UL << 0));
 8005318:	7da3      	ldrb	r3, [r4, #22]
 800531a:	f043 0303 	orr.w	r3, r3, #3
 800531e:	75a3      	strb	r3, [r4, #22]
            break;
 8005320:	e7dd      	b.n	80052de <AS5600_Init+0x17e>
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 8005322:	7da3      	ldrb	r3, [r4, #22]
 8005324:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 8005328:	75a3      	strb	r3, [r4, #22]
    switch (a->WatchdogTimer) {
 800532a:	7d63      	ldrb	r3, [r4, #21]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d03e      	beq.n	80053ae <AS5600_Init+0x24e>
 8005330:	2b02      	cmp	r3, #2
 8005332:	d062      	beq.n	80053fa <AS5600_Init+0x29a>
 8005334:	2001      	movs	r0, #1
 8005336:	e772      	b.n	800521e <AS5600_Init+0xbe>
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3));
 8005338:	7da3      	ldrb	r3, [r4, #22]
 800533a:	f003 03e7 	and.w	r3, r3, #231	@ 0xe7
 800533e:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= (1UL << 2);
 8005340:	7da3      	ldrb	r3, [r4, #22]
 8005342:	f043 0304 	orr.w	r3, r3, #4
 8005346:	75a3      	strb	r3, [r4, #22]
            break;
 8005348:	e7ef      	b.n	800532a <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 2));
 800534a:	7da3      	ldrb	r3, [r4, #22]
 800534c:	f003 03eb 	and.w	r3, r3, #235	@ 0xeb
 8005350:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= (1UL << 3);
 8005352:	7da3      	ldrb	r3, [r4, #22]
 8005354:	f043 0308 	orr.w	r3, r3, #8
 8005358:	75a3      	strb	r3, [r4, #22]
            break;
 800535a:	e7e6      	b.n	800532a <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~(1UL << 4);
 800535c:	7da3      	ldrb	r3, [r4, #22]
 800535e:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8005362:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= ((1UL << 3) | (1UL << 2));
 8005364:	7da3      	ldrb	r3, [r4, #22]
 8005366:	f043 030c 	orr.w	r3, r3, #12
 800536a:	75a3      	strb	r3, [r4, #22]
            break;
 800536c:	e7dd      	b.n	800532a <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~((1UL << 3) | (1UL << 2));
 800536e:	7da3      	ldrb	r3, [r4, #22]
 8005370:	f003 03f3 	and.w	r3, r3, #243	@ 0xf3
 8005374:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= (1UL << 4);
 8005376:	7da3      	ldrb	r3, [r4, #22]
 8005378:	f043 0310 	orr.w	r3, r3, #16
 800537c:	75a3      	strb	r3, [r4, #22]
            break;
 800537e:	e7d4      	b.n	800532a <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~(1UL << 3);
 8005380:	7da3      	ldrb	r3, [r4, #22]
 8005382:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
 8005386:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 2));
 8005388:	7da3      	ldrb	r3, [r4, #22]
 800538a:	f043 0314 	orr.w	r3, r3, #20
 800538e:	75a3      	strb	r3, [r4, #22]
            break;
 8005390:	e7cb      	b.n	800532a <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~(1UL << 2);
 8005392:	7da3      	ldrb	r3, [r4, #22]
 8005394:	f003 03fb 	and.w	r3, r3, #251	@ 0xfb
 8005398:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3));
 800539a:	7da3      	ldrb	r3, [r4, #22]
 800539c:	f043 0318 	orr.w	r3, r3, #24
 80053a0:	75a3      	strb	r3, [r4, #22]
            break;
 80053a2:	e7c2      	b.n	800532a <AS5600_Init+0x1ca>
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 80053a4:	7da3      	ldrb	r3, [r4, #22]
 80053a6:	f043 031c 	orr.w	r3, r3, #28
 80053aa:	75a3      	strb	r3, [r4, #22]
            break;
 80053ac:	e7bd      	b.n	800532a <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~(1UL << 6);
 80053ae:	7da3      	ldrb	r3, [r4, #22]
 80053b0:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
 80053b4:	75a3      	strb	r3, [r4, #22]
    if (HAL_I2C_Mem_Write(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, a->confRegister, 2, 10) != HAL_OK) {
 80053b6:	4623      	mov	r3, r4
 80053b8:	f853 0b16 	ldr.w	r0, [r3], #22
 80053bc:	220a      	movs	r2, #10
 80053be:	9202      	str	r2, [sp, #8]
 80053c0:	2202      	movs	r2, #2
 80053c2:	9201      	str	r2, [sp, #4]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	2301      	movs	r3, #1
 80053c8:	2207      	movs	r2, #7
 80053ca:	7921      	ldrb	r1, [r4, #4]
 80053cc:	f7fd f928 	bl	8002620 <HAL_I2C_Mem_Write>
 80053d0:	bb10      	cbnz	r0, 8005418 <AS5600_Init+0x2b8>
    if (AS5600_GetMagnetStatus(a, &mag_status) != HAL_OK) {
 80053d2:	f10d 0117 	add.w	r1, sp, #23
 80053d6:	4620      	mov	r0, r4
 80053d8:	f7ff feb1 	bl	800513e <AS5600_GetMagnetStatus>
 80053dc:	b9f0      	cbnz	r0, 800541c <AS5600_Init+0x2bc>
    if (!(mag_status & AS5600_MAGNET_DETECTED)) {
 80053de:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80053e2:	f010 0f20 	tst.w	r0, #32
 80053e6:	d01b      	beq.n	8005420 <AS5600_Init+0x2c0>
    if ((mag_status & AS5600_AGC_MIN_GAIN_OVERFLOW)) {
 80053e8:	f010 0f08 	tst.w	r0, #8
 80053ec:	d11a      	bne.n	8005424 <AS5600_Init+0x2c4>
    if ((mag_status & AS5600_AGC_MAX_GAIN_OVERFLOW)) {
 80053ee:	f010 0010 	ands.w	r0, r0, #16
 80053f2:	f43f af14 	beq.w	800521e <AS5600_Init+0xbe>
        return status;
 80053f6:	2004      	movs	r0, #4
 80053f8:	e711      	b.n	800521e <AS5600_Init+0xbe>
            a->confRegister[0] |= (1UL << 6);
 80053fa:	7da3      	ldrb	r3, [r4, #22]
 80053fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005400:	75a3      	strb	r3, [r4, #22]
            break;
 8005402:	e7d8      	b.n	80053b6 <AS5600_Init+0x256>
    switch (a->LowPowerMode) {
 8005404:	2001      	movs	r0, #1
 8005406:	e70a      	b.n	800521e <AS5600_Init+0xbe>
    switch (a->Hysteresis) {
 8005408:	2001      	movs	r0, #1
 800540a:	e708      	b.n	800521e <AS5600_Init+0xbe>
        switch (a->PWMFrequency) {
 800540c:	2001      	movs	r0, #1
 800540e:	e706      	b.n	800521e <AS5600_Init+0xbe>
    switch (a->SlowFilter) {
 8005410:	2001      	movs	r0, #1
 8005412:	e704      	b.n	800521e <AS5600_Init+0xbe>
    switch (a->FastFilterThreshold) {
 8005414:	2001      	movs	r0, #1
 8005416:	e702      	b.n	800521e <AS5600_Init+0xbe>
        return status;
 8005418:	2005      	movs	r0, #5
 800541a:	e700      	b.n	800521e <AS5600_Init+0xbe>
        return status;
 800541c:	2005      	movs	r0, #5
 800541e:	e6fe      	b.n	800521e <AS5600_Init+0xbe>
        return status;
 8005420:	2002      	movs	r0, #2
 8005422:	e6fc      	b.n	800521e <AS5600_Init+0xbe>
        return status;
 8005424:	2003      	movs	r0, #3
 8005426:	e6fa      	b.n	800521e <AS5600_Init+0xbe>

08005428 <EncoderInit>:
static uint16_t raw_buffer = 0;
static uint16_t position_prev = 0;
static uint8_t elapsed_fall_f = 0;
static uint8_t elapsed_rise_f = 0;

HAL_StatusTypeDef EncoderInit(){
 8005428:	b508      	push	{r3, lr}
	Encoder.i2cHandle = &hi2c1;
 800542a:	4b0d      	ldr	r3, [pc, #52]	@ (8005460 <EncoderInit+0x38>)
 800542c:	480d      	ldr	r0, [pc, #52]	@ (8005464 <EncoderInit+0x3c>)
 800542e:	6018      	str	r0, [r3, #0]
	Encoder.i2cAddr = ENCODER_ADDRESS << 1;
 8005430:	216c      	movs	r1, #108	@ 0x6c
 8005432:	7119      	strb	r1, [r3, #4]
	Encoder.DirPort = ENCODER_PORT;
 8005434:	4a0c      	ldr	r2, [pc, #48]	@ (8005468 <EncoderInit+0x40>)
 8005436:	609a      	str	r2, [r3, #8]
	Encoder.DirPin = GPIO_PIN_5;
 8005438:	2220      	movs	r2, #32
 800543a:	819a      	strh	r2, [r3, #12]

	if(HAL_I2C_IsDeviceReady(Encoder.i2cHandle, Encoder.i2cAddr, 1, 100) != HAL_OK){
 800543c:	2364      	movs	r3, #100	@ 0x64
 800543e:	2201      	movs	r2, #1
 8005440:	f7fd fb4e 	bl	8002ae0 <HAL_I2C_IsDeviceReady>
 8005444:	b108      	cbz	r0, 800544a <EncoderInit+0x22>
//		pushError(&watcherStack, WATCHER_ERR_ENC_LINE);
		return HAL_ERROR;
 8005446:	2001      	movs	r0, #1
//		pushError(&watcherStack, WATCHER_ERR_ENC_INIT);
		return HAL_ERROR;
	}

	return HAL_OK;
}
 8005448:	bd08      	pop	{r3, pc}
	AS5600Init_StatusTypedef status = AS5600_Init(&Encoder);
 800544a:	4805      	ldr	r0, [pc, #20]	@ (8005460 <EncoderInit+0x38>)
 800544c:	f7ff fe88 	bl	8005160 <AS5600_Init>
	if(status == AS5600_INIT_OK) init_success = TRUE;
 8005450:	b918      	cbnz	r0, 800545a <EncoderInit+0x32>
 8005452:	4b06      	ldr	r3, [pc, #24]	@ (800546c <EncoderInit+0x44>)
 8005454:	2201      	movs	r2, #1
 8005456:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8005458:	e7f6      	b.n	8005448 <EncoderInit+0x20>
		return HAL_ERROR;
 800545a:	2001      	movs	r0, #1
 800545c:	e7f4      	b.n	8005448 <EncoderInit+0x20>
 800545e:	bf00      	nop
 8005460:	2000054c 	.word	0x2000054c
 8005464:	20000464 	.word	0x20000464
 8005468:	40010c00 	.word	0x40010c00
 800546c:	20000548 	.word	0x20000548

08005470 <EncoderEnablePool>:
	if(status == HAL_OK){
		*res = result;
	}
}

int32_t EncoderEnablePool(){
 8005470:	b508      	push	{r3, lr}
	HAL_StatusTypeDef status = AS5600_GetRawAngle(&Encoder, &raw_buffer);
 8005472:	492c      	ldr	r1, [pc, #176]	@ (8005524 <EncoderEnablePool+0xb4>)
 8005474:	482c      	ldr	r0, [pc, #176]	@ (8005528 <EncoderEnablePool+0xb8>)
 8005476:	f7ff fe45 	bl	8005104 <AS5600_GetRawAngle>
	if(status != HAL_OK){
 800547a:	2800      	cmp	r0, #0
 800547c:	d14f      	bne.n	800551e <EncoderEnablePool+0xae>
//		pushError(&watcherStack, WATCHER_ERR_ENC_DISCONNECT);
		return 0;
	}
	active_quadrant = -1;
 800547e:	4b2b      	ldr	r3, [pc, #172]	@ (800552c <EncoderEnablePool+0xbc>)
 8005480:	22ff      	movs	r2, #255	@ 0xff
 8005482:	701a      	strb	r2, [r3, #0]

	if(raw_buffer >= 0 && raw_buffer <= 1024) active_quadrant = 1;
 8005484:	4b27      	ldr	r3, [pc, #156]	@ (8005524 <EncoderEnablePool+0xb4>)
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800548c:	d802      	bhi.n	8005494 <EncoderEnablePool+0x24>
 800548e:	4a27      	ldr	r2, [pc, #156]	@ (800552c <EncoderEnablePool+0xbc>)
 8005490:	2101      	movs	r1, #1
 8005492:	7011      	strb	r1, [r2, #0]
	if(raw_buffer >= 1025 && raw_buffer <= 2048) active_quadrant = 2;
 8005494:	f2a3 4201 	subw	r2, r3, #1025	@ 0x401
 8005498:	b292      	uxth	r2, r2
 800549a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800549e:	d202      	bcs.n	80054a6 <EncoderEnablePool+0x36>
 80054a0:	4a22      	ldr	r2, [pc, #136]	@ (800552c <EncoderEnablePool+0xbc>)
 80054a2:	2102      	movs	r1, #2
 80054a4:	7011      	strb	r1, [r2, #0]
	if(raw_buffer >= 2049 && raw_buffer <= 3072) active_quadrant = 3;
 80054a6:	f6a3 0201 	subw	r2, r3, #2049	@ 0x801
 80054aa:	b292      	uxth	r2, r2
 80054ac:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80054b0:	d202      	bcs.n	80054b8 <EncoderEnablePool+0x48>
 80054b2:	4a1e      	ldr	r2, [pc, #120]	@ (800552c <EncoderEnablePool+0xbc>)
 80054b4:	2103      	movs	r1, #3
 80054b6:	7011      	strb	r1, [r2, #0]
	if(raw_buffer >= 3073 && raw_buffer <= 4095) active_quadrant = 4;
 80054b8:	f6a3 4201 	subw	r2, r3, #3073	@ 0xc01
 80054bc:	b292      	uxth	r2, r2
 80054be:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80054c2:	428a      	cmp	r2, r1
 80054c4:	d802      	bhi.n	80054cc <EncoderEnablePool+0x5c>
 80054c6:	4a19      	ldr	r2, [pc, #100]	@ (800552c <EncoderEnablePool+0xbc>)
 80054c8:	2104      	movs	r1, #4
 80054ca:	7011      	strb	r1, [r2, #0]

	if(last_quadrant == -1) last_quadrant = active_quadrant;
 80054cc:	4a18      	ldr	r2, [pc, #96]	@ (8005530 <EncoderEnablePool+0xc0>)
 80054ce:	f992 2000 	ldrsb.w	r2, [r2]
 80054d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80054d6:	d017      	beq.n	8005508 <EncoderEnablePool+0x98>
	int32_t delta = (int32_t)(raw_buffer - position_prev);
 80054d8:	4a16      	ldr	r2, [pc, #88]	@ (8005534 <EncoderEnablePool+0xc4>)
 80054da:	8810      	ldrh	r0, [r2, #0]
 80054dc:	1a18      	subs	r0, r3, r0

	if(delta > 2048) {
 80054de:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 80054e2:	dd16      	ble.n	8005512 <EncoderEnablePool+0xa2>
		delta -= 4096;
 80054e4:	f5a0 5080 	sub.w	r0, r0, #4096	@ 0x1000
	} else if(delta < -2048) {
		delta += 4096;
	}

	accumulate_counter += delta;
 80054e8:	4a13      	ldr	r2, [pc, #76]	@ (8005538 <EncoderEnablePool+0xc8>)
 80054ea:	6811      	ldr	r1, [r2, #0]
 80054ec:	4408      	add	r0, r1
 80054ee:	6010      	str	r0, [r2, #0]

	elapsed_fall_f = FALSE;
 80054f0:	2200      	movs	r2, #0
 80054f2:	4912      	ldr	r1, [pc, #72]	@ (800553c <EncoderEnablePool+0xcc>)
 80054f4:	700a      	strb	r2, [r1, #0]
	elapsed_rise_f = FALSE;
 80054f6:	4912      	ldr	r1, [pc, #72]	@ (8005540 <EncoderEnablePool+0xd0>)
 80054f8:	700a      	strb	r2, [r1, #0]
	position_prev = raw_buffer;
 80054fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005534 <EncoderEnablePool+0xc4>)
 80054fc:	8013      	strh	r3, [r2, #0]
	last_quadrant = active_quadrant;
 80054fe:	4b0b      	ldr	r3, [pc, #44]	@ (800552c <EncoderEnablePool+0xbc>)
 8005500:	781a      	ldrb	r2, [r3, #0]
 8005502:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <EncoderEnablePool+0xc0>)
 8005504:	701a      	strb	r2, [r3, #0]

	return accumulate_counter;
}
 8005506:	bd08      	pop	{r3, pc}
	if(last_quadrant == -1) last_quadrant = active_quadrant;
 8005508:	4a08      	ldr	r2, [pc, #32]	@ (800552c <EncoderEnablePool+0xbc>)
 800550a:	7811      	ldrb	r1, [r2, #0]
 800550c:	4a08      	ldr	r2, [pc, #32]	@ (8005530 <EncoderEnablePool+0xc0>)
 800550e:	7011      	strb	r1, [r2, #0]
 8005510:	e7e2      	b.n	80054d8 <EncoderEnablePool+0x68>
	} else if(delta < -2048) {
 8005512:	f510 6f00 	cmn.w	r0, #2048	@ 0x800
 8005516:	dae7      	bge.n	80054e8 <EncoderEnablePool+0x78>
		delta += 4096;
 8005518:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 800551c:	e7e4      	b.n	80054e8 <EncoderEnablePool+0x78>
		return 0;
 800551e:	2000      	movs	r0, #0
 8005520:	e7f1      	b.n	8005506 <EncoderEnablePool+0x96>
 8005522:	bf00      	nop
 8005524:	20000540 	.word	0x20000540
 8005528:	2000054c 	.word	0x2000054c
 800552c:	2000000d 	.word	0x2000000d
 8005530:	2000000c 	.word	0x2000000c
 8005534:	2000053e 	.word	0x2000053e
 8005538:	20000544 	.word	0x20000544
 800553c:	2000053d 	.word	0x2000053d
 8005540:	2000053c 	.word	0x2000053c

08005544 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8005544:	2884      	cmp	r0, #132	@ 0x84
 8005546:	d001      	beq.n	800554c <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8005548:	3003      	adds	r0, #3
 800554a:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800554c:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800554e:	4770      	bx	lr

08005550 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005550:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005552:	f000 fa91 	bl	8005a78 <vTaskStartScheduler>
  
  return osOK;
}
 8005556:	2000      	movs	r0, #0
 8005558:	bd08      	pop	{r3, pc}

0800555a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800555a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800555e:	b087      	sub	sp, #28
 8005560:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005562:	6944      	ldr	r4, [r0, #20]
 8005564:	b1c4      	cbz	r4, 8005598 <osThreadCreate+0x3e>
 8005566:	6985      	ldr	r5, [r0, #24]
 8005568:	b1b5      	cbz	r5, 8005598 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800556a:	6847      	ldr	r7, [r0, #4]
 800556c:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005570:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005574:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8005578:	f7ff ffe4 	bl	8005544 <makeFreeRtosPriority>
 800557c:	9502      	str	r5, [sp, #8]
 800557e:	9401      	str	r4, [sp, #4]
 8005580:	9000      	str	r0, [sp, #0]
 8005582:	4633      	mov	r3, r6
 8005584:	464a      	mov	r2, r9
 8005586:	4641      	mov	r1, r8
 8005588:	4638      	mov	r0, r7
 800558a:	f000 fa07 	bl	800599c <xTaskCreateStatic>
 800558e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005590:	9805      	ldr	r0, [sp, #20]
}
 8005592:	b007      	add	sp, #28
 8005594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005598:	6844      	ldr	r4, [r0, #4]
 800559a:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800559c:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800559e:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80055a2:	f7ff ffcf 	bl	8005544 <makeFreeRtosPriority>
 80055a6:	ab05      	add	r3, sp, #20
 80055a8:	9301      	str	r3, [sp, #4]
 80055aa:	9000      	str	r0, [sp, #0]
 80055ac:	4633      	mov	r3, r6
 80055ae:	b2ba      	uxth	r2, r7
 80055b0:	4629      	mov	r1, r5
 80055b2:	4620      	mov	r0, r4
 80055b4:	f000 fa2d 	bl	8005a12 <xTaskCreate>
 80055b8:	2801      	cmp	r0, #1
 80055ba:	d0e9      	beq.n	8005590 <osThreadCreate+0x36>
      return NULL;
 80055bc:	2000      	movs	r0, #0
 80055be:	e7e8      	b.n	8005592 <osThreadCreate+0x38>

080055c0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80055c0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80055c2:	b900      	cbnz	r0, 80055c6 <osDelay+0x6>
 80055c4:	2001      	movs	r0, #1
 80055c6:	f000 fba9 	bl	8005d1c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80055ca:	2000      	movs	r0, #0
 80055cc:	bd08      	pop	{r3, pc}

080055ce <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ce:	f100 0308 	add.w	r3, r0, #8
 80055d2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055d4:	f04f 32ff 	mov.w	r2, #4294967295
 80055d8:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055da:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055dc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055e2:	4770      	bx	lr

080055e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055e8:	4770      	bx	lr

080055ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80055ea:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055ec:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055f2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055f4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055f6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80055f8:	6803      	ldr	r3, [r0, #0]
 80055fa:	3301      	adds	r3, #1
 80055fc:	6003      	str	r3, [r0, #0]
}
 80055fe:	4770      	bx	lr

08005600 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005600:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005602:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005604:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005608:	d011      	beq.n	800562e <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800560a:	f100 0308 	add.w	r3, r0, #8
 800560e:	461c      	mov	r4, r3
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	42aa      	cmp	r2, r5
 8005616:	d9fa      	bls.n	800560e <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005618:	6863      	ldr	r3, [r4, #4]
 800561a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800561c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800561e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005620:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005622:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005624:	6803      	ldr	r3, [r0, #0]
 8005626:	3301      	adds	r3, #1
 8005628:	6003      	str	r3, [r0, #0]
}
 800562a:	bc30      	pop	{r4, r5}
 800562c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800562e:	6904      	ldr	r4, [r0, #16]
 8005630:	e7f2      	b.n	8005618 <vListInsert+0x18>

08005632 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005632:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005634:	6841      	ldr	r1, [r0, #4]
 8005636:	6882      	ldr	r2, [r0, #8]
 8005638:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800563a:	6841      	ldr	r1, [r0, #4]
 800563c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	4282      	cmp	r2, r0
 8005642:	d006      	beq.n	8005652 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005644:	2200      	movs	r2, #0
 8005646:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	3a01      	subs	r2, #1
 800564c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800564e:	6818      	ldr	r0, [r3, #0]
}
 8005650:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005652:	6882      	ldr	r2, [r0, #8]
 8005654:	605a      	str	r2, [r3, #4]
 8005656:	e7f5      	b.n	8005644 <uxListRemove+0x12>

08005658 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005658:	4b08      	ldr	r3, [pc, #32]	@ (800567c <prvResetNextTaskUnblockTime+0x24>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	b923      	cbnz	r3, 800566a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005660:	4b07      	ldr	r3, [pc, #28]	@ (8005680 <prvResetNextTaskUnblockTime+0x28>)
 8005662:	f04f 32ff 	mov.w	r2, #4294967295
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566a:	4b04      	ldr	r3, [pc, #16]	@ (800567c <prvResetNextTaskUnblockTime+0x24>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	4b02      	ldr	r3, [pc, #8]	@ (8005680 <prvResetNextTaskUnblockTime+0x28>)
 8005676:	601a      	str	r2, [r3, #0]
	}
}
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	200005d4 	.word	0x200005d4
 8005680:	2000056c 	.word	0x2000056c

08005684 <prvInitialiseNewTask>:
{
 8005684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005688:	4607      	mov	r7, r0
 800568a:	4698      	mov	r8, r3
 800568c:	9d08      	ldr	r5, [sp, #32]
 800568e:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8005692:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005694:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8005696:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800569a:	3a01      	subs	r2, #1
 800569c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80056a0:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80056a4:	2900      	cmp	r1, #0
 80056a6:	d044      	beq.n	8005732 <prvInitialiseNewTask+0xae>
 80056a8:	4608      	mov	r0, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056aa:	f04f 0c00 	mov.w	ip, #0
 80056ae:	f1bc 0f0f 	cmp.w	ip, #15
 80056b2:	d809      	bhi.n	80056c8 <prvInitialiseNewTask+0x44>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056b4:	f810 200c 	ldrb.w	r2, [r0, ip]
 80056b8:	eb04 030c 	add.w	r3, r4, ip
 80056bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80056c0:	b112      	cbz	r2, 80056c8 <prvInitialiseNewTask+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056c2:	f10c 0c01 	add.w	ip, ip, #1
 80056c6:	e7f2      	b.n	80056ae <prvInitialiseNewTask+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056c8:	2300      	movs	r3, #0
 80056ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056ce:	2d06      	cmp	r5, #6
 80056d0:	d900      	bls.n	80056d4 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056d2:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80056d4:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80056d6:	6465      	str	r5, [r4, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80056d8:	f04f 0a00 	mov.w	sl, #0
 80056dc:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056e0:	1d20      	adds	r0, r4, #4
 80056e2:	f7ff ff7f 	bl	80055e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056e6:	f104 0018 	add.w	r0, r4, #24
 80056ea:	f7ff ff7b 	bl	80055e4 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056ee:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f0:	f1c5 0507 	rsb	r5, r5, #7
 80056f4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056f6:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80056f8:	f8c4 a098 	str.w	sl, [r4, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056fc:	f884 a09c 	strb.w	sl, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005700:	224c      	movs	r2, #76	@ 0x4c
 8005702:	4651      	mov	r1, sl
 8005704:	18a0      	adds	r0, r4, r2
 8005706:	f001 fa6f 	bl	8006be8 <memset>
 800570a:	4b0c      	ldr	r3, [pc, #48]	@ (800573c <prvInitialiseNewTask+0xb8>)
 800570c:	6523      	str	r3, [r4, #80]	@ 0x50
 800570e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005712:	6562      	str	r2, [r4, #84]	@ 0x54
 8005714:	33d0      	adds	r3, #208	@ 0xd0
 8005716:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005718:	4642      	mov	r2, r8
 800571a:	4639      	mov	r1, r7
 800571c:	4630      	mov	r0, r6
 800571e:	f000 fc1b 	bl	8005f58 <pxPortInitialiseStack>
 8005722:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005724:	f1b9 0f00 	cmp.w	r9, #0
 8005728:	d001      	beq.n	800572e <prvInitialiseNewTask+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800572a:	f8c9 4000 	str.w	r4, [r9]
}
 800572e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005732:	2300      	movs	r3, #0
 8005734:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8005738:	e7c9      	b.n	80056ce <prvInitialiseNewTask+0x4a>
 800573a:	bf00      	nop
 800573c:	2000138c 	.word	0x2000138c

08005740 <prvInitialiseTaskLists>:
{
 8005740:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005742:	2400      	movs	r4, #0
 8005744:	e007      	b.n	8005756 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005746:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800574a:	0093      	lsls	r3, r2, #2
 800574c:	480e      	ldr	r0, [pc, #56]	@ (8005788 <prvInitialiseTaskLists+0x48>)
 800574e:	4418      	add	r0, r3
 8005750:	f7ff ff3d 	bl	80055ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005754:	3401      	adds	r4, #1
 8005756:	2c06      	cmp	r4, #6
 8005758:	d9f5      	bls.n	8005746 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800575a:	4d0c      	ldr	r5, [pc, #48]	@ (800578c <prvInitialiseTaskLists+0x4c>)
 800575c:	4628      	mov	r0, r5
 800575e:	f7ff ff36 	bl	80055ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005762:	4c0b      	ldr	r4, [pc, #44]	@ (8005790 <prvInitialiseTaskLists+0x50>)
 8005764:	4620      	mov	r0, r4
 8005766:	f7ff ff32 	bl	80055ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800576a:	480a      	ldr	r0, [pc, #40]	@ (8005794 <prvInitialiseTaskLists+0x54>)
 800576c:	f7ff ff2f 	bl	80055ce <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005770:	4809      	ldr	r0, [pc, #36]	@ (8005798 <prvInitialiseTaskLists+0x58>)
 8005772:	f7ff ff2c 	bl	80055ce <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005776:	4809      	ldr	r0, [pc, #36]	@ (800579c <prvInitialiseTaskLists+0x5c>)
 8005778:	f7ff ff29 	bl	80055ce <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800577c:	4b08      	ldr	r3, [pc, #32]	@ (80057a0 <prvInitialiseTaskLists+0x60>)
 800577e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005780:	4b08      	ldr	r3, [pc, #32]	@ (80057a4 <prvInitialiseTaskLists+0x64>)
 8005782:	601c      	str	r4, [r3, #0]
}
 8005784:	bd38      	pop	{r3, r4, r5, pc}
 8005786:	bf00      	nop
 8005788:	20000600 	.word	0x20000600
 800578c:	200005ec 	.word	0x200005ec
 8005790:	200005d8 	.word	0x200005d8
 8005794:	200005bc 	.word	0x200005bc
 8005798:	200005a8 	.word	0x200005a8
 800579c:	20000590 	.word	0x20000590
 80057a0:	200005d4 	.word	0x200005d4
 80057a4:	200005d0 	.word	0x200005d0

080057a8 <prvAddNewTaskToReadyList>:
{
 80057a8:	b510      	push	{r4, lr}
 80057aa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80057ac:	f000 fbfa 	bl	8005fa4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80057b0:	4a21      	ldr	r2, [pc, #132]	@ (8005838 <prvAddNewTaskToReadyList+0x90>)
 80057b2:	6813      	ldr	r3, [r2, #0]
 80057b4:	3301      	adds	r3, #1
 80057b6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057b8:	4b20      	ldr	r3, [pc, #128]	@ (800583c <prvAddNewTaskToReadyList+0x94>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	b15b      	cbz	r3, 80057d6 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80057be:	4b20      	ldr	r3, [pc, #128]	@ (8005840 <prvAddNewTaskToReadyList+0x98>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	b96b      	cbnz	r3, 80057e0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057c4:	4b1d      	ldr	r3, [pc, #116]	@ (800583c <prvAddNewTaskToReadyList+0x94>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d807      	bhi.n	80057e0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80057d0:	4b1a      	ldr	r3, [pc, #104]	@ (800583c <prvAddNewTaskToReadyList+0x94>)
 80057d2:	601c      	str	r4, [r3, #0]
 80057d4:	e004      	b.n	80057e0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80057d6:	4b19      	ldr	r3, [pc, #100]	@ (800583c <prvAddNewTaskToReadyList+0x94>)
 80057d8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057da:	6813      	ldr	r3, [r2, #0]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d028      	beq.n	8005832 <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 80057e0:	4a18      	ldr	r2, [pc, #96]	@ (8005844 <prvAddNewTaskToReadyList+0x9c>)
 80057e2:	6813      	ldr	r3, [r2, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80057e8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80057ea:	2301      	movs	r3, #1
 80057ec:	4083      	lsls	r3, r0
 80057ee:	4a16      	ldr	r2, [pc, #88]	@ (8005848 <prvAddNewTaskToReadyList+0xa0>)
 80057f0:	6811      	ldr	r1, [r2, #0]
 80057f2:	430b      	orrs	r3, r1
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057fa:	1d21      	adds	r1, r4, #4
 80057fc:	4b13      	ldr	r3, [pc, #76]	@ (800584c <prvAddNewTaskToReadyList+0xa4>)
 80057fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005802:	f7ff fef2 	bl	80055ea <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005806:	f000 fbef 	bl	8005fe8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800580a:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <prvAddNewTaskToReadyList+0x98>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	b17b      	cbz	r3, 8005830 <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005810:	4b0a      	ldr	r3, [pc, #40]	@ (800583c <prvAddNewTaskToReadyList+0x94>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005816:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005818:	429a      	cmp	r2, r3
 800581a:	d209      	bcs.n	8005830 <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 800581c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005820:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005824:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
}
 8005830:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8005832:	f7ff ff85 	bl	8005740 <prvInitialiseTaskLists>
 8005836:	e7d3      	b.n	80057e0 <prvAddNewTaskToReadyList+0x38>
 8005838:	2000058c 	.word	0x2000058c
 800583c:	2000068c 	.word	0x2000068c
 8005840:	20000580 	.word	0x20000580
 8005844:	20000570 	.word	0x20000570
 8005848:	20000584 	.word	0x20000584
 800584c:	20000600 	.word	0x20000600

08005850 <prvDeleteTCB>:
	{
 8005850:	b510      	push	{r4, lr}
 8005852:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005854:	304c      	adds	r0, #76	@ 0x4c
 8005856:	f001 f9cf 	bl	8006bf8 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800585a:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 800585e:	b163      	cbz	r3, 800587a <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005860:	2b01      	cmp	r3, #1
 8005862:	d011      	beq.n	8005888 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005864:	2b02      	cmp	r3, #2
 8005866:	d00e      	beq.n	8005886 <prvDeleteTCB+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	e7fe      	b.n	8005878 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 800587a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800587c:	f000 fd60 	bl	8006340 <vPortFree>
				vPortFree( pxTCB );
 8005880:	4620      	mov	r0, r4
 8005882:	f000 fd5d 	bl	8006340 <vPortFree>
	}
 8005886:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005888:	4620      	mov	r0, r4
 800588a:	f000 fd59 	bl	8006340 <vPortFree>
 800588e:	e7fa      	b.n	8005886 <prvDeleteTCB+0x36>

08005890 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005890:	4b0f      	ldr	r3, [pc, #60]	@ (80058d0 <prvCheckTasksWaitingTermination+0x40>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	b1d3      	cbz	r3, 80058cc <prvCheckTasksWaitingTermination+0x3c>
{
 8005896:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8005898:	f000 fb84 	bl	8005fa4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800589c:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <prvCheckTasksWaitingTermination+0x44>)
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058a2:	1d20      	adds	r0, r4, #4
 80058a4:	f7ff fec5 	bl	8005632 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058a8:	4a0b      	ldr	r2, [pc, #44]	@ (80058d8 <prvCheckTasksWaitingTermination+0x48>)
 80058aa:	6813      	ldr	r3, [r2, #0]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80058b0:	4a07      	ldr	r2, [pc, #28]	@ (80058d0 <prvCheckTasksWaitingTermination+0x40>)
 80058b2:	6813      	ldr	r3, [r2, #0]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80058b8:	f000 fb96 	bl	8005fe8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80058bc:	4620      	mov	r0, r4
 80058be:	f7ff ffc7 	bl	8005850 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058c2:	4b03      	ldr	r3, [pc, #12]	@ (80058d0 <prvCheckTasksWaitingTermination+0x40>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e6      	bne.n	8005898 <prvCheckTasksWaitingTermination+0x8>
}
 80058ca:	bd10      	pop	{r4, pc}
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	200005a4 	.word	0x200005a4
 80058d4:	200005a8 	.word	0x200005a8
 80058d8:	2000058c 	.word	0x2000058c

080058dc <prvIdleTask>:
{
 80058dc:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80058de:	f7ff ffd7 	bl	8005890 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058e2:	4b07      	ldr	r3, [pc, #28]	@ (8005900 <prvIdleTask+0x24>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d9f9      	bls.n	80058de <prvIdleTask+0x2>
				taskYIELD();
 80058ea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80058ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	e7ee      	b.n	80058de <prvIdleTask+0x2>
 8005900:	20000600 	.word	0x20000600

08005904 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	4604      	mov	r4, r0
 8005908:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800590a:	4b1d      	ldr	r3, [pc, #116]	@ (8005980 <prvAddCurrentTaskToDelayedList+0x7c>)
 800590c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800590e:	4b1d      	ldr	r3, [pc, #116]	@ (8005984 <prvAddCurrentTaskToDelayedList+0x80>)
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	3004      	adds	r0, #4
 8005914:	f7ff fe8d 	bl	8005632 <uxListRemove>
 8005918:	b948      	cbnz	r0, 800592e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800591a:	4b1a      	ldr	r3, [pc, #104]	@ (8005984 <prvAddCurrentTaskToDelayedList+0x80>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005920:	2201      	movs	r2, #1
 8005922:	409a      	lsls	r2, r3
 8005924:	4918      	ldr	r1, [pc, #96]	@ (8005988 <prvAddCurrentTaskToDelayedList+0x84>)
 8005926:	680b      	ldr	r3, [r1, #0]
 8005928:	ea23 0302 	bic.w	r3, r3, r2
 800592c:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800592e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005932:	d00d      	beq.n	8005950 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005934:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005936:	4b13      	ldr	r3, [pc, #76]	@ (8005984 <prvAddCurrentTaskToDelayedList+0x80>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800593c:	42a6      	cmp	r6, r4
 800593e:	d910      	bls.n	8005962 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005940:	4b12      	ldr	r3, [pc, #72]	@ (800598c <prvAddCurrentTaskToDelayedList+0x88>)
 8005942:	6818      	ldr	r0, [r3, #0]
 8005944:	4b0f      	ldr	r3, [pc, #60]	@ (8005984 <prvAddCurrentTaskToDelayedList+0x80>)
 8005946:	6819      	ldr	r1, [r3, #0]
 8005948:	3104      	adds	r1, #4
 800594a:	f7ff fe59 	bl	8005600 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800594e:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005950:	2d00      	cmp	r5, #0
 8005952:	d0ef      	beq.n	8005934 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005954:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <prvAddCurrentTaskToDelayedList+0x80>)
 8005956:	6819      	ldr	r1, [r3, #0]
 8005958:	3104      	adds	r1, #4
 800595a:	480d      	ldr	r0, [pc, #52]	@ (8005990 <prvAddCurrentTaskToDelayedList+0x8c>)
 800595c:	f7ff fe45 	bl	80055ea <vListInsertEnd>
 8005960:	e7f5      	b.n	800594e <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005962:	4b0c      	ldr	r3, [pc, #48]	@ (8005994 <prvAddCurrentTaskToDelayedList+0x90>)
 8005964:	6818      	ldr	r0, [r3, #0]
 8005966:	4b07      	ldr	r3, [pc, #28]	@ (8005984 <prvAddCurrentTaskToDelayedList+0x80>)
 8005968:	6819      	ldr	r1, [r3, #0]
 800596a:	3104      	adds	r1, #4
 800596c:	f7ff fe48 	bl	8005600 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005970:	4b09      	ldr	r3, [pc, #36]	@ (8005998 <prvAddCurrentTaskToDelayedList+0x94>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	42a3      	cmp	r3, r4
 8005976:	d9ea      	bls.n	800594e <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 8005978:	4b07      	ldr	r3, [pc, #28]	@ (8005998 <prvAddCurrentTaskToDelayedList+0x94>)
 800597a:	601c      	str	r4, [r3, #0]
}
 800597c:	e7e7      	b.n	800594e <prvAddCurrentTaskToDelayedList+0x4a>
 800597e:	bf00      	nop
 8005980:	20000588 	.word	0x20000588
 8005984:	2000068c 	.word	0x2000068c
 8005988:	20000584 	.word	0x20000584
 800598c:	200005d0 	.word	0x200005d0
 8005990:	20000590 	.word	0x20000590
 8005994:	200005d4 	.word	0x200005d4
 8005998:	2000056c 	.word	0x2000056c

0800599c <xTaskCreateStatic>:
	{
 800599c:	b530      	push	{r4, r5, lr}
 800599e:	b087      	sub	sp, #28
 80059a0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80059a2:	b17c      	cbz	r4, 80059c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059a4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80059a6:	b1b5      	cbz	r5, 80059d6 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80059a8:	25a0      	movs	r5, #160	@ 0xa0
 80059aa:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059ac:	9d04      	ldr	r5, [sp, #16]
 80059ae:	2da0      	cmp	r5, #160	@ 0xa0
 80059b0:	d01a      	beq.n	80059e8 <xTaskCreateStatic+0x4c>
 80059b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	e7fe      	b.n	80059c2 <xTaskCreateStatic+0x26>
 80059c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80059d4:	e7fe      	b.n	80059d4 <xTaskCreateStatic+0x38>
 80059d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80059e6:	e7fe      	b.n	80059e6 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059e8:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059ea:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80059ec:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059ee:	2402      	movs	r4, #2
 80059f0:	f885 409d 	strb.w	r4, [r5, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059f4:	2400      	movs	r4, #0
 80059f6:	9403      	str	r4, [sp, #12]
 80059f8:	9502      	str	r5, [sp, #8]
 80059fa:	ac05      	add	r4, sp, #20
 80059fc:	9401      	str	r4, [sp, #4]
 80059fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a00:	9400      	str	r4, [sp, #0]
 8005a02:	f7ff fe3f 	bl	8005684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a06:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005a08:	f7ff fece 	bl	80057a8 <prvAddNewTaskToReadyList>
	}
 8005a0c:	9805      	ldr	r0, [sp, #20]
 8005a0e:	b007      	add	sp, #28
 8005a10:	bd30      	pop	{r4, r5, pc}

08005a12 <xTaskCreate>:
	{
 8005a12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a16:	b085      	sub	sp, #20
 8005a18:	4607      	mov	r7, r0
 8005a1a:	4688      	mov	r8, r1
 8005a1c:	4614      	mov	r4, r2
 8005a1e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a20:	0090      	lsls	r0, r2, #2
 8005a22:	f000 fc0b 	bl	800623c <pvPortMalloc>
			if( pxStack != NULL )
 8005a26:	b308      	cbz	r0, 8005a6c <xTaskCreate+0x5a>
 8005a28:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a2a:	20a0      	movs	r0, #160	@ 0xa0
 8005a2c:	f000 fc06 	bl	800623c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005a30:	4605      	mov	r5, r0
 8005a32:	b1a8      	cbz	r0, 8005a60 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8005a34:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f880 309d 	strb.w	r3, [r0, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a3e:	9303      	str	r3, [sp, #12]
 8005a40:	9002      	str	r0, [sp, #8]
 8005a42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a44:	9301      	str	r3, [sp, #4]
 8005a46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	4633      	mov	r3, r6
 8005a4c:	4622      	mov	r2, r4
 8005a4e:	4641      	mov	r1, r8
 8005a50:	4638      	mov	r0, r7
 8005a52:	f7ff fe17 	bl	8005684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a56:	4628      	mov	r0, r5
 8005a58:	f7ff fea6 	bl	80057a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	e007      	b.n	8005a70 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8005a60:	4648      	mov	r0, r9
 8005a62:	f000 fc6d 	bl	8006340 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a66:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6a:	e001      	b.n	8005a70 <xTaskCreate+0x5e>
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005a70:	b005      	add	sp, #20
 8005a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08005a78 <vTaskStartScheduler>:
{
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a7c:	2400      	movs	r4, #0
 8005a7e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a80:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a82:	aa07      	add	r2, sp, #28
 8005a84:	a906      	add	r1, sp, #24
 8005a86:	a805      	add	r0, sp, #20
 8005a88:	f7fb f8a8 	bl	8000bdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a8c:	9b05      	ldr	r3, [sp, #20]
 8005a8e:	9302      	str	r3, [sp, #8]
 8005a90:	9b06      	ldr	r3, [sp, #24]
 8005a92:	9301      	str	r3, [sp, #4]
 8005a94:	9400      	str	r4, [sp, #0]
 8005a96:	4623      	mov	r3, r4
 8005a98:	9a07      	ldr	r2, [sp, #28]
 8005a9a:	4910      	ldr	r1, [pc, #64]	@ (8005adc <vTaskStartScheduler+0x64>)
 8005a9c:	4810      	ldr	r0, [pc, #64]	@ (8005ae0 <vTaskStartScheduler+0x68>)
 8005a9e:	f7ff ff7d 	bl	800599c <xTaskCreateStatic>
 8005aa2:	4b10      	ldr	r3, [pc, #64]	@ (8005ae4 <vTaskStartScheduler+0x6c>)
 8005aa4:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8005aa6:	b1b8      	cbz	r0, 8005ad8 <vTaskStartScheduler+0x60>
 8005aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae8 <vTaskStartScheduler+0x70>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	334c      	adds	r3, #76	@ 0x4c
 8005abe:	4a0b      	ldr	r2, [pc, #44]	@ (8005aec <vTaskStartScheduler+0x74>)
 8005ac0:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8005af0 <vTaskStartScheduler+0x78>)
 8005ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005aca:	4b0a      	ldr	r3, [pc, #40]	@ (8005af4 <vTaskStartScheduler+0x7c>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ad0:	4b09      	ldr	r3, [pc, #36]	@ (8005af8 <vTaskStartScheduler+0x80>)
 8005ad2:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005ad4:	f000 faf0 	bl	80060b8 <xPortStartScheduler>
}
 8005ad8:	b008      	add	sp, #32
 8005ada:	bd10      	pop	{r4, pc}
 8005adc:	08006f8c 	.word	0x08006f8c
 8005ae0:	080058dd 	.word	0x080058dd
 8005ae4:	20000568 	.word	0x20000568
 8005ae8:	2000068c 	.word	0x2000068c
 8005aec:	20000018 	.word	0x20000018
 8005af0:	2000056c 	.word	0x2000056c
 8005af4:	20000580 	.word	0x20000580
 8005af8:	20000588 	.word	0x20000588

08005afc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005afc:	4a02      	ldr	r2, [pc, #8]	@ (8005b08 <vTaskSuspendAll+0xc>)
 8005afe:	6813      	ldr	r3, [r2, #0]
 8005b00:	3301      	adds	r3, #1
 8005b02:	6013      	str	r3, [r2, #0]
}
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	20000564 	.word	0x20000564

08005b0c <xTaskIncrementTick>:
{
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8005bf8 <xTaskIncrementTick+0xec>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d169      	bne.n	8005bea <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b16:	4b39      	ldr	r3, [pc, #228]	@ (8005bfc <xTaskIncrementTick+0xf0>)
 8005b18:	681d      	ldr	r5, [r3, #0]
 8005b1a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8005b1c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b1e:	b9c5      	cbnz	r5, 8005b52 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8005b20:	4b37      	ldr	r3, [pc, #220]	@ (8005c00 <xTaskIncrementTick+0xf4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	b143      	cbz	r3, 8005b3a <xTaskIncrementTick+0x2e>
 8005b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	e7fe      	b.n	8005b38 <xTaskIncrementTick+0x2c>
 8005b3a:	4a31      	ldr	r2, [pc, #196]	@ (8005c00 <xTaskIncrementTick+0xf4>)
 8005b3c:	6811      	ldr	r1, [r2, #0]
 8005b3e:	4b31      	ldr	r3, [pc, #196]	@ (8005c04 <xTaskIncrementTick+0xf8>)
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	6010      	str	r0, [r2, #0]
 8005b44:	6019      	str	r1, [r3, #0]
 8005b46:	4a30      	ldr	r2, [pc, #192]	@ (8005c08 <xTaskIncrementTick+0xfc>)
 8005b48:	6813      	ldr	r3, [r2, #0]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	f7ff fd83 	bl	8005658 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b52:	4b2e      	ldr	r3, [pc, #184]	@ (8005c0c <xTaskIncrementTick+0x100>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	42ab      	cmp	r3, r5
 8005b58:	d93d      	bls.n	8005bd6 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8005b5a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c10 <xTaskIncrementTick+0x104>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b66:	009a      	lsls	r2, r3, #2
 8005b68:	4b2a      	ldr	r3, [pc, #168]	@ (8005c14 <xTaskIncrementTick+0x108>)
 8005b6a:	589b      	ldr	r3, [r3, r2]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d900      	bls.n	8005b72 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8005b70:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8005b72:	4b29      	ldr	r3, [pc, #164]	@ (8005c18 <xTaskIncrementTick+0x10c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d03c      	beq.n	8005bf4 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8005b7a:	2701      	movs	r7, #1
	return xSwitchRequired;
 8005b7c:	e03a      	b.n	8005bf4 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8005b7e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b80:	4b1f      	ldr	r3, [pc, #124]	@ (8005c00 <xTaskIncrementTick+0xf4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	b343      	cbz	r3, 8005bda <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b88:	4b1d      	ldr	r3, [pc, #116]	@ (8005c00 <xTaskIncrementTick+0xf4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b90:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8005b92:	429d      	cmp	r5, r3
 8005b94:	d326      	bcc.n	8005be4 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b96:	1d26      	adds	r6, r4, #4
 8005b98:	4630      	mov	r0, r6
 8005b9a:	f7ff fd4a 	bl	8005632 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b9e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005ba0:	b11b      	cbz	r3, 8005baa <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ba2:	f104 0018 	add.w	r0, r4, #24
 8005ba6:	f7ff fd44 	bl	8005632 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005baa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005bac:	2201      	movs	r2, #1
 8005bae:	409a      	lsls	r2, r3
 8005bb0:	491a      	ldr	r1, [pc, #104]	@ (8005c1c <xTaskIncrementTick+0x110>)
 8005bb2:	6808      	ldr	r0, [r1, #0]
 8005bb4:	4302      	orrs	r2, r0
 8005bb6:	600a      	str	r2, [r1, #0]
 8005bb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005bbc:	009a      	lsls	r2, r3, #2
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	4814      	ldr	r0, [pc, #80]	@ (8005c14 <xTaskIncrementTick+0x108>)
 8005bc2:	4410      	add	r0, r2
 8005bc4:	f7ff fd11 	bl	80055ea <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bc8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005bca:	4b11      	ldr	r3, [pc, #68]	@ (8005c10 <xTaskIncrementTick+0x104>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d2d4      	bcs.n	8005b7e <xTaskIncrementTick+0x72>
 8005bd4:	e7d4      	b.n	8005b80 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8005bd6:	2700      	movs	r7, #0
 8005bd8:	e7d2      	b.n	8005b80 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bda:	4b0c      	ldr	r3, [pc, #48]	@ (8005c0c <xTaskIncrementTick+0x100>)
 8005bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005be0:	601a      	str	r2, [r3, #0]
					break;
 8005be2:	e7bb      	b.n	8005b5c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8005be4:	4a09      	ldr	r2, [pc, #36]	@ (8005c0c <xTaskIncrementTick+0x100>)
 8005be6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005be8:	e7b8      	b.n	8005b5c <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8005bea:	4a0d      	ldr	r2, [pc, #52]	@ (8005c20 <xTaskIncrementTick+0x114>)
 8005bec:	6813      	ldr	r3, [r2, #0]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005bf2:	2700      	movs	r7, #0
}
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bf8:	20000564 	.word	0x20000564
 8005bfc:	20000588 	.word	0x20000588
 8005c00:	200005d4 	.word	0x200005d4
 8005c04:	200005d0 	.word	0x200005d0
 8005c08:	20000574 	.word	0x20000574
 8005c0c:	2000056c 	.word	0x2000056c
 8005c10:	2000068c 	.word	0x2000068c
 8005c14:	20000600 	.word	0x20000600
 8005c18:	20000578 	.word	0x20000578
 8005c1c:	20000584 	.word	0x20000584
 8005c20:	2000057c 	.word	0x2000057c

08005c24 <xTaskResumeAll>:
{
 8005c24:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8005c26:	4b35      	ldr	r3, [pc, #212]	@ (8005cfc <xTaskResumeAll+0xd8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	b943      	cbnz	r3, 8005c3e <xTaskResumeAll+0x1a>
 8005c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	e7fe      	b.n	8005c3c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8005c3e:	f000 f9b1 	bl	8005fa4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005c42:	4b2e      	ldr	r3, [pc, #184]	@ (8005cfc <xTaskResumeAll+0xd8>)
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	3a01      	subs	r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d14f      	bne.n	8005cf0 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c50:	4b2b      	ldr	r3, [pc, #172]	@ (8005d00 <xTaskResumeAll+0xdc>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	b90b      	cbnz	r3, 8005c5a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8005c56:	2400      	movs	r4, #0
 8005c58:	e04b      	b.n	8005cf2 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8005c5a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c5c:	4b29      	ldr	r3, [pc, #164]	@ (8005d04 <xTaskResumeAll+0xe0>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	b31b      	cbz	r3, 8005caa <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c62:	4b28      	ldr	r3, [pc, #160]	@ (8005d04 <xTaskResumeAll+0xe0>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c68:	f104 0018 	add.w	r0, r4, #24
 8005c6c:	f7ff fce1 	bl	8005632 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c70:	1d25      	adds	r5, r4, #4
 8005c72:	4628      	mov	r0, r5
 8005c74:	f7ff fcdd 	bl	8005632 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c78:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4083      	lsls	r3, r0
 8005c7e:	4a22      	ldr	r2, [pc, #136]	@ (8005d08 <xTaskResumeAll+0xe4>)
 8005c80:	6811      	ldr	r1, [r2, #0]
 8005c82:	430b      	orrs	r3, r1
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8005d0c <xTaskResumeAll+0xe8>)
 8005c8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c92:	f7ff fcaa 	bl	80055ea <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005c98:	4b1d      	ldr	r3, [pc, #116]	@ (8005d10 <xTaskResumeAll+0xec>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d3dc      	bcc.n	8005c5c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8005ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8005d14 <xTaskResumeAll+0xf0>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	e7d8      	b.n	8005c5c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8005caa:	b10c      	cbz	r4, 8005cb0 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8005cac:	f7ff fcd4 	bl	8005658 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cb0:	4b19      	ldr	r3, [pc, #100]	@ (8005d18 <xTaskResumeAll+0xf4>)
 8005cb2:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005cb4:	b984      	cbnz	r4, 8005cd8 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8005cb6:	4b17      	ldr	r3, [pc, #92]	@ (8005d14 <xTaskResumeAll+0xf0>)
 8005cb8:	681c      	ldr	r4, [r3, #0]
 8005cba:	b1d4      	cbz	r4, 8005cf2 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8005cbc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005cc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cc4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005cd0:	2401      	movs	r4, #1
 8005cd2:	e00e      	b.n	8005cf2 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cd4:	3c01      	subs	r4, #1
 8005cd6:	d007      	beq.n	8005ce8 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8005cd8:	f7ff ff18 	bl	8005b0c <xTaskIncrementTick>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d0f9      	beq.n	8005cd4 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8005d14 <xTaskResumeAll+0xf0>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	e7f5      	b.n	8005cd4 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d18 <xTaskResumeAll+0xf4>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	e7e2      	b.n	8005cb6 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8005cf0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005cf2:	f000 f979 	bl	8005fe8 <vPortExitCritical>
}
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	bd38      	pop	{r3, r4, r5, pc}
 8005cfa:	bf00      	nop
 8005cfc:	20000564 	.word	0x20000564
 8005d00:	2000058c 	.word	0x2000058c
 8005d04:	200005bc 	.word	0x200005bc
 8005d08:	20000584 	.word	0x20000584
 8005d0c:	20000600 	.word	0x20000600
 8005d10:	2000068c 	.word	0x2000068c
 8005d14:	20000578 	.word	0x20000578
 8005d18:	2000057c 	.word	0x2000057c

08005d1c <vTaskDelay>:
	{
 8005d1c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d1e:	b1a8      	cbz	r0, 8005d4c <vTaskDelay+0x30>
 8005d20:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8005d22:	4b10      	ldr	r3, [pc, #64]	@ (8005d64 <vTaskDelay+0x48>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	b143      	cbz	r3, 8005d3a <vTaskDelay+0x1e>
 8005d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	e7fe      	b.n	8005d38 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005d3a:	f7ff fedf 	bl	8005afc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4620      	mov	r0, r4
 8005d42:	f7ff fddf 	bl	8005904 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005d46:	f7ff ff6d 	bl	8005c24 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005d4a:	b948      	cbnz	r0, 8005d60 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8005d4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	f3bf 8f6f 	isb	sy
	}
 8005d60:	bd10      	pop	{r4, pc}
 8005d62:	bf00      	nop
 8005d64:	20000564 	.word	0x20000564

08005d68 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d68:	4b22      	ldr	r3, [pc, #136]	@ (8005df4 <vTaskSwitchContext+0x8c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	b11b      	cbz	r3, 8005d76 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8005d6e:	4b22      	ldr	r3, [pc, #136]	@ (8005df8 <vTaskSwitchContext+0x90>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005d76:	4b20      	ldr	r3, [pc, #128]	@ (8005df8 <vTaskSwitchContext+0x90>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8005dfc <vTaskSwitchContext+0x94>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d80:	fab3 f383 	clz	r3, r3
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	f1c3 031f 	rsb	r3, r3, #31
 8005d8a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005d8e:	008a      	lsls	r2, r1, #2
 8005d90:	491b      	ldr	r1, [pc, #108]	@ (8005e00 <vTaskSwitchContext+0x98>)
 8005d92:	588a      	ldr	r2, [r1, r2]
 8005d94:	b942      	cbnz	r2, 8005da8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	e7fe      	b.n	8005da6 <vTaskSwitchContext+0x3e>
 8005da8:	4815      	ldr	r0, [pc, #84]	@ (8005e00 <vTaskSwitchContext+0x98>)
 8005daa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005dae:	008a      	lsls	r2, r1, #2
 8005db0:	4402      	add	r2, r0
 8005db2:	6851      	ldr	r1, [r2, #4]
 8005db4:	6849      	ldr	r1, [r1, #4]
 8005db6:	6051      	str	r1, [r2, #4]
 8005db8:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8005dbc:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8005dc0:	3208      	adds	r2, #8
 8005dc2:	4402      	add	r2, r0
 8005dc4:	4291      	cmp	r1, r2
 8005dc6:	d00d      	beq.n	8005de4 <vTaskSwitchContext+0x7c>
 8005dc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005dcc:	009a      	lsls	r2, r3, #2
 8005dce:	4b0c      	ldr	r3, [pc, #48]	@ (8005e00 <vTaskSwitchContext+0x98>)
 8005dd0:	4413      	add	r3, r2
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e04 <vTaskSwitchContext+0x9c>)
 8005dd8:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	334c      	adds	r3, #76	@ 0x4c
 8005dde:	4a0a      	ldr	r2, [pc, #40]	@ (8005e08 <vTaskSwitchContext+0xa0>)
 8005de0:	6013      	str	r3, [r2, #0]
}
 8005de2:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de4:	6848      	ldr	r0, [r1, #4]
 8005de6:	4662      	mov	r2, ip
 8005de8:	0091      	lsls	r1, r2, #2
 8005dea:	4a05      	ldr	r2, [pc, #20]	@ (8005e00 <vTaskSwitchContext+0x98>)
 8005dec:	440a      	add	r2, r1
 8005dee:	6050      	str	r0, [r2, #4]
 8005df0:	e7ea      	b.n	8005dc8 <vTaskSwitchContext+0x60>
 8005df2:	bf00      	nop
 8005df4:	20000564 	.word	0x20000564
 8005df8:	20000578 	.word	0x20000578
 8005dfc:	20000584 	.word	0x20000584
 8005e00:	20000600 	.word	0x20000600
 8005e04:	2000068c 	.word	0x2000068c
 8005e08:	20000018 	.word	0x20000018

08005e0c <vTaskSuspend>:
	{
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8005e10:	f000 f8c8 	bl	8005fa4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005e14:	b364      	cbz	r4, 8005e70 <vTaskSuspend+0x64>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e16:	1d25      	adds	r5, r4, #4
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f7ff fc0a 	bl	8005632 <uxListRemove>
 8005e1e:	b970      	cbnz	r0, 8005e3e <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005e20:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005e22:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	492c      	ldr	r1, [pc, #176]	@ (8005edc <vTaskSuspend+0xd0>)
 8005e2a:	58cb      	ldr	r3, [r1, r3]
 8005e2c:	b93b      	cbnz	r3, 8005e3e <vTaskSuspend+0x32>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	fa03 f202 	lsl.w	r2, r3, r2
 8005e34:	492a      	ldr	r1, [pc, #168]	@ (8005ee0 <vTaskSuspend+0xd4>)
 8005e36:	680b      	ldr	r3, [r1, #0]
 8005e38:	ea23 0302 	bic.w	r3, r3, r2
 8005e3c:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e3e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005e40:	b11b      	cbz	r3, 8005e4a <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e42:	f104 0018 	add.w	r0, r4, #24
 8005e46:	f7ff fbf4 	bl	8005632 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	4825      	ldr	r0, [pc, #148]	@ (8005ee4 <vTaskSuspend+0xd8>)
 8005e4e:	f7ff fbcc 	bl	80055ea <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005e52:	f894 309c 	ldrb.w	r3, [r4, #156]	@ 0x9c
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d00c      	beq.n	8005e76 <vTaskSuspend+0x6a>
		taskEXIT_CRITICAL();
 8005e5c:	f000 f8c4 	bl	8005fe8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8005e60:	4b21      	ldr	r3, [pc, #132]	@ (8005ee8 <vTaskSuspend+0xdc>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	b95b      	cbnz	r3, 8005e7e <vTaskSuspend+0x72>
		if( pxTCB == pxCurrentTCB )
 8005e66:	4b21      	ldr	r3, [pc, #132]	@ (8005eec <vTaskSuspend+0xe0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	42a3      	cmp	r3, r4
 8005e6c:	d00e      	beq.n	8005e8c <vTaskSuspend+0x80>
	}
 8005e6e:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005e70:	4b1e      	ldr	r3, [pc, #120]	@ (8005eec <vTaskSuspend+0xe0>)
 8005e72:	681c      	ldr	r4, [r3, #0]
 8005e74:	e7cf      	b.n	8005e16 <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e76:	2300      	movs	r3, #0
 8005e78:	f884 309c 	strb.w	r3, [r4, #156]	@ 0x9c
 8005e7c:	e7ee      	b.n	8005e5c <vTaskSuspend+0x50>
			taskENTER_CRITICAL();
 8005e7e:	f000 f891 	bl	8005fa4 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8005e82:	f7ff fbe9 	bl	8005658 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8005e86:	f000 f8af 	bl	8005fe8 <vPortExitCritical>
 8005e8a:	e7ec      	b.n	8005e66 <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
 8005e8c:	4b16      	ldr	r3, [pc, #88]	@ (8005ee8 <vTaskSuspend+0xdc>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	b1b3      	cbz	r3, 8005ec0 <vTaskSuspend+0xb4>
				configASSERT( uxSchedulerSuspended == 0 );
 8005e92:	4b17      	ldr	r3, [pc, #92]	@ (8005ef0 <vTaskSuspend+0xe4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	b143      	cbz	r3, 8005eaa <vTaskSuspend+0x9e>
 8005e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	e7fe      	b.n	8005ea8 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8005eaa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eb2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	e7d6      	b.n	8005e6e <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005ec0:	4b08      	ldr	r3, [pc, #32]	@ (8005ee4 <vTaskSuspend+0xd8>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef4 <vTaskSuspend+0xe8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d103      	bne.n	8005ed4 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8005ecc:	4b07      	ldr	r3, [pc, #28]	@ (8005eec <vTaskSuspend+0xe0>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	e7cc      	b.n	8005e6e <vTaskSuspend+0x62>
					vTaskSwitchContext();
 8005ed4:	f7ff ff48 	bl	8005d68 <vTaskSwitchContext>
	}
 8005ed8:	e7c9      	b.n	8005e6e <vTaskSuspend+0x62>
 8005eda:	bf00      	nop
 8005edc:	20000600 	.word	0x20000600
 8005ee0:	20000584 	.word	0x20000584
 8005ee4:	20000590 	.word	0x20000590
 8005ee8:	20000580 	.word	0x20000580
 8005eec:	2000068c 	.word	0x2000068c
 8005ef0:	20000564 	.word	0x20000564
 8005ef4:	2000058c 	.word	0x2000058c

08005ef8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ef8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005efe:	4b0d      	ldr	r3, [pc, #52]	@ (8005f34 <prvTaskExitError+0x3c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f06:	d008      	beq.n	8005f1a <prvTaskExitError+0x22>
 8005f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0c:	f383 8811 	msr	BASEPRI, r3
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	e7fe      	b.n	8005f18 <prvTaskExitError+0x20>
 8005f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f2a:	9b01      	ldr	r3, [sp, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0fc      	beq.n	8005f2a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f30:	b002      	add	sp, #8
 8005f32:	4770      	bx	lr
 8005f34:	20000010 	.word	0x20000010

08005f38 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005f38:	4806      	ldr	r0, [pc, #24]	@ (8005f54 <prvPortStartFirstTask+0x1c>)
 8005f3a:	6800      	ldr	r0, [r0, #0]
 8005f3c:	6800      	ldr	r0, [r0, #0]
 8005f3e:	f380 8808 	msr	MSP, r0
 8005f42:	b662      	cpsie	i
 8005f44:	b661      	cpsie	f
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	df00      	svc	0
 8005f50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f52:	0000      	.short	0x0000
 8005f54:	e000ed08 	.word	0xe000ed08

08005f58 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f5c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f60:	f021 0101 	bic.w	r1, r1, #1
 8005f64:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f68:	4b03      	ldr	r3, [pc, #12]	@ (8005f78 <pxPortInitialiseStack+0x20>)
 8005f6a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f6e:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8005f72:	3840      	subs	r0, #64	@ 0x40
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	08005ef9 	.word	0x08005ef9
 8005f7c:	00000000 	.word	0x00000000

08005f80 <SVC_Handler>:
	__asm volatile (
 8005f80:	4b07      	ldr	r3, [pc, #28]	@ (8005fa0 <pxCurrentTCBConst2>)
 8005f82:	6819      	ldr	r1, [r3, #0]
 8005f84:	6808      	ldr	r0, [r1, #0]
 8005f86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005f8a:	f380 8809 	msr	PSP, r0
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f380 8811 	msr	BASEPRI, r0
 8005f9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005f9e:	4770      	bx	lr

08005fa0 <pxCurrentTCBConst2>:
 8005fa0:	2000068c 	.word	0x2000068c

08005fa4 <vPortEnterCritical>:
 8005fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8005fe4 <vPortEnterCritical+0x40>)
 8005fb6:	6813      	ldr	r3, [r2, #0]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d000      	beq.n	8005fc2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8005fc0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fc2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005fc6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8005fca:	f013 0fff 	tst.w	r3, #255	@ 0xff
 8005fce:	d0f7      	beq.n	8005fc0 <vPortEnterCritical+0x1c>
 8005fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	e7fe      	b.n	8005fe0 <vPortEnterCritical+0x3c>
 8005fe2:	bf00      	nop
 8005fe4:	20000010 	.word	0x20000010

08005fe8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8005fe8:	4b09      	ldr	r3, [pc, #36]	@ (8006010 <vPortExitCritical+0x28>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	b943      	cbnz	r3, 8006000 <vPortExitCritical+0x18>
 8005fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	e7fe      	b.n	8005ffe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006000:	3b01      	subs	r3, #1
 8006002:	4a03      	ldr	r2, [pc, #12]	@ (8006010 <vPortExitCritical+0x28>)
 8006004:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006006:	b90b      	cbnz	r3, 800600c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006008:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	20000010 	.word	0x20000010
	...

08006020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006020:	f3ef 8009 	mrs	r0, PSP
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	4b0d      	ldr	r3, [pc, #52]	@ (8006060 <pxCurrentTCBConst>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006030:	6010      	str	r0, [r2, #0]
 8006032:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006036:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800603a:	f380 8811 	msr	BASEPRI, r0
 800603e:	f7ff fe93 	bl	8005d68 <vTaskSwitchContext>
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f380 8811 	msr	BASEPRI, r0
 800604a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800604e:	6819      	ldr	r1, [r3, #0]
 8006050:	6808      	ldr	r0, [r1, #0]
 8006052:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006056:	f380 8809 	msr	PSP, r0
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	4770      	bx	lr

08006060 <pxCurrentTCBConst>:
 8006060:	2000068c 	.word	0x2000068c

08006064 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006064:	b508      	push	{r3, lr}
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006076:	f7ff fd49 	bl	8005b0c <xTaskIncrementTick>
 800607a:	b128      	cbz	r0, 8006088 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800607c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006084:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8006088:	2300      	movs	r3, #0
 800608a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800608e:	bd08      	pop	{r3, pc}

08006090 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006090:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006094:	2300      	movs	r3, #0
 8006096:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006098:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800609a:	4b05      	ldr	r3, [pc, #20]	@ (80060b0 <vPortSetupTimerInterrupt+0x20>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4905      	ldr	r1, [pc, #20]	@ (80060b4 <vPortSetupTimerInterrupt+0x24>)
 80060a0:	fba1 1303 	umull	r1, r3, r1, r3
 80060a4:	099b      	lsrs	r3, r3, #6
 80060a6:	3b01      	subs	r3, #1
 80060a8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060aa:	2307      	movs	r3, #7
 80060ac:	6113      	str	r3, [r2, #16]
}
 80060ae:	4770      	bx	lr
 80060b0:	20000000 	.word	0x20000000
 80060b4:	10624dd3 	.word	0x10624dd3

080060b8 <xPortStartScheduler>:
{
 80060b8:	b510      	push	{r4, lr}
 80060ba:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060bc:	4b2a      	ldr	r3, [pc, #168]	@ (8006168 <xPortStartScheduler+0xb0>)
 80060be:	781a      	ldrb	r2, [r3, #0]
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060c4:	22ff      	movs	r2, #255	@ 0xff
 80060c6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80060d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80060d8:	4a24      	ldr	r2, [pc, #144]	@ (800616c <xPortStartScheduler+0xb4>)
 80060da:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060dc:	4b24      	ldr	r3, [pc, #144]	@ (8006170 <xPortStartScheduler+0xb8>)
 80060de:	2207      	movs	r2, #7
 80060e0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060e2:	e009      	b.n	80060f8 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80060e4:	4a22      	ldr	r2, [pc, #136]	@ (8006170 <xPortStartScheduler+0xb8>)
 80060e6:	6813      	ldr	r3, [r2, #0]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80060fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006100:	d1f0      	bne.n	80060e4 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006102:	4b1b      	ldr	r3, [pc, #108]	@ (8006170 <xPortStartScheduler+0xb8>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b03      	cmp	r3, #3
 8006108:	d008      	beq.n	800611c <xPortStartScheduler+0x64>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	e7fe      	b.n	800611a <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	4a14      	ldr	r2, [pc, #80]	@ (8006170 <xPortStartScheduler+0xb8>)
 8006120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006122:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006126:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006128:	9b01      	ldr	r3, [sp, #4]
 800612a:	b2db      	uxtb	r3, r3
 800612c:	4a0e      	ldr	r2, [pc, #56]	@ (8006168 <xPortStartScheduler+0xb0>)
 800612e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006130:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006134:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8006138:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800613c:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006140:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8006144:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 8006148:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800614c:	f7ff ffa0 	bl	8006090 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006150:	2400      	movs	r4, #0
 8006152:	4b08      	ldr	r3, [pc, #32]	@ (8006174 <xPortStartScheduler+0xbc>)
 8006154:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8006156:	f7ff feef 	bl	8005f38 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800615a:	f7ff fe05 	bl	8005d68 <vTaskSwitchContext>
	prvTaskExitError();
 800615e:	f7ff fecb 	bl	8005ef8 <prvTaskExitError>
}
 8006162:	4620      	mov	r0, r4
 8006164:	b002      	add	sp, #8
 8006166:	bd10      	pop	{r4, pc}
 8006168:	e000e400 	.word	0xe000e400
 800616c:	20000694 	.word	0x20000694
 8006170:	20000690 	.word	0x20000690
 8006174:	20000010 	.word	0x20000010

08006178 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006178:	4a12      	ldr	r2, [pc, #72]	@ (80061c4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800617a:	f012 0f07 	tst.w	r2, #7
 800617e:	d01e      	beq.n	80061be <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006180:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006182:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006186:	f5c1 6340 	rsb	r3, r1, #3072	@ 0xc00
 800618a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800618c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800618e:	480e      	ldr	r0, [pc, #56]	@ (80061c8 <prvHeapInit+0x50>)
 8006190:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006192:	2100      	movs	r1, #0
 8006194:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006196:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006198:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800619a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800619e:	480b      	ldr	r0, [pc, #44]	@ (80061cc <prvHeapInit+0x54>)
 80061a0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80061a2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061a4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061a6:	1a99      	subs	r1, r3, r2
 80061a8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061aa:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061ac:	4b08      	ldr	r3, [pc, #32]	@ (80061d0 <prvHeapInit+0x58>)
 80061ae:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061b0:	4b08      	ldr	r3, [pc, #32]	@ (80061d4 <prvHeapInit+0x5c>)
 80061b2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061b4:	4b08      	ldr	r3, [pc, #32]	@ (80061d8 <prvHeapInit+0x60>)
 80061b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80061ba:	601a      	str	r2, [r3, #0]
}
 80061bc:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061be:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80061c2:	e7e4      	b.n	800618e <prvHeapInit+0x16>
 80061c4:	200006b8 	.word	0x200006b8
 80061c8:	200006b0 	.word	0x200006b0
 80061cc:	200006ac 	.word	0x200006ac
 80061d0:	200006a4 	.word	0x200006a4
 80061d4:	200006a8 	.word	0x200006a8
 80061d8:	20000698 	.word	0x20000698

080061dc <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061dc:	4b15      	ldr	r3, [pc, #84]	@ (8006234 <prvInsertBlockIntoFreeList+0x58>)
 80061de:	461a      	mov	r2, r3
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4283      	cmp	r3, r0
 80061e4:	d3fb      	bcc.n	80061de <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061e6:	6851      	ldr	r1, [r2, #4]
 80061e8:	eb02 0c01 	add.w	ip, r2, r1
 80061ec:	4584      	cmp	ip, r0
 80061ee:	d009      	beq.n	8006204 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061f0:	6841      	ldr	r1, [r0, #4]
 80061f2:	eb00 0c01 	add.w	ip, r0, r1
 80061f6:	4563      	cmp	r3, ip
 80061f8:	d009      	beq.n	800620e <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061fa:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061fc:	4290      	cmp	r0, r2
 80061fe:	d018      	beq.n	8006232 <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006200:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8006202:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006204:	6840      	ldr	r0, [r0, #4]
 8006206:	4401      	add	r1, r0
 8006208:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800620a:	4610      	mov	r0, r2
 800620c:	e7f0      	b.n	80061f0 <prvInsertBlockIntoFreeList+0x14>
{
 800620e:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006210:	4c09      	ldr	r4, [pc, #36]	@ (8006238 <prvInsertBlockIntoFreeList+0x5c>)
 8006212:	6824      	ldr	r4, [r4, #0]
 8006214:	42a3      	cmp	r3, r4
 8006216:	d00a      	beq.n	800622e <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	4419      	add	r1, r3
 800621c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800621e:	6813      	ldr	r3, [r2, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8006224:	4290      	cmp	r0, r2
 8006226:	d000      	beq.n	800622a <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006228:	6010      	str	r0, [r2, #0]
	}
}
 800622a:	bc10      	pop	{r4}
 800622c:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800622e:	6004      	str	r4, [r0, #0]
 8006230:	e7f8      	b.n	8006224 <prvInsertBlockIntoFreeList+0x48>
 8006232:	4770      	bx	lr
 8006234:	200006b0 	.word	0x200006b0
 8006238:	200006ac 	.word	0x200006ac

0800623c <pvPortMalloc>:
{
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006240:	f7ff fc5c 	bl	8005afc <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006244:	4b38      	ldr	r3, [pc, #224]	@ (8006328 <pvPortMalloc+0xec>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	b1b3      	cbz	r3, 8006278 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800624a:	4b38      	ldr	r3, [pc, #224]	@ (800632c <pvPortMalloc+0xf0>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	421c      	tst	r4, r3
 8006250:	d150      	bne.n	80062f4 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8006252:	2c00      	cmp	r4, #0
 8006254:	d050      	beq.n	80062f8 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8006256:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800625a:	f014 0f07 	tst.w	r4, #7
 800625e:	d002      	beq.n	8006266 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006260:	f022 0207 	bic.w	r2, r2, #7
 8006264:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006266:	2a00      	cmp	r2, #0
 8006268:	d055      	beq.n	8006316 <pvPortMalloc+0xda>
 800626a:	4b31      	ldr	r3, [pc, #196]	@ (8006330 <pvPortMalloc+0xf4>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4293      	cmp	r3, r2
 8006270:	d353      	bcc.n	800631a <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8006272:	4930      	ldr	r1, [pc, #192]	@ (8006334 <pvPortMalloc+0xf8>)
 8006274:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006276:	e004      	b.n	8006282 <pvPortMalloc+0x46>
			prvHeapInit();
 8006278:	f7ff ff7e 	bl	8006178 <prvHeapInit>
 800627c:	e7e5      	b.n	800624a <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800627e:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8006280:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006282:	6863      	ldr	r3, [r4, #4]
 8006284:	4293      	cmp	r3, r2
 8006286:	d202      	bcs.n	800628e <pvPortMalloc+0x52>
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1f7      	bne.n	800627e <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800628e:	4b26      	ldr	r3, [pc, #152]	@ (8006328 <pvPortMalloc+0xec>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	42a3      	cmp	r3, r4
 8006294:	d043      	beq.n	800631e <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006296:	680d      	ldr	r5, [r1, #0]
 8006298:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800629e:	6863      	ldr	r3, [r4, #4]
 80062a0:	1a9b      	subs	r3, r3, r2
 80062a2:	2b10      	cmp	r3, #16
 80062a4:	d910      	bls.n	80062c8 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062a6:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062a8:	f010 0f07 	tst.w	r0, #7
 80062ac:	d008      	beq.n	80062c0 <pvPortMalloc+0x84>
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	e7fe      	b.n	80062be <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062c0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062c2:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062c4:	f7ff ff8a 	bl	80061dc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062c8:	6862      	ldr	r2, [r4, #4]
 80062ca:	4919      	ldr	r1, [pc, #100]	@ (8006330 <pvPortMalloc+0xf4>)
 80062cc:	680b      	ldr	r3, [r1, #0]
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062d2:	4919      	ldr	r1, [pc, #100]	@ (8006338 <pvPortMalloc+0xfc>)
 80062d4:	6809      	ldr	r1, [r1, #0]
 80062d6:	428b      	cmp	r3, r1
 80062d8:	d201      	bcs.n	80062de <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062da:	4917      	ldr	r1, [pc, #92]	@ (8006338 <pvPortMalloc+0xfc>)
 80062dc:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062de:	4b13      	ldr	r3, [pc, #76]	@ (800632c <pvPortMalloc+0xf0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80062ea:	4a14      	ldr	r2, [pc, #80]	@ (800633c <pvPortMalloc+0x100>)
 80062ec:	6813      	ldr	r3, [r2, #0]
 80062ee:	3301      	adds	r3, #1
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e002      	b.n	80062fa <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 80062f4:	2500      	movs	r5, #0
 80062f6:	e000      	b.n	80062fa <pvPortMalloc+0xbe>
 80062f8:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 80062fa:	f7ff fc93 	bl	8005c24 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062fe:	f015 0f07 	tst.w	r5, #7
 8006302:	d00e      	beq.n	8006322 <pvPortMalloc+0xe6>
 8006304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	e7fe      	b.n	8006314 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8006316:	2500      	movs	r5, #0
 8006318:	e7ef      	b.n	80062fa <pvPortMalloc+0xbe>
 800631a:	2500      	movs	r5, #0
 800631c:	e7ed      	b.n	80062fa <pvPortMalloc+0xbe>
 800631e:	2500      	movs	r5, #0
 8006320:	e7eb      	b.n	80062fa <pvPortMalloc+0xbe>
}
 8006322:	4628      	mov	r0, r5
 8006324:	bd38      	pop	{r3, r4, r5, pc}
 8006326:	bf00      	nop
 8006328:	200006ac 	.word	0x200006ac
 800632c:	20000698 	.word	0x20000698
 8006330:	200006a8 	.word	0x200006a8
 8006334:	200006b0 	.word	0x200006b0
 8006338:	200006a4 	.word	0x200006a4
 800633c:	200006a0 	.word	0x200006a0

08006340 <vPortFree>:
	if( pv != NULL )
 8006340:	2800      	cmp	r0, #0
 8006342:	d034      	beq.n	80063ae <vPortFree+0x6e>
{
 8006344:	b538      	push	{r3, r4, r5, lr}
 8006346:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006348:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800634c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006350:	4a17      	ldr	r2, [pc, #92]	@ (80063b0 <vPortFree+0x70>)
 8006352:	6812      	ldr	r2, [r2, #0]
 8006354:	4213      	tst	r3, r2
 8006356:	d108      	bne.n	800636a <vPortFree+0x2a>
 8006358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	e7fe      	b.n	8006368 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800636a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800636e:	b141      	cbz	r1, 8006382 <vPortFree+0x42>
 8006370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	e7fe      	b.n	8006380 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006382:	ea23 0302 	bic.w	r3, r3, r2
 8006386:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800638a:	f7ff fbb7 	bl	8005afc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800638e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006392:	4a08      	ldr	r2, [pc, #32]	@ (80063b4 <vPortFree+0x74>)
 8006394:	6813      	ldr	r3, [r2, #0]
 8006396:	440b      	add	r3, r1
 8006398:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800639a:	4628      	mov	r0, r5
 800639c:	f7ff ff1e 	bl	80061dc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063a0:	4a05      	ldr	r2, [pc, #20]	@ (80063b8 <vPortFree+0x78>)
 80063a2:	6813      	ldr	r3, [r2, #0]
 80063a4:	3301      	adds	r3, #1
 80063a6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80063a8:	f7ff fc3c 	bl	8005c24 <xTaskResumeAll>
}
 80063ac:	bd38      	pop	{r3, r4, r5, pc}
 80063ae:	4770      	bx	lr
 80063b0:	20000698 	.word	0x20000698
 80063b4:	200006a8 	.word	0x200006a8
 80063b8:	2000069c 	.word	0x2000069c

080063bc <tmc_microsteps_to_mres>:

uint8_t tmc_microsteps_to_mres (uint16_t microsteps)
{
    uint8_t value = 0;

    microsteps = microsteps == 0 ? 1 : microsteps;
 80063bc:	4603      	mov	r3, r0
 80063be:	b900      	cbnz	r0, 80063c2 <tmc_microsteps_to_mres+0x6>
 80063c0:	2301      	movs	r3, #1
 80063c2:	2000      	movs	r0, #0
 80063c4:	e002      	b.n	80063cc <tmc_microsteps_to_mres+0x10>

    while((microsteps & 0x01) == 0) {
        value++;
 80063c6:	3001      	adds	r0, #1
 80063c8:	b2c0      	uxtb	r0, r0
        microsteps >>= 1;
 80063ca:	085b      	lsrs	r3, r3, #1
    while((microsteps & 0x01) == 0) {
 80063cc:	f013 0f01 	tst.w	r3, #1
 80063d0:	d0f9      	beq.n	80063c6 <tmc_microsteps_to_mres+0xa>
    }

    return 8 - (value > 8 ? 8 : value);
 80063d2:	2808      	cmp	r0, #8
 80063d4:	bf28      	it	cs
 80063d6:	2008      	movcs	r0, #8
 80063d8:	f1c0 0008 	rsb	r0, r0, #8
}
 80063dc:	b2c0      	uxtb	r0, r0
 80063de:	4770      	bx	lr

080063e0 <tmc_crc8>:
{
    return tmc_motors;
}

void tmc_crc8 (uint8_t *datagram, uint8_t datagramLength)
{
 80063e0:	b530      	push	{r4, r5, lr}
 80063e2:	4604      	mov	r4, r0
 80063e4:	460d      	mov	r5, r1
    int i,j;
    uint8_t *crc = datagram + (datagramLength - 1); // CRC located in last byte of message
 80063e6:	1e4b      	subs	r3, r1, #1
 80063e8:	eb00 0e03 	add.w	lr, r0, r3
    uint8_t currentByte;
    *crc = 0;
 80063ec:	2100      	movs	r1, #0
 80063ee:	54c1      	strb	r1, [r0, r3]
    for (i = 0; i < (datagramLength - 1); i++) {    // Execute for all bytes of a message
 80063f0:	e015      	b.n	800641e <tmc_crc8+0x3e>
        currentByte = datagram[i];                  // Retrieve a byte to be sent from Array
        for (j = 0; j < 8; j++) {
            if ((*crc >> 7) ^ (currentByte & 0x01)) // update CRC based result of XOR operation
                *crc = (*crc << 1) ^ 0x07;
            else
                *crc = (*crc << 1);
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	f88e 3000 	strb.w	r3, [lr]
            currentByte = currentByte >> 1;
 80063f8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
        for (j = 0; j < 8; j++) {
 80063fc:	3201      	adds	r2, #1
 80063fe:	2a07      	cmp	r2, #7
 8006400:	dc0c      	bgt.n	800641c <tmc_crc8+0x3c>
            if ((*crc >> 7) ^ (currentByte & 0x01)) // update CRC based result of XOR operation
 8006402:	f89e 3000 	ldrb.w	r3, [lr]
 8006406:	f00c 0001 	and.w	r0, ip, #1
 800640a:	ebb0 1fd3 	cmp.w	r0, r3, lsr #7
 800640e:	d0f0      	beq.n	80063f2 <tmc_crc8+0x12>
                *crc = (*crc << 1) ^ 0x07;
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	f083 0307 	eor.w	r3, r3, #7
 8006416:	f88e 3000 	strb.w	r3, [lr]
 800641a:	e7ed      	b.n	80063f8 <tmc_crc8+0x18>
    for (i = 0; i < (datagramLength - 1); i++) {    // Execute for all bytes of a message
 800641c:	3101      	adds	r1, #1
 800641e:	1e6b      	subs	r3, r5, #1
 8006420:	428b      	cmp	r3, r1
 8006422:	dd03      	ble.n	800642c <tmc_crc8+0x4c>
        currentByte = datagram[i];                  // Retrieve a byte to be sent from Array
 8006424:	f814 c001 	ldrb.w	ip, [r4, r1]
        for (j = 0; j < 8; j++) {
 8006428:	2200      	movs	r2, #0
 800642a:	e7e8      	b.n	80063fe <tmc_crc8+0x1e>
        } // for CRC bit
    }
}
 800642c:	bd30      	pop	{r4, r5, pc}
	...

08006430 <tmc_uart_write>:

void tmc_uart_write (trinamic_motor_t driver, TMC_uart_write_datagram_t *datagram)
{
 8006430:	b530      	push	{r4, r5, lr}
 8006432:	b083      	sub	sp, #12
 8006434:	ab02      	add	r3, sp, #8
 8006436:	e903 0003 	stmdb	r3, {r0, r1}
 800643a:	4614      	mov	r4, r2
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 800643c:	4d06      	ldr	r5, [pc, #24]	@ (8006458 <tmc_uart_write+0x28>)
 800643e:	4628      	mov	r0, r5
 8006440:	f7fe fe2a 	bl	8005098 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&huart1, datagram->data, sizeof(TMC_uart_write_datagram_t), HAL_MAX_DELAY);
 8006444:	f04f 33ff 	mov.w	r3, #4294967295
 8006448:	2208      	movs	r2, #8
 800644a:	4621      	mov	r1, r4
 800644c:	4628      	mov	r0, r5
 800644e:	f7fe fb86 	bl	8004b5e <HAL_UART_Transmit>
}
 8006452:	b003      	add	sp, #12
 8006454:	bd30      	pop	{r4, r5, pc}
 8006456:	bf00      	nop
 8006458:	2000038c 	.word	0x2000038c

0800645c <tmc_uart_read>:

TMC_uart_write_datagram_t *tmc_uart_read (trinamic_motor_t driver, TMC_uart_read_datagram_t *datagram)
{
 800645c:	b530      	push	{r4, r5, lr}
 800645e:	b085      	sub	sp, #20
 8006460:	466b      	mov	r3, sp
 8006462:	e883 0003 	stmia.w	r3, {r0, r1}
 8006466:	4614      	mov	r4, r2
	static TMC_uart_write_datagram_t res;

	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8006468:	4d1b      	ldr	r5, [pc, #108]	@ (80064d8 <tmc_uart_read+0x7c>)
 800646a:	4628      	mov	r0, r5
 800646c:	f7fe fe14 	bl	8005098 <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef wstatus = HAL_UART_Transmit(&huart1, datagram->data, sizeof(TMC_uart_read_datagram_t), HAL_MAX_DELAY);
 8006470:	f04f 33ff 	mov.w	r3, #4294967295
 8006474:	2204      	movs	r2, #4
 8006476:	4621      	mov	r1, r4
 8006478:	4628      	mov	r0, r5
 800647a:	f7fe fb70 	bl	8004b5e <HAL_UART_Transmit>
	if(wstatus == HAL_OK){
 800647e:	bb40      	cbnz	r0, 80064d2 <tmc_uart_read+0x76>
		uint8_t buffer[8] = {0};
 8006480:	2400      	movs	r4, #0
 8006482:	9402      	str	r4, [sp, #8]
 8006484:	9403      	str	r4, [sp, #12]
		for(int i = 0; i < sizeof(buffer) ; i++){
 8006486:	e00c      	b.n	80064a2 <tmc_uart_read+0x46>
			HAL_HalfDuplex_EnableReceiver(&huart1);
 8006488:	4d13      	ldr	r5, [pc, #76]	@ (80064d8 <tmc_uart_read+0x7c>)
 800648a:	4628      	mov	r0, r5
 800648c:	f7fe fe1f 	bl	80050ce <HAL_HalfDuplex_EnableReceiver>
			HAL_UART_Receive(&huart1, &buffer[i], sizeof(buffer), 100);
 8006490:	2364      	movs	r3, #100	@ 0x64
 8006492:	2208      	movs	r2, #8
 8006494:	eb0d 0102 	add.w	r1, sp, r2
 8006498:	4421      	add	r1, r4
 800649a:	4628      	mov	r0, r5
 800649c:	f7fe fbc5 	bl	8004c2a <HAL_UART_Receive>
		for(int i = 0; i < sizeof(buffer) ; i++){
 80064a0:	3401      	adds	r4, #1
 80064a2:	2c07      	cmp	r4, #7
 80064a4:	d9f0      	bls.n	8006488 <tmc_uart_read+0x2c>
		}

		memcpy(res.data, buffer, sizeof(buffer));
 80064a6:	4c0d      	ldr	r4, [pc, #52]	@ (80064dc <tmc_uart_read+0x80>)
 80064a8:	ab04      	add	r3, sp, #16
 80064aa:	e913 0003 	ldmdb	r3, {r0, r1}
 80064ae:	e884 0003 	stmia.w	r4, {r0, r1}
		uint8_t crc = res.msg.crc;
 80064b2:	79e5      	ldrb	r5, [r4, #7]
		tmc_crc8(res.data, sizeof(TMC_uart_write_datagram_t));
 80064b4:	2108      	movs	r1, #8
 80064b6:	4620      	mov	r0, r4
 80064b8:	f7ff ff92 	bl	80063e0 <tmc_crc8>
		if(res.msg.slave == 0xFF && crc == res.msg.crc){
 80064bc:	7863      	ldrb	r3, [r4, #1]
 80064be:	2bff      	cmp	r3, #255	@ 0xff
 80064c0:	d102      	bne.n	80064c8 <tmc_uart_read+0x6c>
 80064c2:	79e3      	ldrb	r3, [r4, #7]
 80064c4:	42ab      	cmp	r3, r5
 80064c6:	d002      	beq.n	80064ce <tmc_uart_read+0x72>
			return &res;
		}
	}
	return 0;
 80064c8:	2000      	movs	r0, #0
}
 80064ca:	b005      	add	sp, #20
 80064cc:	bd30      	pop	{r4, r5, pc}
			return &res;
 80064ce:	4620      	mov	r0, r4
 80064d0:	e7fb      	b.n	80064ca <tmc_uart_read+0x6e>
	return 0;
 80064d2:	2000      	movs	r0, #0
 80064d4:	e7f9      	b.n	80064ca <tmc_uart_read+0x6e>
 80064d6:	bf00      	nop
 80064d8:	2000038c 	.word	0x2000038c
 80064dc:	200012b8 	.word	0x200012b8

080064e0 <PID_Init>:
static uint8_t PWM_Pulse_Complete = TRUE;
static uint8_t isBrake = FALSE;
static float pid2velocity = 0;

void PID_Init(PID_t* controller, float Kp, float Ki, float Kd){
	controller->Kp = Kp;
 80064e0:	6001      	str	r1, [r0, #0]
	controller->Ki = Ki;
 80064e2:	6042      	str	r2, [r0, #4]
	controller->Kd = Kd;
 80064e4:	6083      	str	r3, [r0, #8]

	controller->integral = 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61c3      	str	r3, [r0, #28]
	controller->prevError = 0;
 80064ea:	6203      	str	r3, [r0, #32]
	controller->output = 0;
 80064ec:	6183      	str	r3, [r0, #24]
}
 80064ee:	4770      	bx	lr

080064f0 <PID_Run>:

void PID_Run(){
 80064f0:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start_IT(&htim3);
 80064f2:	4802      	ldr	r0, [pc, #8]	@ (80064fc <PID_Run+0xc>)
 80064f4:	f7fd fde4 	bl	80040c0 <HAL_TIM_Base_Start_IT>
}
 80064f8:	bd08      	pop	{r3, pc}
 80064fa:	bf00      	nop
 80064fc:	200003d4 	.word	0x200003d4

08006500 <PID_Compute>:

void PID_Stop(){
	HAL_TIM_Base_Stop_IT(&htim3);
}

float PID_Compute(int32_t* sp, int32_t* pv){
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PIDController.setpoint = *sp;
 8006502:	6804      	ldr	r4, [r0, #0]
 8006504:	4e2b      	ldr	r6, [pc, #172]	@ (80065b4 <PID_Compute+0xb4>)
 8006506:	60f4      	str	r4, [r6, #12]
	PIDController.processVal = *pv;
 8006508:	680b      	ldr	r3, [r1, #0]
 800650a:	6133      	str	r3, [r6, #16]
	PIDController.error = PIDController.setpoint - PIDController.processVal;
 800650c:	1ae4      	subs	r4, r4, r3
 800650e:	6174      	str	r4, [r6, #20]

	// Integrasi error dikalikan dt
	PIDController.integral += PIDController.error * PID_DT;
 8006510:	69f7      	ldr	r7, [r6, #28]
 8006512:	4620      	mov	r0, r4
 8006514:	f7fa f902 	bl	800071c <__aeabi_i2f>
 8006518:	4605      	mov	r5, r0
 800651a:	4927      	ldr	r1, [pc, #156]	@ (80065b8 <PID_Compute+0xb8>)
 800651c:	f7fa f952 	bl	80007c4 <__aeabi_fmul>
 8006520:	4601      	mov	r1, r0
 8006522:	4638      	mov	r0, r7
 8006524:	f7fa f846 	bl	80005b4 <__addsf3>
 8006528:	61f0      	str	r0, [r6, #28]

	// Clamp anti-windup
	if (fabs(PIDController.error) == 0) {
 800652a:	b90c      	cbnz	r4, 8006530 <PID_Compute+0x30>
	    PIDController.integral = 0;
 800652c:	2200      	movs	r2, #0
 800652e:	61f2      	str	r2, [r6, #28]
	}
	if(PIDController.integral > PID_INTEGRAL_MAX) PIDController.integral = PID_INTEGRAL_MAX;
 8006530:	4922      	ldr	r1, [pc, #136]	@ (80065bc <PID_Compute+0xbc>)
 8006532:	4b20      	ldr	r3, [pc, #128]	@ (80065b4 <PID_Compute+0xb4>)
 8006534:	69d8      	ldr	r0, [r3, #28]
 8006536:	f7fa fb01 	bl	8000b3c <__aeabi_fcmpgt>
 800653a:	b110      	cbz	r0, 8006542 <PID_Compute+0x42>
 800653c:	4b1d      	ldr	r3, [pc, #116]	@ (80065b4 <PID_Compute+0xb4>)
 800653e:	4a1f      	ldr	r2, [pc, #124]	@ (80065bc <PID_Compute+0xbc>)
 8006540:	61da      	str	r2, [r3, #28]
	if(PIDController.integral < PID_INTEGRAL_MIN) PIDController.integral = PID_INTEGRAL_MIN;
 8006542:	491f      	ldr	r1, [pc, #124]	@ (80065c0 <PID_Compute+0xc0>)
 8006544:	4b1b      	ldr	r3, [pc, #108]	@ (80065b4 <PID_Compute+0xb4>)
 8006546:	69d8      	ldr	r0, [r3, #28]
 8006548:	f7fa fada 	bl	8000b00 <__aeabi_fcmplt>
 800654c:	b110      	cbz	r0, 8006554 <PID_Compute+0x54>
 800654e:	4b19      	ldr	r3, [pc, #100]	@ (80065b4 <PID_Compute+0xb4>)
 8006550:	4a1b      	ldr	r2, [pc, #108]	@ (80065c0 <PID_Compute+0xc0>)
 8006552:	61da      	str	r2, [r3, #28]

	// Derivatif dibagi dt
	float derivative = (PIDController.error - PIDController.prevError) / PID_DT;
 8006554:	4c17      	ldr	r4, [pc, #92]	@ (80065b4 <PID_Compute+0xb4>)
 8006556:	6a21      	ldr	r1, [r4, #32]
 8006558:	4628      	mov	r0, r5
 800655a:	f7fa f829 	bl	80005b0 <__aeabi_fsub>
 800655e:	4916      	ldr	r1, [pc, #88]	@ (80065b8 <PID_Compute+0xb8>)
 8006560:	f7fa f9e4 	bl	800092c <__aeabi_fdiv>
 8006564:	4607      	mov	r7, r0

	float output = PIDController.Kp * PIDController.error
 8006566:	6821      	ldr	r1, [r4, #0]
 8006568:	4628      	mov	r0, r5
 800656a:	f7fa f92b 	bl	80007c4 <__aeabi_fmul>
 800656e:	4606      	mov	r6, r0
				 + PIDController.Ki * PIDController.integral
 8006570:	69e1      	ldr	r1, [r4, #28]
 8006572:	6860      	ldr	r0, [r4, #4]
 8006574:	f7fa f926 	bl	80007c4 <__aeabi_fmul>
 8006578:	4601      	mov	r1, r0
 800657a:	4630      	mov	r0, r6
 800657c:	f7fa f81a 	bl	80005b4 <__addsf3>
 8006580:	4606      	mov	r6, r0
				 + PIDController.Kd * derivative;
 8006582:	4639      	mov	r1, r7
 8006584:	68a0      	ldr	r0, [r4, #8]
 8006586:	f7fa f91d 	bl	80007c4 <__aeabi_fmul>
 800658a:	4601      	mov	r1, r0
	float output = PIDController.Kp * PIDController.error
 800658c:	4630      	mov	r0, r6
 800658e:	f7fa f811 	bl	80005b4 <__addsf3>
 8006592:	4604      	mov	r4, r0

	// Clamp output (optional)
	if(output > PID_OUTPUT_MAX) output = PID_OUTPUT_MAX;
 8006594:	4909      	ldr	r1, [pc, #36]	@ (80065bc <PID_Compute+0xbc>)
 8006596:	f7fa fad1 	bl	8000b3c <__aeabi_fcmpgt>
 800659a:	b100      	cbz	r0, 800659e <PID_Compute+0x9e>
 800659c:	4c07      	ldr	r4, [pc, #28]	@ (80065bc <PID_Compute+0xbc>)
	if(output < PID_OUTPUT_MIN) output = PID_OUTPUT_MIN;
 800659e:	4908      	ldr	r1, [pc, #32]	@ (80065c0 <PID_Compute+0xc0>)
 80065a0:	4620      	mov	r0, r4
 80065a2:	f7fa faad 	bl	8000b00 <__aeabi_fcmplt>
 80065a6:	b100      	cbz	r0, 80065aa <PID_Compute+0xaa>
 80065a8:	4c05      	ldr	r4, [pc, #20]	@ (80065c0 <PID_Compute+0xc0>)

	PIDController.prevError = PIDController.error;
 80065aa:	4b02      	ldr	r3, [pc, #8]	@ (80065b4 <PID_Compute+0xb4>)
 80065ac:	621d      	str	r5, [r3, #32]
	PIDController.output = output;
 80065ae:	619c      	str	r4, [r3, #24]

	return output;
}
 80065b0:	4620      	mov	r0, r4
 80065b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065b4:	200012d0 	.word	0x200012d0
 80065b8:	3a83126f 	.word	0x3a83126f
 80065bc:	49742400 	.word	0x49742400
 80065c0:	c9742400 	.word	0xc9742400

080065c4 <Motion_Init>:

void Motion_Init(){
 80065c4:	b510      	push	{r4, lr}
	TMC2209_SetDefaults(&driver);
 80065c6:	4c07      	ldr	r4, [pc, #28]	@ (80065e4 <Motion_Init+0x20>)
 80065c8:	4620      	mov	r0, r4
 80065ca:	f000 f9a5 	bl	8006918 <TMC2209_SetDefaults>
	TMC2209_Init(&driver);
 80065ce:	4620      	mov	r0, r4
 80065d0:	f000 faa4 	bl	8006b1c <TMC2209_Init>
	PID_Init(&PIDController, CONST_KP, CONST_KI, CONST_KD);
 80065d4:	2300      	movs	r3, #0
 80065d6:	4a04      	ldr	r2, [pc, #16]	@ (80065e8 <Motion_Init+0x24>)
 80065d8:	4904      	ldr	r1, [pc, #16]	@ (80065ec <Motion_Init+0x28>)
 80065da:	4805      	ldr	r0, [pc, #20]	@ (80065f0 <Motion_Init+0x2c>)
 80065dc:	f7ff ff80 	bl	80064e0 <PID_Init>
}
 80065e0:	bd10      	pop	{r4, pc}
 80065e2:	bf00      	nop
 80065e4:	200012f4 	.word	0x200012f4
 80065e8:	41f00000 	.word	0x41f00000
 80065ec:	42c80000 	.word	0x42c80000
 80065f0:	200012d0 	.word	0x200012d0

080065f4 <Motion_Move>:
void Motion_Move(){
 80065f4:	b508      	push	{r3, lr}
	if(isBrake) return;
	if(PWM_Pulse_Complete == TRUE){
 80065f6:	4b06      	ldr	r3, [pc, #24]	@ (8006610 <Motion_Move+0x1c>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d000      	beq.n	8006600 <Motion_Move+0xc>
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
		PWM_Pulse_Complete = FALSE;
	}
}
 80065fe:	bd08      	pop	{r3, pc}
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8006600:	2100      	movs	r1, #0
 8006602:	4804      	ldr	r0, [pc, #16]	@ (8006614 <Motion_Move+0x20>)
 8006604:	f7fe f812 	bl	800462c <HAL_TIM_PWM_Start_IT>
		PWM_Pulse_Complete = FALSE;
 8006608:	4b01      	ldr	r3, [pc, #4]	@ (8006610 <Motion_Move+0x1c>)
 800660a:	2200      	movs	r2, #0
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	e7f6      	b.n	80065fe <Motion_Move+0xa>
 8006610:	20000014 	.word	0x20000014
 8006614:	2000041c 	.word	0x2000041c

08006618 <Motion_Stop>:

void Motion_Stop(){
 8006618:	b508      	push	{r3, lr}
	if(PWM_Pulse_Complete == FALSE){
 800661a:	4b06      	ldr	r3, [pc, #24]	@ (8006634 <Motion_Stop+0x1c>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	b103      	cbz	r3, 8006622 <Motion_Stop+0xa>
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
		PWM_Pulse_Complete = TRUE;
	}
}
 8006620:	bd08      	pop	{r3, pc}
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8006622:	2100      	movs	r1, #0
 8006624:	4804      	ldr	r0, [pc, #16]	@ (8006638 <Motion_Stop+0x20>)
 8006626:	f7fe f8a7 	bl	8004778 <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 800662a:	4b02      	ldr	r3, [pc, #8]	@ (8006634 <Motion_Stop+0x1c>)
 800662c:	2201      	movs	r2, #1
 800662e:	701a      	strb	r2, [r3, #0]
}
 8006630:	e7f6      	b.n	8006620 <Motion_Stop+0x8>
 8006632:	bf00      	nop
 8006634:	20000014 	.word	0x20000014
 8006638:	2000041c 	.word	0x2000041c

0800663c <Motion_Direction>:

void Motion_Direction(uint8_t direction){
	if(direction == rotation_dir) return;
 800663c:	4b0e      	ldr	r3, [pc, #56]	@ (8006678 <Motion_Direction+0x3c>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	4283      	cmp	r3, r0
 8006642:	d017      	beq.n	8006674 <Motion_Direction+0x38>
void Motion_Direction(uint8_t direction){
 8006644:	b510      	push	{r4, lr}
 8006646:	4604      	mov	r4, r0

	if(direction == TMC2209_ROT_FWD){
 8006648:	b110      	cbz	r0, 8006650 <Motion_Direction+0x14>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
		rotation_dir = TMC2209_ROT_FWD;
	}
	if(direction == TMC2209_ROT_REV){
 800664a:	2c01      	cmp	r4, #1
 800664c:	d009      	beq.n	8006662 <Motion_Direction+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
		rotation_dir = TMC2209_ROT_REV;
	}
}
 800664e:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8006650:	2200      	movs	r2, #0
 8006652:	2102      	movs	r1, #2
 8006654:	4809      	ldr	r0, [pc, #36]	@ (800667c <Motion_Direction+0x40>)
 8006656:	f7fb fa72 	bl	8001b3e <HAL_GPIO_WritePin>
		rotation_dir = TMC2209_ROT_FWD;
 800665a:	4b07      	ldr	r3, [pc, #28]	@ (8006678 <Motion_Direction+0x3c>)
 800665c:	2200      	movs	r2, #0
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	e7f3      	b.n	800664a <Motion_Direction+0xe>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8006662:	2201      	movs	r2, #1
 8006664:	2102      	movs	r1, #2
 8006666:	4805      	ldr	r0, [pc, #20]	@ (800667c <Motion_Direction+0x40>)
 8006668:	f7fb fa69 	bl	8001b3e <HAL_GPIO_WritePin>
		rotation_dir = TMC2209_ROT_REV;
 800666c:	4b02      	ldr	r3, [pc, #8]	@ (8006678 <Motion_Direction+0x3c>)
 800666e:	2201      	movs	r2, #1
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	e7ec      	b.n	800664e <Motion_Direction+0x12>
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	200012ce 	.word	0x200012ce
 800667c:	40010800 	.word	0x40010800

08006680 <Motion_SetMicrostep>:

void Motion_SetMicrostep(tmc2209_microsteps_t ustep){
 8006680:	b510      	push	{r4, lr}
 8006682:	4604      	mov	r4, r0
	TMC2209_SetMicrosteps(&driver, ustep);
 8006684:	4601      	mov	r1, r0
 8006686:	4803      	ldr	r0, [pc, #12]	@ (8006694 <Motion_SetMicrostep+0x14>)
 8006688:	f000 f9e9 	bl	8006a5e <TMC2209_SetMicrosteps>
	active_microstep = ustep;
 800668c:	4b02      	ldr	r3, [pc, #8]	@ (8006698 <Motion_SetMicrostep+0x18>)
 800668e:	701c      	strb	r4, [r3, #0]
}
 8006690:	bd10      	pop	{r4, pc}
 8006692:	bf00      	nop
 8006694:	200012f4 	.word	0x200012f4
 8006698:	200012c4 	.word	0x200012c4

0800669c <Motion_Velocity>:

void Motion_Velocity(float velocity)
{
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	4604      	mov	r4, r0
	float frequency = 0.0f;
	uint16_t desired_period = 0;
	uint16_t prescaller = TMC2209_DEFAULT_PRESCALLER;

	if(vel_now == velocity) return;
 80066a0:	4601      	mov	r1, r0
 80066a2:	4b24      	ldr	r3, [pc, #144]	@ (8006734 <Motion_Velocity+0x98>)
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	f7fa fa21 	bl	8000aec <__aeabi_fcmpeq>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	d135      	bne.n	800671a <Motion_Velocity+0x7e>
	if(velocity < 0.01f) velocity = 0.01f;
 80066ae:	4922      	ldr	r1, [pc, #136]	@ (8006738 <Motion_Velocity+0x9c>)
 80066b0:	4620      	mov	r0, r4
 80066b2:	f7fa fa25 	bl	8000b00 <__aeabi_fcmplt>
 80066b6:	b100      	cbz	r0, 80066ba <Motion_Velocity+0x1e>
 80066b8:	4c1f      	ldr	r4, [pc, #124]	@ (8006738 <Motion_Velocity+0x9c>)
	if(velocity <= 0) {
 80066ba:	2100      	movs	r1, #0
 80066bc:	4620      	mov	r0, r4
 80066be:	f7fa fa29 	bl	8000b14 <__aeabi_fcmple>
 80066c2:	bb58      	cbnz	r0, 800671c <Motion_Velocity+0x80>
	uint16_t prescaller = TMC2209_DEFAULT_PRESCALLER;
 80066c4:	2648      	movs	r6, #72	@ 0x48
		PWM_Pulse_Complete = TRUE;
		return;
	}

	while(TRUE){
		frequency  = (velocity * (STEP_PER_REV * active_microstep)) / 60;
 80066c6:	4b1d      	ldr	r3, [pc, #116]	@ (800673c <Motion_Velocity+0xa0>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	20c8      	movs	r0, #200	@ 0xc8
 80066cc:	fb03 f000 	mul.w	r0, r3, r0
 80066d0:	f7fa f824 	bl	800071c <__aeabi_i2f>
 80066d4:	4621      	mov	r1, r4
 80066d6:	f7fa f875 	bl	80007c4 <__aeabi_fmul>
 80066da:	4919      	ldr	r1, [pc, #100]	@ (8006740 <Motion_Velocity+0xa4>)
 80066dc:	f7fa f926 	bl	800092c <__aeabi_fdiv>
 80066e0:	4605      	mov	r5, r0
		if(((TMC2209_BASE_FREQ / prescaller) / frequency) > MAX_CNT_PERIOD){
 80066e2:	4818      	ldr	r0, [pc, #96]	@ (8006744 <Motion_Velocity+0xa8>)
 80066e4:	fb90 f0f6 	sdiv	r0, r0, r6
 80066e8:	f7fa f818 	bl	800071c <__aeabi_i2f>
 80066ec:	4629      	mov	r1, r5
 80066ee:	f7fa f91d 	bl	800092c <__aeabi_fdiv>
 80066f2:	4605      	mov	r5, r0
 80066f4:	4914      	ldr	r1, [pc, #80]	@ (8006748 <Motion_Velocity+0xac>)
 80066f6:	f7fa fa21 	bl	8000b3c <__aeabi_fcmpgt>
 80066fa:	b9b8      	cbnz	r0, 800672c <Motion_Velocity+0x90>
			prescaller += TMC2209_DEFAULT_PRESCALLER;
			continue;
		}
		desired_period = (uint16_t)round((TMC2209_BASE_FREQ / prescaller) / frequency);
 80066fc:	4628      	mov	r0, r5
 80066fe:	f7f9 fe8b 	bl	8000418 <__aeabi_f2d>
 8006702:	f000 fb4b 	bl	8006d9c <round>
 8006706:	f7f9 fedf 	bl	80004c8 <__aeabi_d2uiz>
 800670a:	b280      	uxth	r0, r0
		break;
	}

	__HAL_TIM_SET_PRESCALER(&htim2, prescaller);
 800670c:	4b0f      	ldr	r3, [pc, #60]	@ (800674c <Motion_Velocity+0xb0>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	6296      	str	r6, [r2, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim2, desired_period);
 8006712:	62d0      	str	r0, [r2, #44]	@ 0x2c
 8006714:	60d8      	str	r0, [r3, #12]
	vel_now = velocity;
 8006716:	4b07      	ldr	r3, [pc, #28]	@ (8006734 <Motion_Velocity+0x98>)
 8006718:	601c      	str	r4, [r3, #0]
}
 800671a:	bd70      	pop	{r4, r5, r6, pc}
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 800671c:	2100      	movs	r1, #0
 800671e:	480b      	ldr	r0, [pc, #44]	@ (800674c <Motion_Velocity+0xb0>)
 8006720:	f7fe f82a 	bl	8004778 <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 8006724:	4b0a      	ldr	r3, [pc, #40]	@ (8006750 <Motion_Velocity+0xb4>)
 8006726:	2201      	movs	r2, #1
 8006728:	701a      	strb	r2, [r3, #0]
		return;
 800672a:	e7f6      	b.n	800671a <Motion_Velocity+0x7e>
			prescaller += TMC2209_DEFAULT_PRESCALLER;
 800672c:	3648      	adds	r6, #72	@ 0x48
 800672e:	b2b6      	uxth	r6, r6
		frequency  = (velocity * (STEP_PER_REV * active_microstep)) / 60;
 8006730:	e7c9      	b.n	80066c6 <Motion_Velocity+0x2a>
 8006732:	bf00      	nop
 8006734:	200012c8 	.word	0x200012c8
 8006738:	3c23d70a 	.word	0x3c23d70a
 800673c:	200012c4 	.word	0x200012c4
 8006740:	42700000 	.word	0x42700000
 8006744:	044aa200 	.word	0x044aa200
 8006748:	477fff00 	.word	0x477fff00
 800674c:	2000041c 	.word	0x2000041c
 8006750:	20000014 	.word	0x20000014

08006754 <_scale>:

float _scale(float x, float in_min, float in_max, float out_min, float out_max) {
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	460f      	mov	r7, r1
 8006758:	4616      	mov	r6, r2
 800675a:	461c      	mov	r4, r3
    return ((x - in_min) * (out_max - out_min) / (in_max - in_min)) + out_min;
 800675c:	f7f9 ff28 	bl	80005b0 <__aeabi_fsub>
 8006760:	4605      	mov	r5, r0
 8006762:	4621      	mov	r1, r4
 8006764:	9806      	ldr	r0, [sp, #24]
 8006766:	f7f9 ff23 	bl	80005b0 <__aeabi_fsub>
 800676a:	4601      	mov	r1, r0
 800676c:	4628      	mov	r0, r5
 800676e:	f7fa f829 	bl	80007c4 <__aeabi_fmul>
 8006772:	4605      	mov	r5, r0
 8006774:	4639      	mov	r1, r7
 8006776:	4630      	mov	r0, r6
 8006778:	f7f9 ff1a 	bl	80005b0 <__aeabi_fsub>
 800677c:	4601      	mov	r1, r0
 800677e:	4628      	mov	r0, r5
 8006780:	f7fa f8d4 	bl	800092c <__aeabi_fdiv>
 8006784:	4621      	mov	r1, r4
 8006786:	f7f9 ff15 	bl	80005b4 <__addsf3>
}
 800678a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800678c <Motion_Runtime>:

void Motion_Runtime(){
 800678c:	b530      	push	{r4, r5, lr}
 800678e:	b083      	sub	sp, #12
    current_read = TMC2209_GetCurrent(&driver, TMCCurrent_Actual);
 8006790:	2102      	movs	r1, #2
 8006792:	4824      	ldr	r0, [pc, #144]	@ (8006824 <Motion_Runtime+0x98>)
 8006794:	f000 f8d6 	bl	8006944 <TMC2209_GetCurrent>
 8006798:	4b23      	ldr	r3, [pc, #140]	@ (8006828 <Motion_Runtime+0x9c>)
 800679a:	8018      	strh	r0, [r3, #0]

    PID_Run();  // harus dipanggil dulu agar PIDController.error ter-update
 800679c:	f7ff fea8 	bl	80064f0 <PID_Run>

    float abs_error = fabs(PIDController.error);
 80067a0:	4b22      	ldr	r3, [pc, #136]	@ (800682c <Motion_Runtime+0xa0>)
 80067a2:	6958      	ldr	r0, [r3, #20]
 80067a4:	f7f9 fe26 	bl	80003f4 <__aeabi_i2d>
 80067a8:	f7f9 feae 	bl	8000508 <__aeabi_d2f>
 80067ac:	f020 4400 	bic.w	r4, r0, #2147483648	@ 0x80000000
    float abs_output = abs(pid_computed);
 80067b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006830 <Motion_Runtime+0xa4>)
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	f7fa f9cc 	bl	8000b50 <__aeabi_f2iz>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	bfb8      	it	lt
 80067bc:	4240      	neglt	r0, r0
 80067be:	f7f9 ffad 	bl	800071c <__aeabi_i2f>
 80067c2:	4605      	mov	r5, r0

    // Ganti microstep berdasarkan error
    if(abs_error < NEAR_TARGET_ZONE){
 80067c4:	491b      	ldr	r1, [pc, #108]	@ (8006834 <Motion_Runtime+0xa8>)
 80067c6:	4620      	mov	r0, r4
 80067c8:	f7fa f99a 	bl	8000b00 <__aeabi_fcmplt>
 80067cc:	b1f8      	cbz	r0, 800680e <Motion_Runtime+0x82>
        Motion_SetMicrostep(TMC2209_Microsteps_8);
 80067ce:	2008      	movs	r0, #8
 80067d0:	f7ff ff56 	bl	8006680 <Motion_SetMicrostep>
    }else{
        Motion_SetMicrostep(TMC2209_Microsteps_1);
    }

    // Arah motor
    if(PIDController.error >= 0){
 80067d4:	4b15      	ldr	r3, [pc, #84]	@ (800682c <Motion_Runtime+0xa0>)
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	db1c      	blt.n	8006816 <Motion_Runtime+0x8a>
        Motion_Direction(TMC2209_ROT_REV);
 80067dc:	2001      	movs	r0, #1
 80067de:	f7ff ff2d 	bl	800663c <Motion_Direction>
    }else{
        Motion_Direction(TMC2209_ROT_FWD);
    }

    // Cek deadband + output minimum
    if(abs_error < DEADBAND) {
 80067e2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80067e6:	4620      	mov	r0, r4
 80067e8:	f7fa f98a 	bl	8000b00 <__aeabi_fcmplt>
 80067ec:	b9b8      	cbnz	r0, 800681e <Motion_Runtime+0x92>
        Motion_Stop();
        return;
    }

    // Gerakkan motor
    Motion_Move();
 80067ee:	f7ff ff01 	bl	80065f4 <Motion_Move>
    pid2velocity = _scale(abs_output, 0, PID_OUTPUT_MAX, MIN_SPEED, MAX_SPEED);
 80067f2:	2100      	movs	r1, #0
 80067f4:	4b10      	ldr	r3, [pc, #64]	@ (8006838 <Motion_Runtime+0xac>)
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	460b      	mov	r3, r1
 80067fa:	4a10      	ldr	r2, [pc, #64]	@ (800683c <Motion_Runtime+0xb0>)
 80067fc:	4628      	mov	r0, r5
 80067fe:	f7ff ffa9 	bl	8006754 <_scale>
 8006802:	4b0f      	ldr	r3, [pc, #60]	@ (8006840 <Motion_Runtime+0xb4>)
 8006804:	6018      	str	r0, [r3, #0]
    Motion_Velocity(pid2velocity);
 8006806:	f7ff ff49 	bl	800669c <Motion_Velocity>
}
 800680a:	b003      	add	sp, #12
 800680c:	bd30      	pop	{r4, r5, pc}
        Motion_SetMicrostep(TMC2209_Microsteps_1);
 800680e:	2001      	movs	r0, #1
 8006810:	f7ff ff36 	bl	8006680 <Motion_SetMicrostep>
 8006814:	e7de      	b.n	80067d4 <Motion_Runtime+0x48>
        Motion_Direction(TMC2209_ROT_FWD);
 8006816:	2000      	movs	r0, #0
 8006818:	f7ff ff10 	bl	800663c <Motion_Direction>
 800681c:	e7e1      	b.n	80067e2 <Motion_Runtime+0x56>
        Motion_Stop();
 800681e:	f7ff fefb 	bl	8006618 <Motion_Stop>
        return;
 8006822:	e7f2      	b.n	800680a <Motion_Runtime+0x7e>
 8006824:	200012f4 	.word	0x200012f4
 8006828:	200012cc 	.word	0x200012cc
 800682c:	200012d0 	.word	0x200012d0
 8006830:	2000032c 	.word	0x2000032c
 8006834:	42c80000 	.word	0x42c80000
 8006838:	42f00000 	.word	0x42f00000
 800683c:	49742400 	.word	0x49742400
 8006840:	200012c0 	.word	0x200012c0

08006844 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM2) {
 8006844:	6803      	ldr	r3, [r0, #0]
 8006846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800684a:	d000      	beq.n	800684e <HAL_TIM_PWM_PulseFinishedCallback+0xa>
		if(PWM_Pulse_Complete == FALSE){
			PWM_Pulse_Complete = TRUE;
		}
	}
}
 800684c:	4770      	bx	lr
		if(PWM_Pulse_Complete == FALSE){
 800684e:	4b04      	ldr	r3, [pc, #16]	@ (8006860 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1fa      	bne.n	800684c <HAL_TIM_PWM_PulseFinishedCallback+0x8>
			PWM_Pulse_Complete = TRUE;
 8006856:	4b02      	ldr	r3, [pc, #8]	@ (8006860 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 8006858:	2201      	movs	r2, #1
 800685a:	701a      	strb	r2, [r3, #0]
}
 800685c:	e7f6      	b.n	800684c <HAL_TIM_PWM_PulseFinishedCallback+0x8>
 800685e:	bf00      	nop
 8006860:	20000014 	.word	0x20000014

08006864 <_set_rms_current>:
    .pwm_scale.addr.reg = TMC2209Reg_PWM_SCALE,
    .pwm_auto.addr.reg = TMC2209Reg_PWM_AUTO
};

static void _set_rms_current (TMC2209_t *driver)
{
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4604      	mov	r4, r0
    float maxv = (((float)(driver->config.r_sense + 20)) * (float)(32UL * driver->config.current)) * 1.41421f / 1000.0f;
 8006868:	f8b0 007f 	ldrh.w	r0, [r0, #127]	@ 0x7f
 800686c:	3014      	adds	r0, #20
 800686e:	f7f9 ff55 	bl	800071c <__aeabi_i2f>
 8006872:	4605      	mov	r5, r0
 8006874:	f8b4 0081 	ldrh.w	r0, [r4, #129]	@ 0x81
 8006878:	0140      	lsls	r0, r0, #5
 800687a:	f7f9 ff4b 	bl	8000714 <__aeabi_ui2f>
 800687e:	4601      	mov	r1, r0
 8006880:	4628      	mov	r0, r5
 8006882:	f7f9 ff9f 	bl	80007c4 <__aeabi_fmul>
 8006886:	491f      	ldr	r1, [pc, #124]	@ (8006904 <_set_rms_current+0xa0>)
 8006888:	f7f9 ff9c 	bl	80007c4 <__aeabi_fmul>
 800688c:	491e      	ldr	r1, [pc, #120]	@ (8006908 <_set_rms_current+0xa4>)
 800688e:	f7fa f84d 	bl	800092c <__aeabi_fdiv>
 8006892:	4605      	mov	r5, r0

    int8_t current_scaling = (int8_t)(maxv / cfg_params.vsense[0]) - 1;
 8006894:	491d      	ldr	r1, [pc, #116]	@ (800690c <_set_rms_current+0xa8>)
 8006896:	f7fa f849 	bl	800092c <__aeabi_fdiv>
 800689a:	f7fa f959 	bl	8000b50 <__aeabi_f2iz>
 800689e:	b2c3      	uxtb	r3, r0
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b25b      	sxtb	r3, r3

    // If the current scaling is too low set the vsense bit and recalculate the current setting
    if ((driver->chopconf.reg.vsense = (current_scaling < 16)))
 80068a4:	2b0f      	cmp	r3, #15
 80068a6:	bfcc      	ite	gt
 80068a8:	2200      	movgt	r2, #0
 80068aa:	2201      	movle	r2, #1
 80068ac:	f894 1062 	ldrb.w	r1, [r4, #98]	@ 0x62
 80068b0:	f362 0141 	bfi	r1, r2, #1, #1
 80068b4:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80068b8:	b142      	cbz	r2, 80068cc <_set_rms_current+0x68>
        current_scaling = (uint8_t)(maxv / cfg_params.vsense[1]) - 1;
 80068ba:	4915      	ldr	r1, [pc, #84]	@ (8006910 <_set_rms_current+0xac>)
 80068bc:	4628      	mov	r0, r5
 80068be:	f7fa f835 	bl	800092c <__aeabi_fdiv>
 80068c2:	f7fa f96b 	bl	8000b9c <__aeabi_f2uiz>
 80068c6:	b2c3      	uxtb	r3, r0
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b25b      	sxtb	r3, r3

    driver->ihold_irun.reg.irun = current_scaling > 31 ? 31 : current_scaling;
 80068cc:	2b1f      	cmp	r3, #31
 80068ce:	bfa8      	it	ge
 80068d0:	231f      	movge	r3, #31
 80068d2:	f003 031f 	and.w	r3, r3, #31
 80068d6:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 80068da:	f363 0204 	bfi	r2, r3, #0, #5
 80068de:	f884 202a 	strb.w	r2, [r4, #42]	@ 0x2a
    driver->ihold_irun.reg.ihold = (driver->ihold_irun.reg.irun * driver->config.hold_current_pct) / 100;
 80068e2:	f894 2083 	ldrb.w	r2, [r4, #131]	@ 0x83
 80068e6:	fb02 f303 	mul.w	r3, r2, r3
 80068ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006914 <_set_rms_current+0xb0>)
 80068ec:	fb82 2303 	smull	r2, r3, r2, r3
 80068f0:	f3c3 1344 	ubfx	r3, r3, #5, #5
 80068f4:	f894 2029 	ldrb.w	r2, [r4, #41]	@ 0x29
 80068f8:	f363 0204 	bfi	r2, r3, #0, #5
 80068fc:	f884 2029 	strb.w	r2, [r4, #41]	@ 0x29

//?    driver->coolconf.reg.seimin = driver->ihold_irun.reg.irun >= 20;
}
 8006900:	bd38      	pop	{r3, r4, r5, pc}
 8006902:	bf00      	nop
 8006904:	3fb504d5 	.word	0x3fb504d5
 8006908:	447a0000 	.word	0x447a0000
 800690c:	43a28000 	.word	0x43a28000
 8006910:	43340000 	.word	0x43340000
 8006914:	51eb851f 	.word	0x51eb851f

08006918 <TMC2209_SetDefaults>:
{
    return &cfg_params;
}

void TMC2209_SetDefaults (TMC2209_t *driver)
{
 8006918:	b510      	push	{r4, lr}
 800691a:	4604      	mov	r4, r0
    memcpy(driver, &tmc2209_defaults, sizeof(TMC2209_t));
 800691c:	2291      	movs	r2, #145	@ 0x91
 800691e:	4908      	ldr	r1, [pc, #32]	@ (8006940 <TMC2209_SetDefaults+0x28>)
 8006920:	f000 f9e6 	bl	8006cf0 <memcpy>

    _set_rms_current(driver);
 8006924:	4620      	mov	r0, r4
 8006926:	f7ff ff9d 	bl	8006864 <_set_rms_current>

    driver->chopconf.reg.mres = tmc_microsteps_to_mres(driver->config.microsteps);
 800692a:	f8b4 007d 	ldrh.w	r0, [r4, #125]	@ 0x7d
 800692e:	f7ff fd45 	bl	80063bc <tmc_microsteps_to_mres>
 8006932:	f894 3063 	ldrb.w	r3, [r4, #99]	@ 0x63
 8006936:	f360 0303 	bfi	r3, r0, #0, #4
 800693a:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
}
 800693e:	bd10      	pop	{r4, pc}
 8006940:	08006f94 	.word	0x08006f94

08006944 <TMC2209_GetCurrent>:

    return (((uint8_t)driver->ifcnt.reg.count - ifcnt) & 0xFF) == 7;
}

uint16_t TMC2209_GetCurrent (TMC2209_t *driver, trinamic_current_t type)
{
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4604      	mov	r4, r0
    uint8_t cs;
    bool vsense;

    switch(type) {
 8006948:	2902      	cmp	r1, #2
 800694a:	d02a      	beq.n	80069a2 <TMC2209_GetCurrent+0x5e>
 800694c:	2903      	cmp	r1, #3
 800694e:	d031      	beq.n	80069b4 <TMC2209_GetCurrent+0x70>
 8006950:	2901      	cmp	r1, #1
 8006952:	d023      	beq.n	800699c <TMC2209_GetCurrent+0x58>
            cs = driver->ihold_irun.reg.ihold;
            vsense = driver->chopconf.reg.vsense;
            break;
        default: // TMCCurrent_Min:
            cs = 0;
            vsense = 1;
 8006954:	2501      	movs	r5, #1
            cs = 0;
 8006956:	2000      	movs	r0, #0
            break;
    }

    return (uint16_t)ceilf((float)(cs + 1) / 32.0f * cfg_params.vsense[vsense] / (float)(driver->config.r_sense + 20) / 1.41421f * 1000.0f);
 8006958:	3001      	adds	r0, #1
 800695a:	f7f9 fedf 	bl	800071c <__aeabi_i2f>
 800695e:	f04f 5174 	mov.w	r1, #1023410176	@ 0x3d000000
 8006962:	f7f9 ff2f 	bl	80007c4 <__aeabi_fmul>
 8006966:	4b18      	ldr	r3, [pc, #96]	@ (80069c8 <TMC2209_GetCurrent+0x84>)
 8006968:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 800696c:	f7f9 ff2a 	bl	80007c4 <__aeabi_fmul>
 8006970:	4605      	mov	r5, r0
 8006972:	f8b4 007f 	ldrh.w	r0, [r4, #127]	@ 0x7f
 8006976:	3014      	adds	r0, #20
 8006978:	f7f9 fed0 	bl	800071c <__aeabi_i2f>
 800697c:	4601      	mov	r1, r0
 800697e:	4628      	mov	r0, r5
 8006980:	f7f9 ffd4 	bl	800092c <__aeabi_fdiv>
 8006984:	4911      	ldr	r1, [pc, #68]	@ (80069cc <TMC2209_GetCurrent+0x88>)
 8006986:	f7f9 ffd1 	bl	800092c <__aeabi_fdiv>
 800698a:	4911      	ldr	r1, [pc, #68]	@ (80069d0 <TMC2209_GetCurrent+0x8c>)
 800698c:	f7f9 ff1a 	bl	80007c4 <__aeabi_fmul>
 8006990:	f000 fa4a 	bl	8006e28 <ceilf>
 8006994:	f7fa f902 	bl	8000b9c <__aeabi_f2uiz>
}
 8006998:	b280      	uxth	r0, r0
 800699a:	bd38      	pop	{r3, r4, r5, pc}
    switch(type) {
 800699c:	2500      	movs	r5, #0
 800699e:	201f      	movs	r0, #31
 80069a0:	e7da      	b.n	8006958 <TMC2209_GetCurrent+0x14>
            cs = driver->ihold_irun.reg.irun;
 80069a2:	f890 002a 	ldrb.w	r0, [r0, #42]	@ 0x2a
 80069a6:	f000 001f 	and.w	r0, r0, #31
            vsense = driver->chopconf.reg.vsense;
 80069aa:	f894 5062 	ldrb.w	r5, [r4, #98]	@ 0x62
 80069ae:	f3c5 0540 	ubfx	r5, r5, #1, #1
            break;
 80069b2:	e7d1      	b.n	8006958 <TMC2209_GetCurrent+0x14>
            cs = driver->ihold_irun.reg.ihold;
 80069b4:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 80069b8:	f000 001f 	and.w	r0, r0, #31
            vsense = driver->chopconf.reg.vsense;
 80069bc:	f894 5062 	ldrb.w	r5, [r4, #98]	@ 0x62
 80069c0:	f3c5 0540 	ubfx	r5, r5, #1, #1
            break;
 80069c4:	e7c8      	b.n	8006958 <TMC2209_GetCurrent+0x14>
 80069c6:	bf00      	nop
 80069c8:	08007028 	.word	0x08007028
 80069cc:	3fb504d5 	.word	0x3fb504d5
 80069d0:	447a0000 	.word	0x447a0000

080069d4 <TMC2209_WriteRegister>:

    TMC2209_WriteRegister(driver, (TMC2209_datagram_t *)&driver->chopconf);
}

bool TMC2209_WriteRegister (TMC2209_t *driver, TMC2209_datagram_t *reg)
{
 80069d4:	b510      	push	{r4, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	4604      	mov	r4, r0
    TMC_uart_write_datagram_t datagram;

    datagram.msg.sync = 0x05;
 80069da:	2305      	movs	r3, #5
 80069dc:	f88d 3000 	strb.w	r3, [sp]
    datagram.msg.slave = driver->config.motor.address;
 80069e0:	f890 3087 	ldrb.w	r3, [r0, #135]	@ 0x87
 80069e4:	f88d 3001 	strb.w	r3, [sp, #1]
    datagram.msg.addr.value = reg->addr.value;
 80069e8:	780b      	ldrb	r3, [r1, #0]
 80069ea:	f88d 3002 	strb.w	r3, [sp, #2]
    datagram.msg.addr.write = 1;
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069f4:	f88d 3002 	strb.w	r3, [sp, #2]
    datagram.msg.payload.value = reg->payload.value;
 80069f8:	f8d1 3001 	ldr.w	r3, [r1, #1]
 80069fc:	f8cd 3003 	str.w	r3, [sp, #3]
static inline void tmc_byteswap (uint8_t data[4])
{
    uint8_t tmp;

    tmp = data[0];
    data[0] = data[3];
 8006a00:	f3c3 6207 	ubfx	r2, r3, #24, #8
 8006a04:	f88d 2003 	strb.w	r2, [sp, #3]
    data[3] = tmp;
 8006a08:	f88d 3006 	strb.w	r3, [sp, #6]
    tmp = data[1];
    data[1] = data[2];
 8006a0c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006a10:	f88d 2004 	strb.w	r2, [sp, #4]
    data[2] = tmp;
 8006a14:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006a18:	f88d 3005 	strb.w	r3, [sp, #5]

    tmc_byteswap(datagram.msg.payload.data);

    tmc_crc8(datagram.data, sizeof(TMC_uart_write_datagram_t));
 8006a1c:	2108      	movs	r1, #8
 8006a1e:	4668      	mov	r0, sp
 8006a20:	f7ff fcde 	bl	80063e0 <tmc_crc8>

    tmc_uart_write(driver->config.motor, &datagram);
 8006a24:	466a      	mov	r2, sp
 8006a26:	f8d4 0085 	ldr.w	r0, [r4, #133]	@ 0x85
 8006a2a:	f8d4 1089 	ldr.w	r1, [r4, #137]	@ 0x89
 8006a2e:	f7ff fcff 	bl	8006430 <tmc_uart_write>

// TODO: add check for ok'ed?

    return true;
}
 8006a32:	2001      	movs	r0, #1
 8006a34:	b002      	add	sp, #8
 8006a36:	bd10      	pop	{r4, pc}

08006a38 <TMC2209_SetCurrent>:
{
 8006a38:	b510      	push	{r4, lr}
 8006a3a:	4604      	mov	r4, r0
    driver->config.current = mA;
 8006a3c:	f8a0 1081 	strh.w	r1, [r0, #129]	@ 0x81
    driver->config.hold_current_pct = hold_pct;
 8006a40:	f880 2083 	strb.w	r2, [r0, #131]	@ 0x83
    _set_rms_current(driver);
 8006a44:	f7ff ff0e 	bl	8006864 <_set_rms_current>
    TMC2209_WriteRegister(driver, (TMC2209_datagram_t *)&driver->chopconf);
 8006a48:	f104 015f 	add.w	r1, r4, #95	@ 0x5f
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f7ff ffc1 	bl	80069d4 <TMC2209_WriteRegister>
    TMC2209_WriteRegister(driver, (TMC2209_datagram_t *)&driver->ihold_irun);
 8006a52:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8006a56:	4620      	mov	r0, r4
 8006a58:	f7ff ffbc 	bl	80069d4 <TMC2209_WriteRegister>
}
 8006a5c:	bd10      	pop	{r4, pc}

08006a5e <TMC2209_SetMicrosteps>:
{
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	4604      	mov	r4, r0
    driver->chopconf.reg.mres = tmc_microsteps_to_mres(msteps);
 8006a62:	4608      	mov	r0, r1
 8006a64:	f7ff fcaa 	bl	80063bc <tmc_microsteps_to_mres>
 8006a68:	f000 000f 	and.w	r0, r0, #15
 8006a6c:	f894 3063 	ldrb.w	r3, [r4, #99]	@ 0x63
 8006a70:	f360 0303 	bfi	r3, r0, #0, #4
 8006a74:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
    driver->config.microsteps = (tmc2209_microsteps_t)(1 << (8 - driver->chopconf.reg.mres));
 8006a78:	f1c0 0008 	rsb	r0, r0, #8
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	4083      	lsls	r3, r0
 8006a80:	f8a4 307d 	strh.w	r3, [r4, #125]	@ 0x7d
    TMC2209_WriteRegister(driver, (TMC2209_datagram_t *)&driver->chopconf);
 8006a84:	f104 015f 	add.w	r1, r4, #95	@ 0x5f
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f7ff ffa3 	bl	80069d4 <TMC2209_WriteRegister>
}
 8006a8e:	bd10      	pop	{r4, pc}

08006a90 <TMC2209_ReadRegister>:

bool TMC2209_ReadRegister (TMC2209_t *driver, TMC2209_datagram_t *reg)
{
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	4604      	mov	r4, r0
 8006a96:	460d      	mov	r5, r1
    bool ok = false;
    TMC_uart_read_datagram_t datagram;
    TMC_uart_write_datagram_t *res;

    datagram.msg.sync = 0x05;
 8006a98:	2305      	movs	r3, #5
 8006a9a:	f88d 3004 	strb.w	r3, [sp, #4]
    datagram.msg.slave = driver->config.motor.address;
 8006a9e:	f890 3087 	ldrb.w	r3, [r0, #135]	@ 0x87
 8006aa2:	f88d 3005 	strb.w	r3, [sp, #5]
    datagram.msg.addr.value = reg->addr.value;
 8006aa6:	780b      	ldrb	r3, [r1, #0]
 8006aa8:	f88d 3006 	strb.w	r3, [sp, #6]
    datagram.msg.addr.write = 0;
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f36f 13c7 	bfc	r3, #7, #1
 8006ab2:	f88d 3006 	strb.w	r3, [sp, #6]
    tmc_crc8(datagram.data, sizeof(TMC_uart_read_datagram_t));
 8006ab6:	2104      	movs	r1, #4
 8006ab8:	eb0d 0001 	add.w	r0, sp, r1
 8006abc:	f7ff fc90 	bl	80063e0 <tmc_crc8>

    res = tmc_uart_read(driver->config.motor, &datagram);
 8006ac0:	aa01      	add	r2, sp, #4
 8006ac2:	f8d4 0085 	ldr.w	r0, [r4, #133]	@ 0x85
 8006ac6:	f8d4 1089 	ldr.w	r1, [r4, #137]	@ 0x89
 8006aca:	f7ff fcc7 	bl	800645c <tmc_uart_read>

    if(res->msg.slave == 0xFF && res->msg.addr.value == datagram.msg.addr.value) {
 8006ace:	7843      	ldrb	r3, [r0, #1]
 8006ad0:	2bff      	cmp	r3, #255	@ 0xff
 8006ad2:	d002      	beq.n	8006ada <TMC2209_ReadRegister+0x4a>
    bool ok = false;
 8006ad4:	2000      	movs	r0, #0
            tmc_byteswap(reg->payload.data);
        }
    }

    return ok;
}
 8006ad6:	b002      	add	sp, #8
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
 8006ada:	4604      	mov	r4, r0
    if(res->msg.slave == 0xFF && res->msg.addr.value == datagram.msg.addr.value) {
 8006adc:	7882      	ldrb	r2, [r0, #2]
 8006ade:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d001      	beq.n	8006aea <TMC2209_ReadRegister+0x5a>
    bool ok = false;
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	e7f5      	b.n	8006ad6 <TMC2209_ReadRegister+0x46>
        uint8_t crc = res->msg.crc;
 8006aea:	79c6      	ldrb	r6, [r0, #7]
        tmc_crc8(res->data, sizeof(TMC_uart_write_datagram_t));
 8006aec:	2108      	movs	r1, #8
 8006aee:	f7ff fc77 	bl	80063e0 <tmc_crc8>
        if((ok = crc == res->msg.crc)) {
 8006af2:	79e3      	ldrb	r3, [r4, #7]
 8006af4:	42b3      	cmp	r3, r6
 8006af6:	bf0c      	ite	eq
 8006af8:	2001      	moveq	r0, #1
 8006afa:	2000      	movne	r0, #0
 8006afc:	d1eb      	bne.n	8006ad6 <TMC2209_ReadRegister+0x46>
            reg->payload.value = res->msg.payload.value;
 8006afe:	f8d4 3003 	ldr.w	r3, [r4, #3]
 8006b02:	f8c5 3001 	str.w	r3, [r5, #1]
    data[0] = data[3];
 8006b06:	f3c3 6207 	ubfx	r2, r3, #24, #8
 8006b0a:	706a      	strb	r2, [r5, #1]
    data[3] = tmp;
 8006b0c:	712b      	strb	r3, [r5, #4]
    data[1] = data[2];
 8006b0e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006b12:	70aa      	strb	r2, [r5, #2]
    data[2] = tmp;
 8006b14:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006b18:	70eb      	strb	r3, [r5, #3]
}
 8006b1a:	e7dc      	b.n	8006ad6 <TMC2209_ReadRegister+0x46>

08006b1c <TMC2209_Init>:
{
 8006b1c:	b570      	push	{r4, r5, r6, lr}
 8006b1e:	4604      	mov	r4, r0
    if(!TMC2209_ReadRegister(driver, (TMC2209_datagram_t *)&driver->gstat))
 8006b20:	1d45      	adds	r5, r0, #5
 8006b22:	4629      	mov	r1, r5
 8006b24:	f7ff ffb4 	bl	8006a90 <TMC2209_ReadRegister>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	b908      	cbnz	r0, 8006b30 <TMC2209_Init+0x14>
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
    TMC2209_WriteRegister(driver, (TMC2209_datagram_t *)&driver->gstat);
 8006b30:	4629      	mov	r1, r5
 8006b32:	4620      	mov	r0, r4
 8006b34:	f7ff ff4e 	bl	80069d4 <TMC2209_WriteRegister>
    TMC2209_ReadRegister(driver, (TMC2209_datagram_t *)&driver->gconf);
 8006b38:	4621      	mov	r1, r4
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f7ff ffa8 	bl	8006a90 <TMC2209_ReadRegister>
    driver->gconf.reg.pdn_disable = 1;
 8006b40:	7863      	ldrb	r3, [r4, #1]
 8006b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b46:	7063      	strb	r3, [r4, #1]
    driver->gconf.reg.mstep_reg_select = 1;
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b4e:	7063      	strb	r3, [r4, #1]
    driver->gconf.reg.I_scale_analog = 0;
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	f36f 0300 	bfc	r3, #0, #1
 8006b56:	7063      	strb	r3, [r4, #1]
    TMC2209_ReadRegister(driver, (TMC2209_datagram_t *)&driver->ifcnt);
 8006b58:	f104 050a 	add.w	r5, r4, #10
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f7ff ff96 	bl	8006a90 <TMC2209_ReadRegister>
    uint8_t ifcnt = driver->ifcnt.reg.count;
 8006b64:	7ae6      	ldrb	r6, [r4, #11]
    driver->chopconf.reg.mres = tmc_microsteps_to_mres(driver->config.microsteps);
 8006b66:	f8b4 007d 	ldrh.w	r0, [r4, #125]	@ 0x7d
 8006b6a:	f7ff fc27 	bl	80063bc <tmc_microsteps_to_mres>
 8006b6e:	f894 3063 	ldrb.w	r3, [r4, #99]	@ 0x63
 8006b72:	f360 0303 	bfi	r3, r0, #0, #4
 8006b76:	f884 3063 	strb.w	r3, [r4, #99]	@ 0x63
    TMC2209_WriteRegister(driver, (TMC2209_datagram_t *)&driver->gconf);
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f7ff ff29 	bl	80069d4 <TMC2209_WriteRegister>
    TMC2209_WriteRegister(driver, (TMC2209_datagram_t *)&driver->tpowerdown);
 8006b82:	f104 012d 	add.w	r1, r4, #45	@ 0x2d
 8006b86:	4620      	mov	r0, r4
 8006b88:	f7ff ff24 	bl	80069d4 <TMC2209_WriteRegister>
    TMC2209_WriteRegister(driver, (TMC2209_datagram_t *)&driver->pwmconf);
 8006b8c:	f104 0169 	add.w	r1, r4, #105	@ 0x69
 8006b90:	4620      	mov	r0, r4
 8006b92:	f7ff ff1f 	bl	80069d4 <TMC2209_WriteRegister>
    TMC2209_WriteRegister(driver, (TMC2209_datagram_t *)&driver->tpwmthrs);
 8006b96:	f104 0137 	add.w	r1, r4, #55	@ 0x37
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f7ff ff1a 	bl	80069d4 <TMC2209_WriteRegister>
    TMC2209_WriteRegister(driver, (TMC2209_datagram_t *)&driver->tcoolthrs);
 8006ba0:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f7ff ff15 	bl	80069d4 <TMC2209_WriteRegister>
    TMC2209_SetCurrent(driver, driver->config.current, driver->config.hold_current_pct);
 8006baa:	f894 2083 	ldrb.w	r2, [r4, #131]	@ 0x83
 8006bae:	f8b4 1081 	ldrh.w	r1, [r4, #129]	@ 0x81
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f7ff ff40 	bl	8006a38 <TMC2209_SetCurrent>
    TMC2209_ReadRegister(driver, (TMC2209_datagram_t *)&driver->ifcnt);
 8006bb8:	4629      	mov	r1, r5
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f7ff ff68 	bl	8006a90 <TMC2209_ReadRegister>
    return (((uint8_t)driver->ifcnt.reg.count - ifcnt) & 0xFF) == 7;
 8006bc0:	7ae3      	ldrb	r3, [r4, #11]
 8006bc2:	1b9b      	subs	r3, r3, r6
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b07      	cmp	r3, #7
 8006bc8:	bf14      	ite	ne
 8006bca:	2300      	movne	r3, #0
 8006bcc:	2301      	moveq	r3, #1
 8006bce:	e7ad      	b.n	8006b2c <TMC2209_Init+0x10>

08006bd0 <__malloc_lock>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	@ (8006bd8 <__malloc_lock+0x8>)
 8006bd2:	f000 b88b 	b.w	8006cec <__retarget_lock_acquire_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	200014c4 	.word	0x200014c4

08006bdc <__malloc_unlock>:
 8006bdc:	4801      	ldr	r0, [pc, #4]	@ (8006be4 <__malloc_unlock+0x8>)
 8006bde:	f000 b886 	b.w	8006cee <__retarget_lock_release_recursive>
 8006be2:	bf00      	nop
 8006be4:	200014c4 	.word	0x200014c4

08006be8 <memset>:
 8006be8:	4603      	mov	r3, r0
 8006bea:	4402      	add	r2, r0
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d100      	bne.n	8006bf2 <memset+0xa>
 8006bf0:	4770      	bx	lr
 8006bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8006bf6:	e7f9      	b.n	8006bec <memset+0x4>

08006bf8 <_reclaim_reent>:
 8006bf8:	4b29      	ldr	r3, [pc, #164]	@ (8006ca0 <_reclaim_reent+0xa8>)
 8006bfa:	b570      	push	{r4, r5, r6, lr}
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4604      	mov	r4, r0
 8006c00:	4283      	cmp	r3, r0
 8006c02:	d04b      	beq.n	8006c9c <_reclaim_reent+0xa4>
 8006c04:	69c3      	ldr	r3, [r0, #28]
 8006c06:	b1ab      	cbz	r3, 8006c34 <_reclaim_reent+0x3c>
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	b16b      	cbz	r3, 8006c28 <_reclaim_reent+0x30>
 8006c0c:	2500      	movs	r5, #0
 8006c0e:	69e3      	ldr	r3, [r4, #28]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	5959      	ldr	r1, [r3, r5]
 8006c14:	2900      	cmp	r1, #0
 8006c16:	d13b      	bne.n	8006c90 <_reclaim_reent+0x98>
 8006c18:	3504      	adds	r5, #4
 8006c1a:	2d80      	cmp	r5, #128	@ 0x80
 8006c1c:	d1f7      	bne.n	8006c0e <_reclaim_reent+0x16>
 8006c1e:	69e3      	ldr	r3, [r4, #28]
 8006c20:	4620      	mov	r0, r4
 8006c22:	68d9      	ldr	r1, [r3, #12]
 8006c24:	f000 f872 	bl	8006d0c <_free_r>
 8006c28:	69e3      	ldr	r3, [r4, #28]
 8006c2a:	6819      	ldr	r1, [r3, #0]
 8006c2c:	b111      	cbz	r1, 8006c34 <_reclaim_reent+0x3c>
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f000 f86c 	bl	8006d0c <_free_r>
 8006c34:	6961      	ldr	r1, [r4, #20]
 8006c36:	b111      	cbz	r1, 8006c3e <_reclaim_reent+0x46>
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 f867 	bl	8006d0c <_free_r>
 8006c3e:	69e1      	ldr	r1, [r4, #28]
 8006c40:	b111      	cbz	r1, 8006c48 <_reclaim_reent+0x50>
 8006c42:	4620      	mov	r0, r4
 8006c44:	f000 f862 	bl	8006d0c <_free_r>
 8006c48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006c4a:	b111      	cbz	r1, 8006c52 <_reclaim_reent+0x5a>
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f000 f85d 	bl	8006d0c <_free_r>
 8006c52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c54:	b111      	cbz	r1, 8006c5c <_reclaim_reent+0x64>
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 f858 	bl	8006d0c <_free_r>
 8006c5c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006c5e:	b111      	cbz	r1, 8006c66 <_reclaim_reent+0x6e>
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 f853 	bl	8006d0c <_free_r>
 8006c66:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006c68:	b111      	cbz	r1, 8006c70 <_reclaim_reent+0x78>
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f000 f84e 	bl	8006d0c <_free_r>
 8006c70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006c72:	b111      	cbz	r1, 8006c7a <_reclaim_reent+0x82>
 8006c74:	4620      	mov	r0, r4
 8006c76:	f000 f849 	bl	8006d0c <_free_r>
 8006c7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006c7c:	b111      	cbz	r1, 8006c84 <_reclaim_reent+0x8c>
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f000 f844 	bl	8006d0c <_free_r>
 8006c84:	6a23      	ldr	r3, [r4, #32]
 8006c86:	b14b      	cbz	r3, 8006c9c <_reclaim_reent+0xa4>
 8006c88:	4620      	mov	r0, r4
 8006c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c8e:	4718      	bx	r3
 8006c90:	680e      	ldr	r6, [r1, #0]
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 f83a 	bl	8006d0c <_free_r>
 8006c98:	4631      	mov	r1, r6
 8006c9a:	e7bb      	b.n	8006c14 <_reclaim_reent+0x1c>
 8006c9c:	bd70      	pop	{r4, r5, r6, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000018 	.word	0x20000018

08006ca4 <__libc_init_array>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	2600      	movs	r6, #0
 8006ca8:	4d0c      	ldr	r5, [pc, #48]	@ (8006cdc <__libc_init_array+0x38>)
 8006caa:	4c0d      	ldr	r4, [pc, #52]	@ (8006ce0 <__libc_init_array+0x3c>)
 8006cac:	1b64      	subs	r4, r4, r5
 8006cae:	10a4      	asrs	r4, r4, #2
 8006cb0:	42a6      	cmp	r6, r4
 8006cb2:	d109      	bne.n	8006cc8 <__libc_init_array+0x24>
 8006cb4:	f000 f8f8 	bl	8006ea8 <_init>
 8006cb8:	2600      	movs	r6, #0
 8006cba:	4d0a      	ldr	r5, [pc, #40]	@ (8006ce4 <__libc_init_array+0x40>)
 8006cbc:	4c0a      	ldr	r4, [pc, #40]	@ (8006ce8 <__libc_init_array+0x44>)
 8006cbe:	1b64      	subs	r4, r4, r5
 8006cc0:	10a4      	asrs	r4, r4, #2
 8006cc2:	42a6      	cmp	r6, r4
 8006cc4:	d105      	bne.n	8006cd2 <__libc_init_array+0x2e>
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}
 8006cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ccc:	4798      	blx	r3
 8006cce:	3601      	adds	r6, #1
 8006cd0:	e7ee      	b.n	8006cb0 <__libc_init_array+0xc>
 8006cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd6:	4798      	blx	r3
 8006cd8:	3601      	adds	r6, #1
 8006cda:	e7f2      	b.n	8006cc2 <__libc_init_array+0x1e>
 8006cdc:	08007048 	.word	0x08007048
 8006ce0:	08007048 	.word	0x08007048
 8006ce4:	08007048 	.word	0x08007048
 8006ce8:	0800704c 	.word	0x0800704c

08006cec <__retarget_lock_acquire_recursive>:
 8006cec:	4770      	bx	lr

08006cee <__retarget_lock_release_recursive>:
 8006cee:	4770      	bx	lr

08006cf0 <memcpy>:
 8006cf0:	440a      	add	r2, r1
 8006cf2:	4291      	cmp	r1, r2
 8006cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cf8:	d100      	bne.n	8006cfc <memcpy+0xc>
 8006cfa:	4770      	bx	lr
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d02:	4291      	cmp	r1, r2
 8006d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d08:	d1f9      	bne.n	8006cfe <memcpy+0xe>
 8006d0a:	bd10      	pop	{r4, pc}

08006d0c <_free_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4605      	mov	r5, r0
 8006d10:	2900      	cmp	r1, #0
 8006d12:	d040      	beq.n	8006d96 <_free_r+0x8a>
 8006d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d18:	1f0c      	subs	r4, r1, #4
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	bfb8      	it	lt
 8006d1e:	18e4      	addlt	r4, r4, r3
 8006d20:	f7ff ff56 	bl	8006bd0 <__malloc_lock>
 8006d24:	4a1c      	ldr	r2, [pc, #112]	@ (8006d98 <_free_r+0x8c>)
 8006d26:	6813      	ldr	r3, [r2, #0]
 8006d28:	b933      	cbnz	r3, 8006d38 <_free_r+0x2c>
 8006d2a:	6063      	str	r3, [r4, #4]
 8006d2c:	6014      	str	r4, [r2, #0]
 8006d2e:	4628      	mov	r0, r5
 8006d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d34:	f7ff bf52 	b.w	8006bdc <__malloc_unlock>
 8006d38:	42a3      	cmp	r3, r4
 8006d3a:	d908      	bls.n	8006d4e <_free_r+0x42>
 8006d3c:	6820      	ldr	r0, [r4, #0]
 8006d3e:	1821      	adds	r1, r4, r0
 8006d40:	428b      	cmp	r3, r1
 8006d42:	bf01      	itttt	eq
 8006d44:	6819      	ldreq	r1, [r3, #0]
 8006d46:	685b      	ldreq	r3, [r3, #4]
 8006d48:	1809      	addeq	r1, r1, r0
 8006d4a:	6021      	streq	r1, [r4, #0]
 8006d4c:	e7ed      	b.n	8006d2a <_free_r+0x1e>
 8006d4e:	461a      	mov	r2, r3
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	b10b      	cbz	r3, 8006d58 <_free_r+0x4c>
 8006d54:	42a3      	cmp	r3, r4
 8006d56:	d9fa      	bls.n	8006d4e <_free_r+0x42>
 8006d58:	6811      	ldr	r1, [r2, #0]
 8006d5a:	1850      	adds	r0, r2, r1
 8006d5c:	42a0      	cmp	r0, r4
 8006d5e:	d10b      	bne.n	8006d78 <_free_r+0x6c>
 8006d60:	6820      	ldr	r0, [r4, #0]
 8006d62:	4401      	add	r1, r0
 8006d64:	1850      	adds	r0, r2, r1
 8006d66:	4283      	cmp	r3, r0
 8006d68:	6011      	str	r1, [r2, #0]
 8006d6a:	d1e0      	bne.n	8006d2e <_free_r+0x22>
 8006d6c:	6818      	ldr	r0, [r3, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	4408      	add	r0, r1
 8006d72:	6010      	str	r0, [r2, #0]
 8006d74:	6053      	str	r3, [r2, #4]
 8006d76:	e7da      	b.n	8006d2e <_free_r+0x22>
 8006d78:	d902      	bls.n	8006d80 <_free_r+0x74>
 8006d7a:	230c      	movs	r3, #12
 8006d7c:	602b      	str	r3, [r5, #0]
 8006d7e:	e7d6      	b.n	8006d2e <_free_r+0x22>
 8006d80:	6820      	ldr	r0, [r4, #0]
 8006d82:	1821      	adds	r1, r4, r0
 8006d84:	428b      	cmp	r3, r1
 8006d86:	bf01      	itttt	eq
 8006d88:	6819      	ldreq	r1, [r3, #0]
 8006d8a:	685b      	ldreq	r3, [r3, #4]
 8006d8c:	1809      	addeq	r1, r1, r0
 8006d8e:	6021      	streq	r1, [r4, #0]
 8006d90:	6063      	str	r3, [r4, #4]
 8006d92:	6054      	str	r4, [r2, #4]
 8006d94:	e7cb      	b.n	8006d2e <_free_r+0x22>
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	20001388 	.word	0x20001388

08006d9c <round>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006da2:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8006da6:	2a13      	cmp	r2, #19
 8006da8:	4604      	mov	r4, r0
 8006daa:	460d      	mov	r5, r1
 8006dac:	460b      	mov	r3, r1
 8006dae:	dc1a      	bgt.n	8006de6 <round+0x4a>
 8006db0:	2a00      	cmp	r2, #0
 8006db2:	da0b      	bge.n	8006dcc <round+0x30>
 8006db4:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8006db8:	3201      	adds	r2, #1
 8006dba:	bf04      	itt	eq
 8006dbc:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8006dc0:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	461d      	mov	r5, r3
 8006dc8:	4614      	mov	r4, r2
 8006dca:	e016      	b.n	8006dfa <round+0x5e>
 8006dcc:	4815      	ldr	r0, [pc, #84]	@ (8006e24 <round+0x88>)
 8006dce:	4110      	asrs	r0, r2
 8006dd0:	4001      	ands	r1, r0
 8006dd2:	4321      	orrs	r1, r4
 8006dd4:	d011      	beq.n	8006dfa <round+0x5e>
 8006dd6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8006dda:	fa41 f202 	asr.w	r2, r1, r2
 8006dde:	4413      	add	r3, r2
 8006de0:	ea23 0300 	bic.w	r3, r3, r0
 8006de4:	e7ee      	b.n	8006dc4 <round+0x28>
 8006de6:	2a33      	cmp	r2, #51	@ 0x33
 8006de8:	dd0a      	ble.n	8006e00 <round+0x64>
 8006dea:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006dee:	d104      	bne.n	8006dfa <round+0x5e>
 8006df0:	4602      	mov	r2, r0
 8006df2:	f7f9 f9b3 	bl	800015c <__adddf3>
 8006df6:	4604      	mov	r4, r0
 8006df8:	460d      	mov	r5, r1
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e00:	f04f 30ff 	mov.w	r0, #4294967295
 8006e04:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8006e08:	40f8      	lsrs	r0, r7
 8006e0a:	4220      	tst	r0, r4
 8006e0c:	d0f5      	beq.n	8006dfa <round+0x5e>
 8006e0e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8006e12:	2201      	movs	r2, #1
 8006e14:	408a      	lsls	r2, r1
 8006e16:	1912      	adds	r2, r2, r4
 8006e18:	bf28      	it	cs
 8006e1a:	3301      	addcs	r3, #1
 8006e1c:	ea22 0200 	bic.w	r2, r2, r0
 8006e20:	e7d1      	b.n	8006dc6 <round+0x2a>
 8006e22:	bf00      	nop
 8006e24:	000fffff 	.word	0x000fffff

08006e28 <ceilf>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8006e2e:	3d7f      	subs	r5, #127	@ 0x7f
 8006e30:	2d16      	cmp	r5, #22
 8006e32:	4601      	mov	r1, r0
 8006e34:	4604      	mov	r4, r0
 8006e36:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8006e3a:	dc25      	bgt.n	8006e88 <ceilf+0x60>
 8006e3c:	2d00      	cmp	r5, #0
 8006e3e:	da0e      	bge.n	8006e5e <ceilf+0x36>
 8006e40:	4917      	ldr	r1, [pc, #92]	@ (8006ea0 <ceilf+0x78>)
 8006e42:	f7f9 fbb7 	bl	80005b4 <__addsf3>
 8006e46:	2100      	movs	r1, #0
 8006e48:	f7f9 fe78 	bl	8000b3c <__aeabi_fcmpgt>
 8006e4c:	b128      	cbz	r0, 8006e5a <ceilf+0x32>
 8006e4e:	2c00      	cmp	r4, #0
 8006e50:	db22      	blt.n	8006e98 <ceilf+0x70>
 8006e52:	2e00      	cmp	r6, #0
 8006e54:	bf18      	it	ne
 8006e56:	f04f 547e 	movne.w	r4, #1065353216	@ 0x3f800000
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	e01a      	b.n	8006e94 <ceilf+0x6c>
 8006e5e:	4e11      	ldr	r6, [pc, #68]	@ (8006ea4 <ceilf+0x7c>)
 8006e60:	412e      	asrs	r6, r5
 8006e62:	4230      	tst	r0, r6
 8006e64:	d016      	beq.n	8006e94 <ceilf+0x6c>
 8006e66:	490e      	ldr	r1, [pc, #56]	@ (8006ea0 <ceilf+0x78>)
 8006e68:	f7f9 fba4 	bl	80005b4 <__addsf3>
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f7f9 fe65 	bl	8000b3c <__aeabi_fcmpgt>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	d0f1      	beq.n	8006e5a <ceilf+0x32>
 8006e76:	2c00      	cmp	r4, #0
 8006e78:	bfc2      	ittt	gt
 8006e7a:	f44f 0300 	movgt.w	r3, #8388608	@ 0x800000
 8006e7e:	412b      	asrgt	r3, r5
 8006e80:	18e4      	addgt	r4, r4, r3
 8006e82:	ea24 0406 	bic.w	r4, r4, r6
 8006e86:	e7e8      	b.n	8006e5a <ceilf+0x32>
 8006e88:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8006e8c:	d302      	bcc.n	8006e94 <ceilf+0x6c>
 8006e8e:	f7f9 fb91 	bl	80005b4 <__addsf3>
 8006e92:	4601      	mov	r1, r0
 8006e94:	4608      	mov	r0, r1
 8006e96:	bd70      	pop	{r4, r5, r6, pc}
 8006e98:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8006e9c:	e7dd      	b.n	8006e5a <ceilf+0x32>
 8006e9e:	bf00      	nop
 8006ea0:	7149f2ca 	.word	0x7149f2ca
 8006ea4:	007fffff 	.word	0x007fffff

08006ea8 <_init>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	bf00      	nop
 8006eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eae:	bc08      	pop	{r3}
 8006eb0:	469e      	mov	lr, r3
 8006eb2:	4770      	bx	lr

08006eb4 <_fini>:
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb6:	bf00      	nop
 8006eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eba:	bc08      	pop	{r3}
 8006ebc:	469e      	mov	lr, r3
 8006ebe:	4770      	bx	lr
