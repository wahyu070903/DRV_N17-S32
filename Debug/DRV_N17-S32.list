
DRV_N17-S32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080063b0  080063b0  000073b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006434  08006434  00008064  2**0
                  CONTENTS
  4 .ARM          00000000  08006434  08006434  00008064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006434  08006434  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006434  08006434  00007434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006438  08006438  00007438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800643c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d8  20000064  080064a0  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000133c  080064a0  0000833c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ae4  00000000  00000000  0000808d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e6  00000000  00000000  0001bb71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  0001ed58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e46  00000000  00000000  0001ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d16  00000000  00000000  00020e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b93  00000000  00000000  0003ab1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000937dc  00000000  00000000  000506af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3e8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ee0  00000000  00000000  000e3ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e8db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08006398 	.word	0x08006398

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08006398 	.word	0x08006398

08000150 <HAL_TIM_PWM_PulseFinishedCallback>:
		configureSpeed(0.4);
	}
}

// Interrupt function
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000160:	d106      	bne.n	8000170 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
    	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 8000162:	2100      	movs	r1, #0
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f004 f9f5 	bl	8004554 <HAL_TIM_PWM_Stop_IT>
    	pulse_complete = 1;
 800016a:	4b03      	ldr	r3, [pc, #12]	@ (8000178 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800016c:	2201      	movs	r2, #1
 800016e:	701a      	strb	r2, [r3, #0]
    }
}
 8000170:	bf00      	nop
 8000172:	3708      	adds	r7, #8
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}
 8000178:	20000000 	.word	0x20000000

0800017c <encChangeDir>:
extern I2C_HandleTypeDef hi2c1;
uint8_t rotation_direction = 0;
int32_t counter = 0;
uint16_t position_prev = 0;	// 0 = CCW, 1 = CW

void encChangeDir(uint8_t direction){
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
	if(direction == 1){
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b01      	cmp	r3, #1
 800018a:	d108      	bne.n	800019e <encChangeDir+0x22>
		//Clockwise
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 800018c:	2201      	movs	r2, #1
 800018e:	2120      	movs	r1, #32
 8000190:	480a      	ldr	r0, [pc, #40]	@ (80001bc <encChangeDir+0x40>)
 8000192:	f000 fffd 	bl	8001190 <HAL_GPIO_WritePin>
		rotation_direction = 1;
 8000196:	4b0a      	ldr	r3, [pc, #40]	@ (80001c0 <encChangeDir+0x44>)
 8000198:	2201      	movs	r2, #1
 800019a:	701a      	strb	r2, [r3, #0]
	}else if (direction == 0){
		//Counter clockwise
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
		rotation_direction = 0;
	}
}
 800019c:	e00a      	b.n	80001b4 <encChangeDir+0x38>
	}else if (direction == 0){
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d107      	bne.n	80001b4 <encChangeDir+0x38>
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 80001a4:	2200      	movs	r2, #0
 80001a6:	2120      	movs	r1, #32
 80001a8:	4804      	ldr	r0, [pc, #16]	@ (80001bc <encChangeDir+0x40>)
 80001aa:	f000 fff1 	bl	8001190 <HAL_GPIO_WritePin>
		rotation_direction = 0;
 80001ae:	4b04      	ldr	r3, [pc, #16]	@ (80001c0 <encChangeDir+0x44>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	701a      	strb	r2, [r3, #0]
}
 80001b4:	bf00      	nop
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	40010c00 	.word	0x40010c00
 80001c0:	20000080 	.word	0x20000080

080001c4 <encGetCount>:
	float angle_deg = (angle * 360.0) / 4096.0;

	*result = angle_deg;
}

void encGetCount(int32_t* result){
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b08a      	sub	sp, #40	@ 0x28
 80001c8:	af04      	add	r7, sp, #16
 80001ca:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t buffer[2] = {0};
 80001cc:	2300      	movs	r3, #0
 80001ce:	81bb      	strh	r3, [r7, #12]
	uint16_t position_now = 0;
 80001d0:	2300      	movs	r3, #0
 80001d2:	827b      	strh	r3, [r7, #18]
	int32_t delta = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	617b      	str	r3, [r7, #20]
	status = HAL_I2C_Mem_Read(&hi2c1, (ENC_ADDR << 1), AS5600_RAW_ANGLE_MSB_REG, I2C_MEMADD_SIZE_8BIT, buffer, 2, 100);
 80001d8:	2364      	movs	r3, #100	@ 0x64
 80001da:	9302      	str	r3, [sp, #8]
 80001dc:	2302      	movs	r3, #2
 80001de:	9301      	str	r3, [sp, #4]
 80001e0:	f107 030c 	add.w	r3, r7, #12
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	2301      	movs	r3, #1
 80001e8:	220c      	movs	r2, #12
 80001ea:	216c      	movs	r1, #108	@ 0x6c
 80001ec:	482a      	ldr	r0, [pc, #168]	@ (8000298 <encGetCount+0xd4>)
 80001ee:	f001 f93f 	bl	8001470 <HAL_I2C_Mem_Read>
 80001f2:	4603      	mov	r3, r0
 80001f4:	747b      	strb	r3, [r7, #17]

	if(status == HAL_OK){
 80001f6:	7c7b      	ldrb	r3, [r7, #17]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d148      	bne.n	800028e <encGetCount+0xca>
		position_now = (buffer[0] << 8) | buffer[1];
 80001fc:	7b3b      	ldrb	r3, [r7, #12]
 80001fe:	021b      	lsls	r3, r3, #8
 8000200:	b21a      	sxth	r2, r3
 8000202:	7b7b      	ldrb	r3, [r7, #13]
 8000204:	b21b      	sxth	r3, r3
 8000206:	4313      	orrs	r3, r2
 8000208:	b21b      	sxth	r3, r3
 800020a:	827b      	strh	r3, [r7, #18]
		delta = (int32_t)(position_now - position_prev);
 800020c:	8a7b      	ldrh	r3, [r7, #18]
 800020e:	4a23      	ldr	r2, [pc, #140]	@ (800029c <encGetCount+0xd8>)
 8000210:	8812      	ldrh	r2, [r2, #0]
 8000212:	1a9b      	subs	r3, r3, r2
 8000214:	617b      	str	r3, [r7, #20]

		//if(abs(delta) < ENC_NOISE_THRESHOLD) delta = 0;

		if(delta > ENC_PPR / 2){
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800021c:	dd04      	ble.n	8000228 <encGetCount+0x64>
			delta -= ENC_PPR;
 800021e:	697b      	ldr	r3, [r7, #20]
 8000220:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8000224:	617b      	str	r3, [r7, #20]
 8000226:	e007      	b.n	8000238 <encGetCount+0x74>
		}else if(delta < -ENC_PPR / 2){
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 800022e:	da03      	bge.n	8000238 <encGetCount+0x74>
			delta += ENC_PPR;
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000236:	617b      	str	r3, [r7, #20]
		}

		if(rotation_direction == 0) delta = -delta;
 8000238:	4b19      	ldr	r3, [pc, #100]	@ (80002a0 <encGetCount+0xdc>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d102      	bne.n	8000246 <encGetCount+0x82>
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	425b      	negs	r3, r3
 8000244:	617b      	str	r3, [r7, #20]

		counter += delta;
 8000246:	4b17      	ldr	r3, [pc, #92]	@ (80002a4 <encGetCount+0xe0>)
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	697b      	ldr	r3, [r7, #20]
 800024c:	4413      	add	r3, r2
 800024e:	4a15      	ldr	r2, [pc, #84]	@ (80002a4 <encGetCount+0xe0>)
 8000250:	6013      	str	r3, [r2, #0]

		if(counter >= ENC_MAX_COUNT){
 8000252:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <encGetCount+0xe0>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a14      	ldr	r2, [pc, #80]	@ (80002a8 <encGetCount+0xe4>)
 8000258:	4293      	cmp	r3, r2
 800025a:	dd06      	ble.n	800026a <encGetCount+0xa6>
			counter -= ENC_MAX_COUNT;
 800025c:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <encGetCount+0xe0>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b12      	ldr	r3, [pc, #72]	@ (80002ac <encGetCount+0xe8>)
 8000262:	4413      	add	r3, r2
 8000264:	4a0f      	ldr	r2, [pc, #60]	@ (80002a4 <encGetCount+0xe0>)
 8000266:	6013      	str	r3, [r2, #0]
 8000268:	e00a      	b.n	8000280 <encGetCount+0xbc>
		}else if(counter < ENC_MIN_COUNT){
 800026a:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <encGetCount+0xe0>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a0f      	ldr	r2, [pc, #60]	@ (80002ac <encGetCount+0xe8>)
 8000270:	4293      	cmp	r3, r2
 8000272:	da05      	bge.n	8000280 <encGetCount+0xbc>
			counter += ENC_MAX_COUNT;
 8000274:	4b0b      	ldr	r3, [pc, #44]	@ (80002a4 <encGetCount+0xe0>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b0d      	ldr	r3, [pc, #52]	@ (80002b0 <encGetCount+0xec>)
 800027a:	4413      	add	r3, r2
 800027c:	4a09      	ldr	r2, [pc, #36]	@ (80002a4 <encGetCount+0xe0>)
 800027e:	6013      	str	r3, [r2, #0]
		}

		position_prev = position_now;
 8000280:	4a06      	ldr	r2, [pc, #24]	@ (800029c <encGetCount+0xd8>)
 8000282:	8a7b      	ldrh	r3, [r7, #18]
 8000284:	8013      	strh	r3, [r2, #0]
		*result = counter;
 8000286:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <encGetCount+0xe0>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	601a      	str	r2, [r3, #0]
	}
}
 800028e:	bf00      	nop
 8000290:	3718      	adds	r7, #24
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000330 	.word	0x20000330
 800029c:	20000088 	.word	0x20000088
 80002a0:	20000080 	.word	0x20000080
 80002a4:	20000084 	.word	0x20000084
 80002a8:	0098967e 	.word	0x0098967e
 80002ac:	ff676981 	.word	0xff676981
 80002b0:	0098967f 	.word	0x0098967f

080002b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	60f8      	str	r0, [r7, #12]
 80002bc:	60b9      	str	r1, [r7, #8]
 80002be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	4a06      	ldr	r2, [pc, #24]	@ (80002dc <vApplicationGetIdleTaskMemory+0x28>)
 80002c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	4a05      	ldr	r2, [pc, #20]	@ (80002e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80002ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2280      	movs	r2, #128	@ 0x80
 80002d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002d2:	bf00      	nop
 80002d4:	3714      	adds	r7, #20
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	2000008c 	.word	0x2000008c
 80002e0:	2000012c 	.word	0x2000012c

080002e4 <i2c_scanbus>:

static uint8_t i2c_dataRady = 0;
static uint8_t i2c_sendSuccess = 0;

/* Blocking function */
void i2c_scanbus(I2C_HandleTypeDef* channel, uint8_t* found_addr){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result;
	static uint8_t counter = 0;
	for(uint8_t i = 0 ; i <= MAX_NODE ; i++){
 80002ee:	2300      	movs	r3, #0
 80002f0:	73fb      	strb	r3, [r7, #15]
 80002f2:	e020      	b.n	8000336 <i2c_scanbus+0x52>
		result = HAL_I2C_IsDeviceReady(channel, (i << 1), 1, 100);
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	b299      	uxth	r1, r3
 80002fc:	2364      	movs	r3, #100	@ 0x64
 80002fe:	2201      	movs	r2, #1
 8000300:	6878      	ldr	r0, [r7, #4]
 8000302:	f001 fb29 	bl	8001958 <HAL_I2C_IsDeviceReady>
 8000306:	4603      	mov	r3, r0
 8000308:	73bb      	strb	r3, [r7, #14]
		if(result == HAL_OK){
 800030a:	7bbb      	ldrb	r3, [r7, #14]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d10c      	bne.n	800032a <i2c_scanbus+0x46>
			found_addr[counter] = i;
 8000310:	4b0d      	ldr	r3, [pc, #52]	@ (8000348 <i2c_scanbus+0x64>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	4413      	add	r3, r2
 800031a:	7bfa      	ldrb	r2, [r7, #15]
 800031c:	701a      	strb	r2, [r3, #0]
			counter++;
 800031e:	4b0a      	ldr	r3, [pc, #40]	@ (8000348 <i2c_scanbus+0x64>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	3301      	adds	r3, #1
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <i2c_scanbus+0x64>)
 8000328:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(10);
 800032a:	200a      	movs	r0, #10
 800032c:	f000 fc22 	bl	8000b74 <HAL_Delay>
	for(uint8_t i = 0 ; i <= MAX_NODE ; i++){
 8000330:	7bfb      	ldrb	r3, [r7, #15]
 8000332:	3301      	adds	r3, #1
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800033a:	2b00      	cmp	r3, #0
 800033c:	dada      	bge.n	80002f4 <i2c_scanbus+0x10>
	}
}
 800033e:	bf00      	nop
 8000340:	bf00      	nop
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	2000032e 	.word	0x2000032e

0800034c <dataReadySet>:

void dataReadySet(uint8_t newValue){
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
	i2c_dataRady = newValue;
 8000356:	4a04      	ldr	r2, [pc, #16]	@ (8000368 <dataReadySet+0x1c>)
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	7013      	strb	r3, [r2, #0]
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	2000032c 	.word	0x2000032c

0800036c <sendStatusSet>:

uint8_t dataReadyGet(){
	return i2c_dataRady;
}

void sendStatusSet(uint8_t newValue){
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	i2c_sendSuccess = newValue;
 8000376:	4a04      	ldr	r2, [pc, #16]	@ (8000388 <sendStatusSet+0x1c>)
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	7013      	strb	r3, [r2, #0]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	2000032d 	.word	0x2000032d

0800038c <HAL_I2C_MemRxCpltCallback>:
void i2c_readbus_8t(I2C_HandleTypeDef* channel, uint8_t devAddr, uint8_t reg, uint8_t* buffer, uint8_t buff_size){
	HAL_I2C_Mem_Read_IT(channel, devAddr, reg, I2C_MEMADD_SIZE_8BIT, buffer, buff_size);
}

/* memory read callback */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a04      	ldr	r2, [pc, #16]	@ (80003ac <HAL_I2C_MemRxCpltCallback+0x20>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d102      	bne.n	80003a4 <HAL_I2C_MemRxCpltCallback+0x18>
  {
		dataReadySet(1);
 800039e:	2001      	movs	r0, #1
 80003a0:	f7ff ffd4 	bl	800034c <dataReadySet>
  }
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40005400 	.word	0x40005400

080003b0 <HAL_I2C_MemTxCpltCallback>:

/* memory write callback */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a04      	ldr	r2, [pc, #16]	@ (80003d0 <HAL_I2C_MemTxCpltCallback+0x20>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d102      	bne.n	80003c8 <HAL_I2C_MemTxCpltCallback+0x18>
		sendStatusSet(1);
 80003c2:	2001      	movs	r0, #1
 80003c4:	f7ff ffd2 	bl	800036c <sendStatusSet>
	}
}
 80003c8:	bf00      	nop
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40005400 	.word	0x40005400

080003d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d4:	b5b0      	push	{r4, r5, r7, lr}
 80003d6:	b08e      	sub	sp, #56	@ 0x38
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003da:	f000 fb99 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003de:	f000 f83f 	bl	8000460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e2:	f000 f909 	bl	80005f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003e6:	f000 f881 	bl	80004ec <MX_I2C1_Init>
  MX_TIM2_Init();
 80003ea:	f000 f8ad 	bl	8000548 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  i2c_scanbus(&hi2c1, i2c_available);
 80003ee:	4916      	ldr	r1, [pc, #88]	@ (8000448 <main+0x74>)
 80003f0:	4816      	ldr	r0, [pc, #88]	@ (800044c <main+0x78>)
 80003f2:	f7ff ff77 	bl	80002e4 <i2c_scanbus>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 80003f6:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <main+0x7c>)
 80003f8:	f107 041c 	add.w	r4, r7, #28
 80003fc:	461d      	mov	r5, r3
 80003fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000402:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000406:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 800040a:	f107 031c 	add.w	r3, r7, #28
 800040e:	2100      	movs	r1, #0
 8000410:	4618      	mov	r0, r3
 8000412:	f004 fdc7 	bl	8004fa4 <osThreadCreate>
 8000416:	4603      	mov	r3, r0
 8000418:	4a0e      	ldr	r2, [pc, #56]	@ (8000454 <main+0x80>)
 800041a:	6013      	str	r3, [r2, #0]

  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 800041c:	4b0e      	ldr	r3, [pc, #56]	@ (8000458 <main+0x84>)
 800041e:	463c      	mov	r4, r7
 8000420:	461d      	mov	r5, r3
 8000422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000426:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800042a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 800042e:	463b      	mov	r3, r7
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f004 fdb6 	bl	8004fa4 <osThreadCreate>
 8000438:	4603      	mov	r3, r0
 800043a:	4a08      	ldr	r2, [pc, #32]	@ (800045c <main+0x88>)
 800043c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800043e:	f004 fdaa 	bl	8004f96 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000442:	bf00      	nop
 8000444:	e7fd      	b.n	8000442 <main+0x6e>
 8000446:	bf00      	nop
 8000448:	200003d4 	.word	0x200003d4
 800044c:	20000330 	.word	0x20000330
 8000450:	080063bc 	.word	0x080063bc
 8000454:	200003cc 	.word	0x200003cc
 8000458:	080063e4 	.word	0x080063e4
 800045c:	200003d0 	.word	0x200003d0

08000460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b090      	sub	sp, #64	@ 0x40
 8000464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000466:	f107 0318 	add.w	r3, r7, #24
 800046a:	2228      	movs	r2, #40	@ 0x28
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f005 feba 	bl	80061e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
 8000480:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000482:	2301      	movs	r3, #1
 8000484:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000486:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800048a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000490:	2301      	movs	r3, #1
 8000492:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000494:	2302      	movs	r3, #2
 8000496:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000498:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800049c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800049e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a4:	f107 0318 	add.w	r3, r7, #24
 80004a8:	4618      	mov	r0, r3
 80004aa:	f003 fb19 	bl	8003ae0 <HAL_RCC_OscConfig>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004b4:	f000 f96c 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b8:	230f      	movs	r3, #15
 80004ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004bc:	2302      	movs	r3, #2
 80004be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2102      	movs	r1, #2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f003 fd86 	bl	8003fe4 <HAL_RCC_ClockConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004de:	f000 f957 	bl	8000790 <Error_Handler>
  }
}
 80004e2:	bf00      	nop
 80004e4:	3740      	adds	r7, #64	@ 0x40
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004f0:	4b12      	ldr	r3, [pc, #72]	@ (800053c <MX_I2C1_Init+0x50>)
 80004f2:	4a13      	ldr	r2, [pc, #76]	@ (8000540 <MX_I2C1_Init+0x54>)
 80004f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80004f6:	4b11      	ldr	r3, [pc, #68]	@ (800053c <MX_I2C1_Init+0x50>)
 80004f8:	4a12      	ldr	r2, [pc, #72]	@ (8000544 <MX_I2C1_Init+0x58>)
 80004fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <MX_I2C1_Init+0x50>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000502:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <MX_I2C1_Init+0x50>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000508:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <MX_I2C1_Init+0x50>)
 800050a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800050e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000510:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <MX_I2C1_Init+0x50>)
 8000512:	2200      	movs	r2, #0
 8000514:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000516:	4b09      	ldr	r3, [pc, #36]	@ (800053c <MX_I2C1_Init+0x50>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800051c:	4b07      	ldr	r3, [pc, #28]	@ (800053c <MX_I2C1_Init+0x50>)
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000522:	4b06      	ldr	r3, [pc, #24]	@ (800053c <MX_I2C1_Init+0x50>)
 8000524:	2200      	movs	r2, #0
 8000526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000528:	4804      	ldr	r0, [pc, #16]	@ (800053c <MX_I2C1_Init+0x50>)
 800052a:	f000 fe49 	bl	80011c0 <HAL_I2C_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000534:	f000 f92c 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000330 	.word	0x20000330
 8000540:	40005400 	.word	0x40005400
 8000544:	00061a80 	.word	0x00061a80

08000548 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	@ 0x28
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]
 8000566:	615a      	str	r2, [r3, #20]
 8000568:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800056a:	4b22      	ldr	r3, [pc, #136]	@ (80005f4 <MX_TIM2_Init+0xac>)
 800056c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000570:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 8000572:	4b20      	ldr	r3, [pc, #128]	@ (80005f4 <MX_TIM2_Init+0xac>)
 8000574:	2247      	movs	r2, #71	@ 0x47
 8000576:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000578:	4b1e      	ldr	r3, [pc, #120]	@ (80005f4 <MX_TIM2_Init+0xac>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4 - 1;
 800057e:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <MX_TIM2_Init+0xac>)
 8000580:	2203      	movs	r2, #3
 8000582:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000584:	4b1b      	ldr	r3, [pc, #108]	@ (80005f4 <MX_TIM2_Init+0xac>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058a:	4b1a      	ldr	r3, [pc, #104]	@ (80005f4 <MX_TIM2_Init+0xac>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000590:	4818      	ldr	r0, [pc, #96]	@ (80005f4 <MX_TIM2_Init+0xac>)
 8000592:	f003 ff8f 	bl	80044b4 <HAL_TIM_PWM_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800059c:	f000 f8f8 	bl	8000790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005a0:	2300      	movs	r3, #0
 80005a2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4619      	mov	r1, r3
 80005ae:	4811      	ldr	r0, [pc, #68]	@ (80005f4 <MX_TIM2_Init+0xac>)
 80005b0:	f004 fc6a 	bl	8004e88 <HAL_TIMEx_MasterConfigSynchronization>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80005ba:	f000 f8e9 	bl	8000790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005be:	2360      	movs	r3, #96	@ 0x60
 80005c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80005c2:	2332      	movs	r3, #50	@ 0x32
 80005c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	4807      	ldr	r0, [pc, #28]	@ (80005f4 <MX_TIM2_Init+0xac>)
 80005d6:	f004 f95f 	bl	8004898 <HAL_TIM_PWM_ConfigChannel>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80005e0:	f000 f8d6 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <MX_TIM2_Init+0xac>)
 80005e6:	f000 f983 	bl	80008f0 <HAL_TIM_MspPostInit>

}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	@ 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000384 	.word	0x20000384

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060c:	4b44      	ldr	r3, [pc, #272]	@ (8000720 <MX_GPIO_Init+0x128>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a43      	ldr	r2, [pc, #268]	@ (8000720 <MX_GPIO_Init+0x128>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b41      	ldr	r3, [pc, #260]	@ (8000720 <MX_GPIO_Init+0x128>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0310 	and.w	r3, r3, #16
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000624:	4b3e      	ldr	r3, [pc, #248]	@ (8000720 <MX_GPIO_Init+0x128>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a3d      	ldr	r2, [pc, #244]	@ (8000720 <MX_GPIO_Init+0x128>)
 800062a:	f043 0320 	orr.w	r3, r3, #32
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b3b      	ldr	r3, [pc, #236]	@ (8000720 <MX_GPIO_Init+0x128>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0320 	and.w	r3, r3, #32
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063c:	4b38      	ldr	r3, [pc, #224]	@ (8000720 <MX_GPIO_Init+0x128>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a37      	ldr	r2, [pc, #220]	@ (8000720 <MX_GPIO_Init+0x128>)
 8000642:	f043 0304 	orr.w	r3, r3, #4
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b35      	ldr	r3, [pc, #212]	@ (8000720 <MX_GPIO_Init+0x128>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0304 	and.w	r3, r3, #4
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000654:	4b32      	ldr	r3, [pc, #200]	@ (8000720 <MX_GPIO_Init+0x128>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a31      	ldr	r2, [pc, #196]	@ (8000720 <MX_GPIO_Init+0x128>)
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b2f      	ldr	r3, [pc, #188]	@ (8000720 <MX_GPIO_Init+0x128>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0308 	and.w	r3, r3, #8
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000672:	482c      	ldr	r0, [pc, #176]	@ (8000724 <MX_GPIO_Init+0x12c>)
 8000674:	f000 fd8c 	bl	8001190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 800067e:	482a      	ldr	r0, [pc, #168]	@ (8000728 <MX_GPIO_Init+0x130>)
 8000680:	f000 fd86 	bl	8001190 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2120      	movs	r1, #32
 8000688:	4828      	ldr	r0, [pc, #160]	@ (800072c <MX_GPIO_Init+0x134>)
 800068a:	f000 fd81 	bl	8001190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800068e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	4619      	mov	r1, r3
 80006a6:	481f      	ldr	r0, [pc, #124]	@ (8000724 <MX_GPIO_Init+0x12c>)
 80006a8:	f000 fbee 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80006ac:	f44f 73df 	mov.w	r3, #446	@ 0x1be
 80006b0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4619      	mov	r1, r3
 80006c4:	4818      	ldr	r0, [pc, #96]	@ (8000728 <MX_GPIO_Init+0x130>)
 80006c6:	f000 fbdf 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006ca:	2340      	movs	r3, #64	@ 0x40
 80006cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	4619      	mov	r1, r3
 80006dc:	4812      	ldr	r0, [pc, #72]	@ (8000728 <MX_GPIO_Init+0x130>)
 80006de:	f000 fbd3 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006e2:	2310      	movs	r3, #16
 80006e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ee:	f107 0310 	add.w	r3, r7, #16
 80006f2:	4619      	mov	r1, r3
 80006f4:	480d      	ldr	r0, [pc, #52]	@ (800072c <MX_GPIO_Init+0x134>)
 80006f6:	f000 fbc7 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006fa:	2320      	movs	r3, #32
 80006fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2302      	movs	r3, #2
 8000708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4619      	mov	r1, r3
 8000710:	4806      	ldr	r0, [pc, #24]	@ (800072c <MX_GPIO_Init+0x134>)
 8000712:	f000 fbb9 	bl	8000e88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000
 8000724:	40011000 	.word	0x40011000
 8000728:	40010800 	.word	0x40010800
 800072c:	40010c00 	.word	0x40010c00

08000730 <StartDriverTask>:

/* USER CODE BEGIN 4 */
void StartDriverTask(void const * argument){
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint8_t init_flag = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	73fb      	strb	r3, [r7, #15]
	float time_start = 0;
 800073c:	f04f 0300 	mov.w	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
	for(;;){
 8000742:	bf00      	nop
 8000744:	e7fd      	b.n	8000742 <StartDriverTask+0x12>
	...

08000748 <StartEncoderTask>:
		//maintainPosition(motor_target, &encoder_counter, &pid_data);
		//motion(motor_target, &encoder_counter, &init_flag, &time_start);
	}
}

void StartEncoderTask(void const * argument){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	for(;;){
		encChangeDir(motor_rotation);
 8000750:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <StartEncoderTask+0x1c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fd11 	bl	800017c <encChangeDir>
		encGetCount(&encoder_counter);
 800075a:	4803      	ldr	r0, [pc, #12]	@ (8000768 <StartEncoderTask+0x20>)
 800075c:	f7ff fd32 	bl	80001c4 <encGetCount>
		encChangeDir(motor_rotation);
 8000760:	bf00      	nop
 8000762:	e7f5      	b.n	8000750 <StartEncoderTask+0x8>
 8000764:	20000458 	.word	0x20000458
 8000768:	20000454 	.word	0x20000454

0800076c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a04      	ldr	r2, [pc, #16]	@ (800078c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d101      	bne.n	8000782 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800077e:	f000 f9dd 	bl	8000b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40012c00 	.word	0x40012c00

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <Error_Handler+0x8>

0800079c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <HAL_MspInit+0x68>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <HAL_MspInit+0x68>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <HAL_MspInit+0x68>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <HAL_MspInit+0x68>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a11      	ldr	r2, [pc, #68]	@ (8000804 <HAL_MspInit+0x68>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <HAL_MspInit+0x68>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	210f      	movs	r1, #15
 80007d6:	f06f 0001 	mvn.w	r0, #1
 80007da:	f000 faa4 	bl	8000d26 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80007de:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <HAL_MspInit+0x6c>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <HAL_MspInit+0x6c>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000
 8000808:	40010000 	.word	0x40010000

0800080c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a1d      	ldr	r2, [pc, #116]	@ (800089c <HAL_I2C_MspInit+0x90>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d133      	bne.n	8000894 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082c:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <HAL_I2C_MspInit+0x94>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a1b      	ldr	r2, [pc, #108]	@ (80008a0 <HAL_I2C_MspInit+0x94>)
 8000832:	f043 0308 	orr.w	r3, r3, #8
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <HAL_I2C_MspInit+0x94>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0308 	and.w	r3, r3, #8
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000844:	23c0      	movs	r3, #192	@ 0xc0
 8000846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000848:	2312      	movs	r3, #18
 800084a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4619      	mov	r1, r3
 8000856:	4813      	ldr	r0, [pc, #76]	@ (80008a4 <HAL_I2C_MspInit+0x98>)
 8000858:	f000 fb16 	bl	8000e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_I2C_MspInit+0x94>)
 800085e:	69db      	ldr	r3, [r3, #28]
 8000860:	4a0f      	ldr	r2, [pc, #60]	@ (80008a0 <HAL_I2C_MspInit+0x94>)
 8000862:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000866:	61d3      	str	r3, [r2, #28]
 8000868:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <HAL_I2C_MspInit+0x94>)
 800086a:	69db      	ldr	r3, [r3, #28]
 800086c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2105      	movs	r1, #5
 8000878:	201f      	movs	r0, #31
 800087a:	f000 fa54 	bl	8000d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800087e:	201f      	movs	r0, #31
 8000880:	f000 fa6d 	bl	8000d5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2105      	movs	r1, #5
 8000888:	2020      	movs	r0, #32
 800088a:	f000 fa4c 	bl	8000d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800088e:	2020      	movs	r0, #32
 8000890:	f000 fa65 	bl	8000d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40005400 	.word	0x40005400
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010c00 	.word	0x40010c00

080008a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008b8:	d113      	bne.n	80008e2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <HAL_TIM_PWM_MspInit+0x44>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4a0b      	ldr	r2, [pc, #44]	@ (80008ec <HAL_TIM_PWM_MspInit+0x44>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	61d3      	str	r3, [r2, #28]
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <HAL_TIM_PWM_MspInit+0x44>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2105      	movs	r1, #5
 80008d6:	201c      	movs	r0, #28
 80008d8:	f000 fa25 	bl	8000d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008dc:	201c      	movs	r0, #28
 80008de:	f000 fa3e 	bl	8000d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800090e:	d117      	bne.n	8000940 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <HAL_TIM_MspPostInit+0x58>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a0c      	ldr	r2, [pc, #48]	@ (8000948 <HAL_TIM_MspPostInit+0x58>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <HAL_TIM_MspPostInit+0x58>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000928:	2301      	movs	r3, #1
 800092a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2302      	movs	r3, #2
 8000932:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	4619      	mov	r1, r3
 800093a:	4804      	ldr	r0, [pc, #16]	@ (800094c <HAL_TIM_MspPostInit+0x5c>)
 800093c:	f000 faa4 	bl	8000e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021000 	.word	0x40021000
 800094c:	40010800 	.word	0x40010800

08000950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08c      	sub	sp, #48	@ 0x30
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000960:	2300      	movs	r3, #0
 8000962:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000966:	4b2e      	ldr	r3, [pc, #184]	@ (8000a20 <HAL_InitTick+0xd0>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	4a2d      	ldr	r2, [pc, #180]	@ (8000a20 <HAL_InitTick+0xd0>)
 800096c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000970:	6193      	str	r3, [r2, #24]
 8000972:	4b2b      	ldr	r3, [pc, #172]	@ (8000a20 <HAL_InitTick+0xd0>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800097e:	f107 020c 	add.w	r2, r7, #12
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fc9b 	bl	80042c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800098e:	f003 fc85 	bl	800429c <HAL_RCC_GetPCLK2Freq>
 8000992:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000996:	4a23      	ldr	r2, [pc, #140]	@ (8000a24 <HAL_InitTick+0xd4>)
 8000998:	fba2 2303 	umull	r2, r3, r2, r3
 800099c:	0c9b      	lsrs	r3, r3, #18
 800099e:	3b01      	subs	r3, #1
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <HAL_InitTick+0xd8>)
 80009a4:	4a21      	ldr	r2, [pc, #132]	@ (8000a2c <HAL_InitTick+0xdc>)
 80009a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <HAL_InitTick+0xd8>)
 80009aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009ae:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a28 <HAL_InitTick+0xd8>)
 80009b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <HAL_InitTick+0xd8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <HAL_InitTick+0xd8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <HAL_InitTick+0xd8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80009c8:	4817      	ldr	r0, [pc, #92]	@ (8000a28 <HAL_InitTick+0xd8>)
 80009ca:	f003 fcc9 	bl	8004360 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d11b      	bne.n	8000a14 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009dc:	4812      	ldr	r0, [pc, #72]	@ (8000a28 <HAL_InitTick+0xd8>)
 80009de:	f003 fd17 	bl	8004410 <HAL_TIM_Base_Start_IT>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d111      	bne.n	8000a14 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80009f0:	2019      	movs	r0, #25
 80009f2:	f000 f9b4 	bl	8000d5e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d808      	bhi.n	8000a0e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	2019      	movs	r0, #25
 8000a02:	f000 f990 	bl	8000d26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <HAL_InitTick+0xe0>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e002      	b.n	8000a14 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3730      	adds	r7, #48	@ 0x30
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	431bde83 	.word	0x431bde83
 8000a28:	2000045c 	.word	0x2000045c
 8000a2c:	40012c00 	.word	0x40012c00
 8000a30:	20000008 	.word	0x20000008

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <NMI_Handler+0x4>

08000a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <TIM1_UP_IRQHandler+0x10>)
 8000a6e:	f003 fe23 	bl	80046b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000045c 	.word	0x2000045c

08000a7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <TIM2_IRQHandler+0x10>)
 8000a82:	f003 fe19 	bl	80046b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000384 	.word	0x20000384

08000a90 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <I2C1_EV_IRQHandler+0x10>)
 8000a96:	f001 f88d 	bl	8001bb4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000330 	.word	0x20000330

08000aa4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000aa8:	4802      	ldr	r0, [pc, #8]	@ (8000ab4 <I2C1_ER_IRQHandler+0x10>)
 8000aaa:	f001 f9d6 	bl	8001e5a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000330 	.word	0x20000330

08000ab8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac4:	f7ff fff8 	bl	8000ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aca:	490c      	ldr	r1, [pc, #48]	@ (8000afc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000acc:	4a0c      	ldr	r2, [pc, #48]	@ (8000b00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a09      	ldr	r2, [pc, #36]	@ (8000b04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ae0:	4c09      	ldr	r4, [pc, #36]	@ (8000b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aee:	f005 fbd9 	bl	80062a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af2:	f7ff fc6f 	bl	80003d4 <main>
  bx lr
 8000af6:	4770      	bx	lr
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000b00:	0800643c 	.word	0x0800643c
  ldr r2, =_sbss
 8000b04:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000b08:	2000133c 	.word	0x2000133c

08000b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_2_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <HAL_Init+0x28>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <HAL_Init+0x28>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f8f5 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	200f      	movs	r0, #15
 8000b28:	f7ff ff12 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff fe36 	bl	800079c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <HAL_IncTick+0x1c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <HAL_IncTick+0x20>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a03      	ldr	r2, [pc, #12]	@ (8000b5c <HAL_IncTick+0x20>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	2000000c 	.word	0x2000000c
 8000b5c:	200004a4 	.word	0x200004a4

08000b60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b02      	ldr	r3, [pc, #8]	@ (8000b70 <HAL_GetTick+0x10>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	200004a4 	.word	0x200004a4

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff fff0 	bl	8000b60 <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <HAL_Delay+0x44>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffe0 	bl	8000b60 <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000000c 	.word	0x2000000c

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4906      	ldr	r1, [pc, #24]	@ (8000c54 <__NVIC_EnableIRQ+0x34>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	@ (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	@ (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	@ 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff4f 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff64 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ffb2 	bl	8000cac <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff81 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff57 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d005      	beq.n	8000da0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2204      	movs	r2, #4
 8000d98:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
 8000d9e:	e051      	b.n	8000e44 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 020e 	bic.w	r2, r2, #14
 8000dae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0201 	bic.w	r2, r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a22      	ldr	r2, [pc, #136]	@ (8000e50 <HAL_DMA_Abort_IT+0xd4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d029      	beq.n	8000e1e <HAL_DMA_Abort_IT+0xa2>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a21      	ldr	r2, [pc, #132]	@ (8000e54 <HAL_DMA_Abort_IT+0xd8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d022      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x9e>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e58 <HAL_DMA_Abort_IT+0xdc>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d01a      	beq.n	8000e14 <HAL_DMA_Abort_IT+0x98>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e5c <HAL_DMA_Abort_IT+0xe0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d012      	beq.n	8000e0e <HAL_DMA_Abort_IT+0x92>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1c      	ldr	r2, [pc, #112]	@ (8000e60 <HAL_DMA_Abort_IT+0xe4>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00a      	beq.n	8000e08 <HAL_DMA_Abort_IT+0x8c>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e64 <HAL_DMA_Abort_IT+0xe8>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d102      	bne.n	8000e02 <HAL_DMA_Abort_IT+0x86>
 8000dfc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e00:	e00e      	b.n	8000e20 <HAL_DMA_Abort_IT+0xa4>
 8000e02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e06:	e00b      	b.n	8000e20 <HAL_DMA_Abort_IT+0xa4>
 8000e08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e0c:	e008      	b.n	8000e20 <HAL_DMA_Abort_IT+0xa4>
 8000e0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e12:	e005      	b.n	8000e20 <HAL_DMA_Abort_IT+0xa4>
 8000e14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e18:	e002      	b.n	8000e20 <HAL_DMA_Abort_IT+0xa4>
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	e000      	b.n	8000e20 <HAL_DMA_Abort_IT+0xa4>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	4a11      	ldr	r2, [pc, #68]	@ (8000e68 <HAL_DMA_Abort_IT+0xec>)
 8000e22:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2201      	movs	r2, #1
 8000e28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	4798      	blx	r3
    } 
  }
  return status;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40020008 	.word	0x40020008
 8000e54:	4002001c 	.word	0x4002001c
 8000e58:	40020030 	.word	0x40020030
 8000e5c:	40020044 	.word	0x40020044
 8000e60:	40020058 	.word	0x40020058
 8000e64:	4002006c 	.word	0x4002006c
 8000e68:	40020000 	.word	0x40020000

08000e6c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e7a:	b2db      	uxtb	r3, r3
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
	...

08000e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b08b      	sub	sp, #44	@ 0x2c
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9a:	e169      	b.n	8001170 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	f040 8158 	bne.w	800116a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4a9a      	ldr	r2, [pc, #616]	@ (8001128 <HAL_GPIO_Init+0x2a0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d05e      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000ec4:	4a98      	ldr	r2, [pc, #608]	@ (8001128 <HAL_GPIO_Init+0x2a0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d875      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000eca:	4a98      	ldr	r2, [pc, #608]	@ (800112c <HAL_GPIO_Init+0x2a4>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d058      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000ed0:	4a96      	ldr	r2, [pc, #600]	@ (800112c <HAL_GPIO_Init+0x2a4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d86f      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000ed6:	4a96      	ldr	r2, [pc, #600]	@ (8001130 <HAL_GPIO_Init+0x2a8>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d052      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000edc:	4a94      	ldr	r2, [pc, #592]	@ (8001130 <HAL_GPIO_Init+0x2a8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d869      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000ee2:	4a94      	ldr	r2, [pc, #592]	@ (8001134 <HAL_GPIO_Init+0x2ac>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d04c      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000ee8:	4a92      	ldr	r2, [pc, #584]	@ (8001134 <HAL_GPIO_Init+0x2ac>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d863      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000eee:	4a92      	ldr	r2, [pc, #584]	@ (8001138 <HAL_GPIO_Init+0x2b0>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d046      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000ef4:	4a90      	ldr	r2, [pc, #576]	@ (8001138 <HAL_GPIO_Init+0x2b0>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d85d      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000efa:	2b12      	cmp	r3, #18
 8000efc:	d82a      	bhi.n	8000f54 <HAL_GPIO_Init+0xcc>
 8000efe:	2b12      	cmp	r3, #18
 8000f00:	d859      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000f02:	a201      	add	r2, pc, #4	@ (adr r2, 8000f08 <HAL_GPIO_Init+0x80>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f83 	.word	0x08000f83
 8000f0c:	08000f5d 	.word	0x08000f5d
 8000f10:	08000f6f 	.word	0x08000f6f
 8000f14:	08000fb1 	.word	0x08000fb1
 8000f18:	08000fb7 	.word	0x08000fb7
 8000f1c:	08000fb7 	.word	0x08000fb7
 8000f20:	08000fb7 	.word	0x08000fb7
 8000f24:	08000fb7 	.word	0x08000fb7
 8000f28:	08000fb7 	.word	0x08000fb7
 8000f2c:	08000fb7 	.word	0x08000fb7
 8000f30:	08000fb7 	.word	0x08000fb7
 8000f34:	08000fb7 	.word	0x08000fb7
 8000f38:	08000fb7 	.word	0x08000fb7
 8000f3c:	08000fb7 	.word	0x08000fb7
 8000f40:	08000fb7 	.word	0x08000fb7
 8000f44:	08000fb7 	.word	0x08000fb7
 8000f48:	08000fb7 	.word	0x08000fb7
 8000f4c:	08000f65 	.word	0x08000f65
 8000f50:	08000f79 	.word	0x08000f79
 8000f54:	4a79      	ldr	r2, [pc, #484]	@ (800113c <HAL_GPIO_Init+0x2b4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f5a:	e02c      	b.n	8000fb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	623b      	str	r3, [r7, #32]
          break;
 8000f62:	e029      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	623b      	str	r3, [r7, #32]
          break;
 8000f6c:	e024      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	3308      	adds	r3, #8
 8000f74:	623b      	str	r3, [r7, #32]
          break;
 8000f76:	e01f      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	330c      	adds	r3, #12
 8000f7e:	623b      	str	r3, [r7, #32]
          break;
 8000f80:	e01a      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d102      	bne.n	8000f90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	623b      	str	r3, [r7, #32]
          break;
 8000f8e:	e013      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d105      	bne.n	8000fa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	611a      	str	r2, [r3, #16]
          break;
 8000fa2:	e009      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	615a      	str	r2, [r3, #20]
          break;
 8000fae:	e003      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
          break;
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          break;
 8000fb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2bff      	cmp	r3, #255	@ 0xff
 8000fbc:	d801      	bhi.n	8000fc2 <HAL_GPIO_Init+0x13a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	e001      	b.n	8000fc6 <HAL_GPIO_Init+0x13e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	2bff      	cmp	r3, #255	@ 0xff
 8000fcc:	d802      	bhi.n	8000fd4 <HAL_GPIO_Init+0x14c>
 8000fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	e002      	b.n	8000fda <HAL_GPIO_Init+0x152>
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd6:	3b08      	subs	r3, #8
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	210f      	movs	r1, #15
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	401a      	ands	r2, r3
 8000fec:	6a39      	ldr	r1, [r7, #32]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 80b1 	beq.w	800116a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001008:	4b4d      	ldr	r3, [pc, #308]	@ (8001140 <HAL_GPIO_Init+0x2b8>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a4c      	ldr	r2, [pc, #304]	@ (8001140 <HAL_GPIO_Init+0x2b8>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b4a      	ldr	r3, [pc, #296]	@ (8001140 <HAL_GPIO_Init+0x2b8>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001020:	4a48      	ldr	r2, [pc, #288]	@ (8001144 <HAL_GPIO_Init+0x2bc>)
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800102e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	4013      	ands	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a40      	ldr	r2, [pc, #256]	@ (8001148 <HAL_GPIO_Init+0x2c0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d013      	beq.n	8001074 <HAL_GPIO_Init+0x1ec>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a3f      	ldr	r2, [pc, #252]	@ (800114c <HAL_GPIO_Init+0x2c4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d00d      	beq.n	8001070 <HAL_GPIO_Init+0x1e8>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a3e      	ldr	r2, [pc, #248]	@ (8001150 <HAL_GPIO_Init+0x2c8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d007      	beq.n	800106c <HAL_GPIO_Init+0x1e4>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a3d      	ldr	r2, [pc, #244]	@ (8001154 <HAL_GPIO_Init+0x2cc>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d101      	bne.n	8001068 <HAL_GPIO_Init+0x1e0>
 8001064:	2303      	movs	r3, #3
 8001066:	e006      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 8001068:	2304      	movs	r3, #4
 800106a:	e004      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 800106c:	2302      	movs	r3, #2
 800106e:	e002      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <HAL_GPIO_Init+0x1ee>
 8001074:	2300      	movs	r3, #0
 8001076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001078:	f002 0203 	and.w	r2, r2, #3
 800107c:	0092      	lsls	r2, r2, #2
 800107e:	4093      	lsls	r3, r2
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	4313      	orrs	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001086:	492f      	ldr	r1, [pc, #188]	@ (8001144 <HAL_GPIO_Init+0x2bc>)
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d006      	beq.n	80010ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	492c      	ldr	r1, [pc, #176]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	608b      	str	r3, [r1, #8]
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4928      	ldr	r1, [pc, #160]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d006      	beq.n	80010d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010c8:	4b23      	ldr	r3, [pc, #140]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	4922      	ldr	r1, [pc, #136]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	60cb      	str	r3, [r1, #12]
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010d6:	4b20      	ldr	r3, [pc, #128]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	43db      	mvns	r3, r3
 80010de:	491e      	ldr	r1, [pc, #120]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d006      	beq.n	80010fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010f0:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	4918      	ldr	r1, [pc, #96]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010fe:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	43db      	mvns	r3, r3
 8001106:	4914      	ldr	r1, [pc, #80]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 8001108:	4013      	ands	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d021      	beq.n	800115c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001118:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	490e      	ldr	r1, [pc, #56]	@ (8001158 <HAL_GPIO_Init+0x2d0>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	600b      	str	r3, [r1, #0]
 8001124:	e021      	b.n	800116a <HAL_GPIO_Init+0x2e2>
 8001126:	bf00      	nop
 8001128:	10320000 	.word	0x10320000
 800112c:	10310000 	.word	0x10310000
 8001130:	10220000 	.word	0x10220000
 8001134:	10210000 	.word	0x10210000
 8001138:	10120000 	.word	0x10120000
 800113c:	10110000 	.word	0x10110000
 8001140:	40021000 	.word	0x40021000
 8001144:	40010000 	.word	0x40010000
 8001148:	40010800 	.word	0x40010800
 800114c:	40010c00 	.word	0x40010c00
 8001150:	40011000 	.word	0x40011000
 8001154:	40011400 	.word	0x40011400
 8001158:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <HAL_GPIO_Init+0x304>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	43db      	mvns	r3, r3
 8001164:	4909      	ldr	r1, [pc, #36]	@ (800118c <HAL_GPIO_Init+0x304>)
 8001166:	4013      	ands	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116c:	3301      	adds	r3, #1
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001176:	fa22 f303 	lsr.w	r3, r2, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	f47f ae8e 	bne.w	8000e9c <HAL_GPIO_Init+0x14>
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	372c      	adds	r7, #44	@ 0x2c
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	40010400 	.word	0x40010400

08001190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
 800119c:	4613      	mov	r3, r2
 800119e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a0:	787b      	ldrb	r3, [r7, #1]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011ac:	e003      	b.n	80011b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	041a      	lsls	r2, r3, #16
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	611a      	str	r2, [r3, #16]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e12b      	b.n	800142a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d106      	bne.n	80011ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fb10 	bl	800080c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2224      	movs	r2, #36	@ 0x24
 80011f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0201 	bic.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001212:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001222:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001224:	f003 f826 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 8001228:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4a81      	ldr	r2, [pc, #516]	@ (8001434 <HAL_I2C_Init+0x274>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d807      	bhi.n	8001244 <HAL_I2C_Init+0x84>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4a80      	ldr	r2, [pc, #512]	@ (8001438 <HAL_I2C_Init+0x278>)
 8001238:	4293      	cmp	r3, r2
 800123a:	bf94      	ite	ls
 800123c:	2301      	movls	r3, #1
 800123e:	2300      	movhi	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	e006      	b.n	8001252 <HAL_I2C_Init+0x92>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4a7d      	ldr	r2, [pc, #500]	@ (800143c <HAL_I2C_Init+0x27c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	bf94      	ite	ls
 800124c:	2301      	movls	r3, #1
 800124e:	2300      	movhi	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0e7      	b.n	800142a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4a78      	ldr	r2, [pc, #480]	@ (8001440 <HAL_I2C_Init+0x280>)
 800125e:	fba2 2303 	umull	r2, r3, r2, r3
 8001262:	0c9b      	lsrs	r3, r3, #18
 8001264:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	430a      	orrs	r2, r1
 8001278:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4a6a      	ldr	r2, [pc, #424]	@ (8001434 <HAL_I2C_Init+0x274>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d802      	bhi.n	8001294 <HAL_I2C_Init+0xd4>
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	3301      	adds	r3, #1
 8001292:	e009      	b.n	80012a8 <HAL_I2C_Init+0xe8>
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	4a69      	ldr	r2, [pc, #420]	@ (8001444 <HAL_I2C_Init+0x284>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	099b      	lsrs	r3, r3, #6
 80012a6:	3301      	adds	r3, #1
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	430b      	orrs	r3, r1
 80012ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80012ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	495c      	ldr	r1, [pc, #368]	@ (8001434 <HAL_I2C_Init+0x274>)
 80012c4:	428b      	cmp	r3, r1
 80012c6:	d819      	bhi.n	80012fc <HAL_I2C_Init+0x13c>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1e59      	subs	r1, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80012d6:	1c59      	adds	r1, r3, #1
 80012d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80012dc:	400b      	ands	r3, r1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00a      	beq.n	80012f8 <HAL_I2C_Init+0x138>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1e59      	subs	r1, r3, #1
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f0:	3301      	adds	r3, #1
 80012f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f6:	e051      	b.n	800139c <HAL_I2C_Init+0x1dc>
 80012f8:	2304      	movs	r3, #4
 80012fa:	e04f      	b.n	800139c <HAL_I2C_Init+0x1dc>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d111      	bne.n	8001328 <HAL_I2C_Init+0x168>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1e58      	subs	r0, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6859      	ldr	r1, [r3, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	440b      	add	r3, r1
 8001312:	fbb0 f3f3 	udiv	r3, r0, r3
 8001316:	3301      	adds	r3, #1
 8001318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf0c      	ite	eq
 8001320:	2301      	moveq	r3, #1
 8001322:	2300      	movne	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	e012      	b.n	800134e <HAL_I2C_Init+0x18e>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	1e58      	subs	r0, r3, #1
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6859      	ldr	r1, [r3, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	0099      	lsls	r1, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	fbb0 f3f3 	udiv	r3, r0, r3
 800133e:	3301      	adds	r3, #1
 8001340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2C_Init+0x196>
 8001352:	2301      	movs	r3, #1
 8001354:	e022      	b.n	800139c <HAL_I2C_Init+0x1dc>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10e      	bne.n	800137c <HAL_I2C_Init+0x1bc>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1e58      	subs	r0, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6859      	ldr	r1, [r3, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	440b      	add	r3, r1
 800136c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001370:	3301      	adds	r3, #1
 8001372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800137a:	e00f      	b.n	800139c <HAL_I2C_Init+0x1dc>
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	1e58      	subs	r0, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6859      	ldr	r1, [r3, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	0099      	lsls	r1, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001392:	3301      	adds	r3, #1
 8001394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001398:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	6809      	ldr	r1, [r1, #0]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69da      	ldr	r2, [r3, #28]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80013ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6911      	ldr	r1, [r2, #16]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68d2      	ldr	r2, [r2, #12]
 80013d6:	4311      	orrs	r1, r2
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	430b      	orrs	r3, r1
 80013de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2220      	movs	r2, #32
 8001416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	000186a0 	.word	0x000186a0
 8001438:	001e847f 	.word	0x001e847f
 800143c:	003d08ff 	.word	0x003d08ff
 8001440:	431bde83 	.word	0x431bde83
 8001444:	10624dd3 	.word	0x10624dd3

08001448 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800145a:	2b80      	cmp	r3, #128	@ 0x80
 800145c:	d103      	bne.n	8001466 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  }
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	@ 0x30
 8001474:	af02      	add	r7, sp, #8
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	4608      	mov	r0, r1
 800147a:	4611      	mov	r1, r2
 800147c:	461a      	mov	r2, r3
 800147e:	4603      	mov	r3, r0
 8001480:	817b      	strh	r3, [r7, #10]
 8001482:	460b      	mov	r3, r1
 8001484:	813b      	strh	r3, [r7, #8]
 8001486:	4613      	mov	r3, r2
 8001488:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800148e:	f7ff fb67 	bl	8000b60 <HAL_GetTick>
 8001492:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b20      	cmp	r3, #32
 800149e:	f040 8250 	bne.w	8001942 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2319      	movs	r3, #25
 80014a8:	2201      	movs	r2, #1
 80014aa:	4982      	ldr	r1, [pc, #520]	@ (80016b4 <HAL_I2C_Mem_Read+0x244>)
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f002 f8dd 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80014b8:	2302      	movs	r3, #2
 80014ba:	e243      	b.n	8001944 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_I2C_Mem_Read+0x5a>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e23c      	b.n	8001944 <HAL_I2C_Mem_Read+0x4d4>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d007      	beq.n	80014f0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0201 	orr.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2222      	movs	r2, #34	@ 0x22
 8001504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2240      	movs	r2, #64	@ 0x40
 800150c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800151a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001520:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001526:	b29a      	uxth	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4a62      	ldr	r2, [pc, #392]	@ (80016b8 <HAL_I2C_Mem_Read+0x248>)
 8001530:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001532:	88f8      	ldrh	r0, [r7, #6]
 8001534:	893a      	ldrh	r2, [r7, #8]
 8001536:	8979      	ldrh	r1, [r7, #10]
 8001538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	4603      	mov	r3, r0
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f001 ff02 	bl	800334c <I2C_RequestMemoryRead>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e1f8      	b.n	8001944 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001556:	2b00      	cmp	r3, #0
 8001558:	d113      	bne.n	8001582 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e1cc      	b.n	800191c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001586:	2b01      	cmp	r3, #1
 8001588:	d11e      	bne.n	80015c8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001598:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800159a:	b672      	cpsid	i
}
 800159c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015c4:	b662      	cpsie	i
}
 80015c6:	e035      	b.n	8001634 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d11e      	bne.n	800160e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001608:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800160a:	b662      	cpsie	i
}
 800160c:	e012      	b.n	8001634 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800161c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001634:	e172      	b.n	800191c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800163a:	2b03      	cmp	r3, #3
 800163c:	f200 811f 	bhi.w	800187e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001644:	2b01      	cmp	r3, #1
 8001646:	d123      	bne.n	8001690 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800164a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f002 f9a1 	bl	8003994 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e173      	b.n	8001944 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001678:	3b01      	subs	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001684:	b29b      	uxth	r3, r3
 8001686:	3b01      	subs	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800168e:	e145      	b.n	800191c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001694:	2b02      	cmp	r3, #2
 8001696:	d152      	bne.n	800173e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800169e:	2200      	movs	r2, #0
 80016a0:	4906      	ldr	r1, [pc, #24]	@ (80016bc <HAL_I2C_Mem_Read+0x24c>)
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f001 ffe2 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d008      	beq.n	80016c0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e148      	b.n	8001944 <HAL_I2C_Mem_Read+0x4d4>
 80016b2:	bf00      	nop
 80016b4:	00100002 	.word	0x00100002
 80016b8:	ffff0000 	.word	0xffff0000
 80016bc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691a      	ldr	r2, [r3, #16]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	3b01      	subs	r3, #1
 8001700:	b29a      	uxth	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001706:	b662      	cpsie	i
}
 8001708:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001726:	3b01      	subs	r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001732:	b29b      	uxth	r3, r3
 8001734:	3b01      	subs	r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800173c:	e0ee      	b.n	800191c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001744:	2200      	movs	r2, #0
 8001746:	4981      	ldr	r1, [pc, #516]	@ (800194c <HAL_I2C_Mem_Read+0x4dc>)
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f001 ff8f 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0f5      	b.n	8001944 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001766:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691a      	ldr	r2, [r3, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001788:	3b01      	subs	r3, #1
 800178a:	b29a      	uxth	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001794:	b29b      	uxth	r3, r3
 8001796:	3b01      	subs	r3, #1
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800179e:	4b6c      	ldr	r3, [pc, #432]	@ (8001950 <HAL_I2C_Mem_Read+0x4e0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	08db      	lsrs	r3, r3, #3
 80017a4:	4a6b      	ldr	r2, [pc, #428]	@ (8001954 <HAL_I2C_Mem_Read+0x4e4>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	0a1a      	lsrs	r2, r3, #8
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	00da      	lsls	r2, r3, #3
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d118      	bne.n	80017f6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2220      	movs	r2, #32
 80017ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	f043 0220 	orr.w	r2, r3, #32
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80017e6:	b662      	cpsie	i
}
 80017e8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0a6      	b.n	8001944 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b04      	cmp	r3, #4
 8001802:	d1d9      	bne.n	80017b8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	691a      	ldr	r2, [r3, #16]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001830:	3b01      	subs	r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800183c:	b29b      	uxth	r3, r3
 800183e:	3b01      	subs	r3, #1
 8001840:	b29a      	uxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001846:	b662      	cpsie	i
}
 8001848:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001866:	3b01      	subs	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001872:	b29b      	uxth	r3, r3
 8001874:	3b01      	subs	r3, #1
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800187c:	e04e      	b.n	800191c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800187e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001880:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f002 f886 	bl	8003994 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e058      	b.n	8001944 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	3b01      	subs	r3, #1
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d124      	bne.n	800191c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d107      	bne.n	80018ea <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018e8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001920:	2b00      	cmp	r3, #0
 8001922:	f47f ae88 	bne.w	8001636 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2220      	movs	r2, #32
 800192a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e000      	b.n	8001944 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001942:	2302      	movs	r3, #2
  }
}
 8001944:	4618      	mov	r0, r3
 8001946:	3728      	adds	r7, #40	@ 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	00010004 	.word	0x00010004
 8001950:	20000004 	.word	0x20000004
 8001954:	14f8b589 	.word	0x14f8b589

08001958 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	@ 0x28
 800195c:	af02      	add	r7, sp, #8
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	460b      	mov	r3, r1
 8001966:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001968:	f7ff f8fa 	bl	8000b60 <HAL_GetTick>
 800196c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b20      	cmp	r3, #32
 800197c:	f040 8111 	bne.w	8001ba2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2319      	movs	r3, #25
 8001986:	2201      	movs	r2, #1
 8001988:	4988      	ldr	r1, [pc, #544]	@ (8001bac <HAL_I2C_IsDeviceReady+0x254>)
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f001 fe6e 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001996:	2302      	movs	r3, #2
 8001998:	e104      	b.n	8001ba4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_I2C_IsDeviceReady+0x50>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e0fd      	b.n	8001ba4 <HAL_I2C_IsDeviceReady+0x24c>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d007      	beq.n	80019ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0201 	orr.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2224      	movs	r2, #36	@ 0x24
 80019e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a70      	ldr	r2, [pc, #448]	@ (8001bb0 <HAL_I2C_IsDeviceReady+0x258>)
 80019f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a00:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f001 fe2c 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00d      	beq.n	8001a36 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a28:	d103      	bne.n	8001a32 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a30:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e0b6      	b.n	8001ba4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a36:	897b      	ldrh	r3, [r7, #10]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a44:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001a46:	f7ff f88b 	bl	8000b60 <HAL_GetTick>
 8001a4a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	bf0c      	ite	eq
 8001a5a:	2301      	moveq	r3, #1
 8001a5c:	2300      	movne	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a70:	bf0c      	ite	eq
 8001a72:	2301      	moveq	r3, #1
 8001a74:	2300      	movne	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001a7a:	e025      	b.n	8001ac8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a7c:	f7ff f870 	bl	8000b60 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d302      	bcc.n	8001a92 <HAL_I2C_IsDeviceReady+0x13a>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d103      	bne.n	8001a9a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	22a0      	movs	r2, #160	@ 0xa0
 8001a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_I2C_IsDeviceReady+0x188>
 8001ad4:	7dfb      	ldrb	r3, [r7, #23]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <HAL_I2C_IsDeviceReady+0x188>
 8001ada:	7dbb      	ldrb	r3, [r7, #22]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0cd      	beq.n	8001a7c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d129      	bne.n	8001b4a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b04:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2319      	movs	r3, #25
 8001b22:	2201      	movs	r2, #1
 8001b24:	4921      	ldr	r1, [pc, #132]	@ (8001bac <HAL_I2C_IsDeviceReady+0x254>)
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f001 fda0 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e036      	b.n	8001ba4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e02c      	b.n	8001ba4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b58:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b62:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2319      	movs	r3, #25
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	490f      	ldr	r1, [pc, #60]	@ (8001bac <HAL_I2C_IsDeviceReady+0x254>)
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f001 fd7c 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e012      	b.n	8001ba4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	3301      	adds	r3, #1
 8001b82:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	f4ff af32 	bcc.w	80019f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2220      	movs	r2, #32
 8001b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
  }
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3720      	adds	r7, #32
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	00100002 	.word	0x00100002
 8001bb0:	ffff0000 	.word	0xffff0000

08001bb4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bcc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001bd4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bdc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	2b10      	cmp	r3, #16
 8001be2:	d003      	beq.n	8001bec <HAL_I2C_EV_IRQHandler+0x38>
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b40      	cmp	r3, #64	@ 0x40
 8001be8:	f040 80b1 	bne.w	8001d4e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10d      	bne.n	8001c22 <HAL_I2C_EV_IRQHandler+0x6e>
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001c0c:	d003      	beq.n	8001c16 <HAL_I2C_EV_IRQHandler+0x62>
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001c14:	d101      	bne.n	8001c1a <HAL_I2C_EV_IRQHandler+0x66>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_I2C_EV_IRQHandler+0x68>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	f000 8114 	beq.w	8001e4a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00b      	beq.n	8001c44 <HAL_I2C_EV_IRQHandler+0x90>
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f001 ff37 	bl	8003aaa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fd62 	bl	8002706 <I2C_Master_SB>
 8001c42:	e083      	b.n	8001d4c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <HAL_I2C_EV_IRQHandler+0xac>
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 fdd9 	bl	8002810 <I2C_Master_ADD10>
 8001c5e:	e075      	b.n	8001d4c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d008      	beq.n	8001c7c <HAL_I2C_EV_IRQHandler+0xc8>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 fdf4 	bl	8002862 <I2C_Master_ADDR>
 8001c7a:	e067      	b.n	8001d4c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d036      	beq.n	8001cf4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c94:	f000 80db 	beq.w	8001e4e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00d      	beq.n	8001cbe <HAL_I2C_EV_IRQHandler+0x10a>
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <HAL_I2C_EV_IRQHandler+0x10a>
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d103      	bne.n	8001cbe <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f9c2 	bl	8002040 <I2C_MasterTransmit_TXE>
 8001cbc:	e046      	b.n	8001d4c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80c2 	beq.w	8001e4e <HAL_I2C_EV_IRQHandler+0x29a>
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80bc 	beq.w	8001e4e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001cd6:	7bbb      	ldrb	r3, [r7, #14]
 8001cd8:	2b21      	cmp	r3, #33	@ 0x21
 8001cda:	d103      	bne.n	8001ce4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fa4b 	bl	8002178 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ce2:	e0b4      	b.n	8001e4e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	2b40      	cmp	r3, #64	@ 0x40
 8001ce8:	f040 80b1 	bne.w	8001e4e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 fab9 	bl	8002264 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cf2:	e0ac      	b.n	8001e4e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d02:	f000 80a4 	beq.w	8001e4e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00d      	beq.n	8001d2c <HAL_I2C_EV_IRQHandler+0x178>
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d008      	beq.n	8001d2c <HAL_I2C_EV_IRQHandler+0x178>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 fb35 	bl	8002394 <I2C_MasterReceive_RXNE>
 8001d2a:	e00f      	b.n	8001d4c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 808b 	beq.w	8001e4e <HAL_I2C_EV_IRQHandler+0x29a>
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8085 	beq.w	8001e4e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fbed 	bl	8002524 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d4a:	e080      	b.n	8001e4e <HAL_I2C_EV_IRQHandler+0x29a>
 8001d4c:	e07f      	b.n	8001e4e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	e007      	b.n	8001d70 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d011      	beq.n	8001d9e <HAL_I2C_EV_IRQHandler+0x1ea>
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00c      	beq.n	8001d9e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001d94:	69b9      	ldr	r1, [r7, #24]
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 ffba 	bl	8002d10 <I2C_Slave_ADDR>
 8001d9c:	e05a      	b.n	8001e54 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_I2C_EV_IRQHandler+0x206>
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fff4 	bl	8002da0 <I2C_Slave_STOPF>
 8001db8:	e04c      	b.n	8001e54 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001dba:	7bbb      	ldrb	r3, [r7, #14]
 8001dbc:	2b21      	cmp	r3, #33	@ 0x21
 8001dbe:	d002      	beq.n	8001dc6 <HAL_I2C_EV_IRQHandler+0x212>
 8001dc0:	7bbb      	ldrb	r3, [r7, #14]
 8001dc2:	2b29      	cmp	r3, #41	@ 0x29
 8001dc4:	d120      	bne.n	8001e08 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00d      	beq.n	8001dec <HAL_I2C_EV_IRQHandler+0x238>
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <HAL_I2C_EV_IRQHandler+0x238>
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d103      	bne.n	8001dec <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 fed7 	bl	8002b98 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dea:	e032      	b.n	8001e52 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d02d      	beq.n	8001e52 <HAL_I2C_EV_IRQHandler+0x29e>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d028      	beq.n	8001e52 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 ff06 	bl	8002c12 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e06:	e024      	b.n	8001e52 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00d      	beq.n	8001e2e <HAL_I2C_EV_IRQHandler+0x27a>
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_I2C_EV_IRQHandler+0x27a>
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d103      	bne.n	8001e2e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 ff13 	bl	8002c52 <I2C_SlaveReceive_RXNE>
 8001e2c:	e012      	b.n	8001e54 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00d      	beq.n	8001e54 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 ff43 	bl	8002cce <I2C_SlaveReceive_BTF>
 8001e48:	e004      	b.n	8001e54 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001e4a:	bf00      	nop
 8001e4c:	e002      	b.n	8001e54 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e4e:	bf00      	nop
 8001e50:	e000      	b.n	8001e54 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e52:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001e54:	3720      	adds	r7, #32
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b08a      	sub	sp, #40	@ 0x28
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e7c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d015      	beq.n	8001eb4 <HAL_I2C_ER_IRQHandler+0x5a>
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d010      	beq.n	8001eb4 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001ea2:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eb2:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00d      	beq.n	8001eda <HAL_I2C_ER_IRQHandler+0x80>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eca:	f043 0302 	orr.w	r3, r3, #2
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001ed8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d03e      	beq.n	8001f62 <HAL_I2C_ER_IRQHandler+0x108>
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d039      	beq.n	8001f62 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8001eee:	7efb      	ldrb	r3, [r7, #27]
 8001ef0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f00:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001f08:	7ebb      	ldrb	r3, [r7, #26]
 8001f0a:	2b20      	cmp	r3, #32
 8001f0c:	d112      	bne.n	8001f34 <HAL_I2C_ER_IRQHandler+0xda>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10f      	bne.n	8001f34 <HAL_I2C_ER_IRQHandler+0xda>
 8001f14:	7cfb      	ldrb	r3, [r7, #19]
 8001f16:	2b21      	cmp	r3, #33	@ 0x21
 8001f18:	d008      	beq.n	8001f2c <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001f1a:	7cfb      	ldrb	r3, [r7, #19]
 8001f1c:	2b29      	cmp	r3, #41	@ 0x29
 8001f1e:	d005      	beq.n	8001f2c <HAL_I2C_ER_IRQHandler+0xd2>
 8001f20:	7cfb      	ldrb	r3, [r7, #19]
 8001f22:	2b28      	cmp	r3, #40	@ 0x28
 8001f24:	d106      	bne.n	8001f34 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2b21      	cmp	r3, #33	@ 0x21
 8001f2a:	d103      	bne.n	8001f34 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f001 f867 	bl	8003000 <I2C_Slave_AF>
 8001f32:	e016      	b.n	8001f62 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f3c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f46:	7efb      	ldrb	r3, [r7, #27]
 8001f48:	2b10      	cmp	r3, #16
 8001f4a:	d002      	beq.n	8001f52 <HAL_I2C_ER_IRQHandler+0xf8>
 8001f4c:	7efb      	ldrb	r3, [r7, #27]
 8001f4e:	2b40      	cmp	r3, #64	@ 0x40
 8001f50:	d107      	bne.n	8001f62 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f60:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00d      	beq.n	8001f88 <HAL_I2C_ER_IRQHandler+0x12e>
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d008      	beq.n	8001f88 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	f043 0308 	orr.w	r3, r3, #8
 8001f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001f86:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f001 f8a4 	bl	80030e8 <I2C_ITError>
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	3728      	adds	r7, #40	@ 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800204e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002056:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002062:	2b00      	cmp	r3, #0
 8002064:	d150      	bne.n	8002108 <I2C_MasterTransmit_TXE+0xc8>
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	2b21      	cmp	r3, #33	@ 0x21
 800206a:	d14d      	bne.n	8002108 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b08      	cmp	r3, #8
 8002070:	d01d      	beq.n	80020ae <I2C_MasterTransmit_TXE+0x6e>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b20      	cmp	r3, #32
 8002076:	d01a      	beq.n	80020ae <I2C_MasterTransmit_TXE+0x6e>
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800207e:	d016      	beq.n	80020ae <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800208e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2211      	movs	r2, #17
 8002094:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ff7e 	bl	8001fa8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020ac:	e060      	b.n	8002170 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80020bc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020cc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b40      	cmp	r3, #64	@ 0x40
 80020e6:	d107      	bne.n	80020f8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7fe f95d 	bl	80003b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020f6:	e03b      	b.n	8002170 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff51 	bl	8001fa8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002106:	e033      	b.n	8002170 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	2b21      	cmp	r3, #33	@ 0x21
 800210c:	d005      	beq.n	800211a <I2C_MasterTransmit_TXE+0xda>
 800210e:	7bbb      	ldrb	r3, [r7, #14]
 8002110:	2b40      	cmp	r3, #64	@ 0x40
 8002112:	d12d      	bne.n	8002170 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	2b22      	cmp	r3, #34	@ 0x22
 8002118:	d12a      	bne.n	8002170 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d108      	bne.n	8002136 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002132:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002134:	e01c      	b.n	8002170 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b40      	cmp	r3, #64	@ 0x40
 8002140:	d103      	bne.n	800214a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f88e 	bl	8002264 <I2C_MemoryTransmit_TXE_BTF>
}
 8002148:	e012      	b.n	8002170 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800216e:	e7ff      	b.n	8002170 <I2C_MasterTransmit_TXE+0x130>
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002184:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b21      	cmp	r3, #33	@ 0x21
 8002190:	d164      	bne.n	800225c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d012      	beq.n	80021c2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80021c0:	e04c      	b.n	800225c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d01d      	beq.n	8002204 <I2C_MasterTransmit_BTF+0x8c>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d01a      	beq.n	8002204 <I2C_MasterTransmit_BTF+0x8c>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021d4:	d016      	beq.n	8002204 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80021e4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2211      	movs	r2, #17
 80021ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff fed3 	bl	8001fa8 <HAL_I2C_MasterTxCpltCallback>
}
 8002202:	e02b      	b.n	800225c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002212:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002222:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b40      	cmp	r3, #64	@ 0x40
 800223c:	d107      	bne.n	800224e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe f8b2 	bl	80003b0 <HAL_I2C_MemTxCpltCallback>
}
 800224c:	e006      	b.n	800225c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff fea6 	bl	8001fa8 <HAL_I2C_MasterTxCpltCallback>
}
 800225c:	bf00      	nop
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002272:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002278:	2b00      	cmp	r3, #0
 800227a:	d11d      	bne.n	80022b8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002280:	2b01      	cmp	r3, #1
 8002282:	d10b      	bne.n	800229c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002288:	b2da      	uxtb	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002294:	1c9a      	adds	r2, r3, #2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800229a:	e077      	b.n	800238c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	121b      	asrs	r3, r3, #8
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80022b6:	e069      	b.n	800238c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d10b      	bne.n	80022d8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80022d6:	e059      	b.n	800238c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d152      	bne.n	8002386 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2b22      	cmp	r3, #34	@ 0x22
 80022e4:	d10d      	bne.n	8002302 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022f4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002300:	e044      	b.n	800238c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d015      	beq.n	8002338 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b21      	cmp	r3, #33	@ 0x21
 8002310:	d112      	bne.n	8002338 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002336:	e029      	b.n	800238c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d124      	bne.n	800238c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	2b21      	cmp	r3, #33	@ 0x21
 8002346:	d121      	bne.n	800238c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002356:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002366:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2220      	movs	r2, #32
 8002372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7fe f816 	bl	80003b0 <HAL_I2C_MemTxCpltCallback>
}
 8002384:	e002      	b.n	800238c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff f85e 	bl	8001448 <I2C_Flush_DR>
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b22      	cmp	r3, #34	@ 0x22
 80023a6:	f040 80b9 	bne.w	800251c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ae:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d921      	bls.n	8002402 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	f040 8096 	bne.w	800251c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023fe:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002400:	e08c      	b.n	800251c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002406:	2b02      	cmp	r3, #2
 8002408:	d07f      	beq.n	800250a <I2C_MasterReceive_RXNE+0x176>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d002      	beq.n	8002416 <I2C_MasterReceive_RXNE+0x82>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d179      	bne.n	800250a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f001 fa8a 	bl	8003930 <I2C_WaitOnSTOPRequestThroughIT>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d14c      	bne.n	80024bc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002430:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002440:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b40      	cmp	r3, #64	@ 0x40
 800247a:	d10a      	bne.n	8002492 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fd ff7e 	bl	800038c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002490:	e044      	b.n	800251c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b08      	cmp	r3, #8
 800249e:	d002      	beq.n	80024a6 <I2C_MasterReceive_RXNE+0x112>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b20      	cmp	r3, #32
 80024a4:	d103      	bne.n	80024ae <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80024ac:	e002      	b.n	80024b4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2212      	movs	r2, #18
 80024b2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff fd80 	bl	8001fba <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024ba:	e02f      	b.n	800251c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80024ca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff fd8a 	bl	800201c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002508:	e008      	b.n	800251c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002518:	605a      	str	r2, [r3, #4]
}
 800251a:	e7ff      	b.n	800251c <I2C_MasterReceive_RXNE+0x188>
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002530:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b04      	cmp	r3, #4
 800253a:	d11b      	bne.n	8002574 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800254a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002572:	e0c4      	b.n	80026fe <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b03      	cmp	r3, #3
 800257c:	d129      	bne.n	80025d2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800258c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d00a      	beq.n	80025aa <I2C_MasterReceive_BTF+0x86>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d007      	beq.n	80025aa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025a8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80025d0:	e095      	b.n	80026fe <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d17d      	bne.n	80026d8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d002      	beq.n	80025e8 <I2C_MasterReceive_BTF+0xc4>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	d108      	bne.n	80025fa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e016      	b.n	8002628 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d002      	beq.n	8002606 <I2C_MasterReceive_BTF+0xe2>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d108      	bne.n	8002618 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e007      	b.n	8002628 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002626:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002682:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b40      	cmp	r3, #64	@ 0x40
 8002696:	d10a      	bne.n	80026ae <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fd fe70 	bl	800038c <HAL_I2C_MemRxCpltCallback>
}
 80026ac:	e027      	b.n	80026fe <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d002      	beq.n	80026c2 <I2C_MasterReceive_BTF+0x19e>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d103      	bne.n	80026ca <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80026c8:	e002      	b.n	80026d0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2212      	movs	r2, #18
 80026ce:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fc72 	bl	8001fba <HAL_I2C_MasterRxCpltCallback>
}
 80026d6:	e012      	b.n	80026fe <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b40      	cmp	r3, #64	@ 0x40
 8002718:	d117      	bne.n	800274a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002732:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002734:	e067      	b.n	8002806 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	b2da      	uxtb	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	611a      	str	r2, [r3, #16]
}
 8002748:	e05d      	b.n	8002806 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002752:	d133      	bne.n	80027bc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b21      	cmp	r3, #33	@ 0x21
 800275e:	d109      	bne.n	8002774 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002770:	611a      	str	r2, [r3, #16]
 8002772:	e008      	b.n	8002786 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <I2C_Master_SB+0x92>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	d108      	bne.n	80027aa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800279c:	2b00      	cmp	r3, #0
 800279e:	d032      	beq.n	8002806 <I2C_Master_SB+0x100>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d02d      	beq.n	8002806 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027b8:	605a      	str	r2, [r3, #4]
}
 80027ba:	e024      	b.n	8002806 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10e      	bne.n	80027e2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	11db      	asrs	r3, r3, #7
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f003 0306 	and.w	r3, r3, #6
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f063 030f 	orn	r3, r3, #15
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	611a      	str	r2, [r3, #16]
}
 80027e0:	e011      	b.n	8002806 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d10d      	bne.n	8002806 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	11db      	asrs	r3, r3, #7
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f003 0306 	and.w	r3, r3, #6
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f063 030e 	orn	r3, r3, #14
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	611a      	str	r2, [r3, #16]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281c:	b2da      	uxtb	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <I2C_Master_ADD10+0x26>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002832:	2b00      	cmp	r3, #0
 8002834:	d108      	bne.n	8002848 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00c      	beq.n	8002858 <I2C_Master_ADD10+0x48>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002856:	605a      	str	r2, [r3, #4]
  }
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002862:	b480      	push	{r7}
 8002864:	b091      	sub	sp, #68	@ 0x44
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002870:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002878:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b22      	cmp	r3, #34	@ 0x22
 800288a:	f040 8174 	bne.w	8002b76 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10f      	bne.n	80028b6 <I2C_Master_ADDR+0x54>
 8002896:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800289a:	2b40      	cmp	r3, #64	@ 0x40
 800289c:	d10b      	bne.n	80028b6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289e:	2300      	movs	r3, #0
 80028a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b4:	e16b      	b.n	8002b8e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d11d      	bne.n	80028fa <I2C_Master_ADDR+0x98>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80028c6:	d118      	bne.n	80028fa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c8:	2300      	movs	r3, #0
 80028ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028ec:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80028f8:	e149      	b.n	8002b8e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d113      	bne.n	800292c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002904:	2300      	movs	r3, #0
 8002906:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002918:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	e120      	b.n	8002b6e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b01      	cmp	r3, #1
 8002934:	f040 808a 	bne.w	8002a4c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800293e:	d137      	bne.n	80029b0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800294e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800295a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800295e:	d113      	bne.n	8002988 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800296e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	@ 0x24
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	627b      	str	r3, [r7, #36]	@ 0x24
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	e0f2      	b.n	8002b6e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002988:	2300      	movs	r3, #0
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	623b      	str	r3, [r7, #32]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	623b      	str	r3, [r7, #32]
 800299c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e0de      	b.n	8002b6e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80029b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d02e      	beq.n	8002a14 <I2C_Master_ADDR+0x1b2>
 80029b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d02b      	beq.n	8002a14 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80029bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029be:	2b12      	cmp	r3, #18
 80029c0:	d102      	bne.n	80029c8 <I2C_Master_ADDR+0x166>
 80029c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d125      	bne.n	8002a14 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80029c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d00e      	beq.n	80029ec <I2C_Master_ADDR+0x18a>
 80029ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d00b      	beq.n	80029ec <I2C_Master_ADDR+0x18a>
 80029d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029d6:	2b10      	cmp	r3, #16
 80029d8:	d008      	beq.n	80029ec <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e007      	b.n	80029fc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029fa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	61fb      	str	r3, [r7, #28]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	e0ac      	b.n	8002b6e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a22:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a24:	2300      	movs	r3, #0
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e090      	b.n	8002b6e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d158      	bne.n	8002b08 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d021      	beq.n	8002aa0 <I2C_Master_ADDR+0x23e>
 8002a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d01e      	beq.n	8002aa0 <I2C_Master_ADDR+0x23e>
 8002a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d01b      	beq.n	8002aa0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a76:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e012      	b.n	8002ac6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002aae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ad4:	d14b      	bne.n	8002b6e <I2C_Master_ADDR+0x30c>
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002adc:	d00b      	beq.n	8002af6 <I2C_Master_ADDR+0x294>
 8002ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d008      	beq.n	8002af6 <I2C_Master_ADDR+0x294>
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d005      	beq.n	8002af6 <I2C_Master_ADDR+0x294>
 8002aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d002      	beq.n	8002af6 <I2C_Master_ADDR+0x294>
 8002af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d13b      	bne.n	8002b6e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	e032      	b.n	8002b6e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b16:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b26:	d117      	bne.n	8002b58 <I2C_Master_ADDR+0x2f6>
 8002b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b2e:	d00b      	beq.n	8002b48 <I2C_Master_ADDR+0x2e6>
 8002b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d008      	beq.n	8002b48 <I2C_Master_ADDR+0x2e6>
 8002b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d005      	beq.n	8002b48 <I2C_Master_ADDR+0x2e6>
 8002b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3e:	2b10      	cmp	r3, #16
 8002b40:	d002      	beq.n	8002b48 <I2C_Master_ADDR+0x2e6>
 8002b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d107      	bne.n	8002b58 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002b56:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002b74:	e00b      	b.n	8002b8e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
}
 8002b8c:	e7ff      	b.n	8002b8e <I2C_Master_ADDR+0x32c>
 8002b8e:	bf00      	nop
 8002b90:	3744      	adds	r7, #68	@ 0x44
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ba6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d02b      	beq.n	8002c0a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	781a      	ldrb	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d114      	bne.n	8002c0a <I2C_SlaveTransmit_TXE+0x72>
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b29      	cmp	r3, #41	@ 0x29
 8002be4:	d111      	bne.n	8002c0a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2221      	movs	r2, #33	@ 0x21
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2228      	movs	r2, #40	@ 0x28
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff f9e1 	bl	8001fcc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d011      	beq.n	8002c48 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c60:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d02c      	beq.n	8002cc6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d114      	bne.n	8002cc6 <I2C_SlaveReceive_RXNE+0x74>
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ca0:	d111      	bne.n	8002cc6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cb0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2222      	movs	r2, #34	@ 0x22
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2228      	movs	r2, #40	@ 0x28
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff f98c 	bl	8001fde <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d012      	beq.n	8002d06 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d2a:	2b28      	cmp	r3, #40	@ 0x28
 8002d2c:	d125      	bne.n	8002d7a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d3c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	81bb      	strh	r3, [r7, #12]
 8002d5c:	e002      	b.n	8002d64 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d6c:	89ba      	ldrh	r2, [r7, #12]
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	4619      	mov	r1, r3
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff f93c 	bl	8001ff0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d78:	e00e      	b.n	8002d98 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002dbe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002df8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dfc:	d172      	bne.n	8002ee4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	2b22      	cmp	r3, #34	@ 0x22
 8002e02:	d002      	beq.n	8002e0a <I2C_Slave_STOPF+0x6a>
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e08:	d135      	bne.n	8002e76 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	f043 0204 	orr.w	r2, r3, #4
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe f812 	bl	8000e6c <HAL_DMA_GetState>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d049      	beq.n	8002ee2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e52:	4a69      	ldr	r2, [pc, #420]	@ (8002ff8 <I2C_Slave_STOPF+0x258>)
 8002e54:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd ff8e 	bl	8000d7c <HAL_DMA_Abort_IT>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d03d      	beq.n	8002ee2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e70:	4610      	mov	r0, r2
 8002e72:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e74:	e035      	b.n	8002ee2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f043 0204 	orr.w	r2, r3, #4
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ea8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd ffdc 	bl	8000e6c <HAL_DMA_GetState>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d014      	beq.n	8002ee4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ebe:	4a4e      	ldr	r2, [pc, #312]	@ (8002ff8 <I2C_Slave_STOPF+0x258>)
 8002ec0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd ff58 	bl	8000d7c <HAL_DMA_Abort_IT>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002edc:	4610      	mov	r0, r2
 8002ede:	4798      	blx	r3
 8002ee0:	e000      	b.n	8002ee4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ee2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d03e      	beq.n	8002f6c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d112      	bne.n	8002f22 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2c:	2b40      	cmp	r3, #64	@ 0x40
 8002f2e:	d112      	bne.n	8002f56 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	f043 0204 	orr.w	r2, r3, #4
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f8b7 	bl	80030e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f7a:	e039      	b.n	8002ff0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f80:	d109      	bne.n	8002f96 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2228      	movs	r2, #40	@ 0x28
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff f824 	bl	8001fde <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b28      	cmp	r3, #40	@ 0x28
 8002fa0:	d111      	bne.n	8002fc6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a15      	ldr	r2, [pc, #84]	@ (8002ffc <I2C_Slave_STOPF+0x25c>)
 8002fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff f823 	bl	800200a <HAL_I2C_ListenCpltCallback>
}
 8002fc4:	e014      	b.n	8002ff0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fca:	2b22      	cmp	r3, #34	@ 0x22
 8002fcc:	d002      	beq.n	8002fd4 <I2C_Slave_STOPF+0x234>
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b22      	cmp	r3, #34	@ 0x22
 8002fd2:	d10d      	bne.n	8002ff0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fe fff7 	bl	8001fde <HAL_I2C_SlaveRxCpltCallback>
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	0800351d 	.word	0x0800351d
 8002ffc:	ffff0000 	.word	0xffff0000

08003000 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800300e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003014:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d002      	beq.n	8003022 <I2C_Slave_AF+0x22>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b20      	cmp	r3, #32
 8003020:	d129      	bne.n	8003076 <I2C_Slave_AF+0x76>
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b28      	cmp	r3, #40	@ 0x28
 8003026:	d126      	bne.n	8003076 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a2e      	ldr	r2, [pc, #184]	@ (80030e4 <I2C_Slave_AF+0xe4>)
 800302c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800303c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003046:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003056:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fe ffcb 	bl	800200a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003074:	e031      	b.n	80030da <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b21      	cmp	r3, #33	@ 0x21
 800307a:	d129      	bne.n	80030d0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a19      	ldr	r2, [pc, #100]	@ (80030e4 <I2C_Slave_AF+0xe4>)
 8003080:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2221      	movs	r2, #33	@ 0x21
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030a6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030b0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe f9c0 	bl	8001448 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7fe ff7f 	bl	8001fcc <HAL_I2C_SlaveTxCpltCallback>
}
 80030ce:	e004      	b.n	80030da <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030d8:	615a      	str	r2, [r3, #20]
}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	ffff0000 	.word	0xffff0000

080030e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003100:	7bbb      	ldrb	r3, [r7, #14]
 8003102:	2b10      	cmp	r3, #16
 8003104:	d002      	beq.n	800310c <I2C_ITError+0x24>
 8003106:	7bbb      	ldrb	r3, [r7, #14]
 8003108:	2b40      	cmp	r3, #64	@ 0x40
 800310a:	d10a      	bne.n	8003122 <I2C_ITError+0x3a>
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	2b22      	cmp	r3, #34	@ 0x22
 8003110:	d107      	bne.n	8003122 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003120:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003128:	2b28      	cmp	r3, #40	@ 0x28
 800312a:	d107      	bne.n	800313c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2228      	movs	r2, #40	@ 0x28
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800313a:	e015      	b.n	8003168 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003146:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800314a:	d00a      	beq.n	8003162 <I2C_ITError+0x7a>
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2b60      	cmp	r3, #96	@ 0x60
 8003150:	d007      	beq.n	8003162 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003176:	d162      	bne.n	800323e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003186:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800318c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b01      	cmp	r3, #1
 8003194:	d020      	beq.n	80031d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319a:	4a6a      	ldr	r2, [pc, #424]	@ (8003344 <I2C_ITError+0x25c>)
 800319c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd fdea 	bl	8000d7c <HAL_DMA_Abort_IT>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8089 	beq.w	80032c2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031d2:	4610      	mov	r0, r2
 80031d4:	4798      	blx	r3
 80031d6:	e074      	b.n	80032c2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031dc:	4a59      	ldr	r2, [pc, #356]	@ (8003344 <I2C_ITError+0x25c>)
 80031de:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd fdc9 	bl	8000d7c <HAL_DMA_Abort_IT>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d068      	beq.n	80032c2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fa:	2b40      	cmp	r3, #64	@ 0x40
 80031fc:	d10b      	bne.n	8003216 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003238:	4610      	mov	r0, r2
 800323a:	4798      	blx	r3
 800323c:	e041      	b.n	80032c2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b60      	cmp	r3, #96	@ 0x60
 8003248:	d125      	bne.n	8003296 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003262:	2b40      	cmp	r3, #64	@ 0x40
 8003264:	d10b      	bne.n	800327e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fe fecd 	bl	800202e <HAL_I2C_AbortCpltCallback>
 8003294:	e015      	b.n	80032c2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a0:	2b40      	cmp	r3, #64	@ 0x40
 80032a2:	d10b      	bne.n	80032bc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fe fead 	bl	800201c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10e      	bne.n	80032f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032fe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003306:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b04      	cmp	r3, #4
 8003312:	d113      	bne.n	800333c <I2C_ITError+0x254>
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	2b28      	cmp	r3, #40	@ 0x28
 8003318:	d110      	bne.n	800333c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a0a      	ldr	r2, [pc, #40]	@ (8003348 <I2C_ITError+0x260>)
 800331e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe fe67 	bl	800200a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	0800351d 	.word	0x0800351d
 8003348:	ffff0000 	.word	0xffff0000

0800334c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4603      	mov	r3, r0
 800335c:	817b      	strh	r3, [r7, #10]
 800335e:	460b      	mov	r3, r1
 8003360:	813b      	strh	r3, [r7, #8]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003374:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003384:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	2200      	movs	r2, #0
 800338e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f96a 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00d      	beq.n	80033ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ac:	d103      	bne.n	80033b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e0aa      	b.n	8003510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ba:	897b      	ldrh	r3, [r7, #10]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	6a3a      	ldr	r2, [r7, #32]
 80033ce:	4952      	ldr	r1, [pc, #328]	@ (8003518 <I2C_RequestMemoryRead+0x1cc>)
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f9c5 	bl	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e097      	b.n	8003510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f8:	6a39      	ldr	r1, [r7, #32]
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fa50 	bl	80038a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00d      	beq.n	8003422 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	2b04      	cmp	r3, #4
 800340c:	d107      	bne.n	800341e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800341c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e076      	b.n	8003510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d105      	bne.n	8003434 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003428:	893b      	ldrh	r3, [r7, #8]
 800342a:	b2da      	uxtb	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	611a      	str	r2, [r3, #16]
 8003432:	e021      	b.n	8003478 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003434:	893b      	ldrh	r3, [r7, #8]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	b29b      	uxth	r3, r3
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003444:	6a39      	ldr	r1, [r7, #32]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 fa2a 	bl	80038a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00d      	beq.n	800346e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	2b04      	cmp	r3, #4
 8003458:	d107      	bne.n	800346a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003468:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e050      	b.n	8003510 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800346e:	893b      	ldrh	r3, [r7, #8]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800347a:	6a39      	ldr	r1, [r7, #32]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fa0f 	bl	80038a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00d      	beq.n	80034a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	2b04      	cmp	r3, #4
 800348e:	d107      	bne.n	80034a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800349e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e035      	b.n	8003510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f8d3 	bl	800366c <I2C_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00d      	beq.n	80034e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034da:	d103      	bne.n	80034e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e013      	b.n	8003510 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034e8:	897b      	ldrh	r3, [r7, #10]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	6a3a      	ldr	r2, [r7, #32]
 80034fc:	4906      	ldr	r1, [pc, #24]	@ (8003518 <I2C_RequestMemoryRead+0x1cc>)
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f92e 	bl	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	00010002 	.word	0x00010002

0800351c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003534:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003536:	4b4b      	ldr	r3, [pc, #300]	@ (8003664 <I2C_DMAAbort+0x148>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	08db      	lsrs	r3, r3, #3
 800353c:	4a4a      	ldr	r2, [pc, #296]	@ (8003668 <I2C_DMAAbort+0x14c>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	0a1a      	lsrs	r2, r3, #8
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	00da      	lsls	r2, r3, #3
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003562:	e00a      	b.n	800357a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3b01      	subs	r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003578:	d0ea      	beq.n	8003550 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003586:	2200      	movs	r2, #0
 8003588:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003596:	2200      	movs	r2, #0
 8003598:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2200      	movs	r2, #0
 80035ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035bc:	2200      	movs	r2, #0
 80035be:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035cc:	2200      	movs	r2, #0
 80035ce:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b60      	cmp	r3, #96	@ 0x60
 80035ea:	d10e      	bne.n	800360a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2200      	movs	r2, #0
 8003600:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003602:	6978      	ldr	r0, [r7, #20]
 8003604:	f7fe fd13 	bl	800202e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003608:	e027      	b.n	800365a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800360a:	7cfb      	ldrb	r3, [r7, #19]
 800360c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003610:	2b28      	cmp	r3, #40	@ 0x28
 8003612:	d117      	bne.n	8003644 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003632:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2228      	movs	r2, #40	@ 0x28
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003642:	e007      	b.n	8003654 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003654:	6978      	ldr	r0, [r7, #20]
 8003656:	f7fe fce1 	bl	800201c <HAL_I2C_ErrorCallback>
}
 800365a:	bf00      	nop
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000004 	.word	0x20000004
 8003668:	14f8b589 	.word	0x14f8b589

0800366c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800367c:	e048      	b.n	8003710 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003684:	d044      	beq.n	8003710 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003686:	f7fd fa6b 	bl	8000b60 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d302      	bcc.n	800369c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d139      	bne.n	8003710 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	0c1b      	lsrs	r3, r3, #16
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10d      	bne.n	80036c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	e00c      	b.n	80036dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	43da      	mvns	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d116      	bne.n	8003710 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e023      	b.n	8003758 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	0c1b      	lsrs	r3, r3, #16
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d10d      	bne.n	8003736 <I2C_WaitOnFlagUntilTimeout+0xca>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	43da      	mvns	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	e00c      	b.n	8003750 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	43da      	mvns	r2, r3
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4013      	ands	r3, r2
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	429a      	cmp	r2, r3
 8003754:	d093      	beq.n	800367e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800376e:	e071      	b.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800377a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800377e:	d123      	bne.n	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800378e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003798:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b4:	f043 0204 	orr.w	r2, r3, #4
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e067      	b.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ce:	d041      	beq.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d0:	f7fd f9c6 	bl	8000b60 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d302      	bcc.n	80037e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d136      	bne.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	0c1b      	lsrs	r3, r3, #16
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d10c      	bne.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	43da      	mvns	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4013      	ands	r3, r2
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	e00b      	b.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	43da      	mvns	r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4013      	ands	r3, r2
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d016      	beq.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	f043 0220 	orr.w	r2, r3, #32
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e021      	b.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d10c      	bne.n	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	43da      	mvns	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4013      	ands	r3, r2
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e00b      	b.n	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	43da      	mvns	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf14      	ite	ne
 800388a:	2301      	movne	r3, #1
 800388c:	2300      	moveq	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	f47f af6d 	bne.w	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038ac:	e034      	b.n	8003918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f8cd 	bl	8003a4e <I2C_IsAcknowledgeFailed>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e034      	b.n	8003928 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d028      	beq.n	8003918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7fd f94b 	bl	8000b60 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d302      	bcc.n	80038dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d11d      	bne.n	8003918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e6:	2b80      	cmp	r3, #128	@ 0x80
 80038e8:	d016      	beq.n	8003918 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003904:	f043 0220 	orr.w	r2, r3, #32
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e007      	b.n	8003928 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003922:	2b80      	cmp	r3, #128	@ 0x80
 8003924:	d1c3      	bne.n	80038ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800393c:	4b13      	ldr	r3, [pc, #76]	@ (800398c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	08db      	lsrs	r3, r3, #3
 8003942:	4a13      	ldr	r2, [pc, #76]	@ (8003990 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	0a1a      	lsrs	r2, r3, #8
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3b01      	subs	r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d107      	bne.n	800396e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	f043 0220 	orr.w	r2, r3, #32
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e008      	b.n	8003980 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800397c:	d0e9      	beq.n	8003952 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000004 	.word	0x20000004
 8003990:	14f8b589 	.word	0x14f8b589

08003994 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039a0:	e049      	b.n	8003a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d119      	bne.n	80039e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0210 	mvn.w	r2, #16
 80039b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e030      	b.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e4:	f7fd f8bc 	bl	8000b60 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d302      	bcc.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d11d      	bne.n	8003a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a04:	2b40      	cmp	r3, #64	@ 0x40
 8003a06:	d016      	beq.n	8003a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	f043 0220 	orr.w	r2, r3, #32
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e007      	b.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a40:	2b40      	cmp	r3, #64	@ 0x40
 8003a42:	d1ae      	bne.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a64:	d11b      	bne.n	8003a9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	f043 0204 	orr.w	r2, r3, #4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003aba:	d103      	bne.n	8003ac4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ac2:	e007      	b.n	8003ad4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003acc:	d102      	bne.n	8003ad4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr
	...

08003ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e272      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8087 	beq.w	8003c0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b00:	4b92      	ldr	r3, [pc, #584]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d00c      	beq.n	8003b26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b0c:	4b8f      	ldr	r3, [pc, #572]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d112      	bne.n	8003b3e <HAL_RCC_OscConfig+0x5e>
 8003b18:	4b8c      	ldr	r3, [pc, #560]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b24:	d10b      	bne.n	8003b3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b26:	4b89      	ldr	r3, [pc, #548]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d06c      	beq.n	8003c0c <HAL_RCC_OscConfig+0x12c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d168      	bne.n	8003c0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e24c      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b46:	d106      	bne.n	8003b56 <HAL_RCC_OscConfig+0x76>
 8003b48:	4b80      	ldr	r3, [pc, #512]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a7f      	ldr	r2, [pc, #508]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	e02e      	b.n	8003bb4 <HAL_RCC_OscConfig+0xd4>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x98>
 8003b5e:	4b7b      	ldr	r3, [pc, #492]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a7a      	ldr	r2, [pc, #488]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b78      	ldr	r3, [pc, #480]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a77      	ldr	r2, [pc, #476]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e01d      	b.n	8003bb4 <HAL_RCC_OscConfig+0xd4>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0xbc>
 8003b82:	4b72      	ldr	r3, [pc, #456]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a71      	ldr	r2, [pc, #452]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	4b6f      	ldr	r3, [pc, #444]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a6e      	ldr	r2, [pc, #440]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e00b      	b.n	8003bb4 <HAL_RCC_OscConfig+0xd4>
 8003b9c:	4b6b      	ldr	r3, [pc, #428]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a6a      	ldr	r2, [pc, #424]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	4b68      	ldr	r3, [pc, #416]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a67      	ldr	r2, [pc, #412]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d013      	beq.n	8003be4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7fc ffd0 	bl	8000b60 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fc ffcc 	bl	8000b60 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	@ 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e200      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	4b5d      	ldr	r3, [pc, #372]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0xe4>
 8003be2:	e014      	b.n	8003c0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fc ffbc 	bl	8000b60 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fc ffb8 	bl	8000b60 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	@ 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e1ec      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfe:	4b53      	ldr	r3, [pc, #332]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x10c>
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d063      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c1a:	4b4c      	ldr	r3, [pc, #304]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00b      	beq.n	8003c3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c26:	4b49      	ldr	r3, [pc, #292]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d11c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x18c>
 8003c32:	4b46      	ldr	r3, [pc, #280]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d116      	bne.n	8003c6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3e:	4b43      	ldr	r3, [pc, #268]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_RCC_OscConfig+0x176>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d001      	beq.n	8003c56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e1c0      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c56:	4b3d      	ldr	r3, [pc, #244]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4939      	ldr	r1, [pc, #228]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6a:	e03a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d020      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c74:	4b36      	ldr	r3, [pc, #216]	@ (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7a:	f7fc ff71 	bl	8000b60 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c82:	f7fc ff6d 	bl	8000b60 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e1a1      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c94:	4b2d      	ldr	r3, [pc, #180]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4927      	ldr	r1, [pc, #156]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	600b      	str	r3, [r1, #0]
 8003cb4:	e015      	b.n	8003ce2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb6:	4b26      	ldr	r3, [pc, #152]	@ (8003d50 <HAL_RCC_OscConfig+0x270>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fc ff50 	bl	8000b60 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc4:	f7fc ff4c 	bl	8000b60 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e180      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d03a      	beq.n	8003d64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d019      	beq.n	8003d2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf6:	4b17      	ldr	r3, [pc, #92]	@ (8003d54 <HAL_RCC_OscConfig+0x274>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfc:	f7fc ff30 	bl	8000b60 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d04:	f7fc ff2c 	bl	8000b60 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e160      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <HAL_RCC_OscConfig+0x26c>)
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d22:	2001      	movs	r0, #1
 8003d24:	f000 fafe 	bl	8004324 <RCC_Delay>
 8003d28:	e01c      	b.n	8003d64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d54 <HAL_RCC_OscConfig+0x274>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d30:	f7fc ff16 	bl	8000b60 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d36:	e00f      	b.n	8003d58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d38:	f7fc ff12 	bl	8000b60 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d908      	bls.n	8003d58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e146      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	42420000 	.word	0x42420000
 8003d54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d58:	4b92      	ldr	r3, [pc, #584]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e9      	bne.n	8003d38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80a6 	beq.w	8003ebe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d72:	2300      	movs	r3, #0
 8003d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d76:	4b8b      	ldr	r3, [pc, #556]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10d      	bne.n	8003d9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d82:	4b88      	ldr	r3, [pc, #544]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4a87      	ldr	r2, [pc, #540]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d8c:	61d3      	str	r3, [r2, #28]
 8003d8e:	4b85      	ldr	r3, [pc, #532]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9e:	4b82      	ldr	r3, [pc, #520]	@ (8003fa8 <HAL_RCC_OscConfig+0x4c8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d118      	bne.n	8003ddc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003daa:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa8 <HAL_RCC_OscConfig+0x4c8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a7e      	ldr	r2, [pc, #504]	@ (8003fa8 <HAL_RCC_OscConfig+0x4c8>)
 8003db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db6:	f7fc fed3 	bl	8000b60 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dbe:	f7fc fecf 	bl	8000b60 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b64      	cmp	r3, #100	@ 0x64
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e103      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd0:	4b75      	ldr	r3, [pc, #468]	@ (8003fa8 <HAL_RCC_OscConfig+0x4c8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d106      	bne.n	8003df2 <HAL_RCC_OscConfig+0x312>
 8003de4:	4b6f      	ldr	r3, [pc, #444]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003dea:	f043 0301 	orr.w	r3, r3, #1
 8003dee:	6213      	str	r3, [r2, #32]
 8003df0:	e02d      	b.n	8003e4e <HAL_RCC_OscConfig+0x36e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10c      	bne.n	8003e14 <HAL_RCC_OscConfig+0x334>
 8003dfa:	4b6a      	ldr	r3, [pc, #424]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	4a69      	ldr	r2, [pc, #420]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	6213      	str	r3, [r2, #32]
 8003e06:	4b67      	ldr	r3, [pc, #412]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	4a66      	ldr	r2, [pc, #408]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	f023 0304 	bic.w	r3, r3, #4
 8003e10:	6213      	str	r3, [r2, #32]
 8003e12:	e01c      	b.n	8003e4e <HAL_RCC_OscConfig+0x36e>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b05      	cmp	r3, #5
 8003e1a:	d10c      	bne.n	8003e36 <HAL_RCC_OscConfig+0x356>
 8003e1c:	4b61      	ldr	r3, [pc, #388]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	4a60      	ldr	r2, [pc, #384]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	f043 0304 	orr.w	r3, r3, #4
 8003e26:	6213      	str	r3, [r2, #32]
 8003e28:	4b5e      	ldr	r3, [pc, #376]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4a5d      	ldr	r2, [pc, #372]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	6213      	str	r3, [r2, #32]
 8003e34:	e00b      	b.n	8003e4e <HAL_RCC_OscConfig+0x36e>
 8003e36:	4b5b      	ldr	r3, [pc, #364]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	4a5a      	ldr	r2, [pc, #360]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	f023 0301 	bic.w	r3, r3, #1
 8003e40:	6213      	str	r3, [r2, #32]
 8003e42:	4b58      	ldr	r3, [pc, #352]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	4a57      	ldr	r2, [pc, #348]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003e48:	f023 0304 	bic.w	r3, r3, #4
 8003e4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d015      	beq.n	8003e82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e56:	f7fc fe83 	bl	8000b60 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5c:	e00a      	b.n	8003e74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5e:	f7fc fe7f 	bl	8000b60 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e0b1      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e74:	4b4b      	ldr	r3, [pc, #300]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0ee      	beq.n	8003e5e <HAL_RCC_OscConfig+0x37e>
 8003e80:	e014      	b.n	8003eac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e82:	f7fc fe6d 	bl	8000b60 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7fc fe69 	bl	8000b60 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e09b      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea0:	4b40      	ldr	r3, [pc, #256]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1ee      	bne.n	8003e8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d105      	bne.n	8003ebe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb2:	4b3c      	ldr	r3, [pc, #240]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	4a3b      	ldr	r2, [pc, #236]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ebc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8087 	beq.w	8003fd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec8:	4b36      	ldr	r3, [pc, #216]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 030c 	and.w	r3, r3, #12
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d061      	beq.n	8003f98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d146      	bne.n	8003f6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003edc:	4b33      	ldr	r3, [pc, #204]	@ (8003fac <HAL_RCC_OscConfig+0x4cc>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee2:	f7fc fe3d 	bl	8000b60 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eea:	f7fc fe39 	bl	8000b60 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e06d      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003efc:	4b29      	ldr	r3, [pc, #164]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1f0      	bne.n	8003eea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f10:	d108      	bne.n	8003f24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f12:	4b24      	ldr	r3, [pc, #144]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	4921      	ldr	r1, [pc, #132]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f24:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a19      	ldr	r1, [r3, #32]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	430b      	orrs	r3, r1
 8003f36:	491b      	ldr	r1, [pc, #108]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fac <HAL_RCC_OscConfig+0x4cc>)
 8003f3e:	2201      	movs	r2, #1
 8003f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f42:	f7fc fe0d 	bl	8000b60 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4a:	f7fc fe09 	bl	8000b60 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e03d      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f5c:	4b11      	ldr	r3, [pc, #68]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x46a>
 8003f68:	e035      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6a:	4b10      	ldr	r3, [pc, #64]	@ (8003fac <HAL_RCC_OscConfig+0x4cc>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f70:	f7fc fdf6 	bl	8000b60 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f78:	f7fc fdf2 	bl	8000b60 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e026      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f8a:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x498>
 8003f96:	e01e      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d107      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e019      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40007000 	.word	0x40007000
 8003fac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <HAL_RCC_OscConfig+0x500>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40021000 	.word	0x40021000

08003fe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0d0      	b.n	800419a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff8:	4b6a      	ldr	r3, [pc, #424]	@ (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d910      	bls.n	8004028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004006:	4b67      	ldr	r3, [pc, #412]	@ (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f023 0207 	bic.w	r2, r3, #7
 800400e:	4965      	ldr	r1, [pc, #404]	@ (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	4313      	orrs	r3, r2
 8004014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004016:	4b63      	ldr	r3, [pc, #396]	@ (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0b8      	b.n	800419a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004040:	4b59      	ldr	r3, [pc, #356]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4a58      	ldr	r2, [pc, #352]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004046:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800404a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004058:	4b53      	ldr	r3, [pc, #332]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4a52      	ldr	r2, [pc, #328]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800405e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004062:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004064:	4b50      	ldr	r3, [pc, #320]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	494d      	ldr	r1, [pc, #308]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d040      	beq.n	8004104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	4b47      	ldr	r3, [pc, #284]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d115      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e07f      	b.n	800419a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a2:	4b41      	ldr	r3, [pc, #260]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e073      	b.n	800419a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b2:	4b3d      	ldr	r3, [pc, #244]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e06b      	b.n	800419a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040c2:	4b39      	ldr	r3, [pc, #228]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f023 0203 	bic.w	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	4936      	ldr	r1, [pc, #216]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040d4:	f7fc fd44 	bl	8000b60 <HAL_GetTick>
 80040d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040da:	e00a      	b.n	80040f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040dc:	f7fc fd40 	bl	8000b60 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e053      	b.n	800419a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f2:	4b2d      	ldr	r3, [pc, #180]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 020c 	and.w	r2, r3, #12
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	429a      	cmp	r2, r3
 8004102:	d1eb      	bne.n	80040dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004104:	4b27      	ldr	r3, [pc, #156]	@ (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d210      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004112:	4b24      	ldr	r3, [pc, #144]	@ (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 0207 	bic.w	r2, r3, #7
 800411a:	4922      	ldr	r1, [pc, #136]	@ (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b20      	ldr	r3, [pc, #128]	@ (80041a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e032      	b.n	800419a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004140:	4b19      	ldr	r3, [pc, #100]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4916      	ldr	r1, [pc, #88]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800415e:	4b12      	ldr	r3, [pc, #72]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	490e      	ldr	r1, [pc, #56]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800416e:	4313      	orrs	r3, r2
 8004170:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004172:	f000 f821 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8004176:	4602      	mov	r2, r0
 8004178:	4b0b      	ldr	r3, [pc, #44]	@ (80041a8 <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	490a      	ldr	r1, [pc, #40]	@ (80041ac <HAL_RCC_ClockConfig+0x1c8>)
 8004184:	5ccb      	ldrb	r3, [r1, r3]
 8004186:	fa22 f303 	lsr.w	r3, r2, r3
 800418a:	4a09      	ldr	r2, [pc, #36]	@ (80041b0 <HAL_RCC_ClockConfig+0x1cc>)
 800418c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800418e:	4b09      	ldr	r3, [pc, #36]	@ (80041b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fc fbdc 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40022000 	.word	0x40022000
 80041a8:	40021000 	.word	0x40021000
 80041ac:	08006408 	.word	0x08006408
 80041b0:	20000004 	.word	0x20000004
 80041b4:	20000008 	.word	0x20000008

080041b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	2300      	movs	r3, #0
 80041cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041d2:	4b1e      	ldr	r3, [pc, #120]	@ (800424c <HAL_RCC_GetSysClockFreq+0x94>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d002      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0x30>
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d003      	beq.n	80041ee <HAL_RCC_GetSysClockFreq+0x36>
 80041e6:	e027      	b.n	8004238 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041e8:	4b19      	ldr	r3, [pc, #100]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ea:	613b      	str	r3, [r7, #16]
      break;
 80041ec:	e027      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	0c9b      	lsrs	r3, r3, #18
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	4a17      	ldr	r2, [pc, #92]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041f8:	5cd3      	ldrb	r3, [r2, r3]
 80041fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d010      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004206:	4b11      	ldr	r3, [pc, #68]	@ (800424c <HAL_RCC_GetSysClockFreq+0x94>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	0c5b      	lsrs	r3, r3, #17
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	4a11      	ldr	r2, [pc, #68]	@ (8004258 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004212:	5cd3      	ldrb	r3, [r2, r3]
 8004214:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a0d      	ldr	r2, [pc, #52]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x98>)
 800421a:	fb03 f202 	mul.w	r2, r3, r2
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	fbb2 f3f3 	udiv	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	e004      	b.n	8004232 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a0c      	ldr	r2, [pc, #48]	@ (800425c <HAL_RCC_GetSysClockFreq+0xa4>)
 800422c:	fb02 f303 	mul.w	r3, r2, r3
 8004230:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	613b      	str	r3, [r7, #16]
      break;
 8004236:	e002      	b.n	800423e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004238:	4b05      	ldr	r3, [pc, #20]	@ (8004250 <HAL_RCC_GetSysClockFreq+0x98>)
 800423a:	613b      	str	r3, [r7, #16]
      break;
 800423c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800423e:	693b      	ldr	r3, [r7, #16]
}
 8004240:	4618      	mov	r0, r3
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000
 8004250:	007a1200 	.word	0x007a1200
 8004254:	08006420 	.word	0x08006420
 8004258:	08006430 	.word	0x08006430
 800425c:	003d0900 	.word	0x003d0900

08004260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004264:	4b02      	ldr	r3, [pc, #8]	@ (8004270 <HAL_RCC_GetHCLKFreq+0x10>)
 8004266:	681b      	ldr	r3, [r3, #0]
}
 8004268:	4618      	mov	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	20000004 	.word	0x20000004

08004274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004278:	f7ff fff2 	bl	8004260 <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4903      	ldr	r1, [pc, #12]	@ (8004298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000
 8004298:	08006418 	.word	0x08006418

0800429c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042a0:	f7ff ffde 	bl	8004260 <HAL_RCC_GetHCLKFreq>
 80042a4:	4602      	mov	r2, r0
 80042a6:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	0adb      	lsrs	r3, r3, #11
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	4903      	ldr	r1, [pc, #12]	@ (80042c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042b2:	5ccb      	ldrb	r3, [r1, r3]
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40021000 	.word	0x40021000
 80042c0:	08006418 	.word	0x08006418

080042c4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	220f      	movs	r2, #15
 80042d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042d4:	4b11      	ldr	r3, [pc, #68]	@ (800431c <HAL_RCC_GetClockConfig+0x58>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0203 	and.w	r2, r3, #3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042e0:	4b0e      	ldr	r3, [pc, #56]	@ (800431c <HAL_RCC_GetClockConfig+0x58>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <HAL_RCC_GetClockConfig+0x58>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80042f8:	4b08      	ldr	r3, [pc, #32]	@ (800431c <HAL_RCC_GetClockConfig+0x58>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	08db      	lsrs	r3, r3, #3
 80042fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004306:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <HAL_RCC_GetClockConfig+0x5c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0207 	and.w	r2, r3, #7
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr
 800431c:	40021000 	.word	0x40021000
 8004320:	40022000 	.word	0x40022000

08004324 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800432c:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <RCC_Delay+0x34>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a0a      	ldr	r2, [pc, #40]	@ (800435c <RCC_Delay+0x38>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	0a5b      	lsrs	r3, r3, #9
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004340:	bf00      	nop
  }
  while (Delay --);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1e5a      	subs	r2, r3, #1
 8004346:	60fa      	str	r2, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f9      	bne.n	8004340 <RCC_Delay+0x1c>
}
 800434c:	bf00      	nop
 800434e:	bf00      	nop
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr
 8004358:	20000004 	.word	0x20000004
 800435c:	10624dd3 	.word	0x10624dd3

08004360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e041      	b.n	80043f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f839 	bl	80043fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	4619      	mov	r1, r3
 800439e:	4610      	mov	r0, r2
 80043a0:	f000 fb58 	bl	8004a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	d001      	beq.n	8004428 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e03a      	b.n	800449e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a18      	ldr	r2, [pc, #96]	@ (80044a8 <HAL_TIM_Base_Start_IT+0x98>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00e      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x58>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004452:	d009      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x58>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a14      	ldr	r2, [pc, #80]	@ (80044ac <HAL_TIM_Base_Start_IT+0x9c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x58>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a13      	ldr	r2, [pc, #76]	@ (80044b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d111      	bne.n	800448c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b06      	cmp	r3, #6
 8004478:	d010      	beq.n	800449c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 0201 	orr.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448a:	e007      	b.n	800449c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800

080044b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e041      	b.n	800454a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fc f9e4 	bl	80008a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3304      	adds	r3, #4
 80044f0:	4619      	mov	r1, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	f000 faae 	bl	8004a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b0c      	cmp	r3, #12
 8004566:	d841      	bhi.n	80045ec <HAL_TIM_PWM_Stop_IT+0x98>
 8004568:	a201      	add	r2, pc, #4	@ (adr r2, 8004570 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	080045a5 	.word	0x080045a5
 8004574:	080045ed 	.word	0x080045ed
 8004578:	080045ed 	.word	0x080045ed
 800457c:	080045ed 	.word	0x080045ed
 8004580:	080045b7 	.word	0x080045b7
 8004584:	080045ed 	.word	0x080045ed
 8004588:	080045ed 	.word	0x080045ed
 800458c:	080045ed 	.word	0x080045ed
 8004590:	080045c9 	.word	0x080045c9
 8004594:	080045ed 	.word	0x080045ed
 8004598:	080045ed 	.word	0x080045ed
 800459c:	080045ed 	.word	0x080045ed
 80045a0:	080045db 	.word	0x080045db
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0202 	bic.w	r2, r2, #2
 80045b2:	60da      	str	r2, [r3, #12]
      break;
 80045b4:	e01d      	b.n	80045f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0204 	bic.w	r2, r2, #4
 80045c4:	60da      	str	r2, [r3, #12]
      break;
 80045c6:	e014      	b.n	80045f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0208 	bic.w	r2, r2, #8
 80045d6:	60da      	str	r2, [r3, #12]
      break;
 80045d8:	e00b      	b.n	80045f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0210 	bic.w	r2, r2, #16
 80045e8:	60da      	str	r2, [r3, #12]
      break;
 80045ea:	e002      	b.n	80045f2 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	73fb      	strb	r3, [r7, #15]
      break;
 80045f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d157      	bne.n	80046a8 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2200      	movs	r2, #0
 80045fe:	6839      	ldr	r1, [r7, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fc1d 	bl	8004e40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a2a      	ldr	r2, [pc, #168]	@ (80046b4 <HAL_TIM_PWM_Stop_IT+0x160>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d117      	bne.n	8004640 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6a1a      	ldr	r2, [r3, #32]
 8004616:	f241 1311 	movw	r3, #4369	@ 0x1111
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10f      	bne.n	8004640 <HAL_TIM_PWM_Stop_IT+0xec>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6a1a      	ldr	r2, [r3, #32]
 8004626:	f240 4344 	movw	r3, #1092	@ 0x444
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d107      	bne.n	8004640 <HAL_TIM_PWM_Stop_IT+0xec>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800463e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6a1a      	ldr	r2, [r3, #32]
 8004646:	f241 1311 	movw	r3, #4369	@ 0x1111
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10f      	bne.n	8004670 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6a1a      	ldr	r2, [r3, #32]
 8004656:	f240 4344 	movw	r3, #1092	@ 0x444
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d107      	bne.n	8004670 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d104      	bne.n	8004680 <HAL_TIM_PWM_Stop_IT+0x12c>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800467e:	e013      	b.n	80046a8 <HAL_TIM_PWM_Stop_IT+0x154>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b04      	cmp	r3, #4
 8004684:	d104      	bne.n	8004690 <HAL_TIM_PWM_Stop_IT+0x13c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800468e:	e00b      	b.n	80046a8 <HAL_TIM_PWM_Stop_IT+0x154>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b08      	cmp	r3, #8
 8004694:	d104      	bne.n	80046a0 <HAL_TIM_PWM_Stop_IT+0x14c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800469e:	e003      	b.n	80046a8 <HAL_TIM_PWM_Stop_IT+0x154>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40012c00 	.word	0x40012c00

080046b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d020      	beq.n	800471c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01b      	beq.n	800471c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0202 	mvn.w	r2, #2
 80046ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f993 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 8004708:	e005      	b.n	8004716 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f986 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7fb fd1d 	bl	8000150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d020      	beq.n	8004768 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01b      	beq.n	8004768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0204 	mvn.w	r2, #4
 8004738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2202      	movs	r2, #2
 800473e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f96d 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 8004754:	e005      	b.n	8004762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f960 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fb fcf7 	bl	8000150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d020      	beq.n	80047b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01b      	beq.n	80047b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0208 	mvn.w	r2, #8
 8004784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2204      	movs	r2, #4
 800478a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f947 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 80047a0:	e005      	b.n	80047ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f93a 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7fb fcd1 	bl	8000150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d020      	beq.n	8004800 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01b      	beq.n	8004800 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0210 	mvn.w	r2, #16
 80047d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2208      	movs	r2, #8
 80047d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f921 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 80047ec:	e005      	b.n	80047fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f914 	bl	8004a1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7fb fcab 	bl	8000150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00c      	beq.n	8004824 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f06f 0201 	mvn.w	r2, #1
 800481c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fb ffa4 	bl	800076c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00c      	beq.n	8004848 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fb87 	bl	8004f56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00c      	beq.n	800486c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f8ea 	bl	8004a40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00c      	beq.n	8004890 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0220 	mvn.w	r2, #32
 8004888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fb5a 	bl	8004f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004890:	bf00      	nop
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d101      	bne.n	80048b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e0ae      	b.n	8004a14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b0c      	cmp	r3, #12
 80048c2:	f200 809f 	bhi.w	8004a04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048c6:	a201      	add	r2, pc, #4	@ (adr r2, 80048cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048cc:	08004901 	.word	0x08004901
 80048d0:	08004a05 	.word	0x08004a05
 80048d4:	08004a05 	.word	0x08004a05
 80048d8:	08004a05 	.word	0x08004a05
 80048dc:	08004941 	.word	0x08004941
 80048e0:	08004a05 	.word	0x08004a05
 80048e4:	08004a05 	.word	0x08004a05
 80048e8:	08004a05 	.word	0x08004a05
 80048ec:	08004983 	.word	0x08004983
 80048f0:	08004a05 	.word	0x08004a05
 80048f4:	08004a05 	.word	0x08004a05
 80048f8:	08004a05 	.word	0x08004a05
 80048fc:	080049c3 	.word	0x080049c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f912 	bl	8004b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0208 	orr.w	r2, r2, #8
 800491a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0204 	bic.w	r2, r2, #4
 800492a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6999      	ldr	r1, [r3, #24]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	619a      	str	r2, [r3, #24]
      break;
 800493e:	e064      	b.n	8004a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 f958 	bl	8004bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800495a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800496a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6999      	ldr	r1, [r3, #24]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	021a      	lsls	r2, r3, #8
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	619a      	str	r2, [r3, #24]
      break;
 8004980:	e043      	b.n	8004a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	4618      	mov	r0, r3
 800498a:	f000 f9a1 	bl	8004cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0208 	orr.w	r2, r2, #8
 800499c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69da      	ldr	r2, [r3, #28]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0204 	bic.w	r2, r2, #4
 80049ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69d9      	ldr	r1, [r3, #28]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	61da      	str	r2, [r3, #28]
      break;
 80049c0:	e023      	b.n	8004a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68b9      	ldr	r1, [r7, #8]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 f9eb 	bl	8004da4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69da      	ldr	r2, [r3, #28]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69da      	ldr	r2, [r3, #28]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69d9      	ldr	r1, [r3, #28]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	021a      	lsls	r2, r3, #8
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	61da      	str	r2, [r3, #28]
      break;
 8004a02:	e002      	b.n	8004a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	75fb      	strb	r3, [r7, #23]
      break;
 8004a08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr

08004a2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr

08004a40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr
	...

08004a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a2f      	ldr	r2, [pc, #188]	@ (8004b24 <TIM_Base_SetConfig+0xd0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00b      	beq.n	8004a84 <TIM_Base_SetConfig+0x30>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a72:	d007      	beq.n	8004a84 <TIM_Base_SetConfig+0x30>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a2c      	ldr	r2, [pc, #176]	@ (8004b28 <TIM_Base_SetConfig+0xd4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_Base_SetConfig+0x30>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a2b      	ldr	r2, [pc, #172]	@ (8004b2c <TIM_Base_SetConfig+0xd8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d108      	bne.n	8004a96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a22      	ldr	r2, [pc, #136]	@ (8004b24 <TIM_Base_SetConfig+0xd0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00b      	beq.n	8004ab6 <TIM_Base_SetConfig+0x62>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa4:	d007      	beq.n	8004ab6 <TIM_Base_SetConfig+0x62>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8004b28 <TIM_Base_SetConfig+0xd4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d003      	beq.n	8004ab6 <TIM_Base_SetConfig+0x62>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8004b2c <TIM_Base_SetConfig+0xd8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d108      	bne.n	8004ac8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a0d      	ldr	r2, [pc, #52]	@ (8004b24 <TIM_Base_SetConfig+0xd0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d103      	bne.n	8004afc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f023 0201 	bic.w	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	611a      	str	r2, [r3, #16]
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	40000400 	.word	0x40000400
 8004b2c:	40000800 	.word	0x40000800

08004b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f023 0201 	bic.w	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f023 0302 	bic.w	r3, r3, #2
 8004b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf8 <TIM_OC1_SetConfig+0xc8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d10c      	bne.n	8004ba6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f023 0308 	bic.w	r3, r3, #8
 8004b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f023 0304 	bic.w	r3, r3, #4
 8004ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a13      	ldr	r2, [pc, #76]	@ (8004bf8 <TIM_OC1_SetConfig+0xc8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d111      	bne.n	8004bd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	621a      	str	r2, [r3, #32]
}
 8004bec:	bf00      	nop
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40012c00 	.word	0x40012c00

08004bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f023 0210 	bic.w	r2, r3, #16
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f023 0320 	bic.w	r3, r3, #32
 8004c46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a1d      	ldr	r2, [pc, #116]	@ (8004ccc <TIM_OC2_SetConfig+0xd0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d10d      	bne.n	8004c78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a14      	ldr	r2, [pc, #80]	@ (8004ccc <TIM_OC2_SetConfig+0xd0>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d113      	bne.n	8004ca8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	621a      	str	r2, [r3, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr
 8004ccc:	40012c00 	.word	0x40012c00

08004cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0303 	bic.w	r3, r3, #3
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a1d      	ldr	r2, [pc, #116]	@ (8004da0 <TIM_OC3_SetConfig+0xd0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d10d      	bne.n	8004d4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a14      	ldr	r2, [pc, #80]	@ (8004da0 <TIM_OC3_SetConfig+0xd0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d113      	bne.n	8004d7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	621a      	str	r2, [r3, #32]
}
 8004d94:	bf00      	nop
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40012c00 	.word	0x40012c00

08004da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	021b      	lsls	r3, r3, #8
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	031b      	lsls	r3, r3, #12
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8004e3c <TIM_OC4_SetConfig+0x98>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d109      	bne.n	8004e18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	019b      	lsls	r3, r3, #6
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	621a      	str	r2, [r3, #32]
}
 8004e32:	bf00      	nop
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr
 8004e3c:	40012c00 	.word	0x40012c00

08004e40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	2201      	movs	r2, #1
 8004e54:	fa02 f303 	lsl.w	r3, r2, r3
 8004e58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1a      	ldr	r2, [r3, #32]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	43db      	mvns	r3, r3
 8004e62:	401a      	ands	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a1a      	ldr	r2, [r3, #32]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	fa01 f303 	lsl.w	r3, r1, r3
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	621a      	str	r2, [r3, #32]
}
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e046      	b.n	8004f2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a16      	ldr	r2, [pc, #88]	@ (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eec:	d009      	beq.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a12      	ldr	r2, [pc, #72]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a10      	ldr	r2, [pc, #64]	@ (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d10c      	bne.n	8004f1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800

08004f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr

08004f56 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr

08004f68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f7a:	2b84      	cmp	r3, #132	@ 0x84
 8004f7c:	d005      	beq.n	8004f8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4413      	add	r3, r2
 8004f86:	3303      	adds	r3, #3
 8004f88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr

08004f96 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f9a:	f000 fa75 	bl	8005488 <vTaskStartScheduler>
  
  return osOK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fa6:	b089      	sub	sp, #36	@ 0x24
 8004fa8:	af04      	add	r7, sp, #16
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d020      	beq.n	8004ff8 <osThreadCreate+0x54>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d01c      	beq.n	8004ff8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685c      	ldr	r4, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691e      	ldr	r6, [r3, #16]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff ffc9 	bl	8004f68 <makeFreeRtosPriority>
 8004fd6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fe0:	9202      	str	r2, [sp, #8]
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	9100      	str	r1, [sp, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	4632      	mov	r2, r6
 8004fea:	4629      	mov	r1, r5
 8004fec:	4620      	mov	r0, r4
 8004fee:	f000 f89c 	bl	800512a <xTaskCreateStatic>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	e01c      	b.n	8005032 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685c      	ldr	r4, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005004:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff ffab 	bl	8004f68 <makeFreeRtosPriority>
 8005012:	4602      	mov	r2, r0
 8005014:	f107 030c 	add.w	r3, r7, #12
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	9200      	str	r2, [sp, #0]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	4632      	mov	r2, r6
 8005020:	4629      	mov	r1, r5
 8005022:	4620      	mov	r0, r4
 8005024:	f000 f8e1 	bl	80051ea <xTaskCreate>
 8005028:	4603      	mov	r3, r0
 800502a:	2b01      	cmp	r3, #1
 800502c:	d001      	beq.n	8005032 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800502e:	2300      	movs	r3, #0
 8005030:	e000      	b.n	8005034 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005032:	68fb      	ldr	r3, [r7, #12]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800503c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f103 0208 	add.w	r2, r3, #8
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f04f 32ff 	mov.w	r2, #4294967295
 8005054:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f103 0208 	add.w	r2, r3, #8
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f103 0208 	add.w	r2, r3, #8
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr

0800507a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr

08005092 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005092:	b480      	push	{r7}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	601a      	str	r2, [r3, #0]
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr

080050d8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6892      	ldr	r2, [r2, #8]
 80050ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6852      	ldr	r2, [r2, #4]
 80050f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d103      	bne.n	800510c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	1e5a      	subs	r2, r3, #1
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr

0800512a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800512a:	b580      	push	{r7, lr}
 800512c:	b08e      	sub	sp, #56	@ 0x38
 800512e:	af04      	add	r7, sp, #16
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
 8005136:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10b      	bne.n	8005156 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	e7fd      	b.n	8005152 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10b      	bne.n	8005174 <xTaskCreateStatic+0x4a>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	61fb      	str	r3, [r7, #28]
}
 800516e:	bf00      	nop
 8005170:	bf00      	nop
 8005172:	e7fd      	b.n	8005170 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005174:	23a0      	movs	r3, #160	@ 0xa0
 8005176:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2ba0      	cmp	r3, #160	@ 0xa0
 800517c:	d00b      	beq.n	8005196 <xTaskCreateStatic+0x6c>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	61bb      	str	r3, [r7, #24]
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	e7fd      	b.n	8005192 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005196:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01e      	beq.n	80051dc <xTaskCreateStatic+0xb2>
 800519e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01b      	beq.n	80051dc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051ac:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051b6:	2300      	movs	r3, #0
 80051b8:	9303      	str	r3, [sp, #12]
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	9302      	str	r3, [sp, #8]
 80051be:	f107 0314 	add.w	r3, r7, #20
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 f850 	bl	8005274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051d6:	f000 f8ed 	bl	80053b4 <prvAddNewTaskToReadyList>
 80051da:	e001      	b.n	80051e0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051e0:	697b      	ldr	r3, [r7, #20]
	}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3728      	adds	r7, #40	@ 0x28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b08c      	sub	sp, #48	@ 0x30
 80051ee:	af04      	add	r7, sp, #16
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	603b      	str	r3, [r7, #0]
 80051f6:	4613      	mov	r3, r2
 80051f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fe06 	bl	8005e10 <pvPortMalloc>
 8005204:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00e      	beq.n	800522a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800520c:	20a0      	movs	r0, #160	@ 0xa0
 800520e:	f000 fdff 	bl	8005e10 <pvPortMalloc>
 8005212:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005220:	e005      	b.n	800522e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005222:	6978      	ldr	r0, [r7, #20]
 8005224:	f000 fec2 	bl	8005fac <vPortFree>
 8005228:	e001      	b.n	800522e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800522a:	2300      	movs	r3, #0
 800522c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d017      	beq.n	8005264 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800523c:	88fa      	ldrh	r2, [r7, #6]
 800523e:	2300      	movs	r3, #0
 8005240:	9303      	str	r3, [sp, #12]
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	9302      	str	r3, [sp, #8]
 8005246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005248:	9301      	str	r3, [sp, #4]
 800524a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 f80e 	bl	8005274 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005258:	69f8      	ldr	r0, [r7, #28]
 800525a:	f000 f8ab 	bl	80053b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800525e:	2301      	movs	r3, #1
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	e002      	b.n	800526a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005264:	f04f 33ff 	mov.w	r3, #4294967295
 8005268:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800526a:	69bb      	ldr	r3, [r7, #24]
	}
 800526c:	4618      	mov	r0, r3
 800526e:	3720      	adds	r7, #32
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800528c:	3b01      	subs	r3, #1
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f023 0307 	bic.w	r3, r3, #7
 800529a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00b      	beq.n	80052be <prvInitialiseNewTask+0x4a>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	617b      	str	r3, [r7, #20]
}
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	e7fd      	b.n	80052ba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01f      	beq.n	8005304 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052c4:	2300      	movs	r3, #0
 80052c6:	61fb      	str	r3, [r7, #28]
 80052c8:	e012      	b.n	80052f0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	7819      	ldrb	r1, [r3, #0]
 80052d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	3334      	adds	r3, #52	@ 0x34
 80052da:	460a      	mov	r2, r1
 80052dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	4413      	add	r3, r2
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d006      	beq.n	80052f8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3301      	adds	r3, #1
 80052ee:	61fb      	str	r3, [r7, #28]
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	2b0f      	cmp	r3, #15
 80052f4:	d9e9      	bls.n	80052ca <prvInitialiseNewTask+0x56>
 80052f6:	e000      	b.n	80052fa <prvInitialiseNewTask+0x86>
			{
				break;
 80052f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005302:	e003      	b.n	800530c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800530c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530e:	2b06      	cmp	r3, #6
 8005310:	d901      	bls.n	8005316 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005312:	2306      	movs	r3, #6
 8005314:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005318:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800531a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800531c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005320:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005324:	2200      	movs	r2, #0
 8005326:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532a:	3304      	adds	r3, #4
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff fea4 	bl	800507a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005334:	3318      	adds	r3, #24
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff fe9f 	bl	800507a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800533c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005340:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005344:	f1c3 0207 	rsb	r2, r3, #7
 8005348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800534c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005350:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005354:	2200      	movs	r2, #0
 8005356:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	2200      	movs	r2, #0
 800535e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	334c      	adds	r3, #76	@ 0x4c
 8005366:	224c      	movs	r2, #76	@ 0x4c
 8005368:	2100      	movs	r1, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f000 ff3c 	bl	80061e8 <memset>
 8005370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005372:	4a0d      	ldr	r2, [pc, #52]	@ (80053a8 <prvInitialiseNewTask+0x134>)
 8005374:	651a      	str	r2, [r3, #80]	@ 0x50
 8005376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005378:	4a0c      	ldr	r2, [pc, #48]	@ (80053ac <prvInitialiseNewTask+0x138>)
 800537a:	655a      	str	r2, [r3, #84]	@ 0x54
 800537c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537e:	4a0c      	ldr	r2, [pc, #48]	@ (80053b0 <prvInitialiseNewTask+0x13c>)
 8005380:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	68f9      	ldr	r1, [r7, #12]
 8005386:	69b8      	ldr	r0, [r7, #24]
 8005388:	f000 fb8c 	bl	8005aa4 <pxPortInitialiseStack>
 800538c:	4602      	mov	r2, r0
 800538e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005390:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800539c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800539e:	bf00      	nop
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	200011fc 	.word	0x200011fc
 80053ac:	20001264 	.word	0x20001264
 80053b0:	200012cc 	.word	0x200012cc

080053b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053bc:	f000 fc66 	bl	8005c8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053c0:	4b2a      	ldr	r3, [pc, #168]	@ (800546c <prvAddNewTaskToReadyList+0xb8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	4a29      	ldr	r2, [pc, #164]	@ (800546c <prvAddNewTaskToReadyList+0xb8>)
 80053c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053ca:	4b29      	ldr	r3, [pc, #164]	@ (8005470 <prvAddNewTaskToReadyList+0xbc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053d2:	4a27      	ldr	r2, [pc, #156]	@ (8005470 <prvAddNewTaskToReadyList+0xbc>)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053d8:	4b24      	ldr	r3, [pc, #144]	@ (800546c <prvAddNewTaskToReadyList+0xb8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d110      	bne.n	8005402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053e0:	f000 fa9c 	bl	800591c <prvInitialiseTaskLists>
 80053e4:	e00d      	b.n	8005402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053e6:	4b23      	ldr	r3, [pc, #140]	@ (8005474 <prvAddNewTaskToReadyList+0xc0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053ee:	4b20      	ldr	r3, [pc, #128]	@ (8005470 <prvAddNewTaskToReadyList+0xbc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d802      	bhi.n	8005402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005470 <prvAddNewTaskToReadyList+0xbc>)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005402:	4b1d      	ldr	r3, [pc, #116]	@ (8005478 <prvAddNewTaskToReadyList+0xc4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3301      	adds	r3, #1
 8005408:	4a1b      	ldr	r2, [pc, #108]	@ (8005478 <prvAddNewTaskToReadyList+0xc4>)
 800540a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005410:	2201      	movs	r2, #1
 8005412:	409a      	lsls	r2, r3
 8005414:	4b19      	ldr	r3, [pc, #100]	@ (800547c <prvAddNewTaskToReadyList+0xc8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4313      	orrs	r3, r2
 800541a:	4a18      	ldr	r2, [pc, #96]	@ (800547c <prvAddNewTaskToReadyList+0xc8>)
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4a15      	ldr	r2, [pc, #84]	@ (8005480 <prvAddNewTaskToReadyList+0xcc>)
 800542c:	441a      	add	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3304      	adds	r3, #4
 8005432:	4619      	mov	r1, r3
 8005434:	4610      	mov	r0, r2
 8005436:	f7ff fe2c 	bl	8005092 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800543a:	f000 fc57 	bl	8005cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800543e:	4b0d      	ldr	r3, [pc, #52]	@ (8005474 <prvAddNewTaskToReadyList+0xc0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00e      	beq.n	8005464 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005446:	4b0a      	ldr	r3, [pc, #40]	@ (8005470 <prvAddNewTaskToReadyList+0xbc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005450:	429a      	cmp	r2, r3
 8005452:	d207      	bcs.n	8005464 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005454:	4b0b      	ldr	r3, [pc, #44]	@ (8005484 <prvAddNewTaskToReadyList+0xd0>)
 8005456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	200005a8 	.word	0x200005a8
 8005470:	200004a8 	.word	0x200004a8
 8005474:	200005b4 	.word	0x200005b4
 8005478:	200005c4 	.word	0x200005c4
 800547c:	200005b0 	.word	0x200005b0
 8005480:	200004ac 	.word	0x200004ac
 8005484:	e000ed04 	.word	0xe000ed04

08005488 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	@ 0x28
 800548c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005492:	2300      	movs	r3, #0
 8005494:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005496:	463a      	mov	r2, r7
 8005498:	1d39      	adds	r1, r7, #4
 800549a:	f107 0308 	add.w	r3, r7, #8
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fa ff08 	bl	80002b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	9202      	str	r2, [sp, #8]
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	2300      	movs	r3, #0
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	2300      	movs	r3, #0
 80054b4:	460a      	mov	r2, r1
 80054b6:	4921      	ldr	r1, [pc, #132]	@ (800553c <vTaskStartScheduler+0xb4>)
 80054b8:	4821      	ldr	r0, [pc, #132]	@ (8005540 <vTaskStartScheduler+0xb8>)
 80054ba:	f7ff fe36 	bl	800512a <xTaskCreateStatic>
 80054be:	4603      	mov	r3, r0
 80054c0:	4a20      	ldr	r2, [pc, #128]	@ (8005544 <vTaskStartScheduler+0xbc>)
 80054c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005544 <vTaskStartScheduler+0xbc>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054cc:	2301      	movs	r3, #1
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e001      	b.n	80054d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d11b      	bne.n	8005514 <vTaskStartScheduler+0x8c>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	613b      	str	r3, [r7, #16]
}
 80054ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054f0:	4b15      	ldr	r3, [pc, #84]	@ (8005548 <vTaskStartScheduler+0xc0>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	334c      	adds	r3, #76	@ 0x4c
 80054f6:	4a15      	ldr	r2, [pc, #84]	@ (800554c <vTaskStartScheduler+0xc4>)
 80054f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054fa:	4b15      	ldr	r3, [pc, #84]	@ (8005550 <vTaskStartScheduler+0xc8>)
 80054fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005500:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005502:	4b14      	ldr	r3, [pc, #80]	@ (8005554 <vTaskStartScheduler+0xcc>)
 8005504:	2201      	movs	r2, #1
 8005506:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005508:	4b13      	ldr	r3, [pc, #76]	@ (8005558 <vTaskStartScheduler+0xd0>)
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800550e:	f000 fb4b 	bl	8005ba8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005512:	e00f      	b.n	8005534 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	d10b      	bne.n	8005534 <vTaskStartScheduler+0xac>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	60fb      	str	r3, [r7, #12]
}
 800552e:	bf00      	nop
 8005530:	bf00      	nop
 8005532:	e7fd      	b.n	8005530 <vTaskStartScheduler+0xa8>
}
 8005534:	bf00      	nop
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	08006400 	.word	0x08006400
 8005540:	080058ed 	.word	0x080058ed
 8005544:	200005cc 	.word	0x200005cc
 8005548:	200004a8 	.word	0x200004a8
 800554c:	20000014 	.word	0x20000014
 8005550:	200005c8 	.word	0x200005c8
 8005554:	200005b4 	.word	0x200005b4
 8005558:	200005ac 	.word	0x200005ac

0800555c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005560:	4b04      	ldr	r3, [pc, #16]	@ (8005574 <vTaskSuspendAll+0x18>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3301      	adds	r3, #1
 8005566:	4a03      	ldr	r2, [pc, #12]	@ (8005574 <vTaskSuspendAll+0x18>)
 8005568:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800556a:	bf00      	nop
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	200005d0 	.word	0x200005d0

08005578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005582:	2300      	movs	r3, #0
 8005584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005586:	4b42      	ldr	r3, [pc, #264]	@ (8005690 <xTaskResumeAll+0x118>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10b      	bne.n	80055a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	603b      	str	r3, [r7, #0]
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055a6:	f000 fb71 	bl	8005c8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055aa:	4b39      	ldr	r3, [pc, #228]	@ (8005690 <xTaskResumeAll+0x118>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	4a37      	ldr	r2, [pc, #220]	@ (8005690 <xTaskResumeAll+0x118>)
 80055b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055b4:	4b36      	ldr	r3, [pc, #216]	@ (8005690 <xTaskResumeAll+0x118>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d161      	bne.n	8005680 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055bc:	4b35      	ldr	r3, [pc, #212]	@ (8005694 <xTaskResumeAll+0x11c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d05d      	beq.n	8005680 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055c4:	e02e      	b.n	8005624 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c6:	4b34      	ldr	r3, [pc, #208]	@ (8005698 <xTaskResumeAll+0x120>)
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3318      	adds	r3, #24
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff fd80 	bl	80050d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3304      	adds	r3, #4
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff fd7b 	bl	80050d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e6:	2201      	movs	r2, #1
 80055e8:	409a      	lsls	r2, r3
 80055ea:	4b2c      	ldr	r3, [pc, #176]	@ (800569c <xTaskResumeAll+0x124>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	4a2a      	ldr	r2, [pc, #168]	@ (800569c <xTaskResumeAll+0x124>)
 80055f2:	6013      	str	r3, [r2, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4a27      	ldr	r2, [pc, #156]	@ (80056a0 <xTaskResumeAll+0x128>)
 8005602:	441a      	add	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3304      	adds	r3, #4
 8005608:	4619      	mov	r1, r3
 800560a:	4610      	mov	r0, r2
 800560c:	f7ff fd41 	bl	8005092 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005614:	4b23      	ldr	r3, [pc, #140]	@ (80056a4 <xTaskResumeAll+0x12c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800561e:	4b22      	ldr	r3, [pc, #136]	@ (80056a8 <xTaskResumeAll+0x130>)
 8005620:	2201      	movs	r2, #1
 8005622:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005624:	4b1c      	ldr	r3, [pc, #112]	@ (8005698 <xTaskResumeAll+0x120>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1cc      	bne.n	80055c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005632:	f000 fa17 	bl	8005a64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005636:	4b1d      	ldr	r3, [pc, #116]	@ (80056ac <xTaskResumeAll+0x134>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d010      	beq.n	8005664 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005642:	f000 f837 	bl	80056b4 <xTaskIncrementTick>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800564c:	4b16      	ldr	r3, [pc, #88]	@ (80056a8 <xTaskResumeAll+0x130>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3b01      	subs	r3, #1
 8005656:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1f1      	bne.n	8005642 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800565e:	4b13      	ldr	r3, [pc, #76]	@ (80056ac <xTaskResumeAll+0x134>)
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005664:	4b10      	ldr	r3, [pc, #64]	@ (80056a8 <xTaskResumeAll+0x130>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d009      	beq.n	8005680 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800566c:	2301      	movs	r3, #1
 800566e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005670:	4b0f      	ldr	r3, [pc, #60]	@ (80056b0 <xTaskResumeAll+0x138>)
 8005672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005680:	f000 fb34 	bl	8005cec <vPortExitCritical>

	return xAlreadyYielded;
 8005684:	68bb      	ldr	r3, [r7, #8]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	200005d0 	.word	0x200005d0
 8005694:	200005a8 	.word	0x200005a8
 8005698:	20000568 	.word	0x20000568
 800569c:	200005b0 	.word	0x200005b0
 80056a0:	200004ac 	.word	0x200004ac
 80056a4:	200004a8 	.word	0x200004a8
 80056a8:	200005bc 	.word	0x200005bc
 80056ac:	200005b8 	.word	0x200005b8
 80056b0:	e000ed04 	.word	0xe000ed04

080056b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056be:	4b4f      	ldr	r3, [pc, #316]	@ (80057fc <xTaskIncrementTick+0x148>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f040 808f 	bne.w	80057e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005800 <xTaskIncrementTick+0x14c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056d0:	4a4b      	ldr	r2, [pc, #300]	@ (8005800 <xTaskIncrementTick+0x14c>)
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d121      	bne.n	8005720 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80056dc:	4b49      	ldr	r3, [pc, #292]	@ (8005804 <xTaskIncrementTick+0x150>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00b      	beq.n	80056fe <xTaskIncrementTick+0x4a>
	__asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	603b      	str	r3, [r7, #0]
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	e7fd      	b.n	80056fa <xTaskIncrementTick+0x46>
 80056fe:	4b41      	ldr	r3, [pc, #260]	@ (8005804 <xTaskIncrementTick+0x150>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	4b40      	ldr	r3, [pc, #256]	@ (8005808 <xTaskIncrementTick+0x154>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a3e      	ldr	r2, [pc, #248]	@ (8005804 <xTaskIncrementTick+0x150>)
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	4a3e      	ldr	r2, [pc, #248]	@ (8005808 <xTaskIncrementTick+0x154>)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	4b3e      	ldr	r3, [pc, #248]	@ (800580c <xTaskIncrementTick+0x158>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3301      	adds	r3, #1
 8005718:	4a3c      	ldr	r2, [pc, #240]	@ (800580c <xTaskIncrementTick+0x158>)
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	f000 f9a2 	bl	8005a64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005720:	4b3b      	ldr	r3, [pc, #236]	@ (8005810 <xTaskIncrementTick+0x15c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	429a      	cmp	r2, r3
 8005728:	d348      	bcc.n	80057bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800572a:	4b36      	ldr	r3, [pc, #216]	@ (8005804 <xTaskIncrementTick+0x150>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d104      	bne.n	800573e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005734:	4b36      	ldr	r3, [pc, #216]	@ (8005810 <xTaskIncrementTick+0x15c>)
 8005736:	f04f 32ff 	mov.w	r2, #4294967295
 800573a:	601a      	str	r2, [r3, #0]
					break;
 800573c:	e03e      	b.n	80057bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800573e:	4b31      	ldr	r3, [pc, #196]	@ (8005804 <xTaskIncrementTick+0x150>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	429a      	cmp	r2, r3
 8005754:	d203      	bcs.n	800575e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005756:	4a2e      	ldr	r2, [pc, #184]	@ (8005810 <xTaskIncrementTick+0x15c>)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800575c:	e02e      	b.n	80057bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	3304      	adds	r3, #4
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff fcb8 	bl	80050d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	3318      	adds	r3, #24
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff fcaf 	bl	80050d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	2201      	movs	r2, #1
 8005780:	409a      	lsls	r2, r3
 8005782:	4b24      	ldr	r3, [pc, #144]	@ (8005814 <xTaskIncrementTick+0x160>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4313      	orrs	r3, r2
 8005788:	4a22      	ldr	r2, [pc, #136]	@ (8005814 <xTaskIncrementTick+0x160>)
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4a1f      	ldr	r2, [pc, #124]	@ (8005818 <xTaskIncrementTick+0x164>)
 800579a:	441a      	add	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f7ff fc75 	bl	8005092 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ac:	4b1b      	ldr	r3, [pc, #108]	@ (800581c <xTaskIncrementTick+0x168>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d3b9      	bcc.n	800572a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80057b6:	2301      	movs	r3, #1
 80057b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ba:	e7b6      	b.n	800572a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057bc:	4b17      	ldr	r3, [pc, #92]	@ (800581c <xTaskIncrementTick+0x168>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c2:	4915      	ldr	r1, [pc, #84]	@ (8005818 <xTaskIncrementTick+0x164>)
 80057c4:	4613      	mov	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d901      	bls.n	80057d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80057d4:	2301      	movs	r3, #1
 80057d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057d8:	4b11      	ldr	r3, [pc, #68]	@ (8005820 <xTaskIncrementTick+0x16c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d007      	beq.n	80057f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e004      	b.n	80057f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005824 <xTaskIncrementTick+0x170>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3301      	adds	r3, #1
 80057ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005824 <xTaskIncrementTick+0x170>)
 80057ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057f0:	697b      	ldr	r3, [r7, #20]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	200005d0 	.word	0x200005d0
 8005800:	200005ac 	.word	0x200005ac
 8005804:	20000560 	.word	0x20000560
 8005808:	20000564 	.word	0x20000564
 800580c:	200005c0 	.word	0x200005c0
 8005810:	200005c8 	.word	0x200005c8
 8005814:	200005b0 	.word	0x200005b0
 8005818:	200004ac 	.word	0x200004ac
 800581c:	200004a8 	.word	0x200004a8
 8005820:	200005bc 	.word	0x200005bc
 8005824:	200005b8 	.word	0x200005b8

08005828 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800582e:	4b29      	ldr	r3, [pc, #164]	@ (80058d4 <vTaskSwitchContext+0xac>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005836:	4b28      	ldr	r3, [pc, #160]	@ (80058d8 <vTaskSwitchContext+0xb0>)
 8005838:	2201      	movs	r2, #1
 800583a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800583c:	e045      	b.n	80058ca <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800583e:	4b26      	ldr	r3, [pc, #152]	@ (80058d8 <vTaskSwitchContext+0xb0>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005844:	4b25      	ldr	r3, [pc, #148]	@ (80058dc <vTaskSwitchContext+0xb4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	fab3 f383 	clz	r3, r3
 8005850:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005852:	7afb      	ldrb	r3, [r7, #11]
 8005854:	f1c3 031f 	rsb	r3, r3, #31
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	4921      	ldr	r1, [pc, #132]	@ (80058e0 <vTaskSwitchContext+0xb8>)
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	440b      	add	r3, r1
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <vTaskSwitchContext+0x5e>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	607b      	str	r3, [r7, #4]
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	e7fd      	b.n	8005882 <vTaskSwitchContext+0x5a>
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4a13      	ldr	r2, [pc, #76]	@ (80058e0 <vTaskSwitchContext+0xb8>)
 8005892:	4413      	add	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	3308      	adds	r3, #8
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d104      	bne.n	80058b6 <vTaskSwitchContext+0x8e>
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4a09      	ldr	r2, [pc, #36]	@ (80058e4 <vTaskSwitchContext+0xbc>)
 80058be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058c0:	4b08      	ldr	r3, [pc, #32]	@ (80058e4 <vTaskSwitchContext+0xbc>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	334c      	adds	r3, #76	@ 0x4c
 80058c6:	4a08      	ldr	r2, [pc, #32]	@ (80058e8 <vTaskSwitchContext+0xc0>)
 80058c8:	6013      	str	r3, [r2, #0]
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr
 80058d4:	200005d0 	.word	0x200005d0
 80058d8:	200005bc 	.word	0x200005bc
 80058dc:	200005b0 	.word	0x200005b0
 80058e0:	200004ac 	.word	0x200004ac
 80058e4:	200004a8 	.word	0x200004a8
 80058e8:	20000014 	.word	0x20000014

080058ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058f4:	f000 f852 	bl	800599c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058f8:	4b06      	ldr	r3, [pc, #24]	@ (8005914 <prvIdleTask+0x28>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d9f9      	bls.n	80058f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005900:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <prvIdleTask+0x2c>)
 8005902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005910:	e7f0      	b.n	80058f4 <prvIdleTask+0x8>
 8005912:	bf00      	nop
 8005914:	200004ac 	.word	0x200004ac
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005922:	2300      	movs	r3, #0
 8005924:	607b      	str	r3, [r7, #4]
 8005926:	e00c      	b.n	8005942 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4a12      	ldr	r2, [pc, #72]	@ (800597c <prvInitialiseTaskLists+0x60>)
 8005934:	4413      	add	r3, r2
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fb80 	bl	800503c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3301      	adds	r3, #1
 8005940:	607b      	str	r3, [r7, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b06      	cmp	r3, #6
 8005946:	d9ef      	bls.n	8005928 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005948:	480d      	ldr	r0, [pc, #52]	@ (8005980 <prvInitialiseTaskLists+0x64>)
 800594a:	f7ff fb77 	bl	800503c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800594e:	480d      	ldr	r0, [pc, #52]	@ (8005984 <prvInitialiseTaskLists+0x68>)
 8005950:	f7ff fb74 	bl	800503c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005954:	480c      	ldr	r0, [pc, #48]	@ (8005988 <prvInitialiseTaskLists+0x6c>)
 8005956:	f7ff fb71 	bl	800503c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800595a:	480c      	ldr	r0, [pc, #48]	@ (800598c <prvInitialiseTaskLists+0x70>)
 800595c:	f7ff fb6e 	bl	800503c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005960:	480b      	ldr	r0, [pc, #44]	@ (8005990 <prvInitialiseTaskLists+0x74>)
 8005962:	f7ff fb6b 	bl	800503c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005966:	4b0b      	ldr	r3, [pc, #44]	@ (8005994 <prvInitialiseTaskLists+0x78>)
 8005968:	4a05      	ldr	r2, [pc, #20]	@ (8005980 <prvInitialiseTaskLists+0x64>)
 800596a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800596c:	4b0a      	ldr	r3, [pc, #40]	@ (8005998 <prvInitialiseTaskLists+0x7c>)
 800596e:	4a05      	ldr	r2, [pc, #20]	@ (8005984 <prvInitialiseTaskLists+0x68>)
 8005970:	601a      	str	r2, [r3, #0]
}
 8005972:	bf00      	nop
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	200004ac 	.word	0x200004ac
 8005980:	20000538 	.word	0x20000538
 8005984:	2000054c 	.word	0x2000054c
 8005988:	20000568 	.word	0x20000568
 800598c:	2000057c 	.word	0x2000057c
 8005990:	20000594 	.word	0x20000594
 8005994:	20000560 	.word	0x20000560
 8005998:	20000564 	.word	0x20000564

0800599c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059a2:	e019      	b.n	80059d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059a4:	f000 f972 	bl	8005c8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a8:	4b10      	ldr	r3, [pc, #64]	@ (80059ec <prvCheckTasksWaitingTermination+0x50>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7ff fb8f 	bl	80050d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059ba:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <prvCheckTasksWaitingTermination+0x54>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3b01      	subs	r3, #1
 80059c0:	4a0b      	ldr	r2, [pc, #44]	@ (80059f0 <prvCheckTasksWaitingTermination+0x54>)
 80059c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059c4:	4b0b      	ldr	r3, [pc, #44]	@ (80059f4 <prvCheckTasksWaitingTermination+0x58>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	4a0a      	ldr	r2, [pc, #40]	@ (80059f4 <prvCheckTasksWaitingTermination+0x58>)
 80059cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059ce:	f000 f98d 	bl	8005cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f810 	bl	80059f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059d8:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <prvCheckTasksWaitingTermination+0x58>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e1      	bne.n	80059a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	2000057c 	.word	0x2000057c
 80059f0:	200005a8 	.word	0x200005a8
 80059f4:	20000590 	.word	0x20000590

080059f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	334c      	adds	r3, #76	@ 0x4c
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 fbf7 	bl	80061f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d108      	bne.n	8005a26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fac7 	bl	8005fac <vPortFree>
				vPortFree( pxTCB );
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fac4 	bl	8005fac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a24:	e019      	b.n	8005a5a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d103      	bne.n	8005a38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fabb 	bl	8005fac <vPortFree>
	}
 8005a36:	e010      	b.n	8005a5a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d00b      	beq.n	8005a5a <prvDeleteTCB+0x62>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	60fb      	str	r3, [r7, #12]
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	e7fd      	b.n	8005a56 <prvDeleteTCB+0x5e>
	}
 8005a5a:	bf00      	nop
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a9c <prvResetNextTaskUnblockTime+0x38>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d104      	bne.n	8005a7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a74:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa0 <prvResetNextTaskUnblockTime+0x3c>)
 8005a76:	f04f 32ff 	mov.w	r2, #4294967295
 8005a7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a7c:	e008      	b.n	8005a90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a7e:	4b07      	ldr	r3, [pc, #28]	@ (8005a9c <prvResetNextTaskUnblockTime+0x38>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4a04      	ldr	r2, [pc, #16]	@ (8005aa0 <prvResetNextTaskUnblockTime+0x3c>)
 8005a8e:	6013      	str	r3, [r2, #0]
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	20000560 	.word	0x20000560
 8005aa0:	200005c8 	.word	0x200005c8

08005aa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3b04      	subs	r3, #4
 8005ab4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005abc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3b04      	subs	r3, #4
 8005ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f023 0201 	bic.w	r2, r3, #1
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	3b04      	subs	r3, #4
 8005ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ad4:	4a08      	ldr	r2, [pc, #32]	@ (8005af8 <pxPortInitialiseStack+0x54>)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3b14      	subs	r3, #20
 8005ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3b20      	subs	r3, #32
 8005aea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005aec:	68fb      	ldr	r3, [r7, #12]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bc80      	pop	{r7}
 8005af6:	4770      	bx	lr
 8005af8:	08005afd 	.word	0x08005afd

08005afc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b06:	4b12      	ldr	r3, [pc, #72]	@ (8005b50 <prvTaskExitError+0x54>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0e:	d00b      	beq.n	8005b28 <prvTaskExitError+0x2c>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	60fb      	str	r3, [r7, #12]
}
 8005b22:	bf00      	nop
 8005b24:	bf00      	nop
 8005b26:	e7fd      	b.n	8005b24 <prvTaskExitError+0x28>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	60bb      	str	r3, [r7, #8]
}
 8005b3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b3c:	bf00      	nop
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0fc      	beq.n	8005b3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr
 8005b50:	20000010 	.word	0x20000010
	...

08005b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b60:	4b07      	ldr	r3, [pc, #28]	@ (8005b80 <pxCurrentTCBConst2>)
 8005b62:	6819      	ldr	r1, [r3, #0]
 8005b64:	6808      	ldr	r0, [r1, #0]
 8005b66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005b6a:	f380 8809 	msr	PSP, r0
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f04f 0000 	mov.w	r0, #0
 8005b76:	f380 8811 	msr	BASEPRI, r0
 8005b7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005b7e:	4770      	bx	lr

08005b80 <pxCurrentTCBConst2>:
 8005b80:	200004a8 	.word	0x200004a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop

08005b88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005b88:	4806      	ldr	r0, [pc, #24]	@ (8005ba4 <prvPortStartFirstTask+0x1c>)
 8005b8a:	6800      	ldr	r0, [r0, #0]
 8005b8c:	6800      	ldr	r0, [r0, #0]
 8005b8e:	f380 8808 	msr	MSP, r0
 8005b92:	b662      	cpsie	i
 8005b94:	b661      	cpsie	f
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	df00      	svc	0
 8005ba0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ba2:	bf00      	nop
 8005ba4:	e000ed08 	.word	0xe000ed08

08005ba8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bae:	4b32      	ldr	r3, [pc, #200]	@ (8005c78 <xPortStartScheduler+0xd0>)
 8005bb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	22ff      	movs	r2, #255	@ 0xff
 8005bbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8005c7c <xPortStartScheduler+0xd4>)
 8005bd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8005c80 <xPortStartScheduler+0xd8>)
 8005bd8:	2207      	movs	r2, #7
 8005bda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bdc:	e009      	b.n	8005bf2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005bde:	4b28      	ldr	r3, [pc, #160]	@ (8005c80 <xPortStartScheduler+0xd8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	4a26      	ldr	r2, [pc, #152]	@ (8005c80 <xPortStartScheduler+0xd8>)
 8005be6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bfa:	2b80      	cmp	r3, #128	@ 0x80
 8005bfc:	d0ef      	beq.n	8005bde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bfe:	4b20      	ldr	r3, [pc, #128]	@ (8005c80 <xPortStartScheduler+0xd8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f1c3 0307 	rsb	r3, r3, #7
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d00b      	beq.n	8005c22 <xPortStartScheduler+0x7a>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	60bb      	str	r3, [r7, #8]
}
 8005c1c:	bf00      	nop
 8005c1e:	bf00      	nop
 8005c20:	e7fd      	b.n	8005c1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c22:	4b17      	ldr	r3, [pc, #92]	@ (8005c80 <xPortStartScheduler+0xd8>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	4a15      	ldr	r2, [pc, #84]	@ (8005c80 <xPortStartScheduler+0xd8>)
 8005c2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c2c:	4b14      	ldr	r3, [pc, #80]	@ (8005c80 <xPortStartScheduler+0xd8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c34:	4a12      	ldr	r2, [pc, #72]	@ (8005c80 <xPortStartScheduler+0xd8>)
 8005c36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c40:	4b10      	ldr	r3, [pc, #64]	@ (8005c84 <xPortStartScheduler+0xdc>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a0f      	ldr	r2, [pc, #60]	@ (8005c84 <xPortStartScheduler+0xdc>)
 8005c46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c84 <xPortStartScheduler+0xdc>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a0c      	ldr	r2, [pc, #48]	@ (8005c84 <xPortStartScheduler+0xdc>)
 8005c52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005c56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c58:	f000 f8b8 	bl	8005dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c88 <xPortStartScheduler+0xe0>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c62:	f7ff ff91 	bl	8005b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c66:	f7ff fddf 	bl	8005828 <vTaskSwitchContext>
	prvTaskExitError();
 8005c6a:	f7ff ff47 	bl	8005afc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	e000e400 	.word	0xe000e400
 8005c7c:	200005d4 	.word	0x200005d4
 8005c80:	200005d8 	.word	0x200005d8
 8005c84:	e000ed20 	.word	0xe000ed20
 8005c88:	20000010 	.word	0x20000010

08005c8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	607b      	str	r3, [r7, #4]
}
 8005ca4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce4 <vPortEnterCritical+0x58>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3301      	adds	r3, #1
 8005cac:	4a0d      	ldr	r2, [pc, #52]	@ (8005ce4 <vPortEnterCritical+0x58>)
 8005cae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce4 <vPortEnterCritical+0x58>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d110      	bne.n	8005cda <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce8 <vPortEnterCritical+0x5c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <vPortEnterCritical+0x4e>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	603b      	str	r3, [r7, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	e7fd      	b.n	8005cd6 <vPortEnterCritical+0x4a>
	}
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bc80      	pop	{r7}
 8005ce2:	4770      	bx	lr
 8005ce4:	20000010 	.word	0x20000010
 8005ce8:	e000ed04 	.word	0xe000ed04

08005cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cf2:	4b12      	ldr	r3, [pc, #72]	@ (8005d3c <vPortExitCritical+0x50>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10b      	bne.n	8005d12 <vPortExitCritical+0x26>
	__asm volatile
 8005cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfe:	f383 8811 	msr	BASEPRI, r3
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	607b      	str	r3, [r7, #4]
}
 8005d0c:	bf00      	nop
 8005d0e:	bf00      	nop
 8005d10:	e7fd      	b.n	8005d0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d12:	4b0a      	ldr	r3, [pc, #40]	@ (8005d3c <vPortExitCritical+0x50>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	4a08      	ldr	r2, [pc, #32]	@ (8005d3c <vPortExitCritical+0x50>)
 8005d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d1c:	4b07      	ldr	r3, [pc, #28]	@ (8005d3c <vPortExitCritical+0x50>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <vPortExitCritical+0x44>
 8005d24:	2300      	movs	r3, #0
 8005d26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000010 	.word	0x20000010

08005d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d40:	f3ef 8009 	mrs	r0, PSP
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	4b0d      	ldr	r3, [pc, #52]	@ (8005d80 <pxCurrentTCBConst>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d50:	6010      	str	r0, [r2, #0]
 8005d52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005d56:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005d5a:	f380 8811 	msr	BASEPRI, r0
 8005d5e:	f7ff fd63 	bl	8005828 <vTaskSwitchContext>
 8005d62:	f04f 0000 	mov.w	r0, #0
 8005d66:	f380 8811 	msr	BASEPRI, r0
 8005d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005d6e:	6819      	ldr	r1, [r3, #0]
 8005d70:	6808      	ldr	r0, [r1, #0]
 8005d72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d76:	f380 8809 	msr	PSP, r0
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	4770      	bx	lr

08005d80 <pxCurrentTCBConst>:
 8005d80:	200004a8 	.word	0x200004a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop

08005d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	607b      	str	r3, [r7, #4]
}
 8005da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005da2:	f7ff fc87 	bl	80056b4 <xTaskIncrementTick>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dac:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <SysTick_Handler+0x40>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	2300      	movs	r3, #0
 8005db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f383 8811 	msr	BASEPRI, r3
}
 8005dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	e000ed04 	.word	0xe000ed04

08005dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8005dfc <vPortSetupTimerInterrupt+0x30>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005e00 <vPortSetupTimerInterrupt+0x34>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ddc:	4b09      	ldr	r3, [pc, #36]	@ (8005e04 <vPortSetupTimerInterrupt+0x38>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a09      	ldr	r2, [pc, #36]	@ (8005e08 <vPortSetupTimerInterrupt+0x3c>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	4a08      	ldr	r2, [pc, #32]	@ (8005e0c <vPortSetupTimerInterrupt+0x40>)
 8005dea:	3b01      	subs	r3, #1
 8005dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dee:	4b03      	ldr	r3, [pc, #12]	@ (8005dfc <vPortSetupTimerInterrupt+0x30>)
 8005df0:	2207      	movs	r2, #7
 8005df2:	601a      	str	r2, [r3, #0]
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr
 8005dfc:	e000e010 	.word	0xe000e010
 8005e00:	e000e018 	.word	0xe000e018
 8005e04:	20000004 	.word	0x20000004
 8005e08:	10624dd3 	.word	0x10624dd3
 8005e0c:	e000e014 	.word	0xe000e014

08005e10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08a      	sub	sp, #40	@ 0x28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e1c:	f7ff fb9e 	bl	800555c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e20:	4b5c      	ldr	r3, [pc, #368]	@ (8005f94 <pvPortMalloc+0x184>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e28:	f000 f924 	bl	8006074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e2c:	4b5a      	ldr	r3, [pc, #360]	@ (8005f98 <pvPortMalloc+0x188>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4013      	ands	r3, r2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f040 8095 	bne.w	8005f64 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01e      	beq.n	8005e7e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005e40:	2208      	movs	r2, #8
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4413      	add	r3, r2
 8005e46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d015      	beq.n	8005e7e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f023 0307 	bic.w	r3, r3, #7
 8005e58:	3308      	adds	r3, #8
 8005e5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <pvPortMalloc+0x6e>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	617b      	str	r3, [r7, #20]
}
 8005e78:	bf00      	nop
 8005e7a:	bf00      	nop
 8005e7c:	e7fd      	b.n	8005e7a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d06f      	beq.n	8005f64 <pvPortMalloc+0x154>
 8005e84:	4b45      	ldr	r3, [pc, #276]	@ (8005f9c <pvPortMalloc+0x18c>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d86a      	bhi.n	8005f64 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e8e:	4b44      	ldr	r3, [pc, #272]	@ (8005fa0 <pvPortMalloc+0x190>)
 8005e90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e92:	4b43      	ldr	r3, [pc, #268]	@ (8005fa0 <pvPortMalloc+0x190>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e98:	e004      	b.n	8005ea4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d903      	bls.n	8005eb6 <pvPortMalloc+0xa6>
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f1      	bne.n	8005e9a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005eb6:	4b37      	ldr	r3, [pc, #220]	@ (8005f94 <pvPortMalloc+0x184>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d051      	beq.n	8005f64 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2208      	movs	r2, #8
 8005ec6:	4413      	add	r3, r2
 8005ec8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	1ad2      	subs	r2, r2, r3
 8005eda:	2308      	movs	r3, #8
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d920      	bls.n	8005f24 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00b      	beq.n	8005f0c <pvPortMalloc+0xfc>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	613b      	str	r3, [r7, #16]
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	e7fd      	b.n	8005f08 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	1ad2      	subs	r2, r2, r3
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f1e:	69b8      	ldr	r0, [r7, #24]
 8005f20:	f000 f90a 	bl	8006138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f24:	4b1d      	ldr	r3, [pc, #116]	@ (8005f9c <pvPortMalloc+0x18c>)
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005f9c <pvPortMalloc+0x18c>)
 8005f30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f32:	4b1a      	ldr	r3, [pc, #104]	@ (8005f9c <pvPortMalloc+0x18c>)
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa4 <pvPortMalloc+0x194>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d203      	bcs.n	8005f46 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f3e:	4b17      	ldr	r3, [pc, #92]	@ (8005f9c <pvPortMalloc+0x18c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a18      	ldr	r2, [pc, #96]	@ (8005fa4 <pvPortMalloc+0x194>)
 8005f44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	4b13      	ldr	r3, [pc, #76]	@ (8005f98 <pvPortMalloc+0x188>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f5a:	4b13      	ldr	r3, [pc, #76]	@ (8005fa8 <pvPortMalloc+0x198>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	4a11      	ldr	r2, [pc, #68]	@ (8005fa8 <pvPortMalloc+0x198>)
 8005f62:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f64:	f7ff fb08 	bl	8005578 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00b      	beq.n	8005f8a <pvPortMalloc+0x17a>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	60fb      	str	r3, [r7, #12]
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	e7fd      	b.n	8005f86 <pvPortMalloc+0x176>
	return pvReturn;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3728      	adds	r7, #40	@ 0x28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	200011e4 	.word	0x200011e4
 8005f98:	200011f8 	.word	0x200011f8
 8005f9c:	200011e8 	.word	0x200011e8
 8005fa0:	200011dc 	.word	0x200011dc
 8005fa4:	200011ec 	.word	0x200011ec
 8005fa8:	200011f0 	.word	0x200011f0

08005fac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d04f      	beq.n	800605e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005fbe:	2308      	movs	r3, #8
 8005fc0:	425b      	negs	r3, r3
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	4b25      	ldr	r3, [pc, #148]	@ (8006068 <vPortFree+0xbc>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <vPortFree+0x46>
	__asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	60fb      	str	r3, [r7, #12]
}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	e7fd      	b.n	8005fee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00b      	beq.n	8006012 <vPortFree+0x66>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	60bb      	str	r3, [r7, #8]
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	4b14      	ldr	r3, [pc, #80]	@ (8006068 <vPortFree+0xbc>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4013      	ands	r3, r2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01e      	beq.n	800605e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d11a      	bne.n	800605e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	4b0e      	ldr	r3, [pc, #56]	@ (8006068 <vPortFree+0xbc>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	43db      	mvns	r3, r3
 8006032:	401a      	ands	r2, r3
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006038:	f7ff fa90 	bl	800555c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <vPortFree+0xc0>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4413      	add	r3, r2
 8006046:	4a09      	ldr	r2, [pc, #36]	@ (800606c <vPortFree+0xc0>)
 8006048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800604a:	6938      	ldr	r0, [r7, #16]
 800604c:	f000 f874 	bl	8006138 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006050:	4b07      	ldr	r3, [pc, #28]	@ (8006070 <vPortFree+0xc4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3301      	adds	r3, #1
 8006056:	4a06      	ldr	r2, [pc, #24]	@ (8006070 <vPortFree+0xc4>)
 8006058:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800605a:	f7ff fa8d 	bl	8005578 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800605e:	bf00      	nop
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	200011f8 	.word	0x200011f8
 800606c:	200011e8 	.word	0x200011e8
 8006070:	200011f4 	.word	0x200011f4

08006074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800607a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800607e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006080:	4b27      	ldr	r3, [pc, #156]	@ (8006120 <prvHeapInit+0xac>)
 8006082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00c      	beq.n	80060a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3307      	adds	r3, #7
 8006092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0307 	bic.w	r3, r3, #7
 800609a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006120 <prvHeapInit+0xac>)
 80060a4:	4413      	add	r3, r2
 80060a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006124 <prvHeapInit+0xb0>)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006124 <prvHeapInit+0xb0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	4413      	add	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060c0:	2208      	movs	r2, #8
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	1a9b      	subs	r3, r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0307 	bic.w	r3, r3, #7
 80060ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4a15      	ldr	r2, [pc, #84]	@ (8006128 <prvHeapInit+0xb4>)
 80060d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060d6:	4b14      	ldr	r3, [pc, #80]	@ (8006128 <prvHeapInit+0xb4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2200      	movs	r2, #0
 80060dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060de:	4b12      	ldr	r3, [pc, #72]	@ (8006128 <prvHeapInit+0xb4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	1ad2      	subs	r2, r2, r3
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80060f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006128 <prvHeapInit+0xb4>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	4a0a      	ldr	r2, [pc, #40]	@ (800612c <prvHeapInit+0xb8>)
 8006102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	4a09      	ldr	r2, [pc, #36]	@ (8006130 <prvHeapInit+0xbc>)
 800610a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800610c:	4b09      	ldr	r3, [pc, #36]	@ (8006134 <prvHeapInit+0xc0>)
 800610e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006112:	601a      	str	r2, [r3, #0]
}
 8006114:	bf00      	nop
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	200005dc 	.word	0x200005dc
 8006124:	200011dc 	.word	0x200011dc
 8006128:	200011e4 	.word	0x200011e4
 800612c:	200011ec 	.word	0x200011ec
 8006130:	200011e8 	.word	0x200011e8
 8006134:	200011f8 	.word	0x200011f8

08006138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006140:	4b27      	ldr	r3, [pc, #156]	@ (80061e0 <prvInsertBlockIntoFreeList+0xa8>)
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	e002      	b.n	800614c <prvInsertBlockIntoFreeList+0x14>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	429a      	cmp	r2, r3
 8006154:	d8f7      	bhi.n	8006146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	4413      	add	r3, r2
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	429a      	cmp	r2, r3
 8006166:	d108      	bne.n	800617a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	441a      	add	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	441a      	add	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d118      	bne.n	80061c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b14      	ldr	r3, [pc, #80]	@ (80061e4 <prvInsertBlockIntoFreeList+0xac>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d00d      	beq.n	80061b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	441a      	add	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e008      	b.n	80061c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061b6:	4b0b      	ldr	r3, [pc, #44]	@ (80061e4 <prvInsertBlockIntoFreeList+0xac>)
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	e003      	b.n	80061c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d002      	beq.n	80061d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr
 80061e0:	200011dc 	.word	0x200011dc
 80061e4:	200011e4 	.word	0x200011e4

080061e8 <memset>:
 80061e8:	4603      	mov	r3, r0
 80061ea:	4402      	add	r2, r0
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d100      	bne.n	80061f2 <memset+0xa>
 80061f0:	4770      	bx	lr
 80061f2:	f803 1b01 	strb.w	r1, [r3], #1
 80061f6:	e7f9      	b.n	80061ec <memset+0x4>

080061f8 <_reclaim_reent>:
 80061f8:	4b29      	ldr	r3, [pc, #164]	@ (80062a0 <_reclaim_reent+0xa8>)
 80061fa:	b570      	push	{r4, r5, r6, lr}
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4604      	mov	r4, r0
 8006200:	4283      	cmp	r3, r0
 8006202:	d04b      	beq.n	800629c <_reclaim_reent+0xa4>
 8006204:	69c3      	ldr	r3, [r0, #28]
 8006206:	b1ab      	cbz	r3, 8006234 <_reclaim_reent+0x3c>
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	b16b      	cbz	r3, 8006228 <_reclaim_reent+0x30>
 800620c:	2500      	movs	r5, #0
 800620e:	69e3      	ldr	r3, [r4, #28]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	5959      	ldr	r1, [r3, r5]
 8006214:	2900      	cmp	r1, #0
 8006216:	d13b      	bne.n	8006290 <_reclaim_reent+0x98>
 8006218:	3504      	adds	r5, #4
 800621a:	2d80      	cmp	r5, #128	@ 0x80
 800621c:	d1f7      	bne.n	800620e <_reclaim_reent+0x16>
 800621e:	69e3      	ldr	r3, [r4, #28]
 8006220:	4620      	mov	r0, r4
 8006222:	68d9      	ldr	r1, [r3, #12]
 8006224:	f000 f864 	bl	80062f0 <_free_r>
 8006228:	69e3      	ldr	r3, [r4, #28]
 800622a:	6819      	ldr	r1, [r3, #0]
 800622c:	b111      	cbz	r1, 8006234 <_reclaim_reent+0x3c>
 800622e:	4620      	mov	r0, r4
 8006230:	f000 f85e 	bl	80062f0 <_free_r>
 8006234:	6961      	ldr	r1, [r4, #20]
 8006236:	b111      	cbz	r1, 800623e <_reclaim_reent+0x46>
 8006238:	4620      	mov	r0, r4
 800623a:	f000 f859 	bl	80062f0 <_free_r>
 800623e:	69e1      	ldr	r1, [r4, #28]
 8006240:	b111      	cbz	r1, 8006248 <_reclaim_reent+0x50>
 8006242:	4620      	mov	r0, r4
 8006244:	f000 f854 	bl	80062f0 <_free_r>
 8006248:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800624a:	b111      	cbz	r1, 8006252 <_reclaim_reent+0x5a>
 800624c:	4620      	mov	r0, r4
 800624e:	f000 f84f 	bl	80062f0 <_free_r>
 8006252:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006254:	b111      	cbz	r1, 800625c <_reclaim_reent+0x64>
 8006256:	4620      	mov	r0, r4
 8006258:	f000 f84a 	bl	80062f0 <_free_r>
 800625c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800625e:	b111      	cbz	r1, 8006266 <_reclaim_reent+0x6e>
 8006260:	4620      	mov	r0, r4
 8006262:	f000 f845 	bl	80062f0 <_free_r>
 8006266:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006268:	b111      	cbz	r1, 8006270 <_reclaim_reent+0x78>
 800626a:	4620      	mov	r0, r4
 800626c:	f000 f840 	bl	80062f0 <_free_r>
 8006270:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006272:	b111      	cbz	r1, 800627a <_reclaim_reent+0x82>
 8006274:	4620      	mov	r0, r4
 8006276:	f000 f83b 	bl	80062f0 <_free_r>
 800627a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800627c:	b111      	cbz	r1, 8006284 <_reclaim_reent+0x8c>
 800627e:	4620      	mov	r0, r4
 8006280:	f000 f836 	bl	80062f0 <_free_r>
 8006284:	6a23      	ldr	r3, [r4, #32]
 8006286:	b14b      	cbz	r3, 800629c <_reclaim_reent+0xa4>
 8006288:	4620      	mov	r0, r4
 800628a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800628e:	4718      	bx	r3
 8006290:	680e      	ldr	r6, [r1, #0]
 8006292:	4620      	mov	r0, r4
 8006294:	f000 f82c 	bl	80062f0 <_free_r>
 8006298:	4631      	mov	r1, r6
 800629a:	e7bb      	b.n	8006214 <_reclaim_reent+0x1c>
 800629c:	bd70      	pop	{r4, r5, r6, pc}
 800629e:	bf00      	nop
 80062a0:	20000014 	.word	0x20000014

080062a4 <__libc_init_array>:
 80062a4:	b570      	push	{r4, r5, r6, lr}
 80062a6:	2600      	movs	r6, #0
 80062a8:	4d0c      	ldr	r5, [pc, #48]	@ (80062dc <__libc_init_array+0x38>)
 80062aa:	4c0d      	ldr	r4, [pc, #52]	@ (80062e0 <__libc_init_array+0x3c>)
 80062ac:	1b64      	subs	r4, r4, r5
 80062ae:	10a4      	asrs	r4, r4, #2
 80062b0:	42a6      	cmp	r6, r4
 80062b2:	d109      	bne.n	80062c8 <__libc_init_array+0x24>
 80062b4:	f000 f870 	bl	8006398 <_init>
 80062b8:	2600      	movs	r6, #0
 80062ba:	4d0a      	ldr	r5, [pc, #40]	@ (80062e4 <__libc_init_array+0x40>)
 80062bc:	4c0a      	ldr	r4, [pc, #40]	@ (80062e8 <__libc_init_array+0x44>)
 80062be:	1b64      	subs	r4, r4, r5
 80062c0:	10a4      	asrs	r4, r4, #2
 80062c2:	42a6      	cmp	r6, r4
 80062c4:	d105      	bne.n	80062d2 <__libc_init_array+0x2e>
 80062c6:	bd70      	pop	{r4, r5, r6, pc}
 80062c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062cc:	4798      	blx	r3
 80062ce:	3601      	adds	r6, #1
 80062d0:	e7ee      	b.n	80062b0 <__libc_init_array+0xc>
 80062d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d6:	4798      	blx	r3
 80062d8:	3601      	adds	r6, #1
 80062da:	e7f2      	b.n	80062c2 <__libc_init_array+0x1e>
 80062dc:	08006434 	.word	0x08006434
 80062e0:	08006434 	.word	0x08006434
 80062e4:	08006434 	.word	0x08006434
 80062e8:	08006438 	.word	0x08006438

080062ec <__retarget_lock_acquire_recursive>:
 80062ec:	4770      	bx	lr

080062ee <__retarget_lock_release_recursive>:
 80062ee:	4770      	bx	lr

080062f0 <_free_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4605      	mov	r5, r0
 80062f4:	2900      	cmp	r1, #0
 80062f6:	d040      	beq.n	800637a <_free_r+0x8a>
 80062f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062fc:	1f0c      	subs	r4, r1, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	bfb8      	it	lt
 8006302:	18e4      	addlt	r4, r4, r3
 8006304:	f000 f83c 	bl	8006380 <__malloc_lock>
 8006308:	4a1c      	ldr	r2, [pc, #112]	@ (800637c <_free_r+0x8c>)
 800630a:	6813      	ldr	r3, [r2, #0]
 800630c:	b933      	cbnz	r3, 800631c <_free_r+0x2c>
 800630e:	6063      	str	r3, [r4, #4]
 8006310:	6014      	str	r4, [r2, #0]
 8006312:	4628      	mov	r0, r5
 8006314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006318:	f000 b838 	b.w	800638c <__malloc_unlock>
 800631c:	42a3      	cmp	r3, r4
 800631e:	d908      	bls.n	8006332 <_free_r+0x42>
 8006320:	6820      	ldr	r0, [r4, #0]
 8006322:	1821      	adds	r1, r4, r0
 8006324:	428b      	cmp	r3, r1
 8006326:	bf01      	itttt	eq
 8006328:	6819      	ldreq	r1, [r3, #0]
 800632a:	685b      	ldreq	r3, [r3, #4]
 800632c:	1809      	addeq	r1, r1, r0
 800632e:	6021      	streq	r1, [r4, #0]
 8006330:	e7ed      	b.n	800630e <_free_r+0x1e>
 8006332:	461a      	mov	r2, r3
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	b10b      	cbz	r3, 800633c <_free_r+0x4c>
 8006338:	42a3      	cmp	r3, r4
 800633a:	d9fa      	bls.n	8006332 <_free_r+0x42>
 800633c:	6811      	ldr	r1, [r2, #0]
 800633e:	1850      	adds	r0, r2, r1
 8006340:	42a0      	cmp	r0, r4
 8006342:	d10b      	bne.n	800635c <_free_r+0x6c>
 8006344:	6820      	ldr	r0, [r4, #0]
 8006346:	4401      	add	r1, r0
 8006348:	1850      	adds	r0, r2, r1
 800634a:	4283      	cmp	r3, r0
 800634c:	6011      	str	r1, [r2, #0]
 800634e:	d1e0      	bne.n	8006312 <_free_r+0x22>
 8006350:	6818      	ldr	r0, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	4408      	add	r0, r1
 8006356:	6010      	str	r0, [r2, #0]
 8006358:	6053      	str	r3, [r2, #4]
 800635a:	e7da      	b.n	8006312 <_free_r+0x22>
 800635c:	d902      	bls.n	8006364 <_free_r+0x74>
 800635e:	230c      	movs	r3, #12
 8006360:	602b      	str	r3, [r5, #0]
 8006362:	e7d6      	b.n	8006312 <_free_r+0x22>
 8006364:	6820      	ldr	r0, [r4, #0]
 8006366:	1821      	adds	r1, r4, r0
 8006368:	428b      	cmp	r3, r1
 800636a:	bf01      	itttt	eq
 800636c:	6819      	ldreq	r1, [r3, #0]
 800636e:	685b      	ldreq	r3, [r3, #4]
 8006370:	1809      	addeq	r1, r1, r0
 8006372:	6021      	streq	r1, [r4, #0]
 8006374:	6063      	str	r3, [r4, #4]
 8006376:	6054      	str	r4, [r2, #4]
 8006378:	e7cb      	b.n	8006312 <_free_r+0x22>
 800637a:	bd38      	pop	{r3, r4, r5, pc}
 800637c:	20001338 	.word	0x20001338

08006380 <__malloc_lock>:
 8006380:	4801      	ldr	r0, [pc, #4]	@ (8006388 <__malloc_lock+0x8>)
 8006382:	f7ff bfb3 	b.w	80062ec <__retarget_lock_acquire_recursive>
 8006386:	bf00      	nop
 8006388:	20001334 	.word	0x20001334

0800638c <__malloc_unlock>:
 800638c:	4801      	ldr	r0, [pc, #4]	@ (8006394 <__malloc_unlock+0x8>)
 800638e:	f7ff bfae 	b.w	80062ee <__retarget_lock_release_recursive>
 8006392:	bf00      	nop
 8006394:	20001334 	.word	0x20001334

08006398 <_init>:
 8006398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639a:	bf00      	nop
 800639c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639e:	bc08      	pop	{r3}
 80063a0:	469e      	mov	lr, r3
 80063a2:	4770      	bx	lr

080063a4 <_fini>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	bf00      	nop
 80063a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063aa:	bc08      	pop	{r3}
 80063ac:	469e      	mov	lr, r3
 80063ae:	4770      	bx	lr
