
DRV_N17-S32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e58  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006f68  08006f68  00007f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007014  08007014  00009064  2**0
                  CONTENTS
  4 .ARM          00000000  08007014  08007014  00009064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007014  08007014  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007014  08007014  00008014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007018  08007018  00008018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800701c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b14  20000064  08007080  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b78  08007080  00009b78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e13  00000000  00000000  0000908d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003803  00000000  00000000  00020ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  000246a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000102f  00000000  00000000  00025b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a29d  00000000  00000000  00026b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ef8  00000000  00000000  00040e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095905  00000000  00000000  00059d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef621  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058c0  00000000  00000000  000ef664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f4f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f50 	.word	0x08006f50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08006f50 	.word	0x08006f50

08000150 <lowPassFilter>:

int32_t getCounter(){
	return accumulate_counter;
}

uint16_t lowPassFilter(uint16_t newData){
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	80fb      	strh	r3, [r7, #6]
	encoderReadings[filterIndex] = newData;
 800015a:	4b1c      	ldr	r3, [pc, #112]	@ (80001cc <lowPassFilter+0x7c>)
 800015c:	881b      	ldrh	r3, [r3, #0]
 800015e:	4619      	mov	r1, r3
 8000160:	4a1b      	ldr	r2, [pc, #108]	@ (80001d0 <lowPassFilter+0x80>)
 8000162:	88fb      	ldrh	r3, [r7, #6]
 8000164:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	filterIndex = (filterIndex + 1) % FILTER_SIZE;
 8000168:	4b18      	ldr	r3, [pc, #96]	@ (80001cc <lowPassFilter+0x7c>)
 800016a:	881b      	ldrh	r3, [r3, #0]
 800016c:	3301      	adds	r3, #1
 800016e:	425a      	negs	r2, r3
 8000170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000174:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000178:	bf58      	it	pl
 800017a:	4253      	negpl	r3, r2
 800017c:	b29a      	uxth	r2, r3
 800017e:	4b13      	ldr	r3, [pc, #76]	@ (80001cc <lowPassFilter+0x7c>)
 8000180:	801a      	strh	r2, [r3, #0]

	int sum = 0;
 8000182:	2300      	movs	r3, #0
 8000184:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTER_SIZE; i++) {
 8000186:	2300      	movs	r3, #0
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	e00a      	b.n	80001a2 <lowPassFilter+0x52>
		sum += encoderReadings[i];
 800018c:	4a10      	ldr	r2, [pc, #64]	@ (80001d0 <lowPassFilter+0x80>)
 800018e:	68bb      	ldr	r3, [r7, #8]
 8000190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000194:	461a      	mov	r2, r3
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	4413      	add	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTER_SIZE; i++) {
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	3301      	adds	r3, #1
 80001a0:	60bb      	str	r3, [r7, #8]
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80001a8:	dbf0      	blt.n	800018c <lowPassFilter+0x3c>
	}

	filteredValue = sum / FILTER_SIZE;
 80001aa:	68fb      	ldr	r3, [r7, #12]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	da01      	bge.n	80001b4 <lowPassFilter+0x64>
 80001b0:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80001b4:	129b      	asrs	r3, r3, #10
 80001b6:	b29a      	uxth	r2, r3
 80001b8:	4b06      	ldr	r3, [pc, #24]	@ (80001d4 <lowPassFilter+0x84>)
 80001ba:	801a      	strh	r2, [r3, #0]

	return filteredValue;
 80001bc:	4b05      	ldr	r3, [pc, #20]	@ (80001d4 <lowPassFilter+0x84>)
 80001be:	881b      	ldrh	r3, [r3, #0]
}
 80001c0:	4618      	mov	r0, r3
 80001c2:	3714      	adds	r7, #20
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	2000088c 	.word	0x2000088c
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	2000088e 	.word	0x2000088e

080001d8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a2d      	ldr	r2, [pc, #180]	@ (800029c <HAL_I2C_MemRxCpltCallback+0xc4>)
 80001e6:	4293      	cmp	r3, r2
 80001e8:	d154      	bne.n	8000294 <HAL_I2C_MemRxCpltCallback+0xbc>
        uint16_t position_now = (raw_buffer[0] << 8) | raw_buffer[1];
 80001ea:	4b2d      	ldr	r3, [pc, #180]	@ (80002a0 <HAL_I2C_MemRxCpltCallback+0xc8>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	021b      	lsls	r3, r3, #8
 80001f0:	b21a      	sxth	r2, r3
 80001f2:	4b2b      	ldr	r3, [pc, #172]	@ (80002a0 <HAL_I2C_MemRxCpltCallback+0xc8>)
 80001f4:	785b      	ldrb	r3, [r3, #1]
 80001f6:	b21b      	sxth	r3, r3
 80001f8:	4313      	orrs	r3, r2
 80001fa:	b21b      	sxth	r3, r3
 80001fc:	817b      	strh	r3, [r7, #10]
        position_now = lowPassFilter(position_now);
 80001fe:	897b      	ldrh	r3, [r7, #10]
 8000200:	4618      	mov	r0, r3
 8000202:	f7ff ffa5 	bl	8000150 <lowPassFilter>
 8000206:	4603      	mov	r3, r0
 8000208:	817b      	strh	r3, [r7, #10]
        int32_t delta = (int32_t)(position_now - position_prev);
 800020a:	897b      	ldrh	r3, [r7, #10]
 800020c:	4a25      	ldr	r2, [pc, #148]	@ (80002a4 <HAL_I2C_MemRxCpltCallback+0xcc>)
 800020e:	8812      	ldrh	r2, [r2, #0]
 8000210:	1a9b      	subs	r3, r3, r2
 8000212:	60fb      	str	r3, [r7, #12]

        if(rotation_direction){
 8000214:	4b24      	ldr	r3, [pc, #144]	@ (80002a8 <HAL_I2C_MemRxCpltCallback+0xd0>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d00d      	beq.n	8000238 <HAL_I2C_MemRxCpltCallback+0x60>
        	if(delta > ENC_PPR/2){
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000222:	dd03      	ble.n	800022c <HAL_I2C_MemRxCpltCallback+0x54>
        		delta -= ENC_PPR;
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800022a:	60fb      	str	r3, [r7, #12]
        	}
        	delta = abs(delta);
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	2b00      	cmp	r3, #0
 8000230:	bfb8      	it	lt
 8000232:	425b      	neglt	r3, r3
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	e00d      	b.n	8000254 <HAL_I2C_MemRxCpltCallback+0x7c>
        }else{
        	if(delta < -(ENC_PPR/2)){
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 800023e:	da03      	bge.n	8000248 <HAL_I2C_MemRxCpltCallback+0x70>
        		delta += ENC_PPR;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000246:	60fb      	str	r3, [r7, #12]
        	}
        	delta = -abs(delta);
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	2b00      	cmp	r3, #0
 800024c:	bfb8      	it	lt
 800024e:	425b      	neglt	r3, r3
 8000250:	425b      	negs	r3, r3
 8000252:	60fb      	str	r3, [r7, #12]
        }

        accumulate_counter += delta;
 8000254:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	4413      	add	r3, r2
 800025c:	4a13      	ldr	r2, [pc, #76]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 800025e:	6013      	str	r3, [r2, #0]

        if(accumulate_counter >= ENC_MAX_COUNT){
 8000260:	4b12      	ldr	r3, [pc, #72]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a12      	ldr	r2, [pc, #72]	@ (80002b0 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8000266:	4293      	cmp	r3, r2
 8000268:	dd06      	ble.n	8000278 <HAL_I2C_MemRxCpltCallback+0xa0>
			accumulate_counter -= ENC_MAX_COUNT;
 800026a:	4b10      	ldr	r3, [pc, #64]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8000270:	4413      	add	r3, r2
 8000272:	4a0e      	ldr	r2, [pc, #56]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000274:	6013      	str	r3, [r2, #0]
 8000276:	e00a      	b.n	800028e <HAL_I2C_MemRxCpltCallback+0xb6>
		}else if(accumulate_counter < ENC_MIN_COUNT){
 8000278:	4b0c      	ldr	r3, [pc, #48]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a0d      	ldr	r2, [pc, #52]	@ (80002b4 <HAL_I2C_MemRxCpltCallback+0xdc>)
 800027e:	4293      	cmp	r3, r2
 8000280:	da05      	bge.n	800028e <HAL_I2C_MemRxCpltCallback+0xb6>
			accumulate_counter += ENC_MAX_COUNT;
 8000282:	4b0a      	ldr	r3, [pc, #40]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4b0c      	ldr	r3, [pc, #48]	@ (80002b8 <HAL_I2C_MemRxCpltCallback+0xe0>)
 8000288:	4413      	add	r3, r2
 800028a:	4a08      	ldr	r2, [pc, #32]	@ (80002ac <HAL_I2C_MemRxCpltCallback+0xd4>)
 800028c:	6013      	str	r3, [r2, #0]
		}

        position_prev = position_now;
 800028e:	4a05      	ldr	r2, [pc, #20]	@ (80002a4 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8000290:	897b      	ldrh	r3, [r7, #10]
 8000292:	8013      	strh	r3, [r2, #0]
    }
}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40005400 	.word	0x40005400
 80002a0:	20000088 	.word	0x20000088
 80002a4:	20000082 	.word	0x20000082
 80002a8:	20000080 	.word	0x20000080
 80002ac:	20000084 	.word	0x20000084
 80002b0:	0098967e 	.word	0x0098967e
 80002b4:	ff676981 	.word	0xff676981
 80002b8:	0098967f 	.word	0x0098967f

080002bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	4a06      	ldr	r2, [pc, #24]	@ (80002e4 <vApplicationGetIdleTaskMemory+0x28>)
 80002cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	4a05      	ldr	r2, [pc, #20]	@ (80002e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80002d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2280      	movs	r2, #128	@ 0x80
 80002d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	20000890 	.word	0x20000890
 80002e8:	20000930 	.word	0x20000930

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b5b0      	push	{r4, r5, r7, lr}
 80002ee:	b096      	sub	sp, #88	@ 0x58
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f2:	f000 fc81 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f6:	f000 f853 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fa:	f000 f965 	bl	80005c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80002fe:	f000 f945 	bl	800058c <MX_DMA_Init>
  MX_I2C1_Init();
 8000302:	f000 f893 	bl	800042c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000306:	f000 f8bf 	bl	8000488 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800030a:	f000 f915 	bl	8000538 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  TMC2209_setup();
  TMC2209_setup();
 800030e:	f006 fb9b 	bl	8006a48 <TMC2209_setup>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000312:	4b1d      	ldr	r3, [pc, #116]	@ (8000388 <main+0x9c>)
 8000314:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000318:	461d      	mov	r5, r3
 800031a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800031c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800031e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000322:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000326:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800032a:	2100      	movs	r1, #0
 800032c:	4618      	mov	r0, r3
 800032e:	f005 f981 	bl	8005634 <osThreadCreate>
 8000332:	4603      	mov	r3, r0
 8000334:	4a15      	ldr	r2, [pc, #84]	@ (800038c <main+0xa0>)
 8000336:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 8000338:	4b15      	ldr	r3, [pc, #84]	@ (8000390 <main+0xa4>)
 800033a:	f107 0420 	add.w	r4, r7, #32
 800033e:	461d      	mov	r5, r3
 8000340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000344:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000348:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 800034c:	f107 0320 	add.w	r3, r7, #32
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f005 f96e 	bl	8005634 <osThreadCreate>
 8000358:	4603      	mov	r3, r0
 800035a:	4a0e      	ldr	r2, [pc, #56]	@ (8000394 <main+0xa8>)
 800035c:	6013      	str	r3, [r2, #0]

  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 800035e:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <main+0xac>)
 8000360:	1d3c      	adds	r4, r7, #4
 8000362:	461d      	mov	r5, r3
 8000364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000368:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800036c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2100      	movs	r1, #0
 8000374:	4618      	mov	r0, r3
 8000376:	f005 f95d 	bl	8005634 <osThreadCreate>
 800037a:	4603      	mov	r3, r0
 800037c:	4a07      	ldr	r2, [pc, #28]	@ (800039c <main+0xb0>)
 800037e:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000380:	f005 f951 	bl	8005626 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <main+0x98>
 8000388:	08006f74 	.word	0x08006f74
 800038c:	20000c58 	.word	0x20000c58
 8000390:	08006f9c 	.word	0x08006f9c
 8000394:	20000c5c 	.word	0x20000c5c
 8000398:	08006fc4 	.word	0x08006fc4
 800039c:	20000c60 	.word	0x20000c60

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b090      	sub	sp, #64	@ 0x40
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0318 	add.w	r3, r7, #24
 80003aa:	2228      	movs	r2, #40	@ 0x28
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f006 fcf6 	bl	8006da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c2:	2301      	movs	r3, #1
 80003c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d0:	2301      	movs	r3, #1
 80003d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d4:	2302      	movs	r3, #2
 80003d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003de:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e4:	f107 0318 	add.w	r3, r7, #24
 80003e8:	4618      	mov	r0, r3
 80003ea:	f002 ff1b 	bl	8003224 <HAL_RCC_OscConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003f4:	f000 f9a4 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f8:	230f      	movs	r3, #15
 80003fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fc:	2302      	movs	r3, #2
 80003fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000404:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2102      	movs	r1, #2
 8000412:	4618      	mov	r0, r3
 8000414:	f003 f988 	bl	8003728 <HAL_RCC_ClockConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800041e:	f000 f98f 	bl	8000740 <Error_Handler>
  }
}
 8000422:	bf00      	nop
 8000424:	3740      	adds	r7, #64	@ 0x40
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000430:	4b12      	ldr	r3, [pc, #72]	@ (800047c <MX_I2C1_Init+0x50>)
 8000432:	4a13      	ldr	r2, [pc, #76]	@ (8000480 <MX_I2C1_Init+0x54>)
 8000434:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000436:	4b11      	ldr	r3, [pc, #68]	@ (800047c <MX_I2C1_Init+0x50>)
 8000438:	4a12      	ldr	r2, [pc, #72]	@ (8000484 <MX_I2C1_Init+0x58>)
 800043a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800043c:	4b0f      	ldr	r3, [pc, #60]	@ (800047c <MX_I2C1_Init+0x50>)
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000442:	4b0e      	ldr	r3, [pc, #56]	@ (800047c <MX_I2C1_Init+0x50>)
 8000444:	2200      	movs	r2, #0
 8000446:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000448:	4b0c      	ldr	r3, [pc, #48]	@ (800047c <MX_I2C1_Init+0x50>)
 800044a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800044e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000450:	4b0a      	ldr	r3, [pc, #40]	@ (800047c <MX_I2C1_Init+0x50>)
 8000452:	2200      	movs	r2, #0
 8000454:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000456:	4b09      	ldr	r3, [pc, #36]	@ (800047c <MX_I2C1_Init+0x50>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800045c:	4b07      	ldr	r3, [pc, #28]	@ (800047c <MX_I2C1_Init+0x50>)
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000462:	4b06      	ldr	r3, [pc, #24]	@ (800047c <MX_I2C1_Init+0x50>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000468:	4804      	ldr	r0, [pc, #16]	@ (800047c <MX_I2C1_Init+0x50>)
 800046a:	f001 f8b9 	bl	80015e0 <HAL_I2C_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000474:	f000 f964 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000b30 	.word	0x20000b30
 8000480:	40005400 	.word	0x40005400
 8000484:	00061a80 	.word	0x00061a80

08000488 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	@ 0x28
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048e:	f107 0320 	add.w	r3, r7, #32
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004aa:	4b22      	ldr	r3, [pc, #136]	@ (8000534 <MX_TIM2_Init+0xac>)
 80004ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 80004b2:	4b20      	ldr	r3, [pc, #128]	@ (8000534 <MX_TIM2_Init+0xac>)
 80004b4:	2247      	movs	r2, #71	@ 0x47
 80004b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000534 <MX_TIM2_Init+0xac>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4 - 1;
 80004be:	4b1d      	ldr	r3, [pc, #116]	@ (8000534 <MX_TIM2_Init+0xac>)
 80004c0:	2203      	movs	r2, #3
 80004c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000534 <MX_TIM2_Init+0xac>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000534 <MX_TIM2_Init+0xac>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004d0:	4818      	ldr	r0, [pc, #96]	@ (8000534 <MX_TIM2_Init+0xac>)
 80004d2:	f003 fb91 	bl	8003bf8 <HAL_TIM_PWM_Init>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80004dc:	f000 f930 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e0:	2300      	movs	r3, #0
 80004e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004e8:	f107 0320 	add.w	r3, r7, #32
 80004ec:	4619      	mov	r1, r3
 80004ee:	4811      	ldr	r0, [pc, #68]	@ (8000534 <MX_TIM2_Init+0xac>)
 80004f0:	f004 f86c 	bl	80045cc <HAL_TIMEx_MasterConfigSynchronization>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80004fa:	f000 f921 	bl	8000740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004fe:	2360      	movs	r3, #96	@ 0x60
 8000500:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000502:	2332      	movs	r3, #50	@ 0x32
 8000504:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	2200      	movs	r2, #0
 8000512:	4619      	mov	r1, r3
 8000514:	4807      	ldr	r0, [pc, #28]	@ (8000534 <MX_TIM2_Init+0xac>)
 8000516:	f003 fd61 	bl	8003fdc <HAL_TIM_PWM_ConfigChannel>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000520:	f000 f90e 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000524:	4803      	ldr	r0, [pc, #12]	@ (8000534 <MX_TIM2_Init+0xac>)
 8000526:	f000 f9e7 	bl	80008f8 <HAL_TIM_MspPostInit>

}
 800052a:	bf00      	nop
 800052c:	3728      	adds	r7, #40	@ 0x28
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000bc8 	.word	0x20000bc8

08000538 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800053c:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <MX_USART1_UART_Init+0x4c>)
 800053e:	4a12      	ldr	r2, [pc, #72]	@ (8000588 <MX_USART1_UART_Init+0x50>)
 8000540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000542:	4b10      	ldr	r3, [pc, #64]	@ (8000584 <MX_USART1_UART_Init+0x4c>)
 8000544:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800054a:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <MX_USART1_UART_Init+0x4c>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000550:	4b0c      	ldr	r3, [pc, #48]	@ (8000584 <MX_USART1_UART_Init+0x4c>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <MX_USART1_UART_Init+0x4c>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800055c:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <MX_USART1_UART_Init+0x4c>)
 800055e:	220c      	movs	r2, #12
 8000560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000562:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <MX_USART1_UART_Init+0x4c>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000568:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <MX_USART1_UART_Init+0x4c>)
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	@ (8000584 <MX_USART1_UART_Init+0x4c>)
 8000570:	f004 f89c 	bl	80046ac <HAL_HalfDuplex_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800057a:	f000 f8e1 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000c10 	.word	0x20000c10
 8000588:	40013800 	.word	0x40013800

0800058c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <MX_DMA_Init+0x38>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a0b      	ldr	r2, [pc, #44]	@ (80005c4 <MX_DMA_Init+0x38>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <MX_DMA_Init+0x38>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2105      	movs	r1, #5
 80005ae:	2011      	movs	r0, #17
 80005b0:	f000 fc2d 	bl	8000e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005b4:	2011      	movs	r0, #17
 80005b6:	f000 fc46 	bl	8000e46 <HAL_NVIC_EnableIRQ>

}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005dc:	4b3d      	ldr	r3, [pc, #244]	@ (80006d4 <MX_GPIO_Init+0x10c>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a3c      	ldr	r2, [pc, #240]	@ (80006d4 <MX_GPIO_Init+0x10c>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b3a      	ldr	r3, [pc, #232]	@ (80006d4 <MX_GPIO_Init+0x10c>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0310 	and.w	r3, r3, #16
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f4:	4b37      	ldr	r3, [pc, #220]	@ (80006d4 <MX_GPIO_Init+0x10c>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a36      	ldr	r2, [pc, #216]	@ (80006d4 <MX_GPIO_Init+0x10c>)
 80005fa:	f043 0320 	orr.w	r3, r3, #32
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b34      	ldr	r3, [pc, #208]	@ (80006d4 <MX_GPIO_Init+0x10c>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0320 	and.w	r3, r3, #32
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	4b31      	ldr	r3, [pc, #196]	@ (80006d4 <MX_GPIO_Init+0x10c>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a30      	ldr	r2, [pc, #192]	@ (80006d4 <MX_GPIO_Init+0x10c>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b2e      	ldr	r3, [pc, #184]	@ (80006d4 <MX_GPIO_Init+0x10c>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	4b2b      	ldr	r3, [pc, #172]	@ (80006d4 <MX_GPIO_Init+0x10c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a2a      	ldr	r2, [pc, #168]	@ (80006d4 <MX_GPIO_Init+0x10c>)
 800062a:	f043 0308 	orr.w	r3, r3, #8
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <MX_GPIO_Init+0x10c>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0308 	and.w	r3, r3, #8
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000642:	4825      	ldr	r0, [pc, #148]	@ (80006d8 <MX_GPIO_Init+0x110>)
 8000644:	f000 ffb4 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	2106      	movs	r1, #6
 800064c:	4823      	ldr	r0, [pc, #140]	@ (80006dc <MX_GPIO_Init+0x114>)
 800064e:	f000 ffaf 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	4822      	ldr	r0, [pc, #136]	@ (80006e0 <MX_GPIO_Init+0x118>)
 8000658:	f000 ffaa 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800065c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2302      	movs	r3, #2
 800066c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	4619      	mov	r1, r3
 8000674:	4818      	ldr	r0, [pc, #96]	@ (80006d8 <MX_GPIO_Init+0x110>)
 8000676:	f000 fe17 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800067a:	2306      	movs	r3, #6
 800067c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2302      	movs	r3, #2
 8000688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4619      	mov	r1, r3
 8000690:	4812      	ldr	r0, [pc, #72]	@ (80006dc <MX_GPIO_Init+0x114>)
 8000692:	f000 fe09 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000696:	2310      	movs	r3, #16
 8000698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	4619      	mov	r1, r3
 80006a8:	480d      	ldr	r0, [pc, #52]	@ (80006e0 <MX_GPIO_Init+0x118>)
 80006aa:	f000 fdfd 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006ae:	2320      	movs	r3, #32
 80006b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4619      	mov	r1, r3
 80006c4:	4806      	ldr	r0, [pc, #24]	@ (80006e0 <MX_GPIO_Init+0x118>)
 80006c6:	f000 fdef 	bl	80012a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40011000 	.word	0x40011000
 80006dc:	40010800 	.word	0x40010800
 80006e0:	40010c00 	.word	0x40010c00

080006e4 <StartDriverTask>:

/* USER CODE BEGIN 4 */
void StartDriverTask(void const * argument){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	for(;;){
		TMC2209_readChopConfig(&driver_value);
 80006ec:	4803      	ldr	r0, [pc, #12]	@ (80006fc <StartDriverTask+0x18>)
 80006ee:	f006 f9f9 	bl	8006ae4 <TMC2209_readChopConfig>
//		TMC2209_enable();
//		TMC2209_moveVelocity(10);
//		TMC2209_setup();
		osDelay(100);
 80006f2:	2064      	movs	r0, #100	@ 0x64
 80006f4:	f004 ffea 	bl	80056cc <osDelay>
		TMC2209_readChopConfig(&driver_value);
 80006f8:	bf00      	nop
 80006fa:	e7f7      	b.n	80006ec <StartDriverTask+0x8>
 80006fc:	20000c64 	.word	0x20000c64

08000700 <StartEncoderTask>:
	}
}

void StartEncoderTask(void const * argument){
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	for(;;){
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <StartEncoderTask+0x8>

0800070c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f004 ffd9 	bl	80056cc <osDelay>
 800071a:	e7fb      	b.n	8000714 <StartDefaultTask+0x8>

0800071c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a04      	ldr	r2, [pc, #16]	@ (800073c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d101      	bne.n	8000732 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800072e:	f000 fa79 	bl	8000c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40012c00 	.word	0x40012c00

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <Error_Handler+0x8>

0800074c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000752:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <HAL_MspInit+0x68>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	4a17      	ldr	r2, [pc, #92]	@ (80007b4 <HAL_MspInit+0x68>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6193      	str	r3, [r2, #24]
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <HAL_MspInit+0x68>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_MspInit+0x68>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a11      	ldr	r2, [pc, #68]	@ (80007b4 <HAL_MspInit+0x68>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_MspInit+0x68>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	210f      	movs	r1, #15
 8000786:	f06f 0001 	mvn.w	r0, #1
 800078a:	f000 fb40 	bl	8000e0e <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <HAL_MspInit+0x6c>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	4a04      	ldr	r2, [pc, #16]	@ (80007b8 <HAL_MspInit+0x6c>)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40010000 	.word	0x40010000

080007bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a31      	ldr	r2, [pc, #196]	@ (800089c <HAL_I2C_MspInit+0xe0>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d15a      	bne.n	8000892 <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007dc:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <HAL_I2C_MspInit+0xe4>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a2f      	ldr	r2, [pc, #188]	@ (80008a0 <HAL_I2C_MspInit+0xe4>)
 80007e2:	f043 0308 	orr.w	r3, r3, #8
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b2d      	ldr	r3, [pc, #180]	@ (80008a0 <HAL_I2C_MspInit+0xe4>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007f4:	23c0      	movs	r3, #192	@ 0xc0
 80007f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f8:	2312      	movs	r3, #18
 80007fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	4827      	ldr	r0, [pc, #156]	@ (80008a4 <HAL_I2C_MspInit+0xe8>)
 8000808:	f000 fd4e 	bl	80012a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <HAL_I2C_MspInit+0xe4>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	4a23      	ldr	r2, [pc, #140]	@ (80008a0 <HAL_I2C_MspInit+0xe4>)
 8000812:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000816:	61d3      	str	r3, [r2, #28]
 8000818:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <HAL_I2C_MspInit+0xe4>)
 800081a:	69db      	ldr	r3, [r3, #28]
 800081c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000824:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <HAL_I2C_MspInit+0xec>)
 8000826:	4a21      	ldr	r2, [pc, #132]	@ (80008ac <HAL_I2C_MspInit+0xf0>)
 8000828:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800082a:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <HAL_I2C_MspInit+0xec>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <HAL_I2C_MspInit+0xec>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000836:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <HAL_I2C_MspInit+0xec>)
 8000838:	2280      	movs	r2, #128	@ 0x80
 800083a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800083c:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <HAL_I2C_MspInit+0xec>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000842:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <HAL_I2C_MspInit+0xec>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000848:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <HAL_I2C_MspInit+0xec>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800084e:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <HAL_I2C_MspInit+0xec>)
 8000850:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000854:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000856:	4814      	ldr	r0, [pc, #80]	@ (80008a8 <HAL_I2C_MspInit+0xec>)
 8000858:	f000 fb04 	bl	8000e64 <HAL_DMA_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 8000862:	f7ff ff6d 	bl	8000740 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a0f      	ldr	r2, [pc, #60]	@ (80008a8 <HAL_I2C_MspInit+0xec>)
 800086a:	639a      	str	r2, [r3, #56]	@ 0x38
 800086c:	4a0e      	ldr	r2, [pc, #56]	@ (80008a8 <HAL_I2C_MspInit+0xec>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2105      	movs	r1, #5
 8000876:	201f      	movs	r0, #31
 8000878:	f000 fac9 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800087c:	201f      	movs	r0, #31
 800087e:	f000 fae2 	bl	8000e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2105      	movs	r1, #5
 8000886:	2020      	movs	r0, #32
 8000888:	f000 fac1 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800088c:	2020      	movs	r0, #32
 800088e:	f000 fada 	bl	8000e46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40005400 	.word	0x40005400
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010c00 	.word	0x40010c00
 80008a8:	20000b84 	.word	0x20000b84
 80008ac:	40020080 	.word	0x40020080

080008b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008c0:	d113      	bne.n	80008ea <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <HAL_TIM_PWM_MspInit+0x44>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	4a0b      	ldr	r2, [pc, #44]	@ (80008f4 <HAL_TIM_PWM_MspInit+0x44>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	61d3      	str	r3, [r2, #28]
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <HAL_TIM_PWM_MspInit+0x44>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2105      	movs	r1, #5
 80008de:	201c      	movs	r0, #28
 80008e0:	f000 fa95 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008e4:	201c      	movs	r0, #28
 80008e6:	f000 faae 	bl	8000e46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000916:	d117      	bne.n	8000948 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b0d      	ldr	r3, [pc, #52]	@ (8000950 <HAL_TIM_MspPostInit+0x58>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a0c      	ldr	r2, [pc, #48]	@ (8000950 <HAL_TIM_MspPostInit+0x58>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <HAL_TIM_MspPostInit+0x58>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000930:	2301      	movs	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2302      	movs	r3, #2
 800093a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	4619      	mov	r1, r3
 8000942:	4804      	ldr	r0, [pc, #16]	@ (8000954 <HAL_TIM_MspPostInit+0x5c>)
 8000944:	f000 fcb0 	bl	80012a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40021000 	.word	0x40021000
 8000954:	40010800 	.word	0x40010800

08000958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a1a      	ldr	r2, [pc, #104]	@ (80009dc <HAL_UART_MspInit+0x84>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d12c      	bne.n	80009d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000978:	4b19      	ldr	r3, [pc, #100]	@ (80009e0 <HAL_UART_MspInit+0x88>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a18      	ldr	r2, [pc, #96]	@ (80009e0 <HAL_UART_MspInit+0x88>)
 800097e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <HAL_UART_MspInit+0x88>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <HAL_UART_MspInit+0x88>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a12      	ldr	r2, [pc, #72]	@ (80009e0 <HAL_UART_MspInit+0x88>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <HAL_UART_MspInit+0x88>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ae:	2312      	movs	r3, #18
 80009b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4619      	mov	r1, r3
 80009bc:	4809      	ldr	r0, [pc, #36]	@ (80009e4 <HAL_UART_MspInit+0x8c>)
 80009be:	f000 fc73 	bl	80012a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2105      	movs	r1, #5
 80009c6:	2025      	movs	r0, #37	@ 0x25
 80009c8:	f000 fa21 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009cc:	2025      	movs	r0, #37	@ 0x25
 80009ce:	f000 fa3a 	bl	8000e46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40013800 	.word	0x40013800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010800 	.word	0x40010800

080009e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	@ 0x30
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009fe:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab8 <HAL_InitTick+0xd0>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	4a2d      	ldr	r2, [pc, #180]	@ (8000ab8 <HAL_InitTick+0xd0>)
 8000a04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a08:	6193      	str	r3, [r2, #24]
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab8 <HAL_InitTick+0xd0>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a16:	f107 020c 	add.w	r2, r7, #12
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 fff1 	bl	8003a08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a26:	f002 ffdb 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 8000a2a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a2e:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <HAL_InitTick+0xd4>)
 8000a30:	fba2 2303 	umull	r2, r3, r2, r3
 8000a34:	0c9b      	lsrs	r3, r3, #18
 8000a36:	3b01      	subs	r3, #1
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <HAL_InitTick+0xd8>)
 8000a3c:	4a21      	ldr	r2, [pc, #132]	@ (8000ac4 <HAL_InitTick+0xdc>)
 8000a3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <HAL_InitTick+0xd8>)
 8000a42:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a46:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a48:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac0 <HAL_InitTick+0xd8>)
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac0 <HAL_InitTick+0xd8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <HAL_InitTick+0xd8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <HAL_InitTick+0xd8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a60:	4817      	ldr	r0, [pc, #92]	@ (8000ac0 <HAL_InitTick+0xd8>)
 8000a62:	f003 f81f 	bl	8003aa4 <HAL_TIM_Base_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d11b      	bne.n	8000aac <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a74:	4812      	ldr	r0, [pc, #72]	@ (8000ac0 <HAL_InitTick+0xd8>)
 8000a76:	f003 f86d 	bl	8003b54 <HAL_TIM_Base_Start_IT>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000a80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d111      	bne.n	8000aac <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a88:	2019      	movs	r0, #25
 8000a8a:	f000 f9dc 	bl	8000e46 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d808      	bhi.n	8000aa6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	2019      	movs	r0, #25
 8000a9a:	f000 f9b8 	bl	8000e0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <HAL_InitTick+0xe0>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	e002      	b.n	8000aac <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000aac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3730      	adds	r7, #48	@ 0x30
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	431bde83 	.word	0x431bde83
 8000ac0:	20000c68 	.word	0x20000c68
 8000ac4:	40012c00 	.word	0x40012c00
 8000ac8:	20000004 	.word	0x20000004

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <HardFault_Handler+0x4>

08000adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <MemManage_Handler+0x4>

08000ae4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <DMA1_Channel7_IRQHandler+0x10>)
 8000b06:	f000 fabb 	bl	8001080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000b84 	.word	0x20000b84

08000b14 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <TIM1_UP_IRQHandler+0x10>)
 8000b1a:	f003 f96f 	bl	8003dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000c68 	.word	0x20000c68

08000b28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <TIM2_IRQHandler+0x10>)
 8000b2e:	f003 f965 	bl	8003dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000bc8 	.word	0x20000bc8

08000b3c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b40:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <I2C1_EV_IRQHandler+0x10>)
 8000b42:	f000 fea5 	bl	8001890 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000b30 	.word	0x20000b30

08000b50 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b54:	4802      	ldr	r0, [pc, #8]	@ (8000b60 <I2C1_ER_IRQHandler+0x10>)
 8000b56:	f000 ffee 	bl	8001b36 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000b30 	.word	0x20000b30

08000b64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b68:	4802      	ldr	r0, [pc, #8]	@ (8000b74 <USART1_IRQHandler+0x10>)
 8000b6a:	f003 ff77 	bl	8004a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000c10 	.word	0x20000c10

08000b78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <HAL_UARTEx_RxEventCallback>:
	HAL_HalfDuplex_EnableReceiver(&huart1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 8000b90:	221e      	movs	r2, #30
 8000b92:	4904      	ldr	r1, [pc, #16]	@ (8000ba4 <HAL_UARTEx_RxEventCallback+0x20>)
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <HAL_UARTEx_RxEventCallback+0x24>)
 8000b96:	f003 ff03 	bl	80049a0 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000cb0 	.word	0x20000cb0
 8000ba8:	20000c10 	.word	0x20000c10

08000bac <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8000bac:	f7ff ffe4 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb0:	480b      	ldr	r0, [pc, #44]	@ (8000be0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bb2:	490c      	ldr	r1, [pc, #48]	@ (8000be4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000be8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a09      	ldr	r2, [pc, #36]	@ (8000bec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bc8:	4c09      	ldr	r4, [pc, #36]	@ (8000bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f006 f941 	bl	8006e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bda:	f7ff fb87 	bl	80002ec <main>
  bx lr
 8000bde:	4770      	bx	lr
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000be8:	0800701c 	.word	0x0800701c
  ldr r2, =_sbss
 8000bec:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000bf0:	20001b78 	.word	0x20001b78

08000bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_2_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_Init+0x28>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	@ (8000c20 <HAL_Init+0x28>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f8f5 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f7ff feea 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fd9a 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <HAL_IncTick+0x1c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a03      	ldr	r2, [pc, #12]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000cd0 	.word	0x20000cd0

08000c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b02      	ldr	r3, [pc, #8]	@ (8000c58 <HAL_GetTick+0x10>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	20000cd0 	.word	0x20000cd0

08000c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c64:	f7ff fff0 	bl	8000c48 <HAL_GetTick>
 8000c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c74:	d005      	beq.n	8000c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <HAL_Delay+0x44>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c82:	bf00      	nop
 8000c84:	f7ff ffe0 	bl	8000c48 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d8f7      	bhi.n	8000c84 <HAL_Delay+0x28>
  {
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4906      	ldr	r1, [pc, #24]	@ (8000d3c <__NVIC_EnableIRQ+0x34>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	@ (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	@ (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	@ 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	@ 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff4f 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff64 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ffb2 	bl	8000d94 <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff81 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff57 	bl	8000d08 <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e043      	b.n	8000f02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b22      	ldr	r3, [pc, #136]	@ (8000f0c <HAL_DMA_Init+0xa8>)
 8000e82:	4413      	add	r3, r2
 8000e84:	4a22      	ldr	r2, [pc, #136]	@ (8000f10 <HAL_DMA_Init+0xac>)
 8000e86:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8a:	091b      	lsrs	r3, r3, #4
 8000e8c:	009a      	lsls	r2, r3, #2
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a1f      	ldr	r2, [pc, #124]	@ (8000f14 <HAL_DMA_Init+0xb0>)
 8000e96:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000eae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000eb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	bffdfff8 	.word	0xbffdfff8
 8000f10:	cccccccd 	.word	0xcccccccd
 8000f14:	40020000 	.word	0x40020000

08000f18 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d008      	beq.n	8000f42 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2204      	movs	r2, #4
 8000f34:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e020      	b.n	8000f84 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 020e 	bic.w	r2, r2, #14
 8000f50:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0201 	bic.w	r2, r2, #1
 8000f60:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
	...

08000f90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d005      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2204      	movs	r2, #4
 8000fac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	e051      	b.n	8001058 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 020e 	bic.w	r2, r2, #14
 8000fc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0201 	bic.w	r2, r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a22      	ldr	r2, [pc, #136]	@ (8001064 <HAL_DMA_Abort_IT+0xd4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d029      	beq.n	8001032 <HAL_DMA_Abort_IT+0xa2>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a21      	ldr	r2, [pc, #132]	@ (8001068 <HAL_DMA_Abort_IT+0xd8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d022      	beq.n	800102e <HAL_DMA_Abort_IT+0x9e>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1f      	ldr	r2, [pc, #124]	@ (800106c <HAL_DMA_Abort_IT+0xdc>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01a      	beq.n	8001028 <HAL_DMA_Abort_IT+0x98>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8001070 <HAL_DMA_Abort_IT+0xe0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d012      	beq.n	8001022 <HAL_DMA_Abort_IT+0x92>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a1c      	ldr	r2, [pc, #112]	@ (8001074 <HAL_DMA_Abort_IT+0xe4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d00a      	beq.n	800101c <HAL_DMA_Abort_IT+0x8c>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <HAL_DMA_Abort_IT+0xe8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d102      	bne.n	8001016 <HAL_DMA_Abort_IT+0x86>
 8001010:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001014:	e00e      	b.n	8001034 <HAL_DMA_Abort_IT+0xa4>
 8001016:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800101a:	e00b      	b.n	8001034 <HAL_DMA_Abort_IT+0xa4>
 800101c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001020:	e008      	b.n	8001034 <HAL_DMA_Abort_IT+0xa4>
 8001022:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001026:	e005      	b.n	8001034 <HAL_DMA_Abort_IT+0xa4>
 8001028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800102c:	e002      	b.n	8001034 <HAL_DMA_Abort_IT+0xa4>
 800102e:	2310      	movs	r3, #16
 8001030:	e000      	b.n	8001034 <HAL_DMA_Abort_IT+0xa4>
 8001032:	2301      	movs	r3, #1
 8001034:	4a11      	ldr	r2, [pc, #68]	@ (800107c <HAL_DMA_Abort_IT+0xec>)
 8001036:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	4798      	blx	r3
    } 
  }
  return status;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40020008 	.word	0x40020008
 8001068:	4002001c 	.word	0x4002001c
 800106c:	40020030 	.word	0x40020030
 8001070:	40020044 	.word	0x40020044
 8001074:	40020058 	.word	0x40020058
 8001078:	4002006c 	.word	0x4002006c
 800107c:	40020000 	.word	0x40020000

08001080 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	2204      	movs	r2, #4
 800109e:	409a      	lsls	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d04f      	beq.n	8001148 <HAL_DMA_IRQHandler+0xc8>
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d04a      	beq.n	8001148 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0320 	and.w	r3, r3, #32
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d107      	bne.n	80010d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0204 	bic.w	r2, r2, #4
 80010ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a66      	ldr	r2, [pc, #408]	@ (8001270 <HAL_DMA_IRQHandler+0x1f0>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d029      	beq.n	800112e <HAL_DMA_IRQHandler+0xae>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a65      	ldr	r2, [pc, #404]	@ (8001274 <HAL_DMA_IRQHandler+0x1f4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d022      	beq.n	800112a <HAL_DMA_IRQHandler+0xaa>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a63      	ldr	r2, [pc, #396]	@ (8001278 <HAL_DMA_IRQHandler+0x1f8>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d01a      	beq.n	8001124 <HAL_DMA_IRQHandler+0xa4>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a62      	ldr	r2, [pc, #392]	@ (800127c <HAL_DMA_IRQHandler+0x1fc>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d012      	beq.n	800111e <HAL_DMA_IRQHandler+0x9e>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a60      	ldr	r2, [pc, #384]	@ (8001280 <HAL_DMA_IRQHandler+0x200>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00a      	beq.n	8001118 <HAL_DMA_IRQHandler+0x98>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a5f      	ldr	r2, [pc, #380]	@ (8001284 <HAL_DMA_IRQHandler+0x204>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d102      	bne.n	8001112 <HAL_DMA_IRQHandler+0x92>
 800110c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001110:	e00e      	b.n	8001130 <HAL_DMA_IRQHandler+0xb0>
 8001112:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001116:	e00b      	b.n	8001130 <HAL_DMA_IRQHandler+0xb0>
 8001118:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800111c:	e008      	b.n	8001130 <HAL_DMA_IRQHandler+0xb0>
 800111e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001122:	e005      	b.n	8001130 <HAL_DMA_IRQHandler+0xb0>
 8001124:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001128:	e002      	b.n	8001130 <HAL_DMA_IRQHandler+0xb0>
 800112a:	2340      	movs	r3, #64	@ 0x40
 800112c:	e000      	b.n	8001130 <HAL_DMA_IRQHandler+0xb0>
 800112e:	2304      	movs	r3, #4
 8001130:	4a55      	ldr	r2, [pc, #340]	@ (8001288 <HAL_DMA_IRQHandler+0x208>)
 8001132:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 8094 	beq.w	8001266 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001146:	e08e      	b.n	8001266 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	2202      	movs	r2, #2
 800114e:	409a      	lsls	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4013      	ands	r3, r2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d056      	beq.n	8001206 <HAL_DMA_IRQHandler+0x186>
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d051      	beq.n	8001206 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10b      	bne.n	8001188 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 020a 	bic.w	r2, r2, #10
 800117e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a38      	ldr	r2, [pc, #224]	@ (8001270 <HAL_DMA_IRQHandler+0x1f0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d029      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x166>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a37      	ldr	r2, [pc, #220]	@ (8001274 <HAL_DMA_IRQHandler+0x1f4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d022      	beq.n	80011e2 <HAL_DMA_IRQHandler+0x162>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a35      	ldr	r2, [pc, #212]	@ (8001278 <HAL_DMA_IRQHandler+0x1f8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d01a      	beq.n	80011dc <HAL_DMA_IRQHandler+0x15c>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a34      	ldr	r2, [pc, #208]	@ (800127c <HAL_DMA_IRQHandler+0x1fc>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d012      	beq.n	80011d6 <HAL_DMA_IRQHandler+0x156>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a32      	ldr	r2, [pc, #200]	@ (8001280 <HAL_DMA_IRQHandler+0x200>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00a      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x150>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a31      	ldr	r2, [pc, #196]	@ (8001284 <HAL_DMA_IRQHandler+0x204>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d102      	bne.n	80011ca <HAL_DMA_IRQHandler+0x14a>
 80011c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80011c8:	e00e      	b.n	80011e8 <HAL_DMA_IRQHandler+0x168>
 80011ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011ce:	e00b      	b.n	80011e8 <HAL_DMA_IRQHandler+0x168>
 80011d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011d4:	e008      	b.n	80011e8 <HAL_DMA_IRQHandler+0x168>
 80011d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011da:	e005      	b.n	80011e8 <HAL_DMA_IRQHandler+0x168>
 80011dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011e0:	e002      	b.n	80011e8 <HAL_DMA_IRQHandler+0x168>
 80011e2:	2320      	movs	r3, #32
 80011e4:	e000      	b.n	80011e8 <HAL_DMA_IRQHandler+0x168>
 80011e6:	2302      	movs	r3, #2
 80011e8:	4a27      	ldr	r2, [pc, #156]	@ (8001288 <HAL_DMA_IRQHandler+0x208>)
 80011ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d034      	beq.n	8001266 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001204:	e02f      	b.n	8001266 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	2208      	movs	r2, #8
 800120c:	409a      	lsls	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4013      	ands	r3, r2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d028      	beq.n	8001268 <HAL_DMA_IRQHandler+0x1e8>
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d023      	beq.n	8001268 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 020e 	bic.w	r2, r2, #14
 800122e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001238:	2101      	movs	r1, #1
 800123a:	fa01 f202 	lsl.w	r2, r1, r2
 800123e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	2b00      	cmp	r3, #0
 800125c:	d004      	beq.n	8001268 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	4798      	blx	r3
    }
  }
  return;
 8001266:	bf00      	nop
 8001268:	bf00      	nop
}
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40020008 	.word	0x40020008
 8001274:	4002001c 	.word	0x4002001c
 8001278:	40020030 	.word	0x40020030
 800127c:	40020044 	.word	0x40020044
 8001280:	40020058 	.word	0x40020058
 8001284:	4002006c 	.word	0x4002006c
 8001288:	40020000 	.word	0x40020000

0800128c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800129a:	b2db      	uxtb	r3, r3
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b08b      	sub	sp, #44	@ 0x2c
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ba:	e169      	b.n	8001590 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012bc:	2201      	movs	r2, #1
 80012be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	69fa      	ldr	r2, [r7, #28]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f040 8158 	bne.w	800158a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4a9a      	ldr	r2, [pc, #616]	@ (8001548 <HAL_GPIO_Init+0x2a0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d05e      	beq.n	80013a2 <HAL_GPIO_Init+0xfa>
 80012e4:	4a98      	ldr	r2, [pc, #608]	@ (8001548 <HAL_GPIO_Init+0x2a0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d875      	bhi.n	80013d6 <HAL_GPIO_Init+0x12e>
 80012ea:	4a98      	ldr	r2, [pc, #608]	@ (800154c <HAL_GPIO_Init+0x2a4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d058      	beq.n	80013a2 <HAL_GPIO_Init+0xfa>
 80012f0:	4a96      	ldr	r2, [pc, #600]	@ (800154c <HAL_GPIO_Init+0x2a4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d86f      	bhi.n	80013d6 <HAL_GPIO_Init+0x12e>
 80012f6:	4a96      	ldr	r2, [pc, #600]	@ (8001550 <HAL_GPIO_Init+0x2a8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d052      	beq.n	80013a2 <HAL_GPIO_Init+0xfa>
 80012fc:	4a94      	ldr	r2, [pc, #592]	@ (8001550 <HAL_GPIO_Init+0x2a8>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d869      	bhi.n	80013d6 <HAL_GPIO_Init+0x12e>
 8001302:	4a94      	ldr	r2, [pc, #592]	@ (8001554 <HAL_GPIO_Init+0x2ac>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d04c      	beq.n	80013a2 <HAL_GPIO_Init+0xfa>
 8001308:	4a92      	ldr	r2, [pc, #584]	@ (8001554 <HAL_GPIO_Init+0x2ac>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d863      	bhi.n	80013d6 <HAL_GPIO_Init+0x12e>
 800130e:	4a92      	ldr	r2, [pc, #584]	@ (8001558 <HAL_GPIO_Init+0x2b0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d046      	beq.n	80013a2 <HAL_GPIO_Init+0xfa>
 8001314:	4a90      	ldr	r2, [pc, #576]	@ (8001558 <HAL_GPIO_Init+0x2b0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d85d      	bhi.n	80013d6 <HAL_GPIO_Init+0x12e>
 800131a:	2b12      	cmp	r3, #18
 800131c:	d82a      	bhi.n	8001374 <HAL_GPIO_Init+0xcc>
 800131e:	2b12      	cmp	r3, #18
 8001320:	d859      	bhi.n	80013d6 <HAL_GPIO_Init+0x12e>
 8001322:	a201      	add	r2, pc, #4	@ (adr r2, 8001328 <HAL_GPIO_Init+0x80>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	080013a3 	.word	0x080013a3
 800132c:	0800137d 	.word	0x0800137d
 8001330:	0800138f 	.word	0x0800138f
 8001334:	080013d1 	.word	0x080013d1
 8001338:	080013d7 	.word	0x080013d7
 800133c:	080013d7 	.word	0x080013d7
 8001340:	080013d7 	.word	0x080013d7
 8001344:	080013d7 	.word	0x080013d7
 8001348:	080013d7 	.word	0x080013d7
 800134c:	080013d7 	.word	0x080013d7
 8001350:	080013d7 	.word	0x080013d7
 8001354:	080013d7 	.word	0x080013d7
 8001358:	080013d7 	.word	0x080013d7
 800135c:	080013d7 	.word	0x080013d7
 8001360:	080013d7 	.word	0x080013d7
 8001364:	080013d7 	.word	0x080013d7
 8001368:	080013d7 	.word	0x080013d7
 800136c:	08001385 	.word	0x08001385
 8001370:	08001399 	.word	0x08001399
 8001374:	4a79      	ldr	r2, [pc, #484]	@ (800155c <HAL_GPIO_Init+0x2b4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800137a:	e02c      	b.n	80013d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	623b      	str	r3, [r7, #32]
          break;
 8001382:	e029      	b.n	80013d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	3304      	adds	r3, #4
 800138a:	623b      	str	r3, [r7, #32]
          break;
 800138c:	e024      	b.n	80013d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	3308      	adds	r3, #8
 8001394:	623b      	str	r3, [r7, #32]
          break;
 8001396:	e01f      	b.n	80013d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	330c      	adds	r3, #12
 800139e:	623b      	str	r3, [r7, #32]
          break;
 80013a0:	e01a      	b.n	80013d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d102      	bne.n	80013b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013aa:	2304      	movs	r3, #4
 80013ac:	623b      	str	r3, [r7, #32]
          break;
 80013ae:	e013      	b.n	80013d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d105      	bne.n	80013c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b8:	2308      	movs	r3, #8
 80013ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	611a      	str	r2, [r3, #16]
          break;
 80013c2:	e009      	b.n	80013d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013c4:	2308      	movs	r3, #8
 80013c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	615a      	str	r2, [r3, #20]
          break;
 80013ce:	e003      	b.n	80013d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
          break;
 80013d4:	e000      	b.n	80013d8 <HAL_GPIO_Init+0x130>
          break;
 80013d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2bff      	cmp	r3, #255	@ 0xff
 80013dc:	d801      	bhi.n	80013e2 <HAL_GPIO_Init+0x13a>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	e001      	b.n	80013e6 <HAL_GPIO_Init+0x13e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3304      	adds	r3, #4
 80013e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2bff      	cmp	r3, #255	@ 0xff
 80013ec:	d802      	bhi.n	80013f4 <HAL_GPIO_Init+0x14c>
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	e002      	b.n	80013fa <HAL_GPIO_Init+0x152>
 80013f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f6:	3b08      	subs	r3, #8
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	210f      	movs	r1, #15
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	401a      	ands	r2, r3
 800140c:	6a39      	ldr	r1, [r7, #32]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	fa01 f303 	lsl.w	r3, r1, r3
 8001414:	431a      	orrs	r2, r3
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 80b1 	beq.w	800158a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001428:	4b4d      	ldr	r3, [pc, #308]	@ (8001560 <HAL_GPIO_Init+0x2b8>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a4c      	ldr	r2, [pc, #304]	@ (8001560 <HAL_GPIO_Init+0x2b8>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b4a      	ldr	r3, [pc, #296]	@ (8001560 <HAL_GPIO_Init+0x2b8>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001440:	4a48      	ldr	r2, [pc, #288]	@ (8001564 <HAL_GPIO_Init+0x2bc>)
 8001442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001444:	089b      	lsrs	r3, r3, #2
 8001446:	3302      	adds	r3, #2
 8001448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800144e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	220f      	movs	r2, #15
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a40      	ldr	r2, [pc, #256]	@ (8001568 <HAL_GPIO_Init+0x2c0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d013      	beq.n	8001494 <HAL_GPIO_Init+0x1ec>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a3f      	ldr	r2, [pc, #252]	@ (800156c <HAL_GPIO_Init+0x2c4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d00d      	beq.n	8001490 <HAL_GPIO_Init+0x1e8>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a3e      	ldr	r2, [pc, #248]	@ (8001570 <HAL_GPIO_Init+0x2c8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d007      	beq.n	800148c <HAL_GPIO_Init+0x1e4>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a3d      	ldr	r2, [pc, #244]	@ (8001574 <HAL_GPIO_Init+0x2cc>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d101      	bne.n	8001488 <HAL_GPIO_Init+0x1e0>
 8001484:	2303      	movs	r3, #3
 8001486:	e006      	b.n	8001496 <HAL_GPIO_Init+0x1ee>
 8001488:	2304      	movs	r3, #4
 800148a:	e004      	b.n	8001496 <HAL_GPIO_Init+0x1ee>
 800148c:	2302      	movs	r3, #2
 800148e:	e002      	b.n	8001496 <HAL_GPIO_Init+0x1ee>
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <HAL_GPIO_Init+0x1ee>
 8001494:	2300      	movs	r3, #0
 8001496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001498:	f002 0203 	and.w	r2, r2, #3
 800149c:	0092      	lsls	r2, r2, #2
 800149e:	4093      	lsls	r3, r2
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014a6:	492f      	ldr	r1, [pc, #188]	@ (8001564 <HAL_GPIO_Init+0x2bc>)
 80014a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	3302      	adds	r3, #2
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	492c      	ldr	r1, [pc, #176]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	608b      	str	r3, [r1, #8]
 80014cc:	e006      	b.n	80014dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	4928      	ldr	r1, [pc, #160]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 80014d8:	4013      	ands	r3, r2
 80014da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014e8:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	4922      	ldr	r1, [pc, #136]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	60cb      	str	r3, [r1, #12]
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014f6:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	491e      	ldr	r1, [pc, #120]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 8001500:	4013      	ands	r3, r2
 8001502:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001510:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4918      	ldr	r1, [pc, #96]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800151e:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	43db      	mvns	r3, r3
 8001526:	4914      	ldr	r1, [pc, #80]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 8001528:	4013      	ands	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d021      	beq.n	800157c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	490e      	ldr	r1, [pc, #56]	@ (8001578 <HAL_GPIO_Init+0x2d0>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
 8001544:	e021      	b.n	800158a <HAL_GPIO_Init+0x2e2>
 8001546:	bf00      	nop
 8001548:	10320000 	.word	0x10320000
 800154c:	10310000 	.word	0x10310000
 8001550:	10220000 	.word	0x10220000
 8001554:	10210000 	.word	0x10210000
 8001558:	10120000 	.word	0x10120000
 800155c:	10110000 	.word	0x10110000
 8001560:	40021000 	.word	0x40021000
 8001564:	40010000 	.word	0x40010000
 8001568:	40010800 	.word	0x40010800
 800156c:	40010c00 	.word	0x40010c00
 8001570:	40011000 	.word	0x40011000
 8001574:	40011400 	.word	0x40011400
 8001578:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <HAL_GPIO_Init+0x304>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	43db      	mvns	r3, r3
 8001584:	4909      	ldr	r1, [pc, #36]	@ (80015ac <HAL_GPIO_Init+0x304>)
 8001586:	4013      	ands	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	3301      	adds	r3, #1
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	fa22 f303 	lsr.w	r3, r2, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	f47f ae8e 	bne.w	80012bc <HAL_GPIO_Init+0x14>
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	372c      	adds	r7, #44	@ 0x2c
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	40010400 	.word	0x40010400

080015b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
 80015bc:	4613      	mov	r3, r2
 80015be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c0:	787b      	ldrb	r3, [r7, #1]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015cc:	e003      	b.n	80015d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	041a      	lsls	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	611a      	str	r2, [r3, #16]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e12b      	b.n	800184a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d106      	bne.n	800160c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff f8d8 	bl	80007bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2224      	movs	r2, #36	@ 0x24
 8001610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001642:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001644:	f002 f9b8 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 8001648:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4a81      	ldr	r2, [pc, #516]	@ (8001854 <HAL_I2C_Init+0x274>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d807      	bhi.n	8001664 <HAL_I2C_Init+0x84>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4a80      	ldr	r2, [pc, #512]	@ (8001858 <HAL_I2C_Init+0x278>)
 8001658:	4293      	cmp	r3, r2
 800165a:	bf94      	ite	ls
 800165c:	2301      	movls	r3, #1
 800165e:	2300      	movhi	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	e006      	b.n	8001672 <HAL_I2C_Init+0x92>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4a7d      	ldr	r2, [pc, #500]	@ (800185c <HAL_I2C_Init+0x27c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	bf94      	ite	ls
 800166c:	2301      	movls	r3, #1
 800166e:	2300      	movhi	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e0e7      	b.n	800184a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4a78      	ldr	r2, [pc, #480]	@ (8001860 <HAL_I2C_Init+0x280>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	0c9b      	lsrs	r3, r3, #18
 8001684:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	430a      	orrs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001854 <HAL_I2C_Init+0x274>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d802      	bhi.n	80016b4 <HAL_I2C_Init+0xd4>
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3301      	adds	r3, #1
 80016b2:	e009      	b.n	80016c8 <HAL_I2C_Init+0xe8>
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016ba:	fb02 f303 	mul.w	r3, r2, r3
 80016be:	4a69      	ldr	r2, [pc, #420]	@ (8001864 <HAL_I2C_Init+0x284>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	099b      	lsrs	r3, r3, #6
 80016c6:	3301      	adds	r3, #1
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	430b      	orrs	r3, r1
 80016ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	495c      	ldr	r1, [pc, #368]	@ (8001854 <HAL_I2C_Init+0x274>)
 80016e4:	428b      	cmp	r3, r1
 80016e6:	d819      	bhi.n	800171c <HAL_I2C_Init+0x13c>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	1e59      	subs	r1, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80016f6:	1c59      	adds	r1, r3, #1
 80016f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016fc:	400b      	ands	r3, r1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00a      	beq.n	8001718 <HAL_I2C_Init+0x138>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1e59      	subs	r1, r3, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001710:	3301      	adds	r3, #1
 8001712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001716:	e051      	b.n	80017bc <HAL_I2C_Init+0x1dc>
 8001718:	2304      	movs	r3, #4
 800171a:	e04f      	b.n	80017bc <HAL_I2C_Init+0x1dc>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d111      	bne.n	8001748 <HAL_I2C_Init+0x168>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1e58      	subs	r0, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6859      	ldr	r1, [r3, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	440b      	add	r3, r1
 8001732:	fbb0 f3f3 	udiv	r3, r0, r3
 8001736:	3301      	adds	r3, #1
 8001738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf0c      	ite	eq
 8001740:	2301      	moveq	r3, #1
 8001742:	2300      	movne	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	e012      	b.n	800176e <HAL_I2C_Init+0x18e>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1e58      	subs	r0, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	0099      	lsls	r1, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	fbb0 f3f3 	udiv	r3, r0, r3
 800175e:	3301      	adds	r3, #1
 8001760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_Init+0x196>
 8001772:	2301      	movs	r3, #1
 8001774:	e022      	b.n	80017bc <HAL_I2C_Init+0x1dc>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10e      	bne.n	800179c <HAL_I2C_Init+0x1bc>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1e58      	subs	r0, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6859      	ldr	r1, [r3, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	440b      	add	r3, r1
 800178c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001790:	3301      	adds	r3, #1
 8001792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800179a:	e00f      	b.n	80017bc <HAL_I2C_Init+0x1dc>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1e58      	subs	r0, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6859      	ldr	r1, [r3, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	0099      	lsls	r1, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b2:	3301      	adds	r3, #1
 80017b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	6809      	ldr	r1, [r1, #0]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69da      	ldr	r2, [r3, #28]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6911      	ldr	r1, [r2, #16]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68d2      	ldr	r2, [r2, #12]
 80017f6:	4311      	orrs	r1, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	430b      	orrs	r3, r1
 80017fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0201 	orr.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2220      	movs	r2, #32
 8001836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	000186a0 	.word	0x000186a0
 8001858:	001e847f 	.word	0x001e847f
 800185c:	003d08ff 	.word	0x003d08ff
 8001860:	431bde83 	.word	0x431bde83
 8001864:	10624dd3 	.word	0x10624dd3

08001868 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800187a:	2b80      	cmp	r3, #128	@ 0x80
 800187c:	d103      	bne.n	8001886 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  }
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80018b0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018b8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	2b10      	cmp	r3, #16
 80018be:	d003      	beq.n	80018c8 <HAL_I2C_EV_IRQHandler+0x38>
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b40      	cmp	r3, #64	@ 0x40
 80018c4:	f040 80b1 	bne.w	8001a2a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10d      	bne.n	80018fe <HAL_I2C_EV_IRQHandler+0x6e>
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80018e8:	d003      	beq.n	80018f2 <HAL_I2C_EV_IRQHandler+0x62>
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80018f0:	d101      	bne.n	80018f6 <HAL_I2C_EV_IRQHandler+0x66>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_I2C_EV_IRQHandler+0x68>
 80018f6:	2300      	movs	r3, #0
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	f000 8114 	beq.w	8001b26 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00b      	beq.n	8001920 <HAL_I2C_EV_IRQHandler+0x90>
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800190e:	2b00      	cmp	r3, #0
 8001910:	d006      	beq.n	8001920 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f001 fc6c 	bl	80031f0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 fd6b 	bl	80023f4 <I2C_Master_SB>
 800191e:	e083      	b.n	8001a28 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d008      	beq.n	800193c <HAL_I2C_EV_IRQHandler+0xac>
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fde2 	bl	80024fe <I2C_Master_ADD10>
 800193a:	e075      	b.n	8001a28 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d008      	beq.n	8001958 <HAL_I2C_EV_IRQHandler+0xc8>
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800194c:	2b00      	cmp	r3, #0
 800194e:	d003      	beq.n	8001958 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fdfd 	bl	8002550 <I2C_Master_ADDR>
 8001956:	e067      	b.n	8001a28 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d036      	beq.n	80019d0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800196c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001970:	f000 80db 	beq.w	8001b2a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00d      	beq.n	800199a <HAL_I2C_EV_IRQHandler+0x10a>
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001984:	2b00      	cmp	r3, #0
 8001986:	d008      	beq.n	800199a <HAL_I2C_EV_IRQHandler+0x10a>
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d103      	bne.n	800199a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f9cb 	bl	8001d2e <I2C_MasterTransmit_TXE>
 8001998:	e046      	b.n	8001a28 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80c2 	beq.w	8001b2a <HAL_I2C_EV_IRQHandler+0x29a>
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80bc 	beq.w	8001b2a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80019b2:	7bbb      	ldrb	r3, [r7, #14]
 80019b4:	2b21      	cmp	r3, #33	@ 0x21
 80019b6:	d103      	bne.n	80019c0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 fa54 	bl	8001e66 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019be:	e0b4      	b.n	8001b2a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2b40      	cmp	r3, #64	@ 0x40
 80019c4:	f040 80b1 	bne.w	8001b2a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fac2 	bl	8001f52 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019ce:	e0ac      	b.n	8001b2a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80019de:	f000 80a4 	beq.w	8001b2a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00d      	beq.n	8001a08 <HAL_I2C_EV_IRQHandler+0x178>
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d008      	beq.n	8001a08 <HAL_I2C_EV_IRQHandler+0x178>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d103      	bne.n	8001a08 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 fb3e 	bl	8002082 <I2C_MasterReceive_RXNE>
 8001a06:	e00f      	b.n	8001a28 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 808b 	beq.w	8001b2a <HAL_I2C_EV_IRQHandler+0x29a>
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8085 	beq.w	8001b2a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 fbf6 	bl	8002212 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a26:	e080      	b.n	8001b2a <HAL_I2C_EV_IRQHandler+0x29a>
 8001a28:	e07f      	b.n	8001b2a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d004      	beq.n	8001a3c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	e007      	b.n	8001a4c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d011      	beq.n	8001a7a <HAL_I2C_EV_IRQHandler+0x1ea>
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00c      	beq.n	8001a7a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001a70:	69b9      	ldr	r1, [r7, #24]
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 ffc3 	bl	80029fe <I2C_Slave_ADDR>
 8001a78:	e05a      	b.n	8001b30 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_I2C_EV_IRQHandler+0x206>
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fffe 	bl	8002a90 <I2C_Slave_STOPF>
 8001a94:	e04c      	b.n	8001b30 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a96:	7bbb      	ldrb	r3, [r7, #14]
 8001a98:	2b21      	cmp	r3, #33	@ 0x21
 8001a9a:	d002      	beq.n	8001aa2 <HAL_I2C_EV_IRQHandler+0x212>
 8001a9c:	7bbb      	ldrb	r3, [r7, #14]
 8001a9e:	2b29      	cmp	r3, #41	@ 0x29
 8001aa0:	d120      	bne.n	8001ae4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x238>
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x238>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d103      	bne.n	8001ac8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 fee0 	bl	8002886 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ac6:	e032      	b.n	8001b2e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d02d      	beq.n	8001b2e <HAL_I2C_EV_IRQHandler+0x29e>
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d028      	beq.n	8001b2e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 ff0f 	bl	8002900 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ae2:	e024      	b.n	8001b2e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00d      	beq.n	8001b0a <HAL_I2C_EV_IRQHandler+0x27a>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_I2C_EV_IRQHandler+0x27a>
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d103      	bne.n	8001b0a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 ff1c 	bl	8002940 <I2C_SlaveReceive_RXNE>
 8001b08:	e012      	b.n	8001b30 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00d      	beq.n	8001b30 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d008      	beq.n	8001b30 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 ff4c 	bl	80029bc <I2C_SlaveReceive_BTF>
 8001b24:	e004      	b.n	8001b30 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001b26:	bf00      	nop
 8001b28:	e002      	b.n	8001b30 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b2a:	bf00      	nop
 8001b2c:	e000      	b.n	8001b30 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b2e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001b30:	3720      	adds	r7, #32
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b08a      	sub	sp, #40	@ 0x28
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001b58:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d015      	beq.n	8001b90 <HAL_I2C_ER_IRQHandler+0x5a>
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d010      	beq.n	8001b90 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001b7e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b8e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00d      	beq.n	8001bb6 <HAL_I2C_ER_IRQHandler+0x80>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	f043 0302 	orr.w	r3, r3, #2
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001bb4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d03e      	beq.n	8001c3e <HAL_I2C_ER_IRQHandler+0x108>
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d039      	beq.n	8001c3e <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8001bca:	7efb      	ldrb	r3, [r7, #27]
 8001bcc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bdc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001be4:	7ebb      	ldrb	r3, [r7, #26]
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d112      	bne.n	8001c10 <HAL_I2C_ER_IRQHandler+0xda>
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10f      	bne.n	8001c10 <HAL_I2C_ER_IRQHandler+0xda>
 8001bf0:	7cfb      	ldrb	r3, [r7, #19]
 8001bf2:	2b21      	cmp	r3, #33	@ 0x21
 8001bf4:	d008      	beq.n	8001c08 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001bf6:	7cfb      	ldrb	r3, [r7, #19]
 8001bf8:	2b29      	cmp	r3, #41	@ 0x29
 8001bfa:	d005      	beq.n	8001c08 <HAL_I2C_ER_IRQHandler+0xd2>
 8001bfc:	7cfb      	ldrb	r3, [r7, #19]
 8001bfe:	2b28      	cmp	r3, #40	@ 0x28
 8001c00:	d106      	bne.n	8001c10 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b21      	cmp	r3, #33	@ 0x21
 8001c06:	d103      	bne.n	8001c10 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f001 f871 	bl	8002cf0 <I2C_Slave_AF>
 8001c0e:	e016      	b.n	8001c3e <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c18:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c22:	7efb      	ldrb	r3, [r7, #27]
 8001c24:	2b10      	cmp	r3, #16
 8001c26:	d002      	beq.n	8001c2e <HAL_I2C_ER_IRQHandler+0xf8>
 8001c28:	7efb      	ldrb	r3, [r7, #27]
 8001c2a:	2b40      	cmp	r3, #64	@ 0x40
 8001c2c:	d107      	bne.n	8001c3e <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c3c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00d      	beq.n	8001c64 <HAL_I2C_ER_IRQHandler+0x12e>
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d008      	beq.n	8001c64 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	f043 0308 	orr.w	r3, r3, #8
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001c62:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d008      	beq.n	8001c7c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f001 f8ae 	bl	8002dd8 <I2C_ITError>
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	3728      	adds	r7, #40	@ 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	70fb      	strb	r3, [r7, #3]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d3c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d44:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d150      	bne.n	8001df6 <I2C_MasterTransmit_TXE+0xc8>
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	2b21      	cmp	r3, #33	@ 0x21
 8001d58:	d14d      	bne.n	8001df6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d01d      	beq.n	8001d9c <I2C_MasterTransmit_TXE+0x6e>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d01a      	beq.n	8001d9c <I2C_MasterTransmit_TXE+0x6e>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d6c:	d016      	beq.n	8001d9c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d7c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2211      	movs	r2, #17
 8001d82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff75 	bl	8001c84 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d9a:	e060      	b.n	8001e5e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001daa:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dba:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b40      	cmp	r3, #64	@ 0x40
 8001dd4:	d107      	bne.n	8001de6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ff8a 	bl	8001cf8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001de4:	e03b      	b.n	8001e5e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ff48 	bl	8001c84 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001df4:	e033      	b.n	8001e5e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	2b21      	cmp	r3, #33	@ 0x21
 8001dfa:	d005      	beq.n	8001e08 <I2C_MasterTransmit_TXE+0xda>
 8001dfc:	7bbb      	ldrb	r3, [r7, #14]
 8001dfe:	2b40      	cmp	r3, #64	@ 0x40
 8001e00:	d12d      	bne.n	8001e5e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	2b22      	cmp	r3, #34	@ 0x22
 8001e06:	d12a      	bne.n	8001e5e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d108      	bne.n	8001e24 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e20:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001e22:	e01c      	b.n	8001e5e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b40      	cmp	r3, #64	@ 0x40
 8001e2e:	d103      	bne.n	8001e38 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f88e 	bl	8001f52 <I2C_MemoryTransmit_TXE_BTF>
}
 8001e36:	e012      	b.n	8001e5e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001e5c:	e7ff      	b.n	8001e5e <I2C_MasterTransmit_TXE+0x130>
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e72:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b21      	cmp	r3, #33	@ 0x21
 8001e7e:	d164      	bne.n	8001f4a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d012      	beq.n	8001eb0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	781a      	ldrb	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001eae:	e04c      	b.n	8001f4a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d01d      	beq.n	8001ef2 <I2C_MasterTransmit_BTF+0x8c>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d01a      	beq.n	8001ef2 <I2C_MasterTransmit_BTF+0x8c>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ec2:	d016      	beq.n	8001ef2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001ed2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2211      	movs	r2, #17
 8001ed8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff feca 	bl	8001c84 <HAL_I2C_MasterTxCpltCallback>
}
 8001ef0:	e02b      	b.n	8001f4a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f00:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f10:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b40      	cmp	r3, #64	@ 0x40
 8001f2a:	d107      	bne.n	8001f3c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fedf 	bl	8001cf8 <HAL_I2C_MemTxCpltCallback>
}
 8001f3a:	e006      	b.n	8001f4a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fe9d 	bl	8001c84 <HAL_I2C_MasterTxCpltCallback>
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f60:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d11d      	bne.n	8001fa6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10b      	bne.n	8001f8a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f82:	1c9a      	adds	r2, r3, #2
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001f88:	e077      	b.n	800207a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	121b      	asrs	r3, r3, #8
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001fa4:	e069      	b.n	800207a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d10b      	bne.n	8001fc6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001fc4:	e059      	b.n	800207a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d152      	bne.n	8002074 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	2b22      	cmp	r3, #34	@ 0x22
 8001fd2:	d10d      	bne.n	8001ff0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fe2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001fee:	e044      	b.n	800207a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d015      	beq.n	8002026 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	2b21      	cmp	r3, #33	@ 0x21
 8001ffe:	d112      	bne.n	8002026 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002024:	e029      	b.n	800207a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d124      	bne.n	800207a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	2b21      	cmp	r3, #33	@ 0x21
 8002034:	d121      	bne.n	800207a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002044:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002054:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff fe43 	bl	8001cf8 <HAL_I2C_MemTxCpltCallback>
}
 8002072:	e002      	b.n	800207a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff fbf7 	bl	8001868 <I2C_Flush_DR>
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b22      	cmp	r3, #34	@ 0x22
 8002094:	f040 80b9 	bne.w	800220a <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d921      	bls.n	80020f0 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	2b03      	cmp	r3, #3
 80020da:	f040 8096 	bne.w	800220a <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020ec:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80020ee:	e08c      	b.n	800220a <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d07f      	beq.n	80021f8 <I2C_MasterReceive_RXNE+0x176>
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d002      	beq.n	8002104 <I2C_MasterReceive_RXNE+0x82>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d179      	bne.n	80021f8 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f001 f841 	bl	800318c <I2C_WaitOnSTOPRequestThroughIT>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d14c      	bne.n	80021aa <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800211e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800212e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b40      	cmp	r3, #64	@ 0x40
 8002168:	d10a      	bne.n	8002180 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7fe f82d 	bl	80001d8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800217e:	e044      	b.n	800220a <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b08      	cmp	r3, #8
 800218c:	d002      	beq.n	8002194 <I2C_MasterReceive_RXNE+0x112>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b20      	cmp	r3, #32
 8002192:	d103      	bne.n	800219c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	631a      	str	r2, [r3, #48]	@ 0x30
 800219a:	e002      	b.n	80021a2 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2212      	movs	r2, #18
 80021a0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fd77 	bl	8001c96 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80021a8:	e02f      	b.n	800220a <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80021b8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fd8a 	bl	8001d0a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80021f6:	e008      	b.n	800220a <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002206:	605a      	str	r2, [r3, #4]
}
 8002208:	e7ff      	b.n	800220a <I2C_MasterReceive_RXNE+0x188>
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b04      	cmp	r3, #4
 8002228:	d11b      	bne.n	8002262 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002238:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002260:	e0c4      	b.n	80023ec <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	2b03      	cmp	r3, #3
 800226a:	d129      	bne.n	80022c0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800227a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b04      	cmp	r3, #4
 8002280:	d00a      	beq.n	8002298 <I2C_MasterReceive_BTF+0x86>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d007      	beq.n	8002298 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002296:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80022be:	e095      	b.n	80023ec <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d17d      	bne.n	80023c6 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d002      	beq.n	80022d6 <I2C_MasterReceive_BTF+0xc4>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b10      	cmp	r3, #16
 80022d4:	d108      	bne.n	80022e8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e016      	b.n	8002316 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d002      	beq.n	80022f4 <I2C_MasterReceive_BTF+0xe2>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d108      	bne.n	8002306 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e007      	b.n	8002316 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002314:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002370:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b40      	cmp	r3, #64	@ 0x40
 8002384:	d10a      	bne.n	800239c <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7fd ff1f 	bl	80001d8 <HAL_I2C_MemRxCpltCallback>
}
 800239a:	e027      	b.n	80023ec <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d002      	beq.n	80023b0 <I2C_MasterReceive_BTF+0x19e>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d103      	bne.n	80023b8 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80023b6:	e002      	b.n	80023be <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2212      	movs	r2, #18
 80023bc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff fc69 	bl	8001c96 <HAL_I2C_MasterRxCpltCallback>
}
 80023c4:	e012      	b.n	80023ec <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b40      	cmp	r3, #64	@ 0x40
 8002406:	d117      	bne.n	8002438 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002420:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002422:	e067      	b.n	80024f4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	b2da      	uxtb	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	611a      	str	r2, [r3, #16]
}
 8002436:	e05d      	b.n	80024f4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002440:	d133      	bne.n	80024aa <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b21      	cmp	r3, #33	@ 0x21
 800244c:	d109      	bne.n	8002462 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002452:	b2db      	uxtb	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800245e:	611a      	str	r2, [r3, #16]
 8002460:	e008      	b.n	8002474 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	b2da      	uxtb	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <I2C_Master_SB+0x92>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002482:	2b00      	cmp	r3, #0
 8002484:	d108      	bne.n	8002498 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800248a:	2b00      	cmp	r3, #0
 800248c:	d032      	beq.n	80024f4 <I2C_Master_SB+0x100>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002494:	2b00      	cmp	r3, #0
 8002496:	d02d      	beq.n	80024f4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024a6:	605a      	str	r2, [r3, #4]
}
 80024a8:	e024      	b.n	80024f4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10e      	bne.n	80024d0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	11db      	asrs	r3, r3, #7
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f003 0306 	and.w	r3, r3, #6
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f063 030f 	orn	r3, r3, #15
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	611a      	str	r2, [r3, #16]
}
 80024ce:	e011      	b.n	80024f4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d10d      	bne.n	80024f4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024dc:	b29b      	uxth	r3, r3
 80024de:	11db      	asrs	r3, r3, #7
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f003 0306 	and.w	r3, r3, #6
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f063 030e 	orn	r3, r3, #14
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	611a      	str	r2, [r3, #16]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	b2da      	uxtb	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002516:	2b00      	cmp	r3, #0
 8002518:	d004      	beq.n	8002524 <I2C_Master_ADD10+0x26>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	d108      	bne.n	8002536 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00c      	beq.n	8002546 <I2C_Master_ADD10+0x48>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002544:	605a      	str	r2, [r3, #4]
  }
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002550:	b480      	push	{r7}
 8002552:	b091      	sub	sp, #68	@ 0x44
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800255e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002566:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b22      	cmp	r3, #34	@ 0x22
 8002578:	f040 8174 	bne.w	8002864 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10f      	bne.n	80025a4 <I2C_Master_ADDR+0x54>
 8002584:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002588:	2b40      	cmp	r3, #64	@ 0x40
 800258a:	d10b      	bne.n	80025a4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258c:	2300      	movs	r3, #0
 800258e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	633b      	str	r3, [r7, #48]	@ 0x30
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	633b      	str	r3, [r7, #48]	@ 0x30
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a2:	e16b      	b.n	800287c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d11d      	bne.n	80025e8 <I2C_Master_ADDR+0x98>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80025b4:	d118      	bne.n	80025e8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b6:	2300      	movs	r3, #0
 80025b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025da:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80025e6:	e149      	b.n	800287c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d113      	bne.n	800261a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f2:	2300      	movs	r3, #0
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002606:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e120      	b.n	800285c <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	f040 808a 	bne.w	800273a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002628:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800262c:	d137      	bne.n	800269e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800263c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800264c:	d113      	bne.n	8002676 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800265c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	e0f2      	b.n	800285c <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002676:	2300      	movs	r3, #0
 8002678:	623b      	str	r3, [r7, #32]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	623b      	str	r3, [r7, #32]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	623b      	str	r3, [r7, #32]
 800268a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e0de      	b.n	800285c <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800269e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d02e      	beq.n	8002702 <I2C_Master_ADDR+0x1b2>
 80026a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d02b      	beq.n	8002702 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80026aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ac:	2b12      	cmp	r3, #18
 80026ae:	d102      	bne.n	80026b6 <I2C_Master_ADDR+0x166>
 80026b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d125      	bne.n	8002702 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80026b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d00e      	beq.n	80026da <I2C_Master_ADDR+0x18a>
 80026bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d00b      	beq.n	80026da <I2C_Master_ADDR+0x18a>
 80026c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d008      	beq.n	80026da <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	e007      	b.n	80026ea <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	e0ac      	b.n	800285c <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002710:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e090      	b.n	800285c <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d158      	bne.n	80027f6 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002746:	2b04      	cmp	r3, #4
 8002748:	d021      	beq.n	800278e <I2C_Master_ADDR+0x23e>
 800274a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274c:	2b02      	cmp	r3, #2
 800274e:	d01e      	beq.n	800278e <I2C_Master_ADDR+0x23e>
 8002750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002752:	2b10      	cmp	r3, #16
 8002754:	d01b      	beq.n	800278e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002764:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e012      	b.n	80027b4 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800279c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027c2:	d14b      	bne.n	800285c <I2C_Master_ADDR+0x30c>
 80027c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027ca:	d00b      	beq.n	80027e4 <I2C_Master_ADDR+0x294>
 80027cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d008      	beq.n	80027e4 <I2C_Master_ADDR+0x294>
 80027d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d005      	beq.n	80027e4 <I2C_Master_ADDR+0x294>
 80027d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d002      	beq.n	80027e4 <I2C_Master_ADDR+0x294>
 80027de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d13b      	bne.n	800285c <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	e032      	b.n	800285c <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002804:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002814:	d117      	bne.n	8002846 <I2C_Master_ADDR+0x2f6>
 8002816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002818:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800281c:	d00b      	beq.n	8002836 <I2C_Master_ADDR+0x2e6>
 800281e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002820:	2b01      	cmp	r3, #1
 8002822:	d008      	beq.n	8002836 <I2C_Master_ADDR+0x2e6>
 8002824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002826:	2b08      	cmp	r3, #8
 8002828:	d005      	beq.n	8002836 <I2C_Master_ADDR+0x2e6>
 800282a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800282c:	2b10      	cmp	r3, #16
 800282e:	d002      	beq.n	8002836 <I2C_Master_ADDR+0x2e6>
 8002830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002832:	2b20      	cmp	r3, #32
 8002834:	d107      	bne.n	8002846 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002844:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002862:	e00b      	b.n	800287c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
}
 800287a:	e7ff      	b.n	800287c <I2C_Master_ADDR+0x32c>
 800287c:	bf00      	nop
 800287e:	3744      	adds	r7, #68	@ 0x44
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002894:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d02b      	beq.n	80028f8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d114      	bne.n	80028f8 <I2C_SlaveTransmit_TXE+0x72>
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b29      	cmp	r3, #41	@ 0x29
 80028d2:	d111      	bne.n	80028f8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2221      	movs	r2, #33	@ 0x21
 80028e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2228      	movs	r2, #40	@ 0x28
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff f9d8 	bl	8001ca8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d011      	beq.n	8002936 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800294e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d02c      	beq.n	80029b4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d114      	bne.n	80029b4 <I2C_SlaveReceive_RXNE+0x74>
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	2b2a      	cmp	r3, #42	@ 0x2a
 800298e:	d111      	bne.n	80029b4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800299e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2222      	movs	r2, #34	@ 0x22
 80029a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2228      	movs	r2, #40	@ 0x28
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff f983 	bl	8001cba <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d012      	beq.n	80029f4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a18:	2b28      	cmp	r3, #40	@ 0x28
 8002a1a:	d125      	bne.n	8002a68 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a2a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	81bb      	strh	r3, [r7, #12]
 8002a4a:	e002      	b.n	8002a52 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002a5a:	89ba      	ldrh	r2, [r7, #12]
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff f933 	bl	8001ccc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a66:	e00e      	b.n	8002a86 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a9e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002aae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002adc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aec:	d172      	bne.n	8002bd4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b22      	cmp	r3, #34	@ 0x22
 8002af2:	d002      	beq.n	8002afa <I2C_Slave_STOPF+0x6a>
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002af8:	d135      	bne.n	8002b66 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	f043 0204 	orr.w	r2, r3, #4
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe fbaa 	bl	800128c <HAL_DMA_GetState>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d049      	beq.n	8002bd2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b42:	4a69      	ldr	r2, [pc, #420]	@ (8002ce8 <I2C_Slave_STOPF+0x258>)
 8002b44:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fa20 	bl	8000f90 <HAL_DMA_Abort_IT>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d03d      	beq.n	8002bd2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b60:	4610      	mov	r0, r2
 8002b62:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b64:	e035      	b.n	8002bd2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	f043 0204 	orr.w	r2, r3, #4
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fb74 	bl	800128c <HAL_DMA_GetState>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d014      	beq.n	8002bd4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bae:	4a4e      	ldr	r2, [pc, #312]	@ (8002ce8 <I2C_Slave_STOPF+0x258>)
 8002bb0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe f9ea 	bl	8000f90 <HAL_DMA_Abort_IT>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4798      	blx	r3
 8002bd0:	e000      	b.n	8002bd4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002bd2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d03e      	beq.n	8002c5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d112      	bne.n	8002c12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1c:	2b40      	cmp	r3, #64	@ 0x40
 8002c1e:	d112      	bne.n	8002c46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	f043 0204 	orr.w	r2, r3, #4
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f8b7 	bl	8002dd8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002c6a:	e039      	b.n	8002ce0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c70:	d109      	bne.n	8002c86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2228      	movs	r2, #40	@ 0x28
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff f81a 	bl	8001cba <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b28      	cmp	r3, #40	@ 0x28
 8002c90:	d111      	bne.n	8002cb6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a15      	ldr	r2, [pc, #84]	@ (8002cec <I2C_Slave_STOPF+0x25c>)
 8002c96:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff f819 	bl	8001ce6 <HAL_I2C_ListenCpltCallback>
}
 8002cb4:	e014      	b.n	8002ce0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	2b22      	cmp	r3, #34	@ 0x22
 8002cbc:	d002      	beq.n	8002cc4 <I2C_Slave_STOPF+0x234>
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2b22      	cmp	r3, #34	@ 0x22
 8002cc2:	d10d      	bne.n	8002ce0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2220      	movs	r2, #32
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fe ffed 	bl	8001cba <HAL_I2C_SlaveRxCpltCallback>
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	0800303d 	.word	0x0800303d
 8002cec:	ffff0000 	.word	0xffff0000

08002cf0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d002      	beq.n	8002d12 <I2C_Slave_AF+0x22>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d129      	bne.n	8002d66 <I2C_Slave_AF+0x76>
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	2b28      	cmp	r3, #40	@ 0x28
 8002d16:	d126      	bne.n	8002d66 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd4 <I2C_Slave_AF+0xe4>)
 8002d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d2c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d36:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d46:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe ffc1 	bl	8001ce6 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002d64:	e031      	b.n	8002dca <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	2b21      	cmp	r3, #33	@ 0x21
 8002d6a:	d129      	bne.n	8002dc0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a19      	ldr	r2, [pc, #100]	@ (8002dd4 <I2C_Slave_AF+0xe4>)
 8002d70:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2221      	movs	r2, #33	@ 0x21
 8002d76:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d96:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002da0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002db0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe fd58 	bl	8001868 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7fe ff75 	bl	8001ca8 <HAL_I2C_SlaveTxCpltCallback>
}
 8002dbe:	e004      	b.n	8002dca <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dc8:	615a      	str	r2, [r3, #20]
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	ffff0000 	.word	0xffff0000

08002dd8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002df0:	7bbb      	ldrb	r3, [r7, #14]
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d002      	beq.n	8002dfc <I2C_ITError+0x24>
 8002df6:	7bbb      	ldrb	r3, [r7, #14]
 8002df8:	2b40      	cmp	r3, #64	@ 0x40
 8002dfa:	d10a      	bne.n	8002e12 <I2C_ITError+0x3a>
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b22      	cmp	r3, #34	@ 0x22
 8002e00:	d107      	bne.n	8002e12 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e10:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e18:	2b28      	cmp	r3, #40	@ 0x28
 8002e1a:	d107      	bne.n	8002e2c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2228      	movs	r2, #40	@ 0x28
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002e2a:	e015      	b.n	8002e58 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e3a:	d00a      	beq.n	8002e52 <I2C_ITError+0x7a>
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	2b60      	cmp	r3, #96	@ 0x60
 8002e40:	d007      	beq.n	8002e52 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e66:	d162      	bne.n	8002f2e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e76:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d020      	beq.n	8002ec8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e8a:	4a6a      	ldr	r2, [pc, #424]	@ (8003034 <I2C_ITError+0x25c>)
 8002e8c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe f87c 	bl	8000f90 <HAL_DMA_Abort_IT>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8089 	beq.w	8002fb2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4798      	blx	r3
 8002ec6:	e074      	b.n	8002fb2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ecc:	4a59      	ldr	r2, [pc, #356]	@ (8003034 <I2C_ITError+0x25c>)
 8002ece:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe f85b 	bl	8000f90 <HAL_DMA_Abort_IT>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d068      	beq.n	8002fb2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eea:	2b40      	cmp	r3, #64	@ 0x40
 8002eec:	d10b      	bne.n	8002f06 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4798      	blx	r3
 8002f2c:	e041      	b.n	8002fb2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b60      	cmp	r3, #96	@ 0x60
 8002f38:	d125      	bne.n	8002f86 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	2b40      	cmp	r3, #64	@ 0x40
 8002f54:	d10b      	bne.n	8002f6e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe fecc 	bl	8001d1c <HAL_I2C_AbortCpltCallback>
 8002f84:	e015      	b.n	8002fb2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f90:	2b40      	cmp	r3, #64	@ 0x40
 8002f92:	d10b      	bne.n	8002fac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7fe feac 	bl	8001d0a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10e      	bne.n	8002fe0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d109      	bne.n	8002fe0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d104      	bne.n	8002fe0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d007      	beq.n	8002ff0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002fee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b04      	cmp	r3, #4
 8003002:	d113      	bne.n	800302c <I2C_ITError+0x254>
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b28      	cmp	r3, #40	@ 0x28
 8003008:	d110      	bne.n	800302c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a0a      	ldr	r2, [pc, #40]	@ (8003038 <I2C_ITError+0x260>)
 800300e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe fe5d 	bl	8001ce6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	0800303d 	.word	0x0800303d
 8003038:	ffff0000 	.word	0xffff0000

0800303c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003054:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003056:	4b4b      	ldr	r3, [pc, #300]	@ (8003184 <I2C_DMAAbort+0x148>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	08db      	lsrs	r3, r3, #3
 800305c:	4a4a      	ldr	r2, [pc, #296]	@ (8003188 <I2C_DMAAbort+0x14c>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	0a1a      	lsrs	r2, r3, #8
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	00da      	lsls	r2, r3, #3
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f043 0220 	orr.w	r2, r3, #32
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003082:	e00a      	b.n	800309a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3b01      	subs	r3, #1
 8003088:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003098:	d0ea      	beq.n	8003070 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a6:	2200      	movs	r2, #0
 80030a8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b6:	2200      	movs	r2, #0
 80030b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2200      	movs	r2, #0
 80030ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030dc:	2200      	movs	r2, #0
 80030de:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ec:	2200      	movs	r2, #0
 80030ee:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b60      	cmp	r3, #96	@ 0x60
 800310a:	d10e      	bne.n	800312a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2200      	movs	r2, #0
 8003120:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003122:	6978      	ldr	r0, [r7, #20]
 8003124:	f7fe fdfa 	bl	8001d1c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003128:	e027      	b.n	800317a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800312a:	7cfb      	ldrb	r3, [r7, #19]
 800312c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003130:	2b28      	cmp	r3, #40	@ 0x28
 8003132:	d117      	bne.n	8003164 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003152:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2228      	movs	r2, #40	@ 0x28
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003162:	e007      	b.n	8003174 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003174:	6978      	ldr	r0, [r7, #20]
 8003176:	f7fe fdc8 	bl	8001d0a <HAL_I2C_ErrorCallback>
}
 800317a:	bf00      	nop
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000000 	.word	0x20000000
 8003188:	14f8b589 	.word	0x14f8b589

0800318c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003198:	4b13      	ldr	r3, [pc, #76]	@ (80031e8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	08db      	lsrs	r3, r3, #3
 800319e:	4a13      	ldr	r2, [pc, #76]	@ (80031ec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	0a1a      	lsrs	r2, r3, #8
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d107      	bne.n	80031ca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	f043 0220 	orr.w	r2, r3, #32
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e008      	b.n	80031dc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d8:	d0e9      	beq.n	80031ae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000000 	.word	0x20000000
 80031ec:	14f8b589 	.word	0x14f8b589

080031f0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003200:	d103      	bne.n	800320a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003208:	e007      	b.n	800321a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003212:	d102      	bne.n	800321a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2208      	movs	r2, #8
 8003218:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e272      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 8087 	beq.w	8003352 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003244:	4b92      	ldr	r3, [pc, #584]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b04      	cmp	r3, #4
 800324e:	d00c      	beq.n	800326a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003250:	4b8f      	ldr	r3, [pc, #572]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b08      	cmp	r3, #8
 800325a:	d112      	bne.n	8003282 <HAL_RCC_OscConfig+0x5e>
 800325c:	4b8c      	ldr	r3, [pc, #560]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003268:	d10b      	bne.n	8003282 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326a:	4b89      	ldr	r3, [pc, #548]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d06c      	beq.n	8003350 <HAL_RCC_OscConfig+0x12c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d168      	bne.n	8003350 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e24c      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800328a:	d106      	bne.n	800329a <HAL_RCC_OscConfig+0x76>
 800328c:	4b80      	ldr	r3, [pc, #512]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a7f      	ldr	r2, [pc, #508]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	e02e      	b.n	80032f8 <HAL_RCC_OscConfig+0xd4>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10c      	bne.n	80032bc <HAL_RCC_OscConfig+0x98>
 80032a2:	4b7b      	ldr	r3, [pc, #492]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a7a      	ldr	r2, [pc, #488]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4b78      	ldr	r3, [pc, #480]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a77      	ldr	r2, [pc, #476]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e01d      	b.n	80032f8 <HAL_RCC_OscConfig+0xd4>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0xbc>
 80032c6:	4b72      	ldr	r3, [pc, #456]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a71      	ldr	r2, [pc, #452]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	4b6f      	ldr	r3, [pc, #444]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0xd4>
 80032e0:	4b6b      	ldr	r3, [pc, #428]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b68      	ldr	r3, [pc, #416]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a67      	ldr	r2, [pc, #412]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d013      	beq.n	8003328 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fd fca2 	bl	8000c48 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003308:	f7fd fc9e 	bl	8000c48 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	@ 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e200      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	4b5d      	ldr	r3, [pc, #372]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0xe4>
 8003326:	e014      	b.n	8003352 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7fd fc8e 	bl	8000c48 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003330:	f7fd fc8a 	bl	8000c48 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	@ 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e1ec      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	4b53      	ldr	r3, [pc, #332]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x10c>
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d063      	beq.n	8003426 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800335e:	4b4c      	ldr	r3, [pc, #304]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800336a:	4b49      	ldr	r3, [pc, #292]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b08      	cmp	r3, #8
 8003374:	d11c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x18c>
 8003376:	4b46      	ldr	r3, [pc, #280]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d116      	bne.n	80033b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003382:	4b43      	ldr	r3, [pc, #268]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_RCC_OscConfig+0x176>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d001      	beq.n	800339a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e1c0      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339a:	4b3d      	ldr	r3, [pc, #244]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4939      	ldr	r1, [pc, #228]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ae:	e03a      	b.n	8003426 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b8:	4b36      	ldr	r3, [pc, #216]	@ (8003494 <HAL_RCC_OscConfig+0x270>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fd fc43 	bl	8000c48 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c6:	f7fd fc3f 	bl	8000c48 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e1a1      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4927      	ldr	r1, [pc, #156]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]
 80033f8:	e015      	b.n	8003426 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fa:	4b26      	ldr	r3, [pc, #152]	@ (8003494 <HAL_RCC_OscConfig+0x270>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fd fc22 	bl	8000c48 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003408:	f7fd fc1e 	bl	8000c48 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e180      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	4b1d      	ldr	r3, [pc, #116]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d03a      	beq.n	80034a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d019      	beq.n	800346e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343a:	4b17      	ldr	r3, [pc, #92]	@ (8003498 <HAL_RCC_OscConfig+0x274>)
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003440:	f7fd fc02 	bl	8000c48 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003448:	f7fd fbfe 	bl	8000c48 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e160      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345a:	4b0d      	ldr	r3, [pc, #52]	@ (8003490 <HAL_RCC_OscConfig+0x26c>)
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003466:	2001      	movs	r0, #1
 8003468:	f000 fafe 	bl	8003a68 <RCC_Delay>
 800346c:	e01c      	b.n	80034a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346e:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <HAL_RCC_OscConfig+0x274>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003474:	f7fd fbe8 	bl	8000c48 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347a:	e00f      	b.n	800349c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347c:	f7fd fbe4 	bl	8000c48 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d908      	bls.n	800349c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e146      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000
 8003494:	42420000 	.word	0x42420000
 8003498:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800349c:	4b92      	ldr	r3, [pc, #584]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e9      	bne.n	800347c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80a6 	beq.w	8003602 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ba:	4b8b      	ldr	r3, [pc, #556]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10d      	bne.n	80034e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	4b88      	ldr	r3, [pc, #544]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	4a87      	ldr	r2, [pc, #540]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d0:	61d3      	str	r3, [r2, #28]
 80034d2:	4b85      	ldr	r3, [pc, #532]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034de:	2301      	movs	r3, #1
 80034e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e2:	4b82      	ldr	r3, [pc, #520]	@ (80036ec <HAL_RCC_OscConfig+0x4c8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d118      	bne.n	8003520 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ee:	4b7f      	ldr	r3, [pc, #508]	@ (80036ec <HAL_RCC_OscConfig+0x4c8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a7e      	ldr	r2, [pc, #504]	@ (80036ec <HAL_RCC_OscConfig+0x4c8>)
 80034f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fa:	f7fd fba5 	bl	8000c48 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003502:	f7fd fba1 	bl	8000c48 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b64      	cmp	r3, #100	@ 0x64
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e103      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	4b75      	ldr	r3, [pc, #468]	@ (80036ec <HAL_RCC_OscConfig+0x4c8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x312>
 8003528:	4b6f      	ldr	r3, [pc, #444]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	4a6e      	ldr	r2, [pc, #440]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6213      	str	r3, [r2, #32]
 8003534:	e02d      	b.n	8003592 <HAL_RCC_OscConfig+0x36e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x334>
 800353e:	4b6a      	ldr	r3, [pc, #424]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	4a69      	ldr	r2, [pc, #420]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	6213      	str	r3, [r2, #32]
 800354a:	4b67      	ldr	r3, [pc, #412]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4a66      	ldr	r2, [pc, #408]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003550:	f023 0304 	bic.w	r3, r3, #4
 8003554:	6213      	str	r3, [r2, #32]
 8003556:	e01c      	b.n	8003592 <HAL_RCC_OscConfig+0x36e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b05      	cmp	r3, #5
 800355e:	d10c      	bne.n	800357a <HAL_RCC_OscConfig+0x356>
 8003560:	4b61      	ldr	r3, [pc, #388]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	4a60      	ldr	r2, [pc, #384]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003566:	f043 0304 	orr.w	r3, r3, #4
 800356a:	6213      	str	r3, [r2, #32]
 800356c:	4b5e      	ldr	r3, [pc, #376]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	4a5d      	ldr	r2, [pc, #372]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6213      	str	r3, [r2, #32]
 8003578:	e00b      	b.n	8003592 <HAL_RCC_OscConfig+0x36e>
 800357a:	4b5b      	ldr	r3, [pc, #364]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	4a5a      	ldr	r2, [pc, #360]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	6213      	str	r3, [r2, #32]
 8003586:	4b58      	ldr	r3, [pc, #352]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4a57      	ldr	r2, [pc, #348]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	f023 0304 	bic.w	r3, r3, #4
 8003590:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d015      	beq.n	80035c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359a:	f7fd fb55 	bl	8000c48 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fd fb51 	bl	8000c48 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e0b1      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b8:	4b4b      	ldr	r3, [pc, #300]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ee      	beq.n	80035a2 <HAL_RCC_OscConfig+0x37e>
 80035c4:	e014      	b.n	80035f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c6:	f7fd fb3f 	bl	8000c48 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fd fb3b 	bl	8000c48 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e09b      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e4:	4b40      	ldr	r3, [pc, #256]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ee      	bne.n	80035ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d105      	bne.n	8003602 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f6:	4b3c      	ldr	r3, [pc, #240]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4a3b      	ldr	r2, [pc, #236]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003600:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 8087 	beq.w	800371a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800360c:	4b36      	ldr	r3, [pc, #216]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d061      	beq.n	80036dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d146      	bne.n	80036ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003620:	4b33      	ldr	r3, [pc, #204]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7fd fb0f 	bl	8000c48 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362e:	f7fd fb0b 	bl	8000c48 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e06d      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003640:	4b29      	ldr	r3, [pc, #164]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f0      	bne.n	800362e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003654:	d108      	bne.n	8003668 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003656:	4b24      	ldr	r3, [pc, #144]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	4921      	ldr	r1, [pc, #132]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003668:	4b1f      	ldr	r3, [pc, #124]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a19      	ldr	r1, [r3, #32]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	430b      	orrs	r3, r1
 800367a:	491b      	ldr	r1, [pc, #108]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	4313      	orrs	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003680:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fd fadf 	bl	8000c48 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368e:	f7fd fadb 	bl	8000c48 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e03d      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036a0:	4b11      	ldr	r3, [pc, #68]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x46a>
 80036ac:	e035      	b.n	800371a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4b10      	ldr	r3, [pc, #64]	@ (80036f0 <HAL_RCC_OscConfig+0x4cc>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fd fac8 	bl	8000c48 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fd fac4 	bl	8000c48 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e026      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ce:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x498>
 80036da:	e01e      	b.n	800371a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d107      	bne.n	80036f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e019      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40007000 	.word	0x40007000
 80036f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <HAL_RCC_OscConfig+0x500>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	429a      	cmp	r2, r3
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000

08003728 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0d0      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800373c:	4b6a      	ldr	r3, [pc, #424]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d910      	bls.n	800376c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b67      	ldr	r3, [pc, #412]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 0207 	bic.w	r2, r3, #7
 8003752:	4965      	ldr	r1, [pc, #404]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b63      	ldr	r3, [pc, #396]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0b8      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d020      	beq.n	80037ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003784:	4b59      	ldr	r3, [pc, #356]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a58      	ldr	r2, [pc, #352]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800378e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800379c:	4b53      	ldr	r3, [pc, #332]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	4a52      	ldr	r2, [pc, #328]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80037a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a8:	4b50      	ldr	r3, [pc, #320]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	494d      	ldr	r1, [pc, #308]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d040      	beq.n	8003848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d107      	bne.n	80037de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	4b47      	ldr	r3, [pc, #284]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d115      	bne.n	8003806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e07f      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e6:	4b41      	ldr	r3, [pc, #260]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e073      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f6:	4b3d      	ldr	r3, [pc, #244]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e06b      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003806:	4b39      	ldr	r3, [pc, #228]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f023 0203 	bic.w	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4936      	ldr	r1, [pc, #216]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003818:	f7fd fa16 	bl	8000c48 <HAL_GetTick>
 800381c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	e00a      	b.n	8003836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003820:	f7fd fa12 	bl	8000c48 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e053      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003836:	4b2d      	ldr	r3, [pc, #180]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 020c 	and.w	r2, r3, #12
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	429a      	cmp	r2, r3
 8003846:	d1eb      	bne.n	8003820 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003848:	4b27      	ldr	r3, [pc, #156]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d210      	bcs.n	8003878 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b24      	ldr	r3, [pc, #144]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0207 	bic.w	r2, r3, #7
 800385e:	4922      	ldr	r1, [pc, #136]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b20      	ldr	r3, [pc, #128]	@ (80038e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e032      	b.n	80038de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003884:	4b19      	ldr	r3, [pc, #100]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4916      	ldr	r1, [pc, #88]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d009      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038a2:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	490e      	ldr	r1, [pc, #56]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038b6:	f000 f821 	bl	80038fc <HAL_RCC_GetSysClockFreq>
 80038ba:	4602      	mov	r2, r0
 80038bc:	4b0b      	ldr	r3, [pc, #44]	@ (80038ec <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	490a      	ldr	r1, [pc, #40]	@ (80038f0 <HAL_RCC_ClockConfig+0x1c8>)
 80038c8:	5ccb      	ldrb	r3, [r1, r3]
 80038ca:	fa22 f303 	lsr.w	r3, r2, r3
 80038ce:	4a09      	ldr	r2, [pc, #36]	@ (80038f4 <HAL_RCC_ClockConfig+0x1cc>)
 80038d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038d2:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <HAL_RCC_ClockConfig+0x1d0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd f886 	bl	80009e8 <HAL_InitTick>

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40022000 	.word	0x40022000
 80038ec:	40021000 	.word	0x40021000
 80038f0:	08006fe8 	.word	0x08006fe8
 80038f4:	20000000 	.word	0x20000000
 80038f8:	20000004 	.word	0x20000004

080038fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003916:	4b1e      	ldr	r3, [pc, #120]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x94>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b04      	cmp	r3, #4
 8003924:	d002      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x30>
 8003926:	2b08      	cmp	r3, #8
 8003928:	d003      	beq.n	8003932 <HAL_RCC_GetSysClockFreq+0x36>
 800392a:	e027      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800392c:	4b19      	ldr	r3, [pc, #100]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x98>)
 800392e:	613b      	str	r3, [r7, #16]
      break;
 8003930:	e027      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	0c9b      	lsrs	r3, r3, #18
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	4a17      	ldr	r2, [pc, #92]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x9c>)
 800393c:	5cd3      	ldrb	r3, [r2, r3]
 800393e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d010      	beq.n	800396c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800394a:	4b11      	ldr	r3, [pc, #68]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x94>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	0c5b      	lsrs	r3, r3, #17
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	4a11      	ldr	r2, [pc, #68]	@ (800399c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003956:	5cd3      	ldrb	r3, [r2, r3]
 8003958:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a0d      	ldr	r2, [pc, #52]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x98>)
 800395e:	fb03 f202 	mul.w	r2, r3, r2
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	e004      	b.n	8003976 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a0c      	ldr	r2, [pc, #48]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003970:	fb02 f303 	mul.w	r3, r2, r3
 8003974:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	613b      	str	r3, [r7, #16]
      break;
 800397a:	e002      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800397c:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x98>)
 800397e:	613b      	str	r3, [r7, #16]
      break;
 8003980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003982:	693b      	ldr	r3, [r7, #16]
}
 8003984:	4618      	mov	r0, r3
 8003986:	371c      	adds	r7, #28
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40021000 	.word	0x40021000
 8003994:	007a1200 	.word	0x007a1200
 8003998:	08007000 	.word	0x08007000
 800399c:	08007010 	.word	0x08007010
 80039a0:	003d0900 	.word	0x003d0900

080039a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a8:	4b02      	ldr	r3, [pc, #8]	@ (80039b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80039aa:	681b      	ldr	r3, [r3, #0]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	20000000 	.word	0x20000000

080039b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039bc:	f7ff fff2 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	4903      	ldr	r1, [pc, #12]	@ (80039dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ce:	5ccb      	ldrb	r3, [r1, r3]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40021000 	.word	0x40021000
 80039dc:	08006ff8 	.word	0x08006ff8

080039e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039e4:	f7ff ffde 	bl	80039a4 <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	0adb      	lsrs	r3, r3, #11
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4903      	ldr	r1, [pc, #12]	@ (8003a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	08006ff8 	.word	0x08006ff8

08003a08 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	220f      	movs	r2, #15
 8003a16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a18:	4b11      	ldr	r3, [pc, #68]	@ (8003a60 <HAL_RCC_GetClockConfig+0x58>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 0203 	and.w	r2, r3, #3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a24:	4b0e      	ldr	r3, [pc, #56]	@ (8003a60 <HAL_RCC_GetClockConfig+0x58>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a30:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <HAL_RCC_GetClockConfig+0x58>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a3c:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <HAL_RCC_GetClockConfig+0x58>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	08db      	lsrs	r3, r3, #3
 8003a42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a4a:	4b06      	ldr	r3, [pc, #24]	@ (8003a64 <HAL_RCC_GetClockConfig+0x5c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0207 	and.w	r2, r3, #7
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40022000 	.word	0x40022000

08003a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a70:	4b0a      	ldr	r3, [pc, #40]	@ (8003a9c <RCC_Delay+0x34>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa0 <RCC_Delay+0x38>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	0a5b      	lsrs	r3, r3, #9
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a84:	bf00      	nop
  }
  while (Delay --);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e5a      	subs	r2, r3, #1
 8003a8a:	60fa      	str	r2, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f9      	bne.n	8003a84 <RCC_Delay+0x1c>
}
 8003a90:	bf00      	nop
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	10624dd3 	.word	0x10624dd3

08003aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e041      	b.n	8003b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f839 	bl	8003b42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f000 fb58 	bl	8004198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d001      	beq.n	8003b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e03a      	b.n	8003be2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a18      	ldr	r2, [pc, #96]	@ (8003bec <HAL_TIM_Base_Start_IT+0x98>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00e      	beq.n	8003bac <HAL_TIM_Base_Start_IT+0x58>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b96:	d009      	beq.n	8003bac <HAL_TIM_Base_Start_IT+0x58>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a14      	ldr	r2, [pc, #80]	@ (8003bf0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <HAL_TIM_Base_Start_IT+0x58>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a13      	ldr	r2, [pc, #76]	@ (8003bf4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d111      	bne.n	8003bd0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b06      	cmp	r3, #6
 8003bbc:	d010      	beq.n	8003be0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0201 	orr.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bce:	e007      	b.n	8003be0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40000800 	.word	0x40000800

08003bf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e041      	b.n	8003c8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fc fe46 	bl	80008b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f000 faae 	bl	8004198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b0c      	cmp	r3, #12
 8003caa:	d841      	bhi.n	8003d30 <HAL_TIM_PWM_Stop_IT+0x98>
 8003cac:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003ce9 	.word	0x08003ce9
 8003cb8:	08003d31 	.word	0x08003d31
 8003cbc:	08003d31 	.word	0x08003d31
 8003cc0:	08003d31 	.word	0x08003d31
 8003cc4:	08003cfb 	.word	0x08003cfb
 8003cc8:	08003d31 	.word	0x08003d31
 8003ccc:	08003d31 	.word	0x08003d31
 8003cd0:	08003d31 	.word	0x08003d31
 8003cd4:	08003d0d 	.word	0x08003d0d
 8003cd8:	08003d31 	.word	0x08003d31
 8003cdc:	08003d31 	.word	0x08003d31
 8003ce0:	08003d31 	.word	0x08003d31
 8003ce4:	08003d1f 	.word	0x08003d1f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0202 	bic.w	r2, r2, #2
 8003cf6:	60da      	str	r2, [r3, #12]
      break;
 8003cf8:	e01d      	b.n	8003d36 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0204 	bic.w	r2, r2, #4
 8003d08:	60da      	str	r2, [r3, #12]
      break;
 8003d0a:	e014      	b.n	8003d36 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0208 	bic.w	r2, r2, #8
 8003d1a:	60da      	str	r2, [r3, #12]
      break;
 8003d1c:	e00b      	b.n	8003d36 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0210 	bic.w	r2, r2, #16
 8003d2c:	60da      	str	r2, [r3, #12]
      break;
 8003d2e:	e002      	b.n	8003d36 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      break;
 8003d34:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d157      	bne.n	8003dec <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2200      	movs	r2, #0
 8003d42:	6839      	ldr	r1, [r7, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fc1d 	bl	8004584 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8003df8 <HAL_TIM_PWM_Stop_IT+0x160>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d117      	bne.n	8003d84 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6a1a      	ldr	r2, [r3, #32]
 8003d5a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10f      	bne.n	8003d84 <HAL_TIM_PWM_Stop_IT+0xec>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6a1a      	ldr	r2, [r3, #32]
 8003d6a:	f240 4344 	movw	r3, #1092	@ 0x444
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d107      	bne.n	8003d84 <HAL_TIM_PWM_Stop_IT+0xec>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d82:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6a1a      	ldr	r2, [r3, #32]
 8003d8a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10f      	bne.n	8003db4 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6a1a      	ldr	r2, [r3, #32]
 8003d9a:	f240 4344 	movw	r3, #1092	@ 0x444
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d107      	bne.n	8003db4 <HAL_TIM_PWM_Stop_IT+0x11c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0201 	bic.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d104      	bne.n	8003dc4 <HAL_TIM_PWM_Stop_IT+0x12c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dc2:	e013      	b.n	8003dec <HAL_TIM_PWM_Stop_IT+0x154>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d104      	bne.n	8003dd4 <HAL_TIM_PWM_Stop_IT+0x13c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dd2:	e00b      	b.n	8003dec <HAL_TIM_PWM_Stop_IT+0x154>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d104      	bne.n	8003de4 <HAL_TIM_PWM_Stop_IT+0x14c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003de2:	e003      	b.n	8003dec <HAL_TIM_PWM_Stop_IT+0x154>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40012c00 	.word	0x40012c00

08003dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d020      	beq.n	8003e60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01b      	beq.n	8003e60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0202 	mvn.w	r2, #2
 8003e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f993 	bl	8004172 <HAL_TIM_IC_CaptureCallback>
 8003e4c:	e005      	b.n	8003e5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f986 	bl	8004160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f002 fe59 	bl	8006b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d020      	beq.n	8003eac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01b      	beq.n	8003eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0204 	mvn.w	r2, #4
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f96d 	bl	8004172 <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f960 	bl	8004160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f002 fe33 	bl	8006b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d020      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01b      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0208 	mvn.w	r2, #8
 8003ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2204      	movs	r2, #4
 8003ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f947 	bl	8004172 <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f93a 	bl	8004160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f002 fe0d 	bl	8006b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d020      	beq.n	8003f44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01b      	beq.n	8003f44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0210 	mvn.w	r2, #16
 8003f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f921 	bl	8004172 <HAL_TIM_IC_CaptureCallback>
 8003f30:	e005      	b.n	8003f3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f914 	bl	8004160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f002 fde7 	bl	8006b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00c      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0201 	mvn.w	r2, #1
 8003f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fc fbda 	bl	800071c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00c      	beq.n	8003f8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fb87 	bl	800469a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00c      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f8ea 	bl	8004184 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00c      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0220 	mvn.w	r2, #32
 8003fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fb5a 	bl	8004688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e0ae      	b.n	8004158 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	f200 809f 	bhi.w	8004148 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800400a:	a201      	add	r2, pc, #4	@ (adr r2, 8004010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004045 	.word	0x08004045
 8004014:	08004149 	.word	0x08004149
 8004018:	08004149 	.word	0x08004149
 800401c:	08004149 	.word	0x08004149
 8004020:	08004085 	.word	0x08004085
 8004024:	08004149 	.word	0x08004149
 8004028:	08004149 	.word	0x08004149
 800402c:	08004149 	.word	0x08004149
 8004030:	080040c7 	.word	0x080040c7
 8004034:	08004149 	.word	0x08004149
 8004038:	08004149 	.word	0x08004149
 800403c:	08004149 	.word	0x08004149
 8004040:	08004107 	.word	0x08004107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f912 	bl	8004274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0208 	orr.w	r2, r2, #8
 800405e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0204 	bic.w	r2, r2, #4
 800406e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6999      	ldr	r1, [r3, #24]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	619a      	str	r2, [r3, #24]
      break;
 8004082:	e064      	b.n	800414e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f958 	bl	8004340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800409e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6999      	ldr	r1, [r3, #24]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	021a      	lsls	r2, r3, #8
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	619a      	str	r2, [r3, #24]
      break;
 80040c4:	e043      	b.n	800414e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 f9a1 	bl	8004414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0208 	orr.w	r2, r2, #8
 80040e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0204 	bic.w	r2, r2, #4
 80040f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69d9      	ldr	r1, [r3, #28]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	61da      	str	r2, [r3, #28]
      break;
 8004104:	e023      	b.n	800414e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 f9eb 	bl	80044e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69da      	ldr	r2, [r3, #28]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69da      	ldr	r2, [r3, #28]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69d9      	ldr	r1, [r3, #28]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	021a      	lsls	r2, r3, #8
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	61da      	str	r2, [r3, #28]
      break;
 8004146:	e002      	b.n	800414e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	75fb      	strb	r3, [r7, #23]
      break;
 800414c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004156:	7dfb      	ldrb	r3, [r7, #23]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr
	...

08004198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004268 <TIM_Base_SetConfig+0xd0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00b      	beq.n	80041c8 <TIM_Base_SetConfig+0x30>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b6:	d007      	beq.n	80041c8 <TIM_Base_SetConfig+0x30>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a2c      	ldr	r2, [pc, #176]	@ (800426c <TIM_Base_SetConfig+0xd4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <TIM_Base_SetConfig+0x30>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004270 <TIM_Base_SetConfig+0xd8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d108      	bne.n	80041da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a22      	ldr	r2, [pc, #136]	@ (8004268 <TIM_Base_SetConfig+0xd0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00b      	beq.n	80041fa <TIM_Base_SetConfig+0x62>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e8:	d007      	beq.n	80041fa <TIM_Base_SetConfig+0x62>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a1f      	ldr	r2, [pc, #124]	@ (800426c <TIM_Base_SetConfig+0xd4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d003      	beq.n	80041fa <TIM_Base_SetConfig+0x62>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004270 <TIM_Base_SetConfig+0xd8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d108      	bne.n	800420c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a0d      	ldr	r2, [pc, #52]	@ (8004268 <TIM_Base_SetConfig+0xd0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d103      	bne.n	8004240 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f023 0201 	bic.w	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	611a      	str	r2, [r3, #16]
  }
}
 800425e:	bf00      	nop
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800

08004274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	f023 0201 	bic.w	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0303 	bic.w	r3, r3, #3
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f023 0302 	bic.w	r3, r3, #2
 80042bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a1c      	ldr	r2, [pc, #112]	@ (800433c <TIM_OC1_SetConfig+0xc8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d10c      	bne.n	80042ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f023 0308 	bic.w	r3, r3, #8
 80042d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f023 0304 	bic.w	r3, r3, #4
 80042e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a13      	ldr	r2, [pc, #76]	@ (800433c <TIM_OC1_SetConfig+0xc8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d111      	bne.n	8004316 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	621a      	str	r2, [r3, #32]
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40012c00 	.word	0x40012c00

08004340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f023 0210 	bic.w	r2, r3, #16
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800436e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	021b      	lsls	r3, r3, #8
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0320 	bic.w	r3, r3, #32
 800438a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a1d      	ldr	r2, [pc, #116]	@ (8004410 <TIM_OC2_SetConfig+0xd0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d10d      	bne.n	80043bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a14      	ldr	r2, [pc, #80]	@ (8004410 <TIM_OC2_SetConfig+0xd0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d113      	bne.n	80043ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	621a      	str	r2, [r3, #32]
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	40012c00 	.word	0x40012c00

08004414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0303 	bic.w	r3, r3, #3
 800444a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800445c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a1d      	ldr	r2, [pc, #116]	@ (80044e4 <TIM_OC3_SetConfig+0xd0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d10d      	bne.n	800448e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004478:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800448c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a14      	ldr	r2, [pc, #80]	@ (80044e4 <TIM_OC3_SetConfig+0xd0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d113      	bne.n	80044be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800449c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	621a      	str	r2, [r3, #32]
}
 80044d8:	bf00      	nop
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40012c00 	.word	0x40012c00

080044e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800451e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	031b      	lsls	r3, r3, #12
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a0f      	ldr	r2, [pc, #60]	@ (8004580 <TIM_OC4_SetConfig+0x98>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d109      	bne.n	800455c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800454e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	019b      	lsls	r3, r3, #6
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr
 8004580:	40012c00 	.word	0x40012c00

08004584 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	2201      	movs	r2, #1
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1a      	ldr	r2, [r3, #32]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	401a      	ands	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a1a      	ldr	r2, [r3, #32]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f003 031f 	and.w	r3, r3, #31
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	fa01 f303 	lsl.w	r3, r1, r3
 80045bc:	431a      	orrs	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr

080045cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e046      	b.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a16      	ldr	r2, [pc, #88]	@ (800467c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00e      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004630:	d009      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a12      	ldr	r2, [pc, #72]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d004      	beq.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a10      	ldr	r2, [pc, #64]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d10c      	bne.n	8004660 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800464c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	4313      	orrs	r3, r2
 8004656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800

08004688 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	bc80      	pop	{r7}
 8004698:	4770      	bx	lr

0800469a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e04a      	b.n	8004754 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fc f940 	bl	8000958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2224      	movs	r2, #36	@ 0x24
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fef3 	bl	80054dc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004714:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0208 	orr.w	r2, r2, #8
 8004724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	@ 0x28
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	4613      	mov	r3, r2
 800476a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b20      	cmp	r3, #32
 800477a:	d175      	bne.n	8004868 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_UART_Transmit+0x2c>
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e06e      	b.n	800486a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2221      	movs	r2, #33	@ 0x21
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800479a:	f7fc fa55 	bl	8000c48 <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	88fa      	ldrh	r2, [r7, #6]
 80047a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	88fa      	ldrh	r2, [r7, #6]
 80047aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047b4:	d108      	bne.n	80047c8 <HAL_UART_Transmit+0x6c>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d104      	bne.n	80047c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	e003      	b.n	80047d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047d0:	e02e      	b.n	8004830 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2200      	movs	r2, #0
 80047da:	2180      	movs	r1, #128	@ 0x80
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 fc50 	bl	8005082 <UART_WaitOnFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e03a      	b.n	800486a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10b      	bne.n	8004812 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004808:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	3302      	adds	r3, #2
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	e007      	b.n	8004822 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	781a      	ldrb	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1cb      	bne.n	80047d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2200      	movs	r2, #0
 8004842:	2140      	movs	r1, #64	@ 0x40
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 fc1c 	bl	8005082 <UART_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e006      	b.n	800486a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	e000      	b.n	800486a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004868:	2302      	movs	r3, #2
  }
}
 800486a:	4618      	mov	r0, r3
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b08a      	sub	sp, #40	@ 0x28
 8004876:	af02      	add	r7, sp, #8
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	4613      	mov	r3, r2
 8004880:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b20      	cmp	r3, #32
 8004890:	f040 8081 	bne.w	8004996 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <HAL_UART_Receive+0x2e>
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e079      	b.n	8004998 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2222      	movs	r2, #34	@ 0x22
 80048ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048b8:	f7fc f9c6 	bl	8000c48 <HAL_GetTick>
 80048bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	88fa      	ldrh	r2, [r7, #6]
 80048c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	88fa      	ldrh	r2, [r7, #6]
 80048c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d2:	d108      	bne.n	80048e6 <HAL_UART_Receive+0x74>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80048dc:	2300      	movs	r3, #0
 80048de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	61bb      	str	r3, [r7, #24]
 80048e4:	e003      	b.n	80048ee <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80048ee:	e047      	b.n	8004980 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2200      	movs	r2, #0
 80048f8:	2120      	movs	r1, #32
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fbc1 	bl	8005082 <UART_WaitOnFlagUntilTimeout>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e042      	b.n	8004998 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10c      	bne.n	8004932 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	b29b      	uxth	r3, r3
 8004920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004924:	b29a      	uxth	r2, r3
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	3302      	adds	r3, #2
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	e01f      	b.n	8004972 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800493a:	d007      	beq.n	800494c <HAL_UART_Receive+0xda>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10a      	bne.n	800495a <HAL_UART_Receive+0xe8>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d106      	bne.n	800495a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	701a      	strb	r2, [r3, #0]
 8004958:	e008      	b.n	800496c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004966:	b2da      	uxtb	r2, r3
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	3301      	adds	r3, #1
 8004970:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1b2      	bne.n	80048f0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004996:	2302      	movs	r3, #2
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08c      	sub	sp, #48	@ 0x30
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	4613      	mov	r3, r2
 80049ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	d14a      	bne.n	8004a50 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e043      	b.n	8004a52 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	461a      	mov	r2, r3
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fba9 	bl	8005134 <UART_Start_Receive_IT>
 80049e2:	4603      	mov	r3, r0
 80049e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80049e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d12c      	bne.n	8004a4a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d125      	bne.n	8004a44 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	e853 3f00 	ldrex	r3, [r3]
 8004a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f043 0310 	orr.w	r3, r3, #16
 8004a24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	330c      	adds	r3, #12
 8004a2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a2e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a30:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6a39      	ldr	r1, [r7, #32]
 8004a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e5      	bne.n	8004a0e <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8004a42:	e002      	b.n	8004a4a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004a4e:	e000      	b.n	8004a52 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004a50:	2302      	movs	r3, #2
  }
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3730      	adds	r7, #48	@ 0x30
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b0ba      	sub	sp, #232	@ 0xe8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10f      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x66>
 8004aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fc50 	bl	8005360 <UART_Receive_IT>
      return;
 8004ac0:	e25b      	b.n	8004f7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 80de 	beq.w	8004c88 <HAL_UART_IRQHandler+0x22c>
 8004acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d106      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004adc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80d1 	beq.w	8004c88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00b      	beq.n	8004b0a <HAL_UART_IRQHandler+0xae>
 8004af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b02:	f043 0201 	orr.w	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00b      	beq.n	8004b2e <HAL_UART_IRQHandler+0xd2>
 8004b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b26:	f043 0202 	orr.w	r2, r3, #2
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <HAL_UART_IRQHandler+0xf6>
 8004b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4a:	f043 0204 	orr.w	r2, r3, #4
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d011      	beq.n	8004b82 <HAL_UART_IRQHandler+0x126>
 8004b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d105      	bne.n	8004b76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7a:	f043 0208 	orr.w	r2, r3, #8
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 81f2 	beq.w	8004f70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_UART_IRQHandler+0x14e>
 8004b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fbdb 	bl	8005360 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf14      	ite	ne
 8004bb8:	2301      	movne	r3, #1
 8004bba:	2300      	moveq	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x17a>
 8004bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d04f      	beq.n	8004c76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fae5 	bl	80051a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d041      	beq.n	8004c6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3314      	adds	r3, #20
 8004bf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3314      	adds	r3, #20
 8004c12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1d9      	bne.n	8004bea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d013      	beq.n	8004c66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c42:	4a7e      	ldr	r2, [pc, #504]	@ (8004e3c <HAL_UART_IRQHandler+0x3e0>)
 8004c44:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fc f9a0 	bl	8000f90 <HAL_DMA_Abort_IT>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d016      	beq.n	8004c84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c60:	4610      	mov	r0, r2
 8004c62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c64:	e00e      	b.n	8004c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f99c 	bl	8004fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c6c:	e00a      	b.n	8004c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f998 	bl	8004fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c74:	e006      	b.n	8004c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f994 	bl	8004fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c82:	e175      	b.n	8004f70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c84:	bf00      	nop
    return;
 8004c86:	e173      	b.n	8004f70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	f040 814f 	bne.w	8004f30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8148 	beq.w	8004f30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8141 	beq.w	8004f30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 80b6 	beq.w	8004e40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ce0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 8145 	beq.w	8004f74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	f080 813e 	bcs.w	8004f74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	f000 8088 	beq.w	8004e1c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	330c      	adds	r3, #12
 8004d12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	330c      	adds	r3, #12
 8004d34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d38:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d40:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d44:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1d9      	bne.n	8004d0c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3314      	adds	r3, #20
 8004d5e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3314      	adds	r3, #20
 8004d78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d7c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d80:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d84:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e1      	bne.n	8004d58 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3314      	adds	r3, #20
 8004d9a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004da4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004da6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004daa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3314      	adds	r3, #20
 8004db4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004db8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004dba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004dbe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004dc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e3      	bne.n	8004d94 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	330c      	adds	r3, #12
 8004de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004dea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dec:	f023 0310 	bic.w	r3, r3, #16
 8004df0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004dfe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e00:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e3      	bne.n	8004dda <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fc f87e 	bl	8000f18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fb fea6 	bl	8000b84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e38:	e09c      	b.n	8004f74 <HAL_UART_IRQHandler+0x518>
 8004e3a:	bf00      	nop
 8004e3c:	0800526b 	.word	0x0800526b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 808e 	beq.w	8004f78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 8089 	beq.w	8004f78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1e3      	bne.n	8004e66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3314      	adds	r3, #20
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	623b      	str	r3, [r7, #32]
   return(result);
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3314      	adds	r3, #20
 8004ebe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ec2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e3      	bne.n	8004e9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	330c      	adds	r3, #12
 8004eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	e853 3f00 	ldrex	r3, [r3]
 8004ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0310 	bic.w	r3, r3, #16
 8004efa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	330c      	adds	r3, #12
 8004f04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f08:	61fa      	str	r2, [r7, #28]
 8004f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	e841 2300 	strex	r3, r2, [r1]
 8004f14:	617b      	str	r3, [r7, #20]
   return(result);
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1e3      	bne.n	8004ee4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7fb fe2b 	bl	8000b84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f2e:	e023      	b.n	8004f78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d009      	beq.n	8004f50 <HAL_UART_IRQHandler+0x4f4>
 8004f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f9a2 	bl	8005292 <UART_Transmit_IT>
    return;
 8004f4e:	e014      	b.n	8004f7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00e      	beq.n	8004f7a <HAL_UART_IRQHandler+0x51e>
 8004f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f9e1 	bl	8005330 <UART_EndTransmit_IT>
    return;
 8004f6e:	e004      	b.n	8004f7a <HAL_UART_IRQHandler+0x51e>
    return;
 8004f70:	bf00      	nop
 8004f72:	e002      	b.n	8004f7a <HAL_UART_IRQHandler+0x51e>
      return;
 8004f74:	bf00      	nop
 8004f76:	e000      	b.n	8004f7a <HAL_UART_IRQHandler+0x51e>
      return;
 8004f78:	bf00      	nop
  }
}
 8004f7a:	37e8      	adds	r7, #232	@ 0xe8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr

08004f92 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e020      	b.n	8005012 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2224      	movs	r2, #36	@ 0x24
 8004fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 030c 	bic.w	r3, r3, #12
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f043 0308 	orr.w	r3, r3, #8
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8005032:	2302      	movs	r3, #2
 8005034:	e020      	b.n	8005078 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2224      	movs	r2, #36	@ 0x24
 8005042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f023 030c 	bic.w	r3, r3, #12
 8005054:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f043 0304 	orr.w	r3, r3, #4
 800505c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr

08005082 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b086      	sub	sp, #24
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	603b      	str	r3, [r7, #0]
 800508e:	4613      	mov	r3, r2
 8005090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005092:	e03b      	b.n	800510c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509a:	d037      	beq.n	800510c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509c:	f7fb fdd4 	bl	8000c48 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	6a3a      	ldr	r2, [r7, #32]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d302      	bcc.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e03a      	b.n	800512c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d023      	beq.n	800510c <UART_WaitOnFlagUntilTimeout+0x8a>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b80      	cmp	r3, #128	@ 0x80
 80050c8:	d020      	beq.n	800510c <UART_WaitOnFlagUntilTimeout+0x8a>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b40      	cmp	r3, #64	@ 0x40
 80050ce:	d01d      	beq.n	800510c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d116      	bne.n	800510c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 f856 	bl	80051a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2208      	movs	r2, #8
 80050fe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e00f      	b.n	800512c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	4013      	ands	r3, r2
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	429a      	cmp	r2, r3
 800511a:	bf0c      	ite	eq
 800511c:	2301      	moveq	r3, #1
 800511e:	2300      	movne	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	429a      	cmp	r2, r3
 8005128:	d0b4      	beq.n	8005094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	4613      	mov	r3, r2
 8005140:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	88fa      	ldrh	r2, [r7, #6]
 8005152:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2222      	movs	r2, #34	@ 0x22
 800515e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d007      	beq.n	800517a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005178:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695a      	ldr	r2, [r3, #20]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0220 	orr.w	r2, r2, #32
 8005198:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bc80      	pop	{r7}
 80051a4:	4770      	bx	lr

080051a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b095      	sub	sp, #84	@ 0x54
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	330c      	adds	r3, #12
 80051b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80051d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e5      	bne.n	80051ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3314      	adds	r3, #20
 80051e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f023 0301 	bic.w	r3, r3, #1
 80051f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3314      	adds	r3, #20
 8005200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005204:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e5      	bne.n	80051e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521a:	2b01      	cmp	r3, #1
 800521c:	d119      	bne.n	8005252 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	e853 3f00 	ldrex	r3, [r3]
 800522c:	60bb      	str	r3, [r7, #8]
   return(result);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f023 0310 	bic.w	r3, r3, #16
 8005234:	647b      	str	r3, [r7, #68]	@ 0x44
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	330c      	adds	r3, #12
 800523c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800523e:	61ba      	str	r2, [r7, #24]
 8005240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6979      	ldr	r1, [r7, #20]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	613b      	str	r3, [r7, #16]
   return(result);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e5      	bne.n	800521e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005260:	bf00      	nop
 8005262:	3754      	adds	r7, #84	@ 0x54
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr

0800526a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005276:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7ff fe8d 	bl	8004fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005292:	b480      	push	{r7}
 8005294:	b085      	sub	sp, #20
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b21      	cmp	r3, #33	@ 0x21
 80052a4:	d13e      	bne.n	8005324 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ae:	d114      	bne.n	80052da <UART_Transmit_IT+0x48>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d110      	bne.n	80052da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	1c9a      	adds	r2, r3, #2
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	621a      	str	r2, [r3, #32]
 80052d8:	e008      	b.n	80052ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	1c59      	adds	r1, r3, #1
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6211      	str	r1, [r2, #32]
 80052e4:	781a      	ldrb	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	4619      	mov	r1, r3
 80052fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10f      	bne.n	8005320 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800530e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800531e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	e000      	b.n	8005326 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005324:	2302      	movs	r3, #2
  }
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr

08005330 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005346:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff fe15 	bl	8004f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08c      	sub	sp, #48	@ 0x30
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b22      	cmp	r3, #34	@ 0x22
 8005372:	f040 80ae 	bne.w	80054d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800537e:	d117      	bne.n	80053b0 <UART_Receive_IT+0x50>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d113      	bne.n	80053b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005390:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	b29b      	uxth	r3, r3
 800539a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539e:	b29a      	uxth	r2, r3
 80053a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a8:	1c9a      	adds	r2, r3, #2
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80053ae:	e026      	b.n	80053fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053c2:	d007      	beq.n	80053d4 <UART_Receive_IT+0x74>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10a      	bne.n	80053e2 <UART_Receive_IT+0x82>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	e008      	b.n	80053f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29b      	uxth	r3, r3
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	4619      	mov	r1, r3
 800540c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800540e:	2b00      	cmp	r3, #0
 8005410:	d15d      	bne.n	80054ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0220 	bic.w	r2, r2, #32
 8005420:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005430:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695a      	ldr	r2, [r3, #20]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005454:	2b01      	cmp	r3, #1
 8005456:	d135      	bne.n	80054c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	330c      	adds	r3, #12
 8005464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	613b      	str	r3, [r7, #16]
   return(result);
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f023 0310 	bic.w	r3, r3, #16
 8005474:	627b      	str	r3, [r7, #36]	@ 0x24
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	330c      	adds	r3, #12
 800547c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800547e:	623a      	str	r2, [r7, #32]
 8005480:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	69f9      	ldr	r1, [r7, #28]
 8005484:	6a3a      	ldr	r2, [r7, #32]
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	61bb      	str	r3, [r7, #24]
   return(result);
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e5      	bne.n	800545e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b10      	cmp	r3, #16
 800549e:	d10a      	bne.n	80054b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054a0:	2300      	movs	r3, #0
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054ba:	4619      	mov	r1, r3
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7fb fb61 	bl	8000b84 <HAL_UARTEx_RxEventCallback>
 80054c2:	e002      	b.n	80054ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff fd64 	bl	8004f92 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	e002      	b.n	80054d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	e000      	b.n	80054d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054d2:	2302      	movs	r3, #2
  }
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3730      	adds	r7, #48	@ 0x30
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005516:	f023 030c 	bic.w	r3, r3, #12
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6812      	ldr	r2, [r2, #0]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	430b      	orrs	r3, r1
 8005522:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2c      	ldr	r2, [pc, #176]	@ (80055f0 <UART_SetConfig+0x114>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d103      	bne.n	800554c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005544:	f7fe fa4c 	bl	80039e0 <HAL_RCC_GetPCLK2Freq>
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	e002      	b.n	8005552 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800554c:	f7fe fa34 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 8005550:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009a      	lsls	r2, r3, #2
 800555c:	441a      	add	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	fbb2 f3f3 	udiv	r3, r2, r3
 8005568:	4a22      	ldr	r2, [pc, #136]	@ (80055f4 <UART_SetConfig+0x118>)
 800556a:	fba2 2303 	umull	r2, r3, r2, r3
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	0119      	lsls	r1, r3, #4
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009a      	lsls	r2, r3, #2
 800557c:	441a      	add	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	fbb2 f2f3 	udiv	r2, r2, r3
 8005588:	4b1a      	ldr	r3, [pc, #104]	@ (80055f4 <UART_SetConfig+0x118>)
 800558a:	fba3 0302 	umull	r0, r3, r3, r2
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	2064      	movs	r0, #100	@ 0x64
 8005592:	fb00 f303 	mul.w	r3, r0, r3
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	3332      	adds	r3, #50	@ 0x32
 800559c:	4a15      	ldr	r2, [pc, #84]	@ (80055f4 <UART_SetConfig+0x118>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055a8:	4419      	add	r1, r3
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	009a      	lsls	r2, r3, #2
 80055b4:	441a      	add	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80055c0:	4b0c      	ldr	r3, [pc, #48]	@ (80055f4 <UART_SetConfig+0x118>)
 80055c2:	fba3 0302 	umull	r0, r3, r3, r2
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	2064      	movs	r0, #100	@ 0x64
 80055ca:	fb00 f303 	mul.w	r3, r0, r3
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	3332      	adds	r3, #50	@ 0x32
 80055d4:	4a07      	ldr	r2, [pc, #28]	@ (80055f4 <UART_SetConfig+0x118>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	f003 020f 	and.w	r2, r3, #15
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	440a      	add	r2, r1
 80055e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055e8:	bf00      	nop
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40013800 	.word	0x40013800
 80055f4:	51eb851f 	.word	0x51eb851f

080055f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800560a:	2b84      	cmp	r3, #132	@ 0x84
 800560c:	d005      	beq.n	800561a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800560e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4413      	add	r3, r2
 8005616:	3303      	adds	r3, #3
 8005618:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800561a:	68fb      	ldr	r3, [r7, #12]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr

08005626 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800562a:	f000 faf7 	bl	8005c1c <vTaskStartScheduler>
  
  return osOK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}

08005634 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005636:	b089      	sub	sp, #36	@ 0x24
 8005638:	af04      	add	r7, sp, #16
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d020      	beq.n	8005688 <osThreadCreate+0x54>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d01c      	beq.n	8005688 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685c      	ldr	r4, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691e      	ldr	r6, [r3, #16]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005660:	4618      	mov	r0, r3
 8005662:	f7ff ffc9 	bl	80055f8 <makeFreeRtosPriority>
 8005666:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005670:	9202      	str	r2, [sp, #8]
 8005672:	9301      	str	r3, [sp, #4]
 8005674:	9100      	str	r1, [sp, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	4632      	mov	r2, r6
 800567a:	4629      	mov	r1, r5
 800567c:	4620      	mov	r0, r4
 800567e:	f000 f8e8 	bl	8005852 <xTaskCreateStatic>
 8005682:	4603      	mov	r3, r0
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	e01c      	b.n	80056c2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685c      	ldr	r4, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005694:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff ffab 	bl	80055f8 <makeFreeRtosPriority>
 80056a2:	4602      	mov	r2, r0
 80056a4:	f107 030c 	add.w	r3, r7, #12
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	9200      	str	r2, [sp, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	4632      	mov	r2, r6
 80056b0:	4629      	mov	r1, r5
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 f92d 	bl	8005912 <xTaskCreate>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d001      	beq.n	80056c2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	e000      	b.n	80056c4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80056c2:	68fb      	ldr	r3, [r7, #12]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056cc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <osDelay+0x16>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	e000      	b.n	80056e4 <osDelay+0x18>
 80056e2:	2301      	movs	r3, #1
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fa63 	bl	8005bb0 <vTaskDelay>
  
  return osOK;
 80056ea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f103 0208 	add.w	r2, r3, #8
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f04f 32ff 	mov.w	r2, #4294967295
 800570c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f103 0208 	add.w	r2, r3, #8
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f103 0208 	add.w	r2, r3, #8
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr

08005732 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr

0800574a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	601a      	str	r2, [r3, #0]
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr

08005790 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a6:	d103      	bne.n	80057b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	e00c      	b.n	80057ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3308      	adds	r3, #8
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e002      	b.n	80057be <vListInsert+0x2e>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d2f6      	bcs.n	80057b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	601a      	str	r2, [r3, #0]
}
 80057f6:	bf00      	nop
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr

08005800 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6892      	ldr	r2, [r2, #8]
 8005816:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6852      	ldr	r2, [r2, #4]
 8005820:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	429a      	cmp	r2, r3
 800582a:	d103      	bne.n	8005834 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	1e5a      	subs	r2, r3, #1
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005852:	b580      	push	{r7, lr}
 8005854:	b08e      	sub	sp, #56	@ 0x38
 8005856:	af04      	add	r7, sp, #16
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
 800585e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10b      	bne.n	800587e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	e7fd      	b.n	800587a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800587e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <xTaskCreateStatic+0x4a>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	61fb      	str	r3, [r7, #28]
}
 8005896:	bf00      	nop
 8005898:	bf00      	nop
 800589a:	e7fd      	b.n	8005898 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800589c:	23a0      	movs	r3, #160	@ 0xa0
 800589e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80058a4:	d00b      	beq.n	80058be <xTaskCreateStatic+0x6c>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	61bb      	str	r3, [r7, #24]
}
 80058b8:	bf00      	nop
 80058ba:	bf00      	nop
 80058bc:	e7fd      	b.n	80058ba <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d01e      	beq.n	8005904 <xTaskCreateStatic+0xb2>
 80058c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01b      	beq.n	8005904 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058d4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	2202      	movs	r2, #2
 80058da:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058de:	2300      	movs	r3, #0
 80058e0:	9303      	str	r3, [sp, #12]
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	9302      	str	r3, [sp, #8]
 80058e6:	f107 0314 	add.w	r3, r7, #20
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 f850 	bl	800599c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058fe:	f000 f8ed 	bl	8005adc <prvAddNewTaskToReadyList>
 8005902:	e001      	b.n	8005908 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005908:	697b      	ldr	r3, [r7, #20]
	}
 800590a:	4618      	mov	r0, r3
 800590c:	3728      	adds	r7, #40	@ 0x28
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005912:	b580      	push	{r7, lr}
 8005914:	b08c      	sub	sp, #48	@ 0x30
 8005916:	af04      	add	r7, sp, #16
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	60b9      	str	r1, [r7, #8]
 800591c:	603b      	str	r3, [r7, #0]
 800591e:	4613      	mov	r3, r2
 8005920:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fea2 	bl	8006670 <pvPortMalloc>
 800592c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00e      	beq.n	8005952 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005934:	20a0      	movs	r0, #160	@ 0xa0
 8005936:	f000 fe9b 	bl	8006670 <pvPortMalloc>
 800593a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	631a      	str	r2, [r3, #48]	@ 0x30
 8005948:	e005      	b.n	8005956 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800594a:	6978      	ldr	r0, [r7, #20]
 800594c:	f000 ff5e 	bl	800680c <vPortFree>
 8005950:	e001      	b.n	8005956 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d017      	beq.n	800598c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005964:	88fa      	ldrh	r2, [r7, #6]
 8005966:	2300      	movs	r3, #0
 8005968:	9303      	str	r3, [sp, #12]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	9302      	str	r3, [sp, #8]
 800596e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f80e 	bl	800599c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005980:	69f8      	ldr	r0, [r7, #28]
 8005982:	f000 f8ab 	bl	8005adc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005986:	2301      	movs	r3, #1
 8005988:	61bb      	str	r3, [r7, #24]
 800598a:	e002      	b.n	8005992 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800598c:	f04f 33ff 	mov.w	r3, #4294967295
 8005990:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005992:	69bb      	ldr	r3, [r7, #24]
	}
 8005994:	4618      	mov	r0, r3
 8005996:	3720      	adds	r7, #32
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059b4:	3b01      	subs	r3, #1
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	f023 0307 	bic.w	r3, r3, #7
 80059c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00b      	beq.n	80059e6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	617b      	str	r3, [r7, #20]
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop
 80059e4:	e7fd      	b.n	80059e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01f      	beq.n	8005a2c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	e012      	b.n	8005a18 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	7819      	ldrb	r1, [r3, #0]
 80059fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	3334      	adds	r3, #52	@ 0x34
 8005a02:	460a      	mov	r2, r1
 8005a04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d006      	beq.n	8005a20 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	3301      	adds	r3, #1
 8005a16:	61fb      	str	r3, [r7, #28]
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b0f      	cmp	r3, #15
 8005a1c:	d9e9      	bls.n	80059f2 <prvInitialiseNewTask+0x56>
 8005a1e:	e000      	b.n	8005a22 <prvInitialiseNewTask+0x86>
			{
				break;
 8005a20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a2a:	e003      	b.n	8005a34 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a36:	2b06      	cmp	r3, #6
 8005a38:	d901      	bls.n	8005a3e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a3a:	2306      	movs	r3, #6
 8005a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a42:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a48:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a52:	3304      	adds	r3, #4
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fe6c 	bl	8005732 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	3318      	adds	r3, #24
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff fe67 	bl	8005732 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6c:	f1c3 0207 	rsb	r2, r3, #7
 8005a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a78:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8c:	334c      	adds	r3, #76	@ 0x4c
 8005a8e:	224c      	movs	r2, #76	@ 0x4c
 8005a90:	2100      	movs	r1, #0
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 f984 	bl	8006da0 <memset>
 8005a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ad0 <prvInitialiseNewTask+0x134>)
 8005a9c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8005ad4 <prvInitialiseNewTask+0x138>)
 8005aa2:	655a      	str	r2, [r3, #84]	@ 0x54
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8005ad8 <prvInitialiseNewTask+0x13c>)
 8005aa8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	68f9      	ldr	r1, [r7, #12]
 8005aae:	69b8      	ldr	r0, [r7, #24]
 8005ab0:	f000 fc28 	bl	8006304 <pxPortInitialiseStack>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ac6:	bf00      	nop
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20001a38 	.word	0x20001a38
 8005ad4:	20001aa0 	.word	0x20001aa0
 8005ad8:	20001b08 	.word	0x20001b08

08005adc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ae4:	f000 fd02 	bl	80064ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8005b94 <prvAddNewTaskToReadyList+0xb8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	4a29      	ldr	r2, [pc, #164]	@ (8005b94 <prvAddNewTaskToReadyList+0xb8>)
 8005af0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005af2:	4b29      	ldr	r3, [pc, #164]	@ (8005b98 <prvAddNewTaskToReadyList+0xbc>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005afa:	4a27      	ldr	r2, [pc, #156]	@ (8005b98 <prvAddNewTaskToReadyList+0xbc>)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b00:	4b24      	ldr	r3, [pc, #144]	@ (8005b94 <prvAddNewTaskToReadyList+0xb8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d110      	bne.n	8005b2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b08:	f000 fad2 	bl	80060b0 <prvInitialiseTaskLists>
 8005b0c:	e00d      	b.n	8005b2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b0e:	4b23      	ldr	r3, [pc, #140]	@ (8005b9c <prvAddNewTaskToReadyList+0xc0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b16:	4b20      	ldr	r3, [pc, #128]	@ (8005b98 <prvAddNewTaskToReadyList+0xbc>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d802      	bhi.n	8005b2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b24:	4a1c      	ldr	r2, [pc, #112]	@ (8005b98 <prvAddNewTaskToReadyList+0xbc>)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba0 <prvAddNewTaskToReadyList+0xc4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba0 <prvAddNewTaskToReadyList+0xc4>)
 8005b32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b38:	2201      	movs	r2, #1
 8005b3a:	409a      	lsls	r2, r3
 8005b3c:	4b19      	ldr	r3, [pc, #100]	@ (8005ba4 <prvAddNewTaskToReadyList+0xc8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	4a18      	ldr	r2, [pc, #96]	@ (8005ba4 <prvAddNewTaskToReadyList+0xc8>)
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4a15      	ldr	r2, [pc, #84]	@ (8005ba8 <prvAddNewTaskToReadyList+0xcc>)
 8005b54:	441a      	add	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	f7ff fdf4 	bl	800574a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b62:	f000 fcf3 	bl	800654c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b66:	4b0d      	ldr	r3, [pc, #52]	@ (8005b9c <prvAddNewTaskToReadyList+0xc0>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00e      	beq.n	8005b8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b98 <prvAddNewTaskToReadyList+0xbc>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d207      	bcs.n	8005b8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bac <prvAddNewTaskToReadyList+0xd0>)
 8005b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b8c:	bf00      	nop
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20000dd4 	.word	0x20000dd4
 8005b98:	20000cd4 	.word	0x20000cd4
 8005b9c:	20000de0 	.word	0x20000de0
 8005ba0:	20000df0 	.word	0x20000df0
 8005ba4:	20000ddc 	.word	0x20000ddc
 8005ba8:	20000cd8 	.word	0x20000cd8
 8005bac:	e000ed04 	.word	0xe000ed04

08005bb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d018      	beq.n	8005bf4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bc2:	4b14      	ldr	r3, [pc, #80]	@ (8005c14 <vTaskDelay+0x64>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00b      	beq.n	8005be2 <vTaskDelay+0x32>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	60bb      	str	r3, [r7, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	e7fd      	b.n	8005bde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005be2:	f000 f885 	bl	8005cf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005be6:	2100      	movs	r1, #0
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fb25 	bl	8006238 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bee:	f000 f88d 	bl	8005d0c <xTaskResumeAll>
 8005bf2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d107      	bne.n	8005c0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005bfa:	4b07      	ldr	r3, [pc, #28]	@ (8005c18 <vTaskDelay+0x68>)
 8005bfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c0a:	bf00      	nop
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000dfc 	.word	0x20000dfc
 8005c18:	e000ed04 	.word	0xe000ed04

08005c1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08a      	sub	sp, #40	@ 0x28
 8005c20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c2a:	463a      	mov	r2, r7
 8005c2c:	1d39      	adds	r1, r7, #4
 8005c2e:	f107 0308 	add.w	r3, r7, #8
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fa fb42 	bl	80002bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c38:	6839      	ldr	r1, [r7, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	9202      	str	r2, [sp, #8]
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	2300      	movs	r3, #0
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	2300      	movs	r3, #0
 8005c48:	460a      	mov	r2, r1
 8005c4a:	4921      	ldr	r1, [pc, #132]	@ (8005cd0 <vTaskStartScheduler+0xb4>)
 8005c4c:	4821      	ldr	r0, [pc, #132]	@ (8005cd4 <vTaskStartScheduler+0xb8>)
 8005c4e:	f7ff fe00 	bl	8005852 <xTaskCreateStatic>
 8005c52:	4603      	mov	r3, r0
 8005c54:	4a20      	ldr	r2, [pc, #128]	@ (8005cd8 <vTaskStartScheduler+0xbc>)
 8005c56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c58:	4b1f      	ldr	r3, [pc, #124]	@ (8005cd8 <vTaskStartScheduler+0xbc>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c60:	2301      	movs	r3, #1
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	e001      	b.n	8005c6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d11b      	bne.n	8005ca8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	613b      	str	r3, [r7, #16]
}
 8005c82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c84:	4b15      	ldr	r3, [pc, #84]	@ (8005cdc <vTaskStartScheduler+0xc0>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	334c      	adds	r3, #76	@ 0x4c
 8005c8a:	4a15      	ldr	r2, [pc, #84]	@ (8005ce0 <vTaskStartScheduler+0xc4>)
 8005c8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c8e:	4b15      	ldr	r3, [pc, #84]	@ (8005ce4 <vTaskStartScheduler+0xc8>)
 8005c90:	f04f 32ff 	mov.w	r2, #4294967295
 8005c94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c96:	4b14      	ldr	r3, [pc, #80]	@ (8005ce8 <vTaskStartScheduler+0xcc>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c9c:	4b13      	ldr	r3, [pc, #76]	@ (8005cec <vTaskStartScheduler+0xd0>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ca2:	f000 fbb1 	bl	8006408 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ca6:	e00f      	b.n	8005cc8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d10b      	bne.n	8005cc8 <vTaskStartScheduler+0xac>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	60fb      	str	r3, [r7, #12]
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <vTaskStartScheduler+0xa8>
}
 8005cc8:	bf00      	nop
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	08006fe0 	.word	0x08006fe0
 8005cd4:	08006081 	.word	0x08006081
 8005cd8:	20000df8 	.word	0x20000df8
 8005cdc:	20000cd4 	.word	0x20000cd4
 8005ce0:	20000014 	.word	0x20000014
 8005ce4:	20000df4 	.word	0x20000df4
 8005ce8:	20000de0 	.word	0x20000de0
 8005cec:	20000dd8 	.word	0x20000dd8

08005cf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005cf4:	4b04      	ldr	r3, [pc, #16]	@ (8005d08 <vTaskSuspendAll+0x18>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	4a03      	ldr	r2, [pc, #12]	@ (8005d08 <vTaskSuspendAll+0x18>)
 8005cfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cfe:	bf00      	nop
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000dfc 	.word	0x20000dfc

08005d0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d1a:	4b42      	ldr	r3, [pc, #264]	@ (8005e24 <xTaskResumeAll+0x118>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10b      	bne.n	8005d3a <xTaskResumeAll+0x2e>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	603b      	str	r3, [r7, #0]
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	e7fd      	b.n	8005d36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d3a:	f000 fbd7 	bl	80064ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d3e:	4b39      	ldr	r3, [pc, #228]	@ (8005e24 <xTaskResumeAll+0x118>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	4a37      	ldr	r2, [pc, #220]	@ (8005e24 <xTaskResumeAll+0x118>)
 8005d46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d48:	4b36      	ldr	r3, [pc, #216]	@ (8005e24 <xTaskResumeAll+0x118>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d161      	bne.n	8005e14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d50:	4b35      	ldr	r3, [pc, #212]	@ (8005e28 <xTaskResumeAll+0x11c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d05d      	beq.n	8005e14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d58:	e02e      	b.n	8005db8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d5a:	4b34      	ldr	r3, [pc, #208]	@ (8005e2c <xTaskResumeAll+0x120>)
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3318      	adds	r3, #24
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff fd4a 	bl	8005800 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff fd45 	bl	8005800 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	409a      	lsls	r2, r3
 8005d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8005e30 <xTaskResumeAll+0x124>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	4a2a      	ldr	r2, [pc, #168]	@ (8005e30 <xTaskResumeAll+0x124>)
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4a27      	ldr	r2, [pc, #156]	@ (8005e34 <xTaskResumeAll+0x128>)
 8005d96:	441a      	add	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4610      	mov	r0, r2
 8005da0:	f7ff fcd3 	bl	800574a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da8:	4b23      	ldr	r3, [pc, #140]	@ (8005e38 <xTaskResumeAll+0x12c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d302      	bcc.n	8005db8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005db2:	4b22      	ldr	r3, [pc, #136]	@ (8005e3c <xTaskResumeAll+0x130>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005db8:	4b1c      	ldr	r3, [pc, #112]	@ (8005e2c <xTaskResumeAll+0x120>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1cc      	bne.n	8005d5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dc6:	f000 fa17 	bl	80061f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005dca:	4b1d      	ldr	r3, [pc, #116]	@ (8005e40 <xTaskResumeAll+0x134>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d010      	beq.n	8005df8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dd6:	f000 f837 	bl	8005e48 <xTaskIncrementTick>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005de0:	4b16      	ldr	r3, [pc, #88]	@ (8005e3c <xTaskResumeAll+0x130>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1f1      	bne.n	8005dd6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005df2:	4b13      	ldr	r3, [pc, #76]	@ (8005e40 <xTaskResumeAll+0x134>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005df8:	4b10      	ldr	r3, [pc, #64]	@ (8005e3c <xTaskResumeAll+0x130>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d009      	beq.n	8005e14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e00:	2301      	movs	r3, #1
 8005e02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e04:	4b0f      	ldr	r3, [pc, #60]	@ (8005e44 <xTaskResumeAll+0x138>)
 8005e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e14:	f000 fb9a 	bl	800654c <vPortExitCritical>

	return xAlreadyYielded;
 8005e18:	68bb      	ldr	r3, [r7, #8]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000dfc 	.word	0x20000dfc
 8005e28:	20000dd4 	.word	0x20000dd4
 8005e2c:	20000d94 	.word	0x20000d94
 8005e30:	20000ddc 	.word	0x20000ddc
 8005e34:	20000cd8 	.word	0x20000cd8
 8005e38:	20000cd4 	.word	0x20000cd4
 8005e3c:	20000de8 	.word	0x20000de8
 8005e40:	20000de4 	.word	0x20000de4
 8005e44:	e000ed04 	.word	0xe000ed04

08005e48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e52:	4b4f      	ldr	r3, [pc, #316]	@ (8005f90 <xTaskIncrementTick+0x148>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f040 808f 	bne.w	8005f7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e5c:	4b4d      	ldr	r3, [pc, #308]	@ (8005f94 <xTaskIncrementTick+0x14c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3301      	adds	r3, #1
 8005e62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e64:	4a4b      	ldr	r2, [pc, #300]	@ (8005f94 <xTaskIncrementTick+0x14c>)
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d121      	bne.n	8005eb4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e70:	4b49      	ldr	r3, [pc, #292]	@ (8005f98 <xTaskIncrementTick+0x150>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00b      	beq.n	8005e92 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	603b      	str	r3, [r7, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	e7fd      	b.n	8005e8e <xTaskIncrementTick+0x46>
 8005e92:	4b41      	ldr	r3, [pc, #260]	@ (8005f98 <xTaskIncrementTick+0x150>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	4b40      	ldr	r3, [pc, #256]	@ (8005f9c <xTaskIncrementTick+0x154>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a3e      	ldr	r2, [pc, #248]	@ (8005f98 <xTaskIncrementTick+0x150>)
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	4a3e      	ldr	r2, [pc, #248]	@ (8005f9c <xTaskIncrementTick+0x154>)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8005fa0 <xTaskIncrementTick+0x158>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	4a3c      	ldr	r2, [pc, #240]	@ (8005fa0 <xTaskIncrementTick+0x158>)
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	f000 f9a2 	bl	80061f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa4 <xTaskIncrementTick+0x15c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d348      	bcc.n	8005f50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ebe:	4b36      	ldr	r3, [pc, #216]	@ (8005f98 <xTaskIncrementTick+0x150>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d104      	bne.n	8005ed2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ec8:	4b36      	ldr	r3, [pc, #216]	@ (8005fa4 <xTaskIncrementTick+0x15c>)
 8005eca:	f04f 32ff 	mov.w	r2, #4294967295
 8005ece:	601a      	str	r2, [r3, #0]
					break;
 8005ed0:	e03e      	b.n	8005f50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed2:	4b31      	ldr	r3, [pc, #196]	@ (8005f98 <xTaskIncrementTick+0x150>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d203      	bcs.n	8005ef2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005eea:	4a2e      	ldr	r2, [pc, #184]	@ (8005fa4 <xTaskIncrementTick+0x15c>)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ef0:	e02e      	b.n	8005f50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff fc82 	bl	8005800 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d004      	beq.n	8005f0e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	3318      	adds	r3, #24
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff fc79 	bl	8005800 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f12:	2201      	movs	r2, #1
 8005f14:	409a      	lsls	r2, r3
 8005f16:	4b24      	ldr	r3, [pc, #144]	@ (8005fa8 <xTaskIncrementTick+0x160>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	4a22      	ldr	r2, [pc, #136]	@ (8005fa8 <xTaskIncrementTick+0x160>)
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8005fac <xTaskIncrementTick+0x164>)
 8005f2e:	441a      	add	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	3304      	adds	r3, #4
 8005f34:	4619      	mov	r1, r3
 8005f36:	4610      	mov	r0, r2
 8005f38:	f7ff fc07 	bl	800574a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f40:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb0 <xTaskIncrementTick+0x168>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d3b9      	bcc.n	8005ebe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f4e:	e7b6      	b.n	8005ebe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f50:	4b17      	ldr	r3, [pc, #92]	@ (8005fb0 <xTaskIncrementTick+0x168>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f56:	4915      	ldr	r1, [pc, #84]	@ (8005fac <xTaskIncrementTick+0x164>)
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d901      	bls.n	8005f6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f6c:	4b11      	ldr	r3, [pc, #68]	@ (8005fb4 <xTaskIncrementTick+0x16c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d007      	beq.n	8005f84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005f74:	2301      	movs	r3, #1
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e004      	b.n	8005f84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb8 <xTaskIncrementTick+0x170>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	4a0d      	ldr	r2, [pc, #52]	@ (8005fb8 <xTaskIncrementTick+0x170>)
 8005f82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f84:	697b      	ldr	r3, [r7, #20]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000dfc 	.word	0x20000dfc
 8005f94:	20000dd8 	.word	0x20000dd8
 8005f98:	20000d8c 	.word	0x20000d8c
 8005f9c:	20000d90 	.word	0x20000d90
 8005fa0:	20000dec 	.word	0x20000dec
 8005fa4:	20000df4 	.word	0x20000df4
 8005fa8:	20000ddc 	.word	0x20000ddc
 8005fac:	20000cd8 	.word	0x20000cd8
 8005fb0:	20000cd4 	.word	0x20000cd4
 8005fb4:	20000de8 	.word	0x20000de8
 8005fb8:	20000de4 	.word	0x20000de4

08005fbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fc2:	4b29      	ldr	r3, [pc, #164]	@ (8006068 <vTaskSwitchContext+0xac>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fca:	4b28      	ldr	r3, [pc, #160]	@ (800606c <vTaskSwitchContext+0xb0>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fd0:	e045      	b.n	800605e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005fd2:	4b26      	ldr	r3, [pc, #152]	@ (800606c <vTaskSwitchContext+0xb0>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fd8:	4b25      	ldr	r3, [pc, #148]	@ (8006070 <vTaskSwitchContext+0xb4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	fab3 f383 	clz	r3, r3
 8005fe4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005fe6:	7afb      	ldrb	r3, [r7, #11]
 8005fe8:	f1c3 031f 	rsb	r3, r3, #31
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	4921      	ldr	r1, [pc, #132]	@ (8006074 <vTaskSwitchContext+0xb8>)
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	440b      	add	r3, r1
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10b      	bne.n	800601a <vTaskSwitchContext+0x5e>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	607b      	str	r3, [r7, #4]
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	e7fd      	b.n	8006016 <vTaskSwitchContext+0x5a>
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4a13      	ldr	r2, [pc, #76]	@ (8006074 <vTaskSwitchContext+0xb8>)
 8006026:	4413      	add	r3, r2
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	605a      	str	r2, [r3, #4]
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	3308      	adds	r3, #8
 800603c:	429a      	cmp	r2, r3
 800603e:	d104      	bne.n	800604a <vTaskSwitchContext+0x8e>
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	4a09      	ldr	r2, [pc, #36]	@ (8006078 <vTaskSwitchContext+0xbc>)
 8006052:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006054:	4b08      	ldr	r3, [pc, #32]	@ (8006078 <vTaskSwitchContext+0xbc>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	334c      	adds	r3, #76	@ 0x4c
 800605a:	4a08      	ldr	r2, [pc, #32]	@ (800607c <vTaskSwitchContext+0xc0>)
 800605c:	6013      	str	r3, [r2, #0]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	bc80      	pop	{r7}
 8006066:	4770      	bx	lr
 8006068:	20000dfc 	.word	0x20000dfc
 800606c:	20000de8 	.word	0x20000de8
 8006070:	20000ddc 	.word	0x20000ddc
 8006074:	20000cd8 	.word	0x20000cd8
 8006078:	20000cd4 	.word	0x20000cd4
 800607c:	20000014 	.word	0x20000014

08006080 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006088:	f000 f852 	bl	8006130 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800608c:	4b06      	ldr	r3, [pc, #24]	@ (80060a8 <prvIdleTask+0x28>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d9f9      	bls.n	8006088 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006094:	4b05      	ldr	r3, [pc, #20]	@ (80060ac <prvIdleTask+0x2c>)
 8006096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060a4:	e7f0      	b.n	8006088 <prvIdleTask+0x8>
 80060a6:	bf00      	nop
 80060a8:	20000cd8 	.word	0x20000cd8
 80060ac:	e000ed04 	.word	0xe000ed04

080060b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060b6:	2300      	movs	r3, #0
 80060b8:	607b      	str	r3, [r7, #4]
 80060ba:	e00c      	b.n	80060d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	4613      	mov	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4a12      	ldr	r2, [pc, #72]	@ (8006110 <prvInitialiseTaskLists+0x60>)
 80060c8:	4413      	add	r3, r2
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff fb12 	bl	80056f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3301      	adds	r3, #1
 80060d4:	607b      	str	r3, [r7, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b06      	cmp	r3, #6
 80060da:	d9ef      	bls.n	80060bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060dc:	480d      	ldr	r0, [pc, #52]	@ (8006114 <prvInitialiseTaskLists+0x64>)
 80060de:	f7ff fb09 	bl	80056f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060e2:	480d      	ldr	r0, [pc, #52]	@ (8006118 <prvInitialiseTaskLists+0x68>)
 80060e4:	f7ff fb06 	bl	80056f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060e8:	480c      	ldr	r0, [pc, #48]	@ (800611c <prvInitialiseTaskLists+0x6c>)
 80060ea:	f7ff fb03 	bl	80056f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060ee:	480c      	ldr	r0, [pc, #48]	@ (8006120 <prvInitialiseTaskLists+0x70>)
 80060f0:	f7ff fb00 	bl	80056f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060f4:	480b      	ldr	r0, [pc, #44]	@ (8006124 <prvInitialiseTaskLists+0x74>)
 80060f6:	f7ff fafd 	bl	80056f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006128 <prvInitialiseTaskLists+0x78>)
 80060fc:	4a05      	ldr	r2, [pc, #20]	@ (8006114 <prvInitialiseTaskLists+0x64>)
 80060fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006100:	4b0a      	ldr	r3, [pc, #40]	@ (800612c <prvInitialiseTaskLists+0x7c>)
 8006102:	4a05      	ldr	r2, [pc, #20]	@ (8006118 <prvInitialiseTaskLists+0x68>)
 8006104:	601a      	str	r2, [r3, #0]
}
 8006106:	bf00      	nop
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000cd8 	.word	0x20000cd8
 8006114:	20000d64 	.word	0x20000d64
 8006118:	20000d78 	.word	0x20000d78
 800611c:	20000d94 	.word	0x20000d94
 8006120:	20000da8 	.word	0x20000da8
 8006124:	20000dc0 	.word	0x20000dc0
 8006128:	20000d8c 	.word	0x20000d8c
 800612c:	20000d90 	.word	0x20000d90

08006130 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006136:	e019      	b.n	800616c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006138:	f000 f9d8 	bl	80064ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800613c:	4b10      	ldr	r3, [pc, #64]	@ (8006180 <prvCheckTasksWaitingTermination+0x50>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3304      	adds	r3, #4
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff fb59 	bl	8005800 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800614e:	4b0d      	ldr	r3, [pc, #52]	@ (8006184 <prvCheckTasksWaitingTermination+0x54>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3b01      	subs	r3, #1
 8006154:	4a0b      	ldr	r2, [pc, #44]	@ (8006184 <prvCheckTasksWaitingTermination+0x54>)
 8006156:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006158:	4b0b      	ldr	r3, [pc, #44]	@ (8006188 <prvCheckTasksWaitingTermination+0x58>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3b01      	subs	r3, #1
 800615e:	4a0a      	ldr	r2, [pc, #40]	@ (8006188 <prvCheckTasksWaitingTermination+0x58>)
 8006160:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006162:	f000 f9f3 	bl	800654c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f810 	bl	800618c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800616c:	4b06      	ldr	r3, [pc, #24]	@ (8006188 <prvCheckTasksWaitingTermination+0x58>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e1      	bne.n	8006138 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	20000da8 	.word	0x20000da8
 8006184:	20000dd4 	.word	0x20000dd4
 8006188:	20000dbc 	.word	0x20000dbc

0800618c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	334c      	adds	r3, #76	@ 0x4c
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fe09 	bl	8006db0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d108      	bne.n	80061ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fb2d 	bl	800680c <vPortFree>
				vPortFree( pxTCB );
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fb2a 	bl	800680c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061b8:	e019      	b.n	80061ee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d103      	bne.n	80061cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fb21 	bl	800680c <vPortFree>
	}
 80061ca:	e010      	b.n	80061ee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d00b      	beq.n	80061ee <prvDeleteTCB+0x62>
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	60fb      	str	r3, [r7, #12]
}
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop
 80061ec:	e7fd      	b.n	80061ea <prvDeleteTCB+0x5e>
	}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
	...

080061f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006230 <prvResetNextTaskUnblockTime+0x38>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d104      	bne.n	8006212 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006208:	4b0a      	ldr	r3, [pc, #40]	@ (8006234 <prvResetNextTaskUnblockTime+0x3c>)
 800620a:	f04f 32ff 	mov.w	r2, #4294967295
 800620e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006210:	e008      	b.n	8006224 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006212:	4b07      	ldr	r3, [pc, #28]	@ (8006230 <prvResetNextTaskUnblockTime+0x38>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	4a04      	ldr	r2, [pc, #16]	@ (8006234 <prvResetNextTaskUnblockTime+0x3c>)
 8006222:	6013      	str	r3, [r2, #0]
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000d8c 	.word	0x20000d8c
 8006234:	20000df4 	.word	0x20000df4

08006238 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006242:	4b29      	ldr	r3, [pc, #164]	@ (80062e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006248:	4b28      	ldr	r3, [pc, #160]	@ (80062ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3304      	adds	r3, #4
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff fad6 	bl	8005800 <uxListRemove>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10b      	bne.n	8006272 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800625a:	4b24      	ldr	r3, [pc, #144]	@ (80062ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006260:	2201      	movs	r2, #1
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	43da      	mvns	r2, r3
 8006268:	4b21      	ldr	r3, [pc, #132]	@ (80062f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4013      	ands	r3, r2
 800626e:	4a20      	ldr	r2, [pc, #128]	@ (80062f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006270:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006278:	d10a      	bne.n	8006290 <prvAddCurrentTaskToDelayedList+0x58>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006280:	4b1a      	ldr	r3, [pc, #104]	@ (80062ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3304      	adds	r3, #4
 8006286:	4619      	mov	r1, r3
 8006288:	481a      	ldr	r0, [pc, #104]	@ (80062f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800628a:	f7ff fa5e 	bl	800574a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800628e:	e026      	b.n	80062de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4413      	add	r3, r2
 8006296:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006298:	4b14      	ldr	r3, [pc, #80]	@ (80062ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d209      	bcs.n	80062bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062a8:	4b13      	ldr	r3, [pc, #76]	@ (80062f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	4b0f      	ldr	r3, [pc, #60]	@ (80062ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3304      	adds	r3, #4
 80062b2:	4619      	mov	r1, r3
 80062b4:	4610      	mov	r0, r2
 80062b6:	f7ff fa6b 	bl	8005790 <vListInsert>
}
 80062ba:	e010      	b.n	80062de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062bc:	4b0f      	ldr	r3, [pc, #60]	@ (80062fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	4b0a      	ldr	r3, [pc, #40]	@ (80062ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3304      	adds	r3, #4
 80062c6:	4619      	mov	r1, r3
 80062c8:	4610      	mov	r0, r2
 80062ca:	f7ff fa61 	bl	8005790 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <prvAddCurrentTaskToDelayedList+0xc8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d202      	bcs.n	80062de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80062d8:	4a09      	ldr	r2, [pc, #36]	@ (8006300 <prvAddCurrentTaskToDelayedList+0xc8>)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6013      	str	r3, [r2, #0]
}
 80062de:	bf00      	nop
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000dd8 	.word	0x20000dd8
 80062ec:	20000cd4 	.word	0x20000cd4
 80062f0:	20000ddc 	.word	0x20000ddc
 80062f4:	20000dc0 	.word	0x20000dc0
 80062f8:	20000d90 	.word	0x20000d90
 80062fc:	20000d8c 	.word	0x20000d8c
 8006300:	20000df4 	.word	0x20000df4

08006304 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3b04      	subs	r3, #4
 8006314:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800631c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3b04      	subs	r3, #4
 8006322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f023 0201 	bic.w	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	3b04      	subs	r3, #4
 8006332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006334:	4a08      	ldr	r2, [pc, #32]	@ (8006358 <pxPortInitialiseStack+0x54>)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3b14      	subs	r3, #20
 800633e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3b20      	subs	r3, #32
 800634a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800634c:	68fb      	ldr	r3, [r7, #12]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	bc80      	pop	{r7}
 8006356:	4770      	bx	lr
 8006358:	0800635d 	.word	0x0800635d

0800635c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006362:	2300      	movs	r3, #0
 8006364:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006366:	4b12      	ldr	r3, [pc, #72]	@ (80063b0 <prvTaskExitError+0x54>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636e:	d00b      	beq.n	8006388 <prvTaskExitError+0x2c>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	60fb      	str	r3, [r7, #12]
}
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	e7fd      	b.n	8006384 <prvTaskExitError+0x28>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	60bb      	str	r3, [r7, #8]
}
 800639a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800639c:	bf00      	nop
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0fc      	beq.n	800639e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr
 80063b0:	2000000c 	.word	0x2000000c
	...

080063c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063c0:	4b07      	ldr	r3, [pc, #28]	@ (80063e0 <pxCurrentTCBConst2>)
 80063c2:	6819      	ldr	r1, [r3, #0]
 80063c4:	6808      	ldr	r0, [r1, #0]
 80063c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063ca:	f380 8809 	msr	PSP, r0
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f04f 0000 	mov.w	r0, #0
 80063d6:	f380 8811 	msr	BASEPRI, r0
 80063da:	f04e 0e0d 	orr.w	lr, lr, #13
 80063de:	4770      	bx	lr

080063e0 <pxCurrentTCBConst2>:
 80063e0:	20000cd4 	.word	0x20000cd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop

080063e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80063e8:	4806      	ldr	r0, [pc, #24]	@ (8006404 <prvPortStartFirstTask+0x1c>)
 80063ea:	6800      	ldr	r0, [r0, #0]
 80063ec:	6800      	ldr	r0, [r0, #0]
 80063ee:	f380 8808 	msr	MSP, r0
 80063f2:	b662      	cpsie	i
 80063f4:	b661      	cpsie	f
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	df00      	svc	0
 8006400:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006402:	bf00      	nop
 8006404:	e000ed08 	.word	0xe000ed08

08006408 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800640e:	4b32      	ldr	r3, [pc, #200]	@ (80064d8 <xPortStartScheduler+0xd0>)
 8006410:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	22ff      	movs	r2, #255	@ 0xff
 800641e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006430:	b2da      	uxtb	r2, r3
 8006432:	4b2a      	ldr	r3, [pc, #168]	@ (80064dc <xPortStartScheduler+0xd4>)
 8006434:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006436:	4b2a      	ldr	r3, [pc, #168]	@ (80064e0 <xPortStartScheduler+0xd8>)
 8006438:	2207      	movs	r2, #7
 800643a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800643c:	e009      	b.n	8006452 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800643e:	4b28      	ldr	r3, [pc, #160]	@ (80064e0 <xPortStartScheduler+0xd8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3b01      	subs	r3, #1
 8006444:	4a26      	ldr	r2, [pc, #152]	@ (80064e0 <xPortStartScheduler+0xd8>)
 8006446:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	b2db      	uxtb	r3, r3
 8006450:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645a:	2b80      	cmp	r3, #128	@ 0x80
 800645c:	d0ef      	beq.n	800643e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800645e:	4b20      	ldr	r3, [pc, #128]	@ (80064e0 <xPortStartScheduler+0xd8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f1c3 0307 	rsb	r3, r3, #7
 8006466:	2b04      	cmp	r3, #4
 8006468:	d00b      	beq.n	8006482 <xPortStartScheduler+0x7a>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	60bb      	str	r3, [r7, #8]
}
 800647c:	bf00      	nop
 800647e:	bf00      	nop
 8006480:	e7fd      	b.n	800647e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006482:	4b17      	ldr	r3, [pc, #92]	@ (80064e0 <xPortStartScheduler+0xd8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	4a15      	ldr	r2, [pc, #84]	@ (80064e0 <xPortStartScheduler+0xd8>)
 800648a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800648c:	4b14      	ldr	r3, [pc, #80]	@ (80064e0 <xPortStartScheduler+0xd8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006494:	4a12      	ldr	r2, [pc, #72]	@ (80064e0 <xPortStartScheduler+0xd8>)
 8006496:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	b2da      	uxtb	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064a0:	4b10      	ldr	r3, [pc, #64]	@ (80064e4 <xPortStartScheduler+0xdc>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a0f      	ldr	r2, [pc, #60]	@ (80064e4 <xPortStartScheduler+0xdc>)
 80064a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80064aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064ac:	4b0d      	ldr	r3, [pc, #52]	@ (80064e4 <xPortStartScheduler+0xdc>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a0c      	ldr	r2, [pc, #48]	@ (80064e4 <xPortStartScheduler+0xdc>)
 80064b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80064b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064b8:	f000 f8b8 	bl	800662c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064bc:	4b0a      	ldr	r3, [pc, #40]	@ (80064e8 <xPortStartScheduler+0xe0>)
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064c2:	f7ff ff91 	bl	80063e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064c6:	f7ff fd79 	bl	8005fbc <vTaskSwitchContext>
	prvTaskExitError();
 80064ca:	f7ff ff47 	bl	800635c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	e000e400 	.word	0xe000e400
 80064dc:	20000e00 	.word	0x20000e00
 80064e0:	20000e04 	.word	0x20000e04
 80064e4:	e000ed20 	.word	0xe000ed20
 80064e8:	2000000c 	.word	0x2000000c

080064ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
	__asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	607b      	str	r3, [r7, #4]
}
 8006504:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006506:	4b0f      	ldr	r3, [pc, #60]	@ (8006544 <vPortEnterCritical+0x58>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3301      	adds	r3, #1
 800650c:	4a0d      	ldr	r2, [pc, #52]	@ (8006544 <vPortEnterCritical+0x58>)
 800650e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006510:	4b0c      	ldr	r3, [pc, #48]	@ (8006544 <vPortEnterCritical+0x58>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d110      	bne.n	800653a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006518:	4b0b      	ldr	r3, [pc, #44]	@ (8006548 <vPortEnterCritical+0x5c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00b      	beq.n	800653a <vPortEnterCritical+0x4e>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	603b      	str	r3, [r7, #0]
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop
 8006538:	e7fd      	b.n	8006536 <vPortEnterCritical+0x4a>
	}
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	bc80      	pop	{r7}
 8006542:	4770      	bx	lr
 8006544:	2000000c 	.word	0x2000000c
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006552:	4b12      	ldr	r3, [pc, #72]	@ (800659c <vPortExitCritical+0x50>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10b      	bne.n	8006572 <vPortExitCritical+0x26>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	607b      	str	r3, [r7, #4]
}
 800656c:	bf00      	nop
 800656e:	bf00      	nop
 8006570:	e7fd      	b.n	800656e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006572:	4b0a      	ldr	r3, [pc, #40]	@ (800659c <vPortExitCritical+0x50>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3b01      	subs	r3, #1
 8006578:	4a08      	ldr	r2, [pc, #32]	@ (800659c <vPortExitCritical+0x50>)
 800657a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800657c:	4b07      	ldr	r3, [pc, #28]	@ (800659c <vPortExitCritical+0x50>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d105      	bne.n	8006590 <vPortExitCritical+0x44>
 8006584:	2300      	movs	r3, #0
 8006586:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800658e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	2000000c 	.word	0x2000000c

080065a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065a0:	f3ef 8009 	mrs	r0, PSP
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	4b0d      	ldr	r3, [pc, #52]	@ (80065e0 <pxCurrentTCBConst>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80065b0:	6010      	str	r0, [r2, #0]
 80065b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80065b6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80065ba:	f380 8811 	msr	BASEPRI, r0
 80065be:	f7ff fcfd 	bl	8005fbc <vTaskSwitchContext>
 80065c2:	f04f 0000 	mov.w	r0, #0
 80065c6:	f380 8811 	msr	BASEPRI, r0
 80065ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80065ce:	6819      	ldr	r1, [r3, #0]
 80065d0:	6808      	ldr	r0, [r1, #0]
 80065d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80065d6:	f380 8809 	msr	PSP, r0
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	4770      	bx	lr

080065e0 <pxCurrentTCBConst>:
 80065e0:	20000cd4 	.word	0x20000cd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop

080065e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	607b      	str	r3, [r7, #4]
}
 8006600:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006602:	f7ff fc21 	bl	8005e48 <xTaskIncrementTick>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800660c:	4b06      	ldr	r3, [pc, #24]	@ (8006628 <SysTick_Handler+0x40>)
 800660e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	2300      	movs	r3, #0
 8006616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	f383 8811 	msr	BASEPRI, r3
}
 800661e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006620:	bf00      	nop
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	e000ed04 	.word	0xe000ed04

0800662c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006630:	4b0a      	ldr	r3, [pc, #40]	@ (800665c <vPortSetupTimerInterrupt+0x30>)
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006636:	4b0a      	ldr	r3, [pc, #40]	@ (8006660 <vPortSetupTimerInterrupt+0x34>)
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800663c:	4b09      	ldr	r3, [pc, #36]	@ (8006664 <vPortSetupTimerInterrupt+0x38>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a09      	ldr	r2, [pc, #36]	@ (8006668 <vPortSetupTimerInterrupt+0x3c>)
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	099b      	lsrs	r3, r3, #6
 8006648:	4a08      	ldr	r2, [pc, #32]	@ (800666c <vPortSetupTimerInterrupt+0x40>)
 800664a:	3b01      	subs	r3, #1
 800664c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800664e:	4b03      	ldr	r3, [pc, #12]	@ (800665c <vPortSetupTimerInterrupt+0x30>)
 8006650:	2207      	movs	r2, #7
 8006652:	601a      	str	r2, [r3, #0]
}
 8006654:	bf00      	nop
 8006656:	46bd      	mov	sp, r7
 8006658:	bc80      	pop	{r7}
 800665a:	4770      	bx	lr
 800665c:	e000e010 	.word	0xe000e010
 8006660:	e000e018 	.word	0xe000e018
 8006664:	20000000 	.word	0x20000000
 8006668:	10624dd3 	.word	0x10624dd3
 800666c:	e000e014 	.word	0xe000e014

08006670 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08a      	sub	sp, #40	@ 0x28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006678:	2300      	movs	r3, #0
 800667a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800667c:	f7ff fb38 	bl	8005cf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006680:	4b5c      	ldr	r3, [pc, #368]	@ (80067f4 <pvPortMalloc+0x184>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006688:	f000 f924 	bl	80068d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800668c:	4b5a      	ldr	r3, [pc, #360]	@ (80067f8 <pvPortMalloc+0x188>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4013      	ands	r3, r2
 8006694:	2b00      	cmp	r3, #0
 8006696:	f040 8095 	bne.w	80067c4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01e      	beq.n	80066de <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80066a0:	2208      	movs	r2, #8
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4413      	add	r3, r2
 80066a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d015      	beq.n	80066de <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f023 0307 	bic.w	r3, r3, #7
 80066b8:	3308      	adds	r3, #8
 80066ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f003 0307 	and.w	r3, r3, #7
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00b      	beq.n	80066de <pvPortMalloc+0x6e>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	617b      	str	r3, [r7, #20]
}
 80066d8:	bf00      	nop
 80066da:	bf00      	nop
 80066dc:	e7fd      	b.n	80066da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d06f      	beq.n	80067c4 <pvPortMalloc+0x154>
 80066e4:	4b45      	ldr	r3, [pc, #276]	@ (80067fc <pvPortMalloc+0x18c>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d86a      	bhi.n	80067c4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066ee:	4b44      	ldr	r3, [pc, #272]	@ (8006800 <pvPortMalloc+0x190>)
 80066f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066f2:	4b43      	ldr	r3, [pc, #268]	@ (8006800 <pvPortMalloc+0x190>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066f8:	e004      	b.n	8006704 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	d903      	bls.n	8006716 <pvPortMalloc+0xa6>
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1f1      	bne.n	80066fa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006716:	4b37      	ldr	r3, [pc, #220]	@ (80067f4 <pvPortMalloc+0x184>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800671c:	429a      	cmp	r2, r3
 800671e:	d051      	beq.n	80067c4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2208      	movs	r2, #8
 8006726:	4413      	add	r3, r2
 8006728:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	1ad2      	subs	r2, r2, r3
 800673a:	2308      	movs	r3, #8
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	429a      	cmp	r2, r3
 8006740:	d920      	bls.n	8006784 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4413      	add	r3, r2
 8006748:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	f003 0307 	and.w	r3, r3, #7
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00b      	beq.n	800676c <pvPortMalloc+0xfc>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	613b      	str	r3, [r7, #16]
}
 8006766:	bf00      	nop
 8006768:	bf00      	nop
 800676a:	e7fd      	b.n	8006768 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	1ad2      	subs	r2, r2, r3
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800677e:	69b8      	ldr	r0, [r7, #24]
 8006780:	f000 f90a 	bl	8006998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006784:	4b1d      	ldr	r3, [pc, #116]	@ (80067fc <pvPortMalloc+0x18c>)
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	4a1b      	ldr	r2, [pc, #108]	@ (80067fc <pvPortMalloc+0x18c>)
 8006790:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006792:	4b1a      	ldr	r3, [pc, #104]	@ (80067fc <pvPortMalloc+0x18c>)
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	4b1b      	ldr	r3, [pc, #108]	@ (8006804 <pvPortMalloc+0x194>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d203      	bcs.n	80067a6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800679e:	4b17      	ldr	r3, [pc, #92]	@ (80067fc <pvPortMalloc+0x18c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a18      	ldr	r2, [pc, #96]	@ (8006804 <pvPortMalloc+0x194>)
 80067a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	4b13      	ldr	r3, [pc, #76]	@ (80067f8 <pvPortMalloc+0x188>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067ba:	4b13      	ldr	r3, [pc, #76]	@ (8006808 <pvPortMalloc+0x198>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3301      	adds	r3, #1
 80067c0:	4a11      	ldr	r2, [pc, #68]	@ (8006808 <pvPortMalloc+0x198>)
 80067c2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067c4:	f7ff faa2 	bl	8005d0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00b      	beq.n	80067ea <pvPortMalloc+0x17a>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	60fb      	str	r3, [r7, #12]
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	e7fd      	b.n	80067e6 <pvPortMalloc+0x176>
	return pvReturn;
 80067ea:	69fb      	ldr	r3, [r7, #28]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3728      	adds	r7, #40	@ 0x28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20001a10 	.word	0x20001a10
 80067f8:	20001a24 	.word	0x20001a24
 80067fc:	20001a14 	.word	0x20001a14
 8006800:	20001a08 	.word	0x20001a08
 8006804:	20001a18 	.word	0x20001a18
 8006808:	20001a1c 	.word	0x20001a1c

0800680c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d04f      	beq.n	80068be <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800681e:	2308      	movs	r3, #8
 8006820:	425b      	negs	r3, r3
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	4413      	add	r3, r2
 8006826:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	4b25      	ldr	r3, [pc, #148]	@ (80068c8 <vPortFree+0xbc>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4013      	ands	r3, r2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10b      	bne.n	8006852 <vPortFree+0x46>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	60fb      	str	r3, [r7, #12]
}
 800684c:	bf00      	nop
 800684e:	bf00      	nop
 8006850:	e7fd      	b.n	800684e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00b      	beq.n	8006872 <vPortFree+0x66>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	60bb      	str	r3, [r7, #8]
}
 800686c:	bf00      	nop
 800686e:	bf00      	nop
 8006870:	e7fd      	b.n	800686e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	4b14      	ldr	r3, [pc, #80]	@ (80068c8 <vPortFree+0xbc>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4013      	ands	r3, r2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01e      	beq.n	80068be <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d11a      	bne.n	80068be <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	4b0e      	ldr	r3, [pc, #56]	@ (80068c8 <vPortFree+0xbc>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	43db      	mvns	r3, r3
 8006892:	401a      	ands	r2, r3
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006898:	f7ff fa2a 	bl	8005cf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	4b0a      	ldr	r3, [pc, #40]	@ (80068cc <vPortFree+0xc0>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4413      	add	r3, r2
 80068a6:	4a09      	ldr	r2, [pc, #36]	@ (80068cc <vPortFree+0xc0>)
 80068a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068aa:	6938      	ldr	r0, [r7, #16]
 80068ac:	f000 f874 	bl	8006998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068b0:	4b07      	ldr	r3, [pc, #28]	@ (80068d0 <vPortFree+0xc4>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3301      	adds	r3, #1
 80068b6:	4a06      	ldr	r2, [pc, #24]	@ (80068d0 <vPortFree+0xc4>)
 80068b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068ba:	f7ff fa27 	bl	8005d0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068be:	bf00      	nop
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20001a24 	.word	0x20001a24
 80068cc:	20001a14 	.word	0x20001a14
 80068d0:	20001a20 	.word	0x20001a20

080068d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80068de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068e0:	4b27      	ldr	r3, [pc, #156]	@ (8006980 <prvHeapInit+0xac>)
 80068e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00c      	beq.n	8006908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3307      	adds	r3, #7
 80068f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0307 	bic.w	r3, r3, #7
 80068fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	4a1f      	ldr	r2, [pc, #124]	@ (8006980 <prvHeapInit+0xac>)
 8006904:	4413      	add	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800690c:	4a1d      	ldr	r2, [pc, #116]	@ (8006984 <prvHeapInit+0xb0>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006912:	4b1c      	ldr	r3, [pc, #112]	@ (8006984 <prvHeapInit+0xb0>)
 8006914:	2200      	movs	r2, #0
 8006916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	4413      	add	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006920:	2208      	movs	r2, #8
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	1a9b      	subs	r3, r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0307 	bic.w	r3, r3, #7
 800692e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4a15      	ldr	r2, [pc, #84]	@ (8006988 <prvHeapInit+0xb4>)
 8006934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006936:	4b14      	ldr	r3, [pc, #80]	@ (8006988 <prvHeapInit+0xb4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2200      	movs	r2, #0
 800693c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800693e:	4b12      	ldr	r3, [pc, #72]	@ (8006988 <prvHeapInit+0xb4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	1ad2      	subs	r2, r2, r3
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006954:	4b0c      	ldr	r3, [pc, #48]	@ (8006988 <prvHeapInit+0xb4>)
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	4a0a      	ldr	r2, [pc, #40]	@ (800698c <prvHeapInit+0xb8>)
 8006962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	4a09      	ldr	r2, [pc, #36]	@ (8006990 <prvHeapInit+0xbc>)
 800696a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800696c:	4b09      	ldr	r3, [pc, #36]	@ (8006994 <prvHeapInit+0xc0>)
 800696e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	20000e08 	.word	0x20000e08
 8006984:	20001a08 	.word	0x20001a08
 8006988:	20001a10 	.word	0x20001a10
 800698c:	20001a18 	.word	0x20001a18
 8006990:	20001a14 	.word	0x20001a14
 8006994:	20001a24 	.word	0x20001a24

08006998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069a0:	4b27      	ldr	r3, [pc, #156]	@ (8006a40 <prvInsertBlockIntoFreeList+0xa8>)
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e002      	b.n	80069ac <prvInsertBlockIntoFreeList+0x14>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d8f7      	bhi.n	80069a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	4413      	add	r3, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d108      	bne.n	80069da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	441a      	add	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	441a      	add	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d118      	bne.n	8006a20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	4b14      	ldr	r3, [pc, #80]	@ (8006a44 <prvInsertBlockIntoFreeList+0xac>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d00d      	beq.n	8006a16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	441a      	add	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	e008      	b.n	8006a28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a16:	4b0b      	ldr	r3, [pc, #44]	@ (8006a44 <prvInsertBlockIntoFreeList+0xac>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	e003      	b.n	8006a28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d002      	beq.n	8006a36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a36:	bf00      	nop
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bc80      	pop	{r7}
 8006a3e:	4770      	bx	lr
 8006a40:	20001a08 	.word	0x20001a08
 8006a44:	20001a10 	.word	0x20001a10

08006a48 <TMC2209_setup>:
static uint8_t toff_ = TOFF_DEFAULT;
static uint8_t PWM_Pulse_Complete = TRUE;
static uint8_t Driver_Enable = FALSE;

void TMC2209_setup()
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0

//	globalSetup.enablePin = setup->enablePin;
//	globalSetup.stepPin = setup->stepPin;
//	globalSetup.txPin = setup->txPin;

	gconfConfig.bytes = FALSE;
 8006a4c:	4b17      	ldr	r3, [pc, #92]	@ (8006aac <TMC2209_setup+0x64>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	601a      	str	r2, [r3, #0]
	gconfConfig.I_scale_analog = TRUE;
 8006a52:	4a16      	ldr	r2, [pc, #88]	@ (8006aac <TMC2209_setup+0x64>)
 8006a54:	7813      	ldrb	r3, [r2, #0]
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	7013      	strb	r3, [r2, #0]
	gconfConfig.pdn_disable = TRUE;
 8006a5c:	4a13      	ldr	r2, [pc, #76]	@ (8006aac <TMC2209_setup+0x64>)
 8006a5e:	7813      	ldrb	r3, [r2, #0]
 8006a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a64:	7013      	strb	r3, [r2, #0]
	gconfConfig.multistep_filt = TRUE;
 8006a66:	4a11      	ldr	r2, [pc, #68]	@ (8006aac <TMC2209_setup+0x64>)
 8006a68:	7853      	ldrb	r3, [r2, #1]
 8006a6a:	f043 0301 	orr.w	r3, r3, #1
 8006a6e:	7053      	strb	r3, [r2, #1]
	gconfConfig.mstep_reg_select = TRUE;
 8006a70:	4a0e      	ldr	r2, [pc, #56]	@ (8006aac <TMC2209_setup+0x64>)
 8006a72:	7813      	ldrb	r3, [r2, #0]
 8006a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a78:	7013      	strb	r3, [r2, #0]

	slaveConfig.conf = 0x00;
 8006a7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006ab0 <TMC2209_setup+0x68>)
 8006a7c:	7853      	ldrb	r3, [r2, #1]
 8006a7e:	f36f 0303 	bfc	r3, #0, #4
 8006a82:	7053      	strb	r3, [r2, #1]

	TMC2209_HAL_Write(TMC2209Reg_GCONF, gconfConfig.bytes);
 8006a84:	4b09      	ldr	r3, [pc, #36]	@ (8006aac <TMC2209_setup+0x64>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	f000 f8c0 	bl	8006c10 <TMC2209_HAL_Write>
	TMC2209_HAL_Write(TMC2209Reg_SLAVECONF, slaveConfig.bytes);
 8006a90:	4b07      	ldr	r3, [pc, #28]	@ (8006ab0 <TMC2209_setup+0x68>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4619      	mov	r1, r3
 8006a96:	2003      	movs	r0, #3
 8006a98:	f000 f8ba 	bl	8006c10 <TMC2209_HAL_Write>
	TMC2209_disable();
 8006a9c:	f000 f80a 	bl	8006ab4 <TMC2209_disable>
	HAL_Delay(100);
 8006aa0:	2064      	movs	r0, #100	@ 0x64
 8006aa2:	f7fa f8db 	bl	8000c5c <HAL_Delay>
}
 8006aa6:	bf00      	nop
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20001a2c 	.word	0x20001a2c
 8006ab0:	20001a30 	.word	0x20001a30

08006ab4 <TMC2209_disable>:
	Driver_Enable = TRUE;
	chopConfig.toff = toff_;
}

void TMC2209_disable()
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8006ab8:	2201      	movs	r2, #1
 8006aba:	2104      	movs	r1, #4
 8006abc:	4806      	ldr	r0, [pc, #24]	@ (8006ad8 <TMC2209_disable+0x24>)
 8006abe:	f7fa fd77 	bl	80015b0 <HAL_GPIO_WritePin>
	Driver_Enable = FALSE;
 8006ac2:	4b06      	ldr	r3, [pc, #24]	@ (8006adc <TMC2209_disable+0x28>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	701a      	strb	r2, [r3, #0]
	chopConfig.toff = TOFF_DISABLE;
 8006ac8:	4a05      	ldr	r2, [pc, #20]	@ (8006ae0 <TMC2209_disable+0x2c>)
 8006aca:	7813      	ldrb	r3, [r2, #0]
 8006acc:	f36f 0303 	bfc	r3, #0, #4
 8006ad0:	7013      	strb	r3, [r2, #0]
}
 8006ad2:	bf00      	nop
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	40010800 	.word	0x40010800
 8006adc:	20001a34 	.word	0x20001a34
 8006ae0:	20001a28 	.word	0x20001a28

08006ae4 <TMC2209_readChopConfig>:
	chopConfig.bytes = 0x10000053;
	chopConfig.mres = Microstep;
	TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
}
void TMC2209_readChopConfig(uint32_t* result)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
	uint32_t buffer = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]
	TMC2209_HAL_Read(TMC2209Reg_GCONF, &buffer);
 8006af0:	f107 030c 	add.w	r3, r7, #12
 8006af4:	4619      	mov	r1, r3
 8006af6:	2000      	movs	r0, #0
 8006af8:	f000 f8c8 	bl	8006c8c <TMC2209_HAL_Read>
	*result = buffer;
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	601a      	str	r2, [r3, #0]
}
 8006b02:	bf00      	nop
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <HAL_TIM_PWM_PulseFinishedCallback>:
		PWM_Pulse_Complete = FALSE;
	}
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b1c:	d106      	bne.n	8006b2c <HAL_TIM_PWM_PulseFinishedCallback+0x20>
		HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 8006b1e:	2100      	movs	r1, #0
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7fd f8b9 	bl	8003c98 <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 8006b26:	4b03      	ldr	r3, [pc, #12]	@ (8006b34 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8006b28:	2201      	movs	r2, #1
 8006b2a:	701a      	strb	r2, [r3, #0]
	}
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20000010 	.word	0x20000010

08006b38 <calculateCRC>:
#include "../Inc/TMC2209_HAL.h"

extern UART_HandleTypeDef huart1;

static void calculateCRC(uint8_t* datagram, uint8_t datagram_len)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
	int i,j;
	uint8_t *crc = datagram + (datagram_len - 1);
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	60bb      	str	r3, [r7, #8]
	uint8_t currentByte;
	*crc = 0;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2200      	movs	r2, #0
 8006b52:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (datagram_len - 1); i++) {
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	e02e      	b.n	8006bb8 <calculateCRC+0x80>
		currentByte = datagram[i];
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	4413      	add	r3, r2
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < 8; j++) {
 8006b64:	2300      	movs	r3, #0
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	e020      	b.n	8006bac <calculateCRC+0x74>
			if ((*crc >> 7) ^ (currentByte & 0x01))
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	09db      	lsrs	r3, r3, #7
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	461a      	mov	r2, r3
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d00a      	beq.n	8006b94 <calculateCRC+0x5c>
				*crc = (*crc << 1) ^ 0x07;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	b25b      	sxtb	r3, r3
 8006b86:	f083 0307 	eor.w	r3, r3, #7
 8006b8a:	b25b      	sxtb	r3, r3
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	e005      	b.n	8006ba0 <calculateCRC+0x68>
			else
				*crc = (*crc << 1);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	701a      	strb	r2, [r3, #0]
			currentByte = currentByte >> 1;
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < 8; j++) {
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	613b      	str	r3, [r7, #16]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2b07      	cmp	r3, #7
 8006bb0:	dddb      	ble.n	8006b6a <calculateCRC+0x32>
	for (i = 0; i < (datagram_len - 1); i++) {
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	dbcb      	blt.n	8006b5a <calculateCRC+0x22>
		}
	}
}
 8006bc2:	bf00      	nop
 8006bc4:	bf00      	nop
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bc80      	pop	{r7}
 8006bcc:	4770      	bx	lr

08006bce <byteswap>:
static void byteswap (uint8_t data[4])
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
    uint8_t tmp;

    tmp = data[0];
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	73fb      	strb	r3, [r7, #15]
    data[0] = data[3];
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	78da      	ldrb	r2, [r3, #3]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	701a      	strb	r2, [r3, #0]
    data[3] = tmp;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3303      	adds	r3, #3
 8006be8:	7bfa      	ldrb	r2, [r7, #15]
 8006bea:	701a      	strb	r2, [r3, #0]
    tmp = data[1];
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	785b      	ldrb	r3, [r3, #1]
 8006bf0:	73fb      	strb	r3, [r7, #15]
    data[1] = data[2];
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	7892      	ldrb	r2, [r2, #2]
 8006bfa:	701a      	strb	r2, [r3, #0]
    data[2] = tmp;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3302      	adds	r3, #2
 8006c00:	7bfa      	ldrb	r2, [r7, #15]
 8006c02:	701a      	strb	r2, [r3, #0]
}
 8006c04:	bf00      	nop
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bc80      	pop	{r7}
 8006c0c:	4770      	bx	lr
	...

08006c10 <TMC2209_HAL_Write>:

HAL_StatusTypeDef TMC2209_HAL_Write(uint8_t reg, uint32_t data)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	6039      	str	r1, [r7, #0]
 8006c1a:	71fb      	strb	r3, [r7, #7]
	TMC2209_Write_Datagram_t datagram;
	datagram.data = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	2300      	movs	r3, #0
 8006c22:	613b      	str	r3, [r7, #16]
	datagram.message.sync = 0x05;
 8006c24:	2305      	movs	r3, #5
 8006c26:	733b      	strb	r3, [r7, #12]
	datagram.message.slave = 0x00;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	737b      	strb	r3, [r7, #13]
	datagram.message.address.idx = reg;
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	f362 0306 	bfi	r3, r2, #0, #7
 8006c3a:	73bb      	strb	r3, [r7, #14]
	datagram.message.address.write = REG_WRITE;
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c42:	73bb      	strb	r3, [r7, #14]
	datagram.message.payload.value = data;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	f8c7 300f 	str.w	r3, [r7, #15]
	byteswap(datagram.message.payload.data);
 8006c4a:	f107 030c 	add.w	r3, r7, #12
 8006c4e:	3303      	adds	r3, #3
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff ffbc 	bl	8006bce <byteswap>

	calculateCRC(datagram.bytes, sizeof(TMC2209_Write_Datagram_t));
 8006c56:	f107 030c 	add.w	r3, r7, #12
 8006c5a:	2108      	movs	r1, #8
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff ff6b 	bl	8006b38 <calculateCRC>
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8006c62:	4809      	ldr	r0, [pc, #36]	@ (8006c88 <TMC2209_HAL_Write+0x78>)
 8006c64:	f7fe f9a7 	bl	8004fb6 <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, datagram.bytes, sizeof(TMC2209_Write_Datagram_t), HAL_MAX_DELAY);
 8006c68:	f107 010c 	add.w	r1, r7, #12
 8006c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c70:	2208      	movs	r2, #8
 8006c72:	4805      	ldr	r0, [pc, #20]	@ (8006c88 <TMC2209_HAL_Write+0x78>)
 8006c74:	f7fd fd72 	bl	800475c <HAL_UART_Transmit>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	75fb      	strb	r3, [r7, #23]

	return status;
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3718      	adds	r7, #24
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000c10 	.word	0x20000c10

08006c8c <TMC2209_HAL_Read>:
HAL_StatusTypeDef TMC2209_HAL_Read(uint8_t reg, uint32_t* result)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08c      	sub	sp, #48	@ 0x30
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	6039      	str	r1, [r7, #0]
 8006c96:	71fb      	strb	r3, [r7, #7]
	TMC2209_Read_Datagram_t datagram;
	TMC2209_Write_Datagram_t res;

	datagram.data = 0;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	623b      	str	r3, [r7, #32]
	res.data = 0;
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	f04f 0300 	mov.w	r3, #0
 8006ca4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	datagram.message.sync = 0x05;
 8006ca8:	2305      	movs	r3, #5
 8006caa:	f887 3020 	strb.w	r3, [r7, #32]
	datagram.message.slave = 0x00;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	datagram.message.address.idx = reg & 0x7F;
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006cc0:	f362 0306 	bfi	r3, r2, #0, #7
 8006cc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	datagram.message.address.write = REG_READ;
 8006cc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006ccc:	f36f 13c7 	bfc	r3, #7, #1
 8006cd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	calculateCRC(datagram.bytes, sizeof(TMC2209_Read_Datagram_t));
 8006cd4:	f107 0320 	add.w	r3, r7, #32
 8006cd8:	2104      	movs	r1, #4
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff ff2c 	bl	8006b38 <calculateCRC>

	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8006ce0:	482e      	ldr	r0, [pc, #184]	@ (8006d9c <TMC2209_HAL_Read+0x110>)
 8006ce2:	f7fe f968 	bl	8004fb6 <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef wstatus = HAL_UART_Transmit(&huart1, datagram.bytes, sizeof(TMC2209_Read_Datagram_t), HAL_MAX_DELAY);
 8006ce6:	f107 0120 	add.w	r1, r7, #32
 8006cea:	f04f 33ff 	mov.w	r3, #4294967295
 8006cee:	2204      	movs	r2, #4
 8006cf0:	482a      	ldr	r0, [pc, #168]	@ (8006d9c <TMC2209_HAL_Read+0x110>)
 8006cf2:	f7fd fd33 	bl	800475c <HAL_UART_Transmit>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if(wstatus == HAL_OK){
 8006cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d145      	bne.n	8006d90 <TMC2209_HAL_Read+0x104>
		uint8_t buffer[8] = {0};
 8006d04:	2300      	movs	r3, #0
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]
		HAL_StatusTypeDef rstatus;
		for(int i = 0; i < 8 ; i++){
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d10:	e011      	b.n	8006d36 <TMC2209_HAL_Read+0xaa>
			HAL_HalfDuplex_EnableReceiver(&huart1);
 8006d12:	4822      	ldr	r0, [pc, #136]	@ (8006d9c <TMC2209_HAL_Read+0x110>)
 8006d14:	f7fe f982 	bl	800501c <HAL_HalfDuplex_EnableReceiver>
			rstatus = HAL_UART_Receive(&huart1, &buffer[i], sizeof(buffer), 100);
 8006d18:	f107 0210 	add.w	r2, r7, #16
 8006d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1e:	18d1      	adds	r1, r2, r3
 8006d20:	2364      	movs	r3, #100	@ 0x64
 8006d22:	2208      	movs	r2, #8
 8006d24:	481d      	ldr	r0, [pc, #116]	@ (8006d9c <TMC2209_HAL_Read+0x110>)
 8006d26:	f7fd fda4 	bl	8004872 <HAL_UART_Receive>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		for(int i = 0; i < 8 ; i++){
 8006d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d32:	3301      	adds	r3, #1
 8006d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d38:	2b07      	cmp	r3, #7
 8006d3a:	ddea      	ble.n	8006d12 <TMC2209_HAL_Read+0x86>
		}
		if(rstatus == HAL_OK){
 8006d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d125      	bne.n	8006d90 <TMC2209_HAL_Read+0x104>
			memcpy(res.bytes, buffer, sizeof(buffer));
 8006d44:	f107 0318 	add.w	r3, r7, #24
 8006d48:	f107 0210 	add.w	r2, r7, #16
 8006d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d50:	e883 0003 	stmia.w	r3, {r0, r1}
			uint8_t crc = res.message.crc;
 8006d54:	7ffb      	ldrb	r3, [r7, #31]
 8006d56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			calculateCRC(res.bytes, sizeof(	TMC2209_Write_Datagram_t));
 8006d5a:	f107 0318 	add.w	r3, r7, #24
 8006d5e:	2108      	movs	r1, #8
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff fee9 	bl	8006b38 <calculateCRC>
			if(res.message.slave == 0xFF && crc == res.message.crc){
 8006d66:	7e7b      	ldrb	r3, [r7, #25]
 8006d68:	2bff      	cmp	r3, #255	@ 0xff
 8006d6a:	d111      	bne.n	8006d90 <TMC2209_HAL_Read+0x104>
 8006d6c:	7ffb      	ldrb	r3, [r7, #31]
 8006d6e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d10c      	bne.n	8006d90 <TMC2209_HAL_Read+0x104>
				uint8_t temp_var[4];
				memcpy(temp_var,res.message.payload.data, sizeof(temp_var));
 8006d76:	f8d7 301b 	ldr.w	r3, [r7, #27]
 8006d7a:	60fb      	str	r3, [r7, #12]
				byteswap(temp_var);
 8006d7c:	f107 030c 	add.w	r3, r7, #12
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff ff24 	bl	8006bce <byteswap>
				*result = *(uint32_t*)temp_var;
 8006d86:	f107 030c 	add.w	r3, r7, #12
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	601a      	str	r2, [r3, #0]
			}
		}
	}
	return wstatus;
 8006d90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3730      	adds	r7, #48	@ 0x30
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	20000c10 	.word	0x20000c10

08006da0 <memset>:
 8006da0:	4603      	mov	r3, r0
 8006da2:	4402      	add	r2, r0
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d100      	bne.n	8006daa <memset+0xa>
 8006da8:	4770      	bx	lr
 8006daa:	f803 1b01 	strb.w	r1, [r3], #1
 8006dae:	e7f9      	b.n	8006da4 <memset+0x4>

08006db0 <_reclaim_reent>:
 8006db0:	4b29      	ldr	r3, [pc, #164]	@ (8006e58 <_reclaim_reent+0xa8>)
 8006db2:	b570      	push	{r4, r5, r6, lr}
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4604      	mov	r4, r0
 8006db8:	4283      	cmp	r3, r0
 8006dba:	d04b      	beq.n	8006e54 <_reclaim_reent+0xa4>
 8006dbc:	69c3      	ldr	r3, [r0, #28]
 8006dbe:	b1ab      	cbz	r3, 8006dec <_reclaim_reent+0x3c>
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	b16b      	cbz	r3, 8006de0 <_reclaim_reent+0x30>
 8006dc4:	2500      	movs	r5, #0
 8006dc6:	69e3      	ldr	r3, [r4, #28]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	5959      	ldr	r1, [r3, r5]
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	d13b      	bne.n	8006e48 <_reclaim_reent+0x98>
 8006dd0:	3504      	adds	r5, #4
 8006dd2:	2d80      	cmp	r5, #128	@ 0x80
 8006dd4:	d1f7      	bne.n	8006dc6 <_reclaim_reent+0x16>
 8006dd6:	69e3      	ldr	r3, [r4, #28]
 8006dd8:	4620      	mov	r0, r4
 8006dda:	68d9      	ldr	r1, [r3, #12]
 8006ddc:	f000 f864 	bl	8006ea8 <_free_r>
 8006de0:	69e3      	ldr	r3, [r4, #28]
 8006de2:	6819      	ldr	r1, [r3, #0]
 8006de4:	b111      	cbz	r1, 8006dec <_reclaim_reent+0x3c>
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 f85e 	bl	8006ea8 <_free_r>
 8006dec:	6961      	ldr	r1, [r4, #20]
 8006dee:	b111      	cbz	r1, 8006df6 <_reclaim_reent+0x46>
 8006df0:	4620      	mov	r0, r4
 8006df2:	f000 f859 	bl	8006ea8 <_free_r>
 8006df6:	69e1      	ldr	r1, [r4, #28]
 8006df8:	b111      	cbz	r1, 8006e00 <_reclaim_reent+0x50>
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f000 f854 	bl	8006ea8 <_free_r>
 8006e00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006e02:	b111      	cbz	r1, 8006e0a <_reclaim_reent+0x5a>
 8006e04:	4620      	mov	r0, r4
 8006e06:	f000 f84f 	bl	8006ea8 <_free_r>
 8006e0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e0c:	b111      	cbz	r1, 8006e14 <_reclaim_reent+0x64>
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f000 f84a 	bl	8006ea8 <_free_r>
 8006e14:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006e16:	b111      	cbz	r1, 8006e1e <_reclaim_reent+0x6e>
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 f845 	bl	8006ea8 <_free_r>
 8006e1e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006e20:	b111      	cbz	r1, 8006e28 <_reclaim_reent+0x78>
 8006e22:	4620      	mov	r0, r4
 8006e24:	f000 f840 	bl	8006ea8 <_free_r>
 8006e28:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006e2a:	b111      	cbz	r1, 8006e32 <_reclaim_reent+0x82>
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 f83b 	bl	8006ea8 <_free_r>
 8006e32:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006e34:	b111      	cbz	r1, 8006e3c <_reclaim_reent+0x8c>
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 f836 	bl	8006ea8 <_free_r>
 8006e3c:	6a23      	ldr	r3, [r4, #32]
 8006e3e:	b14b      	cbz	r3, 8006e54 <_reclaim_reent+0xa4>
 8006e40:	4620      	mov	r0, r4
 8006e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e46:	4718      	bx	r3
 8006e48:	680e      	ldr	r6, [r1, #0]
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f000 f82c 	bl	8006ea8 <_free_r>
 8006e50:	4631      	mov	r1, r6
 8006e52:	e7bb      	b.n	8006dcc <_reclaim_reent+0x1c>
 8006e54:	bd70      	pop	{r4, r5, r6, pc}
 8006e56:	bf00      	nop
 8006e58:	20000014 	.word	0x20000014

08006e5c <__libc_init_array>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	2600      	movs	r6, #0
 8006e60:	4d0c      	ldr	r5, [pc, #48]	@ (8006e94 <__libc_init_array+0x38>)
 8006e62:	4c0d      	ldr	r4, [pc, #52]	@ (8006e98 <__libc_init_array+0x3c>)
 8006e64:	1b64      	subs	r4, r4, r5
 8006e66:	10a4      	asrs	r4, r4, #2
 8006e68:	42a6      	cmp	r6, r4
 8006e6a:	d109      	bne.n	8006e80 <__libc_init_array+0x24>
 8006e6c:	f000 f870 	bl	8006f50 <_init>
 8006e70:	2600      	movs	r6, #0
 8006e72:	4d0a      	ldr	r5, [pc, #40]	@ (8006e9c <__libc_init_array+0x40>)
 8006e74:	4c0a      	ldr	r4, [pc, #40]	@ (8006ea0 <__libc_init_array+0x44>)
 8006e76:	1b64      	subs	r4, r4, r5
 8006e78:	10a4      	asrs	r4, r4, #2
 8006e7a:	42a6      	cmp	r6, r4
 8006e7c:	d105      	bne.n	8006e8a <__libc_init_array+0x2e>
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e84:	4798      	blx	r3
 8006e86:	3601      	adds	r6, #1
 8006e88:	e7ee      	b.n	8006e68 <__libc_init_array+0xc>
 8006e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e8e:	4798      	blx	r3
 8006e90:	3601      	adds	r6, #1
 8006e92:	e7f2      	b.n	8006e7a <__libc_init_array+0x1e>
 8006e94:	08007014 	.word	0x08007014
 8006e98:	08007014 	.word	0x08007014
 8006e9c:	08007014 	.word	0x08007014
 8006ea0:	08007018 	.word	0x08007018

08006ea4 <__retarget_lock_acquire_recursive>:
 8006ea4:	4770      	bx	lr

08006ea6 <__retarget_lock_release_recursive>:
 8006ea6:	4770      	bx	lr

08006ea8 <_free_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4605      	mov	r5, r0
 8006eac:	2900      	cmp	r1, #0
 8006eae:	d040      	beq.n	8006f32 <_free_r+0x8a>
 8006eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb4:	1f0c      	subs	r4, r1, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bfb8      	it	lt
 8006eba:	18e4      	addlt	r4, r4, r3
 8006ebc:	f000 f83c 	bl	8006f38 <__malloc_lock>
 8006ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8006f34 <_free_r+0x8c>)
 8006ec2:	6813      	ldr	r3, [r2, #0]
 8006ec4:	b933      	cbnz	r3, 8006ed4 <_free_r+0x2c>
 8006ec6:	6063      	str	r3, [r4, #4]
 8006ec8:	6014      	str	r4, [r2, #0]
 8006eca:	4628      	mov	r0, r5
 8006ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ed0:	f000 b838 	b.w	8006f44 <__malloc_unlock>
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	d908      	bls.n	8006eea <_free_r+0x42>
 8006ed8:	6820      	ldr	r0, [r4, #0]
 8006eda:	1821      	adds	r1, r4, r0
 8006edc:	428b      	cmp	r3, r1
 8006ede:	bf01      	itttt	eq
 8006ee0:	6819      	ldreq	r1, [r3, #0]
 8006ee2:	685b      	ldreq	r3, [r3, #4]
 8006ee4:	1809      	addeq	r1, r1, r0
 8006ee6:	6021      	streq	r1, [r4, #0]
 8006ee8:	e7ed      	b.n	8006ec6 <_free_r+0x1e>
 8006eea:	461a      	mov	r2, r3
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	b10b      	cbz	r3, 8006ef4 <_free_r+0x4c>
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	d9fa      	bls.n	8006eea <_free_r+0x42>
 8006ef4:	6811      	ldr	r1, [r2, #0]
 8006ef6:	1850      	adds	r0, r2, r1
 8006ef8:	42a0      	cmp	r0, r4
 8006efa:	d10b      	bne.n	8006f14 <_free_r+0x6c>
 8006efc:	6820      	ldr	r0, [r4, #0]
 8006efe:	4401      	add	r1, r0
 8006f00:	1850      	adds	r0, r2, r1
 8006f02:	4283      	cmp	r3, r0
 8006f04:	6011      	str	r1, [r2, #0]
 8006f06:	d1e0      	bne.n	8006eca <_free_r+0x22>
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	4408      	add	r0, r1
 8006f0e:	6010      	str	r0, [r2, #0]
 8006f10:	6053      	str	r3, [r2, #4]
 8006f12:	e7da      	b.n	8006eca <_free_r+0x22>
 8006f14:	d902      	bls.n	8006f1c <_free_r+0x74>
 8006f16:	230c      	movs	r3, #12
 8006f18:	602b      	str	r3, [r5, #0]
 8006f1a:	e7d6      	b.n	8006eca <_free_r+0x22>
 8006f1c:	6820      	ldr	r0, [r4, #0]
 8006f1e:	1821      	adds	r1, r4, r0
 8006f20:	428b      	cmp	r3, r1
 8006f22:	bf01      	itttt	eq
 8006f24:	6819      	ldreq	r1, [r3, #0]
 8006f26:	685b      	ldreq	r3, [r3, #4]
 8006f28:	1809      	addeq	r1, r1, r0
 8006f2a:	6021      	streq	r1, [r4, #0]
 8006f2c:	6063      	str	r3, [r4, #4]
 8006f2e:	6054      	str	r4, [r2, #4]
 8006f30:	e7cb      	b.n	8006eca <_free_r+0x22>
 8006f32:	bd38      	pop	{r3, r4, r5, pc}
 8006f34:	20001b74 	.word	0x20001b74

08006f38 <__malloc_lock>:
 8006f38:	4801      	ldr	r0, [pc, #4]	@ (8006f40 <__malloc_lock+0x8>)
 8006f3a:	f7ff bfb3 	b.w	8006ea4 <__retarget_lock_acquire_recursive>
 8006f3e:	bf00      	nop
 8006f40:	20001b70 	.word	0x20001b70

08006f44 <__malloc_unlock>:
 8006f44:	4801      	ldr	r0, [pc, #4]	@ (8006f4c <__malloc_unlock+0x8>)
 8006f46:	f7ff bfae 	b.w	8006ea6 <__retarget_lock_release_recursive>
 8006f4a:	bf00      	nop
 8006f4c:	20001b70 	.word	0x20001b70

08006f50 <_init>:
 8006f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f52:	bf00      	nop
 8006f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f56:	bc08      	pop	{r3}
 8006f58:	469e      	mov	lr, r3
 8006f5a:	4770      	bx	lr

08006f5c <_fini>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	bf00      	nop
 8006f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f62:	bc08      	pop	{r3}
 8006f64:	469e      	mov	lr, r3
 8006f66:	4770      	bx	lr
