
DRV_N17-S32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d38  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08007e48  08007e48  00008e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef4  08007ef4  00009064  2**0
                  CONTENTS
  4 .ARM          00000000  08007ef4  08007ef4  00009064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ef4  08007ef4  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ef4  08007ef4  00008ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ef8  08007ef8  00008ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007efc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b24  20000064  08007f60  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b88  08007f60  00009b88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184ea  00000000  00000000  0000908d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039b0  00000000  00000000  00021577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  00024f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001048  00000000  00000000  00026400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a46f  00000000  00000000  00027448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019666  00000000  00000000  000418b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095966  00000000  00000000  0005af1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0883  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005914  00000000  00000000  000f08c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f61dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08007e30 	.word	0x08007e30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08007e30 	.word	0x08007e30

08000150 <encChangeDir>:
uint8_t raw_buffer[2] = {0};
uint16_t encoderReadings[FILTER_SIZE];
uint16_t filterIndex = 0;
uint16_t filteredValue = 0;

void encChangeDir(uint8_t direction){
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
	if(direction == 1){
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d108      	bne.n	8000172 <encChangeDir+0x22>
		//Clockwise
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 8000160:	2201      	movs	r2, #1
 8000162:	2120      	movs	r1, #32
 8000164:	480a      	ldr	r0, [pc, #40]	@ (8000190 <encChangeDir+0x40>)
 8000166:	f001 fb41 	bl	80017ec <HAL_GPIO_WritePin>
		rotation_direction = 1;
 800016a:	4b0a      	ldr	r3, [pc, #40]	@ (8000194 <encChangeDir+0x44>)
 800016c:	2201      	movs	r2, #1
 800016e:	701a      	strb	r2, [r3, #0]
	}else if (direction == 0){
		//Counter clockwise
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
		rotation_direction = 0;
	}
}
 8000170:	e00a      	b.n	8000188 <encChangeDir+0x38>
	}else if (direction == 0){
 8000172:	79fb      	ldrb	r3, [r7, #7]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d107      	bne.n	8000188 <encChangeDir+0x38>
		HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	2120      	movs	r1, #32
 800017c:	4804      	ldr	r0, [pc, #16]	@ (8000190 <encChangeDir+0x40>)
 800017e:	f001 fb35 	bl	80017ec <HAL_GPIO_WritePin>
		rotation_direction = 0;
 8000182:	4b04      	ldr	r3, [pc, #16]	@ (8000194 <encChangeDir+0x44>)
 8000184:	2200      	movs	r2, #0
 8000186:	701a      	strb	r2, [r3, #0]
}
 8000188:	bf00      	nop
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010c00 	.word	0x40010c00
 8000194:	20000080 	.word	0x20000080

08000198 <encRead>:
	float angle_deg = (angle * 360.0) / 4096.0;

	*result = angle_deg;
}

void encRead(){
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af02      	add	r7, sp, #8
	HAL_I2C_Mem_Read_DMA(&hi2c1, (ENC_ADDR << 1), AS5600_RAW_ANGLE_MSB_REG, I2C_MEMADD_SIZE_8BIT, raw_buffer, 2);
 800019e:	2302      	movs	r3, #2
 80001a0:	9301      	str	r3, [sp, #4]
 80001a2:	4b05      	ldr	r3, [pc, #20]	@ (80001b8 <encRead+0x20>)
 80001a4:	9300      	str	r3, [sp, #0]
 80001a6:	2301      	movs	r3, #1
 80001a8:	220c      	movs	r2, #12
 80001aa:	216c      	movs	r1, #108	@ 0x6c
 80001ac:	4803      	ldr	r0, [pc, #12]	@ (80001bc <encRead+0x24>)
 80001ae:	f001 fc8d 	bl	8001acc <HAL_I2C_Mem_Read_DMA>
}
 80001b2:	bf00      	nop
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	20000b34 	.word	0x20000b34

080001c0 <getCounter>:

int32_t getCounter(){
 80001c0:	b480      	push	{r7}
 80001c2:	af00      	add	r7, sp, #0
	return accumulate_counter;
 80001c4:	4b02      	ldr	r3, [pc, #8]	@ (80001d0 <getCounter+0x10>)
 80001c6:	681b      	ldr	r3, [r3, #0]
}
 80001c8:	4618      	mov	r0, r3
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	20000084 	.word	0x20000084

080001d4 <lowPassFilter>:

uint16_t lowPassFilter(uint16_t newData){
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	80fb      	strh	r3, [r7, #6]
	encoderReadings[filterIndex] = newData;
 80001de:	4b1c      	ldr	r3, [pc, #112]	@ (8000250 <lowPassFilter+0x7c>)
 80001e0:	881b      	ldrh	r3, [r3, #0]
 80001e2:	4619      	mov	r1, r3
 80001e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000254 <lowPassFilter+0x80>)
 80001e6:	88fb      	ldrh	r3, [r7, #6]
 80001e8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	filterIndex = (filterIndex + 1) % FILTER_SIZE;
 80001ec:	4b18      	ldr	r3, [pc, #96]	@ (8000250 <lowPassFilter+0x7c>)
 80001ee:	881b      	ldrh	r3, [r3, #0]
 80001f0:	3301      	adds	r3, #1
 80001f2:	425a      	negs	r2, r3
 80001f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80001f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80001fc:	bf58      	it	pl
 80001fe:	4253      	negpl	r3, r2
 8000200:	b29a      	uxth	r2, r3
 8000202:	4b13      	ldr	r3, [pc, #76]	@ (8000250 <lowPassFilter+0x7c>)
 8000204:	801a      	strh	r2, [r3, #0]

	int sum = 0;
 8000206:	2300      	movs	r3, #0
 8000208:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTER_SIZE; i++) {
 800020a:	2300      	movs	r3, #0
 800020c:	60bb      	str	r3, [r7, #8]
 800020e:	e00a      	b.n	8000226 <lowPassFilter+0x52>
		sum += encoderReadings[i];
 8000210:	4a10      	ldr	r2, [pc, #64]	@ (8000254 <lowPassFilter+0x80>)
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000218:	461a      	mov	r2, r3
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	4413      	add	r3, r2
 800021e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < FILTER_SIZE; i++) {
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	3301      	adds	r3, #1
 8000224:	60bb      	str	r3, [r7, #8]
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800022c:	dbf0      	blt.n	8000210 <lowPassFilter+0x3c>
	}

	filteredValue = sum / FILTER_SIZE;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	2b00      	cmp	r3, #0
 8000232:	da01      	bge.n	8000238 <lowPassFilter+0x64>
 8000234:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8000238:	129b      	asrs	r3, r3, #10
 800023a:	b29a      	uxth	r2, r3
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <lowPassFilter+0x84>)
 800023e:	801a      	strh	r2, [r3, #0]

	return filteredValue;
 8000240:	4b05      	ldr	r3, [pc, #20]	@ (8000258 <lowPassFilter+0x84>)
 8000242:	881b      	ldrh	r3, [r3, #0]
}
 8000244:	4618      	mov	r0, r3
 8000246:	3714      	adds	r7, #20
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	2000088c 	.word	0x2000088c
 8000254:	2000008c 	.word	0x2000008c
 8000258:	2000088e 	.word	0x2000088e

0800025c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a2d      	ldr	r2, [pc, #180]	@ (8000320 <HAL_I2C_MemRxCpltCallback+0xc4>)
 800026a:	4293      	cmp	r3, r2
 800026c:	d154      	bne.n	8000318 <HAL_I2C_MemRxCpltCallback+0xbc>
        uint16_t position_now = (raw_buffer[0] << 8) | raw_buffer[1];
 800026e:	4b2d      	ldr	r3, [pc, #180]	@ (8000324 <HAL_I2C_MemRxCpltCallback+0xc8>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	021b      	lsls	r3, r3, #8
 8000274:	b21a      	sxth	r2, r3
 8000276:	4b2b      	ldr	r3, [pc, #172]	@ (8000324 <HAL_I2C_MemRxCpltCallback+0xc8>)
 8000278:	785b      	ldrb	r3, [r3, #1]
 800027a:	b21b      	sxth	r3, r3
 800027c:	4313      	orrs	r3, r2
 800027e:	b21b      	sxth	r3, r3
 8000280:	817b      	strh	r3, [r7, #10]
        position_now = lowPassFilter(position_now);
 8000282:	897b      	ldrh	r3, [r7, #10]
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ffa5 	bl	80001d4 <lowPassFilter>
 800028a:	4603      	mov	r3, r0
 800028c:	817b      	strh	r3, [r7, #10]
        int32_t delta = (int32_t)(position_now - position_prev);
 800028e:	897b      	ldrh	r3, [r7, #10]
 8000290:	4a25      	ldr	r2, [pc, #148]	@ (8000328 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8000292:	8812      	ldrh	r2, [r2, #0]
 8000294:	1a9b      	subs	r3, r3, r2
 8000296:	60fb      	str	r3, [r7, #12]

        if(rotation_direction){
 8000298:	4b24      	ldr	r3, [pc, #144]	@ (800032c <HAL_I2C_MemRxCpltCallback+0xd0>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d00d      	beq.n	80002bc <HAL_I2C_MemRxCpltCallback+0x60>
        	if(delta > ENC_PPR/2){
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80002a6:	dd03      	ble.n	80002b0 <HAL_I2C_MemRxCpltCallback+0x54>
        		delta -= ENC_PPR;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80002ae:	60fb      	str	r3, [r7, #12]
        	}
        	delta = abs(delta);
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	bfb8      	it	lt
 80002b6:	425b      	neglt	r3, r3
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	e00d      	b.n	80002d8 <HAL_I2C_MemRxCpltCallback+0x7c>
        }else{
        	if(delta < -(ENC_PPR/2)){
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 80002c2:	da03      	bge.n	80002cc <HAL_I2C_MemRxCpltCallback+0x70>
        		delta += ENC_PPR;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80002ca:	60fb      	str	r3, [r7, #12]
        	}
        	delta = -abs(delta);
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	bfb8      	it	lt
 80002d2:	425b      	neglt	r3, r3
 80002d4:	425b      	negs	r3, r3
 80002d6:	60fb      	str	r3, [r7, #12]
        }

        accumulate_counter += delta;
 80002d8:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <HAL_I2C_MemRxCpltCallback+0xd4>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	4413      	add	r3, r2
 80002e0:	4a13      	ldr	r2, [pc, #76]	@ (8000330 <HAL_I2C_MemRxCpltCallback+0xd4>)
 80002e2:	6013      	str	r3, [r2, #0]

        if(accumulate_counter >= ENC_MAX_COUNT){
 80002e4:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <HAL_I2C_MemRxCpltCallback+0xd4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a12      	ldr	r2, [pc, #72]	@ (8000334 <HAL_I2C_MemRxCpltCallback+0xd8>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	dd06      	ble.n	80002fc <HAL_I2C_MemRxCpltCallback+0xa0>
			accumulate_counter -= ENC_MAX_COUNT;
 80002ee:	4b10      	ldr	r3, [pc, #64]	@ (8000330 <HAL_I2C_MemRxCpltCallback+0xd4>)
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <HAL_I2C_MemRxCpltCallback+0xdc>)
 80002f4:	4413      	add	r3, r2
 80002f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000330 <HAL_I2C_MemRxCpltCallback+0xd4>)
 80002f8:	6013      	str	r3, [r2, #0]
 80002fa:	e00a      	b.n	8000312 <HAL_I2C_MemRxCpltCallback+0xb6>
		}else if(accumulate_counter < ENC_MIN_COUNT){
 80002fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <HAL_I2C_MemRxCpltCallback+0xd4>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a0d      	ldr	r2, [pc, #52]	@ (8000338 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8000302:	4293      	cmp	r3, r2
 8000304:	da05      	bge.n	8000312 <HAL_I2C_MemRxCpltCallback+0xb6>
			accumulate_counter += ENC_MAX_COUNT;
 8000306:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <HAL_I2C_MemRxCpltCallback+0xe0>)
 800030c:	4413      	add	r3, r2
 800030e:	4a08      	ldr	r2, [pc, #32]	@ (8000330 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8000310:	6013      	str	r3, [r2, #0]
		}

        position_prev = position_now;
 8000312:	4a05      	ldr	r2, [pc, #20]	@ (8000328 <HAL_I2C_MemRxCpltCallback+0xcc>)
 8000314:	897b      	ldrh	r3, [r7, #10]
 8000316:	8013      	strh	r3, [r2, #0]
    }
}
 8000318:	bf00      	nop
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40005400 	.word	0x40005400
 8000324:	20000088 	.word	0x20000088
 8000328:	20000082 	.word	0x20000082
 800032c:	20000080 	.word	0x20000080
 8000330:	20000084 	.word	0x20000084
 8000334:	0098967e 	.word	0x0098967e
 8000338:	ff676981 	.word	0xff676981
 800033c:	0098967f 	.word	0x0098967f

08000340 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
 8000346:	60f8      	str	r0, [r7, #12]
 8000348:	60b9      	str	r1, [r7, #8]
 800034a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	4a06      	ldr	r2, [pc, #24]	@ (8000368 <vApplicationGetIdleTaskMemory+0x28>)
 8000350:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	4a05      	ldr	r2, [pc, #20]	@ (800036c <vApplicationGetIdleTaskMemory+0x2c>)
 8000356:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2280      	movs	r2, #128	@ 0x80
 800035c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800035e:	bf00      	nop
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	20000890 	.word	0x20000890
 800036c:	20000930 	.word	0x20000930

08000370 <i2c_scanbus>:


#include "i2c_bus.h"

/* Blocking function */
void i2c_scanbus(I2C_HandleTypeDef* channel, uint8_t* found_addr){
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result;
	static uint8_t counter = 0;
	for(uint8_t i = 0 ; i <= I2C_MAX_NODE ; i++){
 800037a:	2300      	movs	r3, #0
 800037c:	73fb      	strb	r3, [r7, #15]
 800037e:	e020      	b.n	80003c2 <i2c_scanbus+0x52>
		result = HAL_I2C_IsDeviceReady(channel, (i << 1), 1, 100);
 8000380:	7bfb      	ldrb	r3, [r7, #15]
 8000382:	b29b      	uxth	r3, r3
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	b299      	uxth	r1, r3
 8000388:	2364      	movs	r3, #100	@ 0x64
 800038a:	2201      	movs	r2, #1
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f001 fd23 	bl	8001dd8 <HAL_I2C_IsDeviceReady>
 8000392:	4603      	mov	r3, r0
 8000394:	73bb      	strb	r3, [r7, #14]
		if(result == HAL_OK){
 8000396:	7bbb      	ldrb	r3, [r7, #14]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d10c      	bne.n	80003b6 <i2c_scanbus+0x46>
			found_addr[counter] = i;
 800039c:	4b0d      	ldr	r3, [pc, #52]	@ (80003d4 <i2c_scanbus+0x64>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	4413      	add	r3, r2
 80003a6:	7bfa      	ldrb	r2, [r7, #15]
 80003a8:	701a      	strb	r2, [r3, #0]
			counter++;
 80003aa:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <i2c_scanbus+0x64>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	3301      	adds	r3, #1
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4b08      	ldr	r3, [pc, #32]	@ (80003d4 <i2c_scanbus+0x64>)
 80003b4:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(10);
 80003b6:	200a      	movs	r0, #10
 80003b8:	f000 fce2 	bl	8000d80 <HAL_Delay>
	for(uint8_t i = 0 ; i <= I2C_MAX_NODE ; i++){
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	dada      	bge.n	8000380 <i2c_scanbus+0x10>
	}
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000b30 	.word	0x20000b30

080003d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d8:	b5b0      	push	{r4, r5, r7, lr}
 80003da:	b096      	sub	sp, #88	@ 0x58
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003de:	f000 fc9d 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e2:	f000 f85b 	bl	800049c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e6:	f000 f96d 	bl	80006c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80003ea:	f000 f94d 	bl	8000688 <MX_DMA_Init>
  MX_I2C1_Init();
 80003ee:	f000 f89b 	bl	8000528 <MX_I2C1_Init>
  MX_TIM2_Init();
 80003f2:	f000 f8c7 	bl	8000584 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80003f6:	f000 f91d 	bl	8000634 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_scanbus(&hi2c1, i2c_available);
 80003fa:	4920      	ldr	r1, [pc, #128]	@ (800047c <main+0xa4>)
 80003fc:	4820      	ldr	r0, [pc, #128]	@ (8000480 <main+0xa8>)
 80003fe:	f7ff ffb7 	bl	8000370 <i2c_scanbus>
  TMC2209_setup();
 8000402:	f007 fa81 	bl	8007908 <TMC2209_setup>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000406:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <main+0xac>)
 8000408:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800040c:	461d      	mov	r5, r3
 800040e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000412:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000416:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800041a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800041e:	2100      	movs	r1, #0
 8000420:	4618      	mov	r0, r3
 8000422:	f006 f867 	bl	80064f4 <osThreadCreate>
 8000426:	4603      	mov	r3, r0
 8000428:	4a17      	ldr	r2, [pc, #92]	@ (8000488 <main+0xb0>)
 800042a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 800042c:	4b17      	ldr	r3, [pc, #92]	@ (800048c <main+0xb4>)
 800042e:	f107 0420 	add.w	r4, r7, #32
 8000432:	461d      	mov	r5, r3
 8000434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000438:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800043c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 8000440:	f107 0320 	add.w	r3, r7, #32
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f006 f854 	bl	80064f4 <osThreadCreate>
 800044c:	4603      	mov	r3, r0
 800044e:	4a10      	ldr	r2, [pc, #64]	@ (8000490 <main+0xb8>)
 8000450:	6013      	str	r3, [r2, #0]

  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 8000452:	4b10      	ldr	r3, [pc, #64]	@ (8000494 <main+0xbc>)
 8000454:	1d3c      	adds	r4, r7, #4
 8000456:	461d      	mov	r5, r3
 8000458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800045a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800045c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000460:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2100      	movs	r1, #0
 8000468:	4618      	mov	r0, r3
 800046a:	f006 f843 	bl	80064f4 <osThreadCreate>
 800046e:	4603      	mov	r3, r0
 8000470:	4a09      	ldr	r2, [pc, #36]	@ (8000498 <main+0xc0>)
 8000472:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000474:	f006 f837 	bl	80064e6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <main+0xa0>
 800047c:	20000c68 	.word	0x20000c68
 8000480:	20000b34 	.word	0x20000b34
 8000484:	08007e54 	.word	0x08007e54
 8000488:	20000c5c 	.word	0x20000c5c
 800048c:	08007e7c 	.word	0x08007e7c
 8000490:	20000c60 	.word	0x20000c60
 8000494:	08007ea4 	.word	0x08007ea4
 8000498:	20000c64 	.word	0x20000c64

0800049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b090      	sub	sp, #64	@ 0x40
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	f107 0318 	add.w	r3, r7, #24
 80004a6:	2228      	movs	r2, #40	@ 0x28
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f007 fbf4 	bl	8007c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004be:	2301      	movs	r3, #1
 80004c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004cc:	2301      	movs	r3, #1
 80004ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d0:	2302      	movs	r3, #2
 80004d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004da:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e0:	f107 0318 	add.w	r3, r7, #24
 80004e4:	4618      	mov	r0, r3
 80004e6:	f003 fdfd 	bl	80040e4 <HAL_RCC_OscConfig>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004f0:	f000 f9b8 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f4:	230f      	movs	r3, #15
 80004f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f8:	2302      	movs	r3, #2
 80004fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000504:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2102      	movs	r1, #2
 800050e:	4618      	mov	r0, r3
 8000510:	f004 f86a 	bl	80045e8 <HAL_RCC_ClockConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800051a:	f000 f9a3 	bl	8000864 <Error_Handler>
  }
}
 800051e:	bf00      	nop
 8000520:	3740      	adds	r7, #64	@ 0x40
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800052c:	4b12      	ldr	r3, [pc, #72]	@ (8000578 <MX_I2C1_Init+0x50>)
 800052e:	4a13      	ldr	r2, [pc, #76]	@ (800057c <MX_I2C1_Init+0x54>)
 8000530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000532:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <MX_I2C1_Init+0x50>)
 8000534:	4a12      	ldr	r2, [pc, #72]	@ (8000580 <MX_I2C1_Init+0x58>)
 8000536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000538:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <MX_I2C1_Init+0x50>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800053e:	4b0e      	ldr	r3, [pc, #56]	@ (8000578 <MX_I2C1_Init+0x50>)
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000544:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <MX_I2C1_Init+0x50>)
 8000546:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800054a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800054c:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <MX_I2C1_Init+0x50>)
 800054e:	2200      	movs	r2, #0
 8000550:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000552:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <MX_I2C1_Init+0x50>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000558:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <MX_I2C1_Init+0x50>)
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800055e:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <MX_I2C1_Init+0x50>)
 8000560:	2200      	movs	r2, #0
 8000562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000564:	4804      	ldr	r0, [pc, #16]	@ (8000578 <MX_I2C1_Init+0x50>)
 8000566:	f001 f959 	bl	800181c <HAL_I2C_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000570:	f000 f978 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000b34 	.word	0x20000b34
 800057c:	40005400 	.word	0x40005400
 8000580:	00061a80 	.word	0x00061a80

08000584 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	@ 0x28
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005a6:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <MX_TIM2_Init+0xac>)
 80005a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 80005ae:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <MX_TIM2_Init+0xac>)
 80005b0:	2247      	movs	r2, #71	@ 0x47
 80005b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000630 <MX_TIM2_Init+0xac>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4 - 1;
 80005ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000630 <MX_TIM2_Init+0xac>)
 80005bc:	2203      	movs	r2, #3
 80005be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000630 <MX_TIM2_Init+0xac>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <MX_TIM2_Init+0xac>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005cc:	4818      	ldr	r0, [pc, #96]	@ (8000630 <MX_TIM2_Init+0xac>)
 80005ce:	f004 fa73 	bl	8004ab8 <HAL_TIM_PWM_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80005d8:	f000 f944 	bl	8000864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4619      	mov	r1, r3
 80005ea:	4811      	ldr	r0, [pc, #68]	@ (8000630 <MX_TIM2_Init+0xac>)
 80005ec:	f004 ff4e 	bl	800548c <HAL_TIMEx_MasterConfigSynchronization>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80005f6:	f000 f935 	bl	8000864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005fa:	2360      	movs	r3, #96	@ 0x60
 80005fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80005fe:	2332      	movs	r3, #50	@ 0x32
 8000600:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	4619      	mov	r1, r3
 8000610:	4807      	ldr	r0, [pc, #28]	@ (8000630 <MX_TIM2_Init+0xac>)
 8000612:	f004 fc43 	bl	8004e9c <HAL_TIM_PWM_ConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800061c:	f000 f922 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000620:	4803      	ldr	r0, [pc, #12]	@ (8000630 <MX_TIM2_Init+0xac>)
 8000622:	f000 f9fb 	bl	8000a1c <HAL_TIM_MspPostInit>

}
 8000626:	bf00      	nop
 8000628:	3728      	adds	r7, #40	@ 0x28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000bcc 	.word	0x20000bcc

08000634 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <MX_USART1_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800063e:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000640:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <MX_USART1_UART_Init+0x4c>)
 800066c:	f004 ff7e 	bl	800556c <HAL_HalfDuplex_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f8f5 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000c14 	.word	0x20000c14
 8000684:	40013800 	.word	0x40013800

08000688 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_DMA_Init+0x38>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a0b      	ldr	r2, [pc, #44]	@ (80006c0 <MX_DMA_Init+0x38>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6153      	str	r3, [r2, #20]
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_DMA_Init+0x38>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2105      	movs	r1, #5
 80006aa:	2011      	movs	r0, #17
 80006ac:	f000 fc41 	bl	8000f32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006b0:	2011      	movs	r0, #17
 80006b2:	f000 fc5a 	bl	8000f6a <HAL_NVIC_EnableIRQ>

}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d8:	4b3d      	ldr	r3, [pc, #244]	@ (80007d0 <MX_GPIO_Init+0x10c>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a3c      	ldr	r2, [pc, #240]	@ (80007d0 <MX_GPIO_Init+0x10c>)
 80006de:	f043 0310 	orr.w	r3, r3, #16
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b3a      	ldr	r3, [pc, #232]	@ (80007d0 <MX_GPIO_Init+0x10c>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0310 	and.w	r3, r3, #16
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f0:	4b37      	ldr	r3, [pc, #220]	@ (80007d0 <MX_GPIO_Init+0x10c>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a36      	ldr	r2, [pc, #216]	@ (80007d0 <MX_GPIO_Init+0x10c>)
 80006f6:	f043 0320 	orr.w	r3, r3, #32
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b34      	ldr	r3, [pc, #208]	@ (80007d0 <MX_GPIO_Init+0x10c>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0320 	and.w	r3, r3, #32
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b31      	ldr	r3, [pc, #196]	@ (80007d0 <MX_GPIO_Init+0x10c>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a30      	ldr	r2, [pc, #192]	@ (80007d0 <MX_GPIO_Init+0x10c>)
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b2e      	ldr	r3, [pc, #184]	@ (80007d0 <MX_GPIO_Init+0x10c>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0304 	and.w	r3, r3, #4
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000720:	4b2b      	ldr	r3, [pc, #172]	@ (80007d0 <MX_GPIO_Init+0x10c>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a2a      	ldr	r2, [pc, #168]	@ (80007d0 <MX_GPIO_Init+0x10c>)
 8000726:	f043 0308 	orr.w	r3, r3, #8
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <MX_GPIO_Init+0x10c>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0308 	and.w	r3, r3, #8
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800073e:	4825      	ldr	r0, [pc, #148]	@ (80007d4 <MX_GPIO_Init+0x110>)
 8000740:	f001 f854 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2106      	movs	r1, #6
 8000748:	4823      	ldr	r0, [pc, #140]	@ (80007d8 <MX_GPIO_Init+0x114>)
 800074a:	f001 f84f 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	4822      	ldr	r0, [pc, #136]	@ (80007dc <MX_GPIO_Init+0x118>)
 8000754:	f001 f84a 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000758:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2302      	movs	r3, #2
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	4818      	ldr	r0, [pc, #96]	@ (80007d4 <MX_GPIO_Init+0x110>)
 8000772:	f000 feb7 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000776:	2306      	movs	r3, #6
 8000778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2302      	movs	r3, #2
 8000784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	4619      	mov	r1, r3
 800078c:	4812      	ldr	r0, [pc, #72]	@ (80007d8 <MX_GPIO_Init+0x114>)
 800078e:	f000 fea9 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000792:	2310      	movs	r3, #16
 8000794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	4619      	mov	r1, r3
 80007a4:	480d      	ldr	r0, [pc, #52]	@ (80007dc <MX_GPIO_Init+0x118>)
 80007a6:	f000 fe9d 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007aa:	2320      	movs	r3, #32
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	4619      	mov	r1, r3
 80007c0:	4806      	ldr	r0, [pc, #24]	@ (80007dc <MX_GPIO_Init+0x118>)
 80007c2:	f000 fe8f 	bl	80014e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c6:	bf00      	nop
 80007c8:	3720      	adds	r7, #32
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40011000 	.word	0x40011000
 80007d8:	40010800 	.word	0x40010800
 80007dc:	40010c00 	.word	0x40010c00

080007e0 <StartDriverTask>:

/* USER CODE BEGIN 4 */
void StartDriverTask(void const * argument){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	for(;;){
		TMC2209_readChopConfig(&driver_value);
 80007e8:	4804      	ldr	r0, [pc, #16]	@ (80007fc <StartDriverTask+0x1c>)
 80007ea:	f007 f8f9 	bl	80079e0 <TMC2209_readChopConfig>
		TMC2209_enable();
 80007ee:	f007 f8c1 	bl	8007974 <TMC2209_enable>
//		TMC2209_moveVelocity(100);

		osDelay(100);
 80007f2:	2064      	movs	r0, #100	@ 0x64
 80007f4:	f005 feca 	bl	800658c <osDelay>
		TMC2209_readChopConfig(&driver_value);
 80007f8:	bf00      	nop
 80007fa:	e7f5      	b.n	80007e8 <StartDriverTask+0x8>
 80007fc:	20000c74 	.word	0x20000c74

08000800 <StartEncoderTask>:
	}
}

void StartEncoderTask(void const * argument){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	for(;;){
		encChangeDir(motor_rotation);
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <StartEncoderTask+0x28>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fc9e 	bl	8000150 <encChangeDir>
		encRead();
 8000814:	f7ff fcc0 	bl	8000198 <encRead>
		encoder_counter = getCounter();
 8000818:	f7ff fcd2 	bl	80001c0 <getCounter>
 800081c:	4603      	mov	r3, r0
 800081e:	4a03      	ldr	r2, [pc, #12]	@ (800082c <StartEncoderTask+0x2c>)
 8000820:	6013      	str	r3, [r2, #0]
		encChangeDir(motor_rotation);
 8000822:	bf00      	nop
 8000824:	e7f0      	b.n	8000808 <StartEncoderTask+0x8>
 8000826:	bf00      	nop
 8000828:	20000c70 	.word	0x20000c70
 800082c:	20000c6c 	.word	0x20000c6c

08000830 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f005 fea7 	bl	800658c <osDelay>
 800083e:	e7fb      	b.n	8000838 <StartDefaultTask+0x8>

08000840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d101      	bne.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000852:	f000 fa79 	bl	8000d48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40012c00 	.word	0x40012c00

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <Error_Handler+0x8>

08000870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000876:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <HAL_MspInit+0x68>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	4a17      	ldr	r2, [pc, #92]	@ (80008d8 <HAL_MspInit+0x68>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <HAL_MspInit+0x68>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <HAL_MspInit+0x68>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a11      	ldr	r2, [pc, #68]	@ (80008d8 <HAL_MspInit+0x68>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <HAL_MspInit+0x68>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	210f      	movs	r1, #15
 80008aa:	f06f 0001 	mvn.w	r0, #1
 80008ae:	f000 fb40 	bl	8000f32 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80008b2:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <HAL_MspInit+0x6c>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	4a04      	ldr	r2, [pc, #16]	@ (80008dc <HAL_MspInit+0x6c>)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010000 	.word	0x40010000

080008e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a31      	ldr	r2, [pc, #196]	@ (80009c0 <HAL_I2C_MspInit+0xe0>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d15a      	bne.n	80009b6 <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000900:	4b30      	ldr	r3, [pc, #192]	@ (80009c4 <HAL_I2C_MspInit+0xe4>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a2f      	ldr	r2, [pc, #188]	@ (80009c4 <HAL_I2C_MspInit+0xe4>)
 8000906:	f043 0308 	orr.w	r3, r3, #8
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b2d      	ldr	r3, [pc, #180]	@ (80009c4 <HAL_I2C_MspInit+0xe4>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0308 	and.w	r3, r3, #8
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000918:	23c0      	movs	r3, #192	@ 0xc0
 800091a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091c:	2312      	movs	r3, #18
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000920:	2303      	movs	r3, #3
 8000922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	4827      	ldr	r0, [pc, #156]	@ (80009c8 <HAL_I2C_MspInit+0xe8>)
 800092c:	f000 fdda 	bl	80014e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000930:	4b24      	ldr	r3, [pc, #144]	@ (80009c4 <HAL_I2C_MspInit+0xe4>)
 8000932:	69db      	ldr	r3, [r3, #28]
 8000934:	4a23      	ldr	r2, [pc, #140]	@ (80009c4 <HAL_I2C_MspInit+0xe4>)
 8000936:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800093a:	61d3      	str	r3, [r2, #28]
 800093c:	4b21      	ldr	r3, [pc, #132]	@ (80009c4 <HAL_I2C_MspInit+0xe4>)
 800093e:	69db      	ldr	r3, [r3, #28]
 8000940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000948:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <HAL_I2C_MspInit+0xec>)
 800094a:	4a21      	ldr	r2, [pc, #132]	@ (80009d0 <HAL_I2C_MspInit+0xf0>)
 800094c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094e:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <HAL_I2C_MspInit+0xec>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000954:	4b1d      	ldr	r3, [pc, #116]	@ (80009cc <HAL_I2C_MspInit+0xec>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800095a:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <HAL_I2C_MspInit+0xec>)
 800095c:	2280      	movs	r2, #128	@ 0x80
 800095e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000960:	4b1a      	ldr	r3, [pc, #104]	@ (80009cc <HAL_I2C_MspInit+0xec>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000966:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <HAL_I2C_MspInit+0xec>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800096c:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <HAL_I2C_MspInit+0xec>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000972:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <HAL_I2C_MspInit+0xec>)
 8000974:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000978:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800097a:	4814      	ldr	r0, [pc, #80]	@ (80009cc <HAL_I2C_MspInit+0xec>)
 800097c:	f000 fb04 	bl	8000f88 <HAL_DMA_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 8000986:	f7ff ff6d 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a0f      	ldr	r2, [pc, #60]	@ (80009cc <HAL_I2C_MspInit+0xec>)
 800098e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000990:	4a0e      	ldr	r2, [pc, #56]	@ (80009cc <HAL_I2C_MspInit+0xec>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2105      	movs	r1, #5
 800099a:	201f      	movs	r0, #31
 800099c:	f000 fac9 	bl	8000f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009a0:	201f      	movs	r0, #31
 80009a2:	f000 fae2 	bl	8000f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2105      	movs	r1, #5
 80009aa:	2020      	movs	r0, #32
 80009ac:	f000 fac1 	bl	8000f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009b0:	2020      	movs	r0, #32
 80009b2:	f000 fada 	bl	8000f6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009b6:	bf00      	nop
 80009b8:	3720      	adds	r7, #32
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40005400 	.word	0x40005400
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010c00 	.word	0x40010c00
 80009cc:	20000b88 	.word	0x20000b88
 80009d0:	40020080 	.word	0x40020080

080009d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009e4:	d113      	bne.n	8000a0e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <HAL_TIM_PWM_MspInit+0x44>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000a18 <HAL_TIM_PWM_MspInit+0x44>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	61d3      	str	r3, [r2, #28]
 80009f2:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <HAL_TIM_PWM_MspInit+0x44>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2105      	movs	r1, #5
 8000a02:	201c      	movs	r0, #28
 8000a04:	f000 fa95 	bl	8000f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a08:	201c      	movs	r0, #28
 8000a0a:	f000 faae 	bl	8000f6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a3a:	d117      	bne.n	8000a6c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <HAL_TIM_MspPostInit+0x58>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <HAL_TIM_MspPostInit+0x58>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <HAL_TIM_MspPostInit+0x58>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a54:	2301      	movs	r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4619      	mov	r1, r3
 8000a66:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <HAL_TIM_MspPostInit+0x5c>)
 8000a68:	f000 fd3c 	bl	80014e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010800 	.word	0x40010800

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a1a      	ldr	r2, [pc, #104]	@ (8000b00 <HAL_UART_MspInit+0x84>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d12c      	bne.n	8000af6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a9c:	4b19      	ldr	r3, [pc, #100]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a18      	ldr	r2, [pc, #96]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad2:	2312      	movs	r3, #18
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4809      	ldr	r0, [pc, #36]	@ (8000b08 <HAL_UART_MspInit+0x8c>)
 8000ae2:	f000 fcff 	bl	80014e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2105      	movs	r1, #5
 8000aea:	2025      	movs	r0, #37	@ 0x25
 8000aec:	f000 fa21 	bl	8000f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000af0:	2025      	movs	r0, #37	@ 0x25
 8000af2:	f000 fa3a 	bl	8000f6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40013800 	.word	0x40013800
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010800 	.word	0x40010800

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	@ 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b22:	4b2e      	ldr	r3, [pc, #184]	@ (8000bdc <HAL_InitTick+0xd0>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	4a2d      	ldr	r2, [pc, #180]	@ (8000bdc <HAL_InitTick+0xd0>)
 8000b28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b2c:	6193      	str	r3, [r2, #24]
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bdc <HAL_InitTick+0xd0>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b3a:	f107 020c 	add.w	r2, r7, #12
 8000b3e:	f107 0310 	add.w	r3, r7, #16
 8000b42:	4611      	mov	r1, r2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 febf 	bl	80048c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b4a:	f003 fea9 	bl	80048a0 <HAL_RCC_GetPCLK2Freq>
 8000b4e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b52:	4a23      	ldr	r2, [pc, #140]	@ (8000be0 <HAL_InitTick+0xd4>)
 8000b54:	fba2 2303 	umull	r2, r3, r2, r3
 8000b58:	0c9b      	lsrs	r3, r3, #18
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <HAL_InitTick+0xd8>)
 8000b60:	4a21      	ldr	r2, [pc, #132]	@ (8000be8 <HAL_InitTick+0xdc>)
 8000b62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <HAL_InitTick+0xd8>)
 8000b66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b6a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000be4 <HAL_InitTick+0xd8>)
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b70:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <HAL_InitTick+0xd8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <HAL_InitTick+0xd8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <HAL_InitTick+0xd8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b84:	4817      	ldr	r0, [pc, #92]	@ (8000be4 <HAL_InitTick+0xd8>)
 8000b86:	f003 feed 	bl	8004964 <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d11b      	bne.n	8000bd0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b98:	4812      	ldr	r0, [pc, #72]	@ (8000be4 <HAL_InitTick+0xd8>)
 8000b9a:	f003 ff3b 	bl	8004a14 <HAL_TIM_Base_Start_IT>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d111      	bne.n	8000bd0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000bac:	2019      	movs	r0, #25
 8000bae:	f000 f9dc 	bl	8000f6a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d808      	bhi.n	8000bca <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	2019      	movs	r0, #25
 8000bbe:	f000 f9b8 	bl	8000f32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <HAL_InitTick+0xe0>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e002      	b.n	8000bd0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3730      	adds	r7, #48	@ 0x30
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	431bde83 	.word	0x431bde83
 8000be4:	20000c78 	.word	0x20000c78
 8000be8:	40012c00 	.word	0x40012c00
 8000bec:	20000004 	.word	0x20000004

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <MemManage_Handler+0x4>

08000c08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000c28:	4802      	ldr	r0, [pc, #8]	@ (8000c34 <DMA1_Channel7_IRQHandler+0x10>)
 8000c2a:	f000 fb1b 	bl	8001264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000b88 	.word	0x20000b88

08000c38 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c3c:	4802      	ldr	r0, [pc, #8]	@ (8000c48 <TIM1_UP_IRQHandler+0x10>)
 8000c3e:	f004 f83d 	bl	8004cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000c78 	.word	0x20000c78

08000c4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c50:	4802      	ldr	r0, [pc, #8]	@ (8000c5c <TIM2_IRQHandler+0x10>)
 8000c52:	f004 f833 	bl	8004cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000bcc 	.word	0x20000bcc

08000c60 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <I2C1_EV_IRQHandler+0x10>)
 8000c66:	f001 f9e5 	bl	8002034 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000b34 	.word	0x20000b34

08000c74 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <I2C1_ER_IRQHandler+0x10>)
 8000c7a:	f001 fb2e 	bl	80022da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000b34 	.word	0x20000b34

08000c88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <USART1_IRQHandler+0x10>)
 8000c8e:	f004 fe45 	bl	800591c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000c14 	.word	0x20000c14

08000c9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <HAL_UARTEx_RxEventCallback>:
	HAL_HalfDuplex_EnableReceiver(&huart1);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 8000cb4:	221e      	movs	r2, #30
 8000cb6:	4904      	ldr	r1, [pc, #16]	@ (8000cc8 <HAL_UARTEx_RxEventCallback+0x20>)
 8000cb8:	4804      	ldr	r0, [pc, #16]	@ (8000ccc <HAL_UARTEx_RxEventCallback+0x24>)
 8000cba:	f004 fdd1 	bl	8005860 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000cc0 	.word	0x20000cc0
 8000ccc:	20000c14 	.word	0x20000c14

08000cd0 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8000cd0:	f7ff ffe4 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd4:	480b      	ldr	r0, [pc, #44]	@ (8000d04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cd6:	490c      	ldr	r1, [pc, #48]	@ (8000d08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8000d0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cec:	4c09      	ldr	r4, [pc, #36]	@ (8000d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f007 f82b 	bl	8007d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cfe:	f7ff fb6b 	bl	80003d8 <main>
  bx lr
 8000d02:	4770      	bx	lr
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d0c:	08007efc 	.word	0x08007efc
  ldr r2, =_sbss
 8000d10:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d14:	20001b88 	.word	0x20001b88

08000d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_2_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_Init+0x28>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	@ (8000d44 <HAL_Init+0x28>)
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f8f5 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	200f      	movs	r0, #15
 8000d34:	f7ff feea 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff fd9a 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40022000 	.word	0x40022000

08000d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <HAL_IncTick+0x1c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <HAL_IncTick+0x20>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a03      	ldr	r2, [pc, #12]	@ (8000d68 <HAL_IncTick+0x20>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000ce0 	.word	0x20000ce0

08000d6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b02      	ldr	r3, [pc, #8]	@ (8000d7c <HAL_GetTick+0x10>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	20000ce0 	.word	0x20000ce0

08000d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d88:	f7ff fff0 	bl	8000d6c <HAL_GetTick>
 8000d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d98:	d005      	beq.n	8000da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <HAL_Delay+0x44>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da6:	bf00      	nop
 8000da8:	f7ff ffe0 	bl	8000d6c <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d8f7      	bhi.n	8000da8 <HAL_Delay+0x28>
  {
  }
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0b      	blt.n	8000e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	4906      	ldr	r1, [pc, #24]	@ (8000e60 <__NVIC_EnableIRQ+0x34>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	@ (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	@ 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff4f 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f44:	f7ff ff64 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6978      	ldr	r0, [r7, #20]
 8000f50:	f7ff ffb2 	bl	8000eb8 <NVIC_EncodePriority>
 8000f54:	4602      	mov	r2, r0
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff81 	bl	8000e64 <__NVIC_SetPriority>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff57 	bl	8000e2c <__NVIC_EnableIRQ>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e043      	b.n	8001026 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <HAL_DMA_Init+0xa8>)
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a22      	ldr	r2, [pc, #136]	@ (8001034 <HAL_DMA_Init+0xac>)
 8000faa:	fba2 2303 	umull	r2, r3, r2, r3
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	009a      	lsls	r2, r3, #2
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8001038 <HAL_DMA_Init+0xb0>)
 8000fba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000fd2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000fd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	bffdfff8 	.word	0xbffdfff8
 8001034:	cccccccd 	.word	0xcccccccd
 8001038:	40020000 	.word	0x40020000

0800103c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d101      	bne.n	800105c <HAL_DMA_Start_IT+0x20>
 8001058:	2302      	movs	r3, #2
 800105a:	e04b      	b.n	80010f4 <HAL_DMA_Start_IT+0xb8>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d13a      	bne.n	80010e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2202      	movs	r2, #2
 8001074:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2200      	movs	r2, #0
 800107c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0201 	bic.w	r2, r2, #1
 800108c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	68b9      	ldr	r1, [r7, #8]
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f9f8 	bl	800148a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d008      	beq.n	80010b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f042 020e 	orr.w	r2, r2, #14
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e00f      	b.n	80010d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0204 	bic.w	r2, r2, #4
 80010c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 020a 	orr.w	r2, r2, #10
 80010d2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f042 0201 	orr.w	r2, r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e005      	b.n	80010f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80010ee:	2302      	movs	r3, #2
 80010f0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d008      	beq.n	8001126 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2204      	movs	r2, #4
 8001118:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e020      	b.n	8001168 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 020e 	bic.w	r2, r2, #14
 8001134:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0201 	bic.w	r2, r2, #1
 8001144:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f202 	lsl.w	r2, r1, r2
 8001154:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001166:	7bfb      	ldrb	r3, [r7, #15]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
	...

08001174 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d005      	beq.n	8001198 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2204      	movs	r2, #4
 8001190:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	e051      	b.n	800123c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 020e 	bic.w	r2, r2, #14
 80011a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a22      	ldr	r2, [pc, #136]	@ (8001248 <HAL_DMA_Abort_IT+0xd4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d029      	beq.n	8001216 <HAL_DMA_Abort_IT+0xa2>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a21      	ldr	r2, [pc, #132]	@ (800124c <HAL_DMA_Abort_IT+0xd8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d022      	beq.n	8001212 <HAL_DMA_Abort_IT+0x9e>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001250 <HAL_DMA_Abort_IT+0xdc>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d01a      	beq.n	800120c <HAL_DMA_Abort_IT+0x98>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1e      	ldr	r2, [pc, #120]	@ (8001254 <HAL_DMA_Abort_IT+0xe0>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d012      	beq.n	8001206 <HAL_DMA_Abort_IT+0x92>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001258 <HAL_DMA_Abort_IT+0xe4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d00a      	beq.n	8001200 <HAL_DMA_Abort_IT+0x8c>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a1b      	ldr	r2, [pc, #108]	@ (800125c <HAL_DMA_Abort_IT+0xe8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d102      	bne.n	80011fa <HAL_DMA_Abort_IT+0x86>
 80011f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011f8:	e00e      	b.n	8001218 <HAL_DMA_Abort_IT+0xa4>
 80011fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011fe:	e00b      	b.n	8001218 <HAL_DMA_Abort_IT+0xa4>
 8001200:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001204:	e008      	b.n	8001218 <HAL_DMA_Abort_IT+0xa4>
 8001206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120a:	e005      	b.n	8001218 <HAL_DMA_Abort_IT+0xa4>
 800120c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001210:	e002      	b.n	8001218 <HAL_DMA_Abort_IT+0xa4>
 8001212:	2310      	movs	r3, #16
 8001214:	e000      	b.n	8001218 <HAL_DMA_Abort_IT+0xa4>
 8001216:	2301      	movs	r3, #1
 8001218:	4a11      	ldr	r2, [pc, #68]	@ (8001260 <HAL_DMA_Abort_IT+0xec>)
 800121a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	4798      	blx	r3
    } 
  }
  return status;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020008 	.word	0x40020008
 800124c:	4002001c 	.word	0x4002001c
 8001250:	40020030 	.word	0x40020030
 8001254:	40020044 	.word	0x40020044
 8001258:	40020058 	.word	0x40020058
 800125c:	4002006c 	.word	0x4002006c
 8001260:	40020000 	.word	0x40020000

08001264 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	2204      	movs	r2, #4
 8001282:	409a      	lsls	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4013      	ands	r3, r2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d04f      	beq.n	800132c <HAL_DMA_IRQHandler+0xc8>
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b00      	cmp	r3, #0
 8001294:	d04a      	beq.n	800132c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0320 	and.w	r3, r3, #32
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d107      	bne.n	80012b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0204 	bic.w	r2, r2, #4
 80012b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a66      	ldr	r2, [pc, #408]	@ (8001454 <HAL_DMA_IRQHandler+0x1f0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d029      	beq.n	8001312 <HAL_DMA_IRQHandler+0xae>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a65      	ldr	r2, [pc, #404]	@ (8001458 <HAL_DMA_IRQHandler+0x1f4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d022      	beq.n	800130e <HAL_DMA_IRQHandler+0xaa>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a63      	ldr	r2, [pc, #396]	@ (800145c <HAL_DMA_IRQHandler+0x1f8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01a      	beq.n	8001308 <HAL_DMA_IRQHandler+0xa4>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a62      	ldr	r2, [pc, #392]	@ (8001460 <HAL_DMA_IRQHandler+0x1fc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d012      	beq.n	8001302 <HAL_DMA_IRQHandler+0x9e>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a60      	ldr	r2, [pc, #384]	@ (8001464 <HAL_DMA_IRQHandler+0x200>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00a      	beq.n	80012fc <HAL_DMA_IRQHandler+0x98>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a5f      	ldr	r2, [pc, #380]	@ (8001468 <HAL_DMA_IRQHandler+0x204>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d102      	bne.n	80012f6 <HAL_DMA_IRQHandler+0x92>
 80012f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012f4:	e00e      	b.n	8001314 <HAL_DMA_IRQHandler+0xb0>
 80012f6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012fa:	e00b      	b.n	8001314 <HAL_DMA_IRQHandler+0xb0>
 80012fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001300:	e008      	b.n	8001314 <HAL_DMA_IRQHandler+0xb0>
 8001302:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001306:	e005      	b.n	8001314 <HAL_DMA_IRQHandler+0xb0>
 8001308:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800130c:	e002      	b.n	8001314 <HAL_DMA_IRQHandler+0xb0>
 800130e:	2340      	movs	r3, #64	@ 0x40
 8001310:	e000      	b.n	8001314 <HAL_DMA_IRQHandler+0xb0>
 8001312:	2304      	movs	r3, #4
 8001314:	4a55      	ldr	r2, [pc, #340]	@ (800146c <HAL_DMA_IRQHandler+0x208>)
 8001316:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 8094 	beq.w	800144a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800132a:	e08e      	b.n	800144a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001330:	2202      	movs	r2, #2
 8001332:	409a      	lsls	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4013      	ands	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d056      	beq.n	80013ea <HAL_DMA_IRQHandler+0x186>
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d051      	beq.n	80013ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0320 	and.w	r3, r3, #32
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10b      	bne.n	800136c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 020a 	bic.w	r2, r2, #10
 8001362:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a38      	ldr	r2, [pc, #224]	@ (8001454 <HAL_DMA_IRQHandler+0x1f0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d029      	beq.n	80013ca <HAL_DMA_IRQHandler+0x166>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a37      	ldr	r2, [pc, #220]	@ (8001458 <HAL_DMA_IRQHandler+0x1f4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d022      	beq.n	80013c6 <HAL_DMA_IRQHandler+0x162>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a35      	ldr	r2, [pc, #212]	@ (800145c <HAL_DMA_IRQHandler+0x1f8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01a      	beq.n	80013c0 <HAL_DMA_IRQHandler+0x15c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a34      	ldr	r2, [pc, #208]	@ (8001460 <HAL_DMA_IRQHandler+0x1fc>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d012      	beq.n	80013ba <HAL_DMA_IRQHandler+0x156>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a32      	ldr	r2, [pc, #200]	@ (8001464 <HAL_DMA_IRQHandler+0x200>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00a      	beq.n	80013b4 <HAL_DMA_IRQHandler+0x150>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a31      	ldr	r2, [pc, #196]	@ (8001468 <HAL_DMA_IRQHandler+0x204>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d102      	bne.n	80013ae <HAL_DMA_IRQHandler+0x14a>
 80013a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80013ac:	e00e      	b.n	80013cc <HAL_DMA_IRQHandler+0x168>
 80013ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013b2:	e00b      	b.n	80013cc <HAL_DMA_IRQHandler+0x168>
 80013b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013b8:	e008      	b.n	80013cc <HAL_DMA_IRQHandler+0x168>
 80013ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013be:	e005      	b.n	80013cc <HAL_DMA_IRQHandler+0x168>
 80013c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013c4:	e002      	b.n	80013cc <HAL_DMA_IRQHandler+0x168>
 80013c6:	2320      	movs	r3, #32
 80013c8:	e000      	b.n	80013cc <HAL_DMA_IRQHandler+0x168>
 80013ca:	2302      	movs	r3, #2
 80013cc:	4a27      	ldr	r2, [pc, #156]	@ (800146c <HAL_DMA_IRQHandler+0x208>)
 80013ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d034      	beq.n	800144a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013e8:	e02f      	b.n	800144a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	2208      	movs	r2, #8
 80013f0:	409a      	lsls	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d028      	beq.n	800144c <HAL_DMA_IRQHandler+0x1e8>
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d023      	beq.n	800144c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 020e 	bic.w	r2, r2, #14
 8001412:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800141c:	2101      	movs	r1, #1
 800141e:	fa01 f202 	lsl.w	r2, r1, r2
 8001422:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	2b00      	cmp	r3, #0
 8001440:	d004      	beq.n	800144c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	4798      	blx	r3
    }
  }
  return;
 800144a:	bf00      	nop
 800144c:	bf00      	nop
}
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40020008 	.word	0x40020008
 8001458:	4002001c 	.word	0x4002001c
 800145c:	40020030 	.word	0x40020030
 8001460:	40020044 	.word	0x40020044
 8001464:	40020058 	.word	0x40020058
 8001468:	4002006c 	.word	0x4002006c
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800147e:	b2db      	uxtb	r3, r3
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800148a:	b480      	push	{r7}
 800148c:	b085      	sub	sp, #20
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014a0:	2101      	movs	r1, #1
 80014a2:	fa01 f202 	lsl.w	r2, r1, r2
 80014a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b10      	cmp	r3, #16
 80014b6:	d108      	bne.n	80014ca <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014c8:	e007      	b.n	80014da <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	60da      	str	r2, [r3, #12]
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b08b      	sub	sp, #44	@ 0x2c
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f6:	e169      	b.n	80017cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014f8:	2201      	movs	r2, #1
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	429a      	cmp	r2, r3
 8001512:	f040 8158 	bne.w	80017c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4a9a      	ldr	r2, [pc, #616]	@ (8001784 <HAL_GPIO_Init+0x2a0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d05e      	beq.n	80015de <HAL_GPIO_Init+0xfa>
 8001520:	4a98      	ldr	r2, [pc, #608]	@ (8001784 <HAL_GPIO_Init+0x2a0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d875      	bhi.n	8001612 <HAL_GPIO_Init+0x12e>
 8001526:	4a98      	ldr	r2, [pc, #608]	@ (8001788 <HAL_GPIO_Init+0x2a4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d058      	beq.n	80015de <HAL_GPIO_Init+0xfa>
 800152c:	4a96      	ldr	r2, [pc, #600]	@ (8001788 <HAL_GPIO_Init+0x2a4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d86f      	bhi.n	8001612 <HAL_GPIO_Init+0x12e>
 8001532:	4a96      	ldr	r2, [pc, #600]	@ (800178c <HAL_GPIO_Init+0x2a8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d052      	beq.n	80015de <HAL_GPIO_Init+0xfa>
 8001538:	4a94      	ldr	r2, [pc, #592]	@ (800178c <HAL_GPIO_Init+0x2a8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d869      	bhi.n	8001612 <HAL_GPIO_Init+0x12e>
 800153e:	4a94      	ldr	r2, [pc, #592]	@ (8001790 <HAL_GPIO_Init+0x2ac>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d04c      	beq.n	80015de <HAL_GPIO_Init+0xfa>
 8001544:	4a92      	ldr	r2, [pc, #584]	@ (8001790 <HAL_GPIO_Init+0x2ac>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d863      	bhi.n	8001612 <HAL_GPIO_Init+0x12e>
 800154a:	4a92      	ldr	r2, [pc, #584]	@ (8001794 <HAL_GPIO_Init+0x2b0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d046      	beq.n	80015de <HAL_GPIO_Init+0xfa>
 8001550:	4a90      	ldr	r2, [pc, #576]	@ (8001794 <HAL_GPIO_Init+0x2b0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d85d      	bhi.n	8001612 <HAL_GPIO_Init+0x12e>
 8001556:	2b12      	cmp	r3, #18
 8001558:	d82a      	bhi.n	80015b0 <HAL_GPIO_Init+0xcc>
 800155a:	2b12      	cmp	r3, #18
 800155c:	d859      	bhi.n	8001612 <HAL_GPIO_Init+0x12e>
 800155e:	a201      	add	r2, pc, #4	@ (adr r2, 8001564 <HAL_GPIO_Init+0x80>)
 8001560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001564:	080015df 	.word	0x080015df
 8001568:	080015b9 	.word	0x080015b9
 800156c:	080015cb 	.word	0x080015cb
 8001570:	0800160d 	.word	0x0800160d
 8001574:	08001613 	.word	0x08001613
 8001578:	08001613 	.word	0x08001613
 800157c:	08001613 	.word	0x08001613
 8001580:	08001613 	.word	0x08001613
 8001584:	08001613 	.word	0x08001613
 8001588:	08001613 	.word	0x08001613
 800158c:	08001613 	.word	0x08001613
 8001590:	08001613 	.word	0x08001613
 8001594:	08001613 	.word	0x08001613
 8001598:	08001613 	.word	0x08001613
 800159c:	08001613 	.word	0x08001613
 80015a0:	08001613 	.word	0x08001613
 80015a4:	08001613 	.word	0x08001613
 80015a8:	080015c1 	.word	0x080015c1
 80015ac:	080015d5 	.word	0x080015d5
 80015b0:	4a79      	ldr	r2, [pc, #484]	@ (8001798 <HAL_GPIO_Init+0x2b4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d013      	beq.n	80015de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015b6:	e02c      	b.n	8001612 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	623b      	str	r3, [r7, #32]
          break;
 80015be:	e029      	b.n	8001614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	3304      	adds	r3, #4
 80015c6:	623b      	str	r3, [r7, #32]
          break;
 80015c8:	e024      	b.n	8001614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	3308      	adds	r3, #8
 80015d0:	623b      	str	r3, [r7, #32]
          break;
 80015d2:	e01f      	b.n	8001614 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	330c      	adds	r3, #12
 80015da:	623b      	str	r3, [r7, #32]
          break;
 80015dc:	e01a      	b.n	8001614 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015e6:	2304      	movs	r3, #4
 80015e8:	623b      	str	r3, [r7, #32]
          break;
 80015ea:	e013      	b.n	8001614 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d105      	bne.n	8001600 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f4:	2308      	movs	r3, #8
 80015f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	611a      	str	r2, [r3, #16]
          break;
 80015fe:	e009      	b.n	8001614 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001600:	2308      	movs	r3, #8
 8001602:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	615a      	str	r2, [r3, #20]
          break;
 800160a:	e003      	b.n	8001614 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
          break;
 8001610:	e000      	b.n	8001614 <HAL_GPIO_Init+0x130>
          break;
 8001612:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2bff      	cmp	r3, #255	@ 0xff
 8001618:	d801      	bhi.n	800161e <HAL_GPIO_Init+0x13a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	e001      	b.n	8001622 <HAL_GPIO_Init+0x13e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3304      	adds	r3, #4
 8001622:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2bff      	cmp	r3, #255	@ 0xff
 8001628:	d802      	bhi.n	8001630 <HAL_GPIO_Init+0x14c>
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	e002      	b.n	8001636 <HAL_GPIO_Init+0x152>
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	3b08      	subs	r3, #8
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	210f      	movs	r1, #15
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	401a      	ands	r2, r3
 8001648:	6a39      	ldr	r1, [r7, #32]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	431a      	orrs	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 80b1 	beq.w	80017c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001664:	4b4d      	ldr	r3, [pc, #308]	@ (800179c <HAL_GPIO_Init+0x2b8>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a4c      	ldr	r2, [pc, #304]	@ (800179c <HAL_GPIO_Init+0x2b8>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b4a      	ldr	r3, [pc, #296]	@ (800179c <HAL_GPIO_Init+0x2b8>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800167c:	4a48      	ldr	r2, [pc, #288]	@ (80017a0 <HAL_GPIO_Init+0x2bc>)
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	089b      	lsrs	r3, r3, #2
 8001682:	3302      	adds	r3, #2
 8001684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001688:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	220f      	movs	r2, #15
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a40      	ldr	r2, [pc, #256]	@ (80017a4 <HAL_GPIO_Init+0x2c0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d013      	beq.n	80016d0 <HAL_GPIO_Init+0x1ec>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a3f      	ldr	r2, [pc, #252]	@ (80017a8 <HAL_GPIO_Init+0x2c4>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d00d      	beq.n	80016cc <HAL_GPIO_Init+0x1e8>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a3e      	ldr	r2, [pc, #248]	@ (80017ac <HAL_GPIO_Init+0x2c8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d007      	beq.n	80016c8 <HAL_GPIO_Init+0x1e4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a3d      	ldr	r2, [pc, #244]	@ (80017b0 <HAL_GPIO_Init+0x2cc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d101      	bne.n	80016c4 <HAL_GPIO_Init+0x1e0>
 80016c0:	2303      	movs	r3, #3
 80016c2:	e006      	b.n	80016d2 <HAL_GPIO_Init+0x1ee>
 80016c4:	2304      	movs	r3, #4
 80016c6:	e004      	b.n	80016d2 <HAL_GPIO_Init+0x1ee>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e002      	b.n	80016d2 <HAL_GPIO_Init+0x1ee>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_GPIO_Init+0x1ee>
 80016d0:	2300      	movs	r3, #0
 80016d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d4:	f002 0203 	and.w	r2, r2, #3
 80016d8:	0092      	lsls	r2, r2, #2
 80016da:	4093      	lsls	r3, r2
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016e2:	492f      	ldr	r1, [pc, #188]	@ (80017a0 <HAL_GPIO_Init+0x2bc>)
 80016e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3302      	adds	r3, #2
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016fc:	4b2d      	ldr	r3, [pc, #180]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	492c      	ldr	r1, [pc, #176]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	608b      	str	r3, [r1, #8]
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800170a:	4b2a      	ldr	r3, [pc, #168]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	43db      	mvns	r3, r3
 8001712:	4928      	ldr	r1, [pc, #160]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001714:	4013      	ands	r3, r2
 8001716:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001724:	4b23      	ldr	r3, [pc, #140]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	4922      	ldr	r1, [pc, #136]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	60cb      	str	r3, [r1, #12]
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001732:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	43db      	mvns	r3, r3
 800173a:	491e      	ldr	r1, [pc, #120]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 800173c:	4013      	ands	r3, r2
 800173e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d006      	beq.n	800175a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4918      	ldr	r1, [pc, #96]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800175a:	4b16      	ldr	r3, [pc, #88]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	43db      	mvns	r3, r3
 8001762:	4914      	ldr	r1, [pc, #80]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001764:	4013      	ands	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d021      	beq.n	80017b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	490e      	ldr	r1, [pc, #56]	@ (80017b4 <HAL_GPIO_Init+0x2d0>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
 8001780:	e021      	b.n	80017c6 <HAL_GPIO_Init+0x2e2>
 8001782:	bf00      	nop
 8001784:	10320000 	.word	0x10320000
 8001788:	10310000 	.word	0x10310000
 800178c:	10220000 	.word	0x10220000
 8001790:	10210000 	.word	0x10210000
 8001794:	10120000 	.word	0x10120000
 8001798:	10110000 	.word	0x10110000
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000
 80017a4:	40010800 	.word	0x40010800
 80017a8:	40010c00 	.word	0x40010c00
 80017ac:	40011000 	.word	0x40011000
 80017b0:	40011400 	.word	0x40011400
 80017b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <HAL_GPIO_Init+0x304>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	43db      	mvns	r3, r3
 80017c0:	4909      	ldr	r1, [pc, #36]	@ (80017e8 <HAL_GPIO_Init+0x304>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	3301      	adds	r3, #1
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f47f ae8e 	bne.w	80014f8 <HAL_GPIO_Init+0x14>
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	372c      	adds	r7, #44	@ 0x2c
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40010400 	.word	0x40010400

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
 80017f8:	4613      	mov	r3, r2
 80017fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017fc:	787b      	ldrb	r3, [r7, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001808:	e003      	b.n	8001812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800180a:	887b      	ldrh	r3, [r7, #2]
 800180c:	041a      	lsls	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	611a      	str	r2, [r3, #16]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e12b      	b.n	8001a86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d106      	bne.n	8001848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff f84c 	bl	80008e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2224      	movs	r2, #36	@ 0x24
 800184c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0201 	bic.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800186e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800187e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001880:	f002 fffa 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8001884:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4a81      	ldr	r2, [pc, #516]	@ (8001a90 <HAL_I2C_Init+0x274>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d807      	bhi.n	80018a0 <HAL_I2C_Init+0x84>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4a80      	ldr	r2, [pc, #512]	@ (8001a94 <HAL_I2C_Init+0x278>)
 8001894:	4293      	cmp	r3, r2
 8001896:	bf94      	ite	ls
 8001898:	2301      	movls	r3, #1
 800189a:	2300      	movhi	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	e006      	b.n	80018ae <HAL_I2C_Init+0x92>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4a7d      	ldr	r2, [pc, #500]	@ (8001a98 <HAL_I2C_Init+0x27c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	bf94      	ite	ls
 80018a8:	2301      	movls	r3, #1
 80018aa:	2300      	movhi	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0e7      	b.n	8001a86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4a78      	ldr	r2, [pc, #480]	@ (8001a9c <HAL_I2C_Init+0x280>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0c9b      	lsrs	r3, r3, #18
 80018c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a90 <HAL_I2C_Init+0x274>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d802      	bhi.n	80018f0 <HAL_I2C_Init+0xd4>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	3301      	adds	r3, #1
 80018ee:	e009      	b.n	8001904 <HAL_I2C_Init+0xe8>
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	4a69      	ldr	r2, [pc, #420]	@ (8001aa0 <HAL_I2C_Init+0x284>)
 80018fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001900:	099b      	lsrs	r3, r3, #6
 8001902:	3301      	adds	r3, #1
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	430b      	orrs	r3, r1
 800190a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001916:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	495c      	ldr	r1, [pc, #368]	@ (8001a90 <HAL_I2C_Init+0x274>)
 8001920:	428b      	cmp	r3, r1
 8001922:	d819      	bhi.n	8001958 <HAL_I2C_Init+0x13c>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e59      	subs	r1, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001932:	1c59      	adds	r1, r3, #1
 8001934:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001938:	400b      	ands	r3, r1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00a      	beq.n	8001954 <HAL_I2C_Init+0x138>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1e59      	subs	r1, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fbb1 f3f3 	udiv	r3, r1, r3
 800194c:	3301      	adds	r3, #1
 800194e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001952:	e051      	b.n	80019f8 <HAL_I2C_Init+0x1dc>
 8001954:	2304      	movs	r3, #4
 8001956:	e04f      	b.n	80019f8 <HAL_I2C_Init+0x1dc>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d111      	bne.n	8001984 <HAL_I2C_Init+0x168>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1e58      	subs	r0, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6859      	ldr	r1, [r3, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	440b      	add	r3, r1
 800196e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001972:	3301      	adds	r3, #1
 8001974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	e012      	b.n	80019aa <HAL_I2C_Init+0x18e>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1e58      	subs	r0, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	0099      	lsls	r1, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	fbb0 f3f3 	udiv	r3, r0, r3
 800199a:	3301      	adds	r3, #1
 800199c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Init+0x196>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e022      	b.n	80019f8 <HAL_I2C_Init+0x1dc>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10e      	bne.n	80019d8 <HAL_I2C_Init+0x1bc>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1e58      	subs	r0, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6859      	ldr	r1, [r3, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	440b      	add	r3, r1
 80019c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019d6:	e00f      	b.n	80019f8 <HAL_I2C_Init+0x1dc>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1e58      	subs	r0, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6859      	ldr	r1, [r3, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	0099      	lsls	r1, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	6809      	ldr	r1, [r1, #0]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6911      	ldr	r1, [r2, #16]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68d2      	ldr	r2, [r2, #12]
 8001a32:	4311      	orrs	r1, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2220      	movs	r2, #32
 8001a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	000186a0 	.word	0x000186a0
 8001a94:	001e847f 	.word	0x001e847f
 8001a98:	003d08ff 	.word	0x003d08ff
 8001a9c:	431bde83 	.word	0x431bde83
 8001aa0:	10624dd3 	.word	0x10624dd3

08001aa4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ab6:	2b80      	cmp	r3, #128	@ 0x80
 8001ab8:	d103      	bne.n	8001ac2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	@ 0x30
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	4608      	mov	r0, r1
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4603      	mov	r3, r0
 8001adc:	817b      	strh	r3, [r7, #10]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	813b      	strh	r3, [r7, #8]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ae6:	f7ff f941 	bl	8000d6c <HAL_GetTick>
 8001aea:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	f040 8168 	bne.w	8001dce <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001afe:	4b98      	ldr	r3, [pc, #608]	@ (8001d60 <HAL_I2C_Mem_Read_DMA+0x294>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	08db      	lsrs	r3, r3, #3
 8001b04:	4a97      	ldr	r2, [pc, #604]	@ (8001d64 <HAL_I2C_Mem_Read_DMA+0x298>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	0a1a      	lsrs	r2, r3, #8
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	009a      	lsls	r2, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d112      	bne.n	8001b4a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f043 0220 	orr.w	r2, r3, #32
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001b46:	2302      	movs	r3, #2
 8001b48:	e142      	b.n	8001dd0 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d0df      	beq.n	8001b18 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_I2C_Mem_Read_DMA+0x9a>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e134      	b.n	8001dd0 <HAL_I2C_Mem_Read_DMA+0x304>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d007      	beq.n	8001b8c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2222      	movs	r2, #34	@ 0x22
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2240      	movs	r2, #64	@ 0x40
 8001ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4a67      	ldr	r2, [pc, #412]	@ (8001d68 <HAL_I2C_Mem_Read_DMA+0x29c>)
 8001bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001bce:	897a      	ldrh	r2, [r7, #10]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8001bd4:	893a      	ldrh	r2, [r7, #8]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001bda:	88fa      	ldrh	r2, [r7, #6]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 80c2 	beq.w	8001d74 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d024      	beq.n	8001c42 <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bfc:	4a5b      	ldr	r2, [pc, #364]	@ (8001d6c <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8001bfe:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c04:	4a5a      	ldr	r2, [pc, #360]	@ (8001d70 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8001c06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c14:	2200      	movs	r2, #0
 8001c16:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3310      	adds	r3, #16
 8001c22:	4619      	mov	r1, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c28:	461a      	mov	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2e:	f7ff fa05 	bl	800103c <HAL_DMA_Start_IT>
 8001c32:	4603      	mov	r3, r0
 8001c34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001c38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d17b      	bne.n	8001d38 <HAL_I2C_Mem_Read_DMA+0x26c>
 8001c40:	e013      	b.n	8001c6a <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0b2      	b.n	8001dd0 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001c6a:	88f8      	ldrh	r0, [r7, #6]
 8001c6c:	893a      	ldrh	r2, [r7, #8]
 8001c6e:	8979      	ldrh	r1, [r7, #10]
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	2323      	movs	r3, #35	@ 0x23
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	4603      	mov	r3, r0
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f001 fdb0 	bl	80037e0 <I2C_RequestMemoryRead>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d023      	beq.n	8001cce <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fa72 	bl	8001174 <HAL_DMA_Abort_IT>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cac:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e080      	b.n	8001dd0 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d108      	bne.n	8001ce8 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e007      	b.n	8001cf8 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001cf6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d24:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	e048      	b.n	8001dca <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	f043 0210 	orr.w	r2, r3, #16
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e037      	b.n	8001dd0 <HAL_I2C_Mem_Read_DMA+0x304>
 8001d60:	20000000 	.word	0x20000000
 8001d64:	14f8b589 	.word	0x14f8b589
 8001d68:	ffff0000 	.word	0xffff0000
 8001d6c:	080039b1 	.word	0x080039b1
 8001d70:	08003b6f 	.word	0x08003b6f
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8001d74:	88f8      	ldrh	r0, [r7, #6]
 8001d76:	893a      	ldrh	r2, [r7, #8]
 8001d78:	8979      	ldrh	r1, [r7, #10]
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	2323      	movs	r3, #35	@ 0x23
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	4603      	mov	r3, r0
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f001 fd2b 	bl	80037e0 <I2C_RequestMemoryRead>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e01d      	b.n	8001dd0 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001db8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 8001dce:	2302      	movs	r3, #2
  }
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3728      	adds	r7, #40	@ 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	460b      	mov	r3, r1
 8001de6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7fe ffc0 	bl	8000d6c <HAL_GetTick>
 8001dec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	f040 8111 	bne.w	8002022 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2319      	movs	r3, #25
 8001e06:	2201      	movs	r2, #1
 8001e08:	4988      	ldr	r1, [pc, #544]	@ (800202c <HAL_I2C_IsDeviceReady+0x254>)
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f001 ff8e 	bl	8003d2c <I2C_WaitOnFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e16:	2302      	movs	r3, #2
 8001e18:	e104      	b.n	8002024 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_I2C_IsDeviceReady+0x50>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e0fd      	b.n	8002024 <HAL_I2C_IsDeviceReady+0x24c>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d007      	beq.n	8001e4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0201 	orr.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2224      	movs	r2, #36	@ 0x24
 8001e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4a70      	ldr	r2, [pc, #448]	@ (8002030 <HAL_I2C_IsDeviceReady+0x258>)
 8001e70:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f001 ff4c 	bl	8003d2c <I2C_WaitOnFlagUntilTimeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00d      	beq.n	8001eb6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ea8:	d103      	bne.n	8001eb2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eb0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e0b6      	b.n	8002024 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eb6:	897b      	ldrh	r3, [r7, #10]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ec4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7fe ff51 	bl	8000d6c <HAL_GetTick>
 8001eca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	bf0c      	ite	eq
 8001eda:	2301      	moveq	r3, #1
 8001edc:	2300      	movne	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ef0:	bf0c      	ite	eq
 8001ef2:	2301      	moveq	r3, #1
 8001ef4:	2300      	movne	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001efa:	e025      	b.n	8001f48 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001efc:	f7fe ff36 	bl	8000d6c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d302      	bcc.n	8001f12 <HAL_I2C_IsDeviceReady+0x13a>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d103      	bne.n	8001f1a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	22a0      	movs	r2, #160	@ 0xa0
 8001f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f52:	d005      	beq.n	8001f60 <HAL_I2C_IsDeviceReady+0x188>
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d102      	bne.n	8001f60 <HAL_I2C_IsDeviceReady+0x188>
 8001f5a:	7dbb      	ldrb	r3, [r7, #22]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0cd      	beq.n	8001efc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d129      	bne.n	8001fca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2319      	movs	r3, #25
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4921      	ldr	r1, [pc, #132]	@ (800202c <HAL_I2C_IsDeviceReady+0x254>)
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f001 fec0 	bl	8003d2c <I2C_WaitOnFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e036      	b.n	8002024 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e02c      	b.n	8002024 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fe2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2319      	movs	r3, #25
 8001fea:	2201      	movs	r2, #1
 8001fec:	490f      	ldr	r1, [pc, #60]	@ (800202c <HAL_I2C_IsDeviceReady+0x254>)
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f001 fe9c 	bl	8003d2c <I2C_WaitOnFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e012      	b.n	8002024 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	3301      	adds	r3, #1
 8002002:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	f4ff af32 	bcc.w	8001e72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2220      	movs	r2, #32
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002022:	2302      	movs	r3, #2
  }
}
 8002024:	4618      	mov	r0, r3
 8002026:	3720      	adds	r7, #32
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	00100002 	.word	0x00100002
 8002030:	ffff0000 	.word	0xffff0000

08002034 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002054:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800205c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b10      	cmp	r3, #16
 8002062:	d003      	beq.n	800206c <HAL_I2C_EV_IRQHandler+0x38>
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b40      	cmp	r3, #64	@ 0x40
 8002068:	f040 80b1 	bne.w	80021ce <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10d      	bne.n	80020a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800208c:	d003      	beq.n	8002096 <HAL_I2C_EV_IRQHandler+0x62>
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002094:	d101      	bne.n	800209a <HAL_I2C_EV_IRQHandler+0x66>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_I2C_EV_IRQHandler+0x68>
 800209a:	2300      	movs	r3, #0
 800209c:	2b01      	cmp	r3, #1
 800209e:	f000 8114 	beq.w	80022ca <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00b      	beq.n	80020c4 <HAL_I2C_EV_IRQHandler+0x90>
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f001 fffa 	bl	80040b0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fd6b 	bl	8002b98 <I2C_Master_SB>
 80020c2:	e083      	b.n	80021cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_I2C_EV_IRQHandler+0xac>
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fde2 	bl	8002ca2 <I2C_Master_ADD10>
 80020de:	e075      	b.n	80021cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <HAL_I2C_EV_IRQHandler+0xc8>
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fdfd 	bl	8002cf4 <I2C_Master_ADDR>
 80020fa:	e067      	b.n	80021cc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d036      	beq.n	8002174 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002114:	f000 80db 	beq.w	80022ce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <HAL_I2C_EV_IRQHandler+0x10a>
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_I2C_EV_IRQHandler+0x10a>
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f9cb 	bl	80024d2 <I2C_MasterTransmit_TXE>
 800213c:	e046      	b.n	80021cc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80c2 	beq.w	80022ce <HAL_I2C_EV_IRQHandler+0x29a>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80bc 	beq.w	80022ce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002156:	7bbb      	ldrb	r3, [r7, #14]
 8002158:	2b21      	cmp	r3, #33	@ 0x21
 800215a:	d103      	bne.n	8002164 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fa54 	bl	800260a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002162:	e0b4      	b.n	80022ce <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b40      	cmp	r3, #64	@ 0x40
 8002168:	f040 80b1 	bne.w	80022ce <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fac2 	bl	80026f6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002172:	e0ac      	b.n	80022ce <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800217e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002182:	f000 80a4 	beq.w	80022ce <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00d      	beq.n	80021ac <HAL_I2C_EV_IRQHandler+0x178>
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <HAL_I2C_EV_IRQHandler+0x178>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d103      	bne.n	80021ac <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fb3e 	bl	8002826 <I2C_MasterReceive_RXNE>
 80021aa:	e00f      	b.n	80021cc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 808b 	beq.w	80022ce <HAL_I2C_EV_IRQHandler+0x29a>
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8085 	beq.w	80022ce <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fbf6 	bl	80029b6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021ca:	e080      	b.n	80022ce <HAL_I2C_EV_IRQHandler+0x29a>
 80021cc:	e07f      	b.n	80022ce <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d004      	beq.n	80021e0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	e007      	b.n	80021f0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d011      	beq.n	800221e <HAL_I2C_EV_IRQHandler+0x1ea>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00c      	beq.n	800221e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002214:	69b9      	ldr	r1, [r7, #24]
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 ffc3 	bl	80031a2 <I2C_Slave_ADDR>
 800221c:	e05a      	b.n	80022d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_I2C_EV_IRQHandler+0x206>
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fffe 	bl	8003234 <I2C_Slave_STOPF>
 8002238:	e04c      	b.n	80022d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800223a:	7bbb      	ldrb	r3, [r7, #14]
 800223c:	2b21      	cmp	r3, #33	@ 0x21
 800223e:	d002      	beq.n	8002246 <HAL_I2C_EV_IRQHandler+0x212>
 8002240:	7bbb      	ldrb	r3, [r7, #14]
 8002242:	2b29      	cmp	r3, #41	@ 0x29
 8002244:	d120      	bne.n	8002288 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00d      	beq.n	800226c <HAL_I2C_EV_IRQHandler+0x238>
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_I2C_EV_IRQHandler+0x238>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d103      	bne.n	800226c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 fee0 	bl	800302a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800226a:	e032      	b.n	80022d2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d02d      	beq.n	80022d2 <HAL_I2C_EV_IRQHandler+0x29e>
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800227c:	2b00      	cmp	r3, #0
 800227e:	d028      	beq.n	80022d2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 ff0f 	bl	80030a4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002286:	e024      	b.n	80022d2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00d      	beq.n	80022ae <HAL_I2C_EV_IRQHandler+0x27a>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_I2C_EV_IRQHandler+0x27a>
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d103      	bne.n	80022ae <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 ff1c 	bl	80030e4 <I2C_SlaveReceive_RXNE>
 80022ac:	e012      	b.n	80022d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00d      	beq.n	80022d4 <HAL_I2C_EV_IRQHandler+0x2a0>
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 ff4c 	bl	8003160 <I2C_SlaveReceive_BTF>
 80022c8:	e004      	b.n	80022d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80022ca:	bf00      	nop
 80022cc:	e002      	b.n	80022d4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022ce:	bf00      	nop
 80022d0:	e000      	b.n	80022d4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b08a      	sub	sp, #40	@ 0x28
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022fc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d015      	beq.n	8002334 <HAL_I2C_ER_IRQHandler+0x5a>
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d010      	beq.n	8002334 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002322:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002332:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00d      	beq.n	800235a <HAL_I2C_ER_IRQHandler+0x80>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002358:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d03e      	beq.n	80023e2 <HAL_I2C_ER_IRQHandler+0x108>
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d039      	beq.n	80023e2 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 800236e:	7efb      	ldrb	r3, [r7, #27]
 8002370:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002380:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002388:	7ebb      	ldrb	r3, [r7, #26]
 800238a:	2b20      	cmp	r3, #32
 800238c:	d112      	bne.n	80023b4 <HAL_I2C_ER_IRQHandler+0xda>
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10f      	bne.n	80023b4 <HAL_I2C_ER_IRQHandler+0xda>
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	2b21      	cmp	r3, #33	@ 0x21
 8002398:	d008      	beq.n	80023ac <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b29      	cmp	r3, #41	@ 0x29
 800239e:	d005      	beq.n	80023ac <HAL_I2C_ER_IRQHandler+0xd2>
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	2b28      	cmp	r3, #40	@ 0x28
 80023a4:	d106      	bne.n	80023b4 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b21      	cmp	r3, #33	@ 0x21
 80023aa:	d103      	bne.n	80023b4 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f001 f871 	bl	8003494 <I2C_Slave_AF>
 80023b2:	e016      	b.n	80023e2 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023bc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80023c6:	7efb      	ldrb	r3, [r7, #27]
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d002      	beq.n	80023d2 <HAL_I2C_ER_IRQHandler+0xf8>
 80023cc:	7efb      	ldrb	r3, [r7, #27]
 80023ce:	2b40      	cmp	r3, #64	@ 0x40
 80023d0:	d107      	bne.n	80023e2 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023e0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00d      	beq.n	8002408 <HAL_I2C_ER_IRQHandler+0x12e>
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	f043 0308 	orr.w	r3, r3, #8
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002406:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f001 f8ae 	bl	800357c <I2C_ITError>
  }
}
 8002420:	bf00      	nop
 8002422:	3728      	adds	r7, #40	@ 0x28
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	70fb      	strb	r3, [r7, #3]
 800247c:	4613      	mov	r3, r2
 800247e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024e8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d150      	bne.n	800259a <I2C_MasterTransmit_TXE+0xc8>
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b21      	cmp	r3, #33	@ 0x21
 80024fc:	d14d      	bne.n	800259a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b08      	cmp	r3, #8
 8002502:	d01d      	beq.n	8002540 <I2C_MasterTransmit_TXE+0x6e>
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b20      	cmp	r3, #32
 8002508:	d01a      	beq.n	8002540 <I2C_MasterTransmit_TXE+0x6e>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002510:	d016      	beq.n	8002540 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002520:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2211      	movs	r2, #17
 8002526:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff75 	bl	8002428 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800253e:	e060      	b.n	8002602 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800254e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b40      	cmp	r3, #64	@ 0x40
 8002578:	d107      	bne.n	800258a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff8a 	bl	800249c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002588:	e03b      	b.n	8002602 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ff48 	bl	8002428 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002598:	e033      	b.n	8002602 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	2b21      	cmp	r3, #33	@ 0x21
 800259e:	d005      	beq.n	80025ac <I2C_MasterTransmit_TXE+0xda>
 80025a0:	7bbb      	ldrb	r3, [r7, #14]
 80025a2:	2b40      	cmp	r3, #64	@ 0x40
 80025a4:	d12d      	bne.n	8002602 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b22      	cmp	r3, #34	@ 0x22
 80025aa:	d12a      	bne.n	8002602 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d108      	bne.n	80025c8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80025c6:	e01c      	b.n	8002602 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b40      	cmp	r3, #64	@ 0x40
 80025d2:	d103      	bne.n	80025dc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f88e 	bl	80026f6 <I2C_MemoryTransmit_TXE_BTF>
}
 80025da:	e012      	b.n	8002602 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002600:	e7ff      	b.n	8002602 <I2C_MasterTransmit_TXE+0x130>
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002616:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b21      	cmp	r3, #33	@ 0x21
 8002622:	d164      	bne.n	80026ee <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d012      	beq.n	8002654 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002632:	781a      	ldrb	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002652:	e04c      	b.n	80026ee <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b08      	cmp	r3, #8
 8002658:	d01d      	beq.n	8002696 <I2C_MasterTransmit_BTF+0x8c>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b20      	cmp	r3, #32
 800265e:	d01a      	beq.n	8002696 <I2C_MasterTransmit_BTF+0x8c>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002666:	d016      	beq.n	8002696 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002676:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2211      	movs	r2, #17
 800267c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff feca 	bl	8002428 <HAL_I2C_MasterTxCpltCallback>
}
 8002694:	e02b      	b.n	80026ee <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026a4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b40      	cmp	r3, #64	@ 0x40
 80026ce:	d107      	bne.n	80026e0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff fedf 	bl	800249c <HAL_I2C_MemTxCpltCallback>
}
 80026de:	e006      	b.n	80026ee <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff fe9d 	bl	8002428 <HAL_I2C_MasterTxCpltCallback>
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002704:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800270a:	2b00      	cmp	r3, #0
 800270c:	d11d      	bne.n	800274a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002712:	2b01      	cmp	r3, #1
 8002714:	d10b      	bne.n	800272e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800271a:	b2da      	uxtb	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002726:	1c9a      	adds	r2, r3, #2
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800272c:	e077      	b.n	800281e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002732:	b29b      	uxth	r3, r3
 8002734:	121b      	asrs	r3, r3, #8
 8002736:	b2da      	uxtb	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002748:	e069      	b.n	800281e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800274e:	2b01      	cmp	r3, #1
 8002750:	d10b      	bne.n	800276a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002756:	b2da      	uxtb	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002768:	e059      	b.n	800281e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800276e:	2b02      	cmp	r3, #2
 8002770:	d152      	bne.n	8002818 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b22      	cmp	r3, #34	@ 0x22
 8002776:	d10d      	bne.n	8002794 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002786:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002792:	e044      	b.n	800281e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d015      	beq.n	80027ca <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	2b21      	cmp	r3, #33	@ 0x21
 80027a2:	d112      	bne.n	80027ca <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027be:	b29b      	uxth	r3, r3
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80027c8:	e029      	b.n	800281e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d124      	bne.n	800281e <I2C_MemoryTransmit_TXE_BTF+0x128>
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b21      	cmp	r3, #33	@ 0x21
 80027d8:	d121      	bne.n	800281e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80027e8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff fe43 	bl	800249c <HAL_I2C_MemTxCpltCallback>
}
 8002816:	e002      	b.n	800281e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff f943 	bl	8001aa4 <I2C_Flush_DR>
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b22      	cmp	r3, #34	@ 0x22
 8002838:	f040 80b9 	bne.w	80029ae <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d921      	bls.n	8002894 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b03      	cmp	r3, #3
 800287e:	f040 8096 	bne.w	80029ae <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002890:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002892:	e08c      	b.n	80029ae <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	2b02      	cmp	r3, #2
 800289a:	d07f      	beq.n	800299c <I2C_MasterReceive_RXNE+0x176>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d002      	beq.n	80028a8 <I2C_MasterReceive_RXNE+0x82>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d179      	bne.n	800299c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f001 fba1 	bl	8003ff0 <I2C_WaitOnSTOPRequestThroughIT>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d14c      	bne.n	800294e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028c2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b40      	cmp	r3, #64	@ 0x40
 800290c:	d10a      	bne.n	8002924 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7fd fc9d 	bl	800025c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002922:	e044      	b.n	80029ae <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b08      	cmp	r3, #8
 8002930:	d002      	beq.n	8002938 <I2C_MasterReceive_RXNE+0x112>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b20      	cmp	r3, #32
 8002936:	d103      	bne.n	8002940 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	631a      	str	r2, [r3, #48]	@ 0x30
 800293e:	e002      	b.n	8002946 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2212      	movs	r2, #18
 8002944:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff fd77 	bl	800243a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800294c:	e02f      	b.n	80029ae <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800295c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff fd8a 	bl	80024ae <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800299a:	e008      	b.n	80029ae <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029aa:	605a      	str	r2, [r3, #4]
}
 80029ac:	e7ff      	b.n	80029ae <I2C_MasterReceive_RXNE+0x188>
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d11b      	bne.n	8002a06 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029dc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002a04:	e0c4      	b.n	8002b90 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d129      	bne.n	8002a64 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a1e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d00a      	beq.n	8002a3c <I2C_MasterReceive_BTF+0x86>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d007      	beq.n	8002a3c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002a62:	e095      	b.n	8002b90 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d17d      	bne.n	8002b6a <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d002      	beq.n	8002a7a <I2C_MasterReceive_BTF+0xc4>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d108      	bne.n	8002a8c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e016      	b.n	8002aba <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d002      	beq.n	8002a98 <I2C_MasterReceive_BTF+0xe2>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d108      	bne.n	8002aaa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	e007      	b.n	8002aba <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ab8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002b14:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b40      	cmp	r3, #64	@ 0x40
 8002b28:	d10a      	bne.n	8002b40 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fd fb8f 	bl	800025c <HAL_I2C_MemRxCpltCallback>
}
 8002b3e:	e027      	b.n	8002b90 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d002      	beq.n	8002b54 <I2C_MasterReceive_BTF+0x19e>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d103      	bne.n	8002b5c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b5a:	e002      	b.n	8002b62 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2212      	movs	r2, #18
 8002b60:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff fc69 	bl	800243a <HAL_I2C_MasterRxCpltCallback>
}
 8002b68:	e012      	b.n	8002b90 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b40      	cmp	r3, #64	@ 0x40
 8002baa:	d117      	bne.n	8002bdc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bc4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002bc6:	e067      	b.n	8002c98 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	611a      	str	r2, [r3, #16]
}
 8002bda:	e05d      	b.n	8002c98 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002be4:	d133      	bne.n	8002c4e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b21      	cmp	r3, #33	@ 0x21
 8002bf0:	d109      	bne.n	8002c06 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c02:	611a      	str	r2, [r3, #16]
 8002c04:	e008      	b.n	8002c18 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d004      	beq.n	8002c2a <I2C_Master_SB+0x92>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d108      	bne.n	8002c3c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d032      	beq.n	8002c98 <I2C_Master_SB+0x100>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d02d      	beq.n	8002c98 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c4a:	605a      	str	r2, [r3, #4]
}
 8002c4c:	e024      	b.n	8002c98 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10e      	bne.n	8002c74 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	11db      	asrs	r3, r3, #7
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f003 0306 	and.w	r3, r3, #6
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f063 030f 	orn	r3, r3, #15
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	611a      	str	r2, [r3, #16]
}
 8002c72:	e011      	b.n	8002c98 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d10d      	bne.n	8002c98 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	11db      	asrs	r3, r3, #7
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f003 0306 	and.w	r3, r3, #6
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f063 030e 	orn	r3, r3, #14
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	611a      	str	r2, [r3, #16]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <I2C_Master_ADD10+0x26>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d108      	bne.n	8002cda <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00c      	beq.n	8002cea <I2C_Master_ADD10+0x48>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ce8:	605a      	str	r2, [r3, #4]
  }
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b091      	sub	sp, #68	@ 0x44
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d02:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b22      	cmp	r3, #34	@ 0x22
 8002d1c:	f040 8174 	bne.w	8003008 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10f      	bne.n	8002d48 <I2C_Master_ADDR+0x54>
 8002d28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002d2c:	2b40      	cmp	r3, #64	@ 0x40
 8002d2e:	d10b      	bne.n	8002d48 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d30:	2300      	movs	r3, #0
 8002d32:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d46:	e16b      	b.n	8003020 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d11d      	bne.n	8002d8c <I2C_Master_ADDR+0x98>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002d58:	d118      	bne.n	8002d8c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d7e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	651a      	str	r2, [r3, #80]	@ 0x50
 8002d8a:	e149      	b.n	8003020 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d113      	bne.n	8002dbe <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d96:	2300      	movs	r3, #0
 8002d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e120      	b.n	8003000 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	f040 808a 	bne.w	8002ede <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dcc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dd0:	d137      	bne.n	8002e42 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002df0:	d113      	bne.n	8002e1a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e00:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e02:	2300      	movs	r3, #0
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	e0f2      	b.n	8003000 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	623b      	str	r3, [r7, #32]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	623b      	str	r3, [r7, #32]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	623b      	str	r3, [r7, #32]
 8002e2e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	e0de      	b.n	8003000 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d02e      	beq.n	8002ea6 <I2C_Master_ADDR+0x1b2>
 8002e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d02b      	beq.n	8002ea6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e50:	2b12      	cmp	r3, #18
 8002e52:	d102      	bne.n	8002e5a <I2C_Master_ADDR+0x166>
 8002e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d125      	bne.n	8002ea6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d00e      	beq.n	8002e7e <I2C_Master_ADDR+0x18a>
 8002e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d00b      	beq.n	8002e7e <I2C_Master_ADDR+0x18a>
 8002e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d008      	beq.n	8002e7e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e007      	b.n	8002e8e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	e0ac      	b.n	8003000 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e090      	b.n	8003000 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d158      	bne.n	8002f9a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d021      	beq.n	8002f32 <I2C_Master_ADDR+0x23e>
 8002eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d01e      	beq.n	8002f32 <I2C_Master_ADDR+0x23e>
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d01b      	beq.n	8002f32 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f08:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e012      	b.n	8002f58 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f40:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f66:	d14b      	bne.n	8003000 <I2C_Master_ADDR+0x30c>
 8002f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f6a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f6e:	d00b      	beq.n	8002f88 <I2C_Master_ADDR+0x294>
 8002f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d008      	beq.n	8002f88 <I2C_Master_ADDR+0x294>
 8002f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d005      	beq.n	8002f88 <I2C_Master_ADDR+0x294>
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d002      	beq.n	8002f88 <I2C_Master_ADDR+0x294>
 8002f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d13b      	bne.n	8003000 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	e032      	b.n	8003000 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fa8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb8:	d117      	bne.n	8002fea <I2C_Master_ADDR+0x2f6>
 8002fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fc0:	d00b      	beq.n	8002fda <I2C_Master_ADDR+0x2e6>
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d008      	beq.n	8002fda <I2C_Master_ADDR+0x2e6>
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d005      	beq.n	8002fda <I2C_Master_ADDR+0x2e6>
 8002fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d002      	beq.n	8002fda <I2C_Master_ADDR+0x2e6>
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d107      	bne.n	8002fea <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fe8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003006:	e00b      	b.n	8003020 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003008:	2300      	movs	r3, #0
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
}
 800301e:	e7ff      	b.n	8003020 <I2C_Master_ADDR+0x32c>
 8003020:	bf00      	nop
 8003022:	3744      	adds	r7, #68	@ 0x44
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr

0800302a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003038:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d02b      	beq.n	800309c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	781a      	ldrb	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d114      	bne.n	800309c <I2C_SlaveTransmit_TXE+0x72>
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	2b29      	cmp	r3, #41	@ 0x29
 8003076:	d111      	bne.n	800309c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003086:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2221      	movs	r2, #33	@ 0x21
 800308c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2228      	movs	r2, #40	@ 0x28
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff f9d8 	bl	800244c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d011      	beq.n	80030da <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d02c      	beq.n	8003158 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d114      	bne.n	8003158 <I2C_SlaveReceive_RXNE+0x74>
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	2b2a      	cmp	r3, #42	@ 0x2a
 8003132:	d111      	bne.n	8003158 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003142:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2222      	movs	r2, #34	@ 0x22
 8003148:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2228      	movs	r2, #40	@ 0x28
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff f983 	bl	800245e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d012      	beq.n	8003198 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031bc:	2b28      	cmp	r3, #40	@ 0x28
 80031be:	d125      	bne.n	800320c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ce:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80031da:	2301      	movs	r3, #1
 80031dc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d103      	bne.n	80031f0 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	81bb      	strh	r3, [r7, #12]
 80031ee:	e002      	b.n	80031f6 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80031fe:	89ba      	ldrh	r2, [r7, #12]
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff f933 	bl	8002470 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800320a:	e00e      	b.n	800322a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003242:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003252:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003254:	2300      	movs	r3, #0
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003280:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800328c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003290:	d172      	bne.n	8003378 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	2b22      	cmp	r3, #34	@ 0x22
 8003296:	d002      	beq.n	800329e <I2C_Slave_STOPF+0x6a>
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	2b2a      	cmp	r3, #42	@ 0x2a
 800329c:	d135      	bne.n	800330a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	f043 0204 	orr.w	r2, r3, #4
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe f8ca 	bl	8001470 <HAL_DMA_GetState>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d049      	beq.n	8003376 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e6:	4a69      	ldr	r2, [pc, #420]	@ (800348c <I2C_Slave_STOPF+0x258>)
 80032e8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd ff40 	bl	8001174 <HAL_DMA_Abort_IT>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d03d      	beq.n	8003376 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003304:	4610      	mov	r0, r2
 8003306:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003308:	e035      	b.n	8003376 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	b29a      	uxth	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	f043 0204 	orr.w	r2, r3, #4
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800333c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe f894 	bl	8001470 <HAL_DMA_GetState>
 8003348:	4603      	mov	r3, r0
 800334a:	2b01      	cmp	r3, #1
 800334c:	d014      	beq.n	8003378 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003352:	4a4e      	ldr	r2, [pc, #312]	@ (800348c <I2C_Slave_STOPF+0x258>)
 8003354:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd ff0a 	bl	8001174 <HAL_DMA_Abort_IT>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d008      	beq.n	8003378 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003370:	4610      	mov	r0, r2
 8003372:	4798      	blx	r3
 8003374:	e000      	b.n	8003378 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003376:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d03e      	beq.n	8003400 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b04      	cmp	r3, #4
 800338e:	d112      	bne.n	80033b6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c0:	2b40      	cmp	r3, #64	@ 0x40
 80033c2:	d112      	bne.n	80033ea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	f043 0204 	orr.w	r2, r3, #4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f8b7 	bl	800357c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800340e:	e039      	b.n	8003484 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	2b2a      	cmp	r3, #42	@ 0x2a
 8003414:	d109      	bne.n	800342a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2228      	movs	r2, #40	@ 0x28
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff f81a 	bl	800245e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b28      	cmp	r3, #40	@ 0x28
 8003434:	d111      	bne.n	800345a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a15      	ldr	r2, [pc, #84]	@ (8003490 <I2C_Slave_STOPF+0x25c>)
 800343a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff f819 	bl	800248a <HAL_I2C_ListenCpltCallback>
}
 8003458:	e014      	b.n	8003484 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345e:	2b22      	cmp	r3, #34	@ 0x22
 8003460:	d002      	beq.n	8003468 <I2C_Slave_STOPF+0x234>
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b22      	cmp	r3, #34	@ 0x22
 8003466:	d10d      	bne.n	8003484 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fe ffed 	bl	800245e <HAL_I2C_SlaveRxCpltCallback>
}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	08003bdd 	.word	0x08003bdd
 8003490:	ffff0000 	.word	0xffff0000

08003494 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d002      	beq.n	80034b6 <I2C_Slave_AF+0x22>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b20      	cmp	r3, #32
 80034b4:	d129      	bne.n	800350a <I2C_Slave_AF+0x76>
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b28      	cmp	r3, #40	@ 0x28
 80034ba:	d126      	bne.n	800350a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a2e      	ldr	r2, [pc, #184]	@ (8003578 <I2C_Slave_AF+0xe4>)
 80034c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034d0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034da:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fe ffc1 	bl	800248a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003508:	e031      	b.n	800356e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	2b21      	cmp	r3, #33	@ 0x21
 800350e:	d129      	bne.n	8003564 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a19      	ldr	r2, [pc, #100]	@ (8003578 <I2C_Slave_AF+0xe4>)
 8003514:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2221      	movs	r2, #33	@ 0x21
 800351a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800353a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003544:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003554:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fe faa4 	bl	8001aa4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7fe ff75 	bl	800244c <HAL_I2C_SlaveTxCpltCallback>
}
 8003562:	e004      	b.n	800356e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800356c:	615a      	str	r2, [r3, #20]
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	ffff0000 	.word	0xffff0000

0800357c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800358a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003592:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003594:	7bbb      	ldrb	r3, [r7, #14]
 8003596:	2b10      	cmp	r3, #16
 8003598:	d002      	beq.n	80035a0 <I2C_ITError+0x24>
 800359a:	7bbb      	ldrb	r3, [r7, #14]
 800359c:	2b40      	cmp	r3, #64	@ 0x40
 800359e:	d10a      	bne.n	80035b6 <I2C_ITError+0x3a>
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b22      	cmp	r3, #34	@ 0x22
 80035a4:	d107      	bne.n	80035b6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035b4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035bc:	2b28      	cmp	r3, #40	@ 0x28
 80035be:	d107      	bne.n	80035d0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2228      	movs	r2, #40	@ 0x28
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80035ce:	e015      	b.n	80035fc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035de:	d00a      	beq.n	80035f6 <I2C_ITError+0x7a>
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b60      	cmp	r3, #96	@ 0x60
 80035e4:	d007      	beq.n	80035f6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003606:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800360a:	d162      	bne.n	80036d2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800361a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003620:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b01      	cmp	r3, #1
 8003628:	d020      	beq.n	800366c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362e:	4a6a      	ldr	r2, [pc, #424]	@ (80037d8 <I2C_ITError+0x25c>)
 8003630:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd fd9c 	bl	8001174 <HAL_DMA_Abort_IT>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8089 	beq.w	8003756 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003666:	4610      	mov	r0, r2
 8003668:	4798      	blx	r3
 800366a:	e074      	b.n	8003756 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003670:	4a59      	ldr	r2, [pc, #356]	@ (80037d8 <I2C_ITError+0x25c>)
 8003672:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003678:	4618      	mov	r0, r3
 800367a:	f7fd fd7b 	bl	8001174 <HAL_DMA_Abort_IT>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d068      	beq.n	8003756 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800368e:	2b40      	cmp	r3, #64	@ 0x40
 8003690:	d10b      	bne.n	80036aa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036cc:	4610      	mov	r0, r2
 80036ce:	4798      	blx	r3
 80036d0:	e041      	b.n	8003756 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b60      	cmp	r3, #96	@ 0x60
 80036dc:	d125      	bne.n	800372a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f6:	2b40      	cmp	r3, #64	@ 0x40
 80036f8:	d10b      	bne.n	8003712 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe fecc 	bl	80024c0 <HAL_I2C_AbortCpltCallback>
 8003728:	e015      	b.n	8003756 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003734:	2b40      	cmp	r3, #64	@ 0x40
 8003736:	d10b      	bne.n	8003750 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7fe feac 	bl	80024ae <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10e      	bne.n	8003784 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800376c:	2b00      	cmp	r3, #0
 800376e:	d109      	bne.n	8003784 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003776:	2b00      	cmp	r3, #0
 8003778:	d104      	bne.n	8003784 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003792:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800379a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d113      	bne.n	80037d0 <I2C_ITError+0x254>
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b28      	cmp	r3, #40	@ 0x28
 80037ac:	d110      	bne.n	80037d0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a0a      	ldr	r2, [pc, #40]	@ (80037dc <I2C_ITError+0x260>)
 80037b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fe fe5d 	bl	800248a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	08003bdd 	.word	0x08003bdd
 80037dc:	ffff0000 	.word	0xffff0000

080037e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	4608      	mov	r0, r1
 80037ea:	4611      	mov	r1, r2
 80037ec:	461a      	mov	r2, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	817b      	strh	r3, [r7, #10]
 80037f2:	460b      	mov	r3, r1
 80037f4:	813b      	strh	r3, [r7, #8]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003808:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003818:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	2200      	movs	r2, #0
 8003822:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fa80 	bl	8003d2c <I2C_WaitOnFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00d      	beq.n	800384e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003840:	d103      	bne.n	800384a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003848:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e0aa      	b.n	80039a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800384e:	897b      	ldrh	r3, [r7, #10]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800385c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	6a3a      	ldr	r2, [r7, #32]
 8003862:	4952      	ldr	r1, [pc, #328]	@ (80039ac <I2C_RequestMemoryRead+0x1cc>)
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fadb 	bl	8003e20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e097      	b.n	80039a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800388a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388c:	6a39      	ldr	r1, [r7, #32]
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 fb66 	bl	8003f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00d      	beq.n	80038b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d107      	bne.n	80038b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e076      	b.n	80039a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d105      	bne.n	80038c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038bc:	893b      	ldrh	r3, [r7, #8]
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	611a      	str	r2, [r3, #16]
 80038c6:	e021      	b.n	800390c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038c8:	893b      	ldrh	r3, [r7, #8]
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d8:	6a39      	ldr	r1, [r7, #32]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 fb40 	bl	8003f60 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00d      	beq.n	8003902 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d107      	bne.n	80038fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e050      	b.n	80039a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003902:	893b      	ldrh	r3, [r7, #8]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800390c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390e:	6a39      	ldr	r1, [r7, #32]
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fb25 	bl	8003f60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00d      	beq.n	8003938 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	2b04      	cmp	r3, #4
 8003922:	d107      	bne.n	8003934 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003932:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e035      	b.n	80039a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003946:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	2200      	movs	r2, #0
 8003950:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f9e9 	bl	8003d2c <I2C_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800396e:	d103      	bne.n	8003978 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003976:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e013      	b.n	80039a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800397c:	897b      	ldrh	r3, [r7, #10]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	b2da      	uxtb	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	6a3a      	ldr	r2, [r7, #32]
 8003990:	4906      	ldr	r1, [pc, #24]	@ (80039ac <I2C_RequestMemoryRead+0x1cc>)
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fa44 	bl	8003e20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	00010002 	.word	0x00010002

080039b0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039c4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039cc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80039e2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f0:	2200      	movs	r2, #0
 80039f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a00:	2200      	movs	r2, #0
 8003a02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003a0a:	2b21      	cmp	r3, #33	@ 0x21
 8003a0c:	d007      	beq.n	8003a1e <I2C_DMAXferCplt+0x6e>
 8003a0e:	7cfb      	ldrb	r3, [r7, #19]
 8003a10:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003a14:	2b22      	cmp	r3, #34	@ 0x22
 8003a16:	d131      	bne.n	8003a7c <I2C_DMAXferCplt+0xcc>
 8003a18:	7cbb      	ldrb	r3, [r7, #18]
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d12e      	bne.n	8003a7c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a2c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2200      	movs	r2, #0
 8003a32:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a34:	7cfb      	ldrb	r3, [r7, #19]
 8003a36:	2b29      	cmp	r3, #41	@ 0x29
 8003a38:	d10a      	bne.n	8003a50 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2221      	movs	r2, #33	@ 0x21
 8003a3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2228      	movs	r2, #40	@ 0x28
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a48:	6978      	ldr	r0, [r7, #20]
 8003a4a:	f7fe fcff 	bl	800244c <HAL_I2C_SlaveTxCpltCallback>
 8003a4e:	e00c      	b.n	8003a6a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a54:	d109      	bne.n	8003a6a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2222      	movs	r2, #34	@ 0x22
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2228      	movs	r2, #40	@ 0x28
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a64:	6978      	ldr	r0, [r7, #20]
 8003a66:	f7fe fcfa 	bl	800245e <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003a78:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003a7a:	e074      	b.n	8003b66 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d06e      	beq.n	8003b66 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d107      	bne.n	8003aa2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aa0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003ab0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ab8:	d009      	beq.n	8003ace <I2C_DMAXferCplt+0x11e>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d006      	beq.n	8003ace <I2C_DMAXferCplt+0x11e>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003ac6:	d002      	beq.n	8003ace <I2C_DMAXferCplt+0x11e>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d107      	bne.n	8003ade <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003adc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003aec:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003afc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2200      	movs	r2, #0
 8003b02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003b0c:	6978      	ldr	r0, [r7, #20]
 8003b0e:	f7fe fcce 	bl	80024ae <HAL_I2C_ErrorCallback>
}
 8003b12:	e028      	b.n	8003b66 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b40      	cmp	r3, #64	@ 0x40
 8003b26:	d10a      	bne.n	8003b3e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2200      	movs	r2, #0
 8003b34:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003b36:	6978      	ldr	r0, [r7, #20]
 8003b38:	f7fc fb90 	bl	800025c <HAL_I2C_MemRxCpltCallback>
}
 8003b3c:	e013      	b.n	8003b66 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d002      	beq.n	8003b52 <I2C_DMAXferCplt+0x1a2>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d103      	bne.n	8003b5a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b58:	e002      	b.n	8003b60 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2212      	movs	r2, #18
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b60:	6978      	ldr	r0, [r7, #20]
 8003b62:	f7fe fc6a 	bl	800243a <HAL_I2C_MasterRxCpltCallback>
}
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b88:	2200      	movs	r2, #0
 8003b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b98:	2200      	movs	r2, #0
 8003b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003baa:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	f043 0210 	orr.w	r2, r3, #16
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f7fe fc6d 	bl	80024ae <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bf6:	4b4b      	ldr	r3, [pc, #300]	@ (8003d24 <I2C_DMAAbort+0x148>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	08db      	lsrs	r3, r3, #3
 8003bfc:	4a4a      	ldr	r2, [pc, #296]	@ (8003d28 <I2C_DMAAbort+0x14c>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	0a1a      	lsrs	r2, r3, #8
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	00da      	lsls	r2, r3, #3
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	f043 0220 	orr.w	r2, r3, #32
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003c22:	e00a      	b.n	8003c3a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c38:	d0ea      	beq.n	8003c10 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c46:	2200      	movs	r2, #0
 8003c48:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c56:	2200      	movs	r2, #0
 8003c58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c68:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0201 	bic.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b60      	cmp	r3, #96	@ 0x60
 8003caa:	d10e      	bne.n	8003cca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7fe fbfc 	bl	80024c0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cc8:	e027      	b.n	8003d1a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cca:	7cfb      	ldrb	r3, [r7, #19]
 8003ccc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003cd0:	2b28      	cmp	r3, #40	@ 0x28
 8003cd2:	d117      	bne.n	8003d04 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cf2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2228      	movs	r2, #40	@ 0x28
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003d02:	e007      	b.n	8003d14 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003d14:	6978      	ldr	r0, [r7, #20]
 8003d16:	f7fe fbca 	bl	80024ae <HAL_I2C_ErrorCallback>
}
 8003d1a:	bf00      	nop
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20000000 	.word	0x20000000
 8003d28:	14f8b589 	.word	0x14f8b589

08003d2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d3c:	e048      	b.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d044      	beq.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d46:	f7fd f811 	bl	8000d6c <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d302      	bcc.n	8003d5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d139      	bne.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	0c1b      	lsrs	r3, r3, #16
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d10d      	bne.n	8003d82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4013      	ands	r3, r2
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	e00c      	b.n	8003d9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	43da      	mvns	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d116      	bne.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbc:	f043 0220 	orr.w	r2, r3, #32
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e023      	b.n	8003e18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	0c1b      	lsrs	r3, r3, #16
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d10d      	bne.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	43da      	mvns	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4013      	ands	r3, r2
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	e00c      	b.n	8003e10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	43da      	mvns	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	4013      	ands	r3, r2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d093      	beq.n	8003d3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e2e:	e071      	b.n	8003f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e3e:	d123      	bne.n	8003e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	f043 0204 	orr.w	r2, r3, #4
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e067      	b.n	8003f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8e:	d041      	beq.n	8003f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e90:	f7fc ff6c 	bl	8000d6c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d302      	bcc.n	8003ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d136      	bne.n	8003f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	0c1b      	lsrs	r3, r3, #16
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d10c      	bne.n	8003eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	bf14      	ite	ne
 8003ec2:	2301      	movne	r3, #1
 8003ec4:	2300      	moveq	r3, #0
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	e00b      	b.n	8003ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	43da      	mvns	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf14      	ite	ne
 8003edc:	2301      	movne	r3, #1
 8003ede:	2300      	moveq	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d016      	beq.n	8003f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e021      	b.n	8003f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	0c1b      	lsrs	r3, r3, #16
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d10c      	bne.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	43da      	mvns	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e00b      	b.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4013      	ands	r3, r2
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bf14      	ite	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f47f af6d 	bne.w	8003e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f6c:	e034      	b.n	8003fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f870 	bl	8004054 <I2C_IsAcknowledgeFailed>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e034      	b.n	8003fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d028      	beq.n	8003fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f86:	f7fc fef1 	bl	8000d6c <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d11d      	bne.n	8003fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	2b80      	cmp	r3, #128	@ 0x80
 8003fa8:	d016      	beq.n	8003fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e007      	b.n	8003fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe2:	2b80      	cmp	r3, #128	@ 0x80
 8003fe4:	d1c3      	bne.n	8003f6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ffc:	4b13      	ldr	r3, [pc, #76]	@ (800404c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	08db      	lsrs	r3, r3, #3
 8004002:	4a13      	ldr	r2, [pc, #76]	@ (8004050 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004004:	fba2 2303 	umull	r2, r3, r2, r3
 8004008:	0a1a      	lsrs	r2, r3, #8
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3b01      	subs	r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d107      	bne.n	800402e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e008      	b.n	8004040 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800403c:	d0e9      	beq.n	8004012 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000000 	.word	0x20000000
 8004050:	14f8b589 	.word	0x14f8b589

08004054 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406a:	d11b      	bne.n	80040a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004074:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004090:	f043 0204 	orr.w	r2, r3, #4
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr

080040b0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040bc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80040c0:	d103      	bne.n	80040ca <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80040c8:	e007      	b.n	80040da <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80040d2:	d102      	bne.n	80040da <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2208      	movs	r2, #8
 80040d8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e272      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 8087 	beq.w	8004212 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004104:	4b92      	ldr	r3, [pc, #584]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 030c 	and.w	r3, r3, #12
 800410c:	2b04      	cmp	r3, #4
 800410e:	d00c      	beq.n	800412a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004110:	4b8f      	ldr	r3, [pc, #572]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 030c 	and.w	r3, r3, #12
 8004118:	2b08      	cmp	r3, #8
 800411a:	d112      	bne.n	8004142 <HAL_RCC_OscConfig+0x5e>
 800411c:	4b8c      	ldr	r3, [pc, #560]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004128:	d10b      	bne.n	8004142 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412a:	4b89      	ldr	r3, [pc, #548]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d06c      	beq.n	8004210 <HAL_RCC_OscConfig+0x12c>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d168      	bne.n	8004210 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e24c      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800414a:	d106      	bne.n	800415a <HAL_RCC_OscConfig+0x76>
 800414c:	4b80      	ldr	r3, [pc, #512]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a7f      	ldr	r2, [pc, #508]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 8004152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	e02e      	b.n	80041b8 <HAL_RCC_OscConfig+0xd4>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10c      	bne.n	800417c <HAL_RCC_OscConfig+0x98>
 8004162:	4b7b      	ldr	r3, [pc, #492]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a7a      	ldr	r2, [pc, #488]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 8004168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	4b78      	ldr	r3, [pc, #480]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a77      	ldr	r2, [pc, #476]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 8004174:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	e01d      	b.n	80041b8 <HAL_RCC_OscConfig+0xd4>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004184:	d10c      	bne.n	80041a0 <HAL_RCC_OscConfig+0xbc>
 8004186:	4b72      	ldr	r3, [pc, #456]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a71      	ldr	r2, [pc, #452]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 800418c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	4b6f      	ldr	r3, [pc, #444]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a6e      	ldr	r2, [pc, #440]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e00b      	b.n	80041b8 <HAL_RCC_OscConfig+0xd4>
 80041a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 80041a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	4b68      	ldr	r3, [pc, #416]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a67      	ldr	r2, [pc, #412]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 80041b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d013      	beq.n	80041e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c0:	f7fc fdd4 	bl	8000d6c <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c8:	f7fc fdd0 	bl	8000d6c <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	@ 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e200      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	4b5d      	ldr	r3, [pc, #372]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0xe4>
 80041e6:	e014      	b.n	8004212 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7fc fdc0 	bl	8000d6c <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f0:	f7fc fdbc 	bl	8000d6c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b64      	cmp	r3, #100	@ 0x64
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e1ec      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004202:	4b53      	ldr	r3, [pc, #332]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x10c>
 800420e:	e000      	b.n	8004212 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d063      	beq.n	80042e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800421e:	4b4c      	ldr	r3, [pc, #304]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f003 030c 	and.w	r3, r3, #12
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00b      	beq.n	8004242 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800422a:	4b49      	ldr	r3, [pc, #292]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b08      	cmp	r3, #8
 8004234:	d11c      	bne.n	8004270 <HAL_RCC_OscConfig+0x18c>
 8004236:	4b46      	ldr	r3, [pc, #280]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d116      	bne.n	8004270 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004242:	4b43      	ldr	r3, [pc, #268]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_RCC_OscConfig+0x176>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d001      	beq.n	800425a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e1c0      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425a:	4b3d      	ldr	r3, [pc, #244]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4939      	ldr	r1, [pc, #228]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426e:	e03a      	b.n	80042e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d020      	beq.n	80042ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004278:	4b36      	ldr	r3, [pc, #216]	@ (8004354 <HAL_RCC_OscConfig+0x270>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427e:	f7fc fd75 	bl	8000d6c <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004286:	f7fc fd71 	bl	8000d6c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e1a1      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004298:	4b2d      	ldr	r3, [pc, #180]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4927      	ldr	r1, [pc, #156]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	600b      	str	r3, [r1, #0]
 80042b8:	e015      	b.n	80042e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ba:	4b26      	ldr	r3, [pc, #152]	@ (8004354 <HAL_RCC_OscConfig+0x270>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fc fd54 	bl	8000d6c <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c8:	f7fc fd50 	bl	8000d6c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e180      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042da:	4b1d      	ldr	r3, [pc, #116]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d03a      	beq.n	8004368 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d019      	beq.n	800432e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042fa:	4b17      	ldr	r3, [pc, #92]	@ (8004358 <HAL_RCC_OscConfig+0x274>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004300:	f7fc fd34 	bl	8000d6c <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004308:	f7fc fd30 	bl	8000d6c <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e160      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431a:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <HAL_RCC_OscConfig+0x26c>)
 800431c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004326:	2001      	movs	r0, #1
 8004328:	f000 fafe 	bl	8004928 <RCC_Delay>
 800432c:	e01c      	b.n	8004368 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800432e:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <HAL_RCC_OscConfig+0x274>)
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004334:	f7fc fd1a 	bl	8000d6c <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800433a:	e00f      	b.n	800435c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800433c:	f7fc fd16 	bl	8000d6c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d908      	bls.n	800435c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e146      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000
 8004354:	42420000 	.word	0x42420000
 8004358:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800435c:	4b92      	ldr	r3, [pc, #584]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e9      	bne.n	800433c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80a6 	beq.w	80044c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004376:	2300      	movs	r3, #0
 8004378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800437a:	4b8b      	ldr	r3, [pc, #556]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10d      	bne.n	80043a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004386:	4b88      	ldr	r3, [pc, #544]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	4a87      	ldr	r2, [pc, #540]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 800438c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004390:	61d3      	str	r3, [r2, #28]
 8004392:	4b85      	ldr	r3, [pc, #532]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800439e:	2301      	movs	r3, #1
 80043a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a2:	4b82      	ldr	r3, [pc, #520]	@ (80045ac <HAL_RCC_OscConfig+0x4c8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d118      	bne.n	80043e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ae:	4b7f      	ldr	r3, [pc, #508]	@ (80045ac <HAL_RCC_OscConfig+0x4c8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a7e      	ldr	r2, [pc, #504]	@ (80045ac <HAL_RCC_OscConfig+0x4c8>)
 80043b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ba:	f7fc fcd7 	bl	8000d6c <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c2:	f7fc fcd3 	bl	8000d6c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b64      	cmp	r3, #100	@ 0x64
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e103      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d4:	4b75      	ldr	r3, [pc, #468]	@ (80045ac <HAL_RCC_OscConfig+0x4c8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d106      	bne.n	80043f6 <HAL_RCC_OscConfig+0x312>
 80043e8:	4b6f      	ldr	r3, [pc, #444]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	4a6e      	ldr	r2, [pc, #440]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	6213      	str	r3, [r2, #32]
 80043f4:	e02d      	b.n	8004452 <HAL_RCC_OscConfig+0x36e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10c      	bne.n	8004418 <HAL_RCC_OscConfig+0x334>
 80043fe:	4b6a      	ldr	r3, [pc, #424]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	4a69      	ldr	r2, [pc, #420]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	6213      	str	r3, [r2, #32]
 800440a:	4b67      	ldr	r3, [pc, #412]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	4a66      	ldr	r2, [pc, #408]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004410:	f023 0304 	bic.w	r3, r3, #4
 8004414:	6213      	str	r3, [r2, #32]
 8004416:	e01c      	b.n	8004452 <HAL_RCC_OscConfig+0x36e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b05      	cmp	r3, #5
 800441e:	d10c      	bne.n	800443a <HAL_RCC_OscConfig+0x356>
 8004420:	4b61      	ldr	r3, [pc, #388]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	4a60      	ldr	r2, [pc, #384]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004426:	f043 0304 	orr.w	r3, r3, #4
 800442a:	6213      	str	r3, [r2, #32]
 800442c:	4b5e      	ldr	r3, [pc, #376]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	4a5d      	ldr	r2, [pc, #372]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	6213      	str	r3, [r2, #32]
 8004438:	e00b      	b.n	8004452 <HAL_RCC_OscConfig+0x36e>
 800443a:	4b5b      	ldr	r3, [pc, #364]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	4a5a      	ldr	r2, [pc, #360]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004440:	f023 0301 	bic.w	r3, r3, #1
 8004444:	6213      	str	r3, [r2, #32]
 8004446:	4b58      	ldr	r3, [pc, #352]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	4a57      	ldr	r2, [pc, #348]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 800444c:	f023 0304 	bic.w	r3, r3, #4
 8004450:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d015      	beq.n	8004486 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800445a:	f7fc fc87 	bl	8000d6c <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004460:	e00a      	b.n	8004478 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004462:	f7fc fc83 	bl	8000d6c <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004470:	4293      	cmp	r3, r2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e0b1      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004478:	4b4b      	ldr	r3, [pc, #300]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ee      	beq.n	8004462 <HAL_RCC_OscConfig+0x37e>
 8004484:	e014      	b.n	80044b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004486:	f7fc fc71 	bl	8000d6c <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800448c:	e00a      	b.n	80044a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448e:	f7fc fc6d 	bl	8000d6c <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800449c:	4293      	cmp	r3, r2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e09b      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a4:	4b40      	ldr	r3, [pc, #256]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1ee      	bne.n	800448e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d105      	bne.n	80044c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b6:	4b3c      	ldr	r3, [pc, #240]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	4a3b      	ldr	r2, [pc, #236]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8087 	beq.w	80045da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044cc:	4b36      	ldr	r3, [pc, #216]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 030c 	and.w	r3, r3, #12
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d061      	beq.n	800459c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d146      	bne.n	800456e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e0:	4b33      	ldr	r3, [pc, #204]	@ (80045b0 <HAL_RCC_OscConfig+0x4cc>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e6:	f7fc fc41 	bl	8000d6c <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ee:	f7fc fc3d 	bl	8000d6c <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e06d      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004500:	4b29      	ldr	r3, [pc, #164]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f0      	bne.n	80044ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004514:	d108      	bne.n	8004528 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004516:	4b24      	ldr	r3, [pc, #144]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	4921      	ldr	r1, [pc, #132]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004524:	4313      	orrs	r3, r2
 8004526:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004528:	4b1f      	ldr	r3, [pc, #124]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a19      	ldr	r1, [r3, #32]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	430b      	orrs	r3, r1
 800453a:	491b      	ldr	r1, [pc, #108]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 800453c:	4313      	orrs	r3, r2
 800453e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004540:	4b1b      	ldr	r3, [pc, #108]	@ (80045b0 <HAL_RCC_OscConfig+0x4cc>)
 8004542:	2201      	movs	r2, #1
 8004544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004546:	f7fc fc11 	bl	8000d6c <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454e:	f7fc fc0d 	bl	8000d6c <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e03d      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004560:	4b11      	ldr	r3, [pc, #68]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f0      	beq.n	800454e <HAL_RCC_OscConfig+0x46a>
 800456c:	e035      	b.n	80045da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800456e:	4b10      	ldr	r3, [pc, #64]	@ (80045b0 <HAL_RCC_OscConfig+0x4cc>)
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004574:	f7fc fbfa 	bl	8000d6c <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457c:	f7fc fbf6 	bl	8000d6c <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e026      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800458e:	4b06      	ldr	r3, [pc, #24]	@ (80045a8 <HAL_RCC_OscConfig+0x4c4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x498>
 800459a:	e01e      	b.n	80045da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d107      	bne.n	80045b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e019      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
 80045a8:	40021000 	.word	0x40021000
 80045ac:	40007000 	.word	0x40007000
 80045b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045b4:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <HAL_RCC_OscConfig+0x500>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d106      	bne.n	80045d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d001      	beq.n	80045da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40021000 	.word	0x40021000

080045e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0d0      	b.n	800479e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045fc:	4b6a      	ldr	r3, [pc, #424]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d910      	bls.n	800462c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b67      	ldr	r3, [pc, #412]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 0207 	bic.w	r2, r3, #7
 8004612:	4965      	ldr	r1, [pc, #404]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b63      	ldr	r3, [pc, #396]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0b8      	b.n	800479e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d020      	beq.n	800467a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004644:	4b59      	ldr	r3, [pc, #356]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	4a58      	ldr	r2, [pc, #352]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 800464a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800464e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800465c:	4b53      	ldr	r3, [pc, #332]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	4a52      	ldr	r2, [pc, #328]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 8004662:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004666:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004668:	4b50      	ldr	r3, [pc, #320]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	494d      	ldr	r1, [pc, #308]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 8004676:	4313      	orrs	r3, r2
 8004678:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d040      	beq.n	8004708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d107      	bne.n	800469e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468e:	4b47      	ldr	r3, [pc, #284]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d115      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e07f      	b.n	800479e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d107      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a6:	4b41      	ldr	r3, [pc, #260]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e073      	b.n	800479e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b6:	4b3d      	ldr	r3, [pc, #244]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e06b      	b.n	800479e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046c6:	4b39      	ldr	r3, [pc, #228]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f023 0203 	bic.w	r2, r3, #3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	4936      	ldr	r1, [pc, #216]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046d8:	f7fc fb48 	bl	8000d6c <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046de:	e00a      	b.n	80046f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e0:	f7fc fb44 	bl	8000d6c <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e053      	b.n	800479e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f6:	4b2d      	ldr	r3, [pc, #180]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 020c 	and.w	r2, r3, #12
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	429a      	cmp	r2, r3
 8004706:	d1eb      	bne.n	80046e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004708:	4b27      	ldr	r3, [pc, #156]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d210      	bcs.n	8004738 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b24      	ldr	r3, [pc, #144]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 0207 	bic.w	r2, r3, #7
 800471e:	4922      	ldr	r1, [pc, #136]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	4313      	orrs	r3, r2
 8004724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b20      	ldr	r3, [pc, #128]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e032      	b.n	800479e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004744:	4b19      	ldr	r3, [pc, #100]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4916      	ldr	r1, [pc, #88]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 8004752:	4313      	orrs	r3, r2
 8004754:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004762:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	490e      	ldr	r1, [pc, #56]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 8004772:	4313      	orrs	r3, r2
 8004774:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004776:	f000 f821 	bl	80047bc <HAL_RCC_GetSysClockFreq>
 800477a:	4602      	mov	r2, r0
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_RCC_ClockConfig+0x1c4>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	490a      	ldr	r1, [pc, #40]	@ (80047b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004788:	5ccb      	ldrb	r3, [r1, r3]
 800478a:	fa22 f303 	lsr.w	r3, r2, r3
 800478e:	4a09      	ldr	r2, [pc, #36]	@ (80047b4 <HAL_RCC_ClockConfig+0x1cc>)
 8004790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004792:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7fc f9b8 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40022000 	.word	0x40022000
 80047ac:	40021000 	.word	0x40021000
 80047b0:	08007ec8 	.word	0x08007ec8
 80047b4:	20000000 	.word	0x20000000
 80047b8:	20000004 	.word	0x20000004

080047bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	2300      	movs	r3, #0
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	2300      	movs	r3, #0
 80047d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x94>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d002      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0x30>
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d003      	beq.n	80047f2 <HAL_RCC_GetSysClockFreq+0x36>
 80047ea:	e027      	b.n	800483c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047ec:	4b19      	ldr	r3, [pc, #100]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x98>)
 80047ee:	613b      	str	r3, [r7, #16]
      break;
 80047f0:	e027      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	0c9b      	lsrs	r3, r3, #18
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	4a17      	ldr	r2, [pc, #92]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x9c>)
 80047fc:	5cd3      	ldrb	r3, [r2, r3]
 80047fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d010      	beq.n	800482c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800480a:	4b11      	ldr	r3, [pc, #68]	@ (8004850 <HAL_RCC_GetSysClockFreq+0x94>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	0c5b      	lsrs	r3, r3, #17
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	4a11      	ldr	r2, [pc, #68]	@ (800485c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004816:	5cd3      	ldrb	r3, [r2, r3]
 8004818:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a0d      	ldr	r2, [pc, #52]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x98>)
 800481e:	fb03 f202 	mul.w	r2, r3, r2
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	fbb2 f3f3 	udiv	r3, r2, r3
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	e004      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a0c      	ldr	r2, [pc, #48]	@ (8004860 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004830:	fb02 f303 	mul.w	r3, r2, r3
 8004834:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	613b      	str	r3, [r7, #16]
      break;
 800483a:	e002      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800483c:	4b05      	ldr	r3, [pc, #20]	@ (8004854 <HAL_RCC_GetSysClockFreq+0x98>)
 800483e:	613b      	str	r3, [r7, #16]
      break;
 8004840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004842:	693b      	ldr	r3, [r7, #16]
}
 8004844:	4618      	mov	r0, r3
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000
 8004854:	007a1200 	.word	0x007a1200
 8004858:	08007ee0 	.word	0x08007ee0
 800485c:	08007ef0 	.word	0x08007ef0
 8004860:	003d0900 	.word	0x003d0900

08004864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004868:	4b02      	ldr	r3, [pc, #8]	@ (8004874 <HAL_RCC_GetHCLKFreq+0x10>)
 800486a:	681b      	ldr	r3, [r3, #0]
}
 800486c:	4618      	mov	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr
 8004874:	20000000 	.word	0x20000000

08004878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800487c:	f7ff fff2 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 8004880:	4602      	mov	r2, r0
 8004882:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	0a1b      	lsrs	r3, r3, #8
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	4903      	ldr	r1, [pc, #12]	@ (800489c <HAL_RCC_GetPCLK1Freq+0x24>)
 800488e:	5ccb      	ldrb	r3, [r1, r3]
 8004890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004894:	4618      	mov	r0, r3
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40021000 	.word	0x40021000
 800489c:	08007ed8 	.word	0x08007ed8

080048a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048a4:	f7ff ffde 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 80048a8:	4602      	mov	r2, r0
 80048aa:	4b05      	ldr	r3, [pc, #20]	@ (80048c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	0adb      	lsrs	r3, r3, #11
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	4903      	ldr	r1, [pc, #12]	@ (80048c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b6:	5ccb      	ldrb	r3, [r1, r3]
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40021000 	.word	0x40021000
 80048c4:	08007ed8 	.word	0x08007ed8

080048c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	220f      	movs	r2, #15
 80048d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048d8:	4b11      	ldr	r3, [pc, #68]	@ (8004920 <HAL_RCC_GetClockConfig+0x58>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 0203 	and.w	r2, r3, #3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004920 <HAL_RCC_GetClockConfig+0x58>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004920 <HAL_RCC_GetClockConfig+0x58>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80048fc:	4b08      	ldr	r3, [pc, #32]	@ (8004920 <HAL_RCC_GetClockConfig+0x58>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	08db      	lsrs	r3, r3, #3
 8004902:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800490a:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <HAL_RCC_GetClockConfig+0x5c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0207 	and.w	r2, r3, #7
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr
 8004920:	40021000 	.word	0x40021000
 8004924:	40022000 	.word	0x40022000

08004928 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004930:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <RCC_Delay+0x34>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a0a      	ldr	r2, [pc, #40]	@ (8004960 <RCC_Delay+0x38>)
 8004936:	fba2 2303 	umull	r2, r3, r2, r3
 800493a:	0a5b      	lsrs	r3, r3, #9
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	fb02 f303 	mul.w	r3, r2, r3
 8004942:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004944:	bf00      	nop
  }
  while (Delay --);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1e5a      	subs	r2, r3, #1
 800494a:	60fa      	str	r2, [r7, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f9      	bne.n	8004944 <RCC_Delay+0x1c>
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr
 800495c:	20000000 	.word	0x20000000
 8004960:	10624dd3 	.word	0x10624dd3

08004964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e041      	b.n	80049fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f839 	bl	8004a02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3304      	adds	r3, #4
 80049a0:	4619      	mov	r1, r3
 80049a2:	4610      	mov	r0, r2
 80049a4:	f000 fb58 	bl	8005058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d001      	beq.n	8004a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e03a      	b.n	8004aa2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a18      	ldr	r2, [pc, #96]	@ (8004aac <HAL_TIM_Base_Start_IT+0x98>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00e      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x58>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a56:	d009      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x58>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a14      	ldr	r2, [pc, #80]	@ (8004ab0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x58>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a13      	ldr	r2, [pc, #76]	@ (8004ab4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d111      	bne.n	8004a90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d010      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0201 	orr.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8e:	e007      	b.n	8004aa0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40000800 	.word	0x40000800

08004ab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e041      	b.n	8004b4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fb ff78 	bl	80009d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3304      	adds	r3, #4
 8004af4:	4619      	mov	r1, r3
 8004af6:	4610      	mov	r0, r2
 8004af8:	f000 faae 	bl	8005058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b0c      	cmp	r3, #12
 8004b6a:	d841      	bhi.n	8004bf0 <HAL_TIM_PWM_Stop_IT+0x98>
 8004b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b74 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004ba9 	.word	0x08004ba9
 8004b78:	08004bf1 	.word	0x08004bf1
 8004b7c:	08004bf1 	.word	0x08004bf1
 8004b80:	08004bf1 	.word	0x08004bf1
 8004b84:	08004bbb 	.word	0x08004bbb
 8004b88:	08004bf1 	.word	0x08004bf1
 8004b8c:	08004bf1 	.word	0x08004bf1
 8004b90:	08004bf1 	.word	0x08004bf1
 8004b94:	08004bcd 	.word	0x08004bcd
 8004b98:	08004bf1 	.word	0x08004bf1
 8004b9c:	08004bf1 	.word	0x08004bf1
 8004ba0:	08004bf1 	.word	0x08004bf1
 8004ba4:	08004bdf 	.word	0x08004bdf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0202 	bic.w	r2, r2, #2
 8004bb6:	60da      	str	r2, [r3, #12]
      break;
 8004bb8:	e01d      	b.n	8004bf6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0204 	bic.w	r2, r2, #4
 8004bc8:	60da      	str	r2, [r3, #12]
      break;
 8004bca:	e014      	b.n	8004bf6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0208 	bic.w	r2, r2, #8
 8004bda:	60da      	str	r2, [r3, #12]
      break;
 8004bdc:	e00b      	b.n	8004bf6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0210 	bic.w	r2, r2, #16
 8004bec:	60da      	str	r2, [r3, #12]
      break;
 8004bee:	e002      	b.n	8004bf6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf4:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d157      	bne.n	8004cac <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2200      	movs	r2, #0
 8004c02:	6839      	ldr	r1, [r7, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fc1d 	bl	8005444 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8004cb8 <HAL_TIM_PWM_Stop_IT+0x160>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d117      	bne.n	8004c44 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6a1a      	ldr	r2, [r3, #32]
 8004c1a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10f      	bne.n	8004c44 <HAL_TIM_PWM_Stop_IT+0xec>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6a1a      	ldr	r2, [r3, #32]
 8004c2a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d107      	bne.n	8004c44 <HAL_TIM_PWM_Stop_IT+0xec>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c42:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6a1a      	ldr	r2, [r3, #32]
 8004c4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10f      	bne.n	8004c74 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6a1a      	ldr	r2, [r3, #32]
 8004c5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d107      	bne.n	8004c74 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d104      	bne.n	8004c84 <HAL_TIM_PWM_Stop_IT+0x12c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c82:	e013      	b.n	8004cac <HAL_TIM_PWM_Stop_IT+0x154>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d104      	bne.n	8004c94 <HAL_TIM_PWM_Stop_IT+0x13c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c92:	e00b      	b.n	8004cac <HAL_TIM_PWM_Stop_IT+0x154>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d104      	bne.n	8004ca4 <HAL_TIM_PWM_Stop_IT+0x14c>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ca2:	e003      	b.n	8004cac <HAL_TIM_PWM_Stop_IT+0x154>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40012c00 	.word	0x40012c00

08004cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d020      	beq.n	8004d20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01b      	beq.n	8004d20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0202 	mvn.w	r2, #2
 8004cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f993 	bl	8005032 <HAL_TIM_IC_CaptureCallback>
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f986 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f002 fe77 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d020      	beq.n	8004d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01b      	beq.n	8004d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0204 	mvn.w	r2, #4
 8004d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f96d 	bl	8005032 <HAL_TIM_IC_CaptureCallback>
 8004d58:	e005      	b.n	8004d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f960 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f002 fe51 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d020      	beq.n	8004db8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01b      	beq.n	8004db8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0208 	mvn.w	r2, #8
 8004d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f947 	bl	8005032 <HAL_TIM_IC_CaptureCallback>
 8004da4:	e005      	b.n	8004db2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f93a 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f002 fe2b 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d020      	beq.n	8004e04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01b      	beq.n	8004e04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f06f 0210 	mvn.w	r2, #16
 8004dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2208      	movs	r2, #8
 8004dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f921 	bl	8005032 <HAL_TIM_IC_CaptureCallback>
 8004df0:	e005      	b.n	8004dfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f914 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f002 fe05 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00c      	beq.n	8004e28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0201 	mvn.w	r2, #1
 8004e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fb fd0c 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00c      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fb87 	bl	800555a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00c      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f8ea 	bl	8005044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00c      	beq.n	8004e94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d007      	beq.n	8004e94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0220 	mvn.w	r2, #32
 8004e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fb5a 	bl	8005548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e94:	bf00      	nop
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e0ae      	b.n	8005018 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b0c      	cmp	r3, #12
 8004ec6:	f200 809f 	bhi.w	8005008 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004eca:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004f05 	.word	0x08004f05
 8004ed4:	08005009 	.word	0x08005009
 8004ed8:	08005009 	.word	0x08005009
 8004edc:	08005009 	.word	0x08005009
 8004ee0:	08004f45 	.word	0x08004f45
 8004ee4:	08005009 	.word	0x08005009
 8004ee8:	08005009 	.word	0x08005009
 8004eec:	08005009 	.word	0x08005009
 8004ef0:	08004f87 	.word	0x08004f87
 8004ef4:	08005009 	.word	0x08005009
 8004ef8:	08005009 	.word	0x08005009
 8004efc:	08005009 	.word	0x08005009
 8004f00:	08004fc7 	.word	0x08004fc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f912 	bl	8005134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0208 	orr.w	r2, r2, #8
 8004f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0204 	bic.w	r2, r2, #4
 8004f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6999      	ldr	r1, [r3, #24]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	619a      	str	r2, [r3, #24]
      break;
 8004f42:	e064      	b.n	800500e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 f958 	bl	8005200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6999      	ldr	r1, [r3, #24]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	021a      	lsls	r2, r3, #8
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	619a      	str	r2, [r3, #24]
      break;
 8004f84:	e043      	b.n	800500e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 f9a1 	bl	80052d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0208 	orr.w	r2, r2, #8
 8004fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69da      	ldr	r2, [r3, #28]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0204 	bic.w	r2, r2, #4
 8004fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69d9      	ldr	r1, [r3, #28]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	61da      	str	r2, [r3, #28]
      break;
 8004fc4:	e023      	b.n	800500e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 f9eb 	bl	80053a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69d9      	ldr	r1, [r3, #28]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	021a      	lsls	r2, r3, #8
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	61da      	str	r2, [r3, #28]
      break;
 8005006:	e002      	b.n	800500e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	75fb      	strb	r3, [r7, #23]
      break;
 800500c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005016:	7dfb      	ldrb	r3, [r7, #23]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	bc80      	pop	{r7}
 8005030:	4770      	bx	lr

08005032 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr
	...

08005058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a2f      	ldr	r2, [pc, #188]	@ (8005128 <TIM_Base_SetConfig+0xd0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00b      	beq.n	8005088 <TIM_Base_SetConfig+0x30>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005076:	d007      	beq.n	8005088 <TIM_Base_SetConfig+0x30>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a2c      	ldr	r2, [pc, #176]	@ (800512c <TIM_Base_SetConfig+0xd4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_Base_SetConfig+0x30>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a2b      	ldr	r2, [pc, #172]	@ (8005130 <TIM_Base_SetConfig+0xd8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d108      	bne.n	800509a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800508e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a22      	ldr	r2, [pc, #136]	@ (8005128 <TIM_Base_SetConfig+0xd0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00b      	beq.n	80050ba <TIM_Base_SetConfig+0x62>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a8:	d007      	beq.n	80050ba <TIM_Base_SetConfig+0x62>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a1f      	ldr	r2, [pc, #124]	@ (800512c <TIM_Base_SetConfig+0xd4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d003      	beq.n	80050ba <TIM_Base_SetConfig+0x62>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005130 <TIM_Base_SetConfig+0xd8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d108      	bne.n	80050cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005128 <TIM_Base_SetConfig+0xd0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d103      	bne.n	8005100 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f023 0201 	bic.w	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	611a      	str	r2, [r3, #16]
  }
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800

08005134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f023 0201 	bic.w	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0303 	bic.w	r3, r3, #3
 800516a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f023 0302 	bic.w	r3, r3, #2
 800517c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a1c      	ldr	r2, [pc, #112]	@ (80051fc <TIM_OC1_SetConfig+0xc8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d10c      	bne.n	80051aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f023 0308 	bic.w	r3, r3, #8
 8005196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f023 0304 	bic.w	r3, r3, #4
 80051a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a13      	ldr	r2, [pc, #76]	@ (80051fc <TIM_OC1_SetConfig+0xc8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d111      	bne.n	80051d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	621a      	str	r2, [r3, #32]
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	40012c00 	.word	0x40012c00

08005200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f023 0210 	bic.w	r2, r3, #16
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800522e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f023 0320 	bic.w	r3, r3, #32
 800524a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a1d      	ldr	r2, [pc, #116]	@ (80052d0 <TIM_OC2_SetConfig+0xd0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d10d      	bne.n	800527c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800527a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a14      	ldr	r2, [pc, #80]	@ (80052d0 <TIM_OC2_SetConfig+0xd0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d113      	bne.n	80052ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800528a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005292:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr
 80052d0:	40012c00 	.word	0x40012c00

080052d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0303 	bic.w	r3, r3, #3
 800530a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800531c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a1d      	ldr	r2, [pc, #116]	@ (80053a4 <TIM_OC3_SetConfig+0xd0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d10d      	bne.n	800534e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800534c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a14      	ldr	r2, [pc, #80]	@ (80053a4 <TIM_OC3_SetConfig+0xd0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d113      	bne.n	800537e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800535c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	621a      	str	r2, [r3, #32]
}
 8005398:	bf00      	nop
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40012c00 	.word	0x40012c00

080053a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	031b      	lsls	r3, r3, #12
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a0f      	ldr	r2, [pc, #60]	@ (8005440 <TIM_OC4_SetConfig+0x98>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d109      	bne.n	800541c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800540e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	019b      	lsls	r3, r3, #6
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	621a      	str	r2, [r3, #32]
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr
 8005440:	40012c00 	.word	0x40012c00

08005444 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f003 031f 	and.w	r3, r3, #31
 8005456:	2201      	movs	r2, #1
 8005458:	fa02 f303 	lsl.w	r3, r2, r3
 800545c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a1a      	ldr	r2, [r3, #32]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	43db      	mvns	r3, r3
 8005466:	401a      	ands	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a1a      	ldr	r2, [r3, #32]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 031f 	and.w	r3, r3, #31
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	fa01 f303 	lsl.w	r3, r1, r3
 800547c:	431a      	orrs	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	621a      	str	r2, [r3, #32]
}
 8005482:	bf00      	nop
 8005484:	371c      	adds	r7, #28
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr

0800548c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e046      	b.n	8005532 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a16      	ldr	r2, [pc, #88]	@ (800553c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00e      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f0:	d009      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a12      	ldr	r2, [pc, #72]	@ (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d004      	beq.n	8005506 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a10      	ldr	r2, [pc, #64]	@ (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d10c      	bne.n	8005520 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800550c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	4313      	orrs	r3, r2
 8005516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr
 800553c:	40012c00 	.word	0x40012c00
 8005540:	40000400 	.word	0x40000400
 8005544:	40000800 	.word	0x40000800

08005548 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr

0800555a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e04a      	b.n	8005614 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fb fa72 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2224      	movs	r2, #36	@ 0x24
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fef3 	bl	800639c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695a      	ldr	r2, [r3, #20]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80055d4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0208 	orr.w	r2, r2, #8
 80055e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08a      	sub	sp, #40	@ 0x28
 8005620:	af02      	add	r7, sp, #8
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	4613      	mov	r3, r2
 800562a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b20      	cmp	r3, #32
 800563a:	d175      	bne.n	8005728 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_UART_Transmit+0x2c>
 8005642:	88fb      	ldrh	r3, [r7, #6]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e06e      	b.n	800572a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2221      	movs	r2, #33	@ 0x21
 8005656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800565a:	f7fb fb87 	bl	8000d6c <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	88fa      	ldrh	r2, [r7, #6]
 8005664:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	88fa      	ldrh	r2, [r7, #6]
 800566a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005674:	d108      	bne.n	8005688 <HAL_UART_Transmit+0x6c>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	e003      	b.n	8005690 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800568c:	2300      	movs	r3, #0
 800568e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005690:	e02e      	b.n	80056f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2200      	movs	r2, #0
 800569a:	2180      	movs	r1, #128	@ 0x80
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 fc50 	bl	8005f42 <UART_WaitOnFlagUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e03a      	b.n	800572a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10b      	bne.n	80056d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	3302      	adds	r3, #2
 80056ce:	61bb      	str	r3, [r7, #24]
 80056d0:	e007      	b.n	80056e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	3301      	adds	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1cb      	bne.n	8005692 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2200      	movs	r2, #0
 8005702:	2140      	movs	r1, #64	@ 0x40
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 fc1c 	bl	8005f42 <UART_WaitOnFlagUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e006      	b.n	800572a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	e000      	b.n	800572a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005728:	2302      	movs	r3, #2
  }
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b08a      	sub	sp, #40	@ 0x28
 8005736:	af02      	add	r7, sp, #8
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	4613      	mov	r3, r2
 8005740:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b20      	cmp	r3, #32
 8005750:	f040 8081 	bne.w	8005856 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <HAL_UART_Receive+0x2e>
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e079      	b.n	8005858 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2222      	movs	r2, #34	@ 0x22
 800576e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005778:	f7fb faf8 	bl	8000d6c <HAL_GetTick>
 800577c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	88fa      	ldrh	r2, [r7, #6]
 8005782:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005792:	d108      	bne.n	80057a6 <HAL_UART_Receive+0x74>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d104      	bne.n	80057a6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	e003      	b.n	80057ae <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80057ae:	e047      	b.n	8005840 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2200      	movs	r2, #0
 80057b8:	2120      	movs	r1, #32
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 fbc1 	bl	8005f42 <UART_WaitOnFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e042      	b.n	8005858 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10c      	bne.n	80057f2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	3302      	adds	r3, #2
 80057ee:	61bb      	str	r3, [r7, #24]
 80057f0:	e01f      	b.n	8005832 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057fa:	d007      	beq.n	800580c <HAL_UART_Receive+0xda>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <HAL_UART_Receive+0xe8>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	b2da      	uxtb	r2, r3
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	701a      	strb	r2, [r3, #0]
 8005818:	e008      	b.n	800582c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005826:	b2da      	uxtb	r2, r3
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	3301      	adds	r3, #1
 8005830:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1b2      	bne.n	80057b0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	e000      	b.n	8005858 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005856:	2302      	movs	r3, #2
  }
}
 8005858:	4618      	mov	r0, r3
 800585a:	3720      	adds	r7, #32
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08c      	sub	sp, #48	@ 0x30
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	4613      	mov	r3, r2
 800586c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b20      	cmp	r3, #32
 8005878:	d14a      	bne.n	8005910 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005880:	88fb      	ldrh	r3, [r7, #6]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e043      	b.n	8005912 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005896:	88fb      	ldrh	r3, [r7, #6]
 8005898:	461a      	mov	r2, r3
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fba9 	bl	8005ff4 <UART_Start_Receive_IT>
 80058a2:	4603      	mov	r3, r0
 80058a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80058a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d12c      	bne.n	800590a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d125      	bne.n	8005904 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058b8:	2300      	movs	r3, #0
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	330c      	adds	r3, #12
 80058d4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	617b      	str	r3, [r7, #20]
   return(result);
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f043 0310 	orr.w	r3, r3, #16
 80058e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	330c      	adds	r3, #12
 80058ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80058f0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6a39      	ldr	r1, [r7, #32]
 80058f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e5      	bne.n	80058ce <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8005902:	e002      	b.n	800590a <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800590a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800590e:	e000      	b.n	8005912 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005910:	2302      	movs	r3, #2
  }
}
 8005912:	4618      	mov	r0, r3
 8005914:	3730      	adds	r7, #48	@ 0x30
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b0ba      	sub	sp, #232	@ 0xe8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005942:	2300      	movs	r3, #0
 8005944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005948:	2300      	movs	r3, #0
 800594a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800595a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10f      	bne.n	8005982 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <HAL_UART_IRQHandler+0x66>
 800596e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fc50 	bl	8006220 <UART_Receive_IT>
      return;
 8005980:	e25b      	b.n	8005e3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 80de 	beq.w	8005b48 <HAL_UART_IRQHandler+0x22c>
 800598c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d106      	bne.n	80059a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800599c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 80d1 	beq.w	8005b48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00b      	beq.n	80059ca <HAL_UART_IRQHandler+0xae>
 80059b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d005      	beq.n	80059ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c2:	f043 0201 	orr.w	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ce:	f003 0304 	and.w	r3, r3, #4
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00b      	beq.n	80059ee <HAL_UART_IRQHandler+0xd2>
 80059d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e6:	f043 0202 	orr.w	r2, r3, #2
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <HAL_UART_IRQHandler+0xf6>
 80059fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a0a:	f043 0204 	orr.w	r2, r3, #4
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d011      	beq.n	8005a42 <HAL_UART_IRQHandler+0x126>
 8005a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d105      	bne.n	8005a36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3a:	f043 0208 	orr.w	r2, r3, #8
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 81f2 	beq.w	8005e30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a50:	f003 0320 	and.w	r3, r3, #32
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_UART_IRQHandler+0x14e>
 8005a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fbdb 	bl	8006220 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	bf14      	ite	ne
 8005a78:	2301      	movne	r3, #1
 8005a7a:	2300      	moveq	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d103      	bne.n	8005a96 <HAL_UART_IRQHandler+0x17a>
 8005a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d04f      	beq.n	8005b36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fae5 	bl	8006066 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d041      	beq.n	8005b2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3314      	adds	r3, #20
 8005ab0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3314      	adds	r3, #20
 8005ad2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005ad6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ada:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ae2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1d9      	bne.n	8005aaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d013      	beq.n	8005b26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b02:	4a7e      	ldr	r2, [pc, #504]	@ (8005cfc <HAL_UART_IRQHandler+0x3e0>)
 8005b04:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fb fb32 	bl	8001174 <HAL_DMA_Abort_IT>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d016      	beq.n	8005b44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b20:	4610      	mov	r0, r2
 8005b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b24:	e00e      	b.n	8005b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f99c 	bl	8005e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2c:	e00a      	b.n	8005b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f998 	bl	8005e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b34:	e006      	b.n	8005b44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f994 	bl	8005e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005b42:	e175      	b.n	8005e30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b44:	bf00      	nop
    return;
 8005b46:	e173      	b.n	8005e30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	f040 814f 	bne.w	8005df0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8148 	beq.w	8005df0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b64:	f003 0310 	and.w	r3, r3, #16
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 8141 	beq.w	8005df0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60bb      	str	r3, [r7, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	60bb      	str	r3, [r7, #8]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	60bb      	str	r3, [r7, #8]
 8005b82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 80b6 	beq.w	8005d00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ba0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8145 	beq.w	8005e34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	f080 813e 	bcs.w	8005e34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bbe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	f000 8088 	beq.w	8005cdc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	330c      	adds	r3, #12
 8005bd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005be6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005bf8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c04:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c08:	e841 2300 	strex	r3, r2, [r1]
 8005c0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1d9      	bne.n	8005bcc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3314      	adds	r3, #20
 8005c1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c2a:	f023 0301 	bic.w	r3, r3, #1
 8005c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3314      	adds	r3, #20
 8005c38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c3c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c40:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c44:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e1      	bne.n	8005c18 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3314      	adds	r3, #20
 8005c5a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3314      	adds	r3, #20
 8005c74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c78:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e3      	bne.n	8005c54 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	330c      	adds	r3, #12
 8005ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca4:	e853 3f00 	ldrex	r3, [r3]
 8005ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cac:	f023 0310 	bic.w	r3, r3, #16
 8005cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	330c      	adds	r3, #12
 8005cba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005cbe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cc0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e3      	bne.n	8005c9a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fb fa10 	bl	80010fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fa ffd8 	bl	8000ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cf8:	e09c      	b.n	8005e34 <HAL_UART_IRQHandler+0x518>
 8005cfa:	bf00      	nop
 8005cfc:	0800612b 	.word	0x0800612b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 808e 	beq.w	8005e38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8089 	beq.w	8005e38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	330c      	adds	r3, #12
 8005d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005d4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e3      	bne.n	8005d26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3314      	adds	r3, #20
 8005d64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	f023 0301 	bic.w	r3, r3, #1
 8005d74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3314      	adds	r3, #20
 8005d7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d82:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e3      	bne.n	8005d5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0310 	bic.w	r3, r3, #16
 8005dba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005dc8:	61fa      	str	r2, [r7, #28]
 8005dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	69b9      	ldr	r1, [r7, #24]
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e3      	bne.n	8005da4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005de2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7fa ff5d 	bl	8000ca8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dee:	e023      	b.n	8005e38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d009      	beq.n	8005e10 <HAL_UART_IRQHandler+0x4f4>
 8005dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f9a2 	bl	8006152 <UART_Transmit_IT>
    return;
 8005e0e:	e014      	b.n	8005e3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00e      	beq.n	8005e3a <HAL_UART_IRQHandler+0x51e>
 8005e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d008      	beq.n	8005e3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f9e1 	bl	80061f0 <UART_EndTransmit_IT>
    return;
 8005e2e:	e004      	b.n	8005e3a <HAL_UART_IRQHandler+0x51e>
    return;
 8005e30:	bf00      	nop
 8005e32:	e002      	b.n	8005e3a <HAL_UART_IRQHandler+0x51e>
      return;
 8005e34:	bf00      	nop
 8005e36:	e000      	b.n	8005e3a <HAL_UART_IRQHandler+0x51e>
      return;
 8005e38:	bf00      	nop
  }
}
 8005e3a:	37e8      	adds	r7, #232	@ 0xe8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bc80      	pop	{r7}
 8005e50:	4770      	bx	lr

08005e52 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc80      	pop	{r7}
 8005e62:	4770      	bx	lr

08005e64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bc80      	pop	{r7}
 8005e74:	4770      	bx	lr

08005e76 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e020      	b.n	8005ed2 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2224      	movs	r2, #36	@ 0x24
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 030c 	bic.w	r3, r3, #12
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f043 0308 	orr.w	r3, r3, #8
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr

08005edc <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e020      	b.n	8005f38 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2224      	movs	r2, #36	@ 0x24
 8005f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 030c 	bic.w	r3, r3, #12
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f043 0304 	orr.w	r3, r3, #4
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bc80      	pop	{r7}
 8005f40:	4770      	bx	lr

08005f42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b086      	sub	sp, #24
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	603b      	str	r3, [r7, #0]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f52:	e03b      	b.n	8005fcc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5a:	d037      	beq.n	8005fcc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f5c:	f7fa ff06 	bl	8000d6c <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	6a3a      	ldr	r2, [r7, #32]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d302      	bcc.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e03a      	b.n	8005fec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d023      	beq.n	8005fcc <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b80      	cmp	r3, #128	@ 0x80
 8005f88:	d020      	beq.n	8005fcc <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b40      	cmp	r3, #64	@ 0x40
 8005f8e:	d01d      	beq.n	8005fcc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b08      	cmp	r3, #8
 8005f9c:	d116      	bne.n	8005fcc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f856 	bl	8006066 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2208      	movs	r2, #8
 8005fbe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e00f      	b.n	8005fec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	bf0c      	ite	eq
 8005fdc:	2301      	moveq	r3, #1
 8005fde:	2300      	movne	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d0b4      	beq.n	8005f54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	4613      	mov	r3, r2
 8006000:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	88fa      	ldrh	r2, [r7, #6]
 800600c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	88fa      	ldrh	r2, [r7, #6]
 8006012:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2222      	movs	r2, #34	@ 0x22
 800601e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006038:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0201 	orr.w	r2, r2, #1
 8006048:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0220 	orr.w	r2, r2, #32
 8006058:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr

08006066 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006066:	b480      	push	{r7}
 8006068:	b095      	sub	sp, #84	@ 0x54
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006080:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	330c      	adds	r3, #12
 800608c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800608e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006090:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006094:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800609c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e5      	bne.n	800606e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3314      	adds	r3, #20
 80060a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f023 0301 	bic.w	r3, r3, #1
 80060b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3314      	adds	r3, #20
 80060c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e5      	bne.n	80060a2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d119      	bne.n	8006112 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	330c      	adds	r3, #12
 80060e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f023 0310 	bic.w	r3, r3, #16
 80060f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	330c      	adds	r3, #12
 80060fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060fe:	61ba      	str	r2, [r7, #24]
 8006100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006102:	6979      	ldr	r1, [r7, #20]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	e841 2300 	strex	r3, r2, [r1]
 800610a:	613b      	str	r3, [r7, #16]
   return(result);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1e5      	bne.n	80060de <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006120:	bf00      	nop
 8006122:	3754      	adds	r7, #84	@ 0x54
 8006124:	46bd      	mov	sp, r7
 8006126:	bc80      	pop	{r7}
 8006128:	4770      	bx	lr

0800612a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006136:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff fe8d 	bl	8005e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006152:	b480      	push	{r7}
 8006154:	b085      	sub	sp, #20
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b21      	cmp	r3, #33	@ 0x21
 8006164:	d13e      	bne.n	80061e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800616e:	d114      	bne.n	800619a <UART_Transmit_IT+0x48>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d110      	bne.n	800619a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800618c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	1c9a      	adds	r2, r3, #2
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	621a      	str	r2, [r3, #32]
 8006198:	e008      	b.n	80061ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	1c59      	adds	r1, r3, #1
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6211      	str	r1, [r2, #32]
 80061a4:	781a      	ldrb	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	4619      	mov	r1, r3
 80061ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10f      	bne.n	80061e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e000      	b.n	80061e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061e4:	2302      	movs	r3, #2
  }
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr

080061f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006206:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff fe15 	bl	8005e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08c      	sub	sp, #48	@ 0x30
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b22      	cmp	r3, #34	@ 0x22
 8006232:	f040 80ae 	bne.w	8006392 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800623e:	d117      	bne.n	8006270 <UART_Receive_IT+0x50>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d113      	bne.n	8006270 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006248:	2300      	movs	r3, #0
 800624a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006250:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	b29b      	uxth	r3, r3
 800625a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625e:	b29a      	uxth	r2, r3
 8006260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006262:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006268:	1c9a      	adds	r2, r3, #2
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	629a      	str	r2, [r3, #40]	@ 0x28
 800626e:	e026      	b.n	80062be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006274:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006276:	2300      	movs	r3, #0
 8006278:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006282:	d007      	beq.n	8006294 <UART_Receive_IT+0x74>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <UART_Receive_IT+0x82>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d106      	bne.n	80062a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	b2da      	uxtb	r2, r3
 800629c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	e008      	b.n	80062b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	4619      	mov	r1, r3
 80062cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d15d      	bne.n	800638e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0220 	bic.w	r2, r2, #32
 80062e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0201 	bic.w	r2, r2, #1
 8006300:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006314:	2b01      	cmp	r3, #1
 8006316:	d135      	bne.n	8006384 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	330c      	adds	r3, #12
 8006324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	613b      	str	r3, [r7, #16]
   return(result);
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f023 0310 	bic.w	r3, r3, #16
 8006334:	627b      	str	r3, [r7, #36]	@ 0x24
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	330c      	adds	r3, #12
 800633c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800633e:	623a      	str	r2, [r7, #32]
 8006340:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	69f9      	ldr	r1, [r7, #28]
 8006344:	6a3a      	ldr	r2, [r7, #32]
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	61bb      	str	r3, [r7, #24]
   return(result);
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e5      	bne.n	800631e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	2b10      	cmp	r3, #16
 800635e:	d10a      	bne.n	8006376 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7fa fc93 	bl	8000ca8 <HAL_UARTEx_RxEventCallback>
 8006382:	e002      	b.n	800638a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff fd64 	bl	8005e52 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	e002      	b.n	8006394 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	e000      	b.n	8006394 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006392:	2302      	movs	r3, #2
  }
}
 8006394:	4618      	mov	r0, r3
 8006396:	3730      	adds	r7, #48	@ 0x30
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80063d6:	f023 030c 	bic.w	r3, r3, #12
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6812      	ldr	r2, [r2, #0]
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	430b      	orrs	r3, r1
 80063e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a2c      	ldr	r2, [pc, #176]	@ (80064b0 <UART_SetConfig+0x114>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d103      	bne.n	800640c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006404:	f7fe fa4c 	bl	80048a0 <HAL_RCC_GetPCLK2Freq>
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	e002      	b.n	8006412 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800640c:	f7fe fa34 	bl	8004878 <HAL_RCC_GetPCLK1Freq>
 8006410:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009a      	lsls	r2, r3, #2
 800641c:	441a      	add	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	fbb2 f3f3 	udiv	r3, r2, r3
 8006428:	4a22      	ldr	r2, [pc, #136]	@ (80064b4 <UART_SetConfig+0x118>)
 800642a:	fba2 2303 	umull	r2, r3, r2, r3
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	0119      	lsls	r1, r3, #4
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	009a      	lsls	r2, r3, #2
 800643c:	441a      	add	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	fbb2 f2f3 	udiv	r2, r2, r3
 8006448:	4b1a      	ldr	r3, [pc, #104]	@ (80064b4 <UART_SetConfig+0x118>)
 800644a:	fba3 0302 	umull	r0, r3, r3, r2
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	2064      	movs	r0, #100	@ 0x64
 8006452:	fb00 f303 	mul.w	r3, r0, r3
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	3332      	adds	r3, #50	@ 0x32
 800645c:	4a15      	ldr	r2, [pc, #84]	@ (80064b4 <UART_SetConfig+0x118>)
 800645e:	fba2 2303 	umull	r2, r3, r2, r3
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006468:	4419      	add	r1, r3
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009a      	lsls	r2, r3, #2
 8006474:	441a      	add	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006480:	4b0c      	ldr	r3, [pc, #48]	@ (80064b4 <UART_SetConfig+0x118>)
 8006482:	fba3 0302 	umull	r0, r3, r3, r2
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	2064      	movs	r0, #100	@ 0x64
 800648a:	fb00 f303 	mul.w	r3, r0, r3
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	3332      	adds	r3, #50	@ 0x32
 8006494:	4a07      	ldr	r2, [pc, #28]	@ (80064b4 <UART_SetConfig+0x118>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	f003 020f 	and.w	r2, r3, #15
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	440a      	add	r2, r1
 80064a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80064a8:	bf00      	nop
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40013800 	.word	0x40013800
 80064b4:	51eb851f 	.word	0x51eb851f

080064b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80064c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064ca:	2b84      	cmp	r3, #132	@ 0x84
 80064cc:	d005      	beq.n	80064da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80064ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4413      	add	r3, r2
 80064d6:	3303      	adds	r3, #3
 80064d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80064da:	68fb      	ldr	r3, [r7, #12]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	4770      	bx	lr

080064e6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80064ea:	f000 faf7 	bl	8006adc <vTaskStartScheduler>
  
  return osOK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80064f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f6:	b089      	sub	sp, #36	@ 0x24
 80064f8:	af04      	add	r7, sp, #16
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d020      	beq.n	8006548 <osThreadCreate+0x54>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d01c      	beq.n	8006548 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685c      	ldr	r4, [r3, #4]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691e      	ldr	r6, [r3, #16]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff ffc9 	bl	80064b8 <makeFreeRtosPriority>
 8006526:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006530:	9202      	str	r2, [sp, #8]
 8006532:	9301      	str	r3, [sp, #4]
 8006534:	9100      	str	r1, [sp, #0]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	4632      	mov	r2, r6
 800653a:	4629      	mov	r1, r5
 800653c:	4620      	mov	r0, r4
 800653e:	f000 f8e8 	bl	8006712 <xTaskCreateStatic>
 8006542:	4603      	mov	r3, r0
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	e01c      	b.n	8006582 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685c      	ldr	r4, [r3, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006554:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff ffab 	bl	80064b8 <makeFreeRtosPriority>
 8006562:	4602      	mov	r2, r0
 8006564:	f107 030c 	add.w	r3, r7, #12
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	9200      	str	r2, [sp, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	4632      	mov	r2, r6
 8006570:	4629      	mov	r1, r5
 8006572:	4620      	mov	r0, r4
 8006574:	f000 f92d 	bl	80067d2 <xTaskCreate>
 8006578:	4603      	mov	r3, r0
 800657a:	2b01      	cmp	r3, #1
 800657c:	d001      	beq.n	8006582 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800657e:	2300      	movs	r3, #0
 8006580:	e000      	b.n	8006584 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006582:	68fb      	ldr	r3, [r7, #12]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800658c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <osDelay+0x16>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	e000      	b.n	80065a4 <osDelay+0x18>
 80065a2:	2301      	movs	r3, #1
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fa63 	bl	8006a70 <vTaskDelay>
  
  return osOK;
 80065aa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f103 0208 	add.w	r2, r3, #8
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f04f 32ff 	mov.w	r2, #4294967295
 80065cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f103 0208 	add.w	r2, r3, #8
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f103 0208 	add.w	r2, r3, #8
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr

080065f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065f2:	b480      	push	{r7}
 80065f4:	b083      	sub	sp, #12
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr

0800660a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800660a:	b480      	push	{r7}
 800660c:	b085      	sub	sp, #20
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	601a      	str	r2, [r3, #0]
}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	bc80      	pop	{r7}
 800664e:	4770      	bx	lr

08006650 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d103      	bne.n	8006670 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	e00c      	b.n	800668a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3308      	adds	r3, #8
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	e002      	b.n	800667e <vListInsert+0x2e>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	429a      	cmp	r2, r3
 8006688:	d2f6      	bcs.n	8006678 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	601a      	str	r2, [r3, #0]
}
 80066b6:	bf00      	nop
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr

080066c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	6892      	ldr	r2, [r2, #8]
 80066d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6852      	ldr	r2, [r2, #4]
 80066e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d103      	bne.n	80066f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	1e5a      	subs	r2, r3, #1
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr

08006712 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006712:	b580      	push	{r7, lr}
 8006714:	b08e      	sub	sp, #56	@ 0x38
 8006716:	af04      	add	r7, sp, #16
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	607a      	str	r2, [r7, #4]
 800671e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10b      	bne.n	800673e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	e7fd      	b.n	800673a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800673e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10b      	bne.n	800675c <xTaskCreateStatic+0x4a>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	61fb      	str	r3, [r7, #28]
}
 8006756:	bf00      	nop
 8006758:	bf00      	nop
 800675a:	e7fd      	b.n	8006758 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800675c:	23a0      	movs	r3, #160	@ 0xa0
 800675e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2ba0      	cmp	r3, #160	@ 0xa0
 8006764:	d00b      	beq.n	800677e <xTaskCreateStatic+0x6c>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	61bb      	str	r3, [r7, #24]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800677e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006782:	2b00      	cmp	r3, #0
 8006784:	d01e      	beq.n	80067c4 <xTaskCreateStatic+0xb2>
 8006786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01b      	beq.n	80067c4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800678c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006794:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	2202      	movs	r2, #2
 800679a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800679e:	2300      	movs	r3, #0
 80067a0:	9303      	str	r3, [sp, #12]
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	9302      	str	r3, [sp, #8]
 80067a6:	f107 0314 	add.w	r3, r7, #20
 80067aa:	9301      	str	r3, [sp, #4]
 80067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 f850 	bl	800685c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067be:	f000 f8ed 	bl	800699c <prvAddNewTaskToReadyList>
 80067c2:	e001      	b.n	80067c8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067c8:	697b      	ldr	r3, [r7, #20]
	}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3728      	adds	r7, #40	@ 0x28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b08c      	sub	sp, #48	@ 0x30
 80067d6:	af04      	add	r7, sp, #16
 80067d8:	60f8      	str	r0, [r7, #12]
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	603b      	str	r3, [r7, #0]
 80067de:	4613      	mov	r3, r2
 80067e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fea2 	bl	8007530 <pvPortMalloc>
 80067ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00e      	beq.n	8006812 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067f4:	20a0      	movs	r0, #160	@ 0xa0
 80067f6:	f000 fe9b 	bl	8007530 <pvPortMalloc>
 80067fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	631a      	str	r2, [r3, #48]	@ 0x30
 8006808:	e005      	b.n	8006816 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800680a:	6978      	ldr	r0, [r7, #20]
 800680c:	f000 ff5e 	bl	80076cc <vPortFree>
 8006810:	e001      	b.n	8006816 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d017      	beq.n	800684c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006824:	88fa      	ldrh	r2, [r7, #6]
 8006826:	2300      	movs	r3, #0
 8006828:	9303      	str	r3, [sp, #12]
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	9302      	str	r3, [sp, #8]
 800682e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 f80e 	bl	800685c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006840:	69f8      	ldr	r0, [r7, #28]
 8006842:	f000 f8ab 	bl	800699c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006846:	2301      	movs	r3, #1
 8006848:	61bb      	str	r3, [r7, #24]
 800684a:	e002      	b.n	8006852 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800684c:	f04f 33ff 	mov.w	r3, #4294967295
 8006850:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006852:	69bb      	ldr	r3, [r7, #24]
	}
 8006854:	4618      	mov	r0, r3
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006874:	3b01      	subs	r3, #1
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	f023 0307 	bic.w	r3, r3, #7
 8006882:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	617b      	str	r3, [r7, #20]
}
 80068a0:	bf00      	nop
 80068a2:	bf00      	nop
 80068a4:	e7fd      	b.n	80068a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01f      	beq.n	80068ec <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068ac:	2300      	movs	r3, #0
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	e012      	b.n	80068d8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	4413      	add	r3, r2
 80068b8:	7819      	ldrb	r1, [r3, #0]
 80068ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	4413      	add	r3, r2
 80068c0:	3334      	adds	r3, #52	@ 0x34
 80068c2:	460a      	mov	r2, r1
 80068c4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4413      	add	r3, r2
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d006      	beq.n	80068e0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	3301      	adds	r3, #1
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	2b0f      	cmp	r3, #15
 80068dc:	d9e9      	bls.n	80068b2 <prvInitialiseNewTask+0x56>
 80068de:	e000      	b.n	80068e2 <prvInitialiseNewTask+0x86>
			{
				break;
 80068e0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068ea:	e003      	b.n	80068f4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f6:	2b06      	cmp	r3, #6
 80068f8:	d901      	bls.n	80068fe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068fa:	2306      	movs	r3, #6
 80068fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006902:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006908:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800690a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690c:	2200      	movs	r2, #0
 800690e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006912:	3304      	adds	r3, #4
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff fe6c 	bl	80065f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	3318      	adds	r3, #24
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff fe67 	bl	80065f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006928:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800692a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692c:	f1c3 0207 	rsb	r2, r3, #7
 8006930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006932:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006938:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	2200      	movs	r2, #0
 800693e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	2200      	movs	r2, #0
 8006946:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800694a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694c:	334c      	adds	r3, #76	@ 0x4c
 800694e:	224c      	movs	r2, #76	@ 0x4c
 8006950:	2100      	movs	r1, #0
 8006952:	4618      	mov	r0, r3
 8006954:	f001 f9a0 	bl	8007c98 <memset>
 8006958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695a:	4a0d      	ldr	r2, [pc, #52]	@ (8006990 <prvInitialiseNewTask+0x134>)
 800695c:	651a      	str	r2, [r3, #80]	@ 0x50
 800695e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006960:	4a0c      	ldr	r2, [pc, #48]	@ (8006994 <prvInitialiseNewTask+0x138>)
 8006962:	655a      	str	r2, [r3, #84]	@ 0x54
 8006964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006966:	4a0c      	ldr	r2, [pc, #48]	@ (8006998 <prvInitialiseNewTask+0x13c>)
 8006968:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	68f9      	ldr	r1, [r7, #12]
 800696e:	69b8      	ldr	r0, [r7, #24]
 8006970:	f000 fc28 	bl	80071c4 <pxPortInitialiseStack>
 8006974:	4602      	mov	r2, r0
 8006976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006978:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800697a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006986:	bf00      	nop
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20001a4c 	.word	0x20001a4c
 8006994:	20001ab4 	.word	0x20001ab4
 8006998:	20001b1c 	.word	0x20001b1c

0800699c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069a4:	f000 fd02 	bl	80073ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006a54 <prvAddNewTaskToReadyList+0xb8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3301      	adds	r3, #1
 80069ae:	4a29      	ldr	r2, [pc, #164]	@ (8006a54 <prvAddNewTaskToReadyList+0xb8>)
 80069b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069b2:	4b29      	ldr	r3, [pc, #164]	@ (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069ba:	4a27      	ldr	r2, [pc, #156]	@ (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069c0:	4b24      	ldr	r3, [pc, #144]	@ (8006a54 <prvAddNewTaskToReadyList+0xb8>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d110      	bne.n	80069ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069c8:	f000 fad2 	bl	8006f70 <prvInitialiseTaskLists>
 80069cc:	e00d      	b.n	80069ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069ce:	4b23      	ldr	r3, [pc, #140]	@ (8006a5c <prvAddNewTaskToReadyList+0xc0>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069d6:	4b20      	ldr	r3, [pc, #128]	@ (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d802      	bhi.n	80069ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006a60 <prvAddNewTaskToReadyList+0xc4>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3301      	adds	r3, #1
 80069f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a60 <prvAddNewTaskToReadyList+0xc4>)
 80069f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f8:	2201      	movs	r2, #1
 80069fa:	409a      	lsls	r2, r3
 80069fc:	4b19      	ldr	r3, [pc, #100]	@ (8006a64 <prvAddNewTaskToReadyList+0xc8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	4a18      	ldr	r2, [pc, #96]	@ (8006a64 <prvAddNewTaskToReadyList+0xc8>)
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4a15      	ldr	r2, [pc, #84]	@ (8006a68 <prvAddNewTaskToReadyList+0xcc>)
 8006a14:	441a      	add	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	f7ff fdf4 	bl	800660a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a22:	f000 fcf3 	bl	800740c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a26:	4b0d      	ldr	r3, [pc, #52]	@ (8006a5c <prvAddNewTaskToReadyList+0xc0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00e      	beq.n	8006a4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a58 <prvAddNewTaskToReadyList+0xbc>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d207      	bcs.n	8006a4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a6c <prvAddNewTaskToReadyList+0xd0>)
 8006a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	20000de4 	.word	0x20000de4
 8006a58:	20000ce4 	.word	0x20000ce4
 8006a5c:	20000df0 	.word	0x20000df0
 8006a60:	20000e00 	.word	0x20000e00
 8006a64:	20000dec 	.word	0x20000dec
 8006a68:	20000ce8 	.word	0x20000ce8
 8006a6c:	e000ed04 	.word	0xe000ed04

08006a70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d018      	beq.n	8006ab4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a82:	4b14      	ldr	r3, [pc, #80]	@ (8006ad4 <vTaskDelay+0x64>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00b      	beq.n	8006aa2 <vTaskDelay+0x32>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	60bb      	str	r3, [r7, #8]
}
 8006a9c:	bf00      	nop
 8006a9e:	bf00      	nop
 8006aa0:	e7fd      	b.n	8006a9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006aa2:	f000 f885 	bl	8006bb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fb25 	bl	80070f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006aae:	f000 f88d 	bl	8006bcc <xTaskResumeAll>
 8006ab2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d107      	bne.n	8006aca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006aba:	4b07      	ldr	r3, [pc, #28]	@ (8006ad8 <vTaskDelay+0x68>)
 8006abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006aca:	bf00      	nop
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000e0c 	.word	0x20000e0c
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	@ 0x28
 8006ae0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006aea:	463a      	mov	r2, r7
 8006aec:	1d39      	adds	r1, r7, #4
 8006aee:	f107 0308 	add.w	r3, r7, #8
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7f9 fc24 	bl	8000340 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	9202      	str	r2, [sp, #8]
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	2300      	movs	r3, #0
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	2300      	movs	r3, #0
 8006b08:	460a      	mov	r2, r1
 8006b0a:	4921      	ldr	r1, [pc, #132]	@ (8006b90 <vTaskStartScheduler+0xb4>)
 8006b0c:	4821      	ldr	r0, [pc, #132]	@ (8006b94 <vTaskStartScheduler+0xb8>)
 8006b0e:	f7ff fe00 	bl	8006712 <xTaskCreateStatic>
 8006b12:	4603      	mov	r3, r0
 8006b14:	4a20      	ldr	r2, [pc, #128]	@ (8006b98 <vTaskStartScheduler+0xbc>)
 8006b16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b18:	4b1f      	ldr	r3, [pc, #124]	@ (8006b98 <vTaskStartScheduler+0xbc>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b20:	2301      	movs	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
 8006b24:	e001      	b.n	8006b2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d11b      	bne.n	8006b68 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	613b      	str	r3, [r7, #16]
}
 8006b42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b44:	4b15      	ldr	r3, [pc, #84]	@ (8006b9c <vTaskStartScheduler+0xc0>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	334c      	adds	r3, #76	@ 0x4c
 8006b4a:	4a15      	ldr	r2, [pc, #84]	@ (8006ba0 <vTaskStartScheduler+0xc4>)
 8006b4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b4e:	4b15      	ldr	r3, [pc, #84]	@ (8006ba4 <vTaskStartScheduler+0xc8>)
 8006b50:	f04f 32ff 	mov.w	r2, #4294967295
 8006b54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b56:	4b14      	ldr	r3, [pc, #80]	@ (8006ba8 <vTaskStartScheduler+0xcc>)
 8006b58:	2201      	movs	r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b5c:	4b13      	ldr	r3, [pc, #76]	@ (8006bac <vTaskStartScheduler+0xd0>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b62:	f000 fbb1 	bl	80072c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b66:	e00f      	b.n	8006b88 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6e:	d10b      	bne.n	8006b88 <vTaskStartScheduler+0xac>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	60fb      	str	r3, [r7, #12]
}
 8006b82:	bf00      	nop
 8006b84:	bf00      	nop
 8006b86:	e7fd      	b.n	8006b84 <vTaskStartScheduler+0xa8>
}
 8006b88:	bf00      	nop
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	08007ec0 	.word	0x08007ec0
 8006b94:	08006f41 	.word	0x08006f41
 8006b98:	20000e08 	.word	0x20000e08
 8006b9c:	20000ce4 	.word	0x20000ce4
 8006ba0:	20000014 	.word	0x20000014
 8006ba4:	20000e04 	.word	0x20000e04
 8006ba8:	20000df0 	.word	0x20000df0
 8006bac:	20000de8 	.word	0x20000de8

08006bb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006bb4:	4b04      	ldr	r3, [pc, #16]	@ (8006bc8 <vTaskSuspendAll+0x18>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	4a03      	ldr	r2, [pc, #12]	@ (8006bc8 <vTaskSuspendAll+0x18>)
 8006bbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006bbe:	bf00      	nop
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	20000e0c 	.word	0x20000e0c

08006bcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bda:	4b42      	ldr	r3, [pc, #264]	@ (8006ce4 <xTaskResumeAll+0x118>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10b      	bne.n	8006bfa <xTaskResumeAll+0x2e>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	603b      	str	r3, [r7, #0]
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop
 8006bf8:	e7fd      	b.n	8006bf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bfa:	f000 fbd7 	bl	80073ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bfe:	4b39      	ldr	r3, [pc, #228]	@ (8006ce4 <xTaskResumeAll+0x118>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	4a37      	ldr	r2, [pc, #220]	@ (8006ce4 <xTaskResumeAll+0x118>)
 8006c06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c08:	4b36      	ldr	r3, [pc, #216]	@ (8006ce4 <xTaskResumeAll+0x118>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d161      	bne.n	8006cd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c10:	4b35      	ldr	r3, [pc, #212]	@ (8006ce8 <xTaskResumeAll+0x11c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d05d      	beq.n	8006cd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c18:	e02e      	b.n	8006c78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c1a:	4b34      	ldr	r3, [pc, #208]	@ (8006cec <xTaskResumeAll+0x120>)
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3318      	adds	r3, #24
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7ff fd4a 	bl	80066c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff fd45 	bl	80066c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	409a      	lsls	r2, r3
 8006c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006cf0 <xTaskResumeAll+0x124>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	4a2a      	ldr	r2, [pc, #168]	@ (8006cf0 <xTaskResumeAll+0x124>)
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4a27      	ldr	r2, [pc, #156]	@ (8006cf4 <xTaskResumeAll+0x128>)
 8006c56:	441a      	add	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f7ff fcd3 	bl	800660a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c68:	4b23      	ldr	r3, [pc, #140]	@ (8006cf8 <xTaskResumeAll+0x12c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d302      	bcc.n	8006c78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c72:	4b22      	ldr	r3, [pc, #136]	@ (8006cfc <xTaskResumeAll+0x130>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c78:	4b1c      	ldr	r3, [pc, #112]	@ (8006cec <xTaskResumeAll+0x120>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1cc      	bne.n	8006c1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c86:	f000 fa17 	bl	80070b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006d00 <xTaskResumeAll+0x134>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d010      	beq.n	8006cb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c96:	f000 f837 	bl	8006d08 <xTaskIncrementTick>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006ca0:	4b16      	ldr	r3, [pc, #88]	@ (8006cfc <xTaskResumeAll+0x130>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1f1      	bne.n	8006c96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006cb2:	4b13      	ldr	r3, [pc, #76]	@ (8006d00 <xTaskResumeAll+0x134>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cb8:	4b10      	ldr	r3, [pc, #64]	@ (8006cfc <xTaskResumeAll+0x130>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8006d04 <xTaskResumeAll+0x138>)
 8006cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cd4:	f000 fb9a 	bl	800740c <vPortExitCritical>

	return xAlreadyYielded;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000e0c 	.word	0x20000e0c
 8006ce8:	20000de4 	.word	0x20000de4
 8006cec:	20000da4 	.word	0x20000da4
 8006cf0:	20000dec 	.word	0x20000dec
 8006cf4:	20000ce8 	.word	0x20000ce8
 8006cf8:	20000ce4 	.word	0x20000ce4
 8006cfc:	20000df8 	.word	0x20000df8
 8006d00:	20000df4 	.word	0x20000df4
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d12:	4b4f      	ldr	r3, [pc, #316]	@ (8006e50 <xTaskIncrementTick+0x148>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f040 808f 	bne.w	8006e3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d1c:	4b4d      	ldr	r3, [pc, #308]	@ (8006e54 <xTaskIncrementTick+0x14c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3301      	adds	r3, #1
 8006d22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d24:	4a4b      	ldr	r2, [pc, #300]	@ (8006e54 <xTaskIncrementTick+0x14c>)
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d121      	bne.n	8006d74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d30:	4b49      	ldr	r3, [pc, #292]	@ (8006e58 <xTaskIncrementTick+0x150>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00b      	beq.n	8006d52 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	603b      	str	r3, [r7, #0]
}
 8006d4c:	bf00      	nop
 8006d4e:	bf00      	nop
 8006d50:	e7fd      	b.n	8006d4e <xTaskIncrementTick+0x46>
 8006d52:	4b41      	ldr	r3, [pc, #260]	@ (8006e58 <xTaskIncrementTick+0x150>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	4b40      	ldr	r3, [pc, #256]	@ (8006e5c <xTaskIncrementTick+0x154>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a3e      	ldr	r2, [pc, #248]	@ (8006e58 <xTaskIncrementTick+0x150>)
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	4a3e      	ldr	r2, [pc, #248]	@ (8006e5c <xTaskIncrementTick+0x154>)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	4b3e      	ldr	r3, [pc, #248]	@ (8006e60 <xTaskIncrementTick+0x158>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	4a3c      	ldr	r2, [pc, #240]	@ (8006e60 <xTaskIncrementTick+0x158>)
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	f000 f9a2 	bl	80070b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d74:	4b3b      	ldr	r3, [pc, #236]	@ (8006e64 <xTaskIncrementTick+0x15c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d348      	bcc.n	8006e10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d7e:	4b36      	ldr	r3, [pc, #216]	@ (8006e58 <xTaskIncrementTick+0x150>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d88:	4b36      	ldr	r3, [pc, #216]	@ (8006e64 <xTaskIncrementTick+0x15c>)
 8006d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8e:	601a      	str	r2, [r3, #0]
					break;
 8006d90:	e03e      	b.n	8006e10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d92:	4b31      	ldr	r3, [pc, #196]	@ (8006e58 <xTaskIncrementTick+0x150>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d203      	bcs.n	8006db2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006daa:	4a2e      	ldr	r2, [pc, #184]	@ (8006e64 <xTaskIncrementTick+0x15c>)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006db0:	e02e      	b.n	8006e10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	3304      	adds	r3, #4
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7ff fc82 	bl	80066c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d004      	beq.n	8006dce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	3318      	adds	r3, #24
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7ff fc79 	bl	80066c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	409a      	lsls	r2, r3
 8006dd6:	4b24      	ldr	r3, [pc, #144]	@ (8006e68 <xTaskIncrementTick+0x160>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	4a22      	ldr	r2, [pc, #136]	@ (8006e68 <xTaskIncrementTick+0x160>)
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4a1f      	ldr	r2, [pc, #124]	@ (8006e6c <xTaskIncrementTick+0x164>)
 8006dee:	441a      	add	r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	3304      	adds	r3, #4
 8006df4:	4619      	mov	r1, r3
 8006df6:	4610      	mov	r0, r2
 8006df8:	f7ff fc07 	bl	800660a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e00:	4b1b      	ldr	r3, [pc, #108]	@ (8006e70 <xTaskIncrementTick+0x168>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d3b9      	bcc.n	8006d7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e0e:	e7b6      	b.n	8006d7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e10:	4b17      	ldr	r3, [pc, #92]	@ (8006e70 <xTaskIncrementTick+0x168>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e16:	4915      	ldr	r1, [pc, #84]	@ (8006e6c <xTaskIncrementTick+0x164>)
 8006e18:	4613      	mov	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	440b      	add	r3, r1
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d901      	bls.n	8006e2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e2c:	4b11      	ldr	r3, [pc, #68]	@ (8006e74 <xTaskIncrementTick+0x16c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d007      	beq.n	8006e44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006e34:	2301      	movs	r3, #1
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	e004      	b.n	8006e44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e78 <xTaskIncrementTick+0x170>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	4a0d      	ldr	r2, [pc, #52]	@ (8006e78 <xTaskIncrementTick+0x170>)
 8006e42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e44:	697b      	ldr	r3, [r7, #20]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000e0c 	.word	0x20000e0c
 8006e54:	20000de8 	.word	0x20000de8
 8006e58:	20000d9c 	.word	0x20000d9c
 8006e5c:	20000da0 	.word	0x20000da0
 8006e60:	20000dfc 	.word	0x20000dfc
 8006e64:	20000e04 	.word	0x20000e04
 8006e68:	20000dec 	.word	0x20000dec
 8006e6c:	20000ce8 	.word	0x20000ce8
 8006e70:	20000ce4 	.word	0x20000ce4
 8006e74:	20000df8 	.word	0x20000df8
 8006e78:	20000df4 	.word	0x20000df4

08006e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e82:	4b29      	ldr	r3, [pc, #164]	@ (8006f28 <vTaskSwitchContext+0xac>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e8a:	4b28      	ldr	r3, [pc, #160]	@ (8006f2c <vTaskSwitchContext+0xb0>)
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e90:	e045      	b.n	8006f1e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8006e92:	4b26      	ldr	r3, [pc, #152]	@ (8006f2c <vTaskSwitchContext+0xb0>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e98:	4b25      	ldr	r3, [pc, #148]	@ (8006f30 <vTaskSwitchContext+0xb4>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	fab3 f383 	clz	r3, r3
 8006ea4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ea6:	7afb      	ldrb	r3, [r7, #11]
 8006ea8:	f1c3 031f 	rsb	r3, r3, #31
 8006eac:	617b      	str	r3, [r7, #20]
 8006eae:	4921      	ldr	r1, [pc, #132]	@ (8006f34 <vTaskSwitchContext+0xb8>)
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	440b      	add	r3, r1
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10b      	bne.n	8006eda <vTaskSwitchContext+0x5e>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	607b      	str	r3, [r7, #4]
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	e7fd      	b.n	8006ed6 <vTaskSwitchContext+0x5a>
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4613      	mov	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4a13      	ldr	r2, [pc, #76]	@ (8006f34 <vTaskSwitchContext+0xb8>)
 8006ee6:	4413      	add	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	605a      	str	r2, [r3, #4]
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	3308      	adds	r3, #8
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d104      	bne.n	8006f0a <vTaskSwitchContext+0x8e>
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	605a      	str	r2, [r3, #4]
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	4a09      	ldr	r2, [pc, #36]	@ (8006f38 <vTaskSwitchContext+0xbc>)
 8006f12:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f14:	4b08      	ldr	r3, [pc, #32]	@ (8006f38 <vTaskSwitchContext+0xbc>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	334c      	adds	r3, #76	@ 0x4c
 8006f1a:	4a08      	ldr	r2, [pc, #32]	@ (8006f3c <vTaskSwitchContext+0xc0>)
 8006f1c:	6013      	str	r3, [r2, #0]
}
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bc80      	pop	{r7}
 8006f26:	4770      	bx	lr
 8006f28:	20000e0c 	.word	0x20000e0c
 8006f2c:	20000df8 	.word	0x20000df8
 8006f30:	20000dec 	.word	0x20000dec
 8006f34:	20000ce8 	.word	0x20000ce8
 8006f38:	20000ce4 	.word	0x20000ce4
 8006f3c:	20000014 	.word	0x20000014

08006f40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f48:	f000 f852 	bl	8006ff0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f4c:	4b06      	ldr	r3, [pc, #24]	@ (8006f68 <prvIdleTask+0x28>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d9f9      	bls.n	8006f48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f54:	4b05      	ldr	r3, [pc, #20]	@ (8006f6c <prvIdleTask+0x2c>)
 8006f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f64:	e7f0      	b.n	8006f48 <prvIdleTask+0x8>
 8006f66:	bf00      	nop
 8006f68:	20000ce8 	.word	0x20000ce8
 8006f6c:	e000ed04 	.word	0xe000ed04

08006f70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f76:	2300      	movs	r3, #0
 8006f78:	607b      	str	r3, [r7, #4]
 8006f7a:	e00c      	b.n	8006f96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4a12      	ldr	r2, [pc, #72]	@ (8006fd0 <prvInitialiseTaskLists+0x60>)
 8006f88:	4413      	add	r3, r2
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7ff fb12 	bl	80065b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3301      	adds	r3, #1
 8006f94:	607b      	str	r3, [r7, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b06      	cmp	r3, #6
 8006f9a:	d9ef      	bls.n	8006f7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f9c:	480d      	ldr	r0, [pc, #52]	@ (8006fd4 <prvInitialiseTaskLists+0x64>)
 8006f9e:	f7ff fb09 	bl	80065b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fa2:	480d      	ldr	r0, [pc, #52]	@ (8006fd8 <prvInitialiseTaskLists+0x68>)
 8006fa4:	f7ff fb06 	bl	80065b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fa8:	480c      	ldr	r0, [pc, #48]	@ (8006fdc <prvInitialiseTaskLists+0x6c>)
 8006faa:	f7ff fb03 	bl	80065b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fae:	480c      	ldr	r0, [pc, #48]	@ (8006fe0 <prvInitialiseTaskLists+0x70>)
 8006fb0:	f7ff fb00 	bl	80065b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fb4:	480b      	ldr	r0, [pc, #44]	@ (8006fe4 <prvInitialiseTaskLists+0x74>)
 8006fb6:	f7ff fafd 	bl	80065b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fba:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe8 <prvInitialiseTaskLists+0x78>)
 8006fbc:	4a05      	ldr	r2, [pc, #20]	@ (8006fd4 <prvInitialiseTaskLists+0x64>)
 8006fbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006fec <prvInitialiseTaskLists+0x7c>)
 8006fc2:	4a05      	ldr	r2, [pc, #20]	@ (8006fd8 <prvInitialiseTaskLists+0x68>)
 8006fc4:	601a      	str	r2, [r3, #0]
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000ce8 	.word	0x20000ce8
 8006fd4:	20000d74 	.word	0x20000d74
 8006fd8:	20000d88 	.word	0x20000d88
 8006fdc:	20000da4 	.word	0x20000da4
 8006fe0:	20000db8 	.word	0x20000db8
 8006fe4:	20000dd0 	.word	0x20000dd0
 8006fe8:	20000d9c 	.word	0x20000d9c
 8006fec:	20000da0 	.word	0x20000da0

08006ff0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ff6:	e019      	b.n	800702c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ff8:	f000 f9d8 	bl	80073ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffc:	4b10      	ldr	r3, [pc, #64]	@ (8007040 <prvCheckTasksWaitingTermination+0x50>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3304      	adds	r3, #4
 8007008:	4618      	mov	r0, r3
 800700a:	f7ff fb59 	bl	80066c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800700e:	4b0d      	ldr	r3, [pc, #52]	@ (8007044 <prvCheckTasksWaitingTermination+0x54>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3b01      	subs	r3, #1
 8007014:	4a0b      	ldr	r2, [pc, #44]	@ (8007044 <prvCheckTasksWaitingTermination+0x54>)
 8007016:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007018:	4b0b      	ldr	r3, [pc, #44]	@ (8007048 <prvCheckTasksWaitingTermination+0x58>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3b01      	subs	r3, #1
 800701e:	4a0a      	ldr	r2, [pc, #40]	@ (8007048 <prvCheckTasksWaitingTermination+0x58>)
 8007020:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007022:	f000 f9f3 	bl	800740c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f810 	bl	800704c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800702c:	4b06      	ldr	r3, [pc, #24]	@ (8007048 <prvCheckTasksWaitingTermination+0x58>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e1      	bne.n	8006ff8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000db8 	.word	0x20000db8
 8007044:	20000de4 	.word	0x20000de4
 8007048:	20000dcc 	.word	0x20000dcc

0800704c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	334c      	adds	r3, #76	@ 0x4c
 8007058:	4618      	mov	r0, r3
 800705a:	f000 fe25 	bl	8007ca8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007064:	2b00      	cmp	r3, #0
 8007066:	d108      	bne.n	800707a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fb2d 	bl	80076cc <vPortFree>
				vPortFree( pxTCB );
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fb2a 	bl	80076cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007078:	e019      	b.n	80070ae <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007080:	2b01      	cmp	r3, #1
 8007082:	d103      	bne.n	800708c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fb21 	bl	80076cc <vPortFree>
	}
 800708a:	e010      	b.n	80070ae <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007092:	2b02      	cmp	r3, #2
 8007094:	d00b      	beq.n	80070ae <prvDeleteTCB+0x62>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	60fb      	str	r3, [r7, #12]
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	e7fd      	b.n	80070aa <prvDeleteTCB+0x5e>
	}
 80070ae:	bf00      	nop
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070be:	4b0c      	ldr	r3, [pc, #48]	@ (80070f0 <prvResetNextTaskUnblockTime+0x38>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d104      	bne.n	80070d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070c8:	4b0a      	ldr	r3, [pc, #40]	@ (80070f4 <prvResetNextTaskUnblockTime+0x3c>)
 80070ca:	f04f 32ff 	mov.w	r2, #4294967295
 80070ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070d0:	e008      	b.n	80070e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d2:	4b07      	ldr	r3, [pc, #28]	@ (80070f0 <prvResetNextTaskUnblockTime+0x38>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	4a04      	ldr	r2, [pc, #16]	@ (80070f4 <prvResetNextTaskUnblockTime+0x3c>)
 80070e2:	6013      	str	r3, [r2, #0]
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20000d9c 	.word	0x20000d9c
 80070f4:	20000e04 	.word	0x20000e04

080070f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007102:	4b29      	ldr	r3, [pc, #164]	@ (80071a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007108:	4b28      	ldr	r3, [pc, #160]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3304      	adds	r3, #4
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff fad6 	bl	80066c0 <uxListRemove>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10b      	bne.n	8007132 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800711a:	4b24      	ldr	r3, [pc, #144]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007120:	2201      	movs	r2, #1
 8007122:	fa02 f303 	lsl.w	r3, r2, r3
 8007126:	43da      	mvns	r2, r3
 8007128:	4b21      	ldr	r3, [pc, #132]	@ (80071b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4013      	ands	r3, r2
 800712e:	4a20      	ldr	r2, [pc, #128]	@ (80071b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007130:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007138:	d10a      	bne.n	8007150 <prvAddCurrentTaskToDelayedList+0x58>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d007      	beq.n	8007150 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007140:	4b1a      	ldr	r3, [pc, #104]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3304      	adds	r3, #4
 8007146:	4619      	mov	r1, r3
 8007148:	481a      	ldr	r0, [pc, #104]	@ (80071b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800714a:	f7ff fa5e 	bl	800660a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800714e:	e026      	b.n	800719e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4413      	add	r3, r2
 8007156:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007158:	4b14      	ldr	r3, [pc, #80]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	429a      	cmp	r2, r3
 8007166:	d209      	bcs.n	800717c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007168:	4b13      	ldr	r3, [pc, #76]	@ (80071b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	4b0f      	ldr	r3, [pc, #60]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3304      	adds	r3, #4
 8007172:	4619      	mov	r1, r3
 8007174:	4610      	mov	r0, r2
 8007176:	f7ff fa6b 	bl	8006650 <vListInsert>
}
 800717a:	e010      	b.n	800719e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800717c:	4b0f      	ldr	r3, [pc, #60]	@ (80071bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	4b0a      	ldr	r3, [pc, #40]	@ (80071ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3304      	adds	r3, #4
 8007186:	4619      	mov	r1, r3
 8007188:	4610      	mov	r0, r2
 800718a:	f7ff fa61 	bl	8006650 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800718e:	4b0c      	ldr	r3, [pc, #48]	@ (80071c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	429a      	cmp	r2, r3
 8007196:	d202      	bcs.n	800719e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007198:	4a09      	ldr	r2, [pc, #36]	@ (80071c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6013      	str	r3, [r2, #0]
}
 800719e:	bf00      	nop
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000de8 	.word	0x20000de8
 80071ac:	20000ce4 	.word	0x20000ce4
 80071b0:	20000dec 	.word	0x20000dec
 80071b4:	20000dd0 	.word	0x20000dd0
 80071b8:	20000da0 	.word	0x20000da0
 80071bc:	20000d9c 	.word	0x20000d9c
 80071c0:	20000e04 	.word	0x20000e04

080071c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3b04      	subs	r3, #4
 80071d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80071dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3b04      	subs	r3, #4
 80071e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f023 0201 	bic.w	r2, r3, #1
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3b04      	subs	r3, #4
 80071f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071f4:	4a08      	ldr	r2, [pc, #32]	@ (8007218 <pxPortInitialiseStack+0x54>)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3b14      	subs	r3, #20
 80071fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3b20      	subs	r3, #32
 800720a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800720c:	68fb      	ldr	r3, [r7, #12]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr
 8007218:	0800721d 	.word	0x0800721d

0800721c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007222:	2300      	movs	r3, #0
 8007224:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007226:	4b12      	ldr	r3, [pc, #72]	@ (8007270 <prvTaskExitError+0x54>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722e:	d00b      	beq.n	8007248 <prvTaskExitError+0x2c>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	60fb      	str	r3, [r7, #12]
}
 8007242:	bf00      	nop
 8007244:	bf00      	nop
 8007246:	e7fd      	b.n	8007244 <prvTaskExitError+0x28>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	60bb      	str	r3, [r7, #8]
}
 800725a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800725c:	bf00      	nop
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0fc      	beq.n	800725e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007264:	bf00      	nop
 8007266:	bf00      	nop
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr
 8007270:	2000000c 	.word	0x2000000c
	...

08007280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007280:	4b07      	ldr	r3, [pc, #28]	@ (80072a0 <pxCurrentTCBConst2>)
 8007282:	6819      	ldr	r1, [r3, #0]
 8007284:	6808      	ldr	r0, [r1, #0]
 8007286:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800728a:	f380 8809 	msr	PSP, r0
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f04f 0000 	mov.w	r0, #0
 8007296:	f380 8811 	msr	BASEPRI, r0
 800729a:	f04e 0e0d 	orr.w	lr, lr, #13
 800729e:	4770      	bx	lr

080072a0 <pxCurrentTCBConst2>:
 80072a0:	20000ce4 	.word	0x20000ce4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop

080072a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80072a8:	4806      	ldr	r0, [pc, #24]	@ (80072c4 <prvPortStartFirstTask+0x1c>)
 80072aa:	6800      	ldr	r0, [r0, #0]
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f380 8808 	msr	MSP, r0
 80072b2:	b662      	cpsie	i
 80072b4:	b661      	cpsie	f
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	df00      	svc	0
 80072c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072c2:	bf00      	nop
 80072c4:	e000ed08 	.word	0xe000ed08

080072c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072ce:	4b32      	ldr	r3, [pc, #200]	@ (8007398 <xPortStartScheduler+0xd0>)
 80072d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	22ff      	movs	r2, #255	@ 0xff
 80072de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072e8:	78fb      	ldrb	r3, [r7, #3]
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	4b2a      	ldr	r3, [pc, #168]	@ (800739c <xPortStartScheduler+0xd4>)
 80072f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072f6:	4b2a      	ldr	r3, [pc, #168]	@ (80073a0 <xPortStartScheduler+0xd8>)
 80072f8:	2207      	movs	r2, #7
 80072fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072fc:	e009      	b.n	8007312 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80072fe:	4b28      	ldr	r3, [pc, #160]	@ (80073a0 <xPortStartScheduler+0xd8>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3b01      	subs	r3, #1
 8007304:	4a26      	ldr	r2, [pc, #152]	@ (80073a0 <xPortStartScheduler+0xd8>)
 8007306:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007308:	78fb      	ldrb	r3, [r7, #3]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	b2db      	uxtb	r3, r3
 8007310:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800731a:	2b80      	cmp	r3, #128	@ 0x80
 800731c:	d0ef      	beq.n	80072fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800731e:	4b20      	ldr	r3, [pc, #128]	@ (80073a0 <xPortStartScheduler+0xd8>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f1c3 0307 	rsb	r3, r3, #7
 8007326:	2b04      	cmp	r3, #4
 8007328:	d00b      	beq.n	8007342 <xPortStartScheduler+0x7a>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	60bb      	str	r3, [r7, #8]
}
 800733c:	bf00      	nop
 800733e:	bf00      	nop
 8007340:	e7fd      	b.n	800733e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007342:	4b17      	ldr	r3, [pc, #92]	@ (80073a0 <xPortStartScheduler+0xd8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	021b      	lsls	r3, r3, #8
 8007348:	4a15      	ldr	r2, [pc, #84]	@ (80073a0 <xPortStartScheduler+0xd8>)
 800734a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800734c:	4b14      	ldr	r3, [pc, #80]	@ (80073a0 <xPortStartScheduler+0xd8>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007354:	4a12      	ldr	r2, [pc, #72]	@ (80073a0 <xPortStartScheduler+0xd8>)
 8007356:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	b2da      	uxtb	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007360:	4b10      	ldr	r3, [pc, #64]	@ (80073a4 <xPortStartScheduler+0xdc>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a0f      	ldr	r2, [pc, #60]	@ (80073a4 <xPortStartScheduler+0xdc>)
 8007366:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800736a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800736c:	4b0d      	ldr	r3, [pc, #52]	@ (80073a4 <xPortStartScheduler+0xdc>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a0c      	ldr	r2, [pc, #48]	@ (80073a4 <xPortStartScheduler+0xdc>)
 8007372:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007376:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007378:	f000 f8b8 	bl	80074ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800737c:	4b0a      	ldr	r3, [pc, #40]	@ (80073a8 <xPortStartScheduler+0xe0>)
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007382:	f7ff ff91 	bl	80072a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007386:	f7ff fd79 	bl	8006e7c <vTaskSwitchContext>
	prvTaskExitError();
 800738a:	f7ff ff47 	bl	800721c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	e000e400 	.word	0xe000e400
 800739c:	20000e10 	.word	0x20000e10
 80073a0:	20000e14 	.word	0x20000e14
 80073a4:	e000ed20 	.word	0xe000ed20
 80073a8:	2000000c 	.word	0x2000000c

080073ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	607b      	str	r3, [r7, #4]
}
 80073c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007404 <vPortEnterCritical+0x58>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3301      	adds	r3, #1
 80073cc:	4a0d      	ldr	r2, [pc, #52]	@ (8007404 <vPortEnterCritical+0x58>)
 80073ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007404 <vPortEnterCritical+0x58>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d110      	bne.n	80073fa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007408 <vPortEnterCritical+0x5c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00b      	beq.n	80073fa <vPortEnterCritical+0x4e>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	603b      	str	r3, [r7, #0]
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop
 80073f8:	e7fd      	b.n	80073f6 <vPortEnterCritical+0x4a>
	}
}
 80073fa:	bf00      	nop
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	bc80      	pop	{r7}
 8007402:	4770      	bx	lr
 8007404:	2000000c 	.word	0x2000000c
 8007408:	e000ed04 	.word	0xe000ed04

0800740c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007412:	4b12      	ldr	r3, [pc, #72]	@ (800745c <vPortExitCritical+0x50>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10b      	bne.n	8007432 <vPortExitCritical+0x26>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	607b      	str	r3, [r7, #4]
}
 800742c:	bf00      	nop
 800742e:	bf00      	nop
 8007430:	e7fd      	b.n	800742e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007432:	4b0a      	ldr	r3, [pc, #40]	@ (800745c <vPortExitCritical+0x50>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3b01      	subs	r3, #1
 8007438:	4a08      	ldr	r2, [pc, #32]	@ (800745c <vPortExitCritical+0x50>)
 800743a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800743c:	4b07      	ldr	r3, [pc, #28]	@ (800745c <vPortExitCritical+0x50>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d105      	bne.n	8007450 <vPortExitCritical+0x44>
 8007444:	2300      	movs	r3, #0
 8007446:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800744e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	bc80      	pop	{r7}
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	2000000c 	.word	0x2000000c

08007460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007460:	f3ef 8009 	mrs	r0, PSP
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	4b0d      	ldr	r3, [pc, #52]	@ (80074a0 <pxCurrentTCBConst>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007470:	6010      	str	r0, [r2, #0]
 8007472:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007476:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800747a:	f380 8811 	msr	BASEPRI, r0
 800747e:	f7ff fcfd 	bl	8006e7c <vTaskSwitchContext>
 8007482:	f04f 0000 	mov.w	r0, #0
 8007486:	f380 8811 	msr	BASEPRI, r0
 800748a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800748e:	6819      	ldr	r1, [r3, #0]
 8007490:	6808      	ldr	r0, [r1, #0]
 8007492:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007496:	f380 8809 	msr	PSP, r0
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	4770      	bx	lr

080074a0 <pxCurrentTCBConst>:
 80074a0:	20000ce4 	.word	0x20000ce4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop

080074a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	607b      	str	r3, [r7, #4]
}
 80074c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074c2:	f7ff fc21 	bl	8006d08 <xTaskIncrementTick>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074cc:	4b06      	ldr	r3, [pc, #24]	@ (80074e8 <SysTick_Handler+0x40>)
 80074ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	2300      	movs	r3, #0
 80074d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	f383 8811 	msr	BASEPRI, r3
}
 80074de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074e0:	bf00      	nop
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074f0:	4b0a      	ldr	r3, [pc, #40]	@ (800751c <vPortSetupTimerInterrupt+0x30>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007520 <vPortSetupTimerInterrupt+0x34>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074fc:	4b09      	ldr	r3, [pc, #36]	@ (8007524 <vPortSetupTimerInterrupt+0x38>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a09      	ldr	r2, [pc, #36]	@ (8007528 <vPortSetupTimerInterrupt+0x3c>)
 8007502:	fba2 2303 	umull	r2, r3, r2, r3
 8007506:	099b      	lsrs	r3, r3, #6
 8007508:	4a08      	ldr	r2, [pc, #32]	@ (800752c <vPortSetupTimerInterrupt+0x40>)
 800750a:	3b01      	subs	r3, #1
 800750c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800750e:	4b03      	ldr	r3, [pc, #12]	@ (800751c <vPortSetupTimerInterrupt+0x30>)
 8007510:	2207      	movs	r2, #7
 8007512:	601a      	str	r2, [r3, #0]
}
 8007514:	bf00      	nop
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr
 800751c:	e000e010 	.word	0xe000e010
 8007520:	e000e018 	.word	0xe000e018
 8007524:	20000000 	.word	0x20000000
 8007528:	10624dd3 	.word	0x10624dd3
 800752c:	e000e014 	.word	0xe000e014

08007530 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08a      	sub	sp, #40	@ 0x28
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007538:	2300      	movs	r3, #0
 800753a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800753c:	f7ff fb38 	bl	8006bb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007540:	4b5c      	ldr	r3, [pc, #368]	@ (80076b4 <pvPortMalloc+0x184>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007548:	f000 f924 	bl	8007794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800754c:	4b5a      	ldr	r3, [pc, #360]	@ (80076b8 <pvPortMalloc+0x188>)
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4013      	ands	r3, r2
 8007554:	2b00      	cmp	r3, #0
 8007556:	f040 8095 	bne.w	8007684 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01e      	beq.n	800759e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007560:	2208      	movs	r2, #8
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4413      	add	r3, r2
 8007566:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	2b00      	cmp	r3, #0
 8007570:	d015      	beq.n	800759e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f023 0307 	bic.w	r3, r3, #7
 8007578:	3308      	adds	r3, #8
 800757a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f003 0307 	and.w	r3, r3, #7
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00b      	beq.n	800759e <pvPortMalloc+0x6e>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	617b      	str	r3, [r7, #20]
}
 8007598:	bf00      	nop
 800759a:	bf00      	nop
 800759c:	e7fd      	b.n	800759a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d06f      	beq.n	8007684 <pvPortMalloc+0x154>
 80075a4:	4b45      	ldr	r3, [pc, #276]	@ (80076bc <pvPortMalloc+0x18c>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d86a      	bhi.n	8007684 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075ae:	4b44      	ldr	r3, [pc, #272]	@ (80076c0 <pvPortMalloc+0x190>)
 80075b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075b2:	4b43      	ldr	r3, [pc, #268]	@ (80076c0 <pvPortMalloc+0x190>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075b8:	e004      	b.n	80075c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d903      	bls.n	80075d6 <pvPortMalloc+0xa6>
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1f1      	bne.n	80075ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075d6:	4b37      	ldr	r3, [pc, #220]	@ (80076b4 <pvPortMalloc+0x184>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075dc:	429a      	cmp	r2, r3
 80075de:	d051      	beq.n	8007684 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2208      	movs	r2, #8
 80075e6:	4413      	add	r3, r2
 80075e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	1ad2      	subs	r2, r2, r3
 80075fa:	2308      	movs	r3, #8
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	429a      	cmp	r2, r3
 8007600:	d920      	bls.n	8007644 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4413      	add	r3, r2
 8007608:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <pvPortMalloc+0xfc>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	613b      	str	r3, [r7, #16]
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	e7fd      	b.n	8007628 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	1ad2      	subs	r2, r2, r3
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800763e:	69b8      	ldr	r0, [r7, #24]
 8007640:	f000 f90a 	bl	8007858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007644:	4b1d      	ldr	r3, [pc, #116]	@ (80076bc <pvPortMalloc+0x18c>)
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	4a1b      	ldr	r2, [pc, #108]	@ (80076bc <pvPortMalloc+0x18c>)
 8007650:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007652:	4b1a      	ldr	r3, [pc, #104]	@ (80076bc <pvPortMalloc+0x18c>)
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	4b1b      	ldr	r3, [pc, #108]	@ (80076c4 <pvPortMalloc+0x194>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d203      	bcs.n	8007666 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800765e:	4b17      	ldr	r3, [pc, #92]	@ (80076bc <pvPortMalloc+0x18c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a18      	ldr	r2, [pc, #96]	@ (80076c4 <pvPortMalloc+0x194>)
 8007664:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	4b13      	ldr	r3, [pc, #76]	@ (80076b8 <pvPortMalloc+0x188>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	431a      	orrs	r2, r3
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800767a:	4b13      	ldr	r3, [pc, #76]	@ (80076c8 <pvPortMalloc+0x198>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3301      	adds	r3, #1
 8007680:	4a11      	ldr	r2, [pc, #68]	@ (80076c8 <pvPortMalloc+0x198>)
 8007682:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007684:	f7ff faa2 	bl	8006bcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	f003 0307 	and.w	r3, r3, #7
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <pvPortMalloc+0x17a>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	60fb      	str	r3, [r7, #12]
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	e7fd      	b.n	80076a6 <pvPortMalloc+0x176>
	return pvReturn;
 80076aa:	69fb      	ldr	r3, [r7, #28]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3728      	adds	r7, #40	@ 0x28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	20001a20 	.word	0x20001a20
 80076b8:	20001a34 	.word	0x20001a34
 80076bc:	20001a24 	.word	0x20001a24
 80076c0:	20001a18 	.word	0x20001a18
 80076c4:	20001a28 	.word	0x20001a28
 80076c8:	20001a2c 	.word	0x20001a2c

080076cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d04f      	beq.n	800777e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076de:	2308      	movs	r3, #8
 80076e0:	425b      	negs	r3, r3
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	4413      	add	r3, r2
 80076e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	4b25      	ldr	r3, [pc, #148]	@ (8007788 <vPortFree+0xbc>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10b      	bne.n	8007712 <vPortFree+0x46>
	__asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	60fb      	str	r3, [r7, #12]
}
 800770c:	bf00      	nop
 800770e:	bf00      	nop
 8007710:	e7fd      	b.n	800770e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00b      	beq.n	8007732 <vPortFree+0x66>
	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	60bb      	str	r3, [r7, #8]
}
 800772c:	bf00      	nop
 800772e:	bf00      	nop
 8007730:	e7fd      	b.n	800772e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	4b14      	ldr	r3, [pc, #80]	@ (8007788 <vPortFree+0xbc>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4013      	ands	r3, r2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01e      	beq.n	800777e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d11a      	bne.n	800777e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	4b0e      	ldr	r3, [pc, #56]	@ (8007788 <vPortFree+0xbc>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	43db      	mvns	r3, r3
 8007752:	401a      	ands	r2, r3
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007758:	f7ff fa2a 	bl	8006bb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	4b0a      	ldr	r3, [pc, #40]	@ (800778c <vPortFree+0xc0>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4413      	add	r3, r2
 8007766:	4a09      	ldr	r2, [pc, #36]	@ (800778c <vPortFree+0xc0>)
 8007768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800776a:	6938      	ldr	r0, [r7, #16]
 800776c:	f000 f874 	bl	8007858 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007770:	4b07      	ldr	r3, [pc, #28]	@ (8007790 <vPortFree+0xc4>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	3301      	adds	r3, #1
 8007776:	4a06      	ldr	r2, [pc, #24]	@ (8007790 <vPortFree+0xc4>)
 8007778:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800777a:	f7ff fa27 	bl	8006bcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800777e:	bf00      	nop
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20001a34 	.word	0x20001a34
 800778c:	20001a24 	.word	0x20001a24
 8007790:	20001a30 	.word	0x20001a30

08007794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800779a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800779e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077a0:	4b27      	ldr	r3, [pc, #156]	@ (8007840 <prvHeapInit+0xac>)
 80077a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00c      	beq.n	80077c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3307      	adds	r3, #7
 80077b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0307 	bic.w	r3, r3, #7
 80077ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007840 <prvHeapInit+0xac>)
 80077c4:	4413      	add	r3, r2
 80077c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007844 <prvHeapInit+0xb0>)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007844 <prvHeapInit+0xb0>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	4413      	add	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077e0:	2208      	movs	r2, #8
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	1a9b      	subs	r3, r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0307 	bic.w	r3, r3, #7
 80077ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4a15      	ldr	r2, [pc, #84]	@ (8007848 <prvHeapInit+0xb4>)
 80077f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077f6:	4b14      	ldr	r3, [pc, #80]	@ (8007848 <prvHeapInit+0xb4>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2200      	movs	r2, #0
 80077fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077fe:	4b12      	ldr	r3, [pc, #72]	@ (8007848 <prvHeapInit+0xb4>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2200      	movs	r2, #0
 8007804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	1ad2      	subs	r2, r2, r3
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007814:	4b0c      	ldr	r3, [pc, #48]	@ (8007848 <prvHeapInit+0xb4>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	4a0a      	ldr	r2, [pc, #40]	@ (800784c <prvHeapInit+0xb8>)
 8007822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	4a09      	ldr	r2, [pc, #36]	@ (8007850 <prvHeapInit+0xbc>)
 800782a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800782c:	4b09      	ldr	r3, [pc, #36]	@ (8007854 <prvHeapInit+0xc0>)
 800782e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007832:	601a      	str	r2, [r3, #0]
}
 8007834:	bf00      	nop
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	bc80      	pop	{r7}
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	20000e18 	.word	0x20000e18
 8007844:	20001a18 	.word	0x20001a18
 8007848:	20001a20 	.word	0x20001a20
 800784c:	20001a28 	.word	0x20001a28
 8007850:	20001a24 	.word	0x20001a24
 8007854:	20001a34 	.word	0x20001a34

08007858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007860:	4b27      	ldr	r3, [pc, #156]	@ (8007900 <prvInsertBlockIntoFreeList+0xa8>)
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	e002      	b.n	800786c <prvInsertBlockIntoFreeList+0x14>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	429a      	cmp	r2, r3
 8007874:	d8f7      	bhi.n	8007866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	4413      	add	r3, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	429a      	cmp	r2, r3
 8007886:	d108      	bne.n	800789a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	441a      	add	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	441a      	add	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d118      	bne.n	80078e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4b14      	ldr	r3, [pc, #80]	@ (8007904 <prvInsertBlockIntoFreeList+0xac>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d00d      	beq.n	80078d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	441a      	add	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	e008      	b.n	80078e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007904 <prvInsertBlockIntoFreeList+0xac>)
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	e003      	b.n	80078e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d002      	beq.n	80078f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078f6:	bf00      	nop
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bc80      	pop	{r7}
 80078fe:	4770      	bx	lr
 8007900:	20001a18 	.word	0x20001a18
 8007904:	20001a20 	.word	0x20001a20

08007908 <TMC2209_setup>:
	chopConfig.bytes = CHOPPER_CONFIG_DEFAULT;
	TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
}

void TMC2209_setup()
{
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0
	gconfConfig.bytes = FALSE;
 800790c:	4b17      	ldr	r3, [pc, #92]	@ (800796c <TMC2209_setup+0x64>)
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]
	gconfConfig.I_scale_analog = TRUE;
 8007912:	4a16      	ldr	r2, [pc, #88]	@ (800796c <TMC2209_setup+0x64>)
 8007914:	7813      	ldrb	r3, [r2, #0]
 8007916:	f043 0301 	orr.w	r3, r3, #1
 800791a:	7013      	strb	r3, [r2, #0]
	gconfConfig.pdn_disable = TRUE;
 800791c:	4a13      	ldr	r2, [pc, #76]	@ (800796c <TMC2209_setup+0x64>)
 800791e:	7813      	ldrb	r3, [r2, #0]
 8007920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007924:	7013      	strb	r3, [r2, #0]
	gconfConfig.multistep_filt = TRUE;
 8007926:	4a11      	ldr	r2, [pc, #68]	@ (800796c <TMC2209_setup+0x64>)
 8007928:	7853      	ldrb	r3, [r2, #1]
 800792a:	f043 0301 	orr.w	r3, r3, #1
 800792e:	7053      	strb	r3, [r2, #1]
	gconfConfig.mstep_reg_select = TRUE;
 8007930:	4a0e      	ldr	r2, [pc, #56]	@ (800796c <TMC2209_setup+0x64>)
 8007932:	7813      	ldrb	r3, [r2, #0]
 8007934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007938:	7013      	strb	r3, [r2, #0]

	slaveConfig.conf = 0x00;
 800793a:	4a0d      	ldr	r2, [pc, #52]	@ (8007970 <TMC2209_setup+0x68>)
 800793c:	7853      	ldrb	r3, [r2, #1]
 800793e:	f36f 0303 	bfc	r3, #0, #4
 8007942:	7053      	strb	r3, [r2, #1]

	TMC2209_HAL_Write(TMC2209Reg_GCONF, gconfConfig.bytes);
 8007944:	4b09      	ldr	r3, [pc, #36]	@ (800796c <TMC2209_setup+0x64>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4619      	mov	r1, r3
 800794a:	2000      	movs	r0, #0
 800794c:	f000 f8de 	bl	8007b0c <TMC2209_HAL_Write>
	TMC2209_HAL_Write(TMC2209Reg_SLAVECONF, slaveConfig.bytes);
 8007950:	4b07      	ldr	r3, [pc, #28]	@ (8007970 <TMC2209_setup+0x68>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4619      	mov	r1, r3
 8007956:	2003      	movs	r0, #3
 8007958:	f000 f8d8 	bl	8007b0c <TMC2209_HAL_Write>
//	TMC2209_setMicrostep(TMC2209_Microsteps_1);
	TMC2209_disable();
 800795c:	f000 f828 	bl	80079b0 <TMC2209_disable>
	HAL_Delay(100);
 8007960:	2064      	movs	r0, #100	@ 0x64
 8007962:	f7f9 fa0d 	bl	8000d80 <HAL_Delay>
}
 8007966:	bf00      	nop
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20001a3c 	.word	0x20001a3c
 8007970:	20001a40 	.word	0x20001a40

08007974 <TMC2209_enable>:

void TMC2209_enable()
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8007978:	2200      	movs	r2, #0
 800797a:	2104      	movs	r1, #4
 800797c:	4808      	ldr	r0, [pc, #32]	@ (80079a0 <TMC2209_enable+0x2c>)
 800797e:	f7f9 ff35 	bl	80017ec <HAL_GPIO_WritePin>
	Driver_Enable = TRUE;
 8007982:	4b08      	ldr	r3, [pc, #32]	@ (80079a4 <TMC2209_enable+0x30>)
 8007984:	2201      	movs	r2, #1
 8007986:	701a      	strb	r2, [r3, #0]
	chopConfig.toff = toff_;
 8007988:	4b07      	ldr	r3, [pc, #28]	@ (80079a8 <TMC2209_enable+0x34>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	f003 030f 	and.w	r3, r3, #15
 8007990:	b2d9      	uxtb	r1, r3
 8007992:	4a06      	ldr	r2, [pc, #24]	@ (80079ac <TMC2209_enable+0x38>)
 8007994:	7813      	ldrb	r3, [r2, #0]
 8007996:	f361 0303 	bfi	r3, r1, #0, #4
 800799a:	7013      	strb	r3, [r2, #0]
}
 800799c:	bf00      	nop
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	40010800 	.word	0x40010800
 80079a4:	20001a44 	.word	0x20001a44
 80079a8:	20000010 	.word	0x20000010
 80079ac:	20001a38 	.word	0x20001a38

080079b0 <TMC2209_disable>:

void TMC2209_disable()
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80079b4:	2201      	movs	r2, #1
 80079b6:	2104      	movs	r1, #4
 80079b8:	4806      	ldr	r0, [pc, #24]	@ (80079d4 <TMC2209_disable+0x24>)
 80079ba:	f7f9 ff17 	bl	80017ec <HAL_GPIO_WritePin>
	Driver_Enable = FALSE;
 80079be:	4b06      	ldr	r3, [pc, #24]	@ (80079d8 <TMC2209_disable+0x28>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
	chopConfig.toff = TOFF_DISABLE;
 80079c4:	4a05      	ldr	r2, [pc, #20]	@ (80079dc <TMC2209_disable+0x2c>)
 80079c6:	7813      	ldrb	r3, [r2, #0]
 80079c8:	f36f 0303 	bfc	r3, #0, #4
 80079cc:	7013      	strb	r3, [r2, #0]
}
 80079ce:	bf00      	nop
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	40010800 	.word	0x40010800
 80079d8:	20001a44 	.word	0x20001a44
 80079dc:	20001a38 	.word	0x20001a38

080079e0 <TMC2209_readChopConfig>:
{
	chopConfig.mres = Microstep;
	TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
}
void TMC2209_readChopConfig(uint32_t* result)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
	uint32_t buffer = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]
	TMC2209_HAL_Read(TMC2209Reg_CHOPCONF, &buffer);
 80079ec:	f107 030c 	add.w	r3, r7, #12
 80079f0:	4619      	mov	r1, r3
 80079f2:	206c      	movs	r0, #108	@ 0x6c
 80079f4:	f000 f8c8 	bl	8007b88 <TMC2209_HAL_Read>
	*result = buffer;
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	601a      	str	r2, [r3, #0]
}
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
	...

08007a08 <HAL_TIM_PWM_PulseFinishedCallback>:
		PWM_Pulse_Complete = FALSE;
	}
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a18:	d106      	bne.n	8007a28 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
		HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7fd f89b 	bl	8004b58 <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 8007a22:	4b03      	ldr	r3, [pc, #12]	@ (8007a30 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8007a24:	2201      	movs	r2, #1
 8007a26:	701a      	strb	r2, [r3, #0]
	}
}
 8007a28:	bf00      	nop
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20000011 	.word	0x20000011

08007a34 <calculateCRC>:
#include "../Inc/TMC2209_HAL.h"

extern UART_HandleTypeDef huart1;

static void calculateCRC(uint8_t* datagram, uint8_t datagram_len)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
	int i,j;
	uint8_t *crc = datagram + (datagram_len - 1);
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	4413      	add	r3, r2
 8007a48:	60bb      	str	r3, [r7, #8]
	uint8_t currentByte;
	*crc = 0;
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (datagram_len - 1); i++) {
 8007a50:	2300      	movs	r3, #0
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	e02e      	b.n	8007ab4 <calculateCRC+0x80>
		currentByte = datagram[i];
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < 8; j++) {
 8007a60:	2300      	movs	r3, #0
 8007a62:	613b      	str	r3, [r7, #16]
 8007a64:	e020      	b.n	8007aa8 <calculateCRC+0x74>
			if ((*crc >> 7) ^ (currentByte & 0x01))
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	09db      	lsrs	r3, r3, #7
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	461a      	mov	r2, r3
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d00a      	beq.n	8007a90 <calculateCRC+0x5c>
				*crc = (*crc << 1) ^ 0x07;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	b25b      	sxtb	r3, r3
 8007a82:	f083 0307 	eor.w	r3, r3, #7
 8007a86:	b25b      	sxtb	r3, r3
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	e005      	b.n	8007a9c <calculateCRC+0x68>
			else
				*crc = (*crc << 1);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	701a      	strb	r2, [r3, #0]
			currentByte = currentByte >> 1;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	085b      	lsrs	r3, r3, #1
 8007aa0:	73fb      	strb	r3, [r7, #15]
		for (j = 0; j < 8; j++) {
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	613b      	str	r3, [r7, #16]
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	2b07      	cmp	r3, #7
 8007aac:	dddb      	ble.n	8007a66 <calculateCRC+0x32>
	for (i = 0; i < (datagram_len - 1); i++) {
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	78fb      	ldrb	r3, [r7, #3]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	dbcb      	blt.n	8007a56 <calculateCRC+0x22>
		}
	}
}
 8007abe:	bf00      	nop
 8007ac0:	bf00      	nop
 8007ac2:	371c      	adds	r7, #28
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bc80      	pop	{r7}
 8007ac8:	4770      	bx	lr

08007aca <byteswap>:
static void byteswap (uint8_t data[4])
{
 8007aca:	b480      	push	{r7}
 8007acc:	b085      	sub	sp, #20
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
    uint8_t tmp;

    tmp = data[0];
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	73fb      	strb	r3, [r7, #15]
    data[0] = data[3];
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	78da      	ldrb	r2, [r3, #3]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	701a      	strb	r2, [r3, #0]
    data[3] = tmp;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3303      	adds	r3, #3
 8007ae4:	7bfa      	ldrb	r2, [r7, #15]
 8007ae6:	701a      	strb	r2, [r3, #0]
    tmp = data[1];
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	73fb      	strb	r3, [r7, #15]
    data[1] = data[2];
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3301      	adds	r3, #1
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	7892      	ldrb	r2, [r2, #2]
 8007af6:	701a      	strb	r2, [r3, #0]
    data[2] = tmp;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3302      	adds	r3, #2
 8007afc:	7bfa      	ldrb	r2, [r7, #15]
 8007afe:	701a      	strb	r2, [r3, #0]
}
 8007b00:	bf00      	nop
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bc80      	pop	{r7}
 8007b08:	4770      	bx	lr
	...

08007b0c <TMC2209_HAL_Write>:

HAL_StatusTypeDef TMC2209_HAL_Write(uint8_t reg, uint32_t data)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	6039      	str	r1, [r7, #0]
 8007b16:	71fb      	strb	r3, [r7, #7]
	TMC2209_Write_Datagram_t datagram;
	datagram.data = 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	613b      	str	r3, [r7, #16]
	datagram.message.sync = 0x05;
 8007b20:	2305      	movs	r3, #5
 8007b22:	733b      	strb	r3, [r7, #12]
	datagram.message.slave = 0x00;
 8007b24:	2300      	movs	r3, #0
 8007b26:	737b      	strb	r3, [r7, #13]
	datagram.message.address.idx = reg;
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	f362 0306 	bfi	r3, r2, #0, #7
 8007b36:	73bb      	strb	r3, [r7, #14]
	datagram.message.address.write = REG_WRITE;
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b3e:	73bb      	strb	r3, [r7, #14]
	datagram.message.payload.value = data;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	f8c7 300f 	str.w	r3, [r7, #15]
	byteswap(datagram.message.payload.data);
 8007b46:	f107 030c 	add.w	r3, r7, #12
 8007b4a:	3303      	adds	r3, #3
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7ff ffbc 	bl	8007aca <byteswap>

	calculateCRC(datagram.bytes, sizeof(TMC2209_Write_Datagram_t));
 8007b52:	f107 030c 	add.w	r3, r7, #12
 8007b56:	2108      	movs	r1, #8
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff ff6b 	bl	8007a34 <calculateCRC>
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8007b5e:	4809      	ldr	r0, [pc, #36]	@ (8007b84 <TMC2209_HAL_Write+0x78>)
 8007b60:	f7fe f989 	bl	8005e76 <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, datagram.bytes, sizeof(TMC2209_Write_Datagram_t), HAL_MAX_DELAY);
 8007b64:	f107 010c 	add.w	r1, r7, #12
 8007b68:	f04f 33ff 	mov.w	r3, #4294967295
 8007b6c:	2208      	movs	r2, #8
 8007b6e:	4805      	ldr	r0, [pc, #20]	@ (8007b84 <TMC2209_HAL_Write+0x78>)
 8007b70:	f7fd fd54 	bl	800561c <HAL_UART_Transmit>
 8007b74:	4603      	mov	r3, r0
 8007b76:	75fb      	strb	r3, [r7, #23]

	return status;
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3718      	adds	r7, #24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	20000c14 	.word	0x20000c14

08007b88 <TMC2209_HAL_Read>:
HAL_StatusTypeDef TMC2209_HAL_Read(uint8_t reg, uint32_t* result)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08a      	sub	sp, #40	@ 0x28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	6039      	str	r1, [r7, #0]
 8007b92:	71fb      	strb	r3, [r7, #7]
	TMC2209_Read_Datagram_t datagram;
	TMC2209_Write_Datagram_t res;

	datagram.data = 0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	61fb      	str	r3, [r7, #28]
	res.data = 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	617b      	str	r3, [r7, #20]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	61bb      	str	r3, [r7, #24]
	datagram.message.sync = 0x05;
 8007ba0:	2305      	movs	r3, #5
 8007ba2:	773b      	strb	r3, [r7, #28]
	datagram.message.slave = 0x00;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	777b      	strb	r3, [r7, #29]
	datagram.message.address.idx = reg & 0x7F;
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	7fbb      	ldrb	r3, [r7, #30]
 8007bb2:	f362 0306 	bfi	r3, r2, #0, #7
 8007bb6:	77bb      	strb	r3, [r7, #30]
	datagram.message.address.write = REG_READ;
 8007bb8:	7fbb      	ldrb	r3, [r7, #30]
 8007bba:	f36f 13c7 	bfc	r3, #7, #1
 8007bbe:	77bb      	strb	r3, [r7, #30]
	calculateCRC(datagram.bytes, sizeof(TMC2209_Read_Datagram_t));
 8007bc0:	f107 031c 	add.w	r3, r7, #28
 8007bc4:	2104      	movs	r1, #4
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff ff34 	bl	8007a34 <calculateCRC>

	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8007bcc:	482b      	ldr	r0, [pc, #172]	@ (8007c7c <TMC2209_HAL_Read+0xf4>)
 8007bce:	f7fe f952 	bl	8005e76 <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef wstatus = HAL_UART_Transmit(&huart1, datagram.bytes, sizeof(TMC2209_Read_Datagram_t), HAL_MAX_DELAY);
 8007bd2:	f107 011c 	add.w	r1, r7, #28
 8007bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bda:	2204      	movs	r2, #4
 8007bdc:	4827      	ldr	r0, [pc, #156]	@ (8007c7c <TMC2209_HAL_Read+0xf4>)
 8007bde:	f7fd fd1d 	bl	800561c <HAL_UART_Transmit>
 8007be2:	4603      	mov	r3, r0
 8007be4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if(wstatus == HAL_OK){
 8007be8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d13e      	bne.n	8007c6e <TMC2209_HAL_Read+0xe6>
		uint8_t buffer[8] = {0};
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < sizeof(buffer) ; i++){
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bfc:	e00e      	b.n	8007c1c <TMC2209_HAL_Read+0x94>
			HAL_HalfDuplex_EnableReceiver(&huart1);
 8007bfe:	481f      	ldr	r0, [pc, #124]	@ (8007c7c <TMC2209_HAL_Read+0xf4>)
 8007c00:	f7fe f96c 	bl	8005edc <HAL_HalfDuplex_EnableReceiver>
			HAL_UART_Receive(&huart1, &buffer[i], sizeof(buffer), 100);
 8007c04:	f107 020c 	add.w	r2, r7, #12
 8007c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0a:	18d1      	adds	r1, r2, r3
 8007c0c:	2364      	movs	r3, #100	@ 0x64
 8007c0e:	2208      	movs	r2, #8
 8007c10:	481a      	ldr	r0, [pc, #104]	@ (8007c7c <TMC2209_HAL_Read+0xf4>)
 8007c12:	f7fd fd8e 	bl	8005732 <HAL_UART_Receive>
		for(int i = 0; i < sizeof(buffer) ; i++){
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	3301      	adds	r3, #1
 8007c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1e:	2b07      	cmp	r3, #7
 8007c20:	d9ed      	bls.n	8007bfe <TMC2209_HAL_Read+0x76>
		}

		memcpy(res.bytes, buffer, sizeof(buffer));
 8007c22:	f107 0314 	add.w	r3, r7, #20
 8007c26:	f107 020c 	add.w	r2, r7, #12
 8007c2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c2e:	e883 0003 	stmia.w	r3, {r0, r1}
		uint8_t crc = res.message.crc;
 8007c32:	7efb      	ldrb	r3, [r7, #27]
 8007c34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		calculateCRC(res.bytes, sizeof(	TMC2209_Write_Datagram_t));
 8007c38:	f107 0314 	add.w	r3, r7, #20
 8007c3c:	2108      	movs	r1, #8
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7ff fef8 	bl	8007a34 <calculateCRC>
		if(res.message.slave == 0xFF && crc == res.message.crc){
 8007c44:	7d7b      	ldrb	r3, [r7, #21]
 8007c46:	2bff      	cmp	r3, #255	@ 0xff
 8007c48:	d111      	bne.n	8007c6e <TMC2209_HAL_Read+0xe6>
 8007c4a:	7efb      	ldrb	r3, [r7, #27]
 8007c4c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d10c      	bne.n	8007c6e <TMC2209_HAL_Read+0xe6>
			uint8_t temp_var[4];
			memcpy(temp_var,res.message.payload.data, sizeof(temp_var));
 8007c54:	f8d7 3017 	ldr.w	r3, [r7, #23]
 8007c58:	60bb      	str	r3, [r7, #8]
			byteswap(temp_var);
 8007c5a:	f107 0308 	add.w	r3, r7, #8
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff ff33 	bl	8007aca <byteswap>
			*result = *(uint32_t*)temp_var;
 8007c64:	f107 0308 	add.w	r3, r7, #8
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	601a      	str	r2, [r3, #0]
		}
	}
	return wstatus;
 8007c6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3728      	adds	r7, #40	@ 0x28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20000c14 	.word	0x20000c14

08007c80 <__malloc_lock>:
 8007c80:	4801      	ldr	r0, [pc, #4]	@ (8007c88 <__malloc_lock+0x8>)
 8007c82:	f000 b88b 	b.w	8007d9c <__retarget_lock_acquire_recursive>
 8007c86:	bf00      	nop
 8007c88:	20001b84 	.word	0x20001b84

08007c8c <__malloc_unlock>:
 8007c8c:	4801      	ldr	r0, [pc, #4]	@ (8007c94 <__malloc_unlock+0x8>)
 8007c8e:	f000 b886 	b.w	8007d9e <__retarget_lock_release_recursive>
 8007c92:	bf00      	nop
 8007c94:	20001b84 	.word	0x20001b84

08007c98 <memset>:
 8007c98:	4603      	mov	r3, r0
 8007c9a:	4402      	add	r2, r0
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d100      	bne.n	8007ca2 <memset+0xa>
 8007ca0:	4770      	bx	lr
 8007ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ca6:	e7f9      	b.n	8007c9c <memset+0x4>

08007ca8 <_reclaim_reent>:
 8007ca8:	4b29      	ldr	r3, [pc, #164]	@ (8007d50 <_reclaim_reent+0xa8>)
 8007caa:	b570      	push	{r4, r5, r6, lr}
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4283      	cmp	r3, r0
 8007cb2:	d04b      	beq.n	8007d4c <_reclaim_reent+0xa4>
 8007cb4:	69c3      	ldr	r3, [r0, #28]
 8007cb6:	b1ab      	cbz	r3, 8007ce4 <_reclaim_reent+0x3c>
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	b16b      	cbz	r3, 8007cd8 <_reclaim_reent+0x30>
 8007cbc:	2500      	movs	r5, #0
 8007cbe:	69e3      	ldr	r3, [r4, #28]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	5959      	ldr	r1, [r3, r5]
 8007cc4:	2900      	cmp	r1, #0
 8007cc6:	d13b      	bne.n	8007d40 <_reclaim_reent+0x98>
 8007cc8:	3504      	adds	r5, #4
 8007cca:	2d80      	cmp	r5, #128	@ 0x80
 8007ccc:	d1f7      	bne.n	8007cbe <_reclaim_reent+0x16>
 8007cce:	69e3      	ldr	r3, [r4, #28]
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	68d9      	ldr	r1, [r3, #12]
 8007cd4:	f000 f864 	bl	8007da0 <_free_r>
 8007cd8:	69e3      	ldr	r3, [r4, #28]
 8007cda:	6819      	ldr	r1, [r3, #0]
 8007cdc:	b111      	cbz	r1, 8007ce4 <_reclaim_reent+0x3c>
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f000 f85e 	bl	8007da0 <_free_r>
 8007ce4:	6961      	ldr	r1, [r4, #20]
 8007ce6:	b111      	cbz	r1, 8007cee <_reclaim_reent+0x46>
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f000 f859 	bl	8007da0 <_free_r>
 8007cee:	69e1      	ldr	r1, [r4, #28]
 8007cf0:	b111      	cbz	r1, 8007cf8 <_reclaim_reent+0x50>
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 f854 	bl	8007da0 <_free_r>
 8007cf8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007cfa:	b111      	cbz	r1, 8007d02 <_reclaim_reent+0x5a>
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f000 f84f 	bl	8007da0 <_free_r>
 8007d02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d04:	b111      	cbz	r1, 8007d0c <_reclaim_reent+0x64>
 8007d06:	4620      	mov	r0, r4
 8007d08:	f000 f84a 	bl	8007da0 <_free_r>
 8007d0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007d0e:	b111      	cbz	r1, 8007d16 <_reclaim_reent+0x6e>
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 f845 	bl	8007da0 <_free_r>
 8007d16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007d18:	b111      	cbz	r1, 8007d20 <_reclaim_reent+0x78>
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f000 f840 	bl	8007da0 <_free_r>
 8007d20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007d22:	b111      	cbz	r1, 8007d2a <_reclaim_reent+0x82>
 8007d24:	4620      	mov	r0, r4
 8007d26:	f000 f83b 	bl	8007da0 <_free_r>
 8007d2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007d2c:	b111      	cbz	r1, 8007d34 <_reclaim_reent+0x8c>
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f000 f836 	bl	8007da0 <_free_r>
 8007d34:	6a23      	ldr	r3, [r4, #32]
 8007d36:	b14b      	cbz	r3, 8007d4c <_reclaim_reent+0xa4>
 8007d38:	4620      	mov	r0, r4
 8007d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d3e:	4718      	bx	r3
 8007d40:	680e      	ldr	r6, [r1, #0]
 8007d42:	4620      	mov	r0, r4
 8007d44:	f000 f82c 	bl	8007da0 <_free_r>
 8007d48:	4631      	mov	r1, r6
 8007d4a:	e7bb      	b.n	8007cc4 <_reclaim_reent+0x1c>
 8007d4c:	bd70      	pop	{r4, r5, r6, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000014 	.word	0x20000014

08007d54 <__libc_init_array>:
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	2600      	movs	r6, #0
 8007d58:	4d0c      	ldr	r5, [pc, #48]	@ (8007d8c <__libc_init_array+0x38>)
 8007d5a:	4c0d      	ldr	r4, [pc, #52]	@ (8007d90 <__libc_init_array+0x3c>)
 8007d5c:	1b64      	subs	r4, r4, r5
 8007d5e:	10a4      	asrs	r4, r4, #2
 8007d60:	42a6      	cmp	r6, r4
 8007d62:	d109      	bne.n	8007d78 <__libc_init_array+0x24>
 8007d64:	f000 f864 	bl	8007e30 <_init>
 8007d68:	2600      	movs	r6, #0
 8007d6a:	4d0a      	ldr	r5, [pc, #40]	@ (8007d94 <__libc_init_array+0x40>)
 8007d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8007d98 <__libc_init_array+0x44>)
 8007d6e:	1b64      	subs	r4, r4, r5
 8007d70:	10a4      	asrs	r4, r4, #2
 8007d72:	42a6      	cmp	r6, r4
 8007d74:	d105      	bne.n	8007d82 <__libc_init_array+0x2e>
 8007d76:	bd70      	pop	{r4, r5, r6, pc}
 8007d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d7c:	4798      	blx	r3
 8007d7e:	3601      	adds	r6, #1
 8007d80:	e7ee      	b.n	8007d60 <__libc_init_array+0xc>
 8007d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d86:	4798      	blx	r3
 8007d88:	3601      	adds	r6, #1
 8007d8a:	e7f2      	b.n	8007d72 <__libc_init_array+0x1e>
 8007d8c:	08007ef4 	.word	0x08007ef4
 8007d90:	08007ef4 	.word	0x08007ef4
 8007d94:	08007ef4 	.word	0x08007ef4
 8007d98:	08007ef8 	.word	0x08007ef8

08007d9c <__retarget_lock_acquire_recursive>:
 8007d9c:	4770      	bx	lr

08007d9e <__retarget_lock_release_recursive>:
 8007d9e:	4770      	bx	lr

08007da0 <_free_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4605      	mov	r5, r0
 8007da4:	2900      	cmp	r1, #0
 8007da6:	d040      	beq.n	8007e2a <_free_r+0x8a>
 8007da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dac:	1f0c      	subs	r4, r1, #4
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bfb8      	it	lt
 8007db2:	18e4      	addlt	r4, r4, r3
 8007db4:	f7ff ff64 	bl	8007c80 <__malloc_lock>
 8007db8:	4a1c      	ldr	r2, [pc, #112]	@ (8007e2c <_free_r+0x8c>)
 8007dba:	6813      	ldr	r3, [r2, #0]
 8007dbc:	b933      	cbnz	r3, 8007dcc <_free_r+0x2c>
 8007dbe:	6063      	str	r3, [r4, #4]
 8007dc0:	6014      	str	r4, [r2, #0]
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dc8:	f7ff bf60 	b.w	8007c8c <__malloc_unlock>
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	d908      	bls.n	8007de2 <_free_r+0x42>
 8007dd0:	6820      	ldr	r0, [r4, #0]
 8007dd2:	1821      	adds	r1, r4, r0
 8007dd4:	428b      	cmp	r3, r1
 8007dd6:	bf01      	itttt	eq
 8007dd8:	6819      	ldreq	r1, [r3, #0]
 8007dda:	685b      	ldreq	r3, [r3, #4]
 8007ddc:	1809      	addeq	r1, r1, r0
 8007dde:	6021      	streq	r1, [r4, #0]
 8007de0:	e7ed      	b.n	8007dbe <_free_r+0x1e>
 8007de2:	461a      	mov	r2, r3
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	b10b      	cbz	r3, 8007dec <_free_r+0x4c>
 8007de8:	42a3      	cmp	r3, r4
 8007dea:	d9fa      	bls.n	8007de2 <_free_r+0x42>
 8007dec:	6811      	ldr	r1, [r2, #0]
 8007dee:	1850      	adds	r0, r2, r1
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	d10b      	bne.n	8007e0c <_free_r+0x6c>
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	4401      	add	r1, r0
 8007df8:	1850      	adds	r0, r2, r1
 8007dfa:	4283      	cmp	r3, r0
 8007dfc:	6011      	str	r1, [r2, #0]
 8007dfe:	d1e0      	bne.n	8007dc2 <_free_r+0x22>
 8007e00:	6818      	ldr	r0, [r3, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	4408      	add	r0, r1
 8007e06:	6010      	str	r0, [r2, #0]
 8007e08:	6053      	str	r3, [r2, #4]
 8007e0a:	e7da      	b.n	8007dc2 <_free_r+0x22>
 8007e0c:	d902      	bls.n	8007e14 <_free_r+0x74>
 8007e0e:	230c      	movs	r3, #12
 8007e10:	602b      	str	r3, [r5, #0]
 8007e12:	e7d6      	b.n	8007dc2 <_free_r+0x22>
 8007e14:	6820      	ldr	r0, [r4, #0]
 8007e16:	1821      	adds	r1, r4, r0
 8007e18:	428b      	cmp	r3, r1
 8007e1a:	bf01      	itttt	eq
 8007e1c:	6819      	ldreq	r1, [r3, #0]
 8007e1e:	685b      	ldreq	r3, [r3, #4]
 8007e20:	1809      	addeq	r1, r1, r0
 8007e22:	6021      	streq	r1, [r4, #0]
 8007e24:	6063      	str	r3, [r4, #4]
 8007e26:	6054      	str	r4, [r2, #4]
 8007e28:	e7cb      	b.n	8007dc2 <_free_r+0x22>
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	20001a48 	.word	0x20001a48

08007e30 <_init>:
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	bf00      	nop
 8007e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e36:	bc08      	pop	{r3}
 8007e38:	469e      	mov	lr, r3
 8007e3a:	4770      	bx	lr

08007e3c <_fini>:
 8007e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3e:	bf00      	nop
 8007e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e42:	bc08      	pop	{r3}
 8007e44:	469e      	mov	lr, r3
 8007e46:	4770      	bx	lr
